uint64_t AVE_DW_Init(void)
{
  int v0;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v3;
  uint64_t v4;
  int v5;
  __uint64_t v6;
  const char *v7;
  __uint64_t v8;
  const char *v10;
  const char *v11;

  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v0 = AVE_Log_CheckConsole(0x2Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 44, LevelStr, "AVE_DW_Init");
      v3 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v10, "AVE_DW_Init");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 44, LevelStr, "AVE_DW_Init");
    }
  }
  AVE_DW_Default((uint64_t)&gs_sAVE_DW_Cfg);
  v4 = AVE_DW_Retrieve((uint64_t)&gs_sAVE_DW_Cfg);
  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v5 = AVE_Log_CheckConsole(0x2Cu);
    v6 = AVE_GetCurrTime();
    v7 = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v6, 44, v7, "AVE_DW_Init", v4);
      v8 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v8, 44, v11, "AVE_DW_Init", v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v6, 44, v7, "AVE_DW_Init", v4);
    }
  }
  return v4;
}

uint64_t AVE_DW_Retrieve(uint64_t a1)
{
  uint64_t Int32;
  int v4;

  v4 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_DWMode", &v4))
    *(_DWORD *)a1 = v4;
  if (!AVE_DW_GetInt32(0, "AVE_DefaultCfg", &v4))
    *(_BYTE *)(a1 + 4) = v4 != 0;
  AVE_DW_RetrieveFeature((_QWORD *)a1);
  AVE_DW_RetrievePerf((_DWORD *)a1);
  AVE_DW_RetrieveDump(a1);
  AVE_DW_RetrieveLog(a1 + 920);
  AVE_DW_RetrieveAlg(a1);
  AVE_DW_RetrieveHw((_DWORD *)a1);
  AVE_DW_RetrieveMCTF((_DWORD *)a1);
  if (!AVE_DW_GetInt32(0, "AVE_Usage", &v4))
    *(_DWORD *)(a1 + 1372) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_PropertyMode", &v4))
    *(_DWORD *)(a1 + 1376) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_SourceFrameCount", &v4))
    *(_DWORD *)(a1 + 1380) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_CmdTimeOutMode", &v4))
    *(_DWORD *)(a1 + 1384) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_FwHeartBeatTimerPanic", &v4))
    *(_DWORD *)(a1 + 1388) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_SchedPolicy", &v4))
    *(_DWORD *)(a1 + 1392) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_OutputBufNum", &v4))
    *(_DWORD *)(a1 + 1396) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_OutputBufSize", &v4))
    *(_DWORD *)(a1 + 1400) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_SNR", &v4))
    *(_DWORD *)(a1 + 1404) = v4;
  Int32 = AVE_DW_GetInt32(0, "AVE_TimeStats_MaxCnt", &v4);
  if (!(_DWORD)Int32)
    *(_DWORD *)(a1 + 1408) = v4;
  AVE_DW_RetrieveDeprecatedKeys((_DWORD *)a1);
  return Int32;
}

uint64_t AVE_DW_GetInt32(const char *a1, const char *a2, int *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t Int32;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetInt32", 424, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  Int32 = AVE_CFPref_GetInt32(v7, v8, a3);
  if (!(_DWORD)Int32)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = Int32;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetInt32(v7, v9, a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetInt32(CFStringRef applicationID, CFStringRef key, int *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  CFTypeID v14;
  const char *Str;
  const char *v17;
  _QWORD valuePtr[3];

  valuePtr[2] = *MEMORY[0x1E0C80C00];
  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, valuePtr))
        {
          v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          memset(valuePtr, 0, 13);
          Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 13);
          if (Str)
          {
            v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v10 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetInt32", 1193, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v13 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_RetrieveDeprecatedKeys(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  BOOL v9;

  v9 = 0;
  v8 = 0;
  if (!AVE_DW_GetBool(0, "AVE_EnableLossless", &v9))
  {
    v2 = 6;
    if (!v9)
      v2 = 8;
    *(_QWORD *)&a1[v2] |= 0x200uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableLambdaMod", &v8))
  {
    v3 = 290;
    if (!v8)
      v3 = 292;
    *(_QWORD *)&a1[v3] |= 0x1000000uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableQPMod", &v8))
  {
    if (v8)
      a1[308] |= 1u;
    else
      a1[309] |= 1u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_CodedBuffersOverride", &v8))
    a1[349] = v8;
  if (!AVE_DW_GetInt32(0, "AVE_FrameQP", &v8))
  {
    v4 = v8;
    a1[282] = v8;
    a1[283] = v4;
    a1[284] = v4;
  }
  if (!AVE_DW_GetInt32(0, "AVE_LookAheadFrames", &v8))
    a1[302] = v8;
  if (!AVE_DW_GetInt32(0, "AVE_MaximizePowerEfficiency", &v8))
  {
    if (v8)
      a1[14] |= 8u;
    else
      a1[15] |= 8u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_UseCAVLCBits", &v8))
  {
    if (v8)
      a1[14] |= 1u;
    else
      a1[15] |= 1u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_EnableMCTF", &v8))
  {
    v5 = 6;
    if (!v8)
      v5 = 8;
    *(_QWORD *)&a1[v5] |= 0x20uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_FigEncodeTime", &v8))
  {
    v6 = 6;
    if (!v8)
      v6 = 8;
    *(_QWORD *)&a1[v6] |= 0x400000uLL;
  }
  if (!AVE_DW_GetInt32(0, "AVE_AverageBitRate", &v8))
    a1[295] = v8;
  if (!AVE_DW_GetInt32(0, "AVE_Bframes", &v8))
    a1[312] = v8;
  if (!AVE_DW_GetInt32(0, "AVE_EnableInputYUVDump", &v8) && v8)
    a1[196] |= 1u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableOutputDump", &v8) && v8)
    a1[196] |= 2u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableISPMetadataDump", &v8) && v8)
    a1[196] |= 4u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableMVStatsDump", &v8) && v8)
    a1[196] |= 8u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableMultiPassStatsDump", &v8) && v8)
    a1[196] |= 0x10u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableFrameStatsDump", &v8) && v8)
    a1[196] |= 0x20u;
  if (!AVE_DW_GetInt32(0, "AVE_EnableFWFrameStatsDump", &v8) && v8)
    a1[196] |= 0x40u;
  result = AVE_DW_GetInt32(0, "AVE_EnableMCTFFrameStatsDump", &v8);
  if (!(_DWORD)result)
  {
    if (v8)
      a1[196] |= 0x80u;
  }
  return result;
}

uint64_t AVE_DW_RetrieveFeature(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  v3 = 0;
  if (!AVE_DW_GetUInt64(0, "AVE_CfgOn", &v3))
    a1[1] = v3;
  if (!AVE_DW_GetUInt64(0, "AVE_CfgOff", &v3))
    a1[2] = v3;
  if (!AVE_DW_GetUInt64(0, "AVE_FeatureOn", &v3))
    a1[3] = v3;
  if (!AVE_DW_GetUInt64(0, "AVE_FeatureOff", &v3))
    a1[4] = v3;
  if (!AVE_DW_GetUInt64(0, "AVE_HwFeatureOn", &v3))
    a1[5] = v3;
  result = AVE_DW_GetUInt64(0, "AVE_HwFeatureOff", &v3);
  if (!(_DWORD)result)
    a1[6] = v3;
  return result;
}

uint64_t AVE_DW_GetUInt64(const char *a1, const char *a2, unint64_t *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t UInt64;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetUInt64", 353, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  UInt64 = AVE_CFPref_GetUInt64(v7, v8, a3);
  if (!(_DWORD)UInt64)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = UInt64;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetUInt64(v7, v9, a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%llx\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%llx", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_RetrieveDPM(int *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  int v9;

  v9 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_DPM_Mode", &v9))
    *a1 = v9 | 0x100;
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_IOPMin", &v9))
  {
    v2 = v9;
    if (v9 <= 1)
      v2 = 1;
    if (v2 >= 4)
      v2 = 4;
    a1[1] |= 1u;
    a1[2] = v2;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_IOPMax", &v9))
  {
    v3 = v9;
    if (v9 <= 1)
      v3 = 1;
    if (v3 >= 4)
      v3 = 4;
    a1[3] = v3;
    a1[1] |= 0x10000u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_DCSMin", &v9))
  {
    v4 = v9;
    if (v9 <= 1)
      v4 = 1;
    if (v4 >= 4)
      v4 = 4;
    a1[4] = v4;
    a1[1] |= 2u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_DCSMax", &v9))
  {
    v5 = v9;
    if (v9 <= 1)
      v5 = 1;
    if (v5 >= 4)
      v5 = 4;
    a1[5] = v5;
    a1[1] |= 0x20000u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DPM_PL_FABMin", &v9))
  {
    v6 = v9;
    if (v9 <= 1)
      v6 = 1;
    if (v6 >= 4)
      v6 = 4;
    a1[6] = v6;
    a1[1] |= 4u;
  }
  result = AVE_DW_GetInt32(0, "AVE_DPM_PL_FABMax", &v9);
  if (!(_DWORD)result)
  {
    v8 = v9;
    if (v9 <= 1)
      v8 = 1;
    if (v8 >= 4)
      v8 = 4;
    a1[7] = v8;
    a1[1] |= 0x40000u;
  }
  return result;
}

uint64_t AVE_DW_GetUInt32(const char *a1, const char *a2, unsigned int *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t UInt32;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetUInt32", 281, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  UInt32 = AVE_CFPref_GetUInt32(v7, v8, a3);
  if (!(_DWORD)UInt32)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = UInt32;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetUInt32(v7, v9, a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = 0x%x\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = 0x%x", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_GetInt64(const char *a1, const char *a2, uint64_t *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t Int64;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetInt64", 496, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  Int64 = AVE_CFPref_GetInt64(v7, v8, (uintmax_t *)a3);
  if (!(_DWORD)Int64)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = Int64;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetInt64(v7, v9, (uintmax_t *)a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lld\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lld", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_DW_GetStr(const char *a1, const char *a2, char *a3, int a4)
{
  const char *v8;
  const __CFString *v9;
  const __CFString *v10;
  CFStringRef v11;
  uint64_t Str;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  char cStr[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3 || a4 <= 0)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v22 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", CurrTime, 44, LevelStr, "AVE_DW_GetStr", 68, "pKey != __null && pVal != __null && num > 0", a1, a2, a3, a4);
        v25 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v25, 44, v31, "AVE_DW_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", CurrTime, 44, LevelStr, "AVE_DW_GetStr");
      }
    }
    return 4294966295;
  }
  if (a1)
    v8 = a1;
  else
    v8 = "com.apple.coremedia";
  v9 = CFStringCreateWithCString(0, v8, 0);
  v10 = CFStringCreateWithCString(0, a2, 0);
  v11 = v10;
  if (!v9 || !v10)
  {
    v18 = 4294966293;
    if (!v9)
    {
      if (!v10)
        return v18;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  Str = AVE_CFPref_GetStr(v9, v10, a3, a4);
  if (!(_DWORD)Str)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v18 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (!(_DWORD)v18)
      {
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v26, 44, v27, a2, a3);
        goto LABEL_30;
      }
      printf("%lld %d AVE %s: defaults write %s = %s\n", v26, 44, v27, a2, a3);
      v28 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: defaults write %s = %s", v28, 44, v32, a2, a3);
    }
    goto LABEL_29;
  }
  v18 = Str;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)cStr = 0u;
  v35 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v13, v14, v15, v16, v17, (_BYTE)a2 + 3);
  CFRelease(v11);
  v11 = CFStringCreateWithCString(0, cStr, 0);
  if (v11)
  {
    v18 = AVE_CFPref_GetStr(v9, v11, a3, a4);
    if (!(_DWORD)v18)
    {
      if (AVE_Log_CheckLevel(0x2Cu, 6))
      {
        v19 = AVE_Log_CheckConsole(0x2Cu);
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(6);
        if (v19)
        {
          printf("%lld %d AVE %s: defaults write %s = %s\n", v20, 44, v21, cStr, a3);
          v20 = AVE_GetCurrTime();
          v33 = a3;
          v30 = AVE_Log_GetLevelStr(6);
        }
        else
        {
          v33 = a3;
          v30 = v21;
        }
        syslog(3, "%lld %d AVE %s: defaults write %s = %s", v20, 44, v30, cStr, v33);
      }
LABEL_29:
      v18 = 0;
    }
  }
LABEL_30:
  CFRelease(v9);
  if (v11)
LABEL_31:
    CFRelease(v11);
  return v18;
}

uint64_t AVE_CFPref_GetUInt64(CFStringRef applicationID, CFStringRef key, unint64_t *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  CFTypeID v14;
  const char *Str;
  const char *v17;
  _QWORD valuePtr[2];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, valuePtr))
        {
          v9 = 0;
          *a3 = valuePtr[0];
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          v19 = 0;
          Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 20);
          if (Str)
          {
            v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v10 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetUInt64", 1143, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v13 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_RetrieveDLB(int *a1)
{
  int v2;
  uint64_t Str;
  int v5;
  char v6[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  v5 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_PreemptiveLoadBalancing", &v5))
  {
    if (v5)
      v2 = 2;
    else
      v2 = 1;
    a1[1] = v2;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_Type", &v5))
  {
    a1[2] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_SVESchedMode", &v5))
  {
    a1[3] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetInt32(0, "AVE_DLB_SVENum", &v5))
  {
    a1[4] = v5;
    *a1 = 1;
  }
  if (!AVE_DW_GetStr(0, "AVE_DLB_SVEMap", v6, 128))
    AVE_ParseDLBCfg(v6, a1);
  Str = AVE_DW_GetStr(0, "AVE_DLB_Cfg", v6, 128);
  if (!(_DWORD)Str)
    AVE_ParseDLBCfg(v6, a1);
  return Str;
}

uint64_t AVE_DW_GetDouble(const char *a1, const char *a2, double *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t Double;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetDouble", 567, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  Double = AVE_CFPref_GetDouble(v7, v8, a3);
  if (!(_DWORD)Double)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = Double;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetDouble(v7, v9, a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %lf\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %lf", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetUInt32(CFStringRef applicationID, CFStringRef key, unsigned int *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  CFTypeID v14;
  const char *Str;
  const char *v17;
  uint64_t valuePtr;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr))
        {
          v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          v19 = 0;
          valuePtr = 0;
          Str = AVE_CFStr_GetStr(v7, (char *)&valuePtr, 12);
          if (Str)
          {
            v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v10 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetUInt32", 1092, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v13 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DW_GetBool(const char *a1, const char *a2, BOOL *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  uint64_t Bool;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  char cStr[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x2Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 44, LevelStr, "AVE_DW_GetBool", 139, "pKey != __null && pVal != __null", a1, a2, a3);
        v24 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v24, 44, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 44, LevelStr);
      }
    }
    return 4294966295;
  }
  if (a1)
    v6 = a1;
  else
    v6 = "com.apple.coremedia";
  v7 = CFStringCreateWithCString(0, v6, 0);
  v8 = CFStringCreateWithCString(0, a2, 0);
  v9 = v8;
  if (!v7 || !v8)
  {
    v16 = 4294966293;
    if (!v7)
    {
      if (!v8)
        return v16;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  Bool = AVE_CFPref_GetBool(v7, v8, a3);
  if (!(_DWORD)Bool)
  {
    if (AVE_Log_CheckLevel(0x2Cu, 6))
    {
      v25 = AVE_Log_CheckConsole(0x2Cu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      if (v25)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v26, 44, v27, a2, *a3);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v26, 44, v27, a2, *a3);
    }
    goto LABEL_26;
  }
  v16 = Bool;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)cStr = 0u;
  v31 = 0u;
  AVE_SNPrintf(cStr, 128, "AVEVideoEncoder%s", v11, v12, v13, v14, v15, (_BYTE)a2 + 3);
  CFRelease(v9);
  v9 = CFStringCreateWithCString(0, cStr, 0);
  if (v9)
  {
    v16 = AVE_CFPref_GetBool(v7, v9, a3);
    if (!(_DWORD)v16)
    {
      if (!AVE_Log_CheckLevel(0x2Cu, 6))
      {
LABEL_26:
        v16 = 0;
        goto LABEL_27;
      }
      v16 = AVE_Log_CheckConsole(0x2Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      if ((_DWORD)v16)
      {
        printf("%lld %d AVE %s: defaults write %s = %d\n", v17, 44, v18, cStr, *a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: defaults write %s = %d", v19, 44, v20, cStr, *a3);
        goto LABEL_26;
      }
      syslog(3, "%lld %d AVE %s: defaults write %s = %d", v17, 44, v18, cStr, *a3);
    }
  }
LABEL_27:
  CFRelease(v7);
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t AVE_CFPref_GetInt64(CFStringRef applicationID, CFStringRef key, uintmax_t *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  CFTypeID v14;
  const char *Str;
  const char *v17;
  uint64_t valuePtr;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &valuePtr))
        {
          v9 = 0;
          *a3 = valuePtr;
LABEL_16:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        v14 = CFGetTypeID(v7);
        if (v14 == CFStringGetTypeID())
        {
          valuePtr = 0;
          v19[0] = 0;
          *(_QWORD *)((char *)v19 + 5) = 0;
          Str = AVE_CFStr_GetStr(v7, (char *)&valuePtr, 21);
          if (Str)
          {
            v9 = 0;
            *a3 = strtoumax(Str, 0, 0);
            goto LABEL_16;
          }
        }
      }
      v9 = 4294966296;
      goto LABEL_16;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v10 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetInt64", 1244, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v13 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFPref_GetStr(CFStringRef applicationID, CFStringRef key, char *a3, int a4)
{
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  char *Str;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v21;
  const char *v23;

  if (applicationID && key && a3 && a4 > 0)
  {
    v8 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFStringGetTypeID())
      {
        Str = (char *)AVE_CFStr_GetStr(v9, a3, a4);
        if (Str != a3)
          AVE_SNPrintf(a3, a4, "%s", v12, v13, v14, v15, v16, (char)Str);
        v17 = 0;
      }
      else
      {
        v17 = 4294966296;
      }
      CFRelease(v9);
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v18 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetStr", 947, "pAppID != __null && pKey != __null && pVal != __null && num > 0", applicationID, key, a3, a4);
        v21 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", v21, 15, v23, "AVE_CFPref_GetStr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d", CurrTime, 15, LevelStr, "AVE_CFPref_GetStr");
      }
    }
    return 4294966295;
  }
  return v17;
}

uint64_t AVE_CFPref_GetDouble(CFStringRef applicationID, CFStringRef key, double *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  double v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  uint64_t v14;
  CFTypeID v15;
  const char *Str;
  const char *v18;
  uint64_t v19;
  _QWORD valuePtr[2];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        v19 = 0;
        valuePtr[0] = 0;
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, valuePtr))
        {
          v9 = *(double *)valuePtr;
LABEL_19:
          v14 = 0;
          *a3 = v9;
LABEL_21:
          CFRelease(v7);
          return v14;
        }
        if (CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt64Type, &v19))
        {
          v9 = (double)v19;
          goto LABEL_19;
        }
      }
      else
      {
        v15 = CFGetTypeID(v7);
        if (v15 == CFStringGetTypeID())
        {
          valuePtr[0] = 0;
          valuePtr[1] = 0;
          v21 = 0;
          Str = AVE_CFStr_GetStr(v7, (char *)valuePtr, 20);
          if (Str)
          {
            v9 = strtod(Str, 0);
            goto LABEL_19;
          }
        }
      }
      v14 = 4294966296;
      goto LABEL_21;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v10 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetDouble", 1294, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v13 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v18);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFPref_GetBool(CFStringRef applicationID, CFStringRef key, BOOL *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v14;
  CFTypeID v15;
  const char *v17;

  if (applicationID && key && a3)
  {
    v6 = (const __CFString *)CFPreferencesCopyAppValue(key, applicationID);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFBooleanGetTypeID())
      {
        v9 = CFEqual(v7, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
      }
      else
      {
        v15 = CFGetTypeID(v7);
        if (v15 != CFStringGetTypeID())
          goto LABEL_19;
        v9 = 1;
        if (CFStringCompare(v7, CFSTR("true"), 1uLL) == kCFCompareEqualTo)
          goto LABEL_7;
        v9 = 1;
        if (CFStringCompare(v7, CFSTR("yes"), 1uLL) == kCFCompareEqualTo)
          goto LABEL_7;
        v9 = 1;
        if (CFStringCompare(v7, CFSTR("1"), 1uLL) == kCFCompareEqualTo)
          goto LABEL_7;
        if (CFStringCompare(v7, CFSTR("false"), 1uLL)
          && CFStringCompare(v7, CFSTR("no"), 1uLL)
          && CFStringCompare(v7, CFSTR("0"), 1uLL))
        {
LABEL_19:
          v10 = 4294966296;
          goto LABEL_20;
        }
        v9 = 0;
      }
LABEL_7:
      v10 = 0;
      *a3 = v9;
LABEL_20:
      CFRelease(v7);
      return v10;
    }
    return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v11 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 15, LevelStr, "AVE_CFPref_GetBool", 988, "pAppID != __null && pKey != __null && pVal != __null", applicationID, key, a3);
        v14 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddSInt32(const __CFString *a1, int a2, __CFDictionary *a3)
{
  CFNumberRef v6;
  CFNumberRef v7;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v16;
  const char *v17;
  const char *v18;
  int valuePtr;

  valuePtr = a2;
  if (a1 && a3)
  {
    v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v13 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddSInt32", 561, "pNum != __null", a1, valuePtr, a3);
          v16 = AVE_GetCurrTime();
          v18 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %d %p", CurrTime, 15, LevelStr);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v9 = AVE_Log_CheckConsole(0xFu);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFDict_AddSInt32", 557, "pKey != __null && pDict != __null", a1, a2, a3);
        v12 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

void *AVE_DW_Get(void)
{
  return &gs_sAVE_DW_Cfg;
}

uint64_t *AVE_AlignMem(uint64_t *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;

  v4 = (*result + a3 - 1) & -(uint64_t)a3;
  *a2 = (*result + *a2 - v4) & -a4;
  *result = v4;
  return result;
}

_BYTE *AVE_MemCpyV2V(_BYTE *result, char *a2, int a3)
{
  char v3;

  if (a3 >= 1)
  {
    do
    {
      v3 = *a2++;
      *result++ = v3;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t AVE_ComposePosStr(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    return 0;
  v8 = a4;
  v11 = AVE_SNPrintf(a3, a4, " in %s", a4, a5, a6, a7, a8, a1);
  v17 = v11;
  if (a2)
    return AVE_SNPrintf(&a3[(int)v11], v8 - (int)v11, ":%d", v12, v13, v14, v15, v16, a2)
         + v11;
  return v17;
}

uint64_t AVE_Dump_FindFile(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 > 0xB)
    return 0;
  else
    return *(_QWORD *)(a1 + 96 * (a3 > 0) + 8 * a2 + 48);
}

uint64_t AVE_Dump_Create(int a1, _QWORD *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;

  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v4 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Create", a1, a2);
      v7 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", v7, 61, v21, "AVE_Dump_Create", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %d %p", CurrTime, 61, LevelStr, "AVE_Dump_Create", a1, a2);
    }
  }
  if (a2)
  {
    v8 = malloc_type_malloc(0xF0uLL, 0x1020040B865D711uLL);
    if (v8)
    {
      v9 = 0;
      v8[13] = 0u;
      v8[14] = 0u;
      v8[11] = 0u;
      v8[12] = 0u;
      v8[9] = 0u;
      v8[10] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      *v8 = 0u;
      *(_DWORD *)v8 = a1;
      *a2 = v8;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Du, 4))
      {
        v13 = AVE_Log_CheckConsole(0x3Du);
        v14 = AVE_GetCurrTime();
        v15 = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create dump %d %p\n", v14, 61, v15, "AVE_Dump_Create", 89, "pDump != __null", a1, a2);
          v14 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create dump %d %p", v14, 61);
      }
      v9 = 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v10 = AVE_Log_CheckConsole(0x3Du);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p\n", v11, 61, v12, "AVE_Dump_Create", 85, "ppDump != __null", a1, 0);
        v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p", v11, 61);
    }
    v9 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v16 = AVE_Log_CheckConsole(0x3Du);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(7);
    if (v16)
    {
      printf("%lld %d AVE %s: %s Exit %d %p %d\n", v17, 61, v18, "AVE_Dump_Create", a1, a2, v9);
      v19 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %p %d", v17);
    }
  }
  return v9;
}

uint64_t AVE_Dump_Destroy(void *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __uint64_t v9;
  const char *v11;
  const char *v12;

  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v2 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Destroy", a1);
      v5 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v11, "AVE_Dump_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 61, LevelStr, "AVE_Dump_Destroy", a1);
    }
  }
  if (a1)
    free(a1);
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v6 = AVE_Log_CheckConsole(0x3Du);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
      v9 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 61, v12, "AVE_Dump_Destroy", 0, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 61, v8, "AVE_Dump_Destroy", 0, 0);
    }
  }
  return 0;
}

uint64_t AVE_Dump_ComposeFilePath(_DWORD *a1, unsigned int a2, int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  char **v34;
  char **v35;
  char v38[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v8 = a6;
  v46 = *MEMORY[0x1E0C80C00];
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  v13 = AVE_SNPrintf(v38, 128, "%d-%s-%dx%d-%s-%d", a4, (uint64_t)a5, a6, a7, a8, *a1);
  v19 = v13;
  if ((a3 & 0x80000000) == 0)
    v19 = AVE_SNPrintf(&v38[v13], 128 - v13, "-MP%d", v14, v15, v16, v17, v18, a3) + v13;
  if (a1[3] == 1)
    v19 += AVE_SNPrintf(&v38[v19], 128 - v19, "-%s-%d", v14, v15, v16, v17, v18, (char)gc_piaAVE_CodecType[a1[4]]);
  v20 = pthread_self();
  rand();
  v26 = AVE_SNPrintf(&v38[v19], 128 - v19, "-%lu-%d-%s", v21, v22, v23, v24, v25, v20);
  if (a2 == 1)
  {
    v32 = a1[3];
    v33 = (const char *)a4;
    if (v32 == 1)
      v34 = &off_1E692B6A0[a1[4]];
    else
      v34 = &off_1E692B6A0[v32 + 1];
    v35 = v34 + 1;
  }
  else
  {
    if ((a2 & 0xFFFFFFFD) == 1 && (a1[2] & (1 << a2)) != 0)
      v35 = &gsc_saAVE_DumpInfo[9 * a2 + 2];
    else
      v35 = &gsc_saAVE_DumpInfo[9 * a2 + 1];
    v33 = (const char *)a4;
  }
  AVE_SNPrintf(&v38[v19 + (uint64_t)v26], 128 - (v19 + v26), ".%s", v27, v28, v29, v30, v31, (char)*v35);
  return AVE_ComposeFilePath(v33, 0, v38, a5, v8);
}

uint64_t AVE_Dump_OpenFiles(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  const char *v17;
  FILE *v18;
  int v19;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  __uint64_t v28;
  __uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  char __filename[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__filename = 0u;
  v35 = 0u;
  if ((int)a1[9] < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = a1 + 12;
  do
  {
    v12 = 0;
    v13 = 0;
    v32 = v9;
    do
    {
      if ((a1[1] & (1 << v13)) != 0 && !*(_QWORD *)&v11[2 * v13])
      {
        if ((int)a1[9] <= 1)
          v14 = -1;
        else
          v14 = v9;
        v10 = AVE_Dump_ComposeFilePath(a1, v13, v14, a2, __filename, 256, a7, a8);
        v15 = (a1[2] & (1 << v13)) != 0 && v12 == 27;
        v16 = 5;
        if (v15)
          v16 = 6;
        v17 = (&gsc_saAVE_DumpInfo[v12])[v16];
        v18 = fopen(__filename, v17);
        *(_QWORD *)&v11[2 * v13] = v18;
        if (v18)
        {
          if (AVE_Log_CheckLevel(0x3Du, 6))
          {
            v19 = AVE_Log_CheckConsole(0x3Du);
            CurrTime = AVE_GetCurrTime();
            LevelStr = AVE_Log_GetLevelStr(6);
            if (v19)
            {
              printf("%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s\n", CurrTime, 61, LevelStr, "AVE_Dump_OpenFiles", 262, a1, *a1, v9, v13, __filename, v17);
              v22 = AVE_GetCurrTime();
              v30 = AVE_Log_GetLevelStr(6);
              v28 = v22;
            }
            else
            {
              v30 = LevelStr;
              v28 = CurrTime;
            }
            syslog(3, "%lld %d AVE %s: %s:%d open dump file %p %d | %d %d %s %s", v28, 61, v30, "AVE_Dump_OpenFiles");
          }
        }
        else if (AVE_Log_CheckLevel(0x3Du, 4))
        {
          v23 = AVE_Log_CheckConsole(0x3Du);
          v24 = AVE_GetCurrTime();
          v25 = AVE_Log_GetLevelStr(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s\n", v24, 61, v25, "AVE_Dump_OpenFiles", 257, a1, *a1, v9, v13, __filename, v17);
            v26 = AVE_GetCurrTime();
            v31 = AVE_Log_GetLevelStr(4);
            v29 = v26;
          }
          else
          {
            v31 = v25;
            v29 = v24;
          }
          syslog(3, "%lld %d AVE %s: %s:%d fail to open dump file %p %d | %d %d %s %s", v29, 61, v31, "AVE_Dump_OpenFiles");
        }
      }
      ++v13;
      v12 += 9;
    }
    while (v12 != 108);
    ++v9;
    v11 += 24;
  }
  while (v32 + 1 < (int)a1[9]);
  return v10;
}

uint64_t AVE_Dump_WriteHeader(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;
  FILE **v7;
  uint64_t i;
  BOOL v9;

  v2 = 0;
  result = 0;
  v4 = a1 + 48;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (FILE **)(v4 + 96 * v2);
    for (i = -2; i != 10; ++i)
    {
      if (*v7)
        v9 = i > 8;
      else
        v9 = 1;
      if (!v9 && ((0x1C1u >> i) & 1) != 0)
      {
        if (fprintf(*v7, off_1E692B9B8[i]) <= 0)
          result = 4294965296;
        else
          result = 0;
      }
      ++v7;
    }
    v5 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t AVE_Dump_Init(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, _QWORD *a7, int a8, int a9, int a10, int a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v22;
  uint64_t v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  FILE *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  __uint64_t v36;
  const char *v37;
  const char *v39;
  __uint64_t v40;
  __uint64_t v41;

  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v19 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", CurrTime, 61, LevelStr, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v40 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v40, 61, v22, "AVE_Dump_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p %d %d 0x%x 0x%x %p %d %d %d %d", CurrTime, 61, LevelStr, "AVE_Dump_Init", a1);
    }
  }
  if (a1 && a7)
  {
    *(_DWORD *)(a1 + 4) = a5;
    *(_DWORD *)(a1 + 8) = a6;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a4;
    *(_QWORD *)(a1 + 20) = *a7;
    *(_DWORD *)(a1 + 28) = a9;
    *(_DWORD *)(a1 + 32) = a10;
    *(_DWORD *)(a1 + 36) = a8;
    *(_DWORD *)(a1 + 40) = a11;
    v23 = AVE_Dump_OpenFiles((_DWORD *)a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18);
    if (!(_DWORD)v23)
    {
      AVE_Dump_WriteHeader(a1);
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (AVE_Log_CheckLevel(0x3Du, 4))
  {
    v24 = AVE_Log_CheckConsole(0x3Du);
    v25 = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(4);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d\n", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v41 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v41, 61, v39, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p %d %d 0x%x 0x%x %p %d %d %d %d", v25, 61, v26, "AVE_Dump_Init", 457, "pDump != __null && pResolution != __null", a1);
    }
  }
  v23 = 4294966295;
  if (a1)
  {
LABEL_14:
    v27 = 0;
    v28 = 1;
    do
    {
      v29 = 0;
      v30 = v28;
      v31 = a1 + 48 + 96 * v27;
      do
      {
        v32 = *(FILE **)(v31 + v29);
        if (v32)
        {
          fclose(v32);
          *(_QWORD *)(v31 + v29) = 0;
        }
        v29 += 8;
      }
      while (v29 != 96);
      v28 = 0;
      v27 = 1;
    }
    while ((v30 & 1) != 0);
  }
LABEL_20:
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v33 = AVE_Log_CheckConsole(0x3Du);
    v34 = AVE_GetCurrTime();
    v35 = AVE_Log_GetLevelStr(7);
    if (v33)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d\n", v34, 61, v35, "AVE_Dump_Init", (const void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23);
      v36 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v36, 61, v37, "AVE_Dump_Init", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d 0x%x 0x%x %p %d %d %d %d %d", v34, 61, v35, "AVE_Dump_Init", a1, a2);
    }
  }
  return v23;
}

uint64_t AVE_Dump_Uninit(const void *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  FILE *v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  const char *v17;
  const char *v18;

  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v2 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 61, LevelStr, "AVE_Dump_Uninit", a1);
      v5 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 61, v17, "AVE_Dump_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 61, LevelStr, "AVE_Dump_Uninit", a1);
    }
  }
  if (a1)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = 0;
      v9 = v7;
      v10 = (uint64_t)a1 + 96 * v6 + 48;
      do
      {
        v11 = *(FILE **)(v10 + v8);
        if (v11)
        {
          fclose(v11);
          *(_QWORD *)(v10 + v8) = 0;
        }
        v8 += 8;
      }
      while (v8 != 96);
      v7 = 0;
      v6 = 1;
    }
    while ((v9 & 1) != 0);
  }
  if (AVE_Log_CheckLevel(0x3Du, 7))
  {
    v12 = AVE_Log_CheckConsole(0x3Du);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
      v15 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v15, 61, v18, "AVE_Dump_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 61, v14, "AVE_Dump_Uninit", a1, 0);
    }
  }
  return 0;
}

uint64_t AVE_Dump_WriteInput(_DWORD *a1, int a2, __CVBuffer *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __sFILE *v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  const char *v20;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v6 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteInput", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", CurrTime);
  }
  if (a1)
  {
    v9 = *(__sFILE **)&a1[24 * (a2 > 0) + 12];
    if (v9)
    {
      if (a3)
        v10 = AVE_PixelBuf_Dump(a3, a1[2] & 1, v9);
      else
        v10 = 4294966287;
    }
    else
    {
      v10 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v11 = AVE_Log_CheckConsole(0x3Du);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v12, 61, v13, "AVE_Dump_WriteInput", 533, "pDump != __null", 0, a2, a3);
        v14 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v14, 61, v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v12, 61, v13);
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v15 = AVE_Log_CheckConsole(0x3Du);
    v16 = AVE_GetCurrTime();
    v17 = AVE_Log_GetLevelStr(8);
    if (v15)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v16, 61, v17, "AVE_Dump_WriteInput", a1, a2, a3, v10);
      v18 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v18, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v16, 61);
    }
  }
  return v10;
}

uint64_t AVE_Dump_WriteOutput(_QWORD *a1, int a2, const void *a3, int a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v11;
  uint64_t v12;
  int v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v27;
  const char *v28;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v8 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteOutput", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", CurrTime, 61);
  }
  if (a1)
  {
    v11 = (FILE *)a1[12 * (a2 > 0) + 7];
    if (v11)
    {
      v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        v13 = fwrite(a3, 1uLL, a4, v11);
        v12 = v13 == a4 ? 0 : 4294965296;
        if (AVE_Log_CheckLevel(0x3Du, 8))
        {
          v14 = AVE_Log_CheckConsole(0x3Du);
          v15 = AVE_GetCurrTime();
          v16 = AVE_Log_GetLevelStr(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteOutput", 596, a1, a2, a3, a4, v13);
            v17 = AVE_GetCurrTime();
            v27 = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v18 = AVE_Log_CheckConsole(0x3Du);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteOutput", 578, "pDump != __null", 0, a2, a3, a4);
        v21 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteOutput");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteOutput");
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v22 = AVE_Log_CheckConsole(0x3Du);
    v23 = AVE_GetCurrTime();
    v24 = AVE_Log_GetLevelStr(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteOutput", a1, a2, a3, a4, v12);
      v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteISPMetadata(_QWORD *a1, int a2, int a3, double *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v22;
  const char *v23;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v8 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    v11 = (FILE *)a1[12 * (a2 > 0) + 8];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%5d, %4.6f, %4.6f, %4.6f, %f, %f, %d, %d, %d, %d\n", a3, *a4, a4[1], a4[2], a4[3], a4[4], *((_DWORD *)a4 + 16), *((_DWORD *)a4 + 17), *((_DWORD *)a4 + 18), *((_DWORD *)a4 + 20)) <= 0)v12 = 4294965296;
        else
          v12 = 0;
      }
      else
      {
        v12 = 4294966287;
      }
    }
    else
    {
      v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v13 = AVE_Log_CheckConsole(0x3Du);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteISPMetadata", 625, "pDump != __null", 0, a2, a3, a4);
        v16 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v17 = AVE_Log_CheckConsole(0x3Du);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteISPMetadata", a1, a2, a3, a4, v12);
      v20 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteMBStats(_QWORD *a1, int a2, const void *a3, int a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v11;
  uint64_t v12;
  int v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v27;
  const char *v28;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v8 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p %d\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteMBStats", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p %d", CurrTime, 61);
  }
  if (a1)
  {
    v11 = (FILE *)a1[12 * (a2 > 0) + 9];
    if (v11)
    {
      v12 = 4294966287;
      if (a3 && a4 >= 1)
      {
        v13 = fwrite(a3, 1uLL, a4, v11);
        v12 = v13 == a4 ? 0 : 4294965296;
        if (AVE_Log_CheckLevel(0x3Du, 8))
        {
          v14 = AVE_Log_CheckConsole(0x3Du);
          v15 = AVE_GetCurrTime();
          v16 = AVE_Log_GetLevelStr(8);
          if (v14)
          {
            printf("%lld %d AVE %s: %s:%d %p %d %p %d %d\n", v15, 61, v16, "AVE_Dump_WriteMBStats", 692, a1, a2, a3, a4, v13);
            v17 = AVE_GetCurrTime();
            v27 = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v17, 61, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %p %d %p %d %d", v15, 61, v16);
          }
        }
      }
    }
    else
    {
      v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v18 = AVE_Log_CheckConsole(0x3Du);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteMBStats", 674, "pDump != __null", 0, a2, a3, a4);
        v21 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v21, 61, v28, "AVE_Dump_WriteMBStats");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p %d", v19, 61, v20, "AVE_Dump_WriteMBStats");
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v22 = AVE_Log_CheckConsole(0x3Du);
    v23 = AVE_GetCurrTime();
    v24 = AVE_Log_GetLevelStr(8);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d %d\n", v23, 61, v24, "AVE_Dump_WriteMBStats", a1, a2, a3, a4, v12);
      v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v25, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d %d", v23, 61);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteHwEventTrace(_QWORD *a1, int a2, int *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  const char *v23;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v6 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteHwEventTrace", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %p", CurrTime);
  }
  if (a1)
  {
    v9 = (FILE *)a1[12 * (a2 > 0) + 14];
    if (v9)
    {
      if (a3)
      {
        if (*a3 < 2)
        {
          v13 = 0;
        }
        else
        {
          v10 = (unsigned __int8 *)(a3 + 5);
          v11 = 1;
          do
          {
            v12 = fprintf(v9, "%6d, %d, %d, %6d, %6d, 0x%x, 0x%x, 0x%x, 0x%x\n", v11++, v10[1], *v10, v10[2], v10[3], *((_DWORD *)v10 + 1), *((_DWORD *)v10 + 2), *((_DWORD *)v10 + 3), *((_DWORD *)v10 + 4));
            v10 += 20;
          }
          while (v11 < *a3);
          if (v12 <= 0)
            v13 = 4294965296;
          else
            v13 = 0;
        }
      }
      else
      {
        v13 = 4294966287;
      }
    }
    else
    {
      v13 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v14 = AVE_Log_CheckConsole(0x3Du);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v15, 61, v16, "AVE_Dump_WriteHwEventTrace", 720, "pDump != __null", 0, a2, a3);
        v17 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v17, 61, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v15, 61, v16);
      }
    }
    v13 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v18 = AVE_Log_CheckConsole(0x3Du);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(8);
    if (v18)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %p %d\n", v19, 61, v20, "AVE_Dump_WriteHwEventTrace", a1, a2, a3, v13);
      v21 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v21, 61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %p %d", v19, 61);
    }
  }
  return v13;
}

uint64_t AVE_Dump_WriteVQMetrics(_QWORD *a1, int a2, int a3, float *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v22;
  const char *v23;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v8 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    v11 = (FILE *)a1[12 * (a2 > 0) + 15];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[4], a4[5], a4[6], *a4, a4[1], a4[2]) <= 0)
          v12 = 4294965296;
        else
          v12 = 0;
      }
      else
      {
        v12 = 4294966287;
      }
    }
    else
    {
      v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v13 = AVE_Log_CheckConsole(0x3Du);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteVQMetrics", 772, "pDump != __null", 0, a2, a3, a4);
        v16 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v17 = AVE_Log_CheckConsole(0x3Du);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteVQMetrics", a1, a2, a3, a4, v12);
      v20 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteFPS(_QWORD *a1, int a2, int a3, double *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  FILE *v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v22;
  const char *v23;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v8 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteFPS", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d %p", CurrTime, 61);
  }
  if (a1)
  {
    v11 = (FILE *)a1[12 * (a2 > 0) + 16];
    if (v11)
    {
      if (a4)
      {
        if (fprintf(v11, "%d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", a3, a4[2], a4[1], *a4, a4[5], a4[4], a4[3], a4[8], a4[7], a4[6]) <= 0)v12 = 4294965296;
        else
          v12 = 0;
      }
      else
      {
        v12 = 4294966287;
      }
    }
    else
    {
      v12 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v13 = AVE_Log_CheckConsole(0x3Du);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p\n", v14, 61, v15, "AVE_Dump_WriteFPS", 820, "pDump != __null", 0, a2, a3, a4);
        v16 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v16, 61, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p", v14, 61, v15);
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v17 = AVE_Log_CheckConsole(0x3Du);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(8);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %p %d\n", v18, 61, v19, "AVE_Dump_WriteFPS", a1, a2, a3, a4, v12);
      v20 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v20, 61, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %p %d", v18, 61, v19);
    }
  }
  return v12;
}

uint64_t AVE_Dump_WriteRecon(uint64_t a1, __CVBuffer *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  __sFILE *v8;
  uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  const char *v17;

  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v4 = AVE_Log_CheckConsole(0x3Du);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Enter %p %p\n", CurrTime, 61, LevelStr, "AVE_Dump_WriteRecon", (const void *)a1, a2);
      v7 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", v7, 61, v17, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p %p", CurrTime, 61, LevelStr, "AVE_Dump_WriteRecon", (const void *)a1, a2);
    }
  }
  if (a1)
  {
    v8 = *(__sFILE **)(a1 + 136);
    if (v8)
    {
      if (a2)
        v9 = AVE_PixelBuf_Dump(a2, (*(_DWORD *)(a1 + 8) >> 11) & 1, v8);
      else
        v9 = 4294966287;
    }
    else
    {
      v9 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Du, 4))
    {
      v10 = AVE_Log_CheckConsole(0x3Du);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", v11, 61, v12, "AVE_Dump_WriteRecon", 864, "pDump != __null", 0, a2);
        v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", v11, 61);
    }
    v9 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Du, 8))
  {
    v13 = AVE_Log_CheckConsole(0x3Du);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(8);
    if (v13)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d\n", v14, 61, v15, "AVE_Dump_WriteRecon", (const void *)a1, a2, v9);
      v14 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %d", v14);
  }
  return v9;
}

uint64_t AVE_Enc_CheckResolution(int a1, int a2, int a3, int a4, int a5)
{
  char *Resolution;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *i;
  int v15;

  Resolution = AVE_DevCap_FindResolution(a1, 1, a2);
  if (!Resolution)
    return 4294966294;
  v9 = *(unsigned int *)Resolution;
  if ((int)v9 < 1)
  {
    v12 = 0;
  }
  else
  {
    v10 = 0;
    v11 = Resolution + 12;
    v12 = 1;
    do
    {
      if (*(v11 - 1) <= a3 && *v11 <= a4)
        break;
      v11 += 3;
      v12 = ++v10 < v9;
    }
    while (v9 != v10);
  }
  v13 = *((unsigned int *)Resolution + 13);
  if ((int)v13 < 1)
    return 4294966294;
  for (i = Resolution + 64; ; i += 3)
  {
    if (*(i - 1) >= a3 && *i >= a4)
    {
      v15 = *(i - 2);
      if (v15 == a5 || v15 < 0)
        break;
    }
    if (!--v13)
      return 4294966294;
  }
  if (v12)
    return 0;
  else
    return 4294966294;
}

uint64_t AVE_FrameStats_PrintStatFrame(_BYTE *a1, uint64_t a2, FILE *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  int v168;
  int v169;
  _BOOL4 v171;
  int v172;
  BOOL v173;
  char v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t i;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  int v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  int v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  int v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  int v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  int v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  int v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  int v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  int v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  int v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  int v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  int v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  int v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  int v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  int v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  int v1159;
  char *v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  char v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  int v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  int v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  int v1304;
  int v1305;
  __uint64_t v1306;
  const char *v1307;
  __uint64_t v1308;
  int v1309;
  __uint64_t v1310;
  const char *v1311;
  char v1313;
  double v1314;
  const char *v1315;
  const char *v1316;
  FILE *v1317;
  int v1318;

  v1318 = 0;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v6 = AVE_Log_CheckConsole(0x2Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p\n", CurrTime, 46, LevelStr, "AVE_FrameStats_PrintStatFrame", (const void *)a2, a1, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p", CurrTime);
  }
  if (a1 && a2)
  {
    if (a3)
    {
      v9 = (char *)operator new[]();
      v15 = v9;
      *v9 = 0;
      if (*(_DWORD *)(a2 + 4) == 7 && *(_DWORD *)(a2 + 23468) == 4)
        v16 = "1,";
      else
        v16 = "0,";
      v21 = AVE_SNPrintf(v9, 4000, v16, v10, v11, v12, v13, v14, v1313);
      v27 = v21;
      v1317 = a3;
      switch(*(_DWORD *)(a2 + 4))
      {
        case 4:
          v28 = &v15[v21];
          v29 = 4000 - v27;
          v30 = "PREPARE";
          goto LABEL_28;
        case 5:
          v32 = AVE_SNPrintf(&v15[v21], 4000 - v21, "%s, ", v22, v23, v24, v25, v26, (char)"START");
          goto LABEL_24;
        case 6:
          v28 = &v15[v21];
          v29 = 4000 - v27;
          v30 = "STOP";
          goto LABEL_28;
        case 8:
          v28 = &v15[v21];
          v29 = 4000 - v27;
          v30 = "COMPLETE";
          goto LABEL_28;
        case 9:
          v28 = &v15[v21];
          v29 = 4000 - v27;
          v30 = "FLUSH";
          goto LABEL_28;
        case 0xA:
          v28 = &v15[v21];
          v29 = 4000 - v27;
          v30 = "RESET";
LABEL_28:
          v38 = v27 + AVE_SNPrintf(v28, v29, "%s,", v22, v23, v24, v25, v26, (char)v30);
          v1318 = v38;
          break;
        default:
          v32 = AVE_SNPrintf(&v15[v21], 4000 - v21, "%10d, ", v22, v23, v24, v25, v26, *(_DWORD *)(a2 + 160));
LABEL_24:
          v38 = v27 + v32;
          break;
      }
      if (a1[13])
        v39 = *((_DWORD *)a1 + 4);
      else
        v39 = 0;
      v40 = a1;
      v41 = (int)AVE_SNPrintf(&v15[v38], 4000 - v38, "%lld, ", v33, v34, v35, v36, v37, *(_QWORD *)(a2 + 27672))
          + (uint64_t)v38;
      v47 = AVE_SNPrintf(&v15[v41], 4000 - (int)v41, "%lld, ", v42, v43, v44, v45, v46, *(_QWORD *)(a2 + 27696)) + v41;
      v53 = AVE_SNPrintf(&v15[v47], 4000 - v47, "%lld, ", v48, v49, v50, v51, v52, *(_QWORD *)(a2 + 28016)) + v47;
      v59 = AVE_SNPrintf(&v15[v53], 4000 - v53, "%lld, ", v54, v55, v56, v57, v58, *(_QWORD *)(a2 + 28024)) + v53;
      v65 = AVE_SNPrintf(&v15[v59], 4000 - v59, "%lld, ", v60, v61, v62, v63, v64, *(_QWORD *)(a2 + 27744)) + v59;
      v66 = a2 + 27672 + 8 * v39;
      v72 = AVE_SNPrintf(&v15[v65], 4000 - v65, "%lld, ", v67, v68, v69, v70, v71, *(_QWORD *)(v66 + 80)) + v65;
      v78 = AVE_SNPrintf(&v15[v72], 4000 - v72, "%lld, ", v73, v74, v75, v76, v77, *(_QWORD *)(a2 + 28080)) + v72;
      v84 = AVE_SNPrintf(&v15[v78], 4000 - v78, "%lld, ", v79, v80, v81, v82, v83, *(_QWORD *)(a2 + 28088)) + v78;
      v90 = AVE_SNPrintf(&v15[v84], 4000 - v84, "%lld, ", v85, v86, v87, v88, v89, *(_QWORD *)(a2 + 27704)) + v84;
      v96 = AVE_SNPrintf(&v15[v90], 4000 - v90, "%lld, ", v91, v92, v93, v94, v95, *(_QWORD *)(a2 + 27688)) + v90;
      v102 = AVE_SNPrintf(&v15[v96], 4000 - v96, "%lld, ", v97, v98, v99, v100, v101, *(_QWORD *)(a2 + 27680)) + v96;
      v108 = AVE_SNPrintf(&v15[v102], 4000 - v102, "%lld, ", v103, v104, v105, v106, v107, *(_BYTE *)(a2 + 27672) - v40[24])+ v102;
      v114 = AVE_SNPrintf(&v15[v108], 4000 - v108, "%lld, ", v109, v110, v111, v112, v113, *(_BYTE *)(a2 + 28024) - *(_BYTE *)(a2 + 28016))+ v108;
      v120 = AVE_SNPrintf(&v15[v114], 4000 - v114, "%lld, ", v115, v116, v117, v118, v119, *(_BYTE *)(v66 + 80) - *(_BYTE *)(a2 + 27744))+ v114;
      v121 = a2 + 28016 + 8 * v39;
      v127 = AVE_SNPrintf(&v15[v120], 4000 - v120, "%lld, ", v122, v123, v124, v125, v126, *(_BYTE *)(v121 + 72) - *(_BYTE *)(a2 + 28080))+ v120;
      v133 = AVE_SNPrintf(&v15[v127], 4000 - v127, "%lld, ", v128, v129, v130, v131, v132, *(_BYTE *)(v66 + 80) - *(_BYTE *)(v121 + 72))+ v127;
      v139 = AVE_SNPrintf(&v15[v133], 4000 - v133, "%lld,", v134, v135, v136, v137, v138, *(_BYTE *)(a2 + 27680) - *(_BYTE *)(v66 + 80))+ v133;
      v145 = AVE_SNPrintf(&v15[v139], 4000 - v139, "%lld,", v140, v141, v142, v143, v144, *(_BYTE *)(a2 + 27680) - v40[32])+ v139;
      v151 = AVE_SNPrintf(&v15[v145], 4000 - v145, "%lld, ", v146, v147, v148, v149, v150, *(_BYTE *)(a2 + 27680) - *(_BYTE *)(a2 + 27704))+ v145;
      v162 = AVE_SNPrintf(&v15[v151], 4000 - v151, "%lld, ", v152, v153, v154, v155, v156, *(_BYTE *)(a2 + 27704) - *(_BYTE *)(a2 + 27696))+ v151;
      v1318 = v162;
      a1 = v40;
      if (*(_DWORD *)v40 == 1)
      {
        AVE_FwStats_PrintDiff((_BYTE *)(a2 + 29400), v15, &v1318, 4000, v158, v159, v160, v161);
        AVE_FwStats_PrintSet(a2 + 29400, v15, &v1318, 4000, v163, v164, v165, v166);
        v162 = v1318;
      }
      v167 = &v15[v162];
      v168 = 4000 - v162;
      v169 = *(_DWORD *)(a2 + 2364);
      v171 = (*((_DWORD *)v40 + 2) - 11) < 0xFFFFFFFD && v169 > 2;
      v172 = v169 - v171;
      v173 = v172 != 0;
      v174 = v172 - 1;
      if (!v173)
        v174 = 0;
      v175 = AVE_SNPrintf(v167, v168, "%8d, ", v157, v158, v159, v160, v161, v174);
      v176 = v1318 + (uint64_t)v175;
      v1318 += v175;
      v182 = AVE_SNPrintf(&v15[v176], 4000 - (int)v176, "%10lld, ", v177, v178, v179, v180, v181, *(_QWORD *)(a2 + 2344));
      v183 = v1318 + (uint64_t)v182;
      v1318 += v182;
      v189 = AVE_SNPrintf(&v15[v183], 4000 - (int)v183, "%8d, ", v184, v185, v186, v187, v188, *(_DWORD *)(a2 + 2352));
      v190 = v1318 + (uint64_t)v189;
      v1318 += v189;
      v196 = AVE_SNPrintf(&v15[v190], 4000 - (int)v190, "%10lld, ", v191, v192, v193, v194, v195, *(_BYTE *)(a2 + 2344) - v40[1712]);
      v197 = v1318 + (uint64_t)v196;
      v1318 += v196;
      v203 = AVE_SNPrintf(&v15[v197], 4000 - (int)v197, "%9d,", v198, v199, v200, v201, v202, *(_DWORD *)(a2 + 21688));
      v204 = v1318 + (uint64_t)v203;
      v1318 += v203;
      v210 = AVE_SNPrintf(&v15[v204], 4000 - (int)v204, "%10d, ", v205, v206, v207, v208, v209, *(_DWORD *)(a2 + 21664) == 1);
      v216 = v1318 + (uint64_t)v210;
      v1318 += v210;
      if (*((_DWORD *)v40 + 1) != 1)
      {
        v217 = AVE_SNPrintf(&v15[v216], 4000 - (int)v216, "%04.3f, ", v211, v212, v213, v214, v215, *(_QWORD *)(a2 + 23472))+ v216;
        v223 = AVE_SNPrintf(&v15[v217], 4000 - v217, "%04.3f, ", v218, v219, v220, v221, v222, *(_QWORD *)(a2 + 23480))
             + v217;
        v229 = AVE_SNPrintf(&v15[v223], 4000 - v223, "%04.3f, ", v224, v225, v226, v227, v228, *(_QWORD *)(a2 + 23600))
             + v223;
        v235 = AVE_SNPrintf(&v15[v229], 4000 - v229, "%04.3f, ", v230, v231, v232, v233, v234, *(_QWORD *)(a2 + 23608))
             + v229;
        v241 = AVE_SNPrintf(&v15[v235], 4000 - v235, "%04.3f, ", v236, v237, v238, v239, v240, *(_QWORD *)(a2 + 23528))
             + v235;
        v247 = AVE_SNPrintf(&v15[v241], 4000 - v241, "%04.3f, ", v242, v243, v244, v245, v246, *(_QWORD *)(a2 + 23536))
             + v241;
        v253 = AVE_SNPrintf(&v15[v247], 4000 - v247, "%04.3f, ", v248, v249, v250, v251, v252, *(_QWORD *)(a2 + 23544))
             + v247;
        v259 = AVE_SNPrintf(&v15[v253], 4000 - v253, "%04.3f, ", v254, v255, v256, v257, v258, *(_QWORD *)(a2 + 23552))
             + v253;
        v265 = AVE_SNPrintf(&v15[v259], 4000 - v259, "%04.3f, ", v260, v261, v262, v263, v264, *(_QWORD *)(a2 + 23560))
             + v259;
        v271 = AVE_SNPrintf(&v15[v265], 4000 - v265, "%04.3f, ", v266, v267, v268, v269, v270, *(_QWORD *)(a2 + 23568))
             + v265;
        v277 = AVE_SNPrintf(&v15[v271], 4000 - v271, "%04.3f, ", v272, v273, v274, v275, v276, *(_QWORD *)(a2 + 23576))
             + v271;
        v283 = AVE_SNPrintf(&v15[v277], 4000 - v277, "%04.3f, ", v278, v279, v280, v281, v282, *(_QWORD *)(a2 + 23584))
             + v277;
        v289 = AVE_SNPrintf(&v15[v283], 4000 - v283, "%10d, ", v284, v285, v286, v287, v288, *(_DWORD *)(a2 + 23592))
             + v283;
        v295 = AVE_SNPrintf(&v15[v289], 4000 - v289, "%10d, ", v290, v291, v292, v293, v294, *(_DWORD *)(a2 + 23512))
             + v289;
        v301 = AVE_SNPrintf(&v15[v295], 4000 - v295, "%10d, ", v296, v297, v298, v299, v300, *(_DWORD *)(a2 + 23516))
             + v295;
        v307 = AVE_SNPrintf(&v15[v301], 4000 - v301, "%10d, ", v302, v303, v304, v305, v306, *(_DWORD *)(a2 + 23520))
             + v301;
        v313 = AVE_SNPrintf(&v15[v307], 4000 - v307, "%10d, ", v308, v309, v310, v311, v312, *(_BYTE *)(a2 + 23616))
             + v307;
        v319 = AVE_SNPrintf(&v15[v313], 4000 - v313, "%10d, ", v314, v315, v316, v317, v318, *(_BYTE *)(a2 + 23617))
             + v313;
        v325 = AVE_SNPrintf(&v15[v319], 4000 - v319, "%10d, ", v320, v321, v322, v323, v324, *(_BYTE *)(a2 + 23618))
             + v319;
        v331 = AVE_SNPrintf(&v15[v325], 4000 - v325, "%10d, ", v326, v327, v328, v329, v330, *(_BYTE *)(a2 + 23619))
             + v325;
        v337 = AVE_SNPrintf(&v15[v331], 4000 - v331, "%04.3f, ", v332, v333, v334, v335, v336, *(_QWORD *)(a2 + 23728))
             + v331;
        v343 = AVE_SNPrintf(&v15[v337], 4000 - v337, "%04.3f, ", v338, v339, v340, v341, v342, *(_QWORD *)(a2 + 23712))
             + v337;
        v349 = AVE_SNPrintf(&v15[v343], 4000 - v343, "%04.3f, ", v344, v345, v346, v347, v348, *(_QWORD *)(a2 + 23720))
             + v343;
        v355 = AVE_SNPrintf(&v15[v349], 4000 - v349, "%10d, ", v350, v351, v352, v353, v354, *(_DWORD *)(a2 + 23756))
             + v349;
        v1318 = AVE_SNPrintf(&v15[v355], 4000 - v355, "%10d, ", v356, v357, v358, v359, v360, *(_DWORD *)(a2 + 23760))
              + v355;
        v366 = AVE_SNPrintf(&v15[v1318], 4000 - v1318, "%8d, ", v361, v362, v363, v364, v365, *(_BYTE *)(a2 + 21712))
             + v1318;
        v1314 = *(float *)(a2 + 21708);
        v372 = AVE_SNPrintf(&v15[v366], 4000 - v366, "%04.3f, ", v367, v368, v369, v370, v371, SLOBYTE(v1314)) + v366;
        v378 = AVE_SNPrintf(&v15[v372], 4000 - v372, "%10d,", v373, v374, v375, v376, v377, *(_BYTE *)(a2 + 21706))
             + v372;
        v384 = AVE_SNPrintf(&v15[v378], 4000 - v378, "%04.3f, ", v379, v380, v381, v382, v383, *(_QWORD *)(a2 + 22176))
             + v378;
        v390 = AVE_SNPrintf(&v15[v384], 4000 - v384, "%04.3f, ", v385, v386, v387, v388, v389, *(_QWORD *)(a2 + 22184))
             + v384;
        v396 = AVE_SNPrintf(&v15[v390], 4000 - v390, "%04.3f, ", v391, v392, v393, v394, v395, *(_QWORD *)(a2 + 22192))
             + v390;
        v402 = AVE_SNPrintf(&v15[v396], 4000 - v396, "%10d, ", v397, v398, v399, v400, v401, *(_BYTE *)(a2 + 21704))
             + v396;
        v408 = AVE_SNPrintf(&v15[v402], 4000 - v402, "%10d, ", v403, v404, v405, v406, v407, *(_DWORD *)(a2 + 21716))
             + v402;
        v414 = AVE_SNPrintf(&v15[v408], 4000 - v408, "%10d, ", v409, v410, v411, v412, v413, *(_DWORD *)(a2 + 21732))
             + v408;
        v420 = AVE_SNPrintf(&v15[v414], 4000 - v414, "%10d, ", v415, v416, v417, v418, v419, *(_DWORD *)(a2 + 22216))
             + v414;
        v426 = AVE_SNPrintf(&v15[v420], 4000 - v420, "%10d, ", v421, v422, v423, v424, v425, *(_DWORD *)(a2 + 22220))
             + v420;
        v432 = AVE_SNPrintf(&v15[v426], 4000 - v426, "%10d, ", v427, v428, v429, v430, v431, *(_DWORD *)(a2 + 22224))
             + v426;
        v438 = AVE_SNPrintf(&v15[v432], 4000 - v432, "%10d, ", v433, v434, v435, v436, v437, *(_DWORD *)(a2 + 22000))
             + v432;
        v444 = AVE_SNPrintf(&v15[v438], 4000 - v438, "%10d, ", v439, v440, v441, v442, v443, *(_DWORD *)(a2 + 22596))
             + v438;
        v450 = AVE_SNPrintf(&v15[v444], 4000 - v444, "%10d, ", v445, v446, v447, v448, v449, *(_DWORD *)(a2 + 22004))
             + v444;
        v456 = AVE_SNPrintf(&v15[v450], 4000 - v450, "%10d, ", v451, v452, v453, v454, v455, *(_DWORD *)(a2 + 22600))
             + v450;
        v462 = AVE_SNPrintf(&v15[v456], 4000 - v456, "%10d, ", v457, v458, v459, v460, v461, *(_DWORD *)(a2 + 22632))
             + v456;
        v468 = AVE_SNPrintf(&v15[v462], 4000 - v462, "%10d, ", v463, v464, v465, v466, v467, *(_DWORD *)(a2 + 22664))
             + v462;
        v474 = AVE_SNPrintf(&v15[v468], 4000 - v468, "%10d, ", v469, v470, v471, v472, v473, *(_DWORD *)(a2 + 22008))
             + v468;
        v480 = AVE_SNPrintf(&v15[v474], 4000 - v474, "%10d, ", v475, v476, v477, v478, v479, *(_DWORD *)(a2 + 22604))
             + v474;
        v486 = AVE_SNPrintf(&v15[v480], 4000 - v480, "%10d, ", v481, v482, v483, v484, v485, *(_DWORD *)(a2 + 22636))
             + v480;
        v492 = AVE_SNPrintf(&v15[v486], 4000 - v486, "%10d, ", v487, v488, v489, v490, v491, *(_DWORD *)(a2 + 22668))
             + v486;
        v498 = AVE_SNPrintf(&v15[v492], 4000 - v492, "%10d, ", v493, v494, v495, v496, v497, *(_DWORD *)(a2 + 21984))
             + v492;
        v504 = AVE_SNPrintf(&v15[v498], 4000 - v498, "%04.3f, ", v499, v500, v501, v502, v503, *(_QWORD *)(a2 + 21992))
             + v498;
        v510 = AVE_SNPrintf(&v15[v504], 4000 - v504, "%10d, ", v505, v506, v507, v508, v509, *(_DWORD *)(a2 + 22036))
             + v504;
        v516 = AVE_SNPrintf(&v15[v510], 4000 - v510, "%10d, ", v511, v512, v513, v514, v515, *(_DWORD *)(a2 + 22040))
             + v510;
        v522 = AVE_SNPrintf(&v15[v516], 4000 - v516, "%10d, ", v517, v518, v519, v520, v521, *(_BYTE *)(a2 + 22044))
             + v516;
        v528 = AVE_SNPrintf(&v15[v522], 4000 - v522, "%10d, ", v523, v524, v525, v526, v527, *(_DWORD *)(a2 + 22420))
             + v522;
        v534 = AVE_SNPrintf(&v15[v528], 4000 - v528, "%10d, ", v529, v530, v531, v532, v533, *(_DWORD *)(a2 + 21748))
             + v528;
        v540 = AVE_SNPrintf(&v15[v534], 4000 - v534, "%10d, ", v535, v536, v537, v538, v539, *(_DWORD *)(a2 + 21752))
             + v534;
        v546 = AVE_SNPrintf(&v15[v540], 4000 - v540, "%10d, ", v541, v542, v543, v544, v545, *(_DWORD *)(a2 + 21756))
             + v540;
        v552 = AVE_SNPrintf(&v15[v546], 4000 - v546, "%04.3f, ", v547, v548, v549, v550, v551, *(_QWORD *)(a2 + 21760))
             + v546;
        v558 = AVE_SNPrintf(&v15[v552], 4000 - v552, "%04.3f, ", v553, v554, v555, v556, v557, *(_QWORD *)(a2 + 21768))
             + v552;
        v564 = AVE_SNPrintf(&v15[v558], 4000 - v558, "%04.3f, ", v559, v560, v561, v562, v563, *(_QWORD *)(a2 + 21776))
             + v558;
        v570 = AVE_SNPrintf(&v15[v564], 4000 - v564, "%04.3f, ", v565, v566, v567, v568, v569, *(_QWORD *)(a2 + 21784))
             + v564;
        v576 = AVE_SNPrintf(&v15[v570], 4000 - v570, "%04.3f, ", v571, v572, v573, v574, v575, *(_QWORD *)(a2 + 21792))
             + v570;
        v582 = AVE_SNPrintf(&v15[v576], 4000 - v576, "%04.3f, ", v577, v578, v579, v580, v581, *(_QWORD *)(a2 + 21800))
             + v576;
        v588 = AVE_SNPrintf(&v15[v582], 4000 - v582, "%04.3f, ", v583, v584, v585, v586, v587, *(_QWORD *)(a2 + 21808))
             + v582;
        v594 = AVE_SNPrintf(&v15[v588], 4000 - v588, "%04.3f, ", v589, v590, v591, v592, v593, *(_QWORD *)(a2 + 21816))
             + v588;
        v600 = AVE_SNPrintf(&v15[v594], 4000 - v594, "%04.3f, ", v595, v596, v597, v598, v599, *(_QWORD *)(a2 + 21824))
             + v594;
        v606 = AVE_SNPrintf(&v15[v600], 4000 - v600, "%04.3f, ", v601, v602, v603, v604, v605, *(_QWORD *)(a2 + 21832))
             + v600;
        v612 = AVE_SNPrintf(&v15[v606], 4000 - v606, "%04.3f, ", v607, v608, v609, v610, v611, *(_QWORD *)(a2 + 21840))
             + v606;
        v618 = AVE_SNPrintf(&v15[v612], 4000 - v612, "%10d, ", v613, v614, v615, v616, v617, *(_DWORD *)(a2 + 22316))
             + v612;
        v624 = 0;
        LODWORD(v630) = AVE_SNPrintf(&v15[v618], 4000 - v618, "%10d, ", v619, v620, v621, v622, v623, *(_DWORD *)(a2 + 22320))+ v618;
        do
        {
          LODWORD(v630) = AVE_SNPrintf(&v15[(int)v630], 4000 - (int)v630, "%10d, ", v625, v626, v627, v628, v629, *(_DWORD *)(a2 + 22324 + v624))+ v630;
          v624 += 4;
        }
        while (v624 != 32);
        for (i = 0; i != 64; i += 4)
          v630 = (int)AVE_SNPrintf(&v15[(int)v630], 4000 - (int)v630, "%10d, ", v625, v626, v627, v628, v629, *(_DWORD *)(a2 + 22356 + i))+ (uint64_t)(int)v630;
        v632 = AVE_SNPrintf(&v15[v630], 4000 - (int)v630, "%10d, ", v625, v626, v627, v628, v629, *(_DWORD *)(a2 + 21860))+ v630;
        v638 = AVE_SNPrintf(&v15[v632], 4000 - v632, "%10d, ", v633, v634, v635, v636, v637, *(_DWORD *)(a2 + 21908))
             + v632;
        v644 = AVE_SNPrintf(&v15[v638], 4000 - v638, "%10d, ", v639, v640, v641, v642, v643, *(_DWORD *)(a2 + 21876))
             + v638;
        v650 = AVE_SNPrintf(&v15[v644], 4000 - v644, "%10d, ", v645, v646, v647, v648, v649, *(_DWORD *)(a2 + 21912))
             + v644;
        v656 = AVE_SNPrintf(&v15[v650], 4000 - v650, "%10d, ", v651, v652, v653, v654, v655, *(_DWORD *)(a2 + 21916))
             + v650;
        v662 = AVE_SNPrintf(&v15[v656], 4000 - v656, "%10d, ", v657, v658, v659, v660, v661, *(_DWORD *)(a2 + 21892))
             + v656;
        v668 = AVE_SNPrintf(&v15[v662], 4000 - v662, "%10d, ", v663, v664, v665, v666, v667, *(_DWORD *)(a2 + 21924))
             + v662;
        v674 = AVE_SNPrintf(&v15[v668], 4000 - v668, "%10d, ", v669, v670, v671, v672, v673, *(_DWORD *)(a2 + 21928))
             + v668;
        v680 = AVE_SNPrintf(&v15[v674], 4000 - v674, "%10d, ", v675, v676, v677, v678, v679, *(_DWORD *)(a2 + 21940))
             + v674;
        v686 = AVE_SNPrintf(&v15[v680], 4000 - v680, "%10d, ", v681, v682, v683, v684, v685, *(_DWORD *)(a2 + 21944))
             + v680;
        v692 = AVE_SNPrintf(&v15[v686], 4000 - v686, "%10d, ", v687, v688, v689, v690, v691, *(_DWORD *)(a2 + 21932))
             + v686;
        v698 = AVE_SNPrintf(&v15[v692], 4000 - v692, "%10d, ", v693, v694, v695, v696, v697, *(_DWORD *)(a2 + 21936))
             + v692;
        v704 = AVE_SNPrintf(&v15[v698], 4000 - v698, "%10d, ", v699, v700, v701, v702, v703, *(_DWORD *)(a2 + 21848))
             + v698;
        v710 = AVE_SNPrintf(&v15[v704], 4000 - v704, "%10d, ", v705, v706, v707, v708, v709, *(_DWORD *)(a2 + 21852))
             + v704;
        v716 = AVE_SNPrintf(&v15[v710], 4000 - v710, "%10d, ", v711, v712, v713, v714, v715, *(_DWORD *)(a2 + 21856))
             + v710;
        v722 = AVE_SNPrintf(&v15[v716], 4000 - v716, "%04.3f, ", v717, v718, v719, v720, v721, *(_QWORD *)(a2 + 22264))
             + v716;
        v728 = AVE_SNPrintf(&v15[v722], 4000 - v722, "%04.3f, ", v723, v724, v725, v726, v727, *(_QWORD *)(a2 + 22112))
             + v722;
        v734 = AVE_SNPrintf(&v15[v728], 4000 - v728, "%04.3f, ", v729, v730, v731, v732, v733, *(_QWORD *)(a2 + 22120))
             + v728;
        v740 = AVE_SNPrintf(&v15[v734], 4000 - v734, "%04.3f, ", v735, v736, v737, v738, v739, *(_QWORD *)(a2 + 22128))
             + v734;
        v746 = AVE_SNPrintf(&v15[v740], 4000 - v740, "%10d, ", v741, v742, v743, v744, v745, *(_DWORD *)(a2 + 21976))
             + v740;
        v752 = AVE_SNPrintf(&v15[v746], 4000 - v746, "%10d, ", v747, v748, v749, v750, v751, *(_DWORD *)(a2 + 21980))
             + v746;
        v758 = AVE_SNPrintf(&v15[v752], 4000 - v752, "%10d, ", v753, v754, v755, v756, v757, *(double *)(a2 + 22096))+ v752;
        v764 = AVE_SNPrintf(&v15[v758], 4000 - v758, "%10d, ", v759, v760, v761, v762, v763, *(double *)(a2 + 22104))+ v758;
        v770 = AVE_SNPrintf(&v15[v764], 4000 - v764, "%04.3f, ", v765, v766, v767, v768, v769, *(_QWORD *)(a2 + 22072))
             + v764;
        v776 = AVE_SNPrintf(&v15[v770], 4000 - v770, "%04.3f, ", v771, v772, v773, v774, v775, *(_QWORD *)(a2 + 22080))
             + v770;
        v782 = AVE_SNPrintf(&v15[v776], 4000 - v776, "%04.3f, ", v777, v778, v779, v780, v781, *(_QWORD *)(a2 + 22088))
             + v776;
        v788 = AVE_SNPrintf(&v15[v782], 4000 - v782, "%04.3f, ", v783, v784, v785, v786, v787, *(_QWORD *)(a2 + 22048))
             + v782;
        v794 = AVE_SNPrintf(&v15[v788], 4000 - v788, "%04.3f, ", v789, v790, v791, v792, v793, *(_QWORD *)(a2 + 22056))
             + v788;
        v800 = AVE_SNPrintf(&v15[v794], 4000 - v794, "%04.3f, ", v795, v796, v797, v798, v799, *(_QWORD *)(a2 + 22064))
             + v794;
        v806 = AVE_SNPrintf(&v15[v800], 4000 - v800, "%04.3f, ", v801, v802, v803, v804, v805, *(_QWORD *)(a2 + 22136))
             + v800;
        v812 = AVE_SNPrintf(&v15[v806], 4000 - v806, "%04.6f, ", v807, v808, v809, v810, v811, *(_QWORD *)(a2 + 22144))
             + v806;
        v818 = AVE_SNPrintf(&v15[v812], 4000 - v812, "%04.6f, ", v813, v814, v815, v816, v817, *(_QWORD *)(a2 + 22152))
             + v812;
        v824 = AVE_SNPrintf(&v15[v818], 4000 - v818, "%04.3f, ", v819, v820, v821, v822, v823, *(_QWORD *)(a2 + 22160))
             + v818;
        v830 = AVE_SNPrintf(&v15[v824], 4000 - v824, "%04.3f, ", v825, v826, v827, v828, v829, *(_QWORD *)(a2 + 22168))
             + v824;
        v836 = AVE_SNPrintf(&v15[v830], 4000 - v830, "%10d, ", v831, v832, v833, v834, v835, *(_DWORD *)(a2 + 22492))
             + v830;
        v842 = AVE_SNPrintf(&v15[v836], 4000 - v836, "%10d, ", v837, v838, v839, v840, v841, *(_DWORD *)(a2 + 22528))
             + v836;
        v848 = AVE_SNPrintf(&v15[v842], 4000 - v842, "%10d, ", v843, v844, v845, v846, v847, *(_DWORD *)(a2 + 22456))
             + v842;
        v854 = AVE_SNPrintf(&v15[v848], 4000 - v848, "%04.3f, ", v849, v850, v851, v852, v853, *(_QWORD *)(a2 + 22208))
             + v848;
        v860 = AVE_SNPrintf(&v15[v854], 4000 - v854, "%04.3f, ", v855, v856, v857, v858, v859, *(_QWORD *)(a2 + 22272))
             + v854;
        v866 = AVE_SNPrintf(&v15[v860], 4000 - v860, "%04.3f, ", v861, v862, v863, v864, v865, *(_QWORD *)(a2 + 22280))
             + v860;
        v872 = AVE_SNPrintf(&v15[v866], 4000 - v866, "%04.3f, ", v867, v868, v869, v870, v871, *(_QWORD *)(a2 + 22288))
             + v866;
        v878 = AVE_SNPrintf(&v15[v872], 4000 - v872, "%04.3f, ", v873, v874, v875, v876, v877, *(_QWORD *)(a2 + 22296))
             + v872;
        v884 = AVE_SNPrintf(&v15[v878], 4000 - v878, "%04.3f, ", v879, v880, v881, v882, v883, *(_QWORD *)(a2 + 22304))
             + v878;
        v890 = AVE_SNPrintf(&v15[v884], 4000 - v884, "%10d, ", v885, v886, v887, v888, v889, *(_WORD *)(a2 + 22696))
             + v884;
        v896 = AVE_SNPrintf(&v15[v890], 4000 - v890, "%10d, ", v891, v892, v893, v894, v895, *(_WORD *)(a2 + 22700))
             + v890;
        v902 = AVE_SNPrintf(&v15[v896], 4000 - v896, "%10d, ", v897, v898, v899, v900, v901, *(_WORD *)(a2 + 22698))
             + v896;
        v908 = AVE_SNPrintf(&v15[v902], 4000 - v902, "%10d, ", v903, v904, v905, v906, v907, *(_WORD *)(a2 + 22702))
             + v902;
        v914 = AVE_SNPrintf(&v15[v908], 4000 - v908, "%10d, ", v909, v910, v911, v912, v913, *(_DWORD *)(a2 + 22704))
             + v908;
        v920 = AVE_SNPrintf(&v15[v914], 4000 - v914, "%10d, ", v915, v916, v917, v918, v919, *(_DWORD *)(a2 + 22708))
             + v914;
        v926 = AVE_SNPrintf(&v15[v920], 4000 - v920, "%10d, ", v921, v922, v923, v924, v925, *(_DWORD *)(a2 + 22712))
             + v920;
        v932 = AVE_SNPrintf(&v15[v926], 4000 - v926, "%10d, ", v927, v928, v929, v930, v931, *(_DWORD *)(a2 + 22716))
             + v926;
        v938 = AVE_SNPrintf(&v15[v932], 4000 - v932, "%04.3f, ", v933, v934, v935, v936, v937, *(_QWORD *)(a2 + 22720))
             + v932;
        v944 = AVE_SNPrintf(&v15[v938], 4000 - v938, "%04.3f, ", v939, v940, v941, v942, v943, *(_QWORD *)(a2 + 22728))
             + v938;
        v950 = AVE_SNPrintf(&v15[v944], 4000 - v944, "%04.3f, ", v945, v946, v947, v948, v949, *(_QWORD *)(a2 + 22736))
             + v944;
        v956 = AVE_SNPrintf(&v15[v950], 4000 - v950, "%04.3f, ", v951, v952, v953, v954, v955, *(_QWORD *)(a2 + 22744))
             + v950;
        v962 = AVE_SNPrintf(&v15[v956], 4000 - v956, "%04.3f, ", v957, v958, v959, v960, v961, *(_QWORD *)(a2 + 22752))
             + v956;
        v968 = AVE_SNPrintf(&v15[v962], 4000 - v962, "%04.3f, ", v963, v964, v965, v966, v967, *(_QWORD *)(a2 + 22760))
             + v962;
        v974 = AVE_SNPrintf(&v15[v968], 4000 - v968, "%04.3f, ", v969, v970, v971, v972, v973, *(_QWORD *)(a2 + 22768))
             + v968;
        v980 = AVE_SNPrintf(&v15[v974], 4000 - v974, "%04.3f, ", v975, v976, v977, v978, v979, *(_QWORD *)(a2 + 22776))
             + v974;
        v986 = AVE_SNPrintf(&v15[v980], 4000 - v980, "%04.3f, ", v981, v982, v983, v984, v985, *(_QWORD *)(a2 + 22784))
             + v980;
        v992 = AVE_SNPrintf(&v15[v986], 4000 - v986, "%04.3f, ", v987, v988, v989, v990, v991, *(_QWORD *)(a2 + 22792))
             + v986;
        v998 = AVE_SNPrintf(&v15[v992], 4000 - v992, "%04.3f, ", v993, v994, v995, v996, v997, *(_QWORD *)(a2 + 22800))
             + v992;
        v1004 = AVE_SNPrintf(&v15[v998], 4000 - v998, "%04.3f, ", v999, v1000, v1001, v1002, v1003, *(_QWORD *)(a2 + 22808))+ v998;
        v1010 = AVE_SNPrintf(&v15[v1004], 4000 - v1004, "%04.3f, ", v1005, v1006, v1007, v1008, v1009, *(_QWORD *)(a2 + 22816))+ v1004;
        v1016 = AVE_SNPrintf(&v15[v1010], 4000 - v1010, "%04.3f, ", v1011, v1012, v1013, v1014, v1015, *(_QWORD *)(a2 + 22824))+ v1010;
        v1022 = AVE_SNPrintf(&v15[v1016], 4000 - v1016, "%04.3f, ", v1017, v1018, v1019, v1020, v1021, *(_QWORD *)(a2 + 22832))+ v1016;
        v1028 = AVE_SNPrintf(&v15[v1022], 4000 - v1022, "%10d, ", v1023, v1024, v1025, v1026, v1027, *(_BYTE *)(a2 + 22884))+ v1022;
        v1034 = AVE_SNPrintf(&v15[v1028], 4000 - v1028, "%10d, ", v1029, v1030, v1031, v1032, v1033, *(_DWORD *)(a2 + 22888))+ v1028;
        v1040 = AVE_SNPrintf(&v15[v1034], 4000 - v1034, "%10d, ", v1035, v1036, v1037, v1038, v1039, *(_DWORD *)(a2 + 22892))+ v1034;
        v1046 = AVE_SNPrintf(&v15[v1040], 4000 - v1040, "%10d, ", v1041, v1042, v1043, v1044, v1045, *(_DWORD *)(a2 + 22896))+ v1040;
        v1052 = AVE_SNPrintf(&v15[v1046], 4000 - v1046, "%10d, ", v1047, v1048, v1049, v1050, v1051, *(_DWORD *)(a2 + 22900))+ v1046;
        v1058 = AVE_SNPrintf(&v15[v1052], 4000 - v1052, "%10d, ", v1053, v1054, v1055, v1056, v1057, *(_DWORD *)(a2 + 22904))+ v1052;
        v1064 = AVE_SNPrintf(&v15[v1058], 4000 - v1058, "%10d, ", v1059, v1060, v1061, v1062, v1063, *(_DWORD *)(a2 + 22908))+ v1058;
        v1070 = AVE_SNPrintf(&v15[v1064], 4000 - v1064, "%10d, ", v1065, v1066, v1067, v1068, v1069, *(_DWORD *)(a2 + 22912))+ v1064;
        v1076 = AVE_SNPrintf(&v15[v1070], 4000 - v1070, "%10d, ", v1071, v1072, v1073, v1074, v1075, *(_DWORD *)(a2 + 22916))+ v1070;
        v1082 = AVE_SNPrintf(&v15[v1076], 4000 - v1076, "%04.3f, ", v1077, v1078, v1079, v1080, v1081, *(_QWORD *)(a2 + 22920))+ v1076;
        v1088 = AVE_SNPrintf(&v15[v1082], 4000 - v1082, "%04.3f, ", v1083, v1084, v1085, v1086, v1087, *(_QWORD *)(a2 + 22928))+ v1082;
        v1094 = AVE_SNPrintf(&v15[v1088], 4000 - v1088, "%10d, ", v1089, v1090, v1091, v1092, v1093, *(_DWORD *)(a2 + 22840))+ v1088;
        v1100 = AVE_SNPrintf(&v15[v1094], 4000 - v1094, "%10d, ", v1095, v1096, v1097, v1098, v1099, *(_DWORD *)(a2 + 22844))+ v1094;
        v1106 = AVE_SNPrintf(&v15[v1100], 4000 - v1100, "%10d, ", v1101, v1102, v1103, v1104, v1105, *(_DWORD *)(a2 + 22848))+ v1100;
        v1112 = AVE_SNPrintf(&v15[v1106], 4000 - v1106, "%10d, ", v1107, v1108, v1109, v1110, v1111, *(_DWORD *)(a2 + 22852))+ v1106;
        v1118 = AVE_SNPrintf(&v15[v1112], 4000 - v1112, "%10d, ", v1113, v1114, v1115, v1116, v1117, *(_DWORD *)(a2 + 22856))+ v1112;
        v1124 = AVE_SNPrintf(&v15[v1118], 4000 - v1118, "%10d, ", v1119, v1120, v1121, v1122, v1123, *(_DWORD *)(a2 + 22860))+ v1118;
        v1130 = AVE_SNPrintf(&v15[v1124], 4000 - v1124, "%10d, ", v1125, v1126, v1127, v1128, v1129, *(_DWORD *)(a2 + 22864))+ v1124;
        v1136 = AVE_SNPrintf(&v15[v1130], 4000 - v1130, "%10d, ", v1131, v1132, v1133, v1134, v1135, *(_DWORD *)(a2 + 22868))+ v1130;
        v1142 = AVE_SNPrintf(&v15[v1136], 4000 - v1136, "%10d, ", v1137, v1138, v1139, v1140, v1141, *(_DWORD *)(a2 + 22872))+ v1136;
        v1148 = AVE_SNPrintf(&v15[v1142], 4000 - v1142, "%10d, ", v1143, v1144, v1145, v1146, v1147, *(_DWORD *)(a2 + 22876))+ v1142;
        v1159 = AVE_SNPrintf(&v15[v1148], 4000 - v1148, "%10d, ", v1149, v1150, v1151, v1152, v1153, *(_DWORD *)(a2 + 22880))+ v1148;
        if (v40[12])
        {
          v1160 = (char *)(a2 + 22961);
          v1161 = 7;
          do
          {
            v1162 = (int)AVE_SNPrintf(&v15[v1159], 4000 - v1159, "%10d, ", v1154, v1155, v1156, v1157, v1158, *(_DWORD *)(v1160 - 25))+ (uint64_t)v1159;
            LODWORD(v1162) = AVE_SNPrintf(&v15[v1162], 4000 - (int)v1162, "%10d, ", v1163, v1164, v1165, v1166, v1167, *(_DWORD *)(v1160 - 21))+ v1162;
            LODWORD(v1162) = AVE_SNPrintf(&v15[(int)v1162], 4000 - (int)v1162, "%20lld, ", v1168, v1169, v1170, v1171, v1172, *(_QWORD *)(v1160 - 17))+ v1162;
            LODWORD(v1162) = AVE_SNPrintf(&v15[(int)v1162], 4000 - (int)v1162, "%20lld, ", v1173, v1174, v1175, v1176, v1177, *(_QWORD *)(v1160 - 9))+ v1162;
            LODWORD(v1162) = AVE_SNPrintf(&v15[(int)v1162], 4000 - (int)v1162, "%10d, ", v1178, v1179, v1180, v1181, v1182, *(v1160 - 1))+ v1162;
            v1183 = *v1160;
            v1160 += 32;
            v1159 = AVE_SNPrintf(&v15[(int)v1162], 4000 - (int)v1162, "%10d, ", v1184, v1185, v1186, v1187, v1188, v1183)+ v1162;
            --v1161;
          }
          while (v1161);
          v1189 = AVE_SNPrintf(&v15[v1159], 4000 - v1159, "%10d, ", v1154, v1155, v1156, v1157, v1158, *(_DWORD *)(a2 + 23448))+ v1159;
          v1159 = AVE_SNPrintf(&v15[v1189], 4000 - v1189, "%10d, ", v1190, v1191, v1192, v1193, v1194, *(_DWORD *)(a2 + 23452))+ v1189;
        }
        a3 = v1317;
        v1318 = v1159;
        v1195 = (int)AVE_SNPrintf(&v15[v1159], 4000 - v1159, "%5d,", v1154, v1155, v1156, v1157, v1158, *(_DWORD *)(a2 + 2500))+ (uint64_t)v1159;
        LODWORD(v1195) = AVE_SNPrintf(&v15[v1195], 4000 - (int)v1195, "%5d,", v1196, v1197, v1198, v1199, v1200, *(_DWORD *)(a2 + 2496))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%8d, ", v1201, v1202, v1203, v1204, v1205, *(_DWORD *)(a2 + 3980))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1206, v1207, v1208, v1209, v1210, *(_DWORD *)(a2 + 2588))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1211, v1212, v1213, v1214, v1215, *(_DWORD *)(a2 + 2456))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1216, v1217, v1218, v1219, v1220, *(_BYTE *)(a2 + 2461))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1221, v1222, v1223, v1224, v1225, *(_BYTE *)(a2 + 2462))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1226, v1227, v1228, v1229, v1230, *(_DWORD *)(a2 + 2572))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1231, v1232, v1233, v1234, v1235, *(_DWORD *)(a2 + 2596))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%04.3f, ", v1236, v1237, v1238, v1239, v1240, *(_QWORD *)(a2 + 2608))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%04.3f, ", v1241, v1242, v1243, v1244, v1245, *(_QWORD *)(a2 + 2616))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%04.3f, ", v1246, v1247, v1248, v1249, v1250, *(_QWORD *)(a2 + 2624))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%04.3f, ", v1251, v1252, v1253, v1254, v1255, *(_QWORD *)(a2 + 2632))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d, ", v1256, v1257, v1258, v1259, v1260, *(_DWORD *)(a2 + 2488))+ v1195;
        LODWORD(v1195) = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d,", v1261, v1262, v1263, v1264, v1265, *(_DWORD *)(a2 + 2492))+ v1195;
        v1318 = AVE_SNPrintf(&v15[(int)v1195], 4000 - (int)v1195, "%10d,", v1266, v1267, v1268, v1269, v1270, *(_DWORD *)(a2 + 2596))+ v1195;
        v1276 = AVE_SNPrintf(&v15[v1318], 4000 - v1318, "%10lld, ", v1271, v1272, v1273, v1274, v1275, 8 * *(_BYTE *)(a2 + 29360));
        v1277 = v1318 + (uint64_t)v1276;
        v1318 += v1276;
        v1283 = AVE_SNPrintf(&v15[v1277], 4000 - (int)v1277, "%lld, ", v1278, v1279, v1280, v1281, v1282, *(_QWORD *)(a2 + 29368));
        v1284 = v1318 + (uint64_t)v1283;
        v1318 += v1283;
        v1290 = AVE_SNPrintf(&v15[v1284], 4000 - (int)v1284, "%lld, ", v1285, v1286, v1287, v1288, v1289, *(_QWORD *)(a2 + 29376));
        v1291 = v1318 + (uint64_t)v1290;
        v1318 += v1290;
        v1297 = AVE_SNPrintf(&v15[v1291], 4000 - (int)v1291, "%lld, ", v1292, v1293, v1294, v1295, v1296, *(_QWORD *)(a2 + 29384));
        v1298 = v1318 + (uint64_t)v1297;
        v1318 += v1297;
        v1304 = AVE_SNPrintf(&v15[v1298], 4000 - (int)v1298, "%lld, ", v1299, v1300, v1301, v1302, v1303, *(_QWORD *)(a2 + 29392));
        LODWORD(v216) = v1318 + v1304;
        v1318 += v1304;
      }
      if ((int)v216 >= 4000)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v1305 = AVE_Log_CheckConsole(0x2Eu);
          v1306 = AVE_GetCurrTime();
          v1307 = AVE_Log_GetLevelStr(4);
          if (v1305)
          {
            printf("%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p\n", v1306, 46, v1307, "AVE_FrameStats_PrintStatFrame", 871, "offset < maxSizeStr", v15, v1318, (const void *)a2, v40, a3);
            v1308 = AVE_GetCurrTime();
            v1316 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p", v1308, 46, v1316, "AVE_FrameStats_PrintStatFrame", 871);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p", v1306, 46, v1307, "AVE_FrameStats_PrintStatFrame", 871);
          }
        }
        v31 = 4294966290;
      }
      else
      {
        fprintf(a3, "%s\n", v15);
        v31 = 0;
      }
      MEMORY[0x1B5E4D1A8](v15, 0x1000C8077774924);
    }
    else
    {
      v31 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v17 = AVE_Log_CheckConsole(0x2Eu);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v18, 46, v19, "AVE_FrameStats_PrintStatFrame", 779, "(psFrame != __null) && (psMgr != __null)", (const void *)a2, a1, a3);
        v20 = AVE_GetCurrTime();
        v1315 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v20, 46, v1315);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v18, 46, v19);
      }
    }
    v31 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x74u, 7))
  {
    v1309 = AVE_Log_CheckConsole(0x74u);
    v1310 = AVE_GetCurrTime();
    v1311 = AVE_Log_GetLevelStr(7);
    if (v1309)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d\n", v1310, 116, v1311, "AVE_FrameStats_PrintStatFrame", (const void *)a2, a1, a3, v31);
      v1310 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d", v1310, 116);
  }
  return v31;
}

uint64_t AVE_USL_Enc_PropCfg_Init(_OWORD *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __uint64_t v9;
  const char *v11;
  const char *v12;

  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    v2 = AVE_Log_CheckConsole(0x1Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Init", a1);
      v5 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v11, "AVE_USL_Enc_PropCfg_Init", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Init", a1);
    }
  }
  a1[27] = 0u;
  a1[28] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *((_DWORD *)a1 + 32) = -1;
  *((_QWORD *)a1 + 17) = 0xBFF0000000000000;
  *((_QWORD *)a1 + 18) = -1;
  *((_QWORD *)a1 + 19) = -1;
  *((_QWORD *)a1 + 20) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 42) = -1;
  *((_QWORD *)a1 + 22) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 46) = -1;
  *((_QWORD *)a1 + 24) = -1;
  *((_QWORD *)a1 + 30) = -1;
  *((_DWORD *)a1 + 106) = -1;
  *((_QWORD *)a1 + 39) = -1;
  *((_DWORD *)a1 + 80) = -1;
  *((_DWORD *)a1 + 82) = -1;
  *((_QWORD *)a1 + 31) = 0xBFF0000000000000;
  *((_QWORD *)a1 + 32) = -1;
  *((_QWORD *)a1 + 33) = -1;
  *((_DWORD *)a1 + 70) = -2;
  *((_QWORD *)a1 + 37) = -1;
  *((_QWORD *)a1 + 38) = -1;
  *((_QWORD *)a1 + 36) = -1;
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    v6 = AVE_Log_CheckConsole(0x1Eu);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 30, v8, "AVE_USL_Enc_PropCfg_Init", a1, 0);
      v9 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 30, v12, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 30, v8, "AVE_USL_Enc_PropCfg_Init", a1, 0);
    }
  }
  return 0;
}

uint64_t AVE_USL_Enc_PropCfg_Uninit(const void *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __uint64_t v9;
  const char *v11;
  const char *v12;

  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    v2 = AVE_Log_CheckConsole(0x1Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Uninit", a1);
      v5 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 30, v11, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 30, LevelStr, "AVE_USL_Enc_PropCfg_Uninit", a1);
    }
  }
  if (AVE_Log_CheckLevel(0x1Eu, 7))
  {
    v6 = AVE_Log_CheckConsole(0x1Eu);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
      v9 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v9, 30, v12, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v7, 30, v8, "AVE_USL_Enc_PropCfg_Uninit", a1, 0);
    }
  }
  return 0;
}

uint64_t AVE_PixelBufAttr_AppendPixelFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFArray *a6)
{
  unsigned int NumberOfTypes;
  int *v13;
  uint64_t SupportedList;
  uint64_t v15;
  int v16;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  __uint64_t v27;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;

  NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
  v13 = (int *)operator new[]();
  v40 = NumberOfTypes;
  SupportedList = AVE_PixelFmt_GetSupportedList(a1, a2, a3, a4, (uint64_t)v13, &v40);
  if ((_DWORD)SupportedList)
  {
    v15 = SupportedList;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get supported pixel format list %d %d 0x%x %d 0x%x %p %d %d\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_AppendPixelFormat", 106, "ret == 0", a1, a2, a3, a4, a5, v13, v40, v15);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
      }
      v38 = v40;
      v39 = v15;
      v36 = a5;
      v37 = v13;
      v34 = a3;
      v35 = a4;
      v32 = a1;
      v33 = a2;
      v31 = 106;
      v29 = LevelStr;
      v19 = "%lld %d AVE %s: %s:%d %s | failed to get supported pixel format list %d %d 0x%x %d 0x%x %p %d %d";
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  v20 = v40;
  if ((_DWORD)a5 == 1095519264)
  {
    if ((int)v40 < 1)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_20;
    }
    v21 = v13;
    while (1)
    {
      v22 = *v21++;
      v23 = AVE_CFArray_AddSInt32(v22, a6);
      if ((_DWORD)v23)
        break;
      if (!--v20)
        goto LABEL_11;
    }
LABEL_19:
    v15 = v23;
    goto LABEL_20;
  }
  v24 = AVE_PixelFmt_Check((const unsigned int *)v13, v40, a5);
  if (!(_DWORD)v24)
  {
    v23 = AVE_CFArray_AddSInt32(a5, a6);
    goto LABEL_19;
  }
  v15 = v24;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v25 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(4);
    if (!v25)
    {
      v38 = v40;
      v39 = v15;
      v36 = a5;
      v37 = v13;
      v34 = a3;
      v35 = a4;
      v32 = a1;
      v33 = a2;
      v31 = 118;
      v29 = v26;
      v19 = "%lld %d AVE %s: %s:%d %s | wrong parameters %d %d 0x%x %d 0x%x %p %d %d";
LABEL_17:
      syslog(3, v19, CurrTime, 3, v29, "AVE_PixelBufAttr_AppendPixelFormat", v31, "ret == 0", v32, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_20;
    }
    printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %d 0x%x %d 0x%x %p %d %d\n", CurrTime, 3, v26, "AVE_PixelBufAttr_AppendPixelFormat", 118, "ret == 0", a1, a2, a3, a4, a5, v13, v40, v15);
    v27 = AVE_GetCurrTime();
    v30 = AVE_Log_GetLevelStr(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %d 0x%x %d 0x%x %p %d %d", v27, 3, v30, "AVE_PixelBufAttr_AppendPixelFormat", 118);
  }
LABEL_20:
  MEMORY[0x1B5E4D1A8](v13, 0x1000C8052888210);
  return v15;
}

uint64_t AVE_PixelBufAttr_AppendPixelFormatByProfile(int a1, uint64_t a2, int a3, int a4, int a5, int a6, __CFArray *a7)
{
  uint64_t v14;
  uint64_t SupportedListByProfile;
  uint64_t v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  const char *v30;
  const char *v31;
  unsigned int v32;

  v32 = 0;
  AVE_PixelFmt_GetNumberOfTypes();
  v14 = operator new[]();
  SupportedListByProfile = AVE_PixelFmt_GetSupportedListByProfile(a1, a2, a3, a4, a5, a6, v14, (int *)&v32);
  if ((_DWORD)SupportedListByProfile)
  {
    v16 = SupportedListByProfile;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v17 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get supported pixel format list by profile %d %d 0x%x %d %d %d %d\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_AppendPixelFormatByProfile", 167, "ret == 0", a1, a2, a3, a4, a5, a6, v16);
        v20 = AVE_GetCurrTime();
        v30 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get supported pixel format list by profile %d %d 0x%x %d %d %d %d", v20, 3, v30, "AVE_PixelBufAttr_AppendPixelFormatByProfile");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get supported pixel format list by profile %d %d 0x%x %d %d %d %d", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_AppendPixelFormatByProfile");
      }
    }
  }
  else
  {
    v21 = v32;
    if (v32)
    {
      if ((int)v32 < 1)
      {
LABEL_10:
        v16 = 0;
      }
      else
      {
        v22 = (int *)v14;
        while (1)
        {
          v23 = *v22++;
          v24 = AVE_CFArray_AddSInt32(v23, a7);
          if ((_DWORD)v24)
            break;
          if (!--v21)
            goto LABEL_10;
        }
        v16 = v24;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v25 = AVE_Log_CheckConsole(3u);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        if (v25)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to find matched pixel format list %d %d 0x%x %d %d %d\n", v26, 3, v27, "AVE_PixelBufAttr_AppendPixelFormatByProfile", 171, "num != 0", a1, a2, a3, a4, a5, a6);
          v28 = AVE_GetCurrTime();
          v31 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to find matched pixel format list %d %d 0x%x %d %d %d", v28, 3, v31);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to find matched pixel format list %d %d 0x%x %d %d %d", v26, 3, v27);
        }
      }
      v16 = 4294966288;
    }
  }
  MEMORY[0x1B5E4D1A8](v14, 0x1000C8052888210);
  return v16;
}

uint64_t AVE_PixelBufAttr_AppendIOSurface(int a1, int *a2, __CFDictionary *a3)
{
  char *v5;
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  __CFDictionary *v9;
  CFMutableDictionaryRef v10;
  __CFDictionary *v11;
  BOOL v12;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v17;
  const __CFString *v19;
  const __CFString **v20;
  int v21;
  const __CFString **v22;
  int v23;
  int v24;
  const char *v25;

  v5 = AVE_PixelFmt_FindByType(a1);
  if (!v5)
    return 4294954394;
  if ((*((_DWORD *)v5 + 6) & 0xFFFFFFFE) != 2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = CFDictionaryCreateMutable(0, 0, v7, v8);
  v11 = v10;
  if (Mutable)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (!v12 && v10 != 0)
  {
    v19 = (const __CFString *)*MEMORY[0x1E0CBC128];
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBC128], 1, v9);
    AVE_CFDict_AddSInt32(v19, 1, v11);
    v20 = (const __CFString **)MEMORY[0x1E0CBC150];
    if (*a2 >= 1)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBC150], *a2, v9);
    v21 = a2[2];
    v22 = (const __CFString **)MEMORY[0x1E0CBC170];
    if (v21 >= 1)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBC170], v21, v9);
    v23 = a2[4];
    if (v23 >= 1)
      AVE_CFDict_AddSInt32(*v20, v23, v11);
    v24 = a2[6];
    if (v24 >= 1)
      AVE_CFDict_AddSInt32(*v22, v24, v11);
    CFArrayAppendValue(Mutable, v9);
    CFArrayAppendValue(Mutable, v11);
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x1E0CA91B0], Mutable);
    CFRelease(v9);
    CFRelease(v11);
    CFRelease(Mutable);
    return 0;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v14 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_AppendIOSurface", 262, "pArray != __null && pDict0 != __null && pDict1 != __null", Mutable, v9, v11);
      v17 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", v17, 3, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CF objects %p %p %p", CurrTime, 3, LevelStr);
    }
  }
  return 4294954392;
}

uint64_t AVE_PixelBufAttr_CreateDictFromProfile(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int *a13, __CFDictionary **a14)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v23;
  __CFArray *v24;
  __CFArray *v25;
  int appended;
  int v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  __uint64_t v31;
  int v32;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v35;
  int v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  __CFDictionary *v40;
  __CFDictionary *v41;
  __CFArray *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t result;
  int v46;
  const char *v47;
  int v48;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954392;
    v32 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v32)
    {
LABEL_27:
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
      return 4294954392;
    }
    v35 = "pDict != __null";
    v36 = 344;
LABEL_10:
    printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_CreateDictFromProfile", v36, v35);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_27;
  }
  v23 = Mutable;
  v24 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v24)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v37 = AVE_Log_CheckConsole(3u);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(4);
      if (v37)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", v38, 3, v39, "AVE_PixelBufAttr_CreateDictFromProfile", 349, "pTempArray != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
    return 4294954392;
  }
  v25 = v24;
  v48 = a7;
  appended = AVE_PixelBufAttr_AppendPixelFormatByProfile(a1, a2, a3, a4, a5, a10, v24);
  if (appended)
  {
    v27 = appended;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d %d\n", v29, 3, v30, "AVE_PixelBufAttr_CreateDictFromProfile", 356, "ret == 0", a1, a2, a3, a4, a5, a10, v27);
        v31 = AVE_GetCurrTime();
        v47 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d %d", v31, 3, v47, "AVE_PixelBufAttr_CreateDictFromProfile");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d %d", v29, 3, v30, "AVE_PixelBufAttr_CreateDictFromProfile");
      }
    }
    CFRelease(v25);
    return 4294954394;
  }
  CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E0CA9040], v25);
  CFRelease(v25);
  v40 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v40)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954392;
    v46 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v46)
      goto LABEL_27;
    v35 = "pTempDict != __null";
    v36 = 365;
    goto LABEL_10;
  }
  v41 = v40;
  AVE_PixelBufAttr_AppendIOSurface(a11, a13, v40);
  CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E0CA8FF0], v41);
  CFRelease(v41);
  v42 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v43 = 0;
  do
  {
    if (AVE_CFArray_AddSInt32(AVE_PixelBufAttr_AppendCacheMode(__CFArray *)::s_iCacheMode[v43], v42))
      v44 = 1;
    else
      v44 = v43 == 5;
    ++v43;
  }
  while (!v44);
  CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E0CA8F80], v42);
  CFRelease(v42);
  CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E0CA9000], (const void *)*MEMORY[0x1E0C9AE50]);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA90E0], a6, v23);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FD8], v48, v23);
  if (a1 <= 10)
  {
    if (a8 > a6)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FB8], a8 - a6, v23);
    if (a9 > v48)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FA0], a9 - v48, v23);
  }
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA9048], 64, v23);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8F68], a12 << 6, v23);
  result = 0;
  *a14 = v23;
  return result;
}

uint64_t AVE_PixelBufAttr_CreateDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, int *a11, __CFDictionary **a12)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v21;
  __CFArray *v22;
  __CFArray *v23;
  int appended;
  int v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  int v30;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v33;
  int v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  __CFArray *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t result;
  int v44;
  const char *v45;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954392;
    v30 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v30)
    {
LABEL_29:
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFDictionary");
      return 4294954392;
    }
    v33 = "pDict != __null";
    v34 = 464;
LABEL_10:
    printf("%lld %d AVE %s: %s:%d %s | failed to create CFDictionary\n", CurrTime, 3, LevelStr, "AVE_PixelBufAttr_CreateDict", v34, v33);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_29;
  }
  v21 = Mutable;
  v22 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v22)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v35 = AVE_Log_CheckConsole(3u);
      v36 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create CFArray\n", v36, 3, v37, "AVE_PixelBufAttr_CreateDict", 469, "pTempArray != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create CFArray");
    }
    return 4294954392;
  }
  v23 = v22;
  appended = AVE_PixelBufAttr_AppendPixelFormat(a1, a2, a3, a4, a9, v22);
  if (appended)
  {
    v25 = appended;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v26 = AVE_Log_CheckConsole(3u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d\n", v27, 3, v28, "AVE_PixelBufAttr_CreateDict", 474, "ret == 0", a1, a2, a3, a4, a9, v25);
        v29 = AVE_GetCurrTime();
        v45 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d", v29, 3, v45);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to append pixel format list %d %d 0x%x %d %d %d", v27, 3, v28);
      }
    }
    CFRelease(v23);
    return 4294954394;
  }
  CFDictionaryAddValue(v21, (const void *)*MEMORY[0x1E0CA9040], v23);
  CFRelease(v23);
  v38 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v38)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954392;
    v44 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v44)
      goto LABEL_29;
    v33 = "pTempDict != __null";
    v34 = 483;
    goto LABEL_10;
  }
  v39 = v38;
  AVE_PixelBufAttr_AppendIOSurface(a9, a11, v38);
  CFDictionaryAddValue(v21, (const void *)*MEMORY[0x1E0CA8FF0], v39);
  CFRelease(v39);
  v40 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v41 = 0;
  do
  {
    if (AVE_CFArray_AddSInt32(AVE_PixelBufAttr_AppendCacheMode(__CFArray *)::s_iCacheMode[v41], v40))
      v42 = 1;
    else
      v42 = v41 == 5;
    ++v41;
  }
  while (!v42);
  CFDictionaryAddValue(v21, (const void *)*MEMORY[0x1E0CA8F80], v40);
  CFRelease(v40);
  CFDictionaryAddValue(v21, (const void *)*MEMORY[0x1E0CA9000], (const void *)*MEMORY[0x1E0C9AE50]);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA90E0], a5, v21);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FD8], a6, v21);
  if ((int)a1 < 11 || a1 <= 0xF && (_DWORD)a3 == 24)
  {
    if (a7 > a5)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FB8], a7 - a5, v21);
    if (a8 > a6)
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8FA0], a8 - a6, v21);
  }
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA9048], 64, v21);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA8F68], a10 << 6, v21);
  result = 0;
  *a12 = v21;
  return result;
}

uint64_t AVE_AlignDimension(int a1, signed int *a2, signed int *a3)
{
  signed int v3;
  signed int v4;
  BOOL v5;
  int v6;
  signed int v7;
  uint64_t result;

  if (a1 == 1)
  {
    v7 = (*a2 + 15) & 0xFFFFFFF0;
    if (v7 <= 160)
      v7 = 160;
    *a2 = v7;
    v4 = (*a3 + 15) & 0xFFFFFFF0;
    v5 = v4 <= 64;
    v6 = 64;
  }
  else
  {
    if (a1)
      return 4294954394;
    v3 = (*a2 + 15) & 0xFFFFFFF0;
    if (v3 <= 192)
      v3 = 192;
    *a2 = v3;
    v4 = (*a3 + 15) & 0xFFFFFFF0;
    v5 = v4 <= 96;
    v6 = 96;
  }
  if (v5)
    v4 = v6;
  result = 0;
  *a3 = v4;
  return result;
}

uint64_t AVE_ImgBuf_CreatePool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9, CVPixelBufferPoolRef *poolOut)
{
  unint64_t v10;
  unint64_t v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFDictionaryRef v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  CFDictionaryRef pixelBufferAttributes;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  pixelBufferAttributes = 0;
  memset(v24, 0, sizeof(v24));
  v10 = __PAIR64__(a8, a7);
  if ((_DWORD)a4 == 1)
  {
    v11 = *(_QWORD *)&vadd_s32((int32x2_t)__PAIR64__(a8, a7), (int32x2_t)0xF0000000FLL) & 0xFFFFFFF0FFFFFFF0;
    v12 = (int32x2_t)0x40000000A0;
  }
  else
  {
    if ((_DWORD)a4)
      goto LABEL_6;
    v11 = *(_QWORD *)&vadd_s32((int32x2_t)__PAIR64__(a8, a7), (int32x2_t)0xF0000000FLL) & 0xFFFFFFF0FFFFFFF0;
    v12 = (int32x2_t)0x60000000C0;
  }
  v10 = (unint64_t)vmax_s32((int32x2_t)v11, v12);
LABEL_6:
  v13 = AVE_PixelBufAttr_CreateDict(a1, a2, a3, a4, a5, a6, v10, SHIDWORD(v10), a9, 1, (int *)v24, &pixelBufferAttributes);
  if ((_DWORD)v13)
  {
    v14 = v13;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v15 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_CreatePool", 606, "rc == noErr", v14);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create pixel buffer attributes %d", CurrTime);
    }
  }
  else
  {
    v18 = pixelBufferAttributes;
    v14 = CVPixelBufferPoolCreate(0, 0, pixelBufferAttributes, poolOut);
    if (!(_DWORD)v14)
      goto LABEL_19;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d\n", v20, 3, v21, "AVE_ImgBuf_CreatePool", 610, "cvrc == kCVReturnSuccess", v14);
        v20 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a pixel buffer pool %d", v20);
    }
    v14 = 4294954392;
  }
  v18 = pixelBufferAttributes;
LABEL_19:
  if (v18)
    CFRelease(v18);
  return v14;
}

uint64_t AVE_ImgBuf_Copy(__CVBuffer *a1, __CVBuffer *a2)
{
  int PlaneCount;
  size_t v5;
  uint64_t v6;
  int HeightOfPlane;
  __IOSurface *IOSurface;
  char *BaseAddressOfPlane;
  __IOSurface *v10;
  char *v11;
  unsigned int BytesPerRowOfPlane;
  unsigned int v13;
  size_t v14;
  uint64_t v15;

  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount >= 1)
  {
    v5 = 0;
    v6 = PlaneCount;
    do
    {
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v5);
      IOSurface = CVPixelBufferGetIOSurface(a1);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(IOSurface, v5);
      v10 = CVPixelBufferGetIOSurface(a2);
      v11 = (char *)IOSurfaceGetBaseAddressOfPlane(v10, v5);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v5);
      v13 = CVPixelBufferGetBytesPerRowOfPlane(a2, v5);
      if (HeightOfPlane)
      {
        if (BytesPerRowOfPlane >= v13)
          v14 = v13;
        else
          v14 = BytesPerRowOfPlane;
        v15 = v13;
        do
        {
          memcpy(v11, BaseAddressOfPlane, v14);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v11 += v15;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t AVE_ImgBuf_VerifyUncompressed(__CVBuffer *a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5)
{
  __IOSurface *IOSurface;
  void *BaseAddressOfPlane;
  void *v12;
  size_t v13;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  int WidthOfPlane;
  int HeightOfPlane;
  size_t v19;
  unsigned int BytesPerRowOfPlane;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  int v27;
  size_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v46;
  __uint64_t v47;
  const char *v48;
  __uint64_t v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnLeft = 0;
  extraRowsOnTop = 0;
  extraColumnsOnRight = 0;
  extraRowsOnBottom = 0;
  IOSurface = CVPixelBufferGetIOSurface(a1);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(IOSurface, 0);
  v12 = BaseAddressOfPlane;
  if (!BaseAddressOfPlane || (BaseAddressOfPlane & 0x3F) != 0)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyUncompressed", 710, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v12);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address 0x%lx", CurrTime);
    }
    return 4294954394;
  }
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if ((a5 & 1) != 0)
  {
    LODWORD(v13) = 0;
    goto LABEL_11;
  }
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v13 = (extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight);
  v19 = (extraRowsOnTop + HeightOfPlane + extraRowsOnBottom);
  if (v13 >= a2 && v19 >= a3)
  {
LABEL_11:
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    v21 = BytesPerRowOfPlane;
    if (a4[6] == 1)
    {
      v22 = (2 * ((2863311531u * (unint64_t)(v13 + 2)) >> 32)) & 0xFFFFFFFC;
      if (!BytesPerRowOfPlane)
        goto LABEL_23;
    }
    else
    {
      v22 = (_DWORD)v13 << (a4[1] != 8);
      if (!BytesPerRowOfPlane)
        goto LABEL_23;
    }
    if ((BytesPerRowOfPlane & 0x3F) != 0 || v22 > BytesPerRowOfPlane)
    {
LABEL_23:
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v33 = AVE_Log_CheckConsole(3u);
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v34, 3, v35, "AVE_ImgBuf_VerifyUncompressed", 730, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v21, v22);
          v34 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v34);
      }
      return 4294954394;
    }
    if (a4[3])
    {
      if ((a5 & 1) != 0
        || (v23 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            v25 = (int)a4[4] >> 1,
            v26 = (extraColumnsOnRight >> v25) + v23 + (extraColumnsOnLeft >> v25),
            v27 = (int)a4[5] >> 1,
            v28 = (extraRowsOnBottom >> v27) + v24 + (extraRowsOnTop >> v27),
            a2 >> v25 <= v26)
        && (LODWORD(v13) = v26, a3 >> v27 <= v28))
      {
        v29 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        v30 = v29;
        v31 = (2 * v13) >> ((int)a4[4] >> 1);
        if (a4[6] == 1)
          v32 = (2 * ((2863311531u * (unint64_t)(v31 + 2)) >> 32)) & 0xFFFFFFFC;
        else
          v32 = v31 << (a4[1] != 8);
        if (!v29 || (v29 & 0x3F) != 0 || v32 > v29)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v46 = AVE_Log_CheckConsole(3u);
            v47 = AVE_GetCurrTime();
            v48 = AVE_Log_GetLevelStr(4);
            if (v46)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x\n", v47, 3, v48, "AVE_ImgBuf_VerifyUncompressed", 773, "stride != 0 && (stride & 0x3F) == 0 && stride >= neededStride", v30, v32);
              v49 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v49);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride 0x%x 0x%x", v47);
            }
          }
          return 4294954394;
        }
        return 0;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v50 = AVE_Log_CheckConsole(3u);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        if (v50)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 763, "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))", v26, v28, a2, a3);
          v51 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
LABEL_57:
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v51, 3);
          return 4294954394;
        }
        v60 = a2;
        v61 = a3;
        v58 = v26;
        v59 = v28;
        v52 = "(width >= (videoWidth >> ((pFmt->iSubWidthC) >> 1))) && (height >= (videoHeight >> ((pFmt->iSubHeightC) >> 1)))";
        v53 = 763;
        goto LABEL_52;
      }
    }
    else
    {
      if ((a5 & 1) != 0
        || (v39 = CVPixelBufferGetWidthOfPlane(a1, 1uLL),
            v40 = CVPixelBufferGetHeightOfPlane(a1, 1uLL),
            !(v39 | v40)))
      {
        v41 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v41)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v42 = AVE_Log_CheckConsole(3u);
            v43 = AVE_GetCurrTime();
            v44 = AVE_Log_GetLevelStr(4);
            if (v42)
            {
              printf("%lld %d AVE %s: %s:%d %s | invalid buffer stride %x\n", v43, 3, v44, "AVE_ImgBuf_VerifyUncompressed", 749, "stride == 0", v41);
              v43 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer stride %x", v43);
          }
          return 4294954394;
        }
        return 0;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v54 = AVE_Log_CheckConsole(3u);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        if (v54)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 743, "width == 0 && height == 0", v39, v40, a2, a3);
          v51 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          goto LABEL_57;
        }
        v60 = a2;
        v61 = a3;
        v58 = v39;
        v59 = v40;
        v52 = "width == 0 && height == 0";
        v53 = 743;
        goto LABEL_52;
      }
    }
    return 4294954394;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v36 = AVE_Log_CheckConsole(3u);
    v37 = AVE_GetCurrTime();
    v38 = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v37, 3, v38, "AVE_ImgBuf_VerifyUncompressed", 722, "width >= videoWidth && height >= videoHeight", v13, v19, a2, a3);
      v37 = AVE_GetCurrTime();
      v60 = a2;
      v61 = a3;
      v58 = v13;
      v59 = v19;
      v56 = 722;
      v57 = "width >= videoWidth && height >= videoHeight";
      v55 = AVE_Log_GetLevelStr(4);
LABEL_53:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v37, 3, v55, "AVE_ImgBuf_VerifyUncompressed", v56, v57, v58, v59, v60, v61);
      return 4294954394;
    }
    v60 = a2;
    v61 = a3;
    v58 = v13;
    v59 = v19;
    v52 = "width >= videoWidth && height >= videoHeight";
    v53 = 722;
LABEL_52:
    v56 = v53;
    v57 = v52;
    v55 = v38;
    goto LABEL_53;
  }
  return 4294954394;
}

uint64_t AVE_ImgBuf_VerifyHTPC(__CVBuffer *a1, _DWORD *a2)
{
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  uint64_t v5;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  unint64_t v7;
  uint64_t BytesPerCompressedTileHeaderOfPlane;
  uint64_t WidthInCompressedTilesOfPlane;
  uint64_t HeightInCompressedTilesOfPlane;
  int WidthOfPlane;
  int HeightOfPlane;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  __uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v51;
  uint64_t v52;
  int v53;
  const char *v54;
  int v55;
  const char *v56;
  __uint64_t v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v23 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v23)
    {
      v26 = 813;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyHTPC", 813, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
LABEL_21:
      CurrTime = AVE_GetCurrTime();
      v63 = v5;
      v61 = v26;
      v59 = AVE_Log_GetLevelStr(4);
LABEL_31:
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", CurrTime, 3, v59, "AVE_ImgBuf_VerifyHTPC", v61, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v63);
      return 4294954394;
    }
    v63 = v5;
    v35 = 813;
LABEL_30:
    v61 = v35;
    v59 = LevelStr;
    goto LABEL_31;
  }
  BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v27 = AVE_Log_CheckConsole(3u);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v29, "AVE_ImgBuf_VerifyHTPC", 817, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_25:
      v30 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v30);
      return 4294954394;
    }
LABEL_48:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v28);
    return 4294954394;
  }
  BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
  WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v13 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  v14 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  v15 = (v13 & 0xF) == 0;
  v16 = v13 >> 4;
  if (v15)
    v17 = v16;
  else
    v17 = v16 + 1;
  if ((v14 & 7) != 0)
    v18 = (v14 >> 3) + 1;
  else
    v18 = v14 >> 3;
  if (v17 != (_DWORD)WidthInCompressedTilesOfPlane || v18 != (_DWORD)HeightInCompressedTilesOfPlane)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v31 = AVE_Log_CheckConsole(3u);
    v32 = AVE_GetCurrTime();
    v33 = AVE_Log_GetLevelStr(4);
    if (v31)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v33, "AVE_ImgBuf_VerifyHTPC", 841, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v17, v18);
      v34 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v34, 3);
      return 4294954394;
    }
    goto LABEL_49;
  }
  if ((unint64_t)(WidthInCompressedTilesOfPlane
                                      * BytesPerCompressedTileHeaderOfPlane
                                      * HeightInCompressedTilesOfPlane)
     + v5 > v7)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 845, "dataBaseAddr >= (baseAddr + width * height * size)", v7, v5, WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, BytesPerCompressedTileHeaderOfPlane);
        v20 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        v66 = HeightInCompressedTilesOfPlane;
        v67 = BytesPerCompressedTileHeaderOfPlane;
        v64 = v5;
        v65 = WidthInCompressedTilesOfPlane;
        v62 = v7;
        v60 = 845;
LABEL_17:
        v58 = v22;
LABEL_57:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d", v20, 3, v58, "AVE_ImgBuf_VerifyHTPC", v60, "dataBaseAddr >= (baseAddr + width * height * size)", v62, v64, v65, v66, v67);
        return 4294954394;
      }
      v66 = HeightInCompressedTilesOfPlane;
      v67 = BytesPerCompressedTileHeaderOfPlane;
      v64 = v5;
      v65 = WidthInCompressedTilesOfPlane;
      v62 = v7;
      v52 = 845;
      goto LABEL_56;
    }
    return 4294954394;
  }
  if (a2[3])
  {
    v36 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    v5 = v36;
    if (v36 && (v36 & 0x3F) == 0)
    {
      v37 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
      v38 = v37;
      if (v37 && (v37 & 0x3F) == 0)
      {
        v39 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        v40 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        v41 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        v42 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
        v43 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        v44 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
            + v42
            + (extraColumnsOnRight >> ((int)a2[4] >> 1));
        v45 = (extraRowsOnTop >> ((int)a2[5] >> 1))
            + v43
            + (extraRowsOnBottom >> ((int)a2[5] >> 1));
        v15 = (v44 & 7) == 0;
        v46 = v44 >> 3;
        if (v15)
          v47 = v46;
        else
          v47 = v46 + 1;
        if ((v45 & 7) != 0)
          v48 = (v45 >> 3) + 1;
        else
          v48 = v45 >> 3;
        if (v47 == (_DWORD)v40)
        {
          if ((unint64_t)(v40 * v39 * v41) + v5 > v38)
          {
            if (AVE_Log_CheckLevel(3u, 4))
            {
              v49 = AVE_Log_CheckConsole(3u);
              v20 = AVE_GetCurrTime();
              v21 = AVE_Log_GetLevelStr(4);
              if (v49)
              {
                printf("%lld %d AVE %s: %s:%d %s | invalid buffer base address/size 0x%lx 0x%lx %d %d %d\n", v20, 3, v21, "AVE_ImgBuf_VerifyHTPC", 893, "dataBaseAddr >= (baseAddr + width * height * size)", v38, v5, v40, v41, v39);
                v20 = AVE_GetCurrTime();
                v22 = AVE_Log_GetLevelStr(4);
                v66 = v41;
                v67 = v39;
                v64 = v5;
                v65 = v40;
                v62 = v38;
                v60 = 893;
                goto LABEL_17;
              }
              v66 = v41;
              v67 = v39;
              v64 = v5;
              v65 = v40;
              v62 = v38;
              v52 = 893;
LABEL_56:
              v60 = v52;
              v58 = v21;
              goto LABEL_57;
            }
            return 4294954394;
          }
          return 0;
        }
        if (!AVE_Log_CheckLevel(3u, 4))
          return 4294954394;
        v55 = AVE_Log_CheckConsole(3u);
        v32 = AVE_GetCurrTime();
        v56 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d\n", v32, 3, v56, "AVE_ImgBuf_VerifyHTPC", 888, "width == neededWidth", v40, v41, v47, v48);
          v57 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v57, 3);
          return 4294954394;
        }
LABEL_49:
        syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer dimension %d %d %d %d", v32, 3);
        return 4294954394;
      }
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v53 = AVE_Log_CheckConsole(3u);
      v28 = AVE_GetCurrTime();
      v54 = AVE_Log_GetLevelStr(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v28, 3, v54, "AVE_ImgBuf_VerifyHTPC", 858, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v38);
        goto LABEL_25;
      }
      goto LABEL_48;
    }
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v51 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v51)
    {
      v26 = 854;
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyHTPC", 854, "baseAddr != 0 && (baseAddr & 0x3F) == 0", v5);
      goto LABEL_21;
    }
    v63 = v5;
    v35 = 854;
    goto LABEL_30;
  }
  return 0;
}

uint64_t AVE_ImgBuf_VerifyInterchange(__CVBuffer *a1, _DWORD *a2)
{
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  uint64_t v5;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  uint64_t v7;
  int WidthInCompressedTilesOfPlane;
  int HeightInCompressedTilesOfPlane;
  int WidthOfPlane;
  int HeightOfPlane;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v32;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  __uint64_t v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  int v43;
  const char *v44;
  int v45;
  const char *v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnLeft = 0;
  extraRowsOnTop = 0;
  extraColumnsOnRight = 0;
  extraRowsOnBottom = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  v5 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!BaseAddressOfCompressedTileHeaderRegionOfPlane || (BaseAddressOfCompressedTileHeaderRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v32 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v32)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_VerifyInterchange", 933, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v5);
LABEL_29:
      v35 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", v35);
      return 4294954394;
    }
LABEL_38:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx", CurrTime);
    return 4294954394;
  }
  BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v7 = BaseAddressOfCompressedTileDataRegionOfPlane;
  if (!BaseAddressOfCompressedTileDataRegionOfPlane || (BaseAddressOfCompressedTileDataRegionOfPlane & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v36 = AVE_Log_CheckConsole(3u);
    v37 = AVE_GetCurrTime();
    v38 = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v38, "AVE_ImgBuf_VerifyInterchange", 937, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v7);
LABEL_33:
      v39 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v39);
      return 4294954394;
    }
LABEL_39:
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx", v37);
    return 4294954394;
  }
  WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v12 = extraColumnsOnLeft + WidthOfPlane + extraColumnsOnRight;
  v13 = extraRowsOnTop + HeightOfPlane + extraRowsOnBottom;
  v14 = (v12 & 0x1F) == 0;
  v15 = v12 >> 5;
  if (v14)
    v16 = v15;
  else
    v16 = v15 + 1;
  if ((v13 & 0x1F) != 0)
    v17 = (v13 >> 5) + 1;
  else
    v17 = v13 >> 5;
  if (v16 != WidthInCompressedTilesOfPlane || v17 != HeightInCompressedTilesOfPlane)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v40 = AVE_Log_CheckConsole(3u);
      v41 = AVE_GetCurrTime();
      v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.\n", v41, 3, v42, "AVE_ImgBuf_VerifyInterchange", 957, "width == neededWidth && height == neededHeight", WidthInCompressedTilesOfPlane, HeightInCompressedTilesOfPlane, v16, v17);
        v41 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Luma buffer dimension %d %d %d %d.", v41, 3);
    }
    return 4294954394;
  }
  if (!a2[3])
    return 0;
  v18 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  v19 = v18;
  if (!v18 || (v18 & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v43 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(4);
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer header base address 0x%lx\n", CurrTime, 3, v44, "AVE_ImgBuf_VerifyInterchange", 966, "hdrBaseAddr != 0 && (hdrBaseAddr & 0x3F) == 0", v19);
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  v20 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v21 = v20;
  if (!v20 || (v20 & 0x3F) != 0)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v45 = AVE_Log_CheckConsole(3u);
    v37 = AVE_GetCurrTime();
    v46 = AVE_Log_GetLevelStr(4);
    if (v45)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid buffer data base address 0x%lx\n", v37, 3, v46, "AVE_ImgBuf_VerifyInterchange", 970, "dataBaseAddr != 0 && (dataBaseAddr & 0x3F) == 0", v21);
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  v22 = IOSurfaceGetWidthInCompressedTilesOfPlane();
  v23 = IOSurfaceGetHeightInCompressedTilesOfPlane();
  v24 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v25 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v26 = (extraColumnsOnLeft >> ((int)a2[4] >> 1))
      + v24
      + (extraColumnsOnRight >> ((int)a2[4] >> 1));
  v27 = (extraRowsOnTop >> ((int)a2[5] >> 1))
      + v25
      + (extraRowsOnBottom >> ((int)a2[5] >> 1));
  v14 = (v26 & 0xF) == 0;
  v28 = v26 >> 4;
  if (v14)
    v29 = v28;
  else
    v29 = v28 + 1;
  if ((v27 & 0xF) != 0)
    v30 = (v27 >> 4) + 1;
  else
    v30 = v27 >> 4;
  if (v29 == v22)
    return 0;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v47 = AVE_Log_CheckConsole(3u);
    v48 = AVE_GetCurrTime();
    v49 = AVE_Log_GetLevelStr(4);
    if (v47)
    {
      printf("%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d\n", v48, 3, v49, "AVE_ImgBuf_VerifyInterchange", 996, "width == neededWidth", v22, v23, v29, v30);
      v48 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | invalid Chroma buffer dimension %d %d %d %d", v48, 3);
  }
  return 4294954394;
}

uint64_t AVE_ImgBuf_Verify(__CVBuffer *a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int NumberOfTypes;
  uint64_t v17;
  const unsigned int *v18;
  uint64_t PixelFormatType;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  char *v31;
  unsigned int PlaneCount;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  const char *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const unsigned int *v54;
  int v55;

  v55 = 0;
  NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
  v17 = operator new[]();
  v18 = (const unsigned int *)v17;
  if (a1)
  {
    v53 = a7;
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    v55 = NumberOfTypes;
    AVE_PixelFmt_GetSupportedList(a2, a3, a4, a5, (uint64_t)v18, &v55);
    v20 = AVE_PixelFmt_Check(v18, v55, PixelFormatType);
    if ((_DWORD)v20)
    {
      v21 = v20;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v22 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | pixel format is not supported %d %d\n", CurrTime, 3, LevelStr, "AVE_ImgBuf_Verify", 1043, "rc == 0", PixelFormatType, v21);
          v25 = AVE_GetCurrTime();
          v49 = PixelFormatType;
          v51 = v21;
          v45 = 1043;
          v47 = "rc == 0";
          v42 = AVE_Log_GetLevelStr(4);
          v26 = "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d %d";
LABEL_20:
          syslog(3, v26, v25, 3, v42, "AVE_ImgBuf_Verify", v45, v47, v49, v51);
          goto LABEL_27;
        }
        v50 = PixelFormatType;
        v52 = v21;
        v46 = 1043;
        v48 = "rc == 0";
        v44 = LevelStr;
        v39 = "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d %d";
        goto LABEL_26;
      }
    }
    else
    {
      v31 = AVE_PixelFmt_FindByType(PixelFormatType);
      PlaneCount = CVPixelBufferGetPlaneCount(a1);
      if (PlaneCount)
        v33 = PlaneCount;
      else
        v33 = 1;
      if (*((_DWORD *)v31 + 2) == (_DWORD)v33)
      {
        v34 = *((_DWORD *)v31 + 6);
        if (v34 < 2)
        {
          v35 = AVE_ImgBuf_VerifyUncompressed(a1, a6, v53, v31, a8);
        }
        else if (v34 == 2)
        {
          v35 = AVE_ImgBuf_VerifyHTPC(a1, v31);
        }
        else
        {
          if (v34 != 3)
            goto LABEL_27;
          v35 = AVE_ImgBuf_VerifyInterchange(a1, v31);
        }
        v40 = v35;
        goto LABEL_28;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v36 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        v37 = AVE_Log_GetLevelStr(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong plane count %d %d\n", CurrTime, 3, v37, "AVE_ImgBuf_Verify", 1052, "pPixelFmt->iPlaneCnt == planeCnt", *((_DWORD *)v31 + 2), v33);
          v25 = AVE_GetCurrTime();
          v38 = AVE_Log_GetLevelStr(4);
          v49 = *((unsigned int *)v31 + 2);
          v51 = v33;
          v45 = 1052;
          v47 = "pPixelFmt->iPlaneCnt == planeCnt";
          v42 = v38;
          v26 = "%lld %d AVE %s: %s:%d %s | wrong plane count %d %d";
          goto LABEL_20;
        }
        v50 = *((unsigned int *)v31 + 2);
        v52 = v33;
        v46 = 1052;
        v48 = "pPixelFmt->iPlaneCnt == planeCnt";
        v44 = v37;
        v39 = "%lld %d AVE %s: %s:%d %s | wrong plane count %d %d";
LABEL_26:
        syslog(3, v39, CurrTime, 3, v44, "AVE_ImgBuf_Verify", v46, v48, v50, v52);
      }
    }
LABEL_27:
    v40 = 4294954394;
    goto LABEL_28;
  }
  v54 = (const unsigned int *)v17;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v27 = AVE_Log_CheckConsole(3u);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d 0x%x %d %d %d %d\n", v28, 3, v29, "AVE_ImgBuf_Verify", 1035, "pImgBuf != __null", 0, a2, a3, a4, a5, a6, a7, a8);
      v30 = AVE_GetCurrTime();
      v43 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d 0x%x %d %d %d %d", v30, 3, v43, "AVE_ImgBuf_Verify", 1035);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d 0x%x %d %d %d %d", v28, 3, v29, "AVE_ImgBuf_Verify", 1035);
    }
  }
  v40 = 4294954394;
  v18 = v54;
LABEL_28:
  MEMORY[0x1B5E4D1A8](v18, 0x1000C8052888210);
  return v40;
}

uint64_t AVE_VerifyImageBuffer(unsigned int *a1, const void **a2, CVPixelBufferPoolRef *a3)
{
  OSType PixelFormatType;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int WidthOfPlane;
  int HeightOfPlane;
  __uint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  __uint64_t v33;
  __CVPixelBufferPool *v34;
  __CVPixelBufferPool *v35;
  CVReturn v36;
  CVReturn v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  __CVBuffer *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  const char *v46;
  __uint64_t v47;
  unsigned int v48;
  int v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  unsigned int BytesPerRowOfPlane;
  unsigned int v68;
  char v69;
  char v70;
  int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __uint64_t v80;
  const char *v81;
  const char *v82;
  const char *v84;
  const char *v85;
  int v86;
  uint64_t v87;
  CVPixelBufferRef v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  __uint64_t v92;
  __uint64_t v93;
  __uint64_t v94;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;
  CVPixelBufferRef pixelBufferOut;
  CVPixelBufferPoolRef poolOut;

  pixelBufferOut = 0;
  poolOut = 0;
  if (!a3 || !*a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %p\n", CurrTime, 3, LevelStr, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %p", CurrTime, 3, LevelStr, "AVE_VerifyImageBuffer", 1100, "pImgBuf != __null && ppImgBufPool != __null", *a2, a3);
    }
    goto LABEL_66;
  }
  CVPixelBufferRetain((CVPixelBufferRef)*a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)*a2);
  v7 = (int *)AVE_PixelFmt_FindByType(PixelFormatType);
  if (!v7)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v17 = AVE_Log_CheckConsole(3u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | pixel format is not supported %d\n", v18, 3, v19, "AVE_VerifyImageBuffer", 1107, "pPixelFmt != __null", PixelFormatType);
        v18 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | pixel format is not supported %d", v18);
    }
    goto LABEL_66;
  }
  v8 = (uint64_t)v7;
  v9 = AVE_EdgeReplication_DetermineMode((CVPixelBufferRef)*a2, v7, a1[3], *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 52), a1[14], a1[7], a1 + 8, a1[12]);
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    v10 = AVE_Log_CheckConsole(0xCu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d\n", v11, 12, v12, PixelFormatType, *(_DWORD *)(v8 + 4), *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20), *(_DWORD *)(v8 + 24), *(_DWORD *)(v8 + 28));
      v13 = AVE_GetCurrTime();
      v84 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v13, 12, v84);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: PixelFormat %x | %d %d (%d %d %d) %d %d", v11, 12, v12);
    }
  }
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    v20 = AVE_Log_CheckConsole(0xCu);
    v21 = AVE_GetCurrTime();
    v22 = AVE_Log_GetLevelStr(7);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)*a2, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)*a2, 0);
    if (v20)
    {
      printf("%lld %d AVE %s: Pixel Buffer Width %d Height %d\n", v21, 12, v22, WidthOfPlane, HeightOfPlane);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(7);
      v27 = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)*a2, 0);
      v86 = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)*a2, 0);
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v25, 12, v26, v27, v86);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Pixel Buffer Width %d Height %d", v21, 12, v22, WidthOfPlane, HeightOfPlane);
    }
  }
  if ((v9 & 2) != 0)
  {
    v34 = *a3;
    if (!*a3)
    {
      v42 = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)*a2, 0);
      v43 = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)*a2, 0);
      v44 = AVE_ImgBuf_CreatePool(a1[3], a1[2], a1[4], a1[5], v42, v43, *a1, a1[1], PixelFormatType, &poolOut);
      if ((_DWORD)v44)
      {
        v29 = v44;
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_67;
        v45 = AVE_Log_CheckConsole(3u);
        v31 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(4);
        if (v45)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d\n", v31, 3, v46, "AVE_VerifyImageBuffer", 1135, "rc == noErr", v29);
          v47 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d", v47);
          goto LABEL_67;
        }
        v88 = (CVPixelBufferRef)v29;
        v87 = 1135;
        v85 = v46;
        v82 = "%lld %d AVE %s: %s:%d %s | failed to create a buffer pool %d";
        goto LABEL_75;
      }
      v34 = *a3;
    }
    if (v34)
      v35 = v34;
    else
      v35 = poolOut;
    v36 = CVPixelBufferPoolCreatePixelBuffer(0, v35, &pixelBufferOut);
    if (!v36)
    {
      AVE_ImgBuf_Copy((__CVBuffer *)*a2, pixelBufferOut);
      CVPixelBufferRelease((CVPixelBufferRef)*a2);
      v41 = pixelBufferOut;
      *a2 = pixelBufferOut;
      pixelBufferOut = 0;
      goto LABEL_40;
    }
    v37 = v36;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v38 = AVE_Log_CheckConsole(3u);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(4);
      if (v38)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d\n", v39, 3, v40, "AVE_VerifyImageBuffer", 1141, "cvrc == kCVReturnSuccess", v37);
        v39 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to crete pixel buffer from a pool %d", v39);
    }
LABEL_66:
    v29 = 4294954394;
    goto LABEL_67;
  }
  v28 = AVE_ImgBuf_Verify((__CVBuffer *)*a2, a1[3], a1[2], a1[4], a1[5], *a1, a1[1], *((unsigned __int8 *)a1 + 147));
  if ((_DWORD)v28)
  {
    v29 = v28;
    if (!AVE_Log_CheckLevel(3u, 4))
    {
LABEL_67:
      if (pixelBufferOut)
      {
        CVPixelBufferRelease(pixelBufferOut);
        pixelBufferOut = 0;
      }
      if (poolOut)
      {
        CFRelease(poolOut);
        poolOut = 0;
      }
      goto LABEL_71;
    }
    v30 = AVE_Log_CheckConsole(3u);
    v31 = AVE_GetCurrTime();
    v32 = AVE_Log_GetLevelStr(4);
    if (v30)
    {
      printf("%lld %d AVE %s: %s:%d %s | pixel buffer doesn't meet the requirement %p %d\n", v31, 3, v32, "AVE_VerifyImageBuffer", 1158, "rc == noErr", *a2, v29);
      v33 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | pixel buffer doesn't meet the requirement %p %d", v33, 3);
      goto LABEL_67;
    }
    v88 = (CVPixelBufferRef)*a2;
    v89 = v29;
    v87 = 1158;
    v85 = v32;
    v82 = "%lld %d AVE %s: %s:%d %s | pixel buffer doesn't meet the requirement %p %d";
LABEL_75:
    syslog(3, v82, v31, 3, v85, "AVE_VerifyImageBuffer", v87, "rc == noErr", v88, v89);
    goto LABEL_67;
  }
  v41 = (__CVBuffer *)*a2;
LABEL_40:
  v48 = v9 & 2;
  AVE_EdgeReplication_Fill(v41, v9, v8);
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    v49 = AVE_Log_CheckConsole(0xCu);
    v92 = AVE_GetCurrTime();
    v50 = AVE_Log_GetLevelStr(7);
    v51 = a1[1];
    v90 = *a1;
    v53 = a1[2];
    v52 = a1[3];
    v54 = a1[4];
    v55 = a1[5];
    v56 = *((unsigned __int8 *)a1 + 24);
    if (v49)
    {
      printf("%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v92, 12, v50, "AVE_VerifyImageBuffer", 1165, v90, v51, v52, v53, v54, v55, v56, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      v93 = AVE_GetCurrTime();
      v91 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v93, 12, v91, "AVE_VerifyImageBuffer", 1165, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB IN %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v92, 12, v50, "AVE_VerifyImageBuffer", 1165, v90, v51, v52, v53, v54, v55, v56);
    }
    v48 = v9 & 2;
  }
  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels((CVPixelBufferRef)*a2, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  v57 = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)*a2, 0);
  v58 = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)*a2, 0);
  v59 = extraColumnsOnLeft;
  v60 = extraColumnsOnRight;
  v61 = extraColumnsOnLeft + extraColumnsOnRight + v57;
  v62 = extraRowsOnTop;
  v63 = extraRowsOnBottom;
  v64 = extraRowsOnTop + extraRowsOnBottom + v58;
  v65 = *(_OWORD *)(v8 + 28);
  v66 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 19) = v66;
  *(_OWORD *)(a1 + 22) = v65;
  a1[26] = v61;
  a1[27] = v64;
  a1[32] = v59;
  a1[33] = v60;
  a1[34] = v62;
  a1[35] = v63;
  a1[30] = CVPixelBufferGetBytesPerRowOfPlane((CVPixelBufferRef)*a2, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane((CVPixelBufferRef)*a2, 1uLL);
  a1[31] = BytesPerRowOfPlane;
  a1[28] = a1[30];
  if (*(_DWORD *)(v8 + 12))
    v68 = BytesPerRowOfPlane;
  else
    v68 = 0;
  a1[29] = v68;
  v69 = v9 & 1;
  if ((v9 & 0x10) != 0)
    v69 = 1;
  *((_BYTE *)a1 + 146) = v69;
  *((_BYTE *)a1 + 144) = v48 >> 1;
  if ((~v9 & 0x500) != 0)
    v70 = 0;
  else
    v70 = 5;
  if ((~v9 & 0x50000) == 0)
    v70 |= 0xAu;
  *((_BYTE *)a1 + 145) = v70;
  if (poolOut)
    *a3 = poolOut;
  if (AVE_Log_CheckLevel(0xCu, 7))
  {
    v71 = AVE_Log_CheckConsole(0xCu);
    v94 = AVE_GetCurrTime();
    v72 = AVE_Log_GetLevelStr(7);
    v73 = *a1;
    v74 = a1[1];
    v76 = a1[2];
    v75 = a1[3];
    v77 = a1[4];
    v78 = a1[5];
    v79 = *((unsigned __int8 *)a1 + 24);
    if (v71)
    {
      printf("%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x\n", v94, 12, v72, "AVE_VerifyImageBuffer", 1240, v73, v74, v75, v76, v77, v78, v79, a1[7], a1[12], *((unsigned __int8 *)a1 + 52), a1[14], a1[26], a1[27],
        a1[32],
        a1[33],
        a1[34],
        a1[35],
        a1[30],
        a1[31],
        a1[28],
        a1[29],
        *((unsigned __int8 *)a1 + 146),
        *((unsigned __int8 *)a1 + 144),
        *((unsigned __int8 *)a1 + 145),
        v9);
      v80 = AVE_GetCurrTime();
      v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v80, 12, v81, "AVE_VerifyImageBuffer", 1240, *a1, a1[1], a1[3], a1[2], a1[4], a1[5], *((unsigned __int8 *)a1 + 24));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: VIB OUT %s:%d | %d %d | %d %d 0x%x %d | %d %d %d %d %d || %d %d | %d %d %d %d | %d %d | %d %d | %d %d %d | %x", v94, 12, v72, "AVE_VerifyImageBuffer", 1240, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  v29 = 0;
LABEL_71:
  if (!*((_BYTE *)a1 + 144))
    CVPixelBufferRelease((CVPixelBufferRef)*a2);
  return v29;
}

uint64_t AVE_UpdatePixelBufferDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __CFDictionary *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  __CFDictionary *v35;
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  v35 = 0;
  if (a10)
  {
    v13 = AVE_PixelBufAttr_CreateDictFromProfile(a1, a2, a3, a4, a10, a5, a6, a7, a8, a9, a11, a12, (int *)v36, &v35);
    if ((_DWORD)v13)
    {
      v14 = v13;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v15 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.\n", CurrTime, 3, LevelStr, "AVE_UpdatePixelBufferDict", 1325, "rc == noErr", "AVE_UpdatePixelBufferDict", 1325);
          CurrTime = AVE_GetCurrTime();
          v34 = 1325;
          v33 = 1325;
          v31 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          v34 = 1325;
          v33 = 1325;
          v31 = LevelStr;
        }
        v18 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDictFromProfile failed.";
LABEL_22:
        syslog(3, v18, CurrTime, 3, v31, "AVE_UpdatePixelBufferDict", v33, "rc == noErr", "AVE_UpdatePixelBufferDict", v34);
        goto LABEL_26;
      }
      goto LABEL_26;
    }
LABEL_12:
    if (a13 == 1)
    {
      if (AVE_Log_CheckLevel(0xCu, 7))
      {
        v26 = AVE_Log_CheckConsole(0xCu);
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(7);
        if (v26)
        {
          printf("%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK\n", v27, 12, v28, "AVE_UpdatePixelBufferDict", 1333);
          v29 = AVE_GetCurrTime();
          v32 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v29, 12, v32, "AVE_UpdatePixelBufferDict", 1333);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d session = FIGINTERNALSESSIONMARK", v27, 12, v28, "AVE_UpdatePixelBufferDict", 1333);
        }
      }
      v14 = 0;
    }
    else
    {
      v22 = v35;
      v14 = VTEncoderSessionSetPixelBufferAttributes();
      if (!(_DWORD)v14)
        goto LABEL_27;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v23 = AVE_Log_CheckConsole(3u);
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.\n", v24, 3, v25, "AVE_UpdatePixelBufferDict", 1342, "rc == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetPixelBufferAttributes failed.");
      }
    }
    goto LABEL_26;
  }
  v19 = AVE_PixelBufAttr_CreateDict(a1, a2, a3, a4, a5, a6, a7, a8, a11, a12, (int *)v36, &v35);
  if (!(_DWORD)v19)
    goto LABEL_12;
  v14 = v19;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v20 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.\n", CurrTime, 3, v21, "AVE_UpdatePixelBufferDict", 1315, "rc == noErr", "AVE_UpdatePixelBufferDict", 1315);
      CurrTime = AVE_GetCurrTime();
      v34 = 1315;
      v33 = 1315;
      v31 = AVE_Log_GetLevelStr(4);
    }
    else
    {
      v34 = 1315;
      v33 = 1315;
      v31 = v21;
    }
    v18 = "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_PixelBufAttr_CreateDict failed.";
    goto LABEL_22;
  }
LABEL_26:
  v22 = v35;
LABEL_27:
  if (v22)
    CFRelease(v22);
  return v14;
}

uint64_t CopySPSPPSHeader(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, int a5)
{
  uint64_t v5;
  int v7;
  __uint64_t v8;
  const char *v9;
  __uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  __uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  __uint64_t v55;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  uint64_t v63;
  _QWORD v64[3];
  int32x2_t v65[2];
  int v66;

  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v11 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", CurrTime, 3, LevelStr, "CopySPSPPSHeader", 185, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v15, 3, v16, "CopySPSPPSHeader", 186, "out != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_61;
  }
  v5 = a3;
  if ((_DWORD)a3)
  {
    v66 = 0;
    v65[0] = (int32x2_t)(bswap32(*(_DWORD *)a1) | 0x2000000000);
    v65[1] = (int32x2_t)(a1 + 4);
    v64[1] = a2;
    v64[0] = 0x2000000000;
    v64[2] = 0xFFFFFFFF00000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v7 = AVE_Log_CheckConsole(0xDDu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(7);
      if (v7)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v8, 221, v9, v5);
        v10 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v10, 221, v57, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v8, 221, v9, v5);
      }
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v63 = v5;
    v24 = 1;
    do
    {
      v25 = flushBitstream(v65);
      v26 = v23 + 1;
      writeBitstream((int *)v64, v25, 8u);
      v22 = v25 | (v22 << 8);
      if (AVE_Log_CheckLevel(0xDDu, 7))
      {
        v27 = AVE_Log_CheckConsole(0xDDu);
        v28 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(7);
        if (v27)
        {
          printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v28, 221, v29, v22, v21, v23 + 1, v25);
          v30 = AVE_GetCurrTime();
          v59 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v30, 221, v59, v22, v21, v23 + 1, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v28, 221, v29, v22, v21, v23 + 1, v25);
        }
        v5 = v63;
      }
      if (v22 == 1)
      {
        if (v21 == 1)
          a4[1] = v23 - 3;
        if (v21 == v24 + 1)
        {
          v31 = v23 - 3;
          a4[v21] = v23 - 3;
          if (v24)
          {
            v32 = a4 + 1;
            v33 = v24;
            do
            {
              v34 = *v32++;
              v31 -= v34;
              a4[v21] = v31;
              --v33;
            }
            while (v33);
          }
          v24 = v21;
        }
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          v35 = AVE_Log_CheckConsole(0xDDu);
          v36 = AVE_GetCurrTime();
          v37 = AVE_Log_GetLevelStr(7);
          if (v35)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
            v38 = AVE_GetCurrTime();
            v60 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v38, 221, v60, 1, v21 + 1, v26, v24);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v36, 221, v37, 1, v21 + 1, v23 + 1, v24);
          }
          ++v21;
          v5 = v63;
        }
        else
        {
          ++v21;
        }
      }
      ++v23;
    }
    while (v26 != (_DWORD)v5);
    if (v21 == v24 + 1)
    {
      a4[v21] = v5;
      if (v24)
      {
        v39 = a4 + 1;
        v40 = v5;
        v41 = v24;
        do
        {
          v42 = *v39++;
          v40 -= v42;
          a4[v21] = v40;
          --v41;
        }
        while (v41);
      }
      if (v24 == a5)
      {
        closeWriteBitstream((uint64_t)v64);
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          v43 = AVE_Log_CheckConsole(0xDDu);
          v44 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d\n", v44, 221, v45, *a4, a4[1], a4[2], a4[3]);
            v44 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: SPSPPSSizes[VPS] %d, SPSPPSSizes[SPS] %d, SPSPPSSizes[PPS1] %d, SPSPPSSizes[PPS2] %d", v44);
        }
        goto LABEL_62;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v49 = AVE_Log_CheckConsole(3u);
        v50 = AVE_GetCurrTime();
        v51 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d\n", v50, 3, v51, "CopySPSPPSHeader", 245, "(expectedPPSs == i32PPSsCount)", v21, a5);
          v50 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: expectedPPSs == %d, i32PPSsCount = %d", v50);
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      v46 = AVE_Log_CheckConsole(3u);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d\n", v47, 3, v48, "CopySPSPPSHeader", 237, "(startCodeCount == expectedStartCodes)", v21);
        v47 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: startCodeCount == %d", v47);
    }
LABEL_61:
    v5 = 0;
LABEL_62:
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v52 = AVE_Log_CheckConsole(0xDDu);
      v53 = AVE_GetCurrTime();
      v54 = AVE_Log_GetLevelStr(7);
      if (v52)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v53, 221, v54, v5);
        v55 = AVE_GetCurrTime();
        v61 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v55, 221, v61, v5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v53, 221, v54, v5);
      }
    }
    return v5;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    v17 = AVE_Log_CheckConsole(0xDDu);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v18, 221, v19, 0);
      v20 = AVE_GetCurrTime();
      v58 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v20, 221, v58, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v18, 221, v19, 0);
    }
  }
  return 0;
}

uint64_t flushBitstream(int32x2_t *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  unsigned int v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __int32 v9;
  __uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __int32 v22;
  __uint64_t v23;
  const char *v24;
  unsigned int *v25;
  unsigned int v26;
  const char *v28;

  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    v2 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v2)
    {
      printf("%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d\n", CurrTime, 221, LevelStr, 8, a1->i32[1]);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: flushBitstream: bits = %d bitstream->bits %d", CurrTime, 221, LevelStr, 8, a1->i32[1]);
  }
  v5 = a1->u32[1];
  if (v5 < 9)
  {
    v12 = (unsigned __int32)a1->i32[0] >> -(char)v5 << (8 - v5);
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      v13 = AVE_Log_CheckConsole(0xDDu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(8);
      if (v13)
      {
        printf("%lld %d AVE %s: flushBitstream: new_bits %x result %x\n", v14, 221, v15, 8 - v5, v12);
        v16 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v16, 221, v28, 8 - v5, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: new_bits %x result %x", v14, 221, v15, 8 - v5, v12);
      }
    }
    v25 = (unsigned int *)a1[1];
    v26 = bswap32(*v25);
    a1[1] = (int32x2_t)(v25 + 1);
    a1->i32[0] = v26;
    a1->i32[1] = 32;
    v18 = v12;
    if (v5 != 8)
    {
      v18 = (v26 >> (v5 + 24)) | v12;
      a1->i32[0] = v26 << (8 - v5);
      a1->i32[1] = v5 + 24;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      v6 = AVE_Log_CheckConsole(0xDDu);
      v7 = AVE_GetCurrTime();
      v8 = AVE_Log_GetLevelStr(8);
      v9 = a1->i32[1];
      if (v6)
      {
        printf("%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d\n", v7, 221, v8, a1->i32[0], v9);
        v10 = AVE_GetCurrTime();
        v11 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v10, 221, v11, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: bitstream->data %x bitstream->bits %d", v7, 221, v8, a1->i32[0], v9);
      }
    }
    v17.i32[0] = vshl_n_s32(*a1, 8uLL).u32[0];
    v18 = HIBYTE(a1->u32[0]);
    v17.i32[1] = vadd_s32(*a1, (int32x2_t)0x700000007).i32[1];
    *a1 = v17;
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      v19 = AVE_Log_CheckConsole(0xDDu);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(8);
      v22 = a1->i32[1];
      if (v19)
      {
        printf("%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d\n", v20, 221, v21, v18, a1->i32[0], v22);
        v23 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v23, 221, v24, v18, a1->i32[0], a1->i32[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: flushBitstream: result %x bitstream->data %x bitstream->bits %d", v20, 221, v21, v18, a1->i32[0], v22);
      }
    }
  }
  a1[2].i32[0] += 8;
  return v18;
}

void writeBitstream(int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  _DWORD *v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  const char *v25;
  const char *v26;

  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    v6 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u\n", CurrTime, 221, LevelStr, a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", v9, 221, v24, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H2HeaderParser: write requested = %u bits %u", CurrTime, 221, LevelStr, a2, a3);
    }
  }
  v10 = a1[1];
  v11 = v10 - a3;
  if (v10 <= a3)
  {
    v12 = a3 - v10;
    *a1 = (*a1 << v10) | (a2 >> (a3 - v10));
    if (AVE_Log_CheckLevel(0xDDu, 8))
    {
      v13 = AVE_Log_CheckConsole(0xDDu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(8);
      v16 = *a1;
      if (v13)
      {
        printf("%lld %d AVE %s: H2HeaderParser: write data = 0x%08x\n", v14, 221, v15, v16);
        v17 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v17, 221, v25, *a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H2HeaderParser: write data = 0x%08x", v14, 221, v15, v16);
      }
    }
    v18 = (_DWORD *)*((_QWORD *)a1 + 1);
    *v18 = bswap32(*a1);
    *((_QWORD *)a1 + 1) = v18 + 1;
    *a1 = a2 & ~(-1 << v12);
    v11 = 32 - v12;
  }
  else
  {
    *a1 = (*a1 << a3) | a2;
  }
  a1[1] = v11;
  a1[4] += a3;
  if (AVE_Log_CheckLevel(0xDDu, 8))
  {
    v19 = AVE_Log_CheckConsole(0xDDu);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    v22 = a1[4];
    if (v19)
    {
      printf("%lld %d AVE %s: bitstream->total_bits = %u\n", v20, 221, v21, v22);
      v23 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v23, 221, v26, a1[4]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: bitstream->total_bits = %u", v20, 221, v21, v22);
    }
  }
}

void closeWriteBitstream(uint64_t a1)
{
  while ((*(_BYTE *)(a1 + 16) & 0x1F) != 0)
    writeBitstream((int *)a1, 0, 1u);
}

uint64_t CopyVPSSPSPPSHeader(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, int a5, int a6)
{
  uint64_t v6;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v15;
  __uint64_t v16;
  const char *v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  const char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  __uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  int v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  __uint64_t v56;
  int v57;
  __uint64_t v58;
  const char *v59;
  __uint64_t v60;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  int v66;
  unsigned int *v69;
  unsigned int *v71;
  _QWORD v72[3];
  int32x2_t v73[2];
  int v74;

  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v12 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL\n", CurrTime, 3, LevelStr, "CopyVPSSPSPPSHeader", 270, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: in NULL");
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v15 = AVE_Log_CheckConsole(3u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL\n", v16, 3, v17, "CopyVPSSPSPPSHeader", 271, "out != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopySPSPPSHeader ERROR: out NULL");
    }
    goto LABEL_49;
  }
  v6 = a3;
  if ((_DWORD)a3)
  {
    v74 = 0;
    v73[0] = (int32x2_t)(bswap32(*(_DWORD *)a1) | 0x2000000000);
    v73[1] = (int32x2_t)(a1 + 4);
    v72[1] = a2;
    v72[0] = 0x2000000000;
    v72[2] = 0xFFFFFFFF00000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v8 = AVE_Log_CheckConsole(0xDDu);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(7);
      if (v8)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d\n", v9, 221, v10, v6);
        v11 = AVE_GetCurrTime();
        v62 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v11, 221, v62, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: buffsize %d", v9, 221, v10, v6);
      }
    }
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v69 = a4 + 1;
    v25 = 1;
    v71 = a4;
    do
    {
      v26 = flushBitstream(v73);
      v27 = v24 + 1;
      writeBitstream((int *)v72, v26, 8u);
      v23 = v26 | (v23 << 8);
      if (AVE_Log_CheckLevel(0xDDu, 7))
      {
        v28 = v23;
        v29 = v22;
        v30 = v25;
        v31 = v6;
        v32 = AVE_Log_CheckConsole(0xDDu);
        v33 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(7);
        if (v32)
        {
          printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x\n", v33, 221, v34, v28, v29, v24 + 1, v26);
          v35 = AVE_GetCurrTime();
          v36 = AVE_Log_GetLevelStr(7);
          v6 = a3;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v35, 221, v36, v28, v29, v24 + 1, v26);
          v25 = v30;
          v22 = v29;
          v23 = v28;
        }
        else
        {
          v37 = v29;
          v66 = v29;
          v23 = v28;
          syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x startcodeCount %d bytesRead %d temp %x", v33, 221, v34, v28, v66, v24 + 1, v26);
          v6 = v31;
          v25 = v30;
          v22 = v37;
        }
        a4 = v71;
      }
      if (v23 == 1)
      {
        if ((_DWORD)v22 == 2)
        {
          a4[1] = v24 - *a4 - 3;
        }
        else if ((_DWORD)v22 == 1)
        {
          *a4 = v24 - 3;
        }
        if ((_DWORD)v22 == (_DWORD)v25 + 2)
        {
          v38 = v24 - *a4 - 3;
          v39 = (v25 + 1);
          a4[v39] = v38;
          if ((_DWORD)v25)
          {
            v40 = v25;
            v41 = v69;
            do
            {
              v42 = *v41++;
              v38 -= v42;
              a4[v39] = v38;
              --v40;
            }
            while (v40);
            v25 = (v25 + 1);
          }
          else
          {
            v25 = 1;
          }
        }
        v22 = (v22 + 1);
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          v43 = AVE_Log_CheckConsole(0xDDu);
          v44 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(7);
          if (v43)
          {
            printf("%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d\n", v44, 221, v45, 1, v22, v24 + 1, v25);
            v46 = AVE_GetCurrTime();
            v64 = AVE_Log_GetLevelStr(7);
            a4 = v71;
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v46, 221, v64, 1, v22, v27, v25);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264 - CopyVPSSPSPPSHeader: startcode %x = H264VIDEOENCODER_STARTCODE startcodeCount %d bytesRead %d expectedPPSs %d", v44, 221, v45, 1, v22, v24 + 1, v25);
          }
        }
      }
      ++v24;
    }
    while (v27 != (_DWORD)v6);
    v47 = a6 + 2 * a5;
    if ((_DWORD)v22 == v47)
    {
      v48 = v6 - *a4;
      v49 = (v25 + 1);
      a4[v49] = v48;
      if ((_DWORD)v25)
      {
        v50 = v25;
        v51 = a4 + 1;
        do
        {
          v52 = *v51++;
          v48 -= v52;
          a4[v49] = v48;
          --v50;
        }
        while (v50);
      }
      closeWriteBitstream((uint64_t)v72);
      goto LABEL_50;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v53 = AVE_Log_CheckConsole(3u);
      v54 = AVE_GetCurrTime();
      v55 = AVE_Log_GetLevelStr(4);
      if (v53)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d\n", v54, 3, v55, "CopyVPSSPSPPSHeader", 327, "(startCodeCount == expectedStartCodes)", v47, v22);
        v56 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - CopyVPSSPSPPSHeader ERROR: %d startCodeCount == %d", v54);
      }
    }
LABEL_49:
    v6 = 0;
LABEL_50:
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v57 = AVE_Log_CheckConsole(0xDDu);
      v58 = AVE_GetCurrTime();
      v59 = AVE_Log_GetLevelStr(7);
      if (v57)
      {
        printf("%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d\n", v58, 221, v59, v6);
        v60 = AVE_GetCurrTime();
        v65 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v60, 221, v65, v6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264 - CopySPSPPSHeader: return bytesRead %d", v58, 221, v59, v6);
      }
    }
    return v6;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    v18 = AVE_Log_CheckConsole(0xDDu);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d\n", v19, 221, v20, 0);
      v21 = AVE_GetCurrTime();
      v63 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v21, 221, v63, 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264 ERROR - CopySPSPPSHeader: buffsize %d", v19, 221, v20, 0);
    }
  }
  return 0;
}

uint64_t AddSEIDebugMetadata(_DWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, int a6, int *a7)
{
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  _BOOL4 v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  __uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  __uint64_t v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  __uint64_t v49;
  unsigned int v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  __uint64_t v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  __uint64_t v58;
  int v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  __uint64_t v65;
  int v66;
  __uint64_t v67;
  const char *v68;
  __uint64_t v69;
  uint64_t v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  __uint64_t v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  __uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  __uint64_t v83;
  const char *v84;
  int v85;
  __uint64_t v86;
  uint64_t v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  __uint64_t v91;
  _BYTE *v92;
  int v93;
  __uint64_t v94;
  const char *v95;
  int v96;
  __uint64_t v97;
  int v98;
  __uint64_t v99;
  const char *v100;
  _BYTE *v101;
  int v102;
  __uint64_t v103;
  const char *v104;
  __uint64_t v105;
  _BYTE *v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  int64_t v110;
  __uint64_t v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  int v115;
  __uint64_t v116;
  const char *v117;
  const char *v118;
  const char *v119;
  const char *v120;
  const char *v121;
  const char *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  int *v134;

  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v14 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d\n", CurrTime, 221, LevelStr, a6);
      v17 = AVE_GetCurrTime();
      v117 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", v17, 221, v117, a6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEIDebugMetadata: ENTER WITH useEPB = %d", CurrTime, 221, LevelStr, a6);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v18 = AVE_Log_CheckConsole(0xDDu);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(7);
    if (v18)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d\n", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: frame = %d - SEI size %d", v19, 221, v20, *(_DWORD *)(a5 + 160), a4);
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v26 = AVE_Log_CheckConsole(3u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v27, 3, v28, "AddSEIDebugMetadata", 459, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v29 = AVE_Log_CheckConsole(3u);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL\n", v30, 3, v31, "AddSEIDebugMetadata", 461, "SEIData != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SEIData buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a5)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      v33 = AVE_GetCurrTime();
      v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v33, 3, v34, "AddSEIDebugMetadata", 463, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  v21 = AVE_Log_CheckLevel(0xDDu, 7);
  if (a6)
  {
    if (v21)
    {
      v22 = AVE_Log_CheckConsole(0xDDu);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(7);
      if (v22)
      {
        printf("%lld %d AVE %s: WILL DO EPB\n", v23, 221, v24);
        v25 = AVE_GetCurrTime();
        v118 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v25, 221, v118);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: WILL DO EPB", v23, 221, v24);
      }
    }
    v41 = (unsigned __int8 *)malloc_type_malloc(a4 + (a4 >> 1), 0x510880CFuLL);
    a4 = AddEPB(a3, a4, v41);
    a3 = v41;
  }
  else if (v21)
  {
    v35 = AVE_Log_CheckConsole(0xDDu);
    v36 = AVE_GetCurrTime();
    v37 = AVE_Log_GetLevelStr(7);
    if (v35)
    {
      printf("%lld %d AVE %s: WILL NOT DO EPB\n", v36, 221, v37);
      v38 = AVE_GetCurrTime();
      v119 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v38, 221, v119);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: WILL NOT DO EPB", v36, 221, v37);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v42 = AVE_Log_CheckConsole(0xDDu);
    v43 = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(7);
    if (v42)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d\n", v43, 221, v44, a4);
      v45 = AVE_GetCurrTime();
      v120 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v45, 221, v120, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize EPB %d", v43, 221, v44, a4);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v46 = AVE_Log_CheckConsole(0xDDu);
    v47 = AVE_GetCurrTime();
    v48 = AVE_Log_GetLevelStr(7);
    if (v46)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d\n", v47, 221, v48, a4 + 16);
      v49 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v49, 221, v121, a4 + 16);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize UUID %d", v47, 221, v48, a4 + 16);
    }
  }
  v50 = a4 + 20;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v51 = AVE_Log_CheckConsole(0xDDu);
    v52 = AVE_GetCurrTime();
    v53 = AVE_Log_GetLevelStr(7);
    if (v51)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d\n", v52, 221, v53, a4 + 20);
      v54 = AVE_GetCurrTime();
      v122 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v54, 221, v122, a4 + 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadSize meta %d", v52, 221, v53, a4 + 20);
    }
  }
  v134 = a7;
  *a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v55 = AVE_Log_CheckConsole(0xDDu);
    v56 = AVE_GetCurrTime();
    v57 = AVE_Log_GetLevelStr(7);
    if (v55)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)\n", v56, 221, v57, a1 + 1, 4);
      v58 = AVE_GetCurrTime();
      v123 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v58, 221, v123, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start code blockBufferData %p (%ld)", v56, 221, v57, a1 + 1, 4);
    }
  }
  v59 = *(_DWORD *)(a2 + 120);
  if (v59 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    v60 = 6;
  }
  else
  {
    if (v59)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v66 = AVE_Log_CheckConsole(3u);
        v67 = AVE_GetCurrTime();
        v68 = AVE_Log_GetLevelStr(4);
        if (v66)
        {
          printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
          v69 = AVE_GetCurrTime();
          v125 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v69, 3, v125, "AddSEIDebugMetadata", 516, "false");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v67, 3, v68, "AddSEIDebugMetadata", 516, "false");
        }
      }
      v39 = 4294966295;
      if (a3)
        goto LABEL_113;
      return v39;
    }
    *((_BYTE *)a1 + 4) = 6;
    v60 = 5;
  }
  v61 = (char *)a1 + v60;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v62 = AVE_Log_CheckConsole(0xDDu);
    v63 = AVE_GetCurrTime();
    v64 = AVE_Log_GetLevelStr(7);
    if (v62)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)\n", v63, 221, v64, (char *)a1 + v60, v60);
      v65 = AVE_GetCurrTime();
      v124 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v65, 221, v124, (char *)a1 + v60, v60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: nal_unit_type blockBufferData %p (%ld)", v63, 221, v64, (char *)a1 + v60, v60);
    }
  }
  *v61 = 5;
  v70 = (uint64_t)(v61 + 1);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v71 = AVE_Log_CheckConsole(0xDDu);
    v72 = AVE_GetCurrTime();
    v73 = AVE_Log_GetLevelStr(7);
    if (v71)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)\n", v72, 221, v73, (const void *)v70, v70 - (_QWORD)a1);
      v74 = AVE_GetCurrTime();
      v126 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v74, 221, v126, (const void *)v70, v70 - (_QWORD)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: payloadType blockBufferData %p (%ld)", v72, 221, v73, (const void *)v70, v70 - (_QWORD)a1);
    }
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v75 = AVE_Log_CheckConsole(0xDDu);
    v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    if (v75)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (_QWORD)a1);
      v78 = AVE_GetCurrTime();
      v127 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v78, 221, v127, a4 + 20, (const void *)v70, v70 - (_QWORD)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v76, 221, v77, a4 + 20, (const void *)v70, v70 - (_QWORD)a1);
    }
  }
  if (v50 < 0xFF)
  {
    v80 = 0;
  }
  else
  {
    v79 = (a4 - 235) / 0xFFuLL;
    memset((void *)v70, 255, v79 + 1);
    LOBYTE(v50) = v79 + a4 + 21;
    v70 = (uint64_t)a1 + v60 + v79 + 2;
    v80 = v79 + 1;
  }
  *(_BYTE *)v70 = v50;
  v81 = v70 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v82 = AVE_Log_CheckConsole(0xDDu);
    v83 = AVE_GetCurrTime();
    v84 = AVE_Log_GetLevelStr(7);
    v85 = v80 + 1;
    if (v82)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)\n", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (_QWORD)a1);
      v86 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v86, 221, v128, v85, (const void *)(v70 + 1), v81 - (_QWORD)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: end payloadSize bytes %d blockBufferData %p (%ld)", v83, 221, v84, v85, (const void *)(v70 + 1), v81 - (_QWORD)a1);
    }
  }
  *(_OWORD *)(v70 + 1) = xmmword_1B56254C0;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v87 = v70 + 17;
    v88 = AVE_Log_CheckConsole(0xDDu);
    v89 = AVE_GetCurrTime();
    v90 = AVE_Log_GetLevelStr(7);
    if (v88)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)\n", v89, 221, v90, (const void *)(v70 + 17), v87 - (_QWORD)a1);
      v91 = AVE_GetCurrTime();
      v129 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v91, 221, v129, (const void *)(v70 + 17), v87 - (_QWORD)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: UUID blockBufferData %p (%ld)", v89, 221, v90, (const void *)(v70 + 17), v87 - (_QWORD)a1);
    }
  }
  *(_DWORD *)(v70 + 17) = 1635018093;
  v92 = (_BYTE *)(v70 + 21);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v93 = AVE_Log_CheckConsole(0xDDu);
    v94 = AVE_GetCurrTime();
    v95 = AVE_Log_GetLevelStr(7);
    v96 = (_DWORD)v92 - (_DWORD)a1;
    if (v93)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)\n", v94, 221, v95, v92, v92 - (_BYTE *)a1);
      v97 = AVE_GetCurrTime();
      v130 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v97, 221, v130, v92, v92 - (_BYTE *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: meta blockBufferData %p (%ld)", v94, 221, v95, v92, v92 - (_BYTE *)a1);
    }
  }
  else
  {
    v96 = (_DWORD)v92 - (_DWORD)a1;
  }
  if (*v134 < a4 + v96 + 1)
  {
    if (AVE_Log_CheckLevel(0xDDu, 4))
    {
      v98 = AVE_Log_CheckConsole(0xDDu);
      v99 = AVE_GetCurrTime();
      v100 = AVE_Log_GetLevelStr(4);
      if (v98)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d\n", v99, 221, v100, "AddSEIDebugMetadata", 603, "ret == 0", *v134);
        v99 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEIDebugMetadata: SEI buffer overflow. pSEISize:%d", v99);
    }
    v39 = 4294966293;
    if (!a3)
      return v39;
LABEL_113:
    if (a6)
      free(a3);
    return v39;
  }
  memcpy(v92, a3, a4);
  v101 = &v92[a4];
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v102 = AVE_Log_CheckConsole(0xDDu);
    v103 = AVE_GetCurrTime();
    v104 = AVE_Log_GetLevelStr(7);
    if (v102)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)\n", v103, 221, v104, v101, v101 - (_BYTE *)a1);
      v105 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v105, 221, v131, v101, v101 - (_BYTE *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: data blockBufferData %p (%ld)", v103, 221, v104, v101, v101 - (_BYTE *)a1);
    }
  }
  *v101 = 0x80;
  v106 = v101 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v107 = AVE_Log_CheckConsole(0xDDu);
    v108 = AVE_GetCurrTime();
    v109 = AVE_Log_GetLevelStr(7);
    v110 = v106 - (_BYTE *)a1;
    if (v107)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)\n", v108, 221, v109, v106, v106 - (_BYTE *)a1);
      v111 = AVE_GetCurrTime();
      v132 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v111, 221, v132, v106, v110);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: rbsp_trailing_bits blockBufferData %p (%ld)", v108, 221, v109, v106, v106 - (_BYTE *)a1);
    }
  }
  else
  {
    LODWORD(v110) = (_DWORD)v106 - (_DWORD)a1;
  }
  *v134 = v110;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v112 = AVE_Log_CheckConsole(0xDDu);
    v113 = AVE_GetCurrTime();
    v114 = AVE_Log_GetLevelStr(7);
    v115 = *v134;
    if (v112)
    {
      printf("%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d\n", v113, 221, v114, v115);
      v116 = AVE_GetCurrTime();
      v133 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v116, 221, v133, *v134);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEIDebugMetadata: final SEISize %d", v113, 221, v114, v115);
    }
  }
  v39 = 0;
  if (a3)
    goto LABEL_113;
  return v39;
}

uint64_t AddEPB(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
{
  int v3;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  __uint64_t v15;
  uint64_t result;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v20;
  int v21;
  int v22;
  __uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned __int8 v26;
  const char *v27;
  int v28;
  unsigned int v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  __uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  int v37;

  if (a2 <= 2)
  {
    result = AVE_Log_CheckLevel(3u, 4);
    if (!(_DWORD)result)
      return result;
    v17 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      v20 = "length >= 3";
      v21 = 378;
LABEL_20:
      printf("%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL\n", CurrTime, 3, LevelStr, "AddEPB", v21, v20);
      v23 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", v23, 3, v35, "AddEPB", v21, v20);
      return 0;
    }
    v27 = "length >= 3";
    v28 = 378;
LABEL_34:
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddEPB: output buffer NULL. FAIL", CurrTime, 3, LevelStr, "AddEPB", v28, v27);
    return 0;
  }
  v3 = (int)a3;
  if (!a3)
  {
    result = AVE_Log_CheckLevel(3u, 4);
    if (!(_DWORD)result)
      return result;
    v22 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v22)
    {
      v20 = "outbuffer != __null";
      v21 = 379;
      goto LABEL_20;
    }
    v27 = "outbuffer != __null";
    v28 = 379;
    goto LABEL_34;
  }
  v6 = a2 - 3;
  v37 = (int)a3;
  v7 = 0;
  if (a2 == 3)
  {
    v10 = a3;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 0xFCFFFF) != 0)
      {
        ++a1;
        *v8 = v9;
        ++v7;
        v10 = v8 + 1;
      }
      else
      {
        *(_WORD *)v8 = 0;
        v10 = v8 + 3;
        v8[2] = 3;
        a1 += 2;
        v7 += 2;
        if (AVE_Log_CheckLevel(0xDDu, 7))
        {
          v11 = AVE_Log_CheckConsole(0xDDu);
          v12 = AVE_GetCurrTime();
          v13 = AVE_Log_GetLevelStr(7);
          v14 = (_DWORD)v10 - v3;
          if (v11)
          {
            printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 221, v13, v14, v7);
            v15 = AVE_GetCurrTime();
            v34 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v15, 221, v34, v14, v7);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 221, v13, v14, v7);
          }
          v3 = v37;
        }
      }
      v8 = v10;
    }
    while (v7 < v6);
  }
  if (*a1 || a1[1] || (v29 = a1[2], v29 > 3))
  {
    v24 = a2 - v7;
    if (a2 > v7)
    {
      v25 = v37;
      do
      {
        v26 = *a1++;
        *v10++ = v26;
        --v24;
      }
      while (v24);
      return ((_DWORD)v10 - v25);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v30 = AVE_Log_CheckConsole(0xDDu);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      if (v30)
      {
        printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v31, 221, v32, (_DWORD)v10 - v37, v7);
        v33 = AVE_GetCurrTime();
        v36 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v33, 221, v36, (_DWORD)v10 - v37, v7);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v31, 221, v32, (_DWORD)v10 - v37, v7);
      }
    }
    *(_WORD *)v10 = 0;
    v10[2] = 3;
    v10[3] = v29;
    LODWORD(v10) = (_DWORD)v10 + 4;
  }
  v25 = v37;
  return ((_DWORD)v10 - v25);
}

uint64_t AddRegisteredITUTT35SEI(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v13;
  __uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  __uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  __uint64_t v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  __uint64_t v50;
  int v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  __uint64_t v55;
  const char *v56;
  __uint64_t v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  _BYTE *v62;
  int v63;
  __uint64_t v64;
  const char *v65;
  __uint64_t v66;
  int v67;
  __uint64_t v68;
  const char *v69;
  __uint64_t v70;
  _BYTE *v71;
  unsigned __int8 *v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  __uint64_t v76;
  _BYTE *v77;
  int v78;
  __uint64_t v79;
  const char *v80;
  __uint64_t v81;
  _BYTE *v82;
  int v83;
  __uint64_t v84;
  const char *v85;
  int64_t v86;
  __uint64_t v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  int v91;
  __uint64_t v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  const char *v105;
  const char *v106;
  unsigned int __n;
  size_t __n_4;

  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v10 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v13 = *(_DWORD *)(a3 + 160);
    if (v10)
    {
      printf("%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d\n", CurrTime, 221, LevelStr, v13, 0, a4);
      v14 = AVE_GetCurrTime();
      v93 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", v14, 221, v93, *(_DWORD *)(a3 + 160), 0, a4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAdd Lux SEI: frame = %d - SEI size %d useEPB = %d", CurrTime, 221, LevelStr, v13, 0, a4);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL\n", v24, 3, v25, "AddRegisteredITUTT35SEI", 650, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v26 = AVE_Log_CheckConsole(3u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL\n", v27, 3, v28, "AddRegisteredITUTT35SEI", 652, "video_params_drivers != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v29 = AVE_Log_CheckConsole(3u);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL\n", v30, 3, v31, "AddRegisteredITUTT35SEI", 654, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddRegisteredITUTT35SEI: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  v15 = (unsigned __int8 *)malloc_type_malloc(9uLL, 0x16A1676CuLL);
  if (v15)
  {
    v16 = v15;
    v17 = *(_DWORD *)(a3 + 2436);
    *(_DWORD *)v15 = 1441775285;
    v15[4] = -86;
    v15[5] = HIBYTE(v17);
    v15[6] = BYTE2(v17);
    v15[7] = BYTE1(v17);
    v15[8] = v17;
    v18 = AVE_Log_CheckLevel(0xDDu, 7);
    if ((a4 & 1) != 0)
    {
      if (v18)
      {
        v19 = AVE_Log_CheckConsole(0xDDu);
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(7);
        if (v19)
        {
          printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v20, 221, v21);
          v22 = AVE_GetCurrTime();
          v94 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v22, 221, v94);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v20, 221, v21);
        }
      }
      v42 = (unsigned __int8 *)malloc_type_malloc(0xDuLL, 0x33439C02uLL);
      __n = AddEPB(v16, 9u, v42);
    }
    else
    {
      if (v18)
      {
        v36 = AVE_Log_CheckConsole(0xDDu);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(7);
        if (v36)
        {
          printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v37, 221, v38);
          v39 = AVE_GetCurrTime();
          v96 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v39, 221, v96);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v37, 221, v38);
        }
      }
      __n = 9;
      v42 = v16;
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v43 = AVE_Log_CheckConsole(0xDDu);
      v44 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(7);
      if (v43)
      {
        printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v44, 221, v45, 9);
        v46 = AVE_GetCurrTime();
        v97 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v46, 221, v97, 9);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v44, 221, v45, 9);
      }
    }
    __n_4 = (size_t)v42;
    *a1 = 0x1000000;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v47 = AVE_Log_CheckConsole(0xDDu);
      v48 = AVE_GetCurrTime();
      v49 = AVE_Log_GetLevelStr(7);
      if (v47)
      {
        printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v48, 221, v49, a1 + 1, 4);
        v50 = AVE_GetCurrTime();
        v98 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v50, 221, v98, a1 + 1, 4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v48, 221, v49, a1 + 1, 4);
      }
    }
    v51 = *(_DWORD *)(a2 + 120);
    if (v51 == 1)
    {
      *((_WORD *)a1 + 2) = 334;
      v52 = 6;
    }
    else
    {
      if (v51)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v58 = AVE_Log_CheckConsole(3u);
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(4);
          if (v58)
          {
            printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
            v61 = AVE_GetCurrTime();
            v100 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v61, 3, v100, "AddRegisteredITUTT35SEI", 750, "false");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v59, 3, v60, "AddRegisteredITUTT35SEI", 750, "false");
          }
        }
        v40 = 4294966295;
        v72 = v42;
        if (!v42)
          goto LABEL_89;
LABEL_87:
        if (a4)
          free(v72);
LABEL_89:
        free(v16);
        return v40;
      }
      *((_BYTE *)a1 + 4) = 6;
      v52 = 5;
    }
    v53 = (char *)a1 + v52;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v54 = AVE_Log_CheckConsole(0xDDu);
      v55 = AVE_GetCurrTime();
      v56 = AVE_Log_GetLevelStr(7);
      if (v54)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v55, 221, v56, (char *)a1 + v52, v52);
        v57 = AVE_GetCurrTime();
        v99 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v57, 221, v99, (char *)a1 + v52, v52);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v55, 221, v56, (char *)a1 + v52, v52);
      }
    }
    *v53 = 4;
    v62 = v53 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v63 = AVE_Log_CheckConsole(0xDDu);
      v64 = AVE_GetCurrTime();
      v65 = AVE_Log_GetLevelStr(7);
      if (v63)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v64, 221, v65, v53 + 1, v62 - (_BYTE *)a1);
        v66 = AVE_GetCurrTime();
        v101 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v66, 221, v101, v53 + 1, v62 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v64, 221, v65, v53 + 1, v62 - (_BYTE *)a1);
      }
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v67 = AVE_Log_CheckConsole(0xDDu);
      v68 = AVE_GetCurrTime();
      v69 = AVE_Log_GetLevelStr(7);
      if (v67)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v68, 221, v69, 9, v53 + 1, v62 - (_BYTE *)a1);
        v70 = AVE_GetCurrTime();
        v102 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v70, 221, v102, 9, v53 + 1, v62 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v68, 221, v69, 9, v53 + 1, v62 - (_BYTE *)a1);
      }
    }
    v53[1] = 9;
    v71 = v53 + 2;
    v72 = v42;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v73 = AVE_Log_CheckConsole(0xDDu);
      v74 = AVE_GetCurrTime();
      v75 = AVE_Log_GetLevelStr(7);
      if (v73)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v74, 221, v75, 1, v71, v71 - (_BYTE *)a1);
        v76 = AVE_GetCurrTime();
        v103 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v76, 221, v103, 1, v71, v71 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v74, 221, v75, 1, v71, v71 - (_BYTE *)a1);
      }
    }
    memcpy(v71, v42, __n);
    v77 = &v71[__n];
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v78 = AVE_Log_CheckConsole(0xDDu);
      v79 = AVE_GetCurrTime();
      v80 = AVE_Log_GetLevelStr(7);
      if (v78)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v79, 221, v80, v77, v77 - (_BYTE *)a1);
        v81 = AVE_GetCurrTime();
        v104 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v81, 221, v104, v77, v77 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v79, 221, v80, v77, v77 - (_BYTE *)a1);
      }
    }
    *v77 = 0x80;
    v82 = v77 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v83 = AVE_Log_CheckConsole(0xDDu);
      v84 = AVE_GetCurrTime();
      v85 = AVE_Log_GetLevelStr(7);
      v86 = v82 - (_BYTE *)a1;
      if (v83)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v84, 221, v85, v82, v82 - (_BYTE *)a1);
        v87 = AVE_GetCurrTime();
        v105 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v87, 221, v105, v82, v86);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v84, 221, v85, v82, v82 - (_BYTE *)a1);
      }
    }
    else
    {
      LODWORD(v86) = (_DWORD)v82 - (_DWORD)a1;
    }
    *a5 = v86;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v88 = AVE_Log_CheckConsole(0xDDu);
      v89 = AVE_GetCurrTime();
      v90 = AVE_Log_GetLevelStr(7);
      v91 = *a5;
      if (v88)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v89, 221, v90, v91);
        v92 = AVE_GetCurrTime();
        v106 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v92, 221, v106, *a5);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v89, 221, v90, v91);
      }
    }
    v40 = 0;
    if (!__n_4)
      goto LABEL_89;
    goto LABEL_87;
  }
  if (AVE_Log_CheckLevel(0xDDu, 4))
  {
    v32 = AVE_Log_CheckConsole(0xDDu);
    v33 = AVE_GetCurrTime();
    v34 = AVE_Log_GetLevelStr(4);
    if (v32)
    {
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v33, 221, v34);
      v35 = AVE_GetCurrTime();
      v95 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v35, 221, v95);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v33, 221, v34);
    }
  }
  return 0;
}

uint64_t AddUnregisteredSEI(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v15;
  __uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  size_t v31;
  char *v32;
  unsigned __int8 *v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  __uint64_t v38;
  const char *v39;
  __uint64_t v40;
  const char *v41;
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unsigned int v51;
  char v52;
  int v53;
  char v54;
  _BOOL4 v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  __uint64_t v59;
  int v60;
  __uint64_t v61;
  const char *v62;
  __uint64_t v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  __uint64_t v67;
  int v68;
  int v69;
  __uint64_t v70;
  const char *v71;
  __uint64_t v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  __uint64_t v76;
  int v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  __uint64_t v81;
  const char *v82;
  __uint64_t v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  unsigned __int8 *v87;
  __uint64_t v88;
  _BYTE *v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  __uint64_t v93;
  int v94;
  __uint64_t v95;
  const char *v96;
  __uint64_t v97;
  _BYTE *v98;
  int v99;
  __uint64_t v100;
  const char *v101;
  __uint64_t v102;
  _BYTE *v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  __uint64_t v107;
  _BYTE *v108;
  int v109;
  __uint64_t v110;
  const char *v111;
  __uint64_t v112;
  _BYTE *v113;
  int v114;
  __uint64_t v115;
  const char *v116;
  int64_t v117;
  __uint64_t v118;
  int v119;
  __uint64_t v120;
  const char *v121;
  int v122;
  __uint64_t v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  const char *v133;
  const char *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  unsigned int __n;
  unsigned __int8 *__n_4;

  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v12 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v15 = *(_DWORD *)(a4 + 160);
    if (v12)
    {
      printf("%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d\n", CurrTime, 221, LevelStr, v15, 0, a5);
      v16 = AVE_GetCurrTime();
      v124 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", v16, 221, v124, *(_DWORD *)(a4 + 160), 0, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nAddSEI: frame = %d - SEI size %d useEPB = %d", CurrTime, 221, LevelStr, v15, 0, a5);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v20, 3, v21, "AddUnregisteredSEI", 830, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v22 = AVE_Log_CheckConsole(3u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL\n", v23, 3, v24, "AddUnregisteredSEI", 832, "video_params_drivers != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: video_params_drivers NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v25 = AVE_Log_CheckConsole(3u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL\n", v26, 3, v27, "AddUnregisteredSEI", 834, "bRCEnableDriver != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: bRCEnableDriver NULL. FAIL");
    }
    return 4294966293;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v29, 3, v30, "AddUnregisteredSEI", 836, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
    return 4294966293;
  }
  v17 = (_DWORD *)(a4 + 23468);
  v18 = *(unsigned __int8 *)(a2 + 45);
  if (*(_BYTE *)(a2 + 45))
  {
    if (*(double *)(a4 + 2384) != 0.0 && (*v17 == 3 || *(_DWORD *)(a4 + 23768) == 21))
      v18 = 9;
    else
      v18 = 0;
  }
  if (*(_BYTE *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0)
    v18 += 9;
  if (*(_BYTE *)(a2 + 46) && !*(_DWORD *)(a4 + 160))
    v18 += 5;
  if (*(_BYTE *)(a2 + 47) && !*(_DWORD *)(a4 + 160))
    v18 += 5;
  if (*(_BYTE *)(a2 + 48) && !*(_DWORD *)(a4 + 160))
    v18 += 5;
  if (*(_BYTE *)(a2 + 50) && *(_BYTE *)(a2 + 55))
    v18 += 25;
  if (*(_BYTE *)(a2 + 51) && *(_BYTE *)(a2 + 56))
    v18 += 5;
  if (*(_BYTE *)(a2 + 52) && *(_BYTE *)(a2 + 85))
    v18 += 18;
  if (*(_BYTE *)(a2 + 53))
    v31 = v18 + 7;
  else
    v31 = v18;
  if (!(_DWORD)v31)
    return 0;
  v32 = (char *)malloc_type_malloc(v31, 0x487433EDuLL);
  if (!v32)
  {
    if (AVE_Log_CheckLevel(0xDDu, 4))
    {
      v37 = AVE_Log_CheckConsole(0xDDu);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(4);
      if (!(_DWORD)v37)
      {
        syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v38, 221, v39);
        return v37;
      }
      printf("%lld %d AVE %s: malloc for SEI failed.\n", v38, 221, v39);
      v40 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: malloc for SEI failed.", v40, 221, v41);
    }
    return 0;
  }
  v33 = (unsigned __int8 *)v32;
  v34 = v32;
  if (*(_BYTE *)(a2 + 45))
  {
    v34 = v32;
    if (*(double *)(a4 + 2384) != 0.0)
    {
      if (*v17 == 3 || (v34 = v32, *(_DWORD *)(a4 + 23768) == 21))
      {
        *v32 = 0;
        *(_QWORD *)(v32 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2384), 0x20uLL));
        v34 = v32 + 9;
      }
    }
  }
  if (*(_BYTE *)(a2 + 49) && *(double *)(a4 + 2368) != 0.0)
  {
    *v34 = 4;
    *(_QWORD *)(v34 + 1) = bswap64(vcvtd_n_u64_f64(*(double *)(a4 + 2368), 0x20uLL));
    v34 += 9;
  }
  if (*(_BYTE *)(a2 + 46) && !*(_DWORD *)(a4 + 160))
  {
    LODWORD(v36) = *(_DWORD *)(a3 + 4);
    if ((_DWORD)v36)
    {
      if ((_DWORD)v36 == 20)
      {
        LOBYTE(v36) = -52;
        v43 = -35;
      }
      else
      {
        LOBYTE(v36) = -52;
        v43 = -1;
      }
    }
    else
    {
      v43 = 0;
    }
    v44 = 1;
    goto LABEL_86;
  }
  if (*(_BYTE *)(a2 + 47) && !*(_DWORD *)(a4 + 160))
  {
    v35 = *(_DWORD *)(a2 + 136);
    if (v35 > 6)
      LOBYTE(v36) = 0;
    else
      v36 = 0x66553322114400uLL >> (8 * v35);
    v43 = -18;
    v44 = 3;
LABEL_86:
    *v34 = v44;
    v34[1] = v43;
    v34[2] = v36;
    v34[3] = v36;
    v34[4] = v43;
    v34 += 5;
  }
  if (*(_BYTE *)(a2 + 48) && !*(_DWORD *)(a4 + 160))
  {
    *v34 = 2;
    v34[1] = *(_BYTE *)(a3 + 3);
    v34[2] = *(_WORD *)(a3 + 2);
    v34[3] = BYTE1(*(_DWORD *)a3);
    v34[4] = *(_DWORD *)a3;
    v34 += 5;
  }
  if (*(_BYTE *)(a2 + 50) && *(_BYTE *)(a2 + 55))
  {
    *v34 = 5;
    v45 = *(_OWORD *)(a2 + 57);
    *(_QWORD *)(v34 + 17) = *(_QWORD *)(a2 + 73);
    *(_OWORD *)(v34 + 1) = v45;
    v34 += 25;
  }
  if (*(_BYTE *)(a2 + 51) && *(_BYTE *)(a2 + 56))
  {
    *v34 = 6;
    *(_DWORD *)(v34 + 1) = *(_DWORD *)(a2 + 81);
    v34 += 5;
  }
  if (*(_BYTE *)(a2 + 52) && *(_BYTE *)(a2 + 85))
  {
    *v34 = 7;
    v46 = *(_OWORD *)(a2 + 86);
    v34[17] = *(_BYTE *)(a2 + 102);
    *(_OWORD *)(v34 + 1) = v46;
    v34 += 18;
  }
  if (*(_BYTE *)(a2 + 53))
  {
    v47 = *(double *)(a4 + 2408);
    if (v47 == 0.0
      || (v48 = *(double *)(a4 + 2392), v48 == 0.0)
      || (v49 = *(double *)(a4 + 2400), v49 == 0.0)
      || (v50 = *(double *)(a4 + 2416), v50 == 0.0))
    {
      v52 = 0;
      v51 = 0;
    }
    else
    {
      v51 = (int)(v47 * v48 * v49 / (v50 * 16777216.0));
      v52 = 32;
    }
    v53 = *(_DWORD *)(a4 + 2444);
    if (v53 == -1)
      v54 = -64;
    else
      v54 = (_BYTE)v53 << 6;
    *(_DWORD *)v34 = 1380865032;
    v34[4] = *(_DWORD *)(a4 + 2440);
    if (v51 >= 0xFF)
      LOBYTE(v51) = -1;
    v34[5] = v51;
    v34[6] = v54 | v52 | *(_BYTE *)(a4 + 4036) & 0x1F;
  }
  v55 = AVE_Log_CheckLevel(0xDDu, 7);
  if ((a5 & 1) != 0)
  {
    if (v55)
    {
      v56 = AVE_Log_CheckConsole(0xDDu);
      v57 = AVE_GetCurrTime();
      v58 = AVE_Log_GetLevelStr(7);
      if (v56)
      {
        printf("%lld %d AVE %s: AddSEI: WILL DO EPB\n", v57, 221, v58);
        v59 = AVE_GetCurrTime();
        v125 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v59, 221, v125);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL DO EPB", v57, 221, v58);
      }
    }
    __n_4 = (unsigned __int8 *)malloc_type_malloc(v31 + (v31 >> 1), 0x812E27F0uLL);
    __n = AddEPB(v33, v31, __n_4);
  }
  else
  {
    if (v55)
    {
      v60 = AVE_Log_CheckConsole(0xDDu);
      v61 = AVE_GetCurrTime();
      v62 = AVE_Log_GetLevelStr(7);
      if (v60)
      {
        printf("%lld %d AVE %s: AddSEI: WILL NOT DO EPB\n", v61, 221, v62);
        v63 = AVE_GetCurrTime();
        v126 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v63, 221, v126);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: WILL NOT DO EPB", v61, 221, v62);
      }
    }
    __n = v31;
    __n_4 = v33;
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v64 = AVE_Log_CheckConsole(0xDDu);
    v65 = AVE_GetCurrTime();
    v66 = AVE_Log_GetLevelStr(7);
    if (v64)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize EPB %d\n", v65, 221, v66, v31);
      v67 = AVE_GetCurrTime();
      v127 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v67, 221, v127, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize EPB %d", v65, 221, v66, v31);
    }
  }
  v68 = v31 + 16;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v69 = AVE_Log_CheckConsole(0xDDu);
    v70 = AVE_GetCurrTime();
    v71 = AVE_Log_GetLevelStr(7);
    if (v69)
    {
      printf("%lld %d AVE %s: AddSEI: payloadSize UUID %d\n", v70, 221, v71, v68);
      v72 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v72, 221, v128, v68);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: payloadSize UUID %d", v70, 221, v71, v68);
    }
  }
  *a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v73 = AVE_Log_CheckConsole(0xDDu);
    v74 = AVE_GetCurrTime();
    v75 = AVE_Log_GetLevelStr(7);
    if (v73)
    {
      printf("%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)\n", v74, 221, v75, a1 + 1, 4);
      v76 = AVE_GetCurrTime();
      v129 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v76, 221, v129, a1 + 1, 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddSEI: start code blockBufferData %p (%ld)", v74, 221, v75, a1 + 1, 4);
    }
  }
  v77 = *(_DWORD *)(a2 + 120);
  if (v77 == 1)
  {
    *((_WORD *)a1 + 2) = 334;
    v78 = 6;
    goto LABEL_139;
  }
  if (!v77)
  {
    *((_BYTE *)a1 + 4) = 6;
    v78 = 5;
LABEL_139:
    v79 = (char *)a1 + v78;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v80 = AVE_Log_CheckConsole(0xDDu);
      v81 = AVE_GetCurrTime();
      v82 = AVE_Log_GetLevelStr(7);
      if (v80)
      {
        printf("%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)\n", v81, 221, v82, (char *)a1 + v78, v78);
        v83 = AVE_GetCurrTime();
        v130 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v83, 221, v130, (char *)a1 + v78, v78);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: nal_unit_type blockBufferData %p (%ld)", v81, 221, v82, (char *)a1 + v78, v78);
      }
    }
    *v79 = 5;
    v89 = v79 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v90 = AVE_Log_CheckConsole(0xDDu);
      v91 = AVE_GetCurrTime();
      v92 = AVE_Log_GetLevelStr(7);
      if (v90)
      {
        printf("%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)\n", v91, 221, v92, v79 + 1, v89 - (_BYTE *)a1);
        v93 = AVE_GetCurrTime();
        v132 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v93, 221, v132, v79 + 1, v89 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: payloadType blockBufferData %p (%ld)", v91, 221, v92, v79 + 1, v89 - (_BYTE *)a1);
      }
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v94 = AVE_Log_CheckConsole(0xDDu);
      v95 = AVE_GetCurrTime();
      v96 = AVE_Log_GetLevelStr(7);
      if (v94)
      {
        printf("%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v95, 221, v96, v68, v79 + 1, v89 - (_BYTE *)a1);
        v97 = AVE_GetCurrTime();
        v133 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v97, 221, v133, v68, v79 + 1, v89 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v95, 221, v96, v68, v79 + 1, v89 - (_BYTE *)a1);
      }
    }
    v79[1] = v68;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v98 = v79 + 2;
      v99 = AVE_Log_CheckConsole(0xDDu);
      v100 = AVE_GetCurrTime();
      v101 = AVE_Log_GetLevelStr(7);
      if (v99)
      {
        printf("%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v100, 221, v101, 1, v79 + 2, v98 - (_BYTE *)a1);
        v102 = AVE_GetCurrTime();
        v134 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v102, 221, v134, 1, v79 + 2, v98 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v100, 221, v101, 1, v79 + 2, v98 - (_BYTE *)a1);
      }
    }
    *(_OWORD *)(v79 + 2) = xmmword_1B56254D0;
    v103 = v79 + 18;
    v87 = __n_4;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v104 = AVE_Log_CheckConsole(0xDDu);
      v105 = AVE_GetCurrTime();
      v106 = AVE_Log_GetLevelStr(7);
      if (v104)
      {
        printf("%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)\n", v105, 221, v106, v79 + 18, v103 - (_BYTE *)a1);
        v107 = AVE_GetCurrTime();
        v135 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v107, 221, v135, v103, v103 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: UUID blockBufferData %p (%ld)", v105, 221, v106, v79 + 18, v103 - (_BYTE *)a1);
      }
    }
    memcpy(v103, __n_4, __n);
    v108 = &v103[__n];
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v109 = AVE_Log_CheckConsole(0xDDu);
      v110 = AVE_GetCurrTime();
      v111 = AVE_Log_GetLevelStr(7);
      if (v109)
      {
        printf("%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)\n", v110, 221, v111, v108, v108 - (_BYTE *)a1);
        v112 = AVE_GetCurrTime();
        v136 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v112, 221, v136, v108, v108 - (_BYTE *)a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: data blockBufferData %p (%ld)", v110, 221, v111, v108, v108 - (_BYTE *)a1);
      }
    }
    *v108 = 0x80;
    v113 = v108 + 1;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v114 = AVE_Log_CheckConsole(0xDDu);
      v115 = AVE_GetCurrTime();
      v116 = AVE_Log_GetLevelStr(7);
      v117 = v113 - (_BYTE *)a1;
      if (v114)
      {
        printf("%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v115, 221, v116, v113, v113 - (_BYTE *)a1);
        v118 = AVE_GetCurrTime();
        v137 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v118, 221, v137, v113, v117);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v115, 221, v116, v113, v113 - (_BYTE *)a1);
      }
    }
    else
    {
      LODWORD(v117) = (_DWORD)v113 - (_DWORD)a1;
    }
    *a6 = v117;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v119 = AVE_Log_CheckConsole(0xDDu);
      v120 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(7);
      v122 = *a6;
      if (v119)
      {
        printf("%lld %d AVE %s: AddSEI: final SEISize %d\n", v120, 221, v121, v122);
        v123 = AVE_GetCurrTime();
        v138 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v123, 221, v138, *a6);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddSEI: final SEISize %d", v120, 221, v121, v122);
      }
    }
    v37 = 0;
    goto LABEL_179;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v84 = AVE_Log_CheckConsole(3u);
    v85 = AVE_GetCurrTime();
    v86 = AVE_Log_GetLevelStr(4);
    v87 = __n_4;
    if (v84)
    {
      printf("%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL\n", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
      v88 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v88, 3, v131, "AddUnregisteredSEI", 1158, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddSEI - codecID not recognized. FAIL", v85, 3, v86, "AddUnregisteredSEI", 1158, "false");
    }
    v37 = 4294966295;
  }
  else
  {
    v37 = 4294966295;
    v87 = __n_4;
  }
LABEL_179:
  if (v87 && a5)
    free(v87);
  free(v33);
  return v37;
}

uint64_t AddBufferingPeriodSEI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v9;
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  uint64_t v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  __uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  _BYTE *v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  __uint64_t v50;
  int v51;
  int v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  __uint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  _BYTE *v60;
  int v61;
  __uint64_t v62;
  const char *v63;
  __uint64_t v64;
  int v65;
  char *v66;
  char v67;
  char *v68;
  int v69;
  __uint64_t v70;
  const char *v71;
  char *v72;
  __uint64_t v73;
  __uint64_t v74;
  const char *v75;
  __uint64_t v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;

  v9 = *(_DWORD *)(a2 + 568);
  v10 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v10);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v11 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v14 = *(_DWORD *)(a4 + 160);
    if (v11)
    {
      printf("%lld %d AVE %s: AddBufferingPeriodSEI: frame = %d\n", CurrTime, 221, LevelStr, v14);
      v15 = AVE_GetCurrTime();
      v78 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: frame = %d", v15, 221, v78, *(_DWORD *)(a4 + 160));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: frame = %d", CurrTime, 221, LevelStr, v14);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v21, 3, v22, "AddBufferingPeriodSEI", 1266, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    goto LABEL_26;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v24, 3, v25, "AddBufferingPeriodSEI", 1270, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
LABEL_26:
    v36 = 4294966293;
    goto LABEL_41;
  }
  *(_DWORD *)a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v16 = AVE_Log_CheckConsole(0xDDu);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(7);
    if (v16)
    {
      printf("%lld %d AVE %s: AddBufferingPeriodSEI: start code blockBufferData %p (%ld)\n", v17, 221, v18, (const void *)(a1 + 4), 4);
      v19 = AVE_GetCurrTime();
      v79 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: start code blockBufferData %p (%ld)", v19, 221, v79, (const void *)(a1 + 4), 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: start code blockBufferData %p (%ld)", v17, 221, v18, (const void *)(a1 + 4), 4);
    }
  }
  if (*(_DWORD *)(a3 + 120) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      v33 = AVE_GetCurrTime();
      v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL\n", v33, 3, v34, "AddBufferingPeriodSEI", 1298, "false");
        v35 = AVE_GetCurrTime();
        v80 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL", v35, 3, v80, "AddBufferingPeriodSEI", 1298, "false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL", v33, 3, v34, "AddBufferingPeriodSEI", 1298, "false");
      }
    }
    v36 = 4294966295;
    goto LABEL_41;
  }
  *(_WORD *)(a1 + 4) = 334;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v26 = AVE_Log_CheckConsole(0xDDu);
    v27 = AVE_GetCurrTime();
    v28 = AVE_Log_GetLevelStr(7);
    v29 = *(unsigned __int8 *)(a1 + 7);
    if (v26)
    {
      printf("%lld %d AVE %s: AddBufferingPeriodSEI: NUT blockBufferData %0x %0x\n", v27, 221, v28, *(unsigned __int8 *)(a1 + 6), v29);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: NUT blockBufferData %0x %0x", v30, 221, v31, *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddBufferingPeriodSEI: NUT blockBufferData %0x %0x", v27, 221, v28, *(unsigned __int8 *)(a1 + 6), v29);
    }
  }
  v36 = AVE_SyntaxWriter::WriteUE((AVE_SyntaxWriter *)v10, v9);
  if ((_DWORD)v36
    || (v36 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v10, 0), (_DWORD)v36)
    || (v36 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v10, 0), (_DWORD)v36)
    || (v36 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, 0, 24), (_DWORD)v36)
    || (v36 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, 0x15F90u, 24), (_DWORD)v36)
    || (v36 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, 0, 24), (_DWORD)v36)
    || *(_DWORD *)(v10 + 8) && (v36 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v10), (_DWORD)v36))
  {
LABEL_41:
    if (AVE_Log_CheckLevel(0xC2u, 4))
    {
      v42 = AVE_Log_CheckConsole(0xC2u);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d | failed to add buffering period SEI %d\n", v43, 194, v44, "AddBufferingPeriodSEI", 1368, v36);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add buffering period SEI %d");
    }
    goto LABEL_45;
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v37 = AVE_Log_CheckConsole(0xDDu);
    v38 = AVE_GetCurrTime();
    v39 = AVE_Log_GetLevelStr(7);
    v40 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
    if (v37)
    {
      printf("%lld %d AVE %s: BP SEI: New bits %d (bytes %d)\n", v38, 221, v39, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v40 >> 3);
      v41 = AVE_GetCurrTime();
      v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: BP SEI: New bits %d (bytes %d)", v41, 221, v81, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12)) >> 3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: BP SEI: New bits %d (bytes %d)", v38, 221, v39, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v40 >> 3);
    }
  }
  *(_BYTE *)(a1 + 6) = 0;
  v46 = (_BYTE *)(a1 + 7);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v47 = AVE_Log_CheckConsole(0xDDu);
    v48 = AVE_GetCurrTime();
    v49 = AVE_Log_GetLevelStr(7);
    if (v47)
    {
      printf("%lld %d AVE %s: addBufferingPeriodSEI: payloadType blockBufferData %p (%ld)\n", v48, 221, v49, (const void *)(a1 + 7), 7);
      v50 = AVE_GetCurrTime();
      v82 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: payloadType blockBufferData %p (%ld)", v50, 221, v82, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: payloadType blockBufferData %p (%ld)", v48, 221, v49, (const void *)(a1 + 7), 7);
    }
  }
  v51 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
  v52 = v51 >> 3;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v53 = AVE_Log_CheckConsole(0xDDu);
    v54 = AVE_GetCurrTime();
    v55 = AVE_Log_GetLevelStr(7);
    if (v53)
    {
      printf("%lld %d AVE %s: addBufferingPeriodSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v54, 221, v55, v51 >> 3, (const void *)(a1 + 7), 7);
      v56 = AVE_GetCurrTime();
      v83 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v56, 221, v83, v51 >> 3, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v54, 221, v55, v51 >> 3, (const void *)(a1 + 7), 7);
    }
  }
  if (v51 < 0x7F8)
  {
    v59 = 1;
  }
  else
  {
    v57 = 254 - v52;
    if (v52 == 509 || (254 - v52) < 0xFFFFFF01)
      v57 = -255;
    v58 = (v57 + v52) / 0xFFuLL;
    memset((void *)(a1 + 7), 255, v58 + 1);
    v46 = (_BYTE *)(a1 + v58 + 8);
    v59 = v58 + 2;
  }
  *v46 = (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12) - *(_DWORD *)(v10 + 16)) >> 3;
  v60 = v46 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v61 = AVE_Log_CheckConsole(0xDDu);
    v62 = AVE_GetCurrTime();
    v63 = AVE_Log_GetLevelStr(7);
    if (v61)
    {
      printf("%lld %d AVE %s: addBufferingPeriodSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v62, 221, v63, v59, v60, &v60[-a1]);
      v64 = AVE_GetCurrTime();
      v84 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v64, 221, v84, v59, v60, &v60[-a1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v62, 221, v63, v59, v60, &v60[-a1]);
    }
  }
  v65 = *(_DWORD *)(v10 + 12);
  if (v65)
  {
    v66 = *(char **)(v10 + 32);
    do
    {
      v67 = *v66++;
      *v60++ = v67;
      --v65;
    }
    while (v65);
  }
  *v60 = 0x80;
  v68 = v60 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v69 = AVE_Log_CheckConsole(0xDDu);
    v70 = AVE_GetCurrTime();
    v71 = AVE_Log_GetLevelStr(7);
    v72 = &v68[-a1];
    if (v69)
    {
      printf("%lld %d AVE %s: addBufferingPeriodSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v70, 221, v71, v68, &v68[-a1]);
      v73 = AVE_GetCurrTime();
      v85 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v73, 221, v85, v68, v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v70, 221, v71, v68, &v68[-a1]);
    }
  }
  else
  {
    LODWORD(v72) = (_DWORD)v68 - a1;
  }
  *a5 = (_DWORD)v72;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v36 = AVE_Log_CheckConsole(0xDDu);
    v74 = AVE_GetCurrTime();
    v75 = AVE_Log_GetLevelStr(7);
    if (!(_DWORD)v36)
    {
      syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: final SEISize %d");
      goto LABEL_45;
    }
    printf("%lld %d AVE %s: addBufferingPeriodSEI: final SEISize %d\n", v74, 221, v75, *a5);
    v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    syslog(3, "%lld %d AVE %s: addBufferingPeriodSEI: final SEISize %d", v76, 221, v77, *a5);
  }
  v36 = 0;
LABEL_45:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v36;
}

void sub_1B55418F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AddActiveParameterSetsSEI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v9;
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  uint64_t v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  __uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  __uint64_t v45;
  _BYTE *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  __uint64_t v51;
  int v52;
  int v53;
  int v54;
  __uint64_t v55;
  const char *v56;
  __uint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  _BYTE *v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  __uint64_t v65;
  int v66;
  char *v67;
  char v68;
  char *v69;
  int v70;
  __uint64_t v71;
  const char *v72;
  char *v73;
  __uint64_t v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  int v78;
  __uint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;

  v9 = *(_DWORD *)(a2 + 568);
  v10 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v10);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v11 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v14 = *(_DWORD *)(a4 + 160);
    if (v11)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: frame = %d\n", CurrTime, 221, LevelStr, v14);
      v15 = AVE_GetCurrTime();
      v80 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: frame = %d", v15, 221, v80, *(_DWORD *)(a4 + 160));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: frame = %d", CurrTime, 221, LevelStr, v14);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v21, 3, v22, "AddActiveParameterSetsSEI", 1398, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    goto LABEL_26;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v24, 3, v25, "AddActiveParameterSetsSEI", 1402, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
LABEL_26:
    v36 = 4294966293;
    goto LABEL_40;
  }
  *(_DWORD *)a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v16 = AVE_Log_CheckConsole(0xDDu);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(7);
    if (v16)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: start code blockBufferData %p (%ld)\n", v17, 221, v18, (const void *)(a1 + 4), 4);
      v19 = AVE_GetCurrTime();
      v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start code blockBufferData %p (%ld)", v19, 221, v81, (const void *)(a1 + 4), 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start code blockBufferData %p (%ld)", v17, 221, v18, (const void *)(a1 + 4), 4);
    }
  }
  if (*(_DWORD *)(a3 + 120) == 1)
  {
    *(_WORD *)(a1 + 4) = 334;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v26 = AVE_Log_CheckConsole(0xDDu);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(7);
      v29 = *(unsigned __int8 *)(a1 + 7);
      if (v26)
      {
        printf("%lld %d AVE %s: AddActiveParameterSetsSEI: NUT blockBufferData %0x %0x\n", v27, 221, v28, *(unsigned __int8 *)(a1 + 6), v29);
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: NUT blockBufferData %0x %0x", v30, 221, v31, *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: NUT blockBufferData %0x %0x", v27, 221, v28, *(unsigned __int8 *)(a1 + 6), v29);
      }
    }
    v36 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, 0, 4);
    if (!(_DWORD)v36)
    {
      v36 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v10, 1);
      if (!(_DWORD)v36)
      {
        v36 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v10, 1);
        if (!(_DWORD)v36)
        {
          v36 = AVE_SyntaxWriter::WriteUE((AVE_SyntaxWriter *)v10, 0);
          if (!(_DWORD)v36)
          {
            v36 = AVE_SyntaxWriter::WriteUE((AVE_SyntaxWriter *)v10, v9);
            if (!(_DWORD)v36)
            {
              if (!*(_DWORD *)(v10 + 8) || (v36 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v10), !(_DWORD)v36))
              {
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v37 = AVE_Log_CheckConsole(0xDDu);
                  v38 = AVE_GetCurrTime();
                  v39 = AVE_Log_GetLevelStr(7);
                  v40 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
                  if (v37)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)\n", v38, 221, v39, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v40 >> 3);
                    v41 = AVE_GetCurrTime();
                    v83 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)", v41, 221, v83, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12)) >> 3);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)", v38, 221, v39, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v40 >> 3);
                  }
                }
                *(_BYTE *)(a1 + 6) = -127;
                v47 = (_BYTE *)(a1 + 7);
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v48 = AVE_Log_CheckConsole(0xDDu);
                  v49 = AVE_GetCurrTime();
                  v50 = AVE_Log_GetLevelStr(7);
                  if (v48)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)\n", v49, 221, v50, (const void *)(a1 + 7), 7);
                    v51 = AVE_GetCurrTime();
                    v85 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)", v51, 221, v85, (const void *)(a1 + 7), 7);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)", v49, 221, v50, (const void *)(a1 + 7), 7);
                  }
                }
                v52 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
                v53 = v52 >> 3;
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v54 = AVE_Log_CheckConsole(0xDDu);
                  v55 = AVE_GetCurrTime();
                  v56 = AVE_Log_GetLevelStr(7);
                  if (v54)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v55, 221, v56, v52 >> 3, (const void *)(a1 + 7), 7);
                    v57 = AVE_GetCurrTime();
                    v86 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v57, 221, v86, v52 >> 3, (const void *)(a1 + 7), 7);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v55, 221, v56, v52 >> 3, (const void *)(a1 + 7), 7);
                  }
                }
                if (v52 < 0x7F8)
                {
                  v60 = 1;
                }
                else
                {
                  v58 = 254 - v53;
                  if (v53 == 509 || (254 - v53) < 0xFFFFFF01)
                    v58 = -255;
                  v59 = (v58 + v53) / 0xFFuLL;
                  memset((void *)(a1 + 7), 255, v59 + 1);
                  v47 = (_BYTE *)(a1 + v59 + 8);
                  v60 = v59 + 2;
                }
                *v47 = (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12) - *(_DWORD *)(v10 + 16)) >> 3;
                v61 = v47 + 1;
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v62 = AVE_Log_CheckConsole(0xDDu);
                  v63 = AVE_GetCurrTime();
                  v64 = AVE_Log_GetLevelStr(7);
                  if (v62)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v63, 221, v64, v60, v61, &v61[-a1]);
                    v65 = AVE_GetCurrTime();
                    v87 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v65, 221, v87, v60, v61, &v61[-a1]);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v63, 221, v64, v60, v61, &v61[-a1]);
                  }
                }
                v66 = *(_DWORD *)(v10 + 12);
                if (v66)
                {
                  v67 = *(char **)(v10 + 32);
                  do
                  {
                    v68 = *v67++;
                    *v61++ = v68;
                    --v66;
                  }
                  while (v66);
                }
                *v61 = 0x80;
                v69 = v61 + 1;
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v70 = AVE_Log_CheckConsole(0xDDu);
                  v71 = AVE_GetCurrTime();
                  v72 = AVE_Log_GetLevelStr(7);
                  v73 = &v69[-a1];
                  if (v70)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v71, 221, v72, v69, &v69[-a1]);
                    v74 = AVE_GetCurrTime();
                    v88 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v74, 221, v88, v69, v73);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v71, 221, v72, v69, &v69[-a1]);
                  }
                }
                else
                {
                  LODWORD(v73) = (_DWORD)v69 - a1;
                }
                *a5 = (int)v73;
                if (AVE_Log_CheckLevel(0xDDu, 7))
                {
                  v75 = AVE_Log_CheckConsole(0xDDu);
                  v76 = AVE_GetCurrTime();
                  v77 = AVE_Log_GetLevelStr(7);
                  v78 = *a5;
                  if (v75)
                  {
                    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d\n", v76, 221, v77, v78);
                    v79 = AVE_GetCurrTime();
                    v89 = AVE_Log_GetLevelStr(7);
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d", v79, 221, v89, *a5);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d", v76, 221, v77, v78);
                  }
                }
                v36 = 0;
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      v33 = AVE_GetCurrTime();
      v34 = AVE_Log_GetLevelStr(4);
      if (v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddActiveParameterSetsSEI - codecID not recognized. FAIL\n", v33, 3, v34, "AddActiveParameterSetsSEI", 1428, "false");
        v35 = AVE_GetCurrTime();
        v82 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddActiveParameterSetsSEI - codecID not recognized. FAIL", v35, 3, v82, "AddActiveParameterSetsSEI", 1428, "false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddActiveParameterSetsSEI - codecID not recognized. FAIL", v33, 3, v34, "AddActiveParameterSetsSEI", 1428, "false");
      }
    }
    v36 = 4294966295;
  }
LABEL_40:
  if (AVE_Log_CheckLevel(0xC2u, 4))
  {
    v42 = AVE_Log_CheckConsole(0xC2u);
    v43 = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(4);
    if (v42)
    {
      printf("%lld %d AVE %s: %s:%d | failed to add active parameter sets SEI %d\n", v43, 194, v44, "AddActiveParameterSetsSEI", 1496, v36);
      v45 = AVE_GetCurrTime();
      v84 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add active parameter sets SEI %d", v45, 194, v84, "AddActiveParameterSetsSEI", 1496, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add active parameter sets SEI %d", v43, 194, v44, "AddActiveParameterSetsSEI", 1496, v36);
    }
  }
LABEL_44:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v36;
}

void sub_1B554230C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AddContentColourVolumeSEI(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  uint64_t i;
  uint64_t v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  _BYTE *v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  int v62;
  int v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  int v67;
  unint64_t v68;
  int v69;
  _BYTE *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  int v74;
  char *v75;
  char v76;
  char *v77;
  int v78;
  __uint64_t v79;
  const char *v80;
  char *v81;
  __uint64_t v82;
  const char *v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  int v87;
  __uint64_t v88;
  const char *v89;
  float64x2_t v92;
  int32x2_t v94;
  _OWORD v95[3];
  _QWORD v96[5];

  v4 = a3;
  v5 = a1;
  v6 = 0;
  v96[3] = *MEMORY[0x1E0C80C00];
  memset(v96, 0, 24);
  v95[0] = xmmword_1B56254E0;
  v95[1] = xmmword_1B56254F0;
  v95[2] = xmmword_1B5625500;
  v92 = (float64x2_t)vdupq_n_s64(0x40E86A0000000000uLL);
  do
  {
    v94 = vmovn_s64(vcvtq_s64_f64(vmulq_f64((float64x2_t)v95[v6], v92)));
    v96[v6] = v94;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v8 = AVE_Log_CheckConsole(0xDDu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (v8)
      {
        printf("%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries\n", CurrTime, 221, LevelStr);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: ccv primaries", CurrTime, 221, LevelStr);
      v5 = a1;
      v4 = a3;
    }
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v11 = AVE_Log_CheckConsole(0xDDu);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(7);
      if (v11)
      {
        printf("%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)\n", v12, 221, v13, v6, v94.i32[0], v94.i32[1]);
        v12 = AVE_GetCurrTime();
        v13 = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: ccv_primaries %d (x, y) (%d, %d)", v12, 221, v13, v6, v94.i32[0], v94.i32[1]);
      v5 = a1;
      v4 = a3;
    }
    ++v6;
  }
  while (v6 != 3);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v14 = AVE_Log_CheckConsole(0xDDu);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: \n", v15, 221, v16);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: ", v15, 221, v16);
  }
  v17 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v17);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v18 = AVE_Log_CheckConsole(0xDDu);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(7);
    v21 = *(_DWORD *)(v4 + 160);
    if (v18)
    {
      printf("%lld %d AVE %s: AddContentColourVolumeSEI: frame = %d\n", v19, 221, v20, v21);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: frame = %d", v22, 221, v23, *(_DWORD *)(v4 + 160));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: frame = %d", v19, 221, v20, v21);
    }
  }
  if (!v5)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v27 = AVE_Log_CheckConsole(3u);
      v28 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: input buffer NULL. FAIL\n", v28, 3, v29, "AddContentColourVolumeSEI", 1546, "in != __null");
        v28 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: input buffer NULL. FAIL", v28, 3, v29, "AddContentColourVolumeSEI", 1546, "in != __null");
    }
    goto LABEL_51;
  }
  if (!v4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v30 = AVE_Log_CheckConsole(3u);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: Frame NULL. FAIL\n", v31, 3, v32, "AddContentColourVolumeSEI", 1548, "Frame != __null");
        v31 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: Frame NULL. FAIL", v31, 3, v32, "AddContentColourVolumeSEI", 1548, "Frame != __null");
    }
    goto LABEL_51;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v33 = AVE_Log_CheckConsole(3u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: video_params_drivers NULL. FAIL\n", v34, 3, v35, "AddContentColourVolumeSEI", 1550, "video_params_drivers != __null");
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - AddContentColourVolumeSEI: video_params_drivers NULL. FAIL", v34, 3, v35, "AddContentColourVolumeSEI", 1550, "video_params_drivers != __null");
    }
LABEL_51:
    v45 = 4294966293;
    goto LABEL_52;
  }
  *(_DWORD *)v5 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v24 = AVE_Log_CheckConsole(0xDDu);
    v25 = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(7);
    if (v24)
    {
      printf("%lld %d AVE %s: AddContentColourVolumeSEI: start code blockBufferData %p (%ld)\n", v25, 221, v26, (const void *)(v5 + 4), 4);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: start code blockBufferData %p (%ld)", v25, 221, v26, (const void *)(v5 + 4), 4);
  }
  if (*(_DWORD *)(a2 + 120) == 1)
  {
    *(_WORD *)(v5 + 4) = 334;
    if (AVE_Log_CheckLevel(0xDDu, 7))
    {
      v36 = AVE_Log_CheckConsole(0xDDu);
      v37 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(7);
      v39 = *(unsigned __int8 *)(v5 + 7);
      if (v36)
      {
        printf("%lld %d AVE %s: AddContentColourVolumeSEI: NUT blockBufferData %0x %0x\n", v37, 221, v38, *(unsigned __int8 *)(v5 + 6), v39);
        v40 = AVE_GetCurrTime();
        v41 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: NUT blockBufferData %0x %0x", v40, 221, v41, *(unsigned __int8 *)(v5 + 6), *(unsigned __int8 *)(v5 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: NUT blockBufferData %0x %0x", v37, 221, v38, *(unsigned __int8 *)(v5 + 6), v39);
      }
    }
    v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 0);
    if (!(_DWORD)v45)
    {
      v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 1);
      if (!(_DWORD)v45)
      {
        v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 1);
        if (!(_DWORD)v45)
        {
          v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 1);
          if (!(_DWORD)v45)
          {
            v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 1);
            if (!(_DWORD)v45)
            {
              v45 = AVE_SyntaxWriter::WriteBit((AVE_SyntaxWriter *)v17, 1);
              if (!(_DWORD)v45)
              {
                v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v17, 0, 2);
                if (!(_DWORD)v45)
                {
                  for (i = 0; i != 3; ++i)
                  {
                    v51 = AVE_SyntaxWriter::WriteI((AVE_SyntaxWriter *)v17, v96[i], 32);
                    if (!(_DWORD)v51)
                    {
                      v51 = AVE_SyntaxWriter::WriteI((AVE_SyntaxWriter *)v17, HIDWORD(v96[i]), 32);
                      if (!(_DWORD)v51)
                        continue;
                    }
                    v45 = v51;
                    goto LABEL_52;
                  }
                  v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v17, 0, 32);
                  if (!(_DWORD)v45)
                  {
                    v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v17, 0xF4240u, 32);
                    if (!(_DWORD)v45)
                    {
                      v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v17, 0x186A0u, 32);
                      if (!(_DWORD)v45)
                      {
                        if (!*(_DWORD *)(v17 + 8)
                          || (v45 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v17), !(_DWORD)v45))
                        {
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v52 = AVE_Log_CheckConsole(0xDDu);
                            v53 = AVE_GetCurrTime();
                            v54 = AVE_Log_GetLevelStr(7);
                            v55 = *(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12);
                            if (v52)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: New bits %d (bytes %d)\n", v53, 221, v54, *(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12), v55 >> 3);
                              v56 = AVE_GetCurrTime();
                              v57 = AVE_Log_GetLevelStr(7);
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: New bits %d (bytes %d)", v56, 221, v57, *(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12), (*(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12)) >> 3);
                            }
                            else
                            {
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: New bits %d (bytes %d)", v53, 221, v54, *(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12), v55 >> 3);
                            }
                          }
                          *(_BYTE *)(a1 + 6) = -107;
                          v58 = (_BYTE *)(a1 + 7);
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v59 = AVE_Log_CheckConsole(0xDDu);
                            v60 = AVE_GetCurrTime();
                            v61 = AVE_Log_GetLevelStr(7);
                            if (v59)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: payloadType blockBufferData %p (%ld)\n", v60, 221, v61, v58, 7);
                              v60 = AVE_GetCurrTime();
                              v61 = AVE_Log_GetLevelStr(7);
                            }
                            syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: payloadType blockBufferData %p (%ld)", v60, 221, v61, v58, 7);
                          }
                          v62 = *(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12);
                          v63 = v62 >> 3;
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v64 = AVE_Log_CheckConsole(0xDDu);
                            v65 = AVE_GetCurrTime();
                            v66 = AVE_Log_GetLevelStr(7);
                            if (v64)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v65, 221, v66, v62 >> 3, v58, 7);
                              v65 = AVE_GetCurrTime();
                              v66 = AVE_Log_GetLevelStr(7);
                            }
                            syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v65, 221, v66, v62 >> 3, v58, 7);
                          }
                          if (v62 < 0x7F8)
                          {
                            v69 = 1;
                          }
                          else
                          {
                            v67 = 254 - v63;
                            if (v63 == 509 || (254 - v63) < 0xFFFFFF01)
                              v67 = -255;
                            v68 = (v67 + v63) / 0xFFuLL;
                            memset(v58, 255, v68 + 1);
                            v58 = (_BYTE *)(a1 + v68 + 8);
                            v69 = v68 + 2;
                          }
                          *v58 = (*(_DWORD *)(v17 + 8) + 8 * *(_DWORD *)(v17 + 12) - *(_DWORD *)(v17 + 16)) >> 3;
                          v70 = v58 + 1;
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v71 = AVE_Log_CheckConsole(0xDDu);
                            v72 = AVE_GetCurrTime();
                            v73 = AVE_Log_GetLevelStr(7);
                            if (v71)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v72, 221, v73, v69, v70, &v70[-a1]);
                              v72 = AVE_GetCurrTime();
                              v73 = AVE_Log_GetLevelStr(7);
                            }
                            syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v72, 221, v73, v69, v70, &v70[-a1]);
                          }
                          v74 = *(_DWORD *)(v17 + 12);
                          if (v74)
                          {
                            v75 = *(char **)(v17 + 32);
                            do
                            {
                              v76 = *v75++;
                              *v70++ = v76;
                              --v74;
                            }
                            while (v74);
                          }
                          *v70 = 0x80;
                          v77 = v70 + 1;
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v78 = AVE_Log_CheckConsole(0xDDu);
                            v79 = AVE_GetCurrTime();
                            v80 = AVE_Log_GetLevelStr(7);
                            v81 = &v77[-a1];
                            if (v78)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v79, 221, v80, v77, &v77[-a1]);
                              v82 = AVE_GetCurrTime();
                              v83 = AVE_Log_GetLevelStr(7);
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v82, 221, v83, v77, v81);
                            }
                            else
                            {
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v79, 221, v80, v77, &v77[-a1]);
                            }
                          }
                          else
                          {
                            LODWORD(v81) = (_DWORD)v77 - a1;
                          }
                          *a4 = (int)v81;
                          if (AVE_Log_CheckLevel(0xDDu, 7))
                          {
                            v84 = AVE_Log_CheckConsole(0xDDu);
                            v85 = AVE_GetCurrTime();
                            v86 = AVE_Log_GetLevelStr(7);
                            v87 = *a4;
                            if (v84)
                            {
                              printf("%lld %d AVE %s: AddContentColourVolumeSEI: final SEISize %d\n", v85, 221, v86, v87);
                              v88 = AVE_GetCurrTime();
                              v89 = AVE_Log_GetLevelStr(7);
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: final SEISize %d", v88, 221, v89, *a4);
                            }
                            else
                            {
                              syslog(3, "%lld %d AVE %s: AddContentColourVolumeSEI: final SEISize %d", v85, 221, v86, v87);
                            }
                          }
                          v45 = 0;
                          goto LABEL_57;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v42 = AVE_Log_CheckConsole(3u);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddContentColourVolumeSEI - codecID not recognized. FAIL\n", v43, 3, v44, "AddContentColourVolumeSEI", 1576, "false");
        v43 = AVE_GetCurrTime();
        v44 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AddContentColourVolumeSEI - codecID not recognized. FAIL", v43, 3, v44, "AddContentColourVolumeSEI", 1576, "false");
    }
    v45 = 4294966295;
  }
LABEL_52:
  if (AVE_Log_CheckLevel(0xC2u, 4))
  {
    v46 = AVE_Log_CheckConsole(0xC2u);
    v47 = AVE_GetCurrTime();
    v48 = AVE_Log_GetLevelStr(4);
    if (v46)
    {
      printf("%lld %d AVE %s: %s:%d | failed to add content colour volume SEI %d\n", v47, 194, v48, "AddContentColourVolumeSEI", 1678, v45);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d | failed to add content colour volume SEI %d", v47, 194, v48, "AddContentColourVolumeSEI", 1678, v45);
  }
LABEL_57:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return v45;
}

void sub_1B554320C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AddAmbientViewingEnvironmentSEI(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  unsigned int v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  int v41;
  __uint64_t v42;
  const char *v43;
  __uint64_t v44;
  uint64_t v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v50;
  __uint64_t v51;
  const char *v52;
  int v53;
  __uint64_t v54;
  _BYTE *v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  __uint64_t v59;
  int v60;
  int v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  __uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  _DWORD *v69;
  _BYTE *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  __uint64_t v74;
  int v75;
  char *v76;
  char v77;
  char *v78;
  int v79;
  __uint64_t v80;
  const char *v81;
  char *v82;
  __uint64_t v83;
  __uint64_t v84;
  const char *v85;
  __uint64_t v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;

  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v8 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      printf("%lld %d AVE %s: \n", CurrTime, 221, LevelStr);
      v11 = AVE_GetCurrTime();
      v88 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ", v11, 221, v88);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ", CurrTime, 221, LevelStr);
    }
  }
  v12 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v12);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v13 = AVE_Log_CheckConsole(0xDDu);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(7);
    v16 = *(_DWORD *)(a3 + 160);
    if (v13)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: frame = %d\n", v14, 221, v15, v16);
      v17 = AVE_GetCurrTime();
      v89 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: frame = %d", v17, 221, v89, *(_DWORD *)(a3 + 160));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: frame = %d", v14, 221, v15, v16);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v25 = AVE_Log_CheckConsole(3u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: input buffer NULL. FAIL\n", v26, 3, v27, "AddAmbientViewingEnvironmentSEI", 1708, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: input buffer NULL. FAIL");
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: Frame NULL. FAIL\n", v29, 3, v30, "AddAmbientViewingEnvironmentSEI", 1710, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: Frame NULL. FAIL");
    }
    goto LABEL_35;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v31 = AVE_Log_CheckConsole(3u);
      v32 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: video_params_drivers NULL. FAIL\n", v32, 3, v33, "AddAmbientViewingEnvironmentSEI", 1712, "video_params_drivers != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - AddAmbientViewingEnvironmentSEI: video_params_drivers NULL. FAIL");
    }
LABEL_35:
    v45 = 4294966293;
    goto LABEL_36;
  }
  v18 = *(_DWORD *)(a2 + 86);
  v19 = *(unsigned __int16 *)(a2 + 90);
  v20 = *(unsigned __int16 *)(a2 + 92);
  *(_DWORD *)a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v21 = AVE_Log_CheckConsole(0xDDu);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(7);
    if (v21)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start code blockBufferData %p (%ld)\n", v22, 221, v23, (const void *)(a1 + 4), 4);
      v24 = AVE_GetCurrTime();
      v90 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start code blockBufferData %p (%ld)", v24, 221, v90, (const void *)(a1 + 4), 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start code blockBufferData %p (%ld)", v22, 221, v23, (const void *)(a1 + 4), 4);
    }
  }
  if (*(_DWORD *)(a2 + 120) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v41 = AVE_Log_CheckConsole(3u);
      v42 = AVE_GetCurrTime();
      v43 = AVE_Log_GetLevelStr(4);
      if (v41)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddAmbientViewingEnvironmentSEI - codecID not recognized. FAIL\n", v42, 3, v43, "AddAmbientViewingEnvironmentSEI", 1749, "false");
        v44 = AVE_GetCurrTime();
        v91 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddAmbientViewingEnvironmentSEI - codecID not recognized. FAIL", v44, 3, v91, "AddAmbientViewingEnvironmentSEI", 1749, "false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddAmbientViewingEnvironmentSEI - codecID not recognized. FAIL", v42, 3, v43, "AddAmbientViewingEnvironmentSEI", 1749, "false");
      }
    }
    v45 = 4294966295;
    goto LABEL_36;
  }
  v34 = bswap32(v18);
  *(_WORD *)(a1 + 4) = 334;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v35 = AVE_Log_CheckConsole(0xDDu);
    v36 = AVE_GetCurrTime();
    v37 = AVE_Log_GetLevelStr(7);
    v38 = *(unsigned __int8 *)(a1 + 7);
    if (v35)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: NUT blockBufferData %0x %0x\n", v36, 221, v37, *(unsigned __int8 *)(a1 + 6), v38);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: NUT blockBufferData %0x %0x", v39, 221, v40, *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: NUT blockBufferData %0x %0x", v36, 221, v37, *(unsigned __int8 *)(a1 + 6), v38);
    }
  }
  v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v12, v34, 32);
  if ((_DWORD)v45
    || (v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v12, __rev16(v19), 16), (_DWORD)v45)
    || (v45 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v12, __rev16(v20), 16), (_DWORD)v45)
    || *(_DWORD *)(v12 + 8) && (v45 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v12), (_DWORD)v45))
  {
LABEL_36:
    if (AVE_Log_CheckLevel(0xC2u, 4))
    {
      v46 = AVE_Log_CheckConsole(0xC2u);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d | failed to add ambient viewing environment SEI %d\n", v47, 194, v48, "AddAmbientViewingEnvironmentSEI", 1814, v45);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add ambient viewing environment SEI %d");
    }
    goto LABEL_40;
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v50 = AVE_Log_CheckConsole(0xDDu);
    v51 = AVE_GetCurrTime();
    v52 = AVE_Log_GetLevelStr(7);
    v53 = *(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12);
    if (v50)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: New bits %d (bytes %d)\n", v51, 221, v52, *(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12), v53 >> 3);
      v54 = AVE_GetCurrTime();
      v92 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: New bits %d (bytes %d)", v54, 221, v92, *(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12), (*(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12)) >> 3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: New bits %d (bytes %d)", v51, 221, v52, *(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12), v53 >> 3);
    }
  }
  *(_BYTE *)(a1 + 6) = -108;
  v55 = (_BYTE *)(a1 + 7);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v56 = AVE_Log_CheckConsole(0xDDu);
    v57 = AVE_GetCurrTime();
    v58 = AVE_Log_GetLevelStr(7);
    if (v56)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: payloadType blockBufferData %p (%ld)\n", v57, 221, v58, (const void *)(a1 + 7), 7);
      v59 = AVE_GetCurrTime();
      v93 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: payloadType blockBufferData %p (%ld)", v59, 221, v93, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: payloadType blockBufferData %p (%ld)", v57, 221, v58, (const void *)(a1 + 7), 7);
    }
  }
  v60 = *(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12);
  v61 = v60 >> 3;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v62 = AVE_Log_CheckConsole(0xDDu);
    v63 = AVE_GetCurrTime();
    v64 = AVE_Log_GetLevelStr(7);
    if (v62)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v63, 221, v64, v60 >> 3, (const void *)(a1 + 7), 7);
      v65 = AVE_GetCurrTime();
      v94 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v65, 221, v94, v60 >> 3, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v63, 221, v64, v60 >> 3, (const void *)(a1 + 7), 7);
    }
  }
  if (v60 < 0x7F8)
  {
    v68 = 1;
  }
  else
  {
    v66 = 254 - v61;
    if (v61 == 509 || (254 - v61) < 0xFFFFFF01)
      v66 = -255;
    v67 = (v66 + v61) / 0xFFuLL;
    memset((void *)(a1 + 7), 255, v67 + 1);
    v55 = (_BYTE *)(a1 + v67 + 8);
    v68 = v67 + 2;
  }
  v69 = a4;
  *v55 = (*(_DWORD *)(v12 + 8) + 8 * *(_DWORD *)(v12 + 12) - *(_DWORD *)(v12 + 16)) >> 3;
  v70 = v55 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v71 = AVE_Log_CheckConsole(0xDDu);
    v72 = AVE_GetCurrTime();
    v73 = AVE_Log_GetLevelStr(7);
    if (v71)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v72, 221, v73, v68, v70, &v70[-a1]);
      v74 = AVE_GetCurrTime();
      v95 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v74, 221, v95, v68, v70, &v70[-a1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v72, 221, v73, v68, v70, &v70[-a1]);
    }
    v69 = a4;
  }
  v75 = *(_DWORD *)(v12 + 12);
  if (v75)
  {
    v76 = *(char **)(v12 + 32);
    do
    {
      v77 = *v76++;
      *v70++ = v77;
      --v75;
    }
    while (v75);
  }
  *v70 = 0x80;
  v78 = v70 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v79 = AVE_Log_CheckConsole(0xDDu);
    v80 = AVE_GetCurrTime();
    v81 = AVE_Log_GetLevelStr(7);
    v82 = &v78[-a1];
    if (v79)
    {
      printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v80, 221, v81, v78, &v78[-a1]);
      v83 = AVE_GetCurrTime();
      v96 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v83, 221, v96, v78, v82);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v80, 221, v81, v78, &v78[-a1]);
    }
  }
  else
  {
    LODWORD(v82) = (_DWORD)v78 - a1;
  }
  *v69 = (_DWORD)v82;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v45 = AVE_Log_CheckConsole(0xDDu);
    v84 = AVE_GetCurrTime();
    v85 = AVE_Log_GetLevelStr(7);
    if (!(_DWORD)v45)
    {
      syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: final SEISize %d");
      goto LABEL_40;
    }
    printf("%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: final SEISize %d\n", v84, 221, v85, *v69);
    v86 = AVE_GetCurrTime();
    v87 = AVE_Log_GetLevelStr(7);
    syslog(3, "%lld %d AVE %s: AddAmbientViewingEnvironmentSEI: final SEISize %d", v86, 221, v87, *v69);
  }
  v45 = 0;
LABEL_40:
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v45;
}

void sub_1B5543D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AddPictureTimingSEI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  __uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  __uint64_t v41;
  uint64_t v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v47;
  __uint64_t v48;
  const char *v49;
  int v50;
  __uint64_t v51;
  _BYTE *v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  __uint64_t v56;
  int v57;
  int v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  __uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  _BYTE *v66;
  int v67;
  __uint64_t v68;
  const char *v69;
  __uint64_t v70;
  int v71;
  char *v72;
  char v73;
  char *v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  char *v78;
  __uint64_t v79;
  __uint64_t v80;
  const char *v81;
  __uint64_t v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;

  v10 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v10);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v11 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v14 = *(_DWORD *)(a4 + 160);
    if (v11)
    {
      printf("%lld %d AVE %s: AddPictureTimingSEI: frame = %d\n", CurrTime, 221, LevelStr, v14);
      v15 = AVE_GetCurrTime();
      v84 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: frame = %d", v15, 221, v84, *(_DWORD *)(a4 + 160));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: frame = %d", CurrTime, 221, LevelStr, v14);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v24, 3, v25, "AddPictureTimingSEI", 1845, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    goto LABEL_41;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v26 = AVE_Log_CheckConsole(3u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SPSHevcParams NULL. FAIL\n", v27, 3, v28, "AddPictureTimingSEI", 1847, "SPSHevcParams != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SPSHevcParams NULL. FAIL");
    }
    goto LABEL_41;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v29 = AVE_Log_CheckConsole(3u);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v30, 3, v31, "AddPictureTimingSEI", 1849, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
LABEL_41:
    v42 = 4294966293;
    goto LABEL_42;
  }
  v16 = (_DWORD *)(a4 + 23468);
  if (AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::Coded == AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::LastBufferingPeriodFrame)
    v17 = 0;
  else
    v17 = AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::Coded
        + ~AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::LastBufferingPeriodFrame;
  if (*(_BYTE *)(a3 + 206) || *(_BYTE *)(a3 + 207))
    v18 = v16[76]
        - AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::Coded
        + 2;
  else
    v18 = 0;
  if (*v16 == 3 || v16[75] == 21)
    AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::LastBufferingPeriodFrame = AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::Coded;
  ++AddPictureTimingSEI(unsigned char *,HEVC_SEQUENCE_HEADER_PARAMS *,AVE_VIDEO_PARAMS_DRIVER *,_S_AVE_FrameInfo *,int *)::Coded;
  *(_DWORD *)a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v19 = AVE_Log_CheckConsole(0xDDu);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: AddPictureTimingSEI: start code blockBufferData %p (%ld)\n", v20, 221, v21, (const void *)(a1 + 4), 4);
      v22 = AVE_GetCurrTime();
      v85 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: start code blockBufferData %p (%ld)", v22, 221, v85, (const void *)(a1 + 4), 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: start code blockBufferData %p (%ld)", v20, 221, v21, (const void *)(a1 + 4), 4);
    }
  }
  if (*(_DWORD *)(a3 + 120) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v38 = AVE_Log_CheckConsole(3u);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(4);
      if (v38)
      {
        printf("%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL\n", v39, 3, v40, "AddPictureTimingSEI", 1894, "false");
        v41 = AVE_GetCurrTime();
        v86 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL", v41, 3, v86, "AddPictureTimingSEI", 1894, "false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AddBufferingPeriodSEI - codecID not recognized. FAIL", v39, 3, v40, "AddPictureTimingSEI", 1894, "false");
      }
    }
    v42 = 4294966295;
    goto LABEL_42;
  }
  *(_WORD *)(a1 + 4) = 334;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v32 = AVE_Log_CheckConsole(0xDDu);
    v33 = AVE_GetCurrTime();
    v34 = AVE_Log_GetLevelStr(7);
    v35 = *(unsigned __int8 *)(a1 + 7);
    if (v32)
    {
      printf("%lld %d AVE %s: AddPictureTimingSEI: NUT blockBufferData %0x %0x\n", v33, 221, v34, *(unsigned __int8 *)(a1 + 6), v35);
      v36 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: NUT blockBufferData %0x %0x", v36, 221, v37, *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddPictureTimingSEI: NUT blockBufferData %0x %0x", v33, 221, v34, *(unsigned __int8 *)(a1 + 6), v35);
    }
  }
  v42 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, v17, 24);
  if ((_DWORD)v42
    || (v42 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, v18, 24), (_DWORD)v42)
    || *(_DWORD *)(v10 + 8) && (v42 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v10), (_DWORD)v42))
  {
LABEL_42:
    if (AVE_Log_CheckLevel(0xC2u, 4))
    {
      v43 = AVE_Log_CheckConsole(0xC2u);
      v44 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(4);
      if (v43)
      {
        printf("%lld %d AVE %s: %s:%d | failed to add picture timing SEI %d\n", v44, 194, v45, "AddPictureTimingSEI", 1956, v42);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add picture timing SEI %d");
    }
    goto LABEL_46;
  }
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v47 = AVE_Log_CheckConsole(0xDDu);
    v48 = AVE_GetCurrTime();
    v49 = AVE_Log_GetLevelStr(7);
    v50 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
    if (v47)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)\n", v48, 221, v49, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v50 >> 3);
      v51 = AVE_GetCurrTime();
      v87 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)", v51, 221, v87, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12)) >> 3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: New bits %d (bytes %d)", v48, 221, v49, *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v50 >> 3);
    }
  }
  *(_BYTE *)(a1 + 6) = 1;
  v52 = (_BYTE *)(a1 + 7);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v53 = AVE_Log_CheckConsole(0xDDu);
    v54 = AVE_GetCurrTime();
    v55 = AVE_Log_GetLevelStr(7);
    if (v53)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)\n", v54, 221, v55, (const void *)(a1 + 7), 7);
      v56 = AVE_GetCurrTime();
      v88 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)", v56, 221, v88, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: payloadType blockBufferData %p (%ld)", v54, 221, v55, (const void *)(a1 + 7), 7);
    }
  }
  v57 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
  v58 = v57 >> 3;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v59 = AVE_Log_CheckConsole(0xDDu);
    v60 = AVE_GetCurrTime();
    v61 = AVE_Log_GetLevelStr(7);
    if (v59)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)\n", v60, 221, v61, v57 >> 3, (const void *)(a1 + 7), 7);
      v62 = AVE_GetCurrTime();
      v89 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v62, 221, v89, v57 >> 3, (const void *)(a1 + 7), 7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: start payloadSize sizeTemp %d blockBufferData %p (%ld)", v60, 221, v61, v57 >> 3, (const void *)(a1 + 7), 7);
    }
  }
  if (v57 < 0x7F8)
  {
    v65 = 1;
  }
  else
  {
    v63 = 254 - v58;
    if (v58 == 509 || (254 - v58) < 0xFFFFFF01)
      v63 = -255;
    v64 = (v63 + v58) / 0xFFuLL;
    memset((void *)(a1 + 7), 255, v64 + 1);
    v52 = (_BYTE *)(a1 + v64 + 8);
    v65 = v64 + 2;
  }
  *v52 = (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12) - *(_DWORD *)(v10 + 16)) >> 3;
  v66 = v52 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v67 = AVE_Log_CheckConsole(0xDDu);
    v68 = AVE_GetCurrTime();
    v69 = AVE_Log_GetLevelStr(7);
    if (v67)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)\n", v68, 221, v69, v65, v66, &v66[-a1]);
      v70 = AVE_GetCurrTime();
      v90 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v70, 221, v90, v65, v66, &v66[-a1]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: end payloadSize bytes %d blockBufferData %p (%ld)", v68, 221, v69, v65, v66, &v66[-a1]);
    }
  }
  v71 = *(_DWORD *)(v10 + 12);
  if (v71)
  {
    v72 = *(char **)(v10 + 32);
    do
    {
      v73 = *v72++;
      *v66++ = v73;
      --v71;
    }
    while (v71);
  }
  *v66 = 0x80;
  v74 = v66 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v75 = AVE_Log_CheckConsole(0xDDu);
    v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    v78 = &v74[-a1];
    if (v75)
    {
      printf("%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)\n", v76, 221, v77, v74, &v74[-a1]);
      v79 = AVE_GetCurrTime();
      v91 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v79, 221, v91, v74, v78);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: rbsp_trailing_bits blockBufferData %p (%ld)", v76, 221, v77, v74, &v74[-a1]);
    }
  }
  else
  {
    LODWORD(v78) = (_DWORD)v74 - a1;
  }
  *a5 = (_DWORD)v78;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v42 = AVE_Log_CheckConsole(0xDDu);
    v80 = AVE_GetCurrTime();
    v81 = AVE_Log_GetLevelStr(7);
    if (!(_DWORD)v42)
    {
      syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d");
      goto LABEL_46;
    }
    printf("%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d\n", v80, 221, v81, *a5);
    v82 = AVE_GetCurrTime();
    v83 = AVE_Log_GetLevelStr(7);
    syslog(3, "%lld %d AVE %s: AddActiveParameterSetsSEI: final SEISize %d", v82, 221, v83, *a5);
  }
  v42 = 0;
LABEL_46:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v42;
}

void sub_1B5544870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AddAccessUnitDelimiter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  _BYTE *v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v52;
  char *v53;
  char v54;
  char *v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  char *v59;
  __uint64_t v60;
  __uint64_t v61;
  const char *v62;
  __uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;

  v10 = operator new();
  AVE_SyntaxWriter::AVE_SyntaxWriter((AVE_SyntaxWriter *)v10);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v11 = AVE_Log_CheckConsole(0xDDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v11)
    {
      printf("%lld %d AVE %s: %s: frame = %d\n", CurrTime, 221, LevelStr, "AddAccessUnitDelimiter", *(_DWORD *)(a4 + 160));
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s: frame = %d", CurrTime, 221, LevelStr, "AddAccessUnitDelimiter", *(_DWORD *)(a4 + 160));
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL\n", v19, 3, v20, "AddAccessUnitDelimiter", 1980, "in != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: input buffer NULL. FAIL");
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v21 = AVE_Log_CheckConsole(3u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SPSHevcParams NULL. FAIL\n", v22, 3, v23, "AddAccessUnitDelimiter", 1982, "SPSHevcParams != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: SPSHevcParams NULL. FAIL");
    }
    goto LABEL_33;
  }
  if (!a4)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v24 = AVE_Log_CheckConsole(3u);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL\n", v25, 3, v26, "AddAccessUnitDelimiter", 1984, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264 - ModifySlicePictureManagement: Frame NULL. FAIL");
    }
LABEL_33:
    v36 = 4294966293;
    goto LABEL_50;
  }
  *(_DWORD *)a1 = 0x1000000;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v14 = AVE_Log_CheckConsole(0xDDu);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s: start code blockBufferData %p (%ld)\n", v15, 221, v16, "AddAccessUnitDelimiter", (const void *)(a1 + 4), 4);
      v17 = AVE_GetCurrTime();
      v65 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s: start code blockBufferData %p (%ld)", v17, 221, v65, "AddAccessUnitDelimiter", (const void *)(a1 + 4), 4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s: start code blockBufferData %p (%ld)", v15, 221, v16, "AddAccessUnitDelimiter", (const void *)(a1 + 4), 4);
    }
  }
  if (*(_DWORD *)(a3 + 120) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v33 = AVE_Log_CheckConsole(3u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | %s - codecID not recognized. FAIL\n", v34, 3, v35, "AddAccessUnitDelimiter", 2012, "false", "AddAccessUnitDelimiter");
        v34 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | %s - codecID not recognized. FAIL", v34);
    }
    goto LABEL_49;
  }
  *(_WORD *)(a1 + 4) = 326;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v27 = AVE_Log_CheckConsole(0xDDu);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(7);
    v30 = *(unsigned __int8 *)(a1 + 7);
    if (v27)
    {
      printf("%lld %d AVE %s: %s: NUT blockBufferData %0x %0x\n", v28, 221, v29, "AddAccessUnitDelimiter", *(unsigned __int8 *)(a1 + 6), v30);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s: NUT blockBufferData %0x %0x", v31, 221, v32, "AddAccessUnitDelimiter", *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s: NUT blockBufferData %0x %0x", v28, 221, v29, "AddAccessUnitDelimiter", *(unsigned __int8 *)(a1 + 6), v30);
    }
  }
  v37 = (int *)(a4 + 23468);
  v38 = *v37;
  if (v38 >= 8 || ((0x8Fu >> v38) & 1) == 0)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v39 = AVE_Log_CheckConsole(3u);
      v40 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | %s ERROR: FrameType NOT RECOGNIZED = %d. FAIL.\n", v40, 3, v41, "AddAccessUnitDelimiter", 2043, "false", "AddAccessUnitDelimiter", *v37);
        v40 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | %s ERROR: FrameType NOT RECOGNIZED = %d. FAIL.", v40, 3);
    }
LABEL_49:
    v36 = 4294966295;
    goto LABEL_50;
  }
  v36 = AVE_SyntaxWriter::WriteU((AVE_SyntaxWriter *)v10, dword_1B5625510[v38], 3);
  if ((_DWORD)v36
    || *(_DWORD *)(v10 + 8) && (v36 = AVE_SyntaxWriter::AlignToByte((AVE_SyntaxWriter *)v10), (_DWORD)v36))
  {
LABEL_50:
    if (AVE_Log_CheckLevel(0xC2u, 4))
    {
      v48 = AVE_Log_CheckConsole(0xC2u);
      v49 = AVE_GetCurrTime();
      v50 = AVE_Log_GetLevelStr(4);
      if (v48)
      {
        printf("%lld %d AVE %s: %s:%d | failed to add access unit delimiter %d\n", v49, 194, v50, "AddAccessUnitDelimiter", 2085, v36);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d | failed to add access unit delimiter %d");
    }
    goto LABEL_54;
  }
  v42 = (_BYTE *)(a1 + 6);
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v43 = AVE_Log_CheckConsole(0xDDu);
    v44 = AVE_GetCurrTime();
    v45 = AVE_Log_GetLevelStr(7);
    v46 = *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12);
    if (v43)
    {
      printf("%lld %d AVE %s: %s: New bits %d (bytes %d)\n", v44, 221, v45, "AddAccessUnitDelimiter", *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v46 >> 3);
      v47 = AVE_GetCurrTime();
      v66 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s: New bits %d (bytes %d)", v47, 221, v66, "AddAccessUnitDelimiter", *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), (*(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12)) >> 3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s: New bits %d (bytes %d)", v44, 221, v45, "AddAccessUnitDelimiter", *(_DWORD *)(v10 + 8) + 8 * *(_DWORD *)(v10 + 12), v46 >> 3);
    }
  }
  v52 = *(_DWORD *)(v10 + 12);
  if (v52)
  {
    v53 = *(char **)(v10 + 32);
    do
    {
      v54 = *v53++;
      *v42++ = v54;
      --v52;
    }
    while (v52);
  }
  *v42 = 0x80;
  v55 = v42 + 1;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v56 = AVE_Log_CheckConsole(0xDDu);
    v57 = AVE_GetCurrTime();
    v58 = AVE_Log_GetLevelStr(7);
    v59 = &v55[-a1];
    if (v56)
    {
      printf("%lld %d AVE %s: %s: rbsp_trailing_bits blockBufferData %p (%ld)\n", v57, 221, v58, "AddAccessUnitDelimiter", v55, &v55[-a1]);
      v60 = AVE_GetCurrTime();
      v67 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s: rbsp_trailing_bits blockBufferData %p (%ld)", v60, 221, v67, "AddAccessUnitDelimiter", v55, v59);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s: rbsp_trailing_bits blockBufferData %p (%ld)", v57, 221, v58, "AddAccessUnitDelimiter", v55, &v55[-a1]);
    }
  }
  else
  {
    LODWORD(v59) = (_DWORD)v55 - a1;
  }
  *a5 = (_DWORD)v59;
  if (AVE_Log_CheckLevel(0xDDu, 7))
  {
    v36 = AVE_Log_CheckConsole(0xDDu);
    v61 = AVE_GetCurrTime();
    v62 = AVE_Log_GetLevelStr(7);
    if (!(_DWORD)v36)
    {
      syslog(3, "%lld %d AVE %s: %s: final SEISize %d");
      goto LABEL_54;
    }
    printf("%lld %d AVE %s: %s: final SEISize %d\n", v61, 221, v62, "AddAccessUnitDelimiter", *a5);
    v63 = AVE_GetCurrTime();
    v64 = AVE_Log_GetLevelStr(7);
    syslog(3, "%lld %d AVE %s: %s: final SEISize %d", v63, 221, v64, "AddAccessUnitDelimiter", *a5);
  }
  v36 = 0;
LABEL_54:
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v36;
}

void sub_1B5545240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1091C406BACDF82);
  _Unwind_Resume(a1);
}

uint64_t AVE_DEBUG_SetCallback(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      v5 = AVE_Log_CheckConsole(0x14u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback\n", CurrTime, 20, LevelStr);
        v8 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", v8, 20, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_DEBUG_SetCallback", CurrTime, 20, LevelStr);
      }
    }
    if (a2)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v13 = AVE_Log_CheckConsole(0x2Eu);
        v14 = AVE_GetCurrTime();
        v15 = AVE_Log_GetLevelStr(7);
        if (v13)
        {
          printf("%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu \n", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
          v16 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v16, 46, v26, (const void *)(v4 + 32), a2, 32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: AVEFIG_DEBUG_SetCallback called %p -> %p sz %lu ", v14, 46, v15, (const void *)(v4 + 32), a2, 32);
        }
      }
      v17 = 0;
      v18 = a2[1];
      *(_OWORD *)(v4 + 32) = *a2;
      *(_OWORD *)(v4 + 48) = v18;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v9 = AVE_Log_CheckConsole(3u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
        v12 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v25, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_DEBUG_SetCallback", 568, "encoderPrivateStorage");
      }
    }
    v17 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v19 = AVE_Log_CheckConsole(0x14u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d\n", v20, 20, v21, v17);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v22, 20, v27, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_DEBUG_SetCallback err %d", v20, 20, v21, v17);
    }
  }
  if (v4)
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183416));
  return v17;
}

uint64_t AVE_RemoteSession_HEVCSetCallback()
{
  return 4294954381;
}

uint64_t AVE_Plugin_HEVC_CreateInstance(int a1, const void *a2, _QWORD *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v9;
  __uint64_t v10;
  const char *v11;
  BOOL v12;
  __uint64_t v13;
  const char *v14;
  void *v15;
  BOOL v16;
  __uint64_t v17;
  const char *v18;
  BOOL v19;
  __uint64_t v20;
  const char *v21;
  uint64_t v22;
  BOOL v23;
  __uint64_t v24;
  const char *v25;
  char v27[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %d %p %p\n", CurrTime, 20, LevelStr, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %d %p %p", CurrTime, 20, LevelStr, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3);
  }
  if (AVE_Log_CheckLevel(0x14u, 0))
  {
    v9 = AVE_Log_CheckConsole(0x14u);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(0);
    if (v9)
    {
      printf("%lld %d AVE %s: Compiled %s in %s on %s %s\n", v10, 20, v11, "803.16.2", "prod", "Aug  8 2024", "01:22:13");
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(0);
    }
    syslog(3, "%lld %d AVE %s: Compiled %s in %s on %s %s", v10, 20, v11, "803.16.2", "prod", "Aug  8 2024", "01:22:13");
  }
  if ((int)AVE_GetTemporayPath(v27, 128) >= 1 && AVE_Log_CheckLevel(0x14u, 0))
  {
    v12 = AVE_Log_CheckConsole(0x14u) == 0;
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(0);
    if (!v12)
    {
      printf("%lld %d AVE %s: Temporary Path: %s\n", v13, 20, v14, v27);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(0);
    }
    syslog(3, "%lld %d AVE %s: Temporary Path: %s", v13, 20, v14, v27);
  }
  AVE_GetCurrTime();
  AVE_Log_Init();
  AVE_DW_Init();
  v15 = AVE_DW_Get();
  AVE_Log_Config((uint64_t)v15 + 920);
  if (a1 == 1752589105 || a1 == 1869117027)
  {
    kdebug_trace();
    VTVideoEncoderGetClassID();
    CMDerivedObjectCreate();
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u) == 0;
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (!v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed\n", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4492, "encoderInstance != __null");
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigDerivedObjectCreate failed", v20, 3, v21, "AVE_Plugin_HEVC_CreateInstance", 4492, "encoderInstance != __null");
    }
    v22 = 4294954389;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u) == 0;
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (!v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: codecType not supported\n", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4481, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codecType not supported", v17, 3, v18, "AVE_Plugin_HEVC_CreateInstance", 4481, "(codecType == kCMVideoCodecType_HEVC || codecType == kFigVideoCodecType_HEVC_WirelessDisplayEncrypted)");
    }
    v22 = 4294954394;
  }
  *a3 = 0;
  kdebug_trace();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v23 = AVE_Log_CheckConsole(0x14u) == 0;
    v24 = AVE_GetCurrTime();
    v25 = AVE_Log_GetLevelStr(6);
    if (!v23)
    {
      printf("%lld %d AVE %s: Exit %s %d %p %p%d\n", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %d %p %p%d", v24, 20, v25, "AVE_Plugin_HEVC_CreateInstance", a1, a2, a3, v22);
  }
  return v22;
}

void sub_1B55463E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1020C402E7EA3AFLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_CreateSupportedPropertyDictionary(uint64_t a1, __CFDictionary **a2, __CFDictionary **a3)
{
  _DWORD *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  int *v14;
  __CFDictionary *v15;
  __CFDictionary *v16;
  int *v17;
  __CFArray *v18;
  const void *v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  __CFArray *v26;
  uint64_t v27;
  CFDictionaryRef v28;
  CFDictionaryRef v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  int v32;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  __uint64_t v45;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  __uint64_t v111;
  const char *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  const char *v265;
  __CFDictionary *theDict;
  const __CFString *v267;
  __CFString *v268;
  __CFString *v269;
  __CFString *v270;
  __CFString *v271;
  __CFString *v272;
  __CFString *v273;
  __CFString *v274;
  const __CFAllocator *allocator;
  __CFString *v276;
  __CFString *v277;
  void *key;
  __CFString *v279;
  void *v280;
  void *v281;
  void *v282;
  void *value;
  const void *v284;
  const void *v285;
  const void *v286;
  __CFDictionary **v287;
  const void *v288;
  const void *v289;
  const void *v290;
  const void *v291;
  const __CFString *v292;
  const __CFString *v293;
  int *v294;
  const __CFString *v295;

  v6 = AVE_DW_Get();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v32)
        goto LABEL_265;
      v35 = "PropertyDictionaryHEIF";
      v36 = 4002;
      goto LABEL_256;
    }
    goto LABEL_266;
  }
  v9 = Mutable;
  v10 = (const __CFString *)*MEMORY[0x1E0CEDA20];
  v11 = (const __CFString *)*MEMORY[0x1E0CED0A8];
  if (!AVE_AddSupportedProperty(Mutable, (const __CFString *)*MEMORY[0x1E0CEDA20], (const __CFString *)*MEMORY[0x1E0CED0A8], 0))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v37 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v37)
        goto LABEL_265;
      v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFra"
            "meInterval, false)";
      v36 = 4004;
      goto LABEL_256;
    }
    goto LABEL_266;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("StrictKeyFrameInterval"), 0))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v38 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v38)
        goto LABEL_265;
      v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
      v36 = 4005;
      goto LABEL_256;
    }
    goto LABEL_266;
  }
  v12 = (const __CFString *)*MEMORY[0x1E0CEDA10];
  v13 = (const __CFString *)*MEMORY[0x1E0CECEC8];
  if (!AVE_AddSupportedProperty(v9, (const __CFString *)*MEMORY[0x1E0CEDA10], (const __CFString *)*MEMORY[0x1E0CECEC8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v39 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v39)
    {
LABEL_265:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.");
      goto LABEL_266;
    }
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTempo"
          "ralCompression, false)";
    v36 = 4006;
LABEL_256:
    printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", CurrTime, 3, LevelStr, "AVE_CreateSupportedPropertyDictionary", v36, v35);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_265;
  }
  v14 = (int *)(a1 + 183532);
  if (*v14 >= 6)
  {
    if (!AVE_AddSupportedProperty(v9, (const __CFString *)*MEMORY[0x1E0CEDA18], CFSTR("ReconstructedPixelBufferAttributes"), 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v40 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (!v40)
          goto LABEL_265;
        v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___C"
              "FStringMakeConstantString (\"\" \"ReconstructedPixelBufferAttributes\" \"\")), true)";
        v36 = 4010;
        goto LABEL_256;
      }
      goto LABEL_266;
    }
    if (!AVE_AddSupportedProperty(v9, v10, CFSTR("ReconstructedPixelBuffer"), 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_266;
      v48 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v48)
        goto LABEL_265;
      v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFString"
            "MakeConstantString (\"\" \"ReconstructedPixelBuffer\" \"\")), false)";
      v36 = 4012;
      goto LABEL_256;
    }
  }
  v295 = v12;
  v15 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v15)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v41 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v41)
        goto LABEL_265;
      v35 = "Dictionary";
      v36 = 4018;
      goto LABEL_256;
    }
    goto LABEL_266;
  }
  v16 = v15;
  v287 = a3;
  v286 = (const void *)*MEMORY[0x1E0CEDA08];
  v293 = (const __CFString *)*MEMORY[0x1E0CEDA18];
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CEDA08], (const void *)*MEMORY[0x1E0CEDA18]);
  v288 = (const void *)*MEMORY[0x1E0CED9C8];
  v289 = (const void *)*MEMORY[0x1E0CED9D8];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E0CED9C8], (const void *)*MEMORY[0x1E0CED9D8]);
  v290 = (const void *)*MEMORY[0x1E0CED9E0];
  v291 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E0CED9E0], (const void *)*MEMORY[0x1E0C9AE40]);
  v17 = v14;
  v18 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  v285 = (const void *)*MEMORY[0x1E0CED9B0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED9B0]);
  v284 = (const void *)*MEMORY[0x1E0CED988];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED988]);
  value = (void *)*MEMORY[0x1E0CED9A8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED9A8]);
  v282 = (void *)*MEMORY[0x1E0CED9A0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED9A0]);
  v281 = (void *)*MEMORY[0x1E0CED998];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED998]);
  v294 = v17;
  if (v17[1] == 6 || *v17 >= 7)
    CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED990]);
  v19 = (const void *)*MEMORY[0x1E0CED9B8];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED9B8]);
  v280 = (void *)*MEMORY[0x1E0CED9C0];
  CFArrayAppendValue(v18, (const void *)*MEMORY[0x1E0CED9C0]);
  v292 = (const __CFString *)*MEMORY[0x1E0CED9F0];
  CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E0CED9F0], v18);
  if (v18)
    CFRelease(v18);
  v20 = (void *)*MEMORY[0x1E0CED180];
  CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CED180], v16);
  CFRelease(v16);
  v21 = (const __CFString *)*MEMORY[0x1E0CED0B0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED0B0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v47 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v47)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrame"
          "IntervalDuration, false)";
    v36 = 4058;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("StrictKeyFrameIntervalDuration"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v49 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v49)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    v36 = 4059;
    goto LABEL_256;
  }
  if (!v6[344])
    goto LABEL_41;
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("InitialQPI"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v50 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v50)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPI\" \"\")), false)";
    v36 = 4063;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("InitialQPP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v52 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v52)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPP\" \"\")), false)";
    v36 = 4064;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("InitialQPB"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v54 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v54)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"InitialQPB\" \"\")), false)";
    v36 = 4065;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED128], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v56 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v56)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    v36 = 4066;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableMBInputCtrl"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v58 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v58)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    v36 = 4067;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED248], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v60 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v60)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    v36 = 4068;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableRCDriver"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v62 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v62)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    v36 = 4069;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableRCFW"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v64 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v64)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableRCFW\" \"\")), false)";
    v36 = 4070;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("UseCAVLCBits"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v66 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v66)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    v36 = 4071;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableQPMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v68 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v68)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableQPMod\" \"\")), false)";
    v36 = 4072;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CECF98], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v70 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v70)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    v36 = 4073;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableLambdaMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v72 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v72)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    v36 = 4074;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("ThroughputRateMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v74 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v74)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    v36 = 4075;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("SAOMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v76 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v76)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SAOMode\" \"\")), false)";
    v36 = 4076;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("UseHWTileOffsets"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v78 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v78)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UseHWTileOffsets\" \"\")), false)";
    v36 = 4077;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v293, CFSTR("SessionName"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v80 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v80)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStr"
          "ingMakeConstantString (\"\" \"SessionName\" \"\")), false)";
    v36 = 4078;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("BPictures"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v82 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v82)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"BPictures\" \"\")), false)";
    v36 = 4080;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("EnableAdaptB"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v84 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v84)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    v36 = 4081;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("EnableCompleteGOP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v86 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v86)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    v36 = 4082;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EdgeReplication"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v88 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v88)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EdgeReplication\" \"\")), false)";
    v36 = 4083;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("EnableStatsCollect"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v90 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v90)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    v36 = 4084;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED110], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v91 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v91)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    v36 = 4085;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("RCMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v94 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v94)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RCMode\" \"\")), false)";
    v36 = 4086;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("SVENum"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v96 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v96)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"SVENum\" \"\")), false)";
    v36 = 4087;
    goto LABEL_256;
  }
LABEL_41:
  key = v20;
  v279 = (__CFString *)*MEMORY[0x1E0CECEB0];
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CECEB0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v51 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v51)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrame"
          "Reordering, false)";
    v36 = 4090;
    goto LABEL_256;
  }
  v277 = (__CFString *)*MEMORY[0x1E0CED1F8];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED1F8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v53 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v53)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    v36 = 4091;
    goto LABEL_256;
  }
  v276 = (__CFString *)*MEMORY[0x1E0CECFD0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CECFD0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v55 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v55)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    v36 = 4092;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("MaximumRealTimeFrameRate"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v57 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v57)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    v36 = 4094;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CECEB8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v59 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v59)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowOpenGOP, false)";
    v36 = 4095;
    goto LABEL_256;
  }
  allocator = v7;
  v22 = (const __CFString *)*MEMORY[0x1E0CECEF0];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CECEF0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v61 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v61)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    v36 = 4096;
    goto LABEL_256;
  }
  v23 = (const __CFString *)*MEMORY[0x1E0CED178];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED178], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v63 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v63)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    v36 = 4097;
    goto LABEL_256;
  }
  v274 = (__CFString *)*MEMORY[0x1E0CED068];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED068], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v65 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v65)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    v36 = 4098;
    goto LABEL_256;
  }
  v273 = (__CFString *)*MEMORY[0x1E0CED260];
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CED260], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v67 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v67)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardw"
          "areAcceleratedVideoEncoder, false)";
    v36 = 4099;
    goto LABEL_256;
  }
  v272 = (__CFString *)*MEMORY[0x1E0CED060];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED060], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v69 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v69)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    v36 = 4100;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v10, CFSTR("CodedBuffersOverride"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v71 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v71)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMa"
          "keConstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    v36 = 4101;
    goto LABEL_256;
  }
  AVE_VUI_AddAllToCFDict(v9);
  v271 = (__CFString *)*MEMORY[0x1E0CED198];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED198], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v73 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v73)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quantizatio"
          "nScalingMatrixPreset, false)";
    v36 = 4105;
    goto LABEL_256;
  }
  v270 = (__CFString *)*MEMORY[0x1E0CED010];
  if (!AVE_AddSupportedProperty(v9, v293, (const __CFString *)*MEMORY[0x1E0CED010], 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v75 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v75)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSy"
          "ncSampleNALUnitTypes, true)";
    v36 = 4106;
    goto LABEL_256;
  }
  v269 = (__CFString *)*MEMORY[0x1E0CED018];
  if (!AVE_AddSupportedProperty(v9, v293, (const __CFString *)*MEMORY[0x1E0CED018], 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v77 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v77)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTe"
          "mporalLevelInfoCombinations, true)";
    v36 = 4107;
    goto LABEL_256;
  }
  v268 = (__CFString *)*MEMORY[0x1E0CED190];
  if (!AVE_AddSupportedProperty(v9, v10, (const __CFString *)*MEMORY[0x1E0CED190], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v79 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v79)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    v36 = 4108;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CECF98], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v81 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v81)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EnableQPMo"
          "dulation, false)";
    v36 = 4109;
    goto LABEL_256;
  }
  v267 = (const __CFString *)*MEMORY[0x1E0CED1A0];
  if (!AVE_AddSupportedProperty(v9, v295, (const __CFString *)*MEMORY[0x1E0CED1A0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v83 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v83)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    v36 = 4110;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v292, (const __CFString *)*MEMORY[0x1E0CED090], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v85 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v85)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_M"
          "asteringDisplayColorVolume, false)";
    v36 = 4112;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v292, (const __CFString *)*MEMORY[0x1E0CECF60], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v87 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v87)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_C"
          "ontentLightLevelInfo, false)";
    v36 = 4113;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(v9, v295, CFSTR("CalculateMeanSquaredError"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v89 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v89)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionaryHEIF, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    v36 = 4114;
    goto LABEL_256;
  }
  theDict = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!theDict)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v92 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v92)
      goto LABEL_265;
    v35 = "PropertyDictionary";
    v36 = 4120;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v11, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v93 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v93)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInterval, false)";
    v36 = 4122;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("StrictKeyFrameInterval"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v95 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v95)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameInterval\" \"\")), false)";
    v36 = 4123;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, v279, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v97 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v97)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowFrameReordering, false)";
    v36 = 4124;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, v13, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v98 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v98)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_AllowTemporalC"
          "ompression, false)";
    v36 = 4125;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v22, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v99 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v99)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageBitRate, false)";
    v36 = 4126;
    goto LABEL_256;
  }
  v24 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v24)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v100 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v100)
      goto LABEL_265;
    v35 = "Dictionary";
    v36 = 4131;
    goto LABEL_256;
  }
  v25 = v24;
  CFDictionarySetValue(v24, v286, v293);
  CFDictionarySetValue(v25, v288, v289);
  CFDictionarySetValue(v25, v290, v291);
  v26 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v26, v285);
  CFArrayAppendValue(v26, v284);
  CFArrayAppendValue(v26, value);
  CFArrayAppendValue(v26, v282);
  CFArrayAppendValue(v26, v281);
  if (v294[1] == 6 || *v294 >= 7)
    CFArrayAppendValue(v26, (const void *)*MEMORY[0x1E0CED990]);
  CFArrayAppendValue(v26, v19);
  CFArrayAppendValue(v26, v280);
  CFDictionarySetValue(v25, v292, v26);
  if (v26)
    CFRelease(v26);
  CFDictionarySetValue(theDict, key, v25);
  CFRelease(v25);
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableWeightedPrediction"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v101 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v101)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableWeightedPrediction\" \"\")), false)";
    v36 = 4170;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v277, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v102 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v102)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_SourceFrameCount, false)";
    v36 = 4171;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v276, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v103 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v103)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedFrameRate, false)";
    v36 = 4172;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MaximumRealTimeFrameRate"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v104 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v104)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaximumRealTimeFrameRate\" \"\")), false)";
    v36 = 4174;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECF78], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v105 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v105)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_DataRateLimits, false)";
    v36 = 4175;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECF58], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v106 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v106)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConstantBitRate, false)";
    v36 = 4176;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("VariableBitRate"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v107 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v107)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"VariableBitRate\" \"\")), false)";
    v36 = 4177;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECF68], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v108 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v108)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ConvergenceDura"
          "tionForAverageDataRate, false)";
    v36 = 4178;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECFF0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v109 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v109)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_FrameRateTarget"
          "ForAverageBitrate, false)";
    v36 = 4179;
    goto LABEL_256;
  }
  v27 = AVE_VUI_AddAllToCFDict(theDict);
  v28 = CFDictionaryCreate(allocator, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v28)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v110 = AVE_Log_CheckConsole(3u);
      v111 = AVE_GetCurrTime();
      v112 = AVE_Log_GetLevelStr(4);
      if (v110)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.\n", v111, 3, v112, "AVE_CreateSupportedPropertyDictionary", 4185, "Dictionary");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreate failed.");
    }
    goto LABEL_266;
  }
  v29 = v28;
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CED140], v28);
  CFRelease(v29);
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECFC8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v113 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v113)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_ExpectedDuration, false)";
    v36 = 4196;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v21, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v114 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v114)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxKeyFrameInte"
          "rvalDuration, false)";
    v36 = 4197;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("StrictKeyFrameIntervalDuration"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v115 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v115)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"StrictKeyFrameIntervalDuration\" \"\")), false)";
    v36 = 4198;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED248], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v116 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v116)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Usage, false)";
    v36 = 4199;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED220], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v117 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v117)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_ThrottleForBackground, false)";
    v36 = 4200;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("AllowOpenGOP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v118 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v118)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllowOpenGOP\" \"\")), false)";
    v36 = 4201;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SpatialAdaptiveQPLevel"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v119 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v119)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SpatialAdaptiveQPLevel\" \"\")), false)";
    v36 = 4202;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LookAheadFrames"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v120 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v120)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LookAheadFrames\" \"\")), false)";
    v36 = 4203;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("PreemptiveLoadBalancing"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v121 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v121)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"PreemptiveLoadBalancing\" \"\")), false)";
    v36 = 4204;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EncoderEncryptionData"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v122 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v122)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EncoderEncryptionData\" \"\")), false)";
    v36 = 4206;
    goto LABEL_256;
  }
  if (!v6[344])
    goto LABEL_140;
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("InitialQPI"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v123 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v123)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPI\" \"\")), false)";
    v36 = 4210;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("InitialQPP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v124 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v124)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPP\" \"\")), false)";
    v36 = 4211;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("InitialQPB"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v127 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v127)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"InitialQPB\" \"\")), false)";
    v36 = 4212;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CECEF8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v129 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v129)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_AverageNonDropp"
          "ableFrameRate, false)";
    v36 = 4213;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableRCFW"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v131 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v131)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCFW\" \"\")), false)";
    v36 = 4214;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableRCDriver"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v133 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v133)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableRCDriver\" \"\")), false)";
    v36 = 4215;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SetDbgInternalParams"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v135 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v135)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetDbgInternalParams\" \"\")), false)";
    v36 = 4216;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableQPMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v137 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v137)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableQPMod\" \"\")), false)";
    v36 = 4217;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableLambdaMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v139 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v139)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableLambdaMod\" \"\")), false)";
    v36 = 4218;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableVarianceQPMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v142 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v142)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVarianceQPMod\" \"\")), false)";
    v36 = 4219;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("FlatAreaLowQp"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v143 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v143)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"FlatAreaLowQp\" \"\")), false)";
    v36 = 4220;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableLowVarianceQPMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v144 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v144)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableLowVarianceQPMod\" \"\")), false)";
    v36 = 4221;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("UseCAVLCBits"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v145 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v145)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseCAVLCBits\" \"\")), false)";
    v36 = 4222;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableStaticAreasLowQP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v146 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v146)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStaticAreasLowQP\" \"\")), false)";
    v36 = 4223;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("UseAsyncFWScheduling"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v147 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v147)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UseAsyncFWScheduling\" \"\")), false)";
    v36 = 4224;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("BPictures"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v148 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v148)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BPictures\" \"\")), false)";
    v36 = 4225;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableAdaptB"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v149 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v149)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableAdaptB\" \"\")), false)";
    v36 = 4226;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableCompleteGOP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v150 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v150)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableCompleteGOP\" \"\")), false)";
    v36 = 4227;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("LowDelay"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v151 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v151)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LowDelay\" \"\")), false)";
    v36 = 4228;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("UltraFlatAreaLowQp"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v152 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v152)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"UltraFlatAreaLowQp\" \"\")), false)";
    v36 = 4229;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("HevcSplitDecision"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v153 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v153)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HevcSplitDecision\" \"\")), false)";
    v36 = 4230;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableHevcDeRingingQPMod"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v154 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v154)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHevcDeRingingQPMod\" \"\")), false)";
    v36 = 4231;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("ChromaQpOffset"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v155 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v155)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQpOffset\" \"\")), false)";
    v36 = 4232;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("ThroughputRateMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v156 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v156)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ThroughputRateMode\" \"\")), false)";
    v36 = 4233;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableHdrPqRC"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v157 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v157)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableHdrPqRC\" \"\")), false)";
    v36 = 4234;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LRMEScaledSrcEn"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v158 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v158)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEScaledSrcEn\" \"\")), false)";
    v36 = 4235;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LRMEOutputType"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v159 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v159)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEOutputType\" \"\")), false)";
    v36 = 4236;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("AdaptBPocDelay"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v160 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v160)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"AdaptBPocDelay\" \"\")), false)";
    v36 = 4237;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SetMultiPassNum"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v161 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v161)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SetMultiPassNum\" \"\")), false)";
    v36 = 4238;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultiPassConstantQP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v162 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v162)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassConstantQP\" \"\")), false)";
    v36 = 4239;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultiPassQPModLevel"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v163 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v163)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassQPModLevel\" \"\")), false)";
    v36 = 4240;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultiPassMaxQPModLevel"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v164 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v164)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassMaxQPModLevel\" \"\")), false)";
    v36 = 4241;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultiPassOptions"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v165 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v165)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiPassOptions\" \"\")), false)";
    v36 = 4242;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MCTFStrengthLevel"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v166 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v166)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFStrengthLevel\" \"\")), false)";
    v36 = 4243;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LatencyMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v167 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v167)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LatencyMode\" \"\")), false)";
    v36 = 4244;
    goto LABEL_256;
  }
  if (*v294 >= 3)
  {
    if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("UseReferenceCompressedBuffers"), 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_266;
      v168 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v168)
        goto LABEL_265;
      v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMak"
            "eConstantString (\"\" \"UseReferenceCompressedBuffers\" \"\")), false)";
      v36 = 4248;
      goto LABEL_256;
    }
    if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EdgeReplication"), 0))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_266;
      v169 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v169)
        goto LABEL_265;
      v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMake"
            "ConstantString (\"\" \"EdgeReplication\" \"\")), false)";
      v36 = 4249;
      goto LABEL_256;
    }
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("SessionName"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v170 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v170)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SessionName\" \"\")), false)";
    v36 = 4252;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("HierarchicalB"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v171 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v171)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"HierarchicalB\" \"\")), true)";
    v36 = 4253;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("RCMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v172 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v172)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RCMode\" \"\")), false)";
    v36 = 4254;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableMultipleScalingMatrices"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v173 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v173)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMultipleScalingMatrices\" \"\")), false)";
    v36 = 4255;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SVENum"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v174 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v174)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SVENum\" \"\")), false)";
    v36 = 4256;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("LrmePipeSyncMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v175 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v175)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"LrmePipeSyncMode\" \"\")), false)";
    v36 = 4257;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableSEITagInsertion"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v176 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v176)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSEITagInsertion\" \"\")), false)";
    v36 = 4258;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableSliceEncodingMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v177 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v177)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableSliceEncodingMode\" \"\")), false)";
    v36 = 4259;
    goto LABEL_256;
  }
LABEL_140:
  if (*v294 >= 3 && !AVE_AddSupportedProperty(theDict, v295, CFSTR("ForceRefUncompressed"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v126 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v126)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceRefUncompressed\" \"\")), false)";
    v36 = 4263;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("CalculateMeanSquaredError"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v125 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v125)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"CalculateMeanSquaredError\" \"\")), false)";
    v36 = 4266;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED170], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v128 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v128)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PrioritizeEnco"
          "dingSpeedOverQuality, false)";
    v36 = 4267;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED128], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v130 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v130)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_OutputBitDepth, false)";
    v36 = 4268;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SAOMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v132 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v132)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SAOMode\" \"\")), false)";
    v36 = 4269;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED110], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v134 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v134)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_NumberOfSlices, false)";
    v36 = 4270;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v23, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v136 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v136)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Priority, false)";
    v36 = 4271;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("DeblockingFiltering"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v138 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v138)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DeblockingFiltering\" \"\")), false)";
    v36 = 4272;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("DebugMetadataSEI"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v140 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v140)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEI\" \"\")), false)";
    v36 = 4273;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("DebugMetadataSEIuseEPB"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v178 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v178)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DebugMetadataSEIuseEPB\" \"\")), false)";
    v36 = 4274;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v274, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v179 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v179)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputQueueMaxCount, false)";
    v36 = 4275;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableUserQPForFacetime"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v180 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v180)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserQPForFacetime\" \"\")), false)";
    v36 = 4276;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, (const __CFString *)*MEMORY[0x1E0CED250], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v181 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v181)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_UserDPBFra"
          "mesForFaceTime, false)";
    v36 = 4277;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("DPBRequirements"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v182 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v182)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"DPBRequirements\" \"\")), false)";
    v36 = 4278;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableUserRefForFacetime"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v183 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v183)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableUserRefForFacetime\" \"\")), false)";
    v36 = 4279;
    goto LABEL_256;
  }
  v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v30)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v141 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v141)
      goto LABEL_265;
    v35 = "Dictionary";
    v36 = 4286;
    goto LABEL_256;
  }
  v31 = v30;
  CFDictionarySetValue(v30, v288, v289);
  CFDictionarySetValue(v31, v290, v291);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CED0F0], v31);
  CFRelease(v31);
  if (!AVE_AddSupportedProperty(theDict, v10, v268, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v184 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v184)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    v36 = 4299;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, v267, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v185 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v185)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RealTime, false)";
    v36 = 4302;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, v273, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v186 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v186)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_UsingHardwareA"
          "cceleratedVideoEncoder, false)";
    v36 = 4303;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableStatsCollect"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v187 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v187)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableStatsCollect\" \"\")), false)";
    v36 = 4304;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableMultiReferenceP"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v188 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v188)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiReferenceP\" \"\")), false)";
    v36 = 4305;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultiReferencePSpacing"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v189 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v189)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultiReferencePSpacing\" \"\")), false)";
    v36 = 4306;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("log2_max_minus4"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v190 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v190)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"log2_max_minus4\" \"\")), false)";
    v36 = 4307;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v272, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v191 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v191)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_InputPixelFormat, false)";
    v36 = 4308;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED138], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v192 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v192)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_PerceptualQual"
          "ityOptimization, false)";
    v36 = 4309;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("CodedBuffersOverride"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v193 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v193)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"CodedBuffersOverride\" \"\")), false)";
    v36 = 4310;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("EnableMBInputCtrl"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v194 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v194)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"EnableMBInputCtrl\" \"\")), false)";
    v36 = 4311;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("UserRPSForFaceTime"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v195 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v195)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"UserRPSForFaceTime\" \"\")), false)";
    v36 = 4312;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED270], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v196 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v196)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptation, false)";
    v36 = 4313;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED278], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v197 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v197)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_VideoResolutio"
          "nAdaptationType, false)";
    v36 = 4314;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("ChromaQPIndexOffsetMultiPPS"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v198 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v198)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"ChromaQPIndexOffsetMultiPPS\" \"\")), false)";
    v36 = 4315;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("iChatUsageString"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v199 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v199)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"iChatUsageString\" \"\")), false)";
    v36 = 4316;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED258], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v200 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v200)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_UserParameterSetsIds, false)";
    v36 = 4317;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("BaseLayerFrameRate"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v201 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v201)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"BaseLayerFrameRate\" \"\")), false)";
    v36 = 4318;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("IntraRefreshFrames"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v202 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v202)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"IntraRefreshFrames\" \"\")), false)";
    v36 = 4319;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v271, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v203 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v203)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_QuantizationSca"
          "lingMatrixPreset, false)";
    v36 = 4320;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED098], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v204 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v204)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MaxAllowedFrameQP, false)";
    v36 = 4321;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED0C0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v205 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v205)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_MinAllowedFrameQP, false)";
    v36 = 4322;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED2A0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v206 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v206)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMinQuantizatio"
          "nParameter, false)";
    v36 = 4323;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED298], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v207 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v207)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionProperty_SoftMaxQuantizatio"
          "nParameter, false)";
    v36 = 4324;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("ForceSliceRPS"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v208 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v208)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceSliceRPS\" \"\")), false)";
    v36 = 4325;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED0A0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v209 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v209)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MaxFrameDelayCount, false)";
    v36 = 4326;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("MaximizePowerEfficiency"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v210 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v210)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MaximizePowerEfficiency\" \"\")), false)";
    v36 = 4327;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED0D8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v211 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v211)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MinimizeMemoryUsage, false)";
    v36 = 4328;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED070], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v212 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v212)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Inser"
          "tTrailingBytes, false)";
    v36 = 4329;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CECEE0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v213 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v213)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Ambie"
          "ntViewingEnvironment, false)";
    v36 = 4330;
    goto LABEL_256;
  }
  if (*v294 >= 3 && !AVE_AddSupportedProperty(theDict, v295, CFSTR("RelaxAverageBitRateTarget"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v214 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v214)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"RelaxAverageBitRateTarget\" \"\")), false)";
    v36 = 4333;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED1D0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v215 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v215)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCSeq"
          "uenceParameterSetID, false)";
    v36 = 4336;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED1C8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v216 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v216)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCPic"
          "tureParameterSetID, false)";
    v36 = 4337;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED1C0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v217 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v217)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_RequireDetermi"
          "nisticDependencyAndReordering, false)";
    v36 = 4338;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, v270, 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v218 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v218)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCSyncSa"
          "mpleNALUnitTypes, true)";
    v36 = 4339;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, v269, 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v219 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v219)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, kVTCompressionPropertyKey_HEVCTempor"
          "alLevelInfoCombinations, true)";
    v36 = 4340;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CECFB0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v220 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v220)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_EncodesAlpha, false)";
    v36 = 4341;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableTimingInfoMetadata"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v221 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v221)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableTimingInfoMetadata\" \"\")), false)";
    v36 = 4342;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableContentColourVolumeSEI"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v222 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v222)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableContentColourVolumeSEI\" \"\")), false)";
    v36 = 4343;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, (const __CFString *)*MEMORY[0x1E0CED1D8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v223 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v223)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_RequiredHEVCVid"
          "eoParameterSetAlphaLayerID, false)";
    v36 = 4344;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, v268, 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v224 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v224)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, kVTCompressionPropertyKey_Quality, false)";
    v36 = 4345;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("DroppablePFramesOnly"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v225 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v225)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"DroppablePFramesOnly\" \"\")), false)";
    v36 = 4346;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("AllocCodedBufferHalfSize"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v226 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v226)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"AllocCodedBufferHalfSize\" \"\")), false)";
    v36 = 4348;
    goto LABEL_256;
  }
  if (*v294 >= 8 && !AVE_AddSupportedProperty(theDict, v10, CFSTR("lrmeRCPassNum"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v227 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v227)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"lrmeRCPassNum\" \"\")), false)";
    v36 = 4351;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EncodesDisparity"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v228 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v228)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDisparity\" \"\")), false)";
    v36 = 4353;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EncodesDepth"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v229 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v229)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EncodesDepth\" \"\")), false)";
    v36 = 4354;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableVUI"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v230 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v230)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUI\" \"\")), false)";
    v36 = 4356;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableVUIBitstreamRestriction"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v231 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v231)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableVUIBitstreamRestriction\" \"\")), false)";
    v36 = 4357;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("EnableMultiSliceStats"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v232 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v232)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"EnableMultiSliceStats\" \"\")), false)";
    v36 = 4358;
    goto LABEL_256;
  }
  if (*v294 < 16)
    goto LABEL_225;
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED218], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v233 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v233)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_TemporalNoiseR"
          "eduction, false)";
    v36 = 4362;
    goto LABEL_256;
  }
  if (*v294 < 22)
    goto LABEL_225;
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SubjectiveDistortion32Weight0"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v234 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v234)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight0\" \"\")), false)";
    v36 = 4366;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SubjectiveDistortion32Weight1"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v235 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v235)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight1\" \"\")), false)";
    v36 = 4367;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SubjectiveDistortion32Weight2"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v236 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v236)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Weight2\" \"\")), false)";
    v36 = 4368;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SubjectiveDistortion32Offset"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v237 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v237)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Offset\" \"\")), false)";
    v36 = 4369;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("SubjectiveDistortion32Scale"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v238 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v238)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"SubjectiveDistortion32Scale\" \"\")), false)";
    v36 = 4370;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultipleFTQNum"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v239 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v239)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQNum\" \"\")), false)";
    v36 = 4371;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MultipleFTQType"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v240 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v240)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MultipleFTQType\" \"\")), false)";
    v36 = 4372;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("MultipleFTQSameLambda"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v241 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v241)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"MultipleFTQSameLambda\" \"\")), false)";
    v36 = 4373;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("ForceZeroMVEn0"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v242 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v242)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroMVEn0\" \"\")), false)";
    v36 = 4374;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, CFSTR("ForceZeroResEn"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v243 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v243)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, ((CFStringRef) __builtin___CFStringMakeC"
          "onstantString (\"\" \"ForceZeroResEn\" \"\")), false)";
    v36 = 4375;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LRMEFSMVCostMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v244 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v244)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSMVCostMode\" \"\")), false)";
    v36 = 4376;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("LRMEFSLambdaLinear"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v245 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v245)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"LRMEFSLambdaLinear\" \"\")), false)";
    v36 = 4377;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MCTFEdgeCount"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v246 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v246)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeCount\" \"\")), false)";
    v36 = 4378;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MCTFEdgeThresh"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v247 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v247)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MCTFEdgeThresh\" \"\")), false)";
    v36 = 4379;
    goto LABEL_256;
  }
LABEL_225:
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED080], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v248 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v248)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CVideoLayerIDs, false)";
    v36 = 4383;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED088], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v249 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v249)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CViewIDs, false)";
    v36 = 4384;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED078], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v250 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v250)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_MVHEV"
          "CLeftAndRightViewIDs, false)";
    v36 = 4385;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED1E0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v251 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v251)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCPictureParameterSetIDs, false)";
    v36 = 4388;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED1E8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v252 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v252)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCSequenceParameterSetIDs, false)";
    v36 = 4391;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v292, (const __CFString *)*MEMORY[0x1E0CED1F0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v253 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v253)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertySupportedValueListKey, kVTCompressionPropertyKey_Requi"
          "redMVHEVCVideoParameterSetAlphaVideoLayerIDs, false)";
    v36 = 4394;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED0E0], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v254 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v254)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesAfterEnd, false)";
    v36 = 4398;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED0E8], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v255 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v255)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_MoreFramesBeforeStart, false)";
    v36 = 4400;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("RecommendedParallelizationLimit"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v256 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v256)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizationLimit\" \"\")), true)";
    v36 = 4403;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("RecommendedParallelizedSubdivisionMinimumDuration"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v257 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v257)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumDuration\" \"\")), true)";
    v36 = 4406;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("RecommendedParallelizedSubdivisionMinimumFrameCount"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v258 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v258)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"RecommendedParallelizedSubdivisionMinimumFrameCount\" \"\")), true)";
    v36 = 4408;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MotionEstimationSearchMode"), 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v259 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v259)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MotionEstimationSearchMode\" \"\")), false)";
    v36 = 4411;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("SupportedMotionSearchModes"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v260 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v260)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"SupportedMotionSearchModes\" \"\")), true)";
    v36 = 4413;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v10, CFSTR("MaxEncoderPixelRate"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v261 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v261)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"MaxEncoderPixelRate\" \"\")), true)";
    v36 = 4416;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v293, CFSTR("NumberOfCores"), 1))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v262 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v262)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Enumeration, ((CFStringRef) __builtin___CFStringM"
          "akeConstantString (\"\" \"NumberOfCores\" \"\")), true)";
    v36 = 4418;
    goto LABEL_256;
  }
  if (!AVE_AddSupportedProperty(theDict, v295, (const __CFString *)*MEMORY[0x1E0CED130], 0))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_266;
    v263 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v263)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Boolean, kVTCompressionPropertyKey_Paravirtualized, false)";
    v36 = 4421;
    goto LABEL_256;
  }
  if (AVE_AddSupportedProperty(theDict, v10, CFSTR("DebugFeature"), 0))
  {
    *a2 = theDict;
    *v287 = v9;
    goto LABEL_267;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v264 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (!v264)
      goto LABEL_265;
    v35 = "AVE_AddSupportedProperty(PropertyDictionary, kVTPropertyType_Number, ((CFStringRef) __builtin___CFStringMakeCo"
          "nstantString (\"\" \"DebugFeature\" \"\")), false)";
    v36 = 4423;
    goto LABEL_256;
  }
LABEL_266:
  v27 = 4294954392;
LABEL_267:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v42 = AVE_Log_CheckConsole(0x14u);
    v43 = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(7);
    if (v42)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d \n", v43, 20, v44, v27);
      v45 = AVE_GetCurrTime();
      v265 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v45, 20, v265, v27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_CreateSupportedPropertyDictionary err %d ", v43, 20, v44, v27);
    }
  }
  return v27;
}

uint64_t AVE_HEVCInvalidate(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  uint64_t v17;
  __uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  uint64_t v27;
  __uint64_t v28;
  uint64_t v29;
  __uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  __uint64_t v34;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  __uint64_t v41;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCInvalidate", a1);
      v6 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v36, "AVE_HEVCInvalidate", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCInvalidate", a1);
    }
  }
  if (DerivedStorage)
  {
    v7 = DerivedStorage + 183408;
    v8 = (pthread_mutex_t *)(DerivedStorage + 183416);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      v9 = AVE_Log_CheckConsole(0x14u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(7);
      if (v9)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize\n", v10, 20, v11);
        v12 = AVE_GetCurrTime();
        v37 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v12, 20, v37);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCFinalize", v10, 20, v11);
      }
    }
    v17 = *(_QWORD *)(DerivedStorage + 183616);
    v18 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v17, 4u, v18);
    if (*(_DWORD *)(DerivedStorage + 183480))
      *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
    v41 = AVE_GetCurrTime();
    if (*(_DWORD *)v7 == 30568 && (v19 = AVE_USL_Drv_Complete(*(_QWORD *)(DerivedStorage + 24), &v41), (_DWORD)v19))
    {
      v20 = v19;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v21 = AVE_Log_CheckConsole(3u);
        v22 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x\n", v22, 3, v23, "AVE_HEVCInvalidate", 4699, "err == noErr", v20);
          v22 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Complete failed 0x%x", v22);
      }
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183480))
      {
        *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          v24 = AVE_Log_CheckConsole(0x18u);
          v25 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(6);
          v27 = *(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 80);
          if (v24)
          {
            printf("%lld %d AVE %s: FIG: Invalidate took %lld us\n", v25, 24, v26, v27);
            v28 = AVE_GetCurrTime();
            v39 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v28, 24, v39, *(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 80));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Invalidate took %lld us", v25, 24, v26, v27);
          }
        }
      }
      v29 = *(_QWORD *)(v7 + 208);
      v30 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v29, 4u, v30);
      v20 = 0;
    }
    pthread_mutex_unlock(v8);
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v13 = AVE_Log_CheckConsole(3u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v14, 3, v15, "AVE_HEVCInvalidate", 4677, "encoderPrivateStorage");
        v16 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v38, "AVE_HEVCInvalidate", 4677, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v14, 3, v15, "AVE_HEVCInvalidate", 4677, "encoderPrivateStorage");
      }
    }
    v20 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v31 = AVE_Log_CheckConsole(0x14u);
    v32 = AVE_GetCurrTime();
    v33 = AVE_Log_GetLevelStr(6);
    if (v31)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
      v34 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v34, 20, v40, "AVE_HEVCInvalidate", a1, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v32, 20, v33, "AVE_HEVCInvalidate", a1, v20);
    }
  }
  return v20;
}

void AVE_HEVCFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  uint64_t v7;
  __uint64_t v8;
  __uint64_t v9;
  AVE_FPS *v10;
  int v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  uint64_t v23;
  __uint64_t v24;
  int v25;
  uint64_t v26;
  __uint64_t v27;
  _OWORD *v28;
  const void *v29;
  AVE_VCP *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  __uint64_t v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  __uint64_t v46;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCFinalize", a1);
      v6 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v41, "AVE_HEVCFinalize", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCFinalize", a1);
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    v7 = *(_QWORD *)(DerivedStorage + 183616);
    v8 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v7, 1u, v8);
    if (*(_DWORD *)(DerivedStorage + 183480))
      *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
    v9 = AVE_GetCurrTime();
    v10 = *(AVE_FPS **)(DerivedStorage + 183608);
    if (v10)
    {
      AVE_FPS::~AVE_FPS(v10);
      MEMORY[0x1B5E4D1C0]();
      *(_QWORD *)(DerivedStorage + 183608) = 0;
    }
    if ((*(_DWORD *)(DerivedStorage + 183408) - 30567) <= 1)
    {
      v46 = v9;
      AVE_USL_Drv_Stop(*(_QWORD *)(DerivedStorage + 24), (uint64_t *)&v46, 1);
    }
    v11 = AVE_USL_Drv_Destroy(*(const void ****)(DerivedStorage + 24));
    *(_QWORD *)(DerivedStorage + 24) = 0;
    if (v11)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v12 = AVE_Log_CheckConsole(3u);
        v13 = AVE_GetCurrTime();
        v14 = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.\n", v13, 3, v14, "AVE_HEVCFinalize", 4783, "err == noErr");
          v15 = AVE_GetCurrTime();
          v42 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v15, 3, v42, "AVE_HEVCFinalize", 4783, "err == noErr");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Destroy failed.", v13, 3, v14, "AVE_HEVCFinalize", 4783, "err == noErr");
        }
      }
      v25 = -12912;
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 183480))
      {
        *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          v20 = AVE_Log_CheckConsole(0x18u);
          v21 = AVE_GetCurrTime();
          v22 = AVE_Log_GetLevelStr(6);
          v23 = *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488);
          if (v20)
          {
            printf("%lld %d AVE %s: FIG: Finalize took %lld us\n", v21, 24, v22, v23);
            v24 = AVE_GetCurrTime();
            v44 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v24, 24, v44, *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: Finalize took %lld us", v21, 24, v22, v23);
          }
        }
      }
      v26 = *(_QWORD *)(DerivedStorage + 183616);
      v27 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v26, 1u, v27);
      AVE_TimeStats_Calc(*(_QWORD *)(DerivedStorage + 183616));
      AVE_TimeStats_Print(*(unsigned int **)(DerivedStorage + 183616), 22, 6, 0, 0);
      v25 = 0;
    }
    AVE_DW_Uninit();
    v28 = *(_OWORD **)(DerivedStorage + 183616);
    if (v28)
    {
      AVE_TimeStats_Destroy(v28);
      *(_QWORD *)(DerivedStorage + 183616) = 0;
    }
    v29 = *(const void **)(DerivedStorage + 183624);
    if (v29)
    {
      AVE_Dump_Uninit(v29);
      AVE_Dump_Destroy(*(void **)(DerivedStorage + 183624));
      *(_QWORD *)(DerivedStorage + 183624) = 0;
    }
    v30 = *(AVE_VCP **)(DerivedStorage + 183632);
    if (v30)
    {
      AVE_VCP_Destroy(v30);
      *(_QWORD *)(DerivedStorage + 183632) = 0;
    }
    v31 = *(const void **)(DerivedStorage + 183552);
    if (v31)
    {
      CFRelease(v31);
      *(_QWORD *)(DerivedStorage + 183552) = 0;
    }
    v32 = *(const void **)(DerivedStorage + 183520);
    if (v32)
    {
      CFRelease(v32);
      *(_QWORD *)(DerivedStorage + 183520) = 0;
    }
    v33 = *(const void **)(DerivedStorage + 183656);
    if (v33)
    {
      CFRelease(v33);
      *(_QWORD *)(DerivedStorage + 183656) = 0;
    }
    v34 = *(const void **)(DerivedStorage + 185456);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 185456) = 0;
    }
    v35 = *(const void **)(DerivedStorage + 16);
    if (v35)
    {
      CFRelease(v35);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v36 = *(const void **)(DerivedStorage + 183664);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(DerivedStorage + 183664) = 0;
    }
    AVE_USL_Enc_PropCfg_Uninit((const void *)(DerivedStorage + 184992));
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
    pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 183416));
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v17, 3, v18, "AVE_HEVCFinalize", 4744, "encoderPrivateStorage");
        v19 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v43, "AVE_HEVCFinalize", 4744, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v17, 3, v18, "AVE_HEVCFinalize", 4744, "encoderPrivateStorage");
      }
    }
    AVE_DW_Uninit();
    v25 = -12912;
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v37 = AVE_Log_CheckConsole(0x14u);
    v38 = AVE_GetCurrTime();
    v39 = AVE_Log_GetLevelStr(6);
    if (v37)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
      v40 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v40, 20, v45, "AVE_HEVCFinalize", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v38, 20, v39, "AVE_HEVCFinalize", a1, v25);
    }
  }
}

uint64_t AVE_HEVCCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void **v8;
  int *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  __uint64_t v26;
  int v27;
  uint64_t v28;
  const __CFString **v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  void **v33;
  const __CFAllocator *v34;
  CFNumberType v35;
  void *StringForIntegerCodePoint;
  _BYTE *v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  int v41;
  __uint64_t v42;
  int v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  unsigned __int8 *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  __uint64_t v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  int v56;
  __uint64_t v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  __uint64_t v62;
  int v63;
  __uint64_t v64;
  const char *v65;
  int v66;
  __uint64_t v67;
  const char *v68;
  const char *v69;
  void *v70;
  const __CFAllocator *v71;
  int *v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  const char *v76;
  int v77;
  __uint64_t v78;
  const char *v79;
  int v80;
  __uint64_t v81;
  const __CFString *v82;
  int v83;
  __uint64_t v84;
  const char *v85;
  __uint64_t v86;
  int v88;
  __uint64_t v89;
  const char *v90;
  int v91;
  __uint64_t v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  unsigned int Type;
  unsigned int v102;
  int v103;
  __uint64_t v104;
  const char *v105;
  __uint64_t v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  int v110;
  __uint64_t v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  __uint64_t v115;
  const char *v116;
  const char *v117;
  int v118;
  __uint64_t v119;
  const char *v120;
  const char *v121;
  int v122;
  __uint64_t v123;
  const char *v124;
  int v125;
  __uint64_t v126;
  int v127;
  __uint64_t v128;
  const char *v129;
  __uint64_t v130;
  int v131;
  int v132;
  __uint64_t v133;
  const char *v134;
  uint64_t v135;
  int v136;
  __uint64_t v137;
  const char *v138;
  int v139;
  __uint64_t v140;
  const char *v141;
  float v142;
  double v143;
  __uint64_t v144;
  const char *v145;
  float v146;
  __CFArray *Mutable;
  int v148;
  __uint64_t v149;
  const char *v150;
  int v151;
  __uint64_t v152;
  int v153;
  __uint64_t v154;
  const char *v155;
  float v156;
  double v157;
  __uint64_t v158;
  const char *v159;
  float v160;
  int v161;
  __uint64_t v162;
  const char *v163;
  float v164;
  double v165;
  __uint64_t v166;
  const char *v167;
  float v168;
  int v169;
  __uint64_t v170;
  const char *v171;
  int v172;
  __uint64_t v173;
  int v174;
  int v175;
  __uint64_t v176;
  const char *v177;
  const char *v178;
  int v179;
  __uint64_t v180;
  const char *v181;
  const char *v182;
  int v183;
  char *v184;
  int v185;
  __uint64_t v186;
  const char *v187;
  uint64_t v188;
  CMTimeValue v189;
  int v190;
  __uint64_t v191;
  const char *v192;
  _QWORD *v193;
  uint64_t v194;
  int v195;
  __uint64_t v196;
  const char *v197;
  int v198;
  int v199;
  __uint64_t v200;
  const char *v201;
  int v202;
  __uint64_t v203;
  const char *v204;
  const char *v205;
  int v206;
  __uint64_t v207;
  const char *v208;
  const char *v209;
  int v210;
  __uint64_t v211;
  const char *v212;
  int v213;
  __uint64_t v214;
  int v215;
  __uint64_t v216;
  const char *v217;
  int v218;
  __uint64_t v219;
  int v220;
  __uint64_t v221;
  const char *v222;
  int v223;
  __uint64_t v224;
  int v225;
  __uint64_t v226;
  const char *v227;
  int v228;
  __uint64_t v229;
  int v230;
  __uint64_t v231;
  const char *v232;
  int v233;
  __uint64_t v234;
  const char *v235;
  int v236;
  __uint64_t v237;
  int v238;
  int v239;
  __uint64_t v240;
  const char *v241;
  int v242;
  __uint64_t v243;
  const char *v244;
  const char *v245;
  int v246;
  __uint64_t v247;
  const char *v248;
  const char *v249;
  int v250;
  int v251;
  __uint64_t v252;
  const char *v253;
  int v254;
  __uint64_t v255;
  const char *v256;
  const char *v257;
  int v258;
  __uint64_t v259;
  const char *v260;
  __uint64_t v261;
  int v262;
  __uint64_t v263;
  const char *v264;
  __uint64_t v265;
  int v266;
  __uint64_t v267;
  const char *v268;
  const char *v269;
  uint64_t v270;
  const void **v271;
  CFNumberRef v272;
  CFNumberRef v273;
  int v274;
  __uint64_t v275;
  const char *v276;
  int v277;
  __uint64_t v278;
  const char *v279;
  int v280;
  __uint64_t v281;
  int v282;
  __uint64_t v283;
  const char *v284;
  int v285;
  __uint64_t v286;
  const char *v287;
  int v288;
  __uint64_t v289;
  const char *v290;
  int v291;
  __uint64_t v292;
  const char *v293;
  int v294;
  __uint64_t v295;
  int v296;
  _BOOL4 v297;
  int v298;
  __uint64_t v299;
  const char *v300;
  const char *v301;
  int v302;
  __uint64_t v303;
  const char *v304;
  int v305;
  __uint64_t v306;
  int v307;
  __uint64_t v308;
  const char *v309;
  int v310;
  __uint64_t v311;
  int v312;
  __uint64_t v313;
  const char *v314;
  const char *v315;
  int v316;
  __uint64_t v317;
  const char *v318;
  const char *v319;
  int v320;
  __uint64_t v321;
  const char *v322;
  const char *v323;
  int v324;
  __uint64_t v325;
  const char *v326;
  const char *v327;
  int v328;
  __uint64_t v329;
  const char *v330;
  int v331;
  __uint64_t v332;
  int v333;
  __uint64_t v334;
  const char *v335;
  int v336;
  __uint64_t v337;
  int v338;
  __uint64_t v339;
  const char *v340;
  int v341;
  __uint64_t v342;
  int v343;
  __uint64_t v344;
  const char *v345;
  const char *v346;
  int v347;
  __uint64_t v348;
  const char *v349;
  __uint64_t v350;
  int v351;
  __uint64_t v352;
  const char *v353;
  int v354;
  __uint64_t v355;
  int v356;
  __uint64_t v357;
  const char *v358;
  const char *v359;
  int v360;
  __uint64_t v361;
  const char *v362;
  const char *v363;
  int v364;
  __uint64_t v365;
  const char *v366;
  int v367;
  __uint64_t v368;
  int v369;
  __uint64_t v370;
  const char *v371;
  const char *v372;
  int v373;
  __uint64_t v374;
  const char *v375;
  const char *v376;
  int v377;
  __uint64_t v378;
  const char *v379;
  int v380;
  __uint64_t v381;
  int v382;
  __uint64_t v383;
  const char *v384;
  const char *v385;
  int v386;
  __uint64_t v387;
  const char *v388;
  const char *v389;
  int v390;
  int v391;
  __uint64_t v392;
  const char *v393;
  int v394;
  __uint64_t v395;
  const char *v396;
  int v397;
  unsigned int v398;
  const char *v399;
  int v400;
  __uint64_t v401;
  const char *v402;
  const char *v403;
  int v404;
  __uint64_t v405;
  const char *v406;
  int v407;
  __uint64_t v408;
  int v409;
  __uint64_t v410;
  const char *v411;
  int v412;
  __uint64_t v413;
  int v414;
  __uint64_t v415;
  const char *v416;
  char *SearchRange;
  int *v418;
  __CFArray *v419;
  uint64_t Array;
  int v421;
  __uint64_t v422;
  const char *v423;
  __uint64_t v424;
  int v425;
  __uint64_t v426;
  const char *v427;
  const char *v428;
  int v429;
  __uint64_t v430;
  const char *v431;
  int v432;
  __uint64_t v433;
  int v434;
  __uint64_t v435;
  const char *v436;
  const char *v437;
  int v438;
  __uint64_t v439;
  const char *v440;
  const char *v441;
  int v442;
  __uint64_t v443;
  const char *v444;
  const char *v445;
  int v446;
  __uint64_t v447;
  const char *v448;
  const char *v449;
  int v450;
  __uint64_t v451;
  const char *v452;
  int v453;
  __uint64_t v454;
  int v455;
  __uint64_t v456;
  const char *v457;
  int v458;
  __uint64_t v459;
  int v460;
  __uint64_t v461;
  const char *v462;
  int v463;
  __uint64_t v464;
  int v465;
  __uint64_t v466;
  const char *v467;
  const char *v468;
  int v469;
  __uint64_t v470;
  const char *v471;
  int v472;
  __uint64_t v473;
  int v474;
  __uint64_t v475;
  const char *v476;
  __uint64_t v477;
  int v478;
  __uint64_t v479;
  const char *v480;
  int v481;
  __uint64_t v482;
  int v483;
  __uint64_t v484;
  const char *v485;
  int v486;
  __uint64_t v487;
  int v488;
  int v489;
  __uint64_t v490;
  const char *v491;
  int v492;
  __uint64_t v493;
  const char *v494;
  int v495;
  __uint64_t v496;
  int v497;
  __uint64_t v498;
  const char *v499;
  int v500;
  __uint64_t v501;
  CFNumberRef v502;
  CFNumberRef v503;
  int v504;
  __uint64_t v505;
  const char *v506;
  uint64_t v507;
  _DWORD *v508;
  CFNumberRef v509;
  CFNumberRef v510;
  int v511;
  __uint64_t v512;
  const char *v513;
  int v514;
  int v515;
  int v516;
  __uint64_t v517;
  const char *v518;
  int v519;
  __uint64_t v520;
  int *v521;
  CFNumberRef v522;
  int v523;
  __uint64_t v524;
  const char *v525;
  int v526;
  __uint64_t v527;
  int v528;
  __uint64_t v529;
  const char *v530;
  int v531;
  __uint64_t v532;
  int v533;
  __uint64_t v534;
  const char *v535;
  int v536;
  __uint64_t v537;
  int v538;
  __uint64_t v539;
  const char *v540;
  int v541;
  __uint64_t v542;
  int v543;
  __uint64_t v544;
  const char *v545;
  int v546;
  __uint64_t v547;
  int v548;
  __uint64_t v549;
  const char *v550;
  int v551;
  __uint64_t v552;
  int v553;
  __uint64_t v554;
  const char *v555;
  int v556;
  __uint64_t v557;
  int v558;
  __uint64_t v559;
  const char *v560;
  int v561;
  __uint64_t v562;
  int v563;
  __uint64_t v564;
  const char *v565;
  int v566;
  __uint64_t v567;
  int v568;
  int v569;
  __uint64_t v570;
  const char *v571;
  const char *v572;
  __uint64_t v573;
  int v574;
  __uint64_t v575;
  const char *v576;
  int v577;
  __uint64_t v578;
  int v579;
  __uint64_t v580;
  const char *v581;
  int v582;
  __uint64_t v583;
  int v584;
  __uint64_t v585;
  const char *v586;
  int v587;
  __uint64_t v588;
  int v589;
  __uint64_t v590;
  const char *v591;
  int v592;
  __uint64_t v593;
  int v594;
  __uint64_t v595;
  const char *v596;
  int v597;
  __uint64_t v598;
  int v599;
  __uint64_t v600;
  const char *v601;
  int v602;
  __uint64_t v603;
  int v604;
  __uint64_t v605;
  const char *v606;
  int v607;
  __uint64_t v608;
  int v609;
  __uint64_t v610;
  const char *v611;
  int v612;
  __uint64_t v613;
  int v614;
  __uint64_t v615;
  const char *v616;
  int v617;
  __uint64_t v618;
  int v619;
  __uint64_t v620;
  const char *v621;
  int v622;
  __uint64_t v623;
  int v624;
  __uint64_t v625;
  const char *v626;
  int v627;
  __uint64_t v628;
  CFNumberRef v629;
  CFNumberRef v630;
  int v631;
  __uint64_t v632;
  const char *v633;
  unsigned int v634;
  __CFDictionary *TemporalLevelInfoDictionary;
  int v636;
  __uint64_t v637;
  const char *v638;
  int v639;
  __uint64_t v640;
  int v641;
  __uint64_t v642;
  const char *v643;
  int v644;
  __uint64_t v645;
  int v646;
  __uint64_t v647;
  const char *v648;
  const char *v649;
  int v650;
  int v651;
  int v652;
  int v653;
  __uint64_t v654;
  const char *v655;
  int v656;
  __uint64_t v657;
  const char *v658;
  const char *v659;
  int v660;
  __uint64_t v661;
  const char *v662;
  const char *v663;
  int v664;
  __uint64_t v665;
  const char *v666;
  int v667;
  __uint64_t v668;
  const UInt8 *v669;
  const __CFAllocator *v670;
  CFIndex v671;
  int v672;
  __uint64_t v673;
  const char *v674;
  const char *v675;
  int v676;
  __uint64_t v677;
  const char *v678;
  const char *v679;
  int v680;
  __uint64_t v681;
  const char *v682;
  const char *v683;
  int v684;
  __uint64_t v685;
  const char *v686;
  const char *v687;
  int v688;
  __uint64_t v689;
  const char *v690;
  int v691;
  __uint64_t v692;
  int v693;
  __uint64_t v694;
  const char *v695;
  const char *v696;
  int v697;
  __uint64_t v698;
  const char *v699;
  int v700;
  __uint64_t v701;
  int v702;
  __uint64_t v703;
  const char *v704;
  int v705;
  __uint64_t v706;
  int v707;
  __uint64_t v708;
  const char *v709;
  const void *v710;
  __uint64_t v711;
  int v712;
  __uint64_t v713;
  const char *v714;
  int v715;
  __uint64_t v716;
  int v717;
  __uint64_t v718;
  const char *v719;
  int v720;
  __uint64_t v721;
  int v722;
  __uint64_t v723;
  const char *v724;
  int v725;
  __uint64_t v726;
  int v727;
  __uint64_t v728;
  const char *v729;
  int v730;
  __uint64_t v731;
  int v732;
  __uint64_t v733;
  const char *v734;
  int v735;
  __uint64_t v736;
  int v737;
  __uint64_t v738;
  const char *v739;
  const char *v740;
  int v741;
  __uint64_t v742;
  const char *v743;
  int v744;
  __uint64_t v745;
  int v746;
  __uint64_t v747;
  const char *v748;
  int v749;
  __uint64_t v750;
  unint64_t v751;
  CFNumberRef v752;
  int v753;
  __uint64_t v754;
  const char *v755;
  __uint64_t v756;
  int v757;
  __uint64_t v758;
  const char *v759;
  __uint64_t v760;
  int v761;
  __uint64_t v762;
  const char *v763;
  const void *v764;
  __uint64_t v765;
  int v766;
  __uint64_t v767;
  const char *v768;
  const void *v769;
  __uint64_t v770;
  int v771;
  __uint64_t v772;
  const char *v773;
  const void *v774;
  __uint64_t v775;
  __uint64_t v776;
  const char *v777;
  __uint64_t v778;
  const char *v779;
  int *Profile;
  int v781;
  int v782;
  char *v783;
  int v784;
  __uint64_t v785;
  const char *v786;
  int v787;
  __uint64_t v788;
  const char *v789;
  int v790;
  __uint64_t v791;
  const char *v792;
  int v793;
  __uint64_t v794;
  int v795;
  __uint64_t v796;
  const char *v797;
  const char *v798;
  int v799;
  __uint64_t v800;
  const char *v801;
  __uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  char *v805;
  CFNumberRef v806;
  uint64_t v807;
  char *v808;
  CFNumberRef v809;
  int v810;
  __uint64_t v811;
  const char *v812;
  __uint64_t v813;
  const char *v814;
  int v815;
  __uint64_t v816;
  const char *v817;
  const char *v818;
  int v819;
  __uint64_t v820;
  const char *v821;
  const char *v822;
  int v823;
  int v824;
  int v825;
  __uint64_t v826;
  const char *v827;
  int v828;
  __uint64_t v829;
  const char *v830;
  int v831;
  __uint64_t v832;
  const char *v833;
  int v834;
  __uint64_t v835;
  const char *v836;
  int v837;
  int v838;
  int v839;
  CFMutableArrayRef v840;
  __CFArray *v841;
  uint64_t v842;
  const void **v843;
  CFNumberRef v844;
  CFNumberRef v845;
  CFNumberRef v846;
  int v847;
  __uint64_t v848;
  const char *v849;
  int v850;
  __uint64_t v851;
  int v852;
  int v853;
  __uint64_t v854;
  const char *v855;
  int v856;
  int v857;
  __uint64_t v858;
  const char *v859;
  int v860;
  int v861;
  __uint64_t v862;
  const char *v863;
  int v864;
  __uint64_t v865;
  const char *v866;
  int v867;
  __uint64_t v868;
  const void *v869;
  const __CFString **v870;
  const __CFString **v871;
  BOOL v872;
  unint64_t v873;
  CFNumberRef v874;
  uint64_t v875;
  char v876;
  char v877;
  CFNumberRef v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  char *v882;
  unsigned int v883;
  CFNumberRef v884;
  unsigned int v885;
  unsigned int v886;
  unsigned int v887;
  const void **v888;
  unsigned int v889;
  CFNumberRef v890;
  unint64_t v891;
  char *v892;
  CFNumberRef v893;
  unsigned int *PixelPerf;
  int v895;
  __uint64_t v896;
  const char *v897;
  int v898;
  __uint64_t v899;
  const char *v900;
  uint64_t v901;
  _DWORD *v902;
  CFNumberRef v903;
  int v904;
  __uint64_t v905;
  const char *v906;
  int v907;
  const char *v908;
  const char *v909;
  const char *v910;
  const char *v911;
  const char *v912;
  const char *v913;
  const char *v914;
  const char *v915;
  const char *v916;
  const char *v917;
  const char *v918;
  const char *v919;
  const char *v920;
  const char *v921;
  const char *v922;
  const char *v923;
  const char *v924;
  const char *v925;
  const char *v926;
  const char *v927;
  const char *v928;
  const char *v929;
  const char *v930;
  const char *v931;
  const char *v932;
  const char *v933;
  const char *v934;
  const char *v935;
  const char *v936;
  const char *v937;
  const char *v938;
  const char *v939;
  const char *v940;
  const char *v941;
  const char *v942;
  const char *v943;
  const char *v944;
  const char *v945;
  const char *v946;
  const char *v947;
  const char *v948;
  const char *v949;
  const char *v950;
  const char *v951;
  const char *v952;
  const char *v953;
  const char *v954;
  const char *v955;
  const char *v956;
  const char *v957;
  const char *v958;
  const char *v959;
  const char *v960;
  const char *v961;
  const char *v962;
  const char *v963;
  const char *v964;
  const char *v965;
  const char *v966;
  const char *v967;
  const char *v968;
  const char *v969;
  const char *v970;
  const char *v971;
  const char *v972;
  const char *v973;
  const char *v974;
  const char *v975;
  const char *v976;
  const char *v977;
  const char *v978;
  const char *v979;
  const char *v980;
  const char *v981;
  const char *v982;
  const char *v983;
  const char *v984;
  const char *v985;
  const char *v986;
  const char *v987;
  const char *v988;
  const char *v989;
  const char *v990;
  const char *v991;
  const char *v992;
  const char *v993;
  const char *v994;
  const char *v995;
  const char *v996;
  const char *v997;
  const char *v998;
  const char *v999;
  const char *v1000;
  uint64_t v1001;
  const char *v1002;
  const void **v1003;
  uint64_t v1004;
  uint64_t v1005;
  int *v1006;
  int *v1007;
  _BYTE *v1008;
  int *v1009;
  double *v1010;
  CMTime time;
  unsigned int v1012;
  const __CFString *valuePtr;
  unsigned int v1014;
  _BYTE __dst[544];
  void *values[2];
  __int128 v1017;
  void *keys[2];
  __int128 v1019;
  int v1020;
  uint64_t v1021;
  uint64_t v1022;

  v1022 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const void **)DerivedStorage;
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCCopyProperty", 13093, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_22;
  }
  v9 = (int *)(DerivedStorage + 183388);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    v10 = AVE_Log_CheckConsole(0x1Eu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(8);
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty\n", v11, 30, v12);
      v13 = AVE_GetCurrTime();
      v908 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v13, 30, v908);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopyProperty", v11, 30, v12);
    }
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED220]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v17 = AVE_Log_CheckConsole(0x1Eu);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(6);
      v20 = *((unsigned __int8 *)v8 + 183512);
      if (v17)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u\n", v18, 30, v19, v20);
        v21 = AVE_GetCurrTime();
        v909 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v21, 30, v909, *((unsigned __int8 *)v8 + 183512));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThrottleForBackground return %u", v18, 30, v19, v20);
      }
    }
    v27 = *((unsigned __int8 *)v8 + 183512);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1F8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v22 = AVE_Log_CheckConsole(0x1Eu);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      v25 = *((_DWORD *)v8 + 55);
      if (v22)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u\n", v23, 30, v24, v25);
        v26 = AVE_GetCurrTime();
        v910 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v26, 30, v910, *((_DWORD *)v8 + 55));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_SourceFrameCount return %u", v23, 30, v24, v25);
      }
    }
    v33 = (void **)((char *)v8 + 220);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED180]))
  {
    *a4 = CFStringCreateWithCString(0, (const char *)v8 + 184992, 0);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v30 = AVE_Log_CheckConsole(0x1Eu);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(6);
      if (v30)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s\n", v31, 30, v32, (const char *)v8 + 184992);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ProfileLevel return %s");
    }
    goto LABEL_38;
  }
  v37 = v8 + 2330;
  if (CFEqual(a2, CFSTR("EnableWeightedPrediction")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v38 = AVE_Log_CheckConsole(0x1Eu);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(6);
      v41 = *((unsigned __int8 *)v8 + 18743);
      if (v38)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u\n", v39, 30, v40, v41);
        v42 = AVE_GetCurrTime();
        v911 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v42, 30, v911, *((unsigned __int8 *)v8 + 18743));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableWeightedPrediction return %u", v39, 30, v40, v41);
      }
    }
    v27 = *((unsigned __int8 *)v8 + 18743);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEF0]))
  {
    v43 = *((_DWORD *)v8 + 48);
    LODWORD(keys[0]) = v43;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v44 = AVE_Log_CheckConsole(0x1Eu);
      v45 = AVE_GetCurrTime();
      v46 = AVE_Log_GetLevelStr(6);
      if (v44)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d\n", v45, 30, v46, v43);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageBitRate return %d");
    }
    goto LABEL_50;
  }
  v47 = (unsigned __int8 *)v8 + 109701;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF48]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v48 = AVE_Log_CheckConsole(0x1Eu);
      v49 = AVE_GetCurrTime();
      v50 = AVE_Log_GetLevelStr(6);
      v51 = *((_DWORD *)v8 + 27433);
      if (v48)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d\n", v49, 30, v50, v51);
        v52 = AVE_GetCurrTime();
        v912 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v52, 30, v912, *((_DWORD *)v8 + 27433));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ColorPrimaries return %d", v49, 30, v50, v51);
      }
    }
    StringForIntegerCodePoint = (void *)CVColorPrimariesGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27433));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED238]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v53 = AVE_Log_CheckConsole(0x1Eu);
      v54 = AVE_GetCurrTime();
      v55 = AVE_Log_GetLevelStr(6);
      v56 = *((_DWORD *)v8 + 27434);
      if (v53)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d\n", v54, 30, v55, v56);
        v57 = AVE_GetCurrTime();
        v913 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v57, 30, v913, *((_DWORD *)v8 + 27434));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TransferFunction return %d", v54, 30, v55, v56);
      }
    }
    StringForIntegerCodePoint = (void *)CVTransferFunctionGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27434));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED290]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v58 = AVE_Log_CheckConsole(0x1Eu);
      v59 = AVE_GetCurrTime();
      v60 = AVE_Log_GetLevelStr(6);
      v61 = *((_DWORD *)v8 + 27435);
      if (v58)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d\n", v59, 30, v60, v61);
        v62 = AVE_GetCurrTime();
        v914 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v62, 30, v914, *((_DWORD *)v8 + 27435));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_YCbCrMatrix return %d", v59, 30, v60, v61);
      }
    }
    StringForIntegerCodePoint = (void *)CVYCbCrMatrixGetStringForIntegerCodePoint(*((_DWORD *)v8 + 27435));
    goto LABEL_32;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED140]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v63 = AVE_Log_CheckConsole(0x1Eu);
      v64 = AVE_GetCurrTime();
      v65 = AVE_Log_GetLevelStr(6);
      if (v63)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d\n", v64, 30, v65, *v47, *((_DWORD *)v8 + 27426), *((_DWORD *)v8 + 27427), *((_DWORD *)v8 + 27428));
        v64 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PixelAspectRatio return %d %d %d %d", v64);
    }
    if (*v47)
    {
      v70 = (void *)*MEMORY[0x1E0CA8E70];
      keys[0] = *(void **)MEMORY[0x1E0CA8E60];
      keys[1] = v70;
      LODWORD(valuePtr) = 0;
      v1014 = 0;
      AVE_getVuiAspectRatio((int *)&valuePtr, (int *)&v1014, (uint64_t)v8 + 109700);
      v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      values[1] = CFNumberCreate(v71, kCFNumberSInt32Type, &v1014);
      *a4 = CFDictionaryCreate(v71, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (values[0])
      {
        CFRelease(values[0]);
        values[0] = 0;
      }
      if (values[1])
        CFRelease(values[1]);
      goto LABEL_38;
    }
    goto LABEL_1334;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEB0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v66 = AVE_Log_CheckConsole(0x1Eu);
      v67 = AVE_GetCurrTime();
      v68 = AVE_Log_GetLevelStr(6);
      if (*((_BYTE *)v8 + 216))
        v69 = "true";
      else
        v69 = "false";
      if (v66)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s\n", v67, 30, v68, v69);
        v67 = AVE_GetCurrTime();
        v68 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 216))
          v69 = "true";
        else
          v69 = "false";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowFrameReordering return %s", v67, 30, v68, v69);
    }
    v27 = *((unsigned __int8 *)v8 + 216);
    goto LABEL_19;
  }
  v72 = (int *)v8 + 4581;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEC8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v73 = AVE_Log_CheckConsole(0x1Eu);
      v74 = AVE_GetCurrTime();
      v75 = AVE_Log_GetLevelStr(6);
      if (*((_DWORD *)v8 + 507) == 1)
        v76 = "FALSE";
      else
        v76 = "TRUE";
      if (v73)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s\n", v74, 30, v75, v76);
        v74 = AVE_GetCurrTime();
        v75 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 507) == 1)
          v76 = "FALSE";
        else
          v76 = "TRUE";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AllowTemporalCompression return %s", v74, 30, v75, v76);
    }
    if (*((_DWORD *)v8 + 507) != 1 || *((_DWORD *)v8 + 4610) != 1)
      goto LABEL_20;
    goto LABEL_103;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0A8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v77 = AVE_Log_CheckConsole(0x1Eu);
      v78 = AVE_GetCurrTime();
      v79 = AVE_Log_GetLevelStr(6);
      v80 = *((_DWORD *)v8 + 507);
      if (v77)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u\n", v78, 30, v79, v80);
        v81 = AVE_GetCurrTime();
        v915 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v81, 30, v915, *((_DWORD *)v8 + 507));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameInterval return %u", v78, 30, v79, v80);
      }
    }
    v33 = (void **)((char *)v8 + 2028);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("StrictKeyFrameInterval")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v88 = AVE_Log_CheckConsole(0x1Eu);
      v89 = AVE_GetCurrTime();
      v90 = AVE_Log_GetLevelStr(6);
      v91 = *((_DWORD *)v8 + 508);
      if (v88)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u\n", v89, 30, v90, v91);
        v92 = AVE_GetCurrTime();
        v917 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v92, 30, v917, *((_DWORD *)v8 + 508));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameInterval return %u", v89, 30, v90, v91);
      }
    }
    v33 = (void **)(v8 + 254);
    goto LABEL_29;
  }
  v1010 = (double *)(v8 + 23141);
  v93 = (int *)v8 + 25763;
  if (CFEqual(a2, CFSTR("ReconstructedPixelBufferAttributes")))
  {
    valuePtr = 0;
    v94 = *((_DWORD *)v8 + 46241);
    if (!v94)
      v94 = *((_DWORD *)v8 + 470);
    v95 = *((_DWORD *)v8 + 46242);
    if (!v95)
      v95 = *((_DWORD *)v8 + 471);
    v96 = v94 + 31;
    if (v94 < -31)
      v96 = v94 + 62;
    v1014 = v96 & 0xFFFFFFE0;
    v97 = v95 + 31;
    if (v95 < -31)
      v97 = v95 + 62;
    v1012 = v97 & 0xFFFFFFE0;
    *(_OWORD *)values = xmmword_1B56257D0;
    v1017 = unk_1B56257E0;
    v98 = AVE_PixelFmt_FindByType(*((_DWORD *)v8 + 46366));
    if (v98)
    {
      v99 = *(_OWORD *)v98;
      v100 = *((_OWORD *)v98 + 1);
      v1021 = *(_QWORD *)(v98 + 36);
      *(_OWORD *)keys = v99;
      v1019 = v100;
      v1020 = 0;
      DWORD2(v1019) = 3;
      HIDWORD(keys[0]) = *((_DWORD *)v8 + 25775) + 8;
      Type = AVE_PixelFmt_FindType(keys);
      if (Type)
      {
        v102 = Type;
        AVE_AlignDimension(1, (signed int *)&v1014, (signed int *)&v1012);
        if (!AVE_PixelBufAttr_CreateDict(*((unsigned int *)v8 + 45883), *((unsigned int *)v8 + 45882), 30, 1, v94, v95, v1014, v1012, v102, 1, (int *)values, (__CFDictionary **)&valuePtr)&& valuePtr)
        {
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v103 = AVE_Log_CheckConsole(0x1Eu);
            v104 = AVE_GetCurrTime();
            v105 = AVE_Log_GetLevelStr(6);
            if (v103)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes\n", v104, 30, v105);
              v106 = AVE_GetCurrTime();
              v918 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v106, 30, v918);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ReconstructedPixelBufferAttributes", v104, 30, v105);
            }
          }
          v28 = 0;
          v82 = valuePtr;
          goto LABEL_105;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v127 = AVE_Log_CheckConsole(3u);
          v128 = AVE_GetCurrTime();
          v129 = AVE_Log_GetLevelStr(4);
          if (v127)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p\n", v128, 3, v129, "AVE_HEVCCopyProperty", 13308, "rc == noErr && pDict != __null", v8, *((_DWORD *)v8 + 45885), *((_DWORD *)v8 + 46366), v102, v94, v95, v1014, v1012, valuePtr);
            v130 = AVE_GetCurrTime();
            v922 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v130, 3, v922, "AVE_HEVCCopyProperty", 13308, "rc == noErr && pDict != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create recon buffer dictionary %p %d 0x%x 0x%x %d %d %d %d %p", v128, 3, v129, "AVE_HEVCCopyProperty", 13308, "rc == noErr && pDict != __null");
          }
        }
        goto LABEL_166;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v118 = AVE_Log_CheckConsole(3u);
        v119 = AVE_GetCurrTime();
        v120 = AVE_Log_GetLevelStr(4);
        if (!v118)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x", v119, 3);
          goto LABEL_166;
        }
        printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x\n", v119, 3, v120, "AVE_HEVCCopyProperty", 13293, "type != 0", v8, *((_DWORD *)v8 + 45885), *((_DWORD *)v8 + 46366));
        v115 = AVE_GetCurrTime();
        v121 = AVE_Log_GetLevelStr(4);
        v1004 = *((unsigned int *)v8 + 45885);
        v1005 = *((unsigned int *)v8 + 46366);
        v1002 = "type != 0";
        v1003 = v8;
        v1001 = 13293;
        v920 = v121;
        v117 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format type %p %d 0x%x";
LABEL_147:
        syslog(3, v117, v115, 3, v920, "AVE_HEVCCopyProperty", v1001, v1002, v1003, v1004, v1005);
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      v112 = AVE_Log_CheckConsole(3u);
      v113 = AVE_GetCurrTime();
      v114 = AVE_Log_GetLevelStr(4);
      if (!v112)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v113, 3);
        goto LABEL_166;
      }
      printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v113, 3, v114, "AVE_HEVCCopyProperty", 13284, "pPixelFmt != __null", v8, *((_DWORD *)v8 + 45885), *((_DWORD *)v8 + 46366));
      v115 = AVE_GetCurrTime();
      v116 = AVE_Log_GetLevelStr(4);
      v1004 = *((unsigned int *)v8 + 45885);
      v1005 = *((unsigned int *)v8 + 46366);
      v1002 = "pPixelFmt != __null";
      v1003 = v8;
      v1001 = 13284;
      v920 = v116;
      v117 = "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x";
      goto LABEL_147;
    }
LABEL_166:
    v28 = 4294954394;
    goto LABEL_106;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFD0]))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v107 = AVE_Log_CheckConsole(0x1Eu);
      v108 = AVE_GetCurrTime();
      v109 = AVE_Log_GetLevelStr(6);
      v110 = *((_DWORD *)v8 + 57);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u\n", v108, 30, v109, v110);
        v111 = AVE_GetCurrTime();
        v919 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v111, 30, v919, *((_DWORD *)v8 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedFrameRate return %u", v108, 30, v109, v110);
      }
    }
    v131 = *((_DWORD *)v8 + 57);
LABEL_157:
    if (v131 < 1)
    {
LABEL_50:
      v33 = keys;
LABEL_29:
      v34 = a3;
LABEL_30:
      v35 = kCFNumberSInt32Type;
LABEL_31:
      StringForIntegerCodePoint = CFNumberCreate(v34, v35, v33);
LABEL_32:
      v28 = 0;
      *a4 = StringForIntegerCodePoint;
      goto LABEL_106;
    }
LABEL_158:
    LODWORD(keys[0]) = v131;
    goto LABEL_50;
  }
  v1009 = (int *)v8 + 4725;
  if (CFEqual(a2, CFSTR("MaximumRealTimeFrameRate")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v122 = AVE_Log_CheckConsole(0x1Eu);
      v123 = AVE_GetCurrTime();
      v124 = AVE_Log_GetLevelStr(6);
      v125 = *((_DWORD *)v8 + 5084);
      if (v122)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d\n", v123, 30, v124, v125);
        v126 = AVE_GetCurrTime();
        v921 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v126, 30, v921, *((_DWORD *)v8 + 5084));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaximumRealTimeFrameRate return %d", v123, 30, v124, v125);
      }
    }
    v135 = 20336;
LABEL_171:
    v33 = (void **)((char *)v8 + v135);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF58]))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v132 = AVE_Log_CheckConsole(0x1Eu);
      v133 = AVE_GetCurrTime();
      v134 = AVE_Log_GetLevelStr(6);
      if (v132)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d\n", v133, 30, v134, *((_DWORD *)v8 + 48));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConstantBitRate return %d");
    }
LABEL_182:
    v131 = *((_DWORD *)v8 + 48);
    goto LABEL_157;
  }
  if (CFEqual(a2, CFSTR("VariableBitRate")))
  {
    LODWORD(keys[0]) = 0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v136 = AVE_Log_CheckConsole(0x1Eu);
      v137 = AVE_GetCurrTime();
      v138 = AVE_Log_GetLevelStr(6);
      if (v136)
      {
        printf("%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d\n", v137, 30, v138, *((_DWORD *)v8 + 48));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: asked for AVE_kVTCompressionPropertyKey_VariableBitRate return %d");
    }
    goto LABEL_182;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFC8]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v139 = AVE_Log_CheckConsole(0x1Eu);
      v140 = AVE_GetCurrTime();
      v141 = AVE_Log_GetLevelStr(6);
      v142 = *((double *)v8 + 23155);
      v143 = v142;
      if (v139)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f\n", v140, 30, v141, v143);
        v144 = AVE_GetCurrTime();
        v145 = AVE_Log_GetLevelStr(6);
        v146 = *((double *)v8 + 23155);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v144, 30, v145, v146);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ExpectedDuration return %f", v140, 30, v141, v143);
      }
    }
    v33 = (void **)(v8 + 23155);
LABEL_189:
    v34 = a3;
    v35 = kCFNumberDoubleType;
    goto LABEL_31;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF78]))
  {
    Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    AVE_DRL_Make((int *)v8 + 444, Mutable);
LABEL_185:
    v28 = 0;
LABEL_186:
    *a4 = Mutable;
    goto LABEL_106;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF68]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v148 = AVE_Log_CheckConsole(0x1Eu);
      v149 = AVE_GetCurrTime();
      v150 = AVE_Log_GetLevelStr(6);
      v151 = *((_DWORD *)v8 + 46312);
      if (v148)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u\n", v149, 30, v150, v151);
        v152 = AVE_GetCurrTime();
        v923 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v152, 30, v923, *((_DWORD *)v8 + 46312));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_ConvergenceDurationForAverageDataRate return %u", v149, 30, v150, v151);
      }
    }
    v33 = (void **)(v8 + 23156);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0B0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v153 = AVE_Log_CheckConsole(0x1Eu);
      v154 = AVE_GetCurrTime();
      v155 = AVE_Log_GetLevelStr(6);
      v156 = *((double *)v8 + 255);
      v157 = v156;
      if (v153)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f\n", v154, 30, v155, v157);
        v158 = AVE_GetCurrTime();
        v159 = AVE_Log_GetLevelStr(6);
        v160 = *((double *)v8 + 255);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v158, 30, v159, v160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration return %f", v154, 30, v155, v157);
      }
    }
    v33 = (void **)(v8 + 255);
    goto LABEL_189;
  }
  if (CFEqual(a2, CFSTR("StrictKeyFrameIntervalDuration")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v161 = AVE_Log_CheckConsole(0x1Eu);
      v162 = AVE_GetCurrTime();
      v163 = AVE_Log_GetLevelStr(6);
      v164 = *((double *)v8 + 256);
      v165 = v164;
      if (v161)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f\n", v162, 30, v163, v165);
        v166 = AVE_GetCurrTime();
        v167 = AVE_Log_GetLevelStr(6);
        v168 = *((double *)v8 + 256);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v166, 30, v167, v168);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_StrictKeyFrameIntervalDuration return %f", v162, 30, v163, v165);
      }
    }
    v33 = (void **)(v8 + 256);
    goto LABEL_189;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED248]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v169 = AVE_Log_CheckConsole(0x1Eu);
      v170 = AVE_GetCurrTime();
      v171 = AVE_Log_GetLevelStr(6);
      v172 = *((_DWORD *)v8 + 73);
      if (v169)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u\n", v170, 30, v171, v172);
        v173 = AVE_GetCurrTime();
        v924 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v173, 30, v924, *((_DWORD *)v8 + 73));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Usage return %u", v170, 30, v171, v172);
      }
    }
    v33 = (void **)((char *)v8 + 292);
    goto LABEL_29;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0E0]))
  {
    v174 = *((_DWORD *)v8 + 46296);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v175 = AVE_Log_CheckConsole(0x1Eu);
      v176 = AVE_GetCurrTime();
      v177 = AVE_Log_GetLevelStr(6);
      if (v174 <= 0)
        v178 = "false";
      else
        v178 = "true";
      if (v175)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s\n", v176, 30, v177, v178);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesAfterEnd return %s");
    }
LABEL_236:
    v28 = 0;
    v29 = (const __CFString **)MEMORY[0x1E0C9AE50];
    if (v174 <= 0)
      v29 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_104;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0E8]))
  {
    v174 = *((_DWORD *)v8 + 46297);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v179 = AVE_Log_CheckConsole(0x1Eu);
      v180 = AVE_GetCurrTime();
      v181 = AVE_Log_GetLevelStr(6);
      if (v174 <= 0)
        v182 = "false";
      else
        v182 = "true";
      if (v179)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s\n", v180, 30, v181, v182);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MoreFramesBeforeStart return %s");
    }
    goto LABEL_236;
  }
  if (CFEqual(a2, CFSTR("RecommendedParallelizationLimit")))
  {
    v183 = *((_DWORD *)AVE_DW_Get() + 303);
    v184 = AVE_DevCap_Find(*((_DWORD *)v8 + 45884));
    if (!v183)
      v183 = *(_DWORD *)(*((_QWORD *)v184 + 2) + 4);
    LODWORD(keys[0]) = v183;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v185 = AVE_Log_CheckConsole(0x1Eu);
      v186 = AVE_GetCurrTime();
      v187 = AVE_Log_GetLevelStr(6);
      if (v185)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d\n", v186, 30, v187, v183);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RecommendedParallelizationLimit return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, CFSTR("RecommendedParallelizedSubdivisionMinimumDuration")))
  {
    v188 = *((_QWORD *)AVE_DW_Get() + 153);
    if (v188)
      v189 = 1000 * v188;
    else
      v189 = 30000;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v190 = AVE_Log_CheckConsole(0x1Eu);
      v191 = AVE_GetCurrTime();
      v192 = AVE_Log_GetLevelStr(6);
      if (v190)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld\n", v191, 30, v192, v189, 1000, 1, 0);
        v191 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumDuration return value: %lld, timescale: %d, flags: 0x%x, epoch: %lld", v191);
    }
    time.value = v189;
    *(_QWORD *)&time.timescale = 0x1000003E8;
    time.epoch = 0;
    StringForIntegerCodePoint = CMTimeCopyAsDictionary(&time, a3);
    goto LABEL_32;
  }
  if (CFEqual(a2, CFSTR("RecommendedParallelizedSubdivisionMinimumFrameCount")))
  {
    v193 = AVE_DW_Get();
    if (v193[152])
      v194 = v193[152];
    else
      v194 = 900;
    keys[0] = (void *)v194;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v195 = AVE_Log_CheckConsole(0x1Eu);
      v196 = AVE_GetCurrTime();
      v197 = AVE_Log_GetLevelStr(6);
      if (v195)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld\n", v196, 30, v197, v194);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RecommendedParallelizedSubdivisionMinimumFrameCount return %lld");
    }
LABEL_264:
    v33 = keys;
    v34 = a3;
    v35 = kCFNumberSInt64Type;
    goto LABEL_31;
  }
  if (CFEqual(a2, CFSTR("BPictures")))
  {
    v198 = *((_DWORD *)v8 + 45850);
    if (v198 < 0)
      v198 = *((_DWORD *)v8 + 486);
    LODWORD(keys[0]) = v198;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v199 = AVE_Log_CheckConsole(0x1Eu);
      v200 = AVE_GetCurrTime();
      v201 = AVE_Log_GetLevelStr(6);
      if (v199)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d\n", v200, 30, v201, v198);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BPictures return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, CFSTR("EnableAdaptB")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v202 = AVE_Log_CheckConsole(0x1Eu);
      v203 = AVE_GetCurrTime();
      v204 = AVE_Log_GetLevelStr(6);
      if (((_BYTE)v8[253] & 4) != 0)
        v205 = "true";
      else
        v205 = "false";
      if (v202)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s\n", v203, 30, v204, v205);
        v203 = AVE_GetCurrTime();
        v204 = AVE_Log_GetLevelStr(6);
        if (((_DWORD)v8[253] & 4) != 0)
          v205 = "true";
        else
          v205 = "false";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableAdaptB return %s", v203, 30, v204, v205);
    }
    if (((_BYTE)v8[253] & 4) != 0)
      goto LABEL_20;
    goto LABEL_103;
  }
  if (CFEqual(a2, CFSTR("EnableCompleteGOP")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v206 = AVE_Log_CheckConsole(0x1Eu);
      v207 = AVE_GetCurrTime();
      v208 = AVE_Log_GetLevelStr(6);
      if (((_BYTE)v8[253] & 2) != 0)
        v209 = "true";
      else
        v209 = "false";
      if (v206)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s\n", v207, 30, v208, v209);
        v207 = AVE_GetCurrTime();
        v208 = AVE_Log_GetLevelStr(6);
        if (((_DWORD)v8[253] & 2) != 0)
          v209 = "true";
        else
          v209 = "false";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableCompleteGOP return %s", v207, 30, v208, v209);
    }
    if (((_BYTE)v8[253] & 2) != 0)
      goto LABEL_20;
    goto LABEL_103;
  }
  if (CFEqual(a2, CFSTR("InitialQPI")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v210 = AVE_Log_CheckConsole(0x1Eu);
      v211 = AVE_GetCurrTime();
      v212 = AVE_Log_GetLevelStr(6);
      v213 = *((_DWORD *)v8 + 456);
      if (v210)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d\n", v211, 30, v212, v213);
        v214 = AVE_GetCurrTime();
        v925 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v214, 30, v925, *((_DWORD *)v8 + 456));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPI return %d", v211, 30, v212, v213);
      }
    }
    v33 = (void **)(v8 + 228);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("InitialQPP")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v215 = AVE_Log_CheckConsole(0x1Eu);
      v216 = AVE_GetCurrTime();
      v217 = AVE_Log_GetLevelStr(6);
      v218 = *((_DWORD *)v8 + 457);
      if (v215)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d\n", v216, 30, v217, v218);
        v219 = AVE_GetCurrTime();
        v926 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v219, 30, v926, *((_DWORD *)v8 + 457));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQPP return %d", v216, 30, v217, v218);
      }
    }
    v33 = (void **)((char *)v8 + 1828);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("InitialQPB")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v220 = AVE_Log_CheckConsole(0x1Eu);
      v221 = AVE_GetCurrTime();
      v222 = AVE_Log_GetLevelStr(6);
      v223 = *((_DWORD *)v8 + 458);
      if (v220)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d\n", v221, 30, v222, v223);
        v224 = AVE_GetCurrTime();
        v927 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v224, 30, v927, *((_DWORD *)v8 + 458));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_InitialQP return %d", v221, 30, v222, v223);
      }
    }
    v33 = (void **)(v8 + 229);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("EdgeReplication")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v225 = AVE_Log_CheckConsole(0x1Eu);
      v226 = AVE_GetCurrTime();
      v227 = AVE_Log_GetLevelStr(6);
      v228 = *((_DWORD *)v8 + 4717);
      if (v225)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d\n", v226, 30, v227, v228);
        v229 = AVE_GetCurrTime();
        v928 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v229, 30, v928, *((_DWORD *)v8 + 4717));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EdgeReplication return %d", v226, 30, v227, v228);
      }
    }
    v135 = 18868;
    goto LABEL_171;
  }
  v1008 = (char *)v8 + 17881;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED110]))
  {
    LODWORD(keys[0]) = *((_DWORD *)v8 + 4515);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v230 = AVE_Log_CheckConsole(0x1Eu);
      v231 = AVE_GetCurrTime();
      v232 = AVE_Log_GetLevelStr(6);
      if (v230)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d\n", v231, 30, v232, *((_DWORD *)v8 + 4515));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_NumberOfSlices return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED178]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v233 = AVE_Log_CheckConsole(0x1Eu);
      v234 = AVE_GetCurrTime();
      v235 = AVE_Log_GetLevelStr(6);
      v236 = *((_DWORD *)v8 + 468);
      if (v233)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d\n", v234, 30, v235, v236);
        v237 = AVE_GetCurrTime();
        v929 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v237, 30, v929, *((_DWORD *)v8 + 468));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Priority return %d", v234, 30, v235, v236);
      }
    }
    v33 = (void **)(v8 + 234);
    goto LABEL_29;
  }
  v1007 = (int *)v8 + 34617;
  if (CFEqual(a2, CFSTR("DeblockingFiltering")))
  {
    v238 = *((unsigned __int8 *)v8 + 138562);
    LODWORD(keys[0]) = v238;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v239 = AVE_Log_CheckConsole(0x1Eu);
      v240 = AVE_GetCurrTime();
      v241 = AVE_Log_GetLevelStr(6);
      if (v239)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d\n", v240, 30, v241, v238);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DeblockingFiltering return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, CFSTR("DebugMetadataSEI")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v242 = AVE_Log_CheckConsole(0x1Eu);
      v243 = AVE_GetCurrTime();
      v244 = AVE_Log_GetLevelStr(6);
      if (*((_BYTE *)v8 + 183514))
        v245 = "TRUE";
      else
        v245 = "FALSE";
      if (v242)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s\n", v243, 30, v244, v245);
        v243 = AVE_GetCurrTime();
        v244 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 183514))
          v245 = "TRUE";
        else
          v245 = "FALSE";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEI return %s", v243, 30, v244, v245);
    }
    v27 = *((unsigned __int8 *)v8 + 183514);
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("DebugMetadataSEIuseEPB")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v246 = AVE_Log_CheckConsole(0x1Eu);
      v247 = AVE_GetCurrTime();
      v248 = AVE_Log_GetLevelStr(6);
      if (*((_BYTE *)v8 + 183515))
        v249 = "TRUE";
      else
        v249 = "FALSE";
      if (v246)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s\n", v247, 30, v248, v249);
        v247 = AVE_GetCurrTime();
        v248 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 183515))
          v249 = "TRUE";
        else
          v249 = "FALSE";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DebugMetadataSEIuseEPB return %s", v247, 30, v248, v249);
    }
    v27 = *((unsigned __int8 *)v8 + 183515);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED068]))
  {
    v250 = *((_DWORD *)v8 + 5038);
    LODWORD(keys[0]) = v250;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v251 = AVE_Log_CheckConsole(0x1Eu);
      v252 = AVE_GetCurrTime();
      v253 = AVE_Log_GetLevelStr(6);
      if (v251)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d\n", v252, 30, v253, v250);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputQueueMaxCount return %d");
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, CFSTR("EnableUserQPForFacetime")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v254 = AVE_Log_CheckConsole(0x1Eu);
      v255 = AVE_GetCurrTime();
      v256 = AVE_Log_GetLevelStr(6);
      if (*((_BYTE *)v8 + 1864))
        v257 = "true";
      else
        v257 = "false";
      if (v254)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s\n", v255, 30, v256, v257);
        v255 = AVE_GetCurrTime();
        v256 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 1864))
          v257 = "true";
        else
          v257 = "false";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserQPForFacetime return %s", v255, 30, v256, v257);
    }
    v27 = *((unsigned __int8 *)v8 + 1864);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED250]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v258 = AVE_Log_CheckConsole(0x1Eu);
      v259 = AVE_GetCurrTime();
      v260 = AVE_Log_GetLevelStr(6);
      if (v258)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime\n", v259, 30, v260);
        v261 = AVE_GetCurrTime();
        v930 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v261, 30, v930);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserDPBFramesForFaceTime", v259, 30, v260);
      }
    }
    Mutable = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5047), MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (*((int *)v8 + 5047) >= 1)
      {
        v270 = 0;
        v271 = v8 + 2524;
        do
        {
          v272 = CFNumberCreate(0, kCFNumberSInt32Type, v271);
          v273 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v271 + 68);
          CFArrayAppendValue(Mutable, v272);
          CFArrayAppendValue(Mutable, v273);
          if (v272)
            CFRelease(v272);
          if (v273)
            CFRelease(v273);
          ++v270;
          v271 = (const void **)((char *)v271 + 4);
        }
        while (v270 < *((int *)v8 + 5047));
      }
      goto LABEL_185;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 4))
    {
      v274 = AVE_Log_CheckConsole(0x1Eu);
      v275 = AVE_GetCurrTime();
      v276 = AVE_Log_GetLevelStr(4);
      if (v274)
      {
        printf("%lld %d AVE %s: FIG: CFArrayCreateMutable failed\n", v275, 30, v276);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed");
    }
LABEL_1407:
    v28 = 4294954392;
    goto LABEL_186;
  }
  if (CFEqual(a2, CFSTR("DPBRequirements")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v262 = AVE_Log_CheckConsole(0x1Eu);
      v263 = AVE_GetCurrTime();
      v264 = AVE_Log_GetLevelStr(6);
      if (v262)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements\n", v263, 30, v264);
        v265 = AVE_GetCurrTime();
        v931 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v265, 30, v931);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_DPBRequirements", v263, 30, v264);
      }
    }
    Mutable = CFArrayCreateMutable(a3, (int)(*((_DWORD *)v8 + 46286) << (*((_DWORD *)v8 + 46285) != 0)), MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      LODWORD(v803) = *((_DWORD *)v8 + 46286);
      if ((int)v803 >= 1)
      {
        v804 = 0;
        v805 = (char *)(v8 + 2524);
        do
        {
          v806 = CFNumberCreate(0, kCFNumberSInt32Type, v805);
          CFArrayAppendValue(Mutable, v806);
          if (v806)
            CFRelease(v806);
          ++v804;
          v803 = *((int *)v8 + 46286);
          v805 += 4;
        }
        while (v804 < v803);
      }
      v28 = 0;
      if (!*((_DWORD *)v8 + 46285) || (int)v803 < 1)
        goto LABEL_186;
      v807 = 0;
      v808 = (char *)v8 + 20260;
      do
      {
        v809 = CFNumberCreate(0, kCFNumberSInt32Type, v808);
        CFArrayAppendValue(Mutable, v809);
        if (v809)
          CFRelease(v809);
        ++v807;
        v808 += 4;
      }
      while (v807 < *((int *)v8 + 46286));
      goto LABEL_185;
    }
    if (AVE_Log_CheckLevel(0x1Eu, 4))
    {
      v810 = AVE_Log_CheckConsole(0x1Eu);
      v811 = AVE_GetCurrTime();
      v812 = AVE_Log_GetLevelStr(4);
      if (v810)
      {
        printf("%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed\n", v811, 30, v812);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: kVTCompressionPropertyKey_DPBRequirements CFArrayCreateMutable failed");
    }
    goto LABEL_1407;
  }
  if (CFEqual(a2, CFSTR("EnableUserRefForFacetime")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v266 = AVE_Log_CheckConsole(0x1Eu);
      v267 = AVE_GetCurrTime();
      v268 = AVE_Log_GetLevelStr(6);
      if (*((_BYTE *)v8 + 20328))
        v269 = "true";
      else
        v269 = "false";
      if (v266)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s\n", v267, 30, v268, v269);
        v267 = AVE_GetCurrTime();
        v268 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 20328))
          v269 = "true";
        else
          v269 = "false";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableUserRefForFacetime return %s", v267, 30, v268, v269);
    }
    v27 = *((unsigned __int8 *)v8 + 20328);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1A0]))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v277 = AVE_Log_CheckConsole(0x1Eu);
      v278 = AVE_GetCurrTime();
      v279 = AVE_Log_GetLevelStr(6);
      v280 = *((_DWORD *)v8 + 66);
      if (v277)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d\n", v278, 30, v279, v280);
        v281 = AVE_GetCurrTime();
        v932 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v281, 30, v932, *((_DWORD *)v8 + 66));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RealTime return %d", v278, 30, v279, v280);
      }
    }
    v27 = *((_DWORD *)v8 + 66);
    if (v27 < 0)
      goto LABEL_38;
LABEL_19:
    if (v27)
    {
LABEL_20:
      v28 = 0;
      v29 = (const __CFString **)MEMORY[0x1E0C9AE50];
LABEL_104:
      v82 = *v29;
LABEL_105:
      *a4 = v82;
      goto LABEL_106;
    }
LABEL_103:
    v28 = 0;
    v29 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_104;
  }
  if (CFEqual(a2, CFSTR("EnableRCDriver")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v282 = AVE_Log_CheckConsole(0x1Eu);
      v283 = AVE_GetCurrTime();
      v284 = AVE_Log_GetLevelStr(6);
      if (v282)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d\n", v283, 30, v284, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCDriver return %d");
    }
LABEL_1079:
    v33 = (void **)((char *)v8 + 196);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("EnableRCFW")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v285 = AVE_Log_CheckConsole(0x1Eu);
      v286 = AVE_GetCurrTime();
      v287 = AVE_Log_GetLevelStr(6);
      if (v285)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d\n", v286, 30, v287, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableRCFW return %d");
    }
    goto LABEL_1079;
  }
  if (CFEqual(a2, CFSTR("RCMode")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v288 = AVE_Log_CheckConsole(0x1Eu);
      v289 = AVE_GetCurrTime();
      v290 = AVE_Log_GetLevelStr(6);
      if (v288)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d\n", v289, 30, v290, *((_DWORD *)v8 + 49));
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RCMode return %d");
    }
    goto LABEL_1079;
  }
  if (CFEqual(a2, CFSTR("SpatialAdaptiveQPLevel")))
  {
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v291 = AVE_Log_CheckConsole(0x1Eu);
      v292 = AVE_GetCurrTime();
      v293 = AVE_Log_GetLevelStr(6);
      v294 = *((_DWORD *)v8 + 503);
      if (v291)
      {
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d\n", v292, 30, v293, v294);
        v295 = AVE_GetCurrTime();
        v933 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v295, 30, v933, *((_DWORD *)v8 + 503));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SpatialAdaptiveQPLevel return %d", v292, 30, v293, v294);
      }
    }
    v33 = (void **)((char *)v8 + 2012);
    goto LABEL_29;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF98]))
  {
    if (CFEqual(a2, CFSTR("EnableQPMod")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v302 = AVE_Log_CheckConsole(0x1Eu);
        v303 = AVE_GetCurrTime();
        v304 = AVE_Log_GetLevelStr(6);
        v305 = *((unsigned __int8 *)v8 + 244);
        if (v302)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d\n", v303, 30, v304, v305);
          v306 = AVE_GetCurrTime();
          v934 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v306, 30, v934, *((unsigned __int8 *)v8 + 244));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPMod return %d", v303, 30, v304, v305);
        }
      }
      v27 = *((unsigned __int8 *)v8 + 244);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableLambdaMod")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v307 = AVE_Log_CheckConsole(0x1Eu);
        v308 = AVE_GetCurrTime();
        v309 = AVE_Log_GetLevelStr(6);
        v310 = *((unsigned __int8 *)v8 + 246);
        if (v307)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d\n", v308, 30, v309, v310);
          v311 = AVE_GetCurrTime();
          v935 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v311, 30, v935, *((unsigned __int8 *)v8 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLambdaMod return %d", v308, 30, v309, v310);
        }
      }
      v27 = *((unsigned __int8 *)v8 + 246);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableVarianceQPMod")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v312 = AVE_Log_CheckConsole(0x1Eu);
        v313 = AVE_GetCurrTime();
        v314 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 247))
          v315 = "TRUE";
        else
          v315 = "FALSE";
        if (v312)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s\n", v313, 30, v314, v315);
          v313 = AVE_GetCurrTime();
          v314 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 247))
            v315 = "TRUE";
          else
            v315 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableVarianceQPMod return %s", v313, 30, v314, v315);
      }
      v27 = *((unsigned __int8 *)v8 + 247);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableLowVarianceQPMod")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v316 = AVE_Log_CheckConsole(0x1Eu);
        v317 = AVE_GetCurrTime();
        v318 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 248))
          v319 = "TRUE";
        else
          v319 = "FALSE";
        if (v316)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s\n", v317, 30, v318, v319);
          v317 = AVE_GetCurrTime();
          v318 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 248))
            v319 = "TRUE";
          else
            v319 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableLowVarianceQPMod return %s", v317, 30, v318, v319);
      }
      v27 = *((unsigned __int8 *)v8 + 248);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableHevcDeRingingQPMod")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v320 = AVE_Log_CheckConsole(0x1Eu);
        v321 = AVE_GetCurrTime();
        v322 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 249))
          v323 = "TRUE";
        else
          v323 = "FALSE";
        if (v320)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s\n", v321, 30, v322, v323);
          v321 = AVE_GetCurrTime();
          v322 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 249))
            v323 = "TRUE";
          else
            v323 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHevcDeRingingQPMod return %s", v321, 30, v322, v323);
      }
      v27 = *((unsigned __int8 *)v8 + 249);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("UseCAVLCBits")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v324 = AVE_Log_CheckConsole(0x1Eu);
        v325 = AVE_GetCurrTime();
        v326 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 253))
          v327 = "TRUE";
        else
          v327 = "FALSE";
        if (v324)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s\n", v325, 30, v326, v327);
          v325 = AVE_GetCurrTime();
          v326 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 253))
            v327 = "TRUE";
          else
            v327 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseCAVLCBits return %s", v325, 30, v326, v327);
      }
      if (!*((_DWORD *)v8 + 4690))
      {
        v27 = *((unsigned __int8 *)v8 + 253);
        goto LABEL_19;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v815 = AVE_Log_CheckConsole(3u);
        v816 = AVE_GetCurrTime();
        v817 = AVE_Log_GetLevelStr(4);
        if (v815)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.\n", v816, 3, v817, "AVE_HEVCCopyProperty", 13841, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_AVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property supported only on H.264 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("EnableStaticAreasLowQP")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v328 = AVE_Log_CheckConsole(0x1Eu);
        v329 = AVE_GetCurrTime();
        v330 = AVE_Log_GetLevelStr(6);
        v331 = *((_DWORD *)v8 + 65);
        if (v328)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x\n", v329, 30, v330, v331);
          v332 = AVE_GetCurrTime();
          v936 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v332, 30, v936, *((_DWORD *)v8 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStaticAreasLowQP return 0x%08x", v329, 30, v330, v331);
        }
      }
      v33 = (void **)((char *)v8 + 260);
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("LookAheadFrames")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v333 = AVE_Log_CheckConsole(0x1Eu);
        v334 = AVE_GetCurrTime();
        v335 = AVE_Log_GetLevelStr(6);
        v336 = *((_DWORD *)v8 + 58);
        if (v333)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d\n", v334, 30, v335, v336);
          v337 = AVE_GetCurrTime();
          v937 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v337, 30, v937, *((_DWORD *)v8 + 58));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SuggestedLookAheadFrameCount return %d", v334, 30, v335, v336);
        }
      }
      v34 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v33 = (void **)(v8 + 29);
      goto LABEL_30;
    }
    if (CFEqual(a2, CFSTR("PreemptiveLoadBalancing")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v338 = AVE_Log_CheckConsole(0x1Eu);
        v339 = AVE_GetCurrTime();
        v340 = AVE_Log_GetLevelStr(6);
        v341 = *((_DWORD *)v8 + 4864);
        if (v338)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d\n", v339, 30, v340, v341);
          v342 = AVE_GetCurrTime();
          v938 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v342, 30, v938, *((_DWORD *)v8 + 4864));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_PreemptiveLoadBalancing return %d", v339, 30, v340, v341);
        }
      }
      if (*((_DWORD *)v8 + 4864) == 2)
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("UseAsyncFWScheduling")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v343 = AVE_Log_CheckConsole(0x1Eu);
        v344 = AVE_GetCurrTime();
        v345 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18684))
          v346 = "TRUE";
        else
          v346 = "FALSE";
        if (v343)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s\n", v344, 30, v345, v346);
          v344 = AVE_GetCurrTime();
          v345 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18684))
            v346 = "TRUE";
          else
            v346 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseAsyncFWScheduling return %s", v344, 30, v345, v346);
      }
      v27 = *((unsigned __int8 *)v8 + 18684);
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED260]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v347 = AVE_Log_CheckConsole(0x1Eu);
        v348 = AVE_GetCurrTime();
        v349 = AVE_Log_GetLevelStr(6);
        if (v347)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE\n", v348, 30, v349);
          v350 = AVE_GetCurrTime();
          v939 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v350, 30, v939);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UsingHardwareAcceleratedVideoEncoder return TRUE", v348, 30, v349);
        }
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("EnableStatsCollect")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v351 = AVE_Log_CheckConsole(0x1Eu);
        v352 = AVE_GetCurrTime();
        v353 = AVE_Log_GetLevelStr(6);
        v354 = *((_DWORD *)v8 + 480);
        if (v351)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d\n", v352, 30, v353, v354);
          v355 = AVE_GetCurrTime();
          v940 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v355, 30, v940, *((_DWORD *)v8 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableStatsCollect return %d", v352, 30, v353, v354);
        }
      }
      v33 = (void **)(v8 + 240);
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("EnableContextSwitchInTheMiddle")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v356 = AVE_Log_CheckConsole(0x1Eu);
        v357 = AVE_GetCurrTime();
        v358 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 1925))
          v359 = "TRUE";
        else
          v359 = "FALSE";
        if (v356)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s\n", v357, 30, v358, v359);
          v357 = AVE_GetCurrTime();
          v358 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 1925))
            v359 = "TRUE";
          else
            v359 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContextSwitchInTheMiddle return %s", v357, 30, v358, v359);
      }
      v27 = *((unsigned __int8 *)v8 + 1925);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableMultiReferenceP")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v360 = AVE_Log_CheckConsole(0x1Eu);
        v361 = AVE_GetCurrTime();
        v362 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18676))
          v363 = "TRUE";
        else
          v363 = "FALSE";
        if (v360)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s\n", v361, 30, v362, v363);
          v361 = AVE_GetCurrTime();
          v362 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18676))
            v363 = "TRUE";
          else
            v363 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiReferenceP return %s", v361, 30, v362, v363);
      }
      v27 = *((unsigned __int8 *)v8 + 18676);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("MultiReferencePSpacing")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v364 = AVE_Log_CheckConsole(0x1Eu);
        v365 = AVE_GetCurrTime();
        v366 = AVE_Log_GetLevelStr(6);
        v367 = *((_DWORD *)v8 + 4670);
        if (v364)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d\n", v365, 30, v366, v367);
          v368 = AVE_GetCurrTime();
          v941 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v368, 30, v941, *((_DWORD *)v8 + 4670));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiReferencePSpacing return %d", v365, 30, v366, v367);
        }
      }
      v135 = 18680;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("EnableSEITagInsertion")))
    {
      if (!AVE_Log_CheckLevel(0x1Eu, 6))
        goto LABEL_1415;
      v369 = AVE_Log_CheckConsole(0x1Eu);
      v370 = AVE_GetCurrTime();
      v371 = AVE_Log_GetLevelStr(6);
      if (v369)
      {
        if (*((_BYTE *)v8 + 18685) || *((_BYTE *)v8 + 18687))
        {
          v372 = "TRUE";
        }
        else
        {
          v372 = "TRUE";
          if (!*((_BYTE *)v8 + 18688) && !*((_BYTE *)v8 + 18689))
            v372 = "FALSE";
        }
        printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s\n", v370, 30, v371, v372);
        v370 = AVE_GetCurrTime();
        v371 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18685))
          goto LABEL_1128;
      }
      else if (*((_BYTE *)v8 + 18685))
      {
        goto LABEL_1128;
      }
      if (!*((_BYTE *)v8 + 18687))
      {
        v818 = "TRUE";
        if (!*((_BYTE *)v8 + 18688) && !*((_BYTE *)v8 + 18689))
          v818 = "FALSE";
        goto LABEL_1414;
      }
LABEL_1128:
      v818 = "TRUE";
LABEL_1414:
      syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSEITagInsertion return %s", v370, 30, v371, v818);
LABEL_1415:
      if (*((_BYTE *)v8 + 18685)
        || *((_BYTE *)v8 + 18687)
        || *((_BYTE *)v8 + 18688)
        || *((_BYTE *)v8 + 18689)
        || *((_BYTE *)v8 + 18690)
        || *((_BYTE *)v8 + 18691)
        || *((_BYTE *)v8 + 18692))
      {
        goto LABEL_20;
      }
      v27 = *((unsigned __int8 *)v8 + 18693);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("EnableT35SEITagInsertion")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v373 = AVE_Log_CheckConsole(0x1Eu);
        v374 = AVE_GetCurrTime();
        v375 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18694))
          v376 = "TRUE";
        else
          v376 = "FALSE";
        if (v373)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s\n", v374, 30, v375, v376);
          v374 = AVE_GetCurrTime();
          v375 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18694))
            v376 = "TRUE";
          else
            v376 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableT35SEITagInsertion return %s", v374, 30, v375, v376);
      }
      v27 = *((unsigned __int8 *)v8 + 18694);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("log2_max_minus4")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v377 = AVE_Log_CheckConsole(0x1Eu);
        v378 = AVE_GetCurrTime();
        v379 = AVE_Log_GetLevelStr(6);
        v380 = *((_DWORD *)v8 + 25777);
        if (v377)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d\n", v378, 30, v379, v380);
          v381 = AVE_GetCurrTime();
          v942 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v381, 30, v942, *((_DWORD *)v8 + 25777));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_log2_max_minus4 return %d", v378, 30, v379, v380);
        }
      }
      v33 = (void **)((char *)v8 + 103108);
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("LowDelay")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v382 = AVE_Log_CheckConsole(0x1Eu);
        v383 = AVE_GetCurrTime();
        v384 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 516))
          v385 = "true";
        else
          v385 = "false";
        if (v382)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s\n", v383, 30, v384, v385);
          v383 = AVE_GetCurrTime();
          v384 = AVE_Log_GetLevelStr(6);
          if (*((_DWORD *)v8 + 516))
            v385 = "true";
          else
            v385 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LowDelay return %s", v383, 30, v384, v385);
      }
      v27 = *((_DWORD *)v8 + 516);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("AllowOpenGOP")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v386 = AVE_Log_CheckConsole(0x1Eu);
        v387 = AVE_GetCurrTime();
        v388 = AVE_Log_GetLevelStr(6);
        if (((_BYTE)v8[253] & 1) != 0)
          v389 = "true";
        else
          v389 = "false";
        if (v386)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s\n", v387, 30, v388, v389);
          v387 = AVE_GetCurrTime();
          v388 = AVE_Log_GetLevelStr(6);
          if (((_DWORD)v8[253] & 1) != 0)
            v389 = "true";
          else
            v389 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllowOpenGOP return %s", v387, 30, v388, v389);
      }
      if (((_BYTE)v8[253] & 1) != 0)
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED128]))
    {
      v390 = *((_DWORD *)v8 + 25775) + 8;
      LODWORD(keys[0]) = v390;
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          v391 = AVE_Log_CheckConsole(0x1Eu);
          v392 = AVE_GetCurrTime();
          v393 = AVE_Log_GetLevelStr(6);
          if (v391)
          {
            printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d\n", v392, 30, v393, v390);
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(6);
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_OutputBitDepth return %d");
        }
        goto LABEL_50;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v819 = AVE_Log_CheckConsole(3u);
        v820 = AVE_GetCurrTime();
        v821 = AVE_Log_GetLevelStr(4);
        if (v819)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.\n", v820, 3, v821, "AVE_HEVCCopyProperty", 13982, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property OutputBitDepth supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("ThroughputRateMode")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v394 = AVE_Log_CheckConsole(0x1Eu);
        v395 = AVE_GetCurrTime();
        v396 = AVE_Log_GetLevelStr(6);
        v397 = *((_DWORD *)v8 + 4694);
        v398 = v397 - 1;
        if (v394)
        {
          if (v398 < 6 && ((0x37u >> v398) & 1) != 0)
          {
            v399 = off_1E692C008[v398];
          }
          else if (v397 == 4)
          {
            v399 = "TURBO";
          }
          else
          {
            v399 = "DISABLED";
          }
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s\n", v395, 30, v396, v399);
          v395 = AVE_GetCurrTime();
          v396 = AVE_Log_GetLevelStr(6);
          v823 = *((_DWORD *)v8 + 4694);
          v824 = v823 - 1;
          if ((v823 - 1) < 6 && ((0x37u >> v824) & 1) != 0)
          {
            v822 = off_1E692C008[v824];
          }
          else if (v823 == 4)
          {
            v822 = "TURBO";
          }
          else
          {
            v822 = "DISABLED";
          }
        }
        else if (v398 < 6 && ((0x37u >> v398) & 1) != 0)
        {
          v822 = off_1E692C008[v398];
        }
        else if (v397 == 4)
        {
          v822 = "TURBO";
        }
        else
        {
          v822 = "DISABLED";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ThroughputRateMode return %s", v395, 30, v396, v822);
      }
      v131 = *((_DWORD *)v8 + 4694);
      goto LABEL_158;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED170]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v400 = AVE_Log_CheckConsole(0x1Eu);
        v401 = AVE_GetCurrTime();
        v402 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18781))
          v403 = "true";
        else
          v403 = "false";
        if (v400)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s\n", v401, 30, v402, v403);
          v401 = AVE_GetCurrTime();
          v402 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18781))
            v403 = "true";
          else
            v403 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PrioritizeEncodingSpeedOverQuality return %s", v401, 30, v402, v403);
      }
      v27 = *((unsigned __int8 *)v8 + 18781);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("HevcSplitDecision")))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          v404 = AVE_Log_CheckConsole(0x1Eu);
          v405 = AVE_GetCurrTime();
          v406 = AVE_Log_GetLevelStr(6);
          v407 = *((_DWORD *)v8 + 4696);
          if (v404)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d\n", v405, 30, v406, v407);
            v408 = AVE_GetCurrTime();
            v943 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v408, 30, v943, *((_DWORD *)v8 + 4696));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HevcSplitDecision return %d", v405, 30, v406, v407);
          }
        }
        v131 = *((_DWORD *)v8 + 4696);
        goto LABEL_158;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v825 = AVE_Log_CheckConsole(3u);
        v826 = AVE_GetCurrTime();
        v827 = AVE_Log_GetLevelStr(4);
        if (v825)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.\n", v826, 3, v827, "AVE_HEVCCopyProperty", 14023, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property HevcSplitDecisionMode supported only on H.265 codec. Failed.");
      }
LABEL_22:
      v28 = 4294954384;
      goto LABEL_106;
    }
    v1006 = (int *)(v8 + 14793);
    if (CFEqual(a2, CFSTR("EnableQPModChroma")))
    {
      if (*((_DWORD *)v8 + 4690) == 1)
      {
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          v409 = AVE_Log_CheckConsole(0x1Eu);
          v410 = AVE_GetCurrTime();
          v411 = AVE_Log_GetLevelStr(6);
          v412 = *((_DWORD *)v8 + 31717);
          if (v409)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x\n", v410, 30, v411, v412);
            v413 = AVE_GetCurrTime();
            v944 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v413, 30, v944, *((_DWORD *)v8 + 31717));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableQPModChroma return 0x%08x", v410, 30, v411, v412);
          }
        }
        v33 = (void **)((char *)v8 + 126868);
        goto LABEL_29;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v828 = AVE_Log_CheckConsole(3u);
        v829 = AVE_GetCurrTime();
        v830 = AVE_Log_GetLevelStr(4);
        if (v828)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.\n", v829, 3, v830, "AVE_HEVCCopyProperty", 14037, "(encoderPrivateStorage->VideoParamsDriver.codecID == AVE_CodecType_HEVC)");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Property EnableQPModChroma supported only on H.265 codec. Failed.");
      }
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("MotionEstimationSearchMode")))
    {
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, v8 + 23140);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v414 = AVE_Log_CheckConsole(0x1Eu);
        v415 = AVE_GetCurrTime();
        v416 = AVE_Log_GetLevelStr(6);
        if (v414)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d\n", v415, 30, v416, *((_DWORD *)v8 + 46280));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MotionEstimationSearchMode return %d");
      }
      goto LABEL_38;
    }
    if (CFEqual(a2, CFSTR("SupportedMotionSearchModes")))
    {
      SearchRange = AVE_DevCap_FindSearchRange(*((_DWORD *)v8 + 45884), 1, 1);
      if (SearchRange)
      {
        v418 = (int *)SearchRange;
        v419 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (v419)
        {
          Mutable = v419;
          Array = AVE_SearchRange_MakeArray(v418 + 1, *v418, v419);
          v28 = AVE_RetCode2OSStatus(Array);
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v421 = AVE_Log_CheckConsole(0x1Eu);
            v422 = AVE_GetCurrTime();
            v423 = AVE_Log_GetLevelStr(6);
            if (v421)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes\n", v422, 30, v423);
              v424 = AVE_GetCurrTime();
              v945 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v424, 30, v945);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SupportedMotionSearchModes", v422, 30, v423);
            }
          }
          goto LABEL_186;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v834 = AVE_Log_CheckConsole(3u);
          v835 = AVE_GetCurrTime();
          v836 = AVE_Log_GetLevelStr(4);
          if (v834)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v835, 3, v836, "AVE_HEVCCopyProperty", 14067, "pArray != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray");
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        v831 = AVE_Log_CheckConsole(3u);
        v832 = AVE_GetCurrTime();
        v833 = AVE_Log_GetLevelStr(4);
        if (v831)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find matched search range\n", v832, 3, v833, "AVE_HEVCCopyProperty", 14063, "pSR != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find matched search range");
      }
      goto LABEL_1467;
    }
    if (CFEqual(a2, CFSTR("UseElementaryStreamOutput")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v425 = AVE_Log_CheckConsole(0x1Eu);
        v426 = AVE_GetCurrTime();
        v427 = AVE_Log_GetLevelStr(6);
        if (*v37)
          v428 = "TRUE";
        else
          v428 = "FALSE";
        if (v425)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s\n", v426, 30, v427, v428);
          v426 = AVE_GetCurrTime();
          v427 = AVE_Log_GetLevelStr(6);
          if (*v37)
            v428 = "TRUE";
          else
            v428 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseElementaryStreamOutput return %s", v426, 30, v427, v428);
      }
      v27 = *v37;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED060]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v429 = AVE_Log_CheckConsole(0x1Eu);
        v430 = AVE_GetCurrTime();
        v431 = AVE_Log_GetLevelStr(6);
        v432 = *((_DWORD *)v8 + 25764);
        if (v429)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d\n", v430, 30, v431, v432);
          v433 = AVE_GetCurrTime();
          v946 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v433, 30, v946, *((_DWORD *)v8 + 25764));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_InputPixelFormat return %d", v430, 30, v431, v432);
        }
      }
      v837 = *((_DWORD *)v8 + 25764);
      switch(v837)
      {
        case 3:
          if (*((_DWORD *)v8 + 27431) == 1)
            v838 = 875836518;
          else
            v838 = 875836534;
          goto LABEL_1438;
        case 2:
          if (*((_DWORD *)v8 + 27431) == 1)
            v838 = 875704934;
          else
            v838 = 875704950;
          goto LABEL_1438;
        case 1:
          if (*((_DWORD *)v8 + 27431) == 1)
            v838 = 875704422;
          else
            v838 = 875704438;
LABEL_1438:
          LODWORD(keys[0]) = v838;
          v34 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v33 = keys;
          goto LABEL_30;
      }
LABEL_1276:
      StringForIntegerCodePoint = 0;
      goto LABEL_32;
    }
    if (CFEqual(a2, CFSTR("FlatAreaLowQp")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v434 = AVE_Log_CheckConsole(0x1Eu);
        v435 = AVE_GetCurrTime();
        v436 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 255))
          v437 = "TRUE";
        else
          v437 = "FALSE";
        if (v434)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s\n", v435, 30, v436, v437);
          v435 = AVE_GetCurrTime();
          v436 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 255))
            v437 = "TRUE";
          else
            v437 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_FlatAreaLowQp return %s", v435, 30, v436, v437);
      }
      v27 = *((unsigned __int8 *)v8 + 255);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("UltraFlatAreaLowQp")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v438 = AVE_Log_CheckConsole(0x1Eu);
        v439 = AVE_GetCurrTime();
        v440 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 256))
          v441 = "TRUE";
        else
          v441 = "FALSE";
        if (v438)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s\n", v439, 30, v440, v441);
          v439 = AVE_GetCurrTime();
          v440 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 256))
            v441 = "TRUE";
          else
            v441 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UltraFlatAreaLowQp return %s", v439, 30, v440, v441);
      }
      v27 = *((unsigned __int8 *)v8 + 256);
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED138]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v442 = AVE_Log_CheckConsole(0x1Eu);
        v443 = AVE_GetCurrTime();
        v444 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 257))
          v445 = "true";
        else
          v445 = "false";
        if (v442)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s\n", v443, 30, v444, v445);
          v443 = AVE_GetCurrTime();
          v444 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 257))
            v445 = "true";
          else
            v445 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_PerceptualQualityOptimization return %s", v443, 30, v444, v445);
      }
      v27 = *((unsigned __int8 *)v8 + 257);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("LrmePipeSyncMode")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v446 = AVE_Log_CheckConsole(0x1Eu);
        v447 = AVE_GetCurrTime();
        v448 = AVE_Log_GetLevelStr(6);
        if (*v1008)
          v449 = "TRUE";
        else
          v449 = "FALSE";
        if (v446)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s\n", v447, 30, v448, v449);
          v447 = AVE_GetCurrTime();
          v448 = AVE_Log_GetLevelStr(6);
          if (*v1008)
            v449 = "TRUE";
          else
            v449 = "FALSE";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LrmePipeSyncMode return %s", v447, 30, v448, v449);
      }
      v27 = *v1008;
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("LRMEScaledSrcEn")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v450 = AVE_Log_CheckConsole(0x1Eu);
        v451 = AVE_GetCurrTime();
        v452 = AVE_Log_GetLevelStr(6);
        v453 = *((unsigned __int8 *)v8 + 18338);
        if (v450)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x\n", v451, 30, v452, v453);
          v454 = AVE_GetCurrTime();
          v947 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v454, 30, v947, *((unsigned __int8 *)v8 + 18338));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEScaledSrcEn return 0x%08x", v451, 30, v452, v453);
        }
      }
      v135 = 18338;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("LRMEOutputType")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v455 = AVE_Log_CheckConsole(0x1Eu);
        v456 = AVE_GetCurrTime();
        v457 = AVE_Log_GetLevelStr(6);
        v458 = *((_DWORD *)v8 + 5034);
        if (v455)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x\n", v456, 30, v457, v458);
          v459 = AVE_GetCurrTime();
          v948 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v459, 30, v948, *((_DWORD *)v8 + 5034));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_LRMEOutputType return 0x%08x", v456, 30, v457, v458);
        }
      }
      v135 = 20136;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("CodedBuffersOverride")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v460 = AVE_Log_CheckConsole(0x1Eu);
        v461 = AVE_GetCurrTime();
        v462 = AVE_Log_GetLevelStr(6);
        v463 = *((_DWORD *)v8 + 5042);
        if (v460)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d\n", v461, 30, v462, v463);
          v464 = AVE_GetCurrTime();
          v949 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v464, 30, v949, *((_DWORD *)v8 + 5042));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CodedBuffersOverride return %d", v461, 30, v462, v463);
        }
      }
      v135 = 20168;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("EnableMBInputCtrl")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v465 = AVE_Log_CheckConsole(0x1Eu);
        v466 = AVE_GetCurrTime();
        v467 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 1924))
          v468 = "true";
        else
          v468 = "false";
        if (v465)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s\n", v466, 30, v467, v468);
          v466 = AVE_GetCurrTime();
          v467 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 1924))
            v468 = "true";
          else
            v468 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMBInputCtrl return %s", v466, 30, v467, v468);
      }
      v27 = *((unsigned __int8 *)v8 + 1924);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("HierarchicalB")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v469 = AVE_Log_CheckConsole(0x1Eu);
        v470 = AVE_GetCurrTime();
        v471 = AVE_Log_GetLevelStr(6);
        v472 = *((_DWORD *)v8 + 4487);
        if (v469)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u\n", v470, 30, v471, v472);
          v473 = AVE_GetCurrTime();
          v950 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v473, 30, v950, *((_DWORD *)v8 + 4487));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_HierarchicalB return %u", v470, 30, v471, v472);
        }
      }
      v839 = *((_DWORD *)v8 + 4487);
      goto LABEL_1320;
    }
    if (CFEqual(a2, CFSTR("UserRPSForFaceTime")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v474 = AVE_Log_CheckConsole(0x1Eu);
        v475 = AVE_GetCurrTime();
        v476 = AVE_Log_GetLevelStr(6);
        if (v474)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime\n", v475, 30, v476);
          v477 = AVE_GetCurrTime();
          v951 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v477, 30, v951);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UserRPSForFaceTime", v475, 30, v476);
        }
      }
      v840 = CFArrayCreateMutable(a3, 2 * *((int *)v8 + 5047), MEMORY[0x1E0C9B378]);
      if (v840)
      {
        if (*((int *)v8 + 5047) < 1)
          goto LABEL_38;
        v841 = v840;
        v842 = 0;
        v843 = v8 + 2524;
        do
        {
          v844 = CFNumberCreate(0, kCFNumberSInt32Type, v843);
          v845 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v843 + 68);
          CFArrayAppendValue(v841, v844);
          CFArrayAppendValue(v841, v845);
          if (v844)
            CFRelease(v844);
          if (v845)
            CFRelease(v845);
          v28 = 0;
          ++v842;
          v843 = (const void **)((char *)v843 + 4);
        }
        while (v842 < *((int *)v8 + 5047));
        goto LABEL_106;
      }
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        v898 = AVE_Log_CheckConsole(0x1Eu);
        v899 = AVE_GetCurrTime();
        v900 = AVE_Log_GetLevelStr(4);
        if (v898)
        {
          printf("%lld %d AVE %s: FIG: CFArrayCreateMutable failed\n", v899, 30, v900);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: FIG: CFArrayCreateMutable failed");
      }
LABEL_1467:
      v28 = 4294954392;
      goto LABEL_106;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED270]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v478 = AVE_Log_CheckConsole(0x1Eu);
        v479 = AVE_GetCurrTime();
        v480 = AVE_Log_GetLevelStr(6);
        v481 = (*((_DWORD *)v8 + 50) >> 5) & 1;
        if (v478)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d\n", v479, 30, v480, v481);
          v482 = AVE_GetCurrTime();
          v952 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v482, 30, v952, (*((_DWORD *)v8 + 50) >> 5) & 1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_VideoResolutionAdaptation return %d", v479, 30, v480, v481);
        }
      }
      if (((_BYTE)v8[25] & 0x20) != 0)
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED278]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v483 = AVE_Log_CheckConsole(0x1Eu);
        v484 = AVE_GetCurrTime();
        v485 = AVE_Log_GetLevelStr(6);
        v486 = *((_DWORD *)v8 + 5083);
        if (v483)
        {
          printf("%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d\n", v484, 30, v485, v486);
          v487 = AVE_GetCurrTime();
          v953 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v487, 30, v953, *((_DWORD *)v8 + 5083));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: asked for kVTCompressionPropertyKey_VideoResolutionAdaptationType return %d", v484, 30, v485, v486);
        }
      }
      v135 = 20332;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("SAOMode")))
    {
      v488 = *((_DWORD *)v8 + 4697);
      LODWORD(keys[0]) = v488;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v489 = AVE_Log_CheckConsole(0x1Eu);
        v490 = AVE_GetCurrTime();
        v491 = AVE_Log_GetLevelStr(6);
        if (v489)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d\n", v490, 30, v491, v488);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SAOMode return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("AllocMaxOpBuffer")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v492 = AVE_Log_CheckConsole(0x1Eu);
        v493 = AVE_GetCurrTime();
        v494 = AVE_Log_GetLevelStr(6);
        v495 = *((unsigned __int8 *)v8 + 20176);
        if (v492)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u\n", v493, 30, v494, v495);
          v496 = AVE_GetCurrTime();
          v954 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v496, 30, v954, *((unsigned __int8 *)v8 + 20176));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocMaxOpBuffer return %u", v493, 30, v494, v495);
        }
      }
      v27 = *((unsigned __int8 *)v8 + 20176);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("AllocCodedBufferHalfSize")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v497 = AVE_Log_CheckConsole(0x1Eu);
        v498 = AVE_GetCurrTime();
        v499 = AVE_Log_GetLevelStr(6);
        v500 = *((_DWORD *)v8 + 5045);
        if (v497)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u\n", v498, 30, v499, v500);
          v501 = AVE_GetCurrTime();
          v955 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v501, 30, v955, *((_DWORD *)v8 + 5045));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AllocCodedBufferHalfSize return %u", v498, 30, v499, v500);
        }
      }
      if (*((_DWORD *)v8 + 5045) == 50)
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("ChromaQpOffset")))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      v502 = CFNumberCreate(a3, kCFNumberSInt32Type, v8 + 14798);
      v503 = CFNumberCreate(a3, kCFNumberSInt32Type, v8 + 14802);
      CFArrayAppendValue(Mutable, v502);
      CFArrayAppendValue(Mutable, v503);
      if (v502)
        CFRelease(v502);
      if (v503)
        CFRelease(v503);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v504 = AVE_Log_CheckConsole(0x1Eu);
        v505 = AVE_GetCurrTime();
        v506 = AVE_Log_GetLevelStr(6);
        if (v504)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d\n", v505, 30, v506, *((_DWORD *)v8 + 29596), *((_DWORD *)v8 + 29604));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQpOffset return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, CFSTR("ChromaQPIndexOffsetMultiPPS")))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      if (2 * *((_DWORD *)v8 + 4513) - 2 >= 1)
      {
        v507 = 0;
        v508 = (_DWORD *)v8 + 29605;
        do
        {
          v509 = CFNumberCreate(a3, kCFNumberSInt32Type, v508 - 8);
          v510 = CFNumberCreate(a3, kCFNumberSInt32Type, v508);
          CFArrayAppendValue(Mutable, v509);
          CFArrayAppendValue(Mutable, v510);
          if (v509)
            CFRelease(v509);
          if (v510)
            CFRelease(v510);
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v511 = AVE_Log_CheckConsole(0x1Eu);
            v512 = AVE_GetCurrTime();
            v513 = AVE_Log_GetLevelStr(6);
            v514 = *(v508 - 8);
            v515 = *v508;
            if (v511)
            {
              printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d\n", v512, 30, v513, *(v508 - 8), v515);
              v512 = AVE_GetCurrTime();
              v513 = AVE_Log_GetLevelStr(6);
              v514 = *(v508 - 8);
              v515 = *v508;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ChromaQPIndexOffsetMultiPPS return %d %d", v512, 30, v513, v514, v515);
          }
          ++v507;
          ++v508;
        }
        while (v507 < 2 * *((_DWORD *)v8 + 4513) - 2);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, CFSTR("iChatUsageString")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v516 = AVE_Log_CheckConsole(0x1Eu);
        v517 = AVE_GetCurrTime();
        v518 = AVE_Log_GetLevelStr(6);
        v519 = *((_DWORD *)v8 + 4698);
        if (v516)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u\n", v517, 30, v518, v519);
          v520 = AVE_GetCurrTime();
          v956 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v520, 30, v956, *((_DWORD *)v8 + 4698));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_iChatUsageString return %u", v517, 30, v518, v519);
        }
      }
      switch(*((_DWORD *)v8 + 4698))
      {
        case 0:
          v28 = 0;
          v82 = CFSTR("FaceTime");
          goto LABEL_105;
        case 1:
          v28 = 0;
          v82 = CFSTR("CarPlay");
          goto LABEL_105;
        case 2:
          v28 = 0;
          v82 = CFSTR("AirPlay");
          goto LABEL_105;
        case 3:
          v28 = 0;
          v82 = CFSTR("SafeView");
          goto LABEL_105;
        case 4:
          v28 = 0;
          v82 = CFSTR("ScreenSharing");
          goto LABEL_105;
        case 5:
          v28 = 0;
          v82 = CFSTR("MediaAnalysis");
          goto LABEL_105;
        case 7:
          v28 = 0;
          v82 = CFSTR("SideCar");
          goto LABEL_105;
        default:
          goto LABEL_1334;
      }
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED258]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      v521 = (int *)v8 + 5087;
      v522 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 20348);
      CFArrayAppendValue(Mutable, v522);
      if (v522)
        CFRelease(v522);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v523 = AVE_Log_CheckConsole(0x1Eu);
        v524 = AVE_GetCurrTime();
        v525 = AVE_Log_GetLevelStr(6);
        v526 = *v521;
        if (v523)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v524, 30, v525, v526);
          v527 = AVE_GetCurrTime();
          v957 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v527, 30, v957, *v521);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v524, 30, v525, v526);
        }
      }
      v846 = CFNumberCreate(a3, kCFNumberSInt32Type, (char *)v8 + 103052);
      CFArrayAppendValue(Mutable, v846);
      if (v846)
        CFRelease(v846);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v847 = AVE_Log_CheckConsole(0x1Eu);
        v848 = AVE_GetCurrTime();
        v849 = AVE_Log_GetLevelStr(6);
        v850 = *v93;
        if (v847)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v848, 30, v849, v850);
          v851 = AVE_GetCurrTime();
          v999 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v851, 30, v999, *v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v848, 30, v849, v850);
        }
      }
      if (*((int *)v8 + 4513) >= 1)
      {
        v901 = 0;
        v902 = v8 + 2252;
        do
        {
          v903 = CFNumberCreate(a3, kCFNumberSInt32Type, v902);
          CFArrayAppendValue(Mutable, v903);
          if (v903)
            CFRelease(v903);
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v904 = AVE_Log_CheckConsole(0x1Eu);
            v905 = AVE_GetCurrTime();
            v906 = AVE_Log_GetLevelStr(6);
            v907 = *v902;
            if (v904)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d\n", v905, 30, v906, v907);
              v905 = AVE_GetCurrTime();
              v906 = AVE_Log_GetLevelStr(6);
              v907 = *v902;
            }
            syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_UserParameterSetsIds return %d", v905, 30, v906, v907);
          }
          ++v901;
          ++v902;
        }
        while (v901 < *((int *)v8 + 4513));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1D0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v528 = AVE_Log_CheckConsole(0x1Eu);
        v529 = AVE_GetCurrTime();
        v530 = AVE_Log_GetLevelStr(6);
        v531 = *v93;
        if (v528)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d\n", v529, 30, v530, v531);
          v532 = AVE_GetCurrTime();
          v958 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v532, 30, v958, *v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCSequenceParameterSetID return %d", v529, 30, v530, v531);
        }
      }
      v33 = (void **)((char *)v8 + 103052);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1C8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v533 = AVE_Log_CheckConsole(0x1Eu);
        v534 = AVE_GetCurrTime();
        v535 = AVE_Log_GetLevelStr(6);
        v536 = *v1006;
        if (v533)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d\n", v534, 30, v535, v536);
          v537 = AVE_GetCurrTime();
          v959 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v537, 30, v959, *v1006);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequiredHEVCPictureParameterSetID return %d", v534, 30, v535, v536);
        }
      }
      v33 = (void **)(v8 + 14793);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1C0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v538 = AVE_Log_CheckConsole(0x1Eu);
        v539 = AVE_GetCurrTime();
        v540 = AVE_Log_GetLevelStr(6);
        v541 = *((unsigned __int8 *)v8 + 18859);
        if (v538)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u\n", v539, 30, v540, v541);
          v542 = AVE_GetCurrTime();
          v960 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v542, 30, v960, *((unsigned __int8 *)v8 + 18859));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_RequireDeterministicDependencyAndReordering return %u", v539, 30, v540, v541);
        }
      }
      if (*((_BYTE *)v8 + 18859))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("EnableSliceEncodingMode")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v543 = AVE_Log_CheckConsole(0x1Eu);
        v544 = AVE_GetCurrTime();
        v545 = AVE_Log_GetLevelStr(6);
        v546 = *((unsigned __int8 *)v8 + 103224);
        if (v543)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u\n", v544, 30, v545, v546);
          v547 = AVE_GetCurrTime();
          v961 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v547, 30, v961, *((unsigned __int8 *)v8 + 103224));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableSliceEncodingMode return %u", v544, 30, v545, v546);
        }
      }
      if (*((_BYTE *)v8 + 18056))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("EnableMultiSliceStats")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v548 = AVE_Log_CheckConsole(0x1Eu);
        v549 = AVE_GetCurrTime();
        v550 = AVE_Log_GetLevelStr(6);
        v551 = *((unsigned __int8 *)v8 + 18320);
        if (v548)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u\n", v549, 30, v550, v551);
          v552 = AVE_GetCurrTime();
          v962 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v552, 30, v962, *((unsigned __int8 *)v8 + 18320));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultiSliceStats return %u", v549, 30, v550, v551);
        }
      }
      if (*((_BYTE *)v8 + 18320))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("UseReferenceCompressedBuffers")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v553 = AVE_Log_CheckConsole(0x1Eu);
        v554 = AVE_GetCurrTime();
        v555 = AVE_Log_GetLevelStr(6);
        v556 = *((unsigned __int8 *)v8 + 18013);
        if (v553)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u\n", v554, 30, v555, v556);
          v557 = AVE_GetCurrTime();
          v963 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v557, 30, v963, *((unsigned __int8 *)v8 + 18013));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseReferenceCompressedBuffers return %u", v554, 30, v555, v556);
        }
      }
      if (*((_BYTE *)v8 + 18013))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("ForceRefUncompressed")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v558 = AVE_Log_CheckConsole(0x1Eu);
        v559 = AVE_GetCurrTime();
        v560 = AVE_Log_GetLevelStr(6);
        v561 = *((unsigned __int8 *)v8 + 18014);
        if (v558)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u\n", v559, 30, v560, v561);
          v562 = AVE_GetCurrTime();
          v964 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v562, 30, v964, *((unsigned __int8 *)v8 + 18014));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceRefUncompressed return %u", v559, 30, v560, v561);
        }
      }
      if (*((_BYTE *)v8 + 18014))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("SetDbgInternalParams")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v563 = AVE_Log_CheckConsole(0x1Eu);
        v564 = AVE_GetCurrTime();
        v565 = AVE_Log_GetLevelStr(6);
        v566 = *v72;
        if (v563)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d\n", v564, 30, v565, v566);
          v567 = AVE_GetCurrTime();
          v965 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v567, 30, v965, *v72);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetDbgInternalParams return %d", v564, 30, v565, v566);
        }
      }
      v135 = 18324;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("TemporalIDNestingFlag")))
    {
      v568 = *((unsigned __int8 *)v8 + 20364);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v569 = AVE_Log_CheckConsole(0x1Eu);
        v570 = AVE_GetCurrTime();
        v571 = AVE_Log_GetLevelStr(6);
        if (v568)
          v572 = "TRUE";
        else
          v572 = "FALSE";
        if (v569)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s\n", v570, 30, v571, v572);
          v573 = AVE_GetCurrTime();
          v966 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v573, 30, v966, v572);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_TemporalIDNestingFlag return %s", v570, 30, v571, v572);
        }
      }
      v28 = 0;
      v29 = (const __CFString **)MEMORY[0x1E0C9AE40];
      if (v568)
        v29 = (const __CFString **)MEMORY[0x1E0C9AE50];
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("NumberOfTemporalLayers")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v574 = AVE_Log_CheckConsole(0x1Eu);
        v575 = AVE_GetCurrTime();
        v576 = AVE_Log_GetLevelStr(6);
        v577 = *((unsigned __int16 *)v8 + 9164);
        if (v574)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u\n", v575, 30, v576, v577);
          v578 = AVE_GetCurrTime();
          v967 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v578, 30, v967, *((unsigned __int16 *)v8 + 9164));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %u", v575, 30, v576, v577);
        }
      }
      v852 = *((unsigned __int16 *)v8 + 9164);
      LODWORD(keys[0]) = v852;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v853 = AVE_Log_CheckConsole(0x1Eu);
        v854 = AVE_GetCurrTime();
        v855 = AVE_Log_GetLevelStr(6);
        if (v853)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d\n", v854, 30, v855, v852);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumberOfTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("NumBTemporalLayers")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v579 = AVE_Log_CheckConsole(0x1Eu);
        v580 = AVE_GetCurrTime();
        v581 = AVE_Log_GetLevelStr(6);
        v582 = *((unsigned __int16 *)v8 + 9165);
        if (v579)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u\n", v580, 30, v581, v582);
          v583 = AVE_GetCurrTime();
          v968 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v583, 30, v968, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %u", v580, 30, v581, v582);
        }
      }
      v856 = *((unsigned __int16 *)v8 + 9165);
      LODWORD(keys[0]) = v856;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v857 = AVE_Log_CheckConsole(0x1Eu);
        v858 = AVE_GetCurrTime();
        v859 = AVE_Log_GetLevelStr(6);
        if (v857)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d\n", v858, 30, v859, v856);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumBTemporalLayers return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("BaseLayerFrameRate")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v584 = AVE_Log_CheckConsole(0x1Eu);
        v585 = AVE_GetCurrTime();
        v586 = AVE_Log_GetLevelStr(6);
        v587 = *((unsigned __int16 *)v8 + 9165);
        if (v584)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u\n", v585, 30, v586, v587);
          v588 = AVE_GetCurrTime();
          v969 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v588, 30, v969, *((unsigned __int16 *)v8 + 9165));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %u", v585, 30, v586, v587);
        }
      }
      v860 = *((_DWORD *)v8 + 56);
      LODWORD(keys[0]) = v860;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v861 = AVE_Log_CheckConsole(0x1Eu);
        v862 = AVE_GetCurrTime();
        v863 = AVE_Log_GetLevelStr(6);
        if (v861)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d\n", v862, 30, v863, v860);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_BaseLayerFrameRate return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFF0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v589 = AVE_Log_CheckConsole(0x1Eu);
        v590 = AVE_GetCurrTime();
        v591 = AVE_Log_GetLevelStr(6);
        v592 = *((_DWORD *)v8 + 4860);
        if (v589)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d\n", v590, 30, v591, v592);
          v593 = AVE_GetCurrTime();
          v970 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v593, 30, v970, *((_DWORD *)v8 + 4860));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %d", v590, 30, v591, v592);
        }
      }
      LODWORD(keys[0]) = 0;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v864 = AVE_Log_CheckConsole(0x1Eu);
        v865 = AVE_GetCurrTime();
        v866 = AVE_Log_GetLevelStr(6);
        v867 = *((_DWORD *)v8 + 4860);
        if (v864)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u\n", v865, 30, v866, v867);
          v868 = AVE_GetCurrTime();
          v1000 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v868, 30, v1000, *((_DWORD *)v8 + 4860));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_FrameRateTargetForAverageBitrate return %u", v865, 30, v866, v867);
        }
      }
      v131 = *((_DWORD *)v8 + 4860);
      if (!v131)
        goto LABEL_50;
      goto LABEL_158;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED198]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v594 = AVE_Log_CheckConsole(0x1Eu);
        v595 = AVE_GetCurrTime();
        v596 = AVE_Log_GetLevelStr(6);
        v597 = *((_DWORD *)v8 + 4702);
        if (v594)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d\n", v595, 30, v596, v597);
          v598 = AVE_GetCurrTime();
          v971 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v598, 30, v971, *((_DWORD *)v8 + 4702));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_QuantizationScalingMatrixPreset return %d", v595, 30, v596, v597);
        }
      }
      v131 = *((_DWORD *)v8 + 4702);
      if (v131 == 1)
        goto LABEL_158;
      if (!v131)
      {
        v131 = 2;
        goto LABEL_158;
      }
      goto LABEL_1276;
    }
    if (CFEqual(a2, CFSTR("NumMergeCandidates")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v599 = AVE_Log_CheckConsole(0x1Eu);
        v600 = AVE_GetCurrTime();
        v601 = AVE_Log_GetLevelStr(6);
        v602 = *v1007;
        if (v599)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d\n", v600, 30, v601, v602);
          v603 = AVE_GetCurrTime();
          v972 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v603, 30, v972, *v1007);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_NumMergeCandidates return %d", v600, 30, v601, v602);
        }
      }
      v131 = *v1007 + 5;
      goto LABEL_158;
    }
    if (CFEqual(a2, CFSTR("EnableMultipleScalingMatrices")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v604 = AVE_Log_CheckConsole(0x1Eu);
        v605 = AVE_GetCurrTime();
        v606 = AVE_Log_GetLevelStr(6);
        v607 = *((unsigned __int8 *)v8 + 18851);
        if (v604)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u\n", v605, 30, v606, v607);
          v608 = AVE_GetCurrTime();
          v973 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v608, 30, v973, *((unsigned __int8 *)v8 + 18851));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableMultipleScalingMatrices return %u", v605, 30, v606, v607);
        }
      }
      if (*((_BYTE *)v8 + 18851))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED2A0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v609 = AVE_Log_CheckConsole(0x1Eu);
        v610 = AVE_GetCurrTime();
        v611 = AVE_Log_GetLevelStr(6);
        v612 = *((_DWORD *)v8 + 460);
        if (v609)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d\n", v610, 30, v611, v612);
          v613 = AVE_GetCurrTime();
          v974 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v613, 30, v974, *((_DWORD *)v8 + 460));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMinQuantizationParameter return %d", v610, 30, v611, v612);
        }
      }
      v33 = (void **)(v8 + 230);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED298]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v614 = AVE_Log_CheckConsole(0x1Eu);
        v615 = AVE_GetCurrTime();
        v616 = AVE_Log_GetLevelStr(6);
        v617 = *((_DWORD *)v8 + 461);
        if (v614)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d\n", v615, 30, v616, v617);
          v618 = AVE_GetCurrTime();
          v975 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v618, 30, v975, *((_DWORD *)v8 + 461));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionProperty_SoftMaxQuantizationParameter return %d", v615, 30, v616, v617);
        }
      }
      v33 = (void **)((char *)v8 + 1844);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED098]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v619 = AVE_Log_CheckConsole(0x1Eu);
        v620 = AVE_GetCurrTime();
        v621 = AVE_Log_GetLevelStr(6);
        v622 = *((_DWORD *)v8 + 463);
        if (v619)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d\n", v620, 30, v621, v622);
          v623 = AVE_GetCurrTime();
          v976 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v623, 30, v976, *((_DWORD *)v8 + 463));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxAllowedFrameQP return %d", v620, 30, v621, v622);
        }
      }
      v33 = (void **)((char *)v8 + 1852);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0C0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v624 = AVE_Log_CheckConsole(0x1Eu);
        v625 = AVE_GetCurrTime();
        v626 = AVE_Log_GetLevelStr(6);
        v627 = *((_DWORD *)v8 + 462);
        if (v624)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d\n", v625, 30, v626, v627);
          v628 = AVE_GetCurrTime();
          v977 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v628, 30, v977, *((_DWORD *)v8 + 462));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinAllowedFrameQP return %d", v625, 30, v626, v627);
        }
      }
      v33 = (void **)(v8 + 231);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED010]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      LODWORD(keys[0]) = 20;
      LODWORD(values[0]) = 21;
      v629 = CFNumberCreate(a3, kCFNumberSInt32Type, keys);
      v630 = CFNumberCreate(a3, kCFNumberSInt32Type, values);
      CFArrayAppendValue(Mutable, v629);
      CFArrayAppendValue(Mutable, v630);
      if (v629)
        CFRelease(v629);
      if (v630)
        CFRelease(v630);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v631 = AVE_Log_CheckConsole(0x1Eu);
        v632 = AVE_GetCurrTime();
        v633 = AVE_Log_GetLevelStr(6);
        if (v631)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d\n", v632, 30, v633, LODWORD(keys[0]), LODWORD(values[0]));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_HEVCSyncSampleNALUnitTypes return %d %d");
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED018]))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      v634 = -1;
      do
      {
        ++v634;
        memcpy(__dst, (char *)v8 + 102508, sizeof(__dst));
        TemporalLevelInfoDictionary = CreateTemporalLevelInfoDictionary((uint64_t)__dst, v634);
        CFArrayAppendValue(Mutable, TemporalLevelInfoDictionary);
        if (TemporalLevelInfoDictionary)
          CFRelease(TemporalLevelInfoDictionary);
      }
      while (v634 < *((unsigned __int16 *)v8 + 9164));
      goto LABEL_185;
    }
    if (CFEqual(a2, CFSTR("ForceSliceRPS")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v636 = AVE_Log_CheckConsole(0x1Eu);
        v637 = AVE_GetCurrTime();
        v638 = AVE_Log_GetLevelStr(6);
        v639 = *((unsigned __int8 *)v8 + 18332);
        if (v636)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u\n", v637, 30, v638, v639);
          v640 = AVE_GetCurrTime();
          v978 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v640, 30, v978, *((unsigned __int8 *)v8 + 18332));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_ForceSliceRPS return %u", v637, 30, v638, v639);
        }
      }
      if (*((_BYTE *)v8 + 18332))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("IntraRefreshFrames")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v641 = AVE_Log_CheckConsole(0x1Eu);
        v642 = AVE_GetCurrTime();
        v643 = AVE_Log_GetLevelStr(6);
        v644 = *((_DWORD *)v8 + 4596);
        if (v641)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u\n", v642, 30, v643, v644);
          v645 = AVE_GetCurrTime();
          v979 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v645, 30, v979, *((_DWORD *)v8 + 4596));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_IntraRefreshFrames return %u", v642, 30, v643, v644);
        }
      }
      v135 = 18384;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("UseHWTileOffsets")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v646 = AVE_Log_CheckConsole(0x1Eu);
        v647 = AVE_GetCurrTime();
        v648 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18860))
          v649 = "true";
        else
          v649 = "false";
        if (v646)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s\n", v647, 30, v648, v649);
          v647 = AVE_GetCurrTime();
          v648 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18860))
            v649 = "true";
          else
            v649 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_UseHWTileOffsets return %s", v647, 30, v648, v649);
      }
      if (*((_BYTE *)v8 + 18860))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0A0]))
    {
      v650 = *((_DWORD *)v8 + 486);
      if ((*((_DWORD *)v8 + 469) & 0xE0) != 0)
        v651 = 3;
      else
        v651 = 0;
      v652 = v651 + v650;
      LODWORD(keys[0]) = v651 + v650;
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v653 = AVE_Log_CheckConsole(0x1Eu);
        v654 = AVE_GetCurrTime();
        v655 = AVE_Log_GetLevelStr(6);
        if (v653)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d\n", v654, 30, v655, v652);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MaxFrameDelayCount return %d");
      }
      goto LABEL_50;
    }
    if (CFEqual(a2, CFSTR("MaximizePowerEfficiency")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v656 = AVE_Log_CheckConsole(0x1Eu);
        v657 = AVE_GetCurrTime();
        v658 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18861))
          v659 = "true";
        else
          v659 = "false";
        if (v656)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s\n", v657, 30, v658, v659);
          v657 = AVE_GetCurrTime();
          v658 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18861))
            v659 = "true";
          else
            v659 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MaximizePowerEfficiency return %s", v657, 30, v658, v659);
      }
      if (*((_BYTE *)v8 + 18861))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("RelaxAverageBitRateTarget")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v660 = AVE_Log_CheckConsole(0x1Eu);
        v661 = AVE_GetCurrTime();
        v662 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18858))
          v663 = "true";
        else
          v663 = "false";
        if (v660)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s\n", v661, 30, v662, v663);
          v661 = AVE_GetCurrTime();
          v662 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18858))
            v663 = "true";
          else
            v663 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RelaxAverageBitRateTarget return %s", v661, 30, v662, v663);
      }
      if (*((_BYTE *)v8 + 18858))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0D8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v664 = AVE_Log_CheckConsole(0x1Eu);
        v665 = AVE_GetCurrTime();
        v666 = AVE_Log_GetLevelStr(6);
        v667 = *((unsigned __int8 *)v8 + 18912);
        if (v664)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u\n", v665, 30, v666, v667);
          v668 = AVE_GetCurrTime();
          v980 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v668, 30, v980, *((unsigned __int8 *)v8 + 18912));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MinimizeMemoryUsage return %u", v665, 30, v666, v667);
        }
      }
      if (*((_BYTE *)v8 + 18912))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED090]))
    {
      if (*((_BYTE *)v8 + 18695))
      {
        v669 = (const UInt8 *)v8 + 18697;
        v670 = a3;
        v671 = 24;
LABEL_887:
        StringForIntegerCodePoint = CFDataCreate(v670, v669, v671);
        goto LABEL_32;
      }
      goto LABEL_1334;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED070]))
    {
      if (*((_BYTE *)v8 + 18920))
      {
        v669 = (const UInt8 *)v8 + 18921;
        v671 = *((unsigned int *)v8 + 4859);
        v670 = a3;
        goto LABEL_887;
      }
LABEL_1334:
      v28 = 0;
      *a4 = 0;
      goto LABEL_106;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF60]))
    {
      if (*((_BYTE *)v8 + 18696))
      {
        v669 = (const UInt8 *)v8 + 18721;
        v670 = a3;
        v671 = 4;
        goto LABEL_887;
      }
      goto LABEL_1334;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEE0]))
    {
      if (*((_BYTE *)v8 + 18725))
      {
        v669 = (const UInt8 *)v8 + 18726;
        v670 = a3;
        v671 = 17;
        goto LABEL_887;
      }
      goto LABEL_1334;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFB0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v672 = AVE_Log_CheckConsole(0x1Eu);
        v673 = AVE_GetCurrTime();
        v674 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18908))
          v675 = "true";
        else
          v675 = "false";
        if (v672)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s\n", v673, 30, v674, v675);
          v673 = AVE_GetCurrTime();
          v674 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18908))
            v675 = "true";
          else
            v675 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncodesAlpha return %s", v673, 30, v674, v675);
      }
      if (*((_BYTE *)v8 + 18908))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("EnableTimingInfoMetadata")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v676 = AVE_Log_CheckConsole(0x1Eu);
        v677 = AVE_GetCurrTime();
        v678 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18909))
          v679 = "true";
        else
          v679 = "false";
        if (v676)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s\n", v677, 30, v678, v679);
          v677 = AVE_GetCurrTime();
          v678 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18909))
            v679 = "true";
          else
            v679 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableTimingInfoMetadata return %s", v677, 30, v678, v679);
      }
      if (*((_BYTE *)v8 + 18909))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("EnableContentColourVolumeSEI")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v680 = AVE_Log_CheckConsole(0x1Eu);
        v681 = AVE_GetCurrTime();
        v682 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18910))
          v683 = "true";
        else
          v683 = "false";
        if (v680)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s\n", v681, 30, v682, v683);
          v681 = AVE_GetCurrTime();
          v682 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18910))
            v683 = "true";
          else
            v683 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableContentColourVolumeSEI return %s", v681, 30, v682, v683);
      }
      if (*((_BYTE *)v8 + 18910))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("DroppablePFramesOnly")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v684 = AVE_Log_CheckConsole(0x1Eu);
        v685 = AVE_GetCurrTime();
        v686 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 56) == 1)
          v687 = "true";
        else
          v687 = "false";
        if (v684)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s\n", v685, 30, v686, v687);
          v685 = AVE_GetCurrTime();
          v686 = AVE_Log_GetLevelStr(6);
          if (*((_DWORD *)v8 + 56) == 1)
            v687 = "true";
          else
            v687 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_DroppablePFramesOnly return %s", v685, 30, v686, v687);
      }
      v839 = *((_DWORD *)v8 + 56);
LABEL_1320:
      if (v839 == 1)
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1D8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v688 = AVE_Log_CheckConsole(0x1Eu);
        v689 = AVE_GetCurrTime();
        v690 = AVE_Log_GetLevelStr(6);
        v691 = *v1009;
        if (v688)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d\n", v689, 30, v690, v691);
          v692 = AVE_GetCurrTime();
          v981 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v692, 30, v981, *v1009);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_RequiredHEVCVideoParameterSetAlphaLayerID return %d", v689, 30, v690, v691);
        }
      }
      v135 = 18900;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("EnableHdrPqRC")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v693 = AVE_Log_CheckConsole(0x1Eu);
        v694 = AVE_GetCurrTime();
        v695 = AVE_Log_GetLevelStr(6);
        if (*((_BYTE *)v8 + 18350))
          v696 = "true";
        else
          v696 = "false";
        if (v693)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s\n", v694, 30, v695, v696);
          v694 = AVE_GetCurrTime();
          v695 = AVE_Log_GetLevelStr(6);
          if (*((_BYTE *)v8 + 18350))
            v696 = "true";
          else
            v696 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_EnableHdrPqRC return %s", v694, 30, v695, v696);
      }
      if (*((_BYTE *)v8 + 18350))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("lrmeRCPassNum")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v697 = AVE_Log_CheckConsole(0x1Eu);
        v698 = AVE_GetCurrTime();
        v699 = AVE_Log_GetLevelStr(6);
        v700 = *((unsigned __int8 *)v8 + 18349);
        if (v697)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d\n", v698, 30, v699, v700);
          v701 = AVE_GetCurrTime();
          v982 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v701, 30, v982, *((unsigned __int8 *)v8 + 18349));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_lrmeRCPassNum return %d", v698, 30, v699, v700);
        }
      }
      v135 = 18349;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("EncodesDepth")))
    {
      if (*((_BYTE *)v8 + 18389))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("EncodesDisparity")))
    {
      if (*((_BYTE *)v8 + 18388))
        goto LABEL_20;
      goto LABEL_103;
    }
    if (CFEqual(a2, CFSTR("AdaptBPocDelay")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v702 = AVE_Log_CheckConsole(0x1Eu);
        v703 = AVE_GetCurrTime();
        v704 = AVE_Log_GetLevelStr(6);
        v705 = *((_DWORD *)v8 + 46284);
        if (v702)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d\n", v703, 30, v704, v705);
          v706 = AVE_GetCurrTime();
          v983 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v706, 30, v983, *((_DWORD *)v8 + 46284));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_AdaptBPocDelay return %d", v703, 30, v704, v705);
        }
      }
      v33 = (void **)(v8 + 23142);
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0F0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v707 = AVE_Log_CheckConsole(0x1Eu);
        v708 = AVE_GetCurrTime();
        v709 = AVE_Log_GetLevelStr(6);
        v710 = v8[22944];
        if (v707)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p\n", v708, 30, v709, v710);
          v711 = AVE_GetCurrTime();
          v984 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v711, 30, v984, v8[22944]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MultiPassStorage return %p", v708, 30, v709, v710);
        }
      }
      v869 = v8[22944];
      if (v869)
      {
        StringForIntegerCodePoint = (void *)CFRetain(v869);
        goto LABEL_32;
      }
      goto LABEL_1334;
    }
    if (CFEqual(a2, CFSTR("SetMultiPassNum")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v712 = AVE_Log_CheckConsole(0x1Eu);
        v713 = AVE_GetCurrTime();
        v714 = AVE_Log_GetLevelStr(6);
        v715 = *((_DWORD *)v8 + 4600);
        if (v712)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d\n", v713, 30, v714, v715);
          v716 = AVE_GetCurrTime();
          v985 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v716, 30, v985, *((_DWORD *)v8 + 4600));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_SetMultiPassNum return %d", v713, 30, v714, v715);
        }
      }
      v135 = 18400;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("MultiPassConstantQP")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v717 = AVE_Log_CheckConsole(0x1Eu);
        v718 = AVE_GetCurrTime();
        v719 = AVE_Log_GetLevelStr(6);
        v720 = *((_DWORD *)v8 + 4601);
        if (v717)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d\n", v718, 30, v719, v720);
          v721 = AVE_GetCurrTime();
          v986 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v721, 30, v986, *((_DWORD *)v8 + 4601));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassConstantQP return %d", v718, 30, v719, v720);
        }
      }
      v135 = 18404;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("MultiPassQPModLevel")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v722 = AVE_Log_CheckConsole(0x1Eu);
        v723 = AVE_GetCurrTime();
        v724 = AVE_Log_GetLevelStr(6);
        v725 = *((_DWORD *)v8 + 4602);
        if (v722)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d\n", v723, 30, v724, v725);
          v726 = AVE_GetCurrTime();
          v987 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v726, 30, v987, *((_DWORD *)v8 + 4602));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassQPModLevel return %d", v723, 30, v724, v725);
        }
      }
      v135 = 18408;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("MultiPassMaxQPModLevel")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v727 = AVE_Log_CheckConsole(0x1Eu);
        v728 = AVE_GetCurrTime();
        v729 = AVE_Log_GetLevelStr(6);
        v730 = *((_DWORD *)v8 + 4603);
        if (v727)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d\n", v728, 30, v729, v730);
          v731 = AVE_GetCurrTime();
          v988 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v731, 30, v988, *((_DWORD *)v8 + 4603));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassMaxQPModLevel return %d", v728, 30, v729, v730);
        }
      }
      v135 = 18412;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("MultiPassOptions")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v732 = AVE_Log_CheckConsole(0x1Eu);
        v733 = AVE_GetCurrTime();
        v734 = AVE_Log_GetLevelStr(6);
        v735 = *((_DWORD *)v8 + 4604);
        if (v732)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d\n", v733, 30, v734, v735);
          v736 = AVE_GetCurrTime();
          v989 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v736, 30, v989, *((_DWORD *)v8 + 4604));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_MultiPassOptions return %d", v733, 30, v734, v735);
        }
      }
      v135 = 18416;
      goto LABEL_171;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED218]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v737 = AVE_Log_CheckConsole(0x1Eu);
        v738 = AVE_GetCurrTime();
        v739 = AVE_Log_GetLevelStr(6);
        if ((*((_BYTE *)v8 + 1876) & 0xE0) != 0)
          v740 = "true";
        else
          v740 = "false";
        if (v737)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s\n", v738, 30, v739, v740);
          v738 = AVE_GetCurrTime();
          v739 = AVE_Log_GetLevelStr(6);
          if ((*((_DWORD *)v8 + 469) & 0xE0) != 0)
            v740 = "true";
          else
            v740 = "false";
        }
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_TemporalNoiseReduction return %s", v738, 30, v739, v740);
      }
      v28 = 0;
      v870 = (const __CFString **)MEMORY[0x1E0C9AE50];
      v871 = (const __CFString **)MEMORY[0x1E0C9AE40];
      v872 = (*((_DWORD *)v8 + 469) & 0xE0) == 0;
      goto LABEL_1401;
    }
    if (CFEqual(a2, CFSTR("LatencyMode")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v741 = AVE_Log_CheckConsole(0x1Eu);
        v742 = AVE_GetCurrTime();
        v743 = AVE_Log_GetLevelStr(6);
        v744 = *((_DWORD *)v8 + 4606);
        if (v741)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d\n", v742, 30, v743, v744);
          v745 = AVE_GetCurrTime();
          v990 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v745, 30, v990, *((_DWORD *)v8 + 4606));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTTemporalFilterPropertyKey_LatencyMode return %d", v742, 30, v743, v744);
        }
      }
      v135 = 18424;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("MCTFStrengthLevel")))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v746 = AVE_Log_CheckConsole(0x1Eu);
        v747 = AVE_GetCurrTime();
        v748 = AVE_Log_GetLevelStr(6);
        v749 = *((unsigned __int8 *)v8 + 18420);
        if (v746)
        {
          printf("%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u\n", v747, 30, v748, v749);
          v750 = AVE_GetCurrTime();
          v991 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v750, 30, v991, *((unsigned __int8 *)v8 + 18420));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTEncodeFrameOptionKey_MCTFStrengthLevel return %u", v747, 30, v748, v749);
        }
      }
      v135 = 18420;
      goto LABEL_171;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED080]))
    {
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      if (*((_DWORD *)v8 + 4609))
      {
        v751 = 0;
        do
        {
          v752 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v751 + 93835);
          CFArrayAppendValue(Mutable, v752);
          if (v752)
            CFRelease(v752);
          ++v751;
        }
        while (v751 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED088]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v753 = AVE_Log_CheckConsole(0x1Eu);
        v754 = AVE_GetCurrTime();
        v755 = AVE_Log_GetLevelStr(6);
        if (v753)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs \n", v754, 30, v755);
          v756 = AVE_GetCurrTime();
          v992 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v756, 30, v992);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCViewIDs ", v754, 30, v755);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      if (*((_DWORD *)v8 + 4609))
      {
        v873 = 0;
        do
        {
          v874 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v873 + 93900);
          CFArrayAppendValue(Mutable, v874);
          if (v874)
            CFRelease(v874);
          ++v873;
        }
        while (v873 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED078]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v757 = AVE_Log_CheckConsole(0x1Eu);
        v758 = AVE_GetCurrTime();
        v759 = AVE_Log_GetLevelStr(6);
        if (v757)
        {
          printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs \n", v758, 30, v759);
          v760 = AVE_GetCurrTime();
          v993 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v760, 30, v993);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_MVHEVCLeftAndRightViewIDs ", v758, 30, v759);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      v875 = 0;
      v876 = 1;
      do
      {
        v877 = v876;
        v878 = CFNumberCreate(0, kCFNumberSInt8Type, (char *)v8 + v875 + 20184);
        CFArrayAppendValue(Mutable, v878);
        if (v878)
          CFRelease(v878);
        v876 = 0;
        v875 = 1;
      }
      while ((v877 & 1) != 0);
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1E8]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v761 = AVE_Log_CheckConsole(0x1Eu);
        v762 = AVE_GetCurrTime();
        v763 = AVE_Log_GetLevelStr(6);
        v764 = *v8;
        if (v761)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs\n", v762, 30, v763, v764);
          v765 = AVE_GetCurrTime();
          v994 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v765, 30, v994, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCSequenceParameterSetIDs", v762, 30, v763, v764);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      v879 = *((unsigned __int8 *)v8 + 18908);
      v880 = *((_DWORD *)v8 + 4609);
      if (*((_BYTE *)v8 + 18908))
        v880 += 2;
      if (v880 > 2 * v879)
      {
        v881 = v879;
        v882 = (char *)&v8[3962 * v881 / 8 + 12881] + 4;
        v883 = v880 - v881 * 2;
        do
        {
          v884 = CFNumberCreate(0, kCFNumberSInt8Type, v882);
          CFArrayAppendValue(Mutable, v884);
          if (v884)
            CFRelease(v884);
          v882 += 7924;
          --v883;
        }
        while (v883);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1E0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v766 = AVE_Log_CheckConsole(0x1Eu);
        v767 = AVE_GetCurrTime();
        v768 = AVE_Log_GetLevelStr(6);
        v769 = *v8;
        if (v766)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs\n", v767, 30, v768, v769);
          v770 = AVE_GetCurrTime();
          v995 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v770, 30, v995, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCPictureParameterSetIDs", v767, 30, v768, v769);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      v885 = *((unsigned __int8 *)v8 + 18908);
      v886 = *((_DWORD *)v8 + 4609);
      if (*((_BYTE *)v8 + 18908))
        v886 += 2;
      if (v886 > 2 * v885)
      {
        v887 = v885;
        v888 = &v8[4818 * v887 / 8 + 14793];
        v889 = v886 - v887 * 2;
        do
        {
          v890 = CFNumberCreate(0, kCFNumberSInt8Type, v888);
          CFArrayAppendValue(Mutable, v890);
          if (v890)
            CFRelease(v890);
          v888 = (const void **)((char *)v888 + 9636);
          --v889;
        }
        while (v889);
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1F0]))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v771 = AVE_Log_CheckConsole(0x1Eu);
        v772 = AVE_GetCurrTime();
        v773 = AVE_Log_GetLevelStr(6);
        v774 = *v8;
        if (v771)
        {
          printf("%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs\n", v772, 30, v773, v774);
          v775 = AVE_GetCurrTime();
          v996 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v775, 30, v996, *v8);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %p: FIG: asked for kVTCompressionPropertyKey_RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", v772, 30, v773, v774);
        }
      }
      Mutable = CFArrayCreateMutable(0, *((unsigned int *)v8 + 4609), MEMORY[0x1E0C9B378]);
      if (*((_DWORD *)v8 + 4609))
      {
        v891 = 0;
        v892 = (char *)v8 + 18900;
        do
        {
          v893 = CFNumberCreate(0, kCFNumberSInt8Type, v892);
          CFArrayAppendValue(Mutable, v893);
          if (v893)
            CFRelease(v893);
          ++v891;
          v892 += 4;
        }
        while (v891 < *((unsigned int *)v8 + 4609));
      }
      goto LABEL_185;
    }
    if (CFEqual(a2, CFSTR("EncoderEncryptionData")))
    {
      *a4 = CFNumberCreate(a3, kCFNumberSInt64Type, v8 + 23158);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v28 = AVE_Log_CheckConsole(0x1Eu);
        v776 = AVE_GetCurrTime();
        v777 = AVE_Log_GetLevelStr(6);
        if (!(_DWORD)v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx\n", v776, 30, v777, v8[23158]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EncoderEncryptionData return 0x%llx");
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED190]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED130]))
        {
          v28 = 0;
          if (*((int *)v8 + 46294) <= 0)
            v29 = (const __CFString **)MEMORY[0x1E0C9AE40];
          else
            v29 = (const __CFString **)MEMORY[0x1E0C9AE50];
          goto LABEL_104;
        }
        if (CFEqual(a2, CFSTR("MaxEncoderPixelRate")))
        {
          Profile = HEVC_FindProfile(*v9);
          if (Profile)
          {
            v781 = Profile[1];
            v782 = Profile[2];
          }
          else
          {
            v782 = 1;
            v781 = 8;
          }
          PixelPerf = AVE_DevCap_FindPixelPerf(*((_DWORD *)v8 + 45884), 1, 1, v781, v782, 1);
          keys[0] = PixelPerf;
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v895 = AVE_Log_CheckConsole(0x1Eu);
            v896 = AVE_GetCurrTime();
            v897 = AVE_Log_GetLevelStr(6);
            if (v895)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld\n", v896, 30, v897, "AVE_HEVCCopyProperty", 15100, PixelPerf);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(6);
            }
            syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_MaxEncoderPixelRate %lld");
          }
          goto LABEL_264;
        }
        if (CFEqual(a2, CFSTR("NumberOfCores")))
        {
          v783 = AVE_DevCap_Find(*((_DWORD *)v8 + 45884));
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v784 = AVE_Log_CheckConsole(0x1Eu);
            v785 = AVE_GetCurrTime();
            v786 = AVE_Log_GetLevelStr(6);
            v787 = *(_DWORD *)(*((_QWORD *)v783 + 2) + 4);
            if (v784)
            {
              printf("%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d\n", v785, 30, v786, "AVE_HEVCCopyProperty", 15110, v787);
              v788 = AVE_GetCurrTime();
              v789 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v788, 30, v789, "AVE_HEVCCopyProperty", 15110, *(_DWORD *)(*((_QWORD *)v783 + 2) + 4));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d kVTCompressionPropertyKey_NumberOfCores %d", v785, 30, v786, "AVE_HEVCCopyProperty", 15110, v787);
            }
          }
          v33 = (void **)(*((_QWORD *)v783 + 2) + 4);
          goto LABEL_29;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEF8]))
        {
          if (AVE_Log_CheckLevel(0x1Eu, 6))
          {
            v790 = AVE_Log_CheckConsole(0x1Eu);
            v791 = AVE_GetCurrTime();
            v792 = AVE_Log_GetLevelStr(6);
            v793 = *((_DWORD *)v8 + 56);
            if (v790)
            {
              printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d\n", v791, 30, v792, v793);
              v794 = AVE_GetCurrTime();
              v997 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v794, 30, v997, *((_DWORD *)v8 + 56));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_AverageNonDroppableFrameRate return %d", v791, 30, v792, v793);
            }
          }
          v33 = (void **)(v8 + 28);
          goto LABEL_29;
        }
        if (!CFEqual(a2, CFSTR("CalculateMeanSquaredError")))
        {
          if (AVE_Log_CheckLevel(0x1Eu, 4))
          {
            v799 = AVE_Log_CheckConsole(0x1Eu);
            v800 = AVE_GetCurrTime();
            v801 = AVE_Log_GetLevelStr(4);
            if (v799)
            {
              printf("%lld %d AVE %s: FIG: CopyProperty Property not supported\n", v800, 30, v801);
              v802 = AVE_GetCurrTime();
              v998 = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v802, 30, v998);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: CopyProperty Property not supported", v800, 30, v801);
            }
          }
          CFShow(a2);
          v28 = 4294954396;
          goto LABEL_106;
        }
        if (AVE_Log_CheckLevel(0x1Eu, 6))
        {
          v795 = AVE_Log_CheckConsole(0x1Eu);
          v796 = AVE_GetCurrTime();
          v797 = AVE_Log_GetLevelStr(6);
          if ((*((_BYTE *)v8 + 1891) & 8) != 0)
            v798 = "true";
          else
            v798 = "false";
          if (v795)
          {
            printf("%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s\n", v796, 30, v797, v798);
            v796 = AVE_GetCurrTime();
            v797 = AVE_Log_GetLevelStr(6);
            if (((unint64_t)v8[236] & 0x8000000) != 0)
              v798 = "true";
            else
              v798 = "false";
          }
          syslog(3, "%lld %d AVE %s: FIG: asked for AVE_kVTCompressionPropertyKey_CalculateMeanSquaredError return %s", v796, 30, v797, v798);
        }
        v28 = 0;
        v870 = (const __CFString **)MEMORY[0x1E0C9AE50];
        v871 = (const __CFString **)MEMORY[0x1E0C9AE40];
        v872 = ((unint64_t)v8[236] & 0x8000000) == 0;
LABEL_1401:
        if (v872)
          v29 = v871;
        else
          v29 = v870;
        goto LABEL_104;
      }
      *a4 = CFNumberCreate(a3, kCFNumberDoubleType, v1010);
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v28 = AVE_Log_CheckConsole(0x1Eu);
        v778 = AVE_GetCurrTime();
        v779 = AVE_Log_GetLevelStr(6);
        if (!(_DWORD)v28)
        {
          syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
          goto LABEL_106;
        }
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f\n", v778, 30, v779, *v1010);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_Quality return %.6f");
      }
    }
LABEL_38:
    v28 = 0;
    goto LABEL_106;
  }
  v296 = *((unsigned __int8 *)v8 + 18849);
  v297 = AVE_Log_CheckLevel(0x1Eu, 6);
  if (v296)
  {
    if (v297)
    {
      v298 = AVE_Log_CheckConsole(0x1Eu);
      v299 = AVE_GetCurrTime();
      v300 = AVE_Log_GetLevelStr(6);
      if (*((_DWORD *)v8 + 49) == 3)
        v301 = "TRUE";
      else
        v301 = "FALSE";
      if (v298)
      {
        printf("%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s\n", v299, 30, v300, v301);
        v299 = AVE_GetCurrTime();
        v300 = AVE_Log_GetLevelStr(6);
        if (*((_DWORD *)v8 + 49) == 3)
          v301 = "TRUE";
        else
          v301 = "FALSE";
      }
      syslog(3, "%lld %d AVE %s: FIG: asked for kVTCompressionPropertyKey_EnableQPModulation return %s", v299, 30, v300, v301);
    }
    if (*((_DWORD *)v8 + 49) != 3)
      goto LABEL_20;
    goto LABEL_103;
  }
  if (!v297)
    goto LABEL_38;
  v28 = AVE_Log_CheckConsole(0x1Eu);
  v813 = AVE_GetCurrTime();
  v814 = AVE_Log_GetLevelStr(6);
  if ((_DWORD)v28)
  {
    printf("%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation\n", v813, 30, v814);
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(6);
    syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
    goto LABEL_38;
  }
  syslog(3, "%lld %d AVE %s: FIG: asked for unsupported property kVTCompressionPropertyKey_EnableQPModulation");
LABEL_106:
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    v83 = AVE_Log_CheckConsole(0x1Eu);
    v84 = AVE_GetCurrTime();
    v85 = AVE_Log_GetLevelStr(8);
    if (v83)
    {
      printf("%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d \n", v84, 30, v85, v28);
      v86 = AVE_GetCurrTime();
      v916 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v86, 30, v916, v28);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H3H264VideoEncoder FIG: EXIT AVE_HEVCCopyProperty err %d ", v84, 30, v85, v28);
    }
  }
  if (v8)
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 22927));
  return v28;
}

uint64_t AVE_HEVCSetProperty(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  const char *v19;
  const char *v20;
  const char *v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      v5 = AVE_Log_CheckConsole(0x1Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty\n", CurrTime, 30, LevelStr);
        v8 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", v8, 30, v19);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCSetProperty", CurrTime, 30, LevelStr);
      }
    }
    v13 = AVE_SetProperty_internal(v4, a2);
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v9 = AVE_Log_CheckConsole(3u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperty", 12932, "encoderPrivateStorage");
        v12 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v20, "AVE_HEVCSetProperty", 12932, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperty", 12932, "encoderPrivateStorage");
      }
    }
    v13 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    v14 = AVE_Log_CheckConsole(0x1Eu);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(8);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d \n", v15, 30, v16, v13);
      v17 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v17, 30, v21, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCSetProperty err %d ", v15, 30, v16, v13);
    }
  }
  return v13;
}

int *AVE_getVuiAspectRatio(int *result, int *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  if (*(_BYTE *)(a3 + 1))
  {
    v3 = *(_DWORD *)(a3 + 4);
    switch(v3)
    {
      case 2:
        v4 = 12;
        goto LABEL_15;
      case 3:
        v4 = 10;
        goto LABEL_15;
      case 4:
        v4 = 16;
        goto LABEL_15;
      case 5:
        v6 = 40;
        goto LABEL_17;
      case 6:
        v4 = 24;
        goto LABEL_15;
      case 7:
        goto LABEL_6;
      case 8:
        v4 = 32;
        goto LABEL_15;
      case 9:
        v6 = 80;
        goto LABEL_17;
      case 10:
        v4 = 18;
        goto LABEL_15;
      case 11:
        v4 = 15;
LABEL_15:
        *result = v4;
        v5 = 11;
        break;
      case 12:
        v6 = 64;
LABEL_17:
        *result = v6;
        v5 = 33;
        break;
      case 13:
        *result = 160;
        v5 = 99;
        break;
      case 14:
        *result = 4;
        v5 = 3;
        break;
      case 15:
        *result = 3;
        v5 = 2;
        break;
      case 16:
        *result = 2;
        v5 = 1;
        break;
      default:
        if (v3 != 255)
          goto LABEL_6;
        *result = *(_DWORD *)(a3 + 8);
        v5 = *(_DWORD *)(a3 + 12);
        break;
    }
  }
  else
  {
LABEL_6:
    v5 = 1;
    *result = 1;
  }
  *a2 = v5;
  return result;
}

__CFDictionary *CreateTemporalLevelInfoDictionary(uint64_t a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  int v6;
  uint64_t i;
  CFDataRef v8;
  CFDataRef v9;
  CFDataRef v10;
  CFDataRef v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  __CFDictionary *v24;
  const char *v26;
  const char *v27;
  const char *v28;
  UInt8 v29[2];
  int v30;
  UInt8 bytes[4];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v12 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL\n", CurrTime, 46, LevelStr, "CreateTemporalLevelInfoDictionary", 13012, "TemporalLevelInfoDict != __null");
        v15 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", v15, 46, v26, "CreateTemporalLevelInfoDictionary", 13012, "TemporalLevelInfoDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | TemporalLevelInfoDict == NULL", CurrTime, 46, LevelStr, "CreateTemporalLevelInfoDictionary", 13012, "TemporalLevelInfoDict != __null");
      }
    }
    return 0;
  }
  v5 = Mutable;
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23A8], a2, Mutable);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23A0], *(_DWORD *)a1, v5);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23B0], *(_DWORD *)(a1 + 4) != 0, v5);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA2398], *(_DWORD *)(a1 + 8), v5);
  for (i = 43; i != 11; --i)
    v6 = *(unsigned __int8 *)(a1 + i) | (2 * v6);
  *(_DWORD *)bytes = v6;
  v8 = CFDataCreate(0, bytes, 4);
  if (!v8)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v16 = AVE_Log_CheckConsole(0x2Eu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL\n", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13028, "cf_profileCompatibilityFlags != __null");
        v19 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v19, 46, v27, "CreateTemporalLevelInfoDictionary", 13028, "cf_profileCompatibilityFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_profileCompatibilityFlags == NULL", v17, 46, v18, "CreateTemporalLevelInfoDictionary", 13028, "cf_profileCompatibilityFlags != __null");
      }
    }
    v24 = v5;
    goto LABEL_22;
  }
  v9 = v8;
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E0CA2390], v8);
  v30 = 0;
  v29[0] = (*(_BYTE *)(a1 + 45) << 6) | (*(_BYTE *)(a1 + 44) << 7) | (32 * *(_BYTE *)(a1 + 46)) | (16
                                                                                                 * *(_BYTE *)(a1 + 47)) | (8 * *(_BYTE *)(a1 + 48)) | (4 * *(_BYTE *)(a1 + 49)) | (2 * *(_BYTE *)(a1 + 50)) | *(_BYTE *)(a1 + 51);
  v29[1] = (*(_BYTE *)(a1 + 53) << 6) | (*(_BYTE *)(a1 + 52) << 7) | (32 * *(_BYTE *)(a1 + 54)) | (16
                                                                                                 * *(_BYTE *)(a1 + 55)) | (8 * *(_BYTE *)(a1 + 56));
  v10 = CFDataCreate(0, v29, 6);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v20 = AVE_Log_CheckConsole(0x2Eu);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL\n", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13046, "cf_constraintIndicatorFlags != __null");
        v23 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v23, 46, v28, "CreateTemporalLevelInfoDictionary", 13046, "cf_constraintIndicatorFlags != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | cf_constraintIndicatorFlags == NULL", v21, 46, v22, "CreateTemporalLevelInfoDictionary", 13046, "cf_constraintIndicatorFlags != __null");
      }
    }
    CFRelease(v5);
    v24 = v9;
LABEL_22:
    CFRelease(v24);
    return 0;
  }
  v11 = v10;
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E0CA2380], v10);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA2388], *(_DWORD *)(a1 + 60), v5);
  CFRelease(v9);
  CFRelease(v11);
  return v5;
}

#error "1B5556688: too big function (funcsize=0)"

uint64_t AVE_setVuiAspectRatio(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = result;
  v4 = a2;
  do
  {
    if (v3 <= v4)
      v4 %= v3;
    else
      v3 %= v4;
  }
  while (v3 && v4);
  if (v3)
    v4 = v3;
  v5 = (int)result / v4;
  v6 = a2 / v4;
  if (v5 == 1 && v6 == 1)
  {
    v7 = 1;
LABEL_12:
    *(_BYTE *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = v7;
    return result;
  }
  if (v6 == 33)
  {
    switch(v5)
    {
      case '(':
        v7 = 5;
        goto LABEL_12;
      case '@':
        v7 = 12;
        goto LABEL_12;
      case 'P':
        v7 = 9;
        goto LABEL_12;
    }
LABEL_35:
    *(_BYTE *)(a3 + 1) = 1;
    *(_DWORD *)(a3 + 4) = 255;
LABEL_36:
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 12) = v6;
    return result;
  }
  if (v6 == 11)
  {
    v7 = 2;
    switch(v5)
    {
      case 10:
        v7 = 3;
        goto LABEL_12;
      case 11:
      case 13:
      case 14:
      case 17:
      case 19:
      case 21:
      case 22:
      case 23:
        goto LABEL_35;
      case 12:
        goto LABEL_12;
      case 15:
        v7 = 11;
        goto LABEL_12;
      case 16:
        v7 = 4;
        goto LABEL_12;
      case 18:
        v7 = 10;
        goto LABEL_12;
      case 20:
        v7 = 7;
        goto LABEL_12;
      case 24:
        v7 = 6;
        goto LABEL_12;
      default:
        if (v5 != 32)
          goto LABEL_35;
        v7 = 8;
        break;
    }
    goto LABEL_12;
  }
  if (v5 == 160 && v6 == 99)
  {
    v7 = 13;
    goto LABEL_12;
  }
  if (v5 == 4 && v6 == 3)
  {
    v7 = 14;
    goto LABEL_12;
  }
  if (v5 == 3 && v6 == 2)
  {
    v7 = 15;
    goto LABEL_12;
  }
  if (v5 == 2 && v6 == 1)
    v8 = 16;
  else
    v8 = 255;
  *(_BYTE *)(a3 + 1) = 1;
  *(_DWORD *)(a3 + 4) = v8;
  if (v5 != 2 || v6 != 1)
    goto LABEL_36;
  return result;
}

uint64_t AVE_HEVC_SetQuality(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  const char *v21;

  v4 = a1 + 18484;
  v5 = (int)(a2 + 0.5);
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    v6 = AVE_Log_CheckConsole(0x1Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %f %p\n", CurrTime, 30, LevelStr, "AVE_HEVC_SetQuality", a2, (const void *)a1);
      v9 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", v9, 30, v21, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %f %p", CurrTime, 30, LevelStr, "AVE_HEVC_SetQuality", a2, (const void *)a1);
    }
  }
  if (v5 > 0x63)
  {
    if ((_DWORD)v5 == 100)
    {
      v13 = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      *(_OWORD *)(a1 + 1816) = 0u;
      *(_BYTE *)(a1 + 118451) = 1;
      *(_BYTE *)(v4 + 380) = 1;
      *(_DWORD *)v4 = 0;
    }
    else
    {
      v13 = 4294966295;
    }
    goto LABEL_27;
  }
  v10 = *(_DWORD *)(a1 + 103100);
  if (!v10)
  {
    if (*(_BYTE *)(v4 + 365))
    {
      v11 = 0;
      v12 = Quality2QPHEIF[v5];
      goto LABEL_17;
    }
    v12 = Quality2QPHEVC[v5];
LABEL_16:
    v11 = 1;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v4 + 365))
  {
    v12 = Quality2QPHEVC10Bit[v5];
    goto LABEL_16;
  }
  v11 = 0;
  v12 = Quality2QPHEIF10Bit[v5];
LABEL_17:
  *(double *)(a1 + 1816) = (double)(v12 + 6 * v10);
  *(_DWORD *)(a1 + 1824) = v12;
  *(_DWORD *)(a1 + 1828) = v12;
  *(_DWORD *)(a1 + 1832) = v12;
  *(_BYTE *)(v4 + 379) = 1;
  if (v11)
  {
    if (!*(_BYTE *)(v4 + 288))
    {
      v13 = 0;
      *(_BYTE *)(v4 + 288) = 1;
      *(_DWORD *)(a1 + 196) = 8;
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 196) != 8 && AVE_Log_CheckLevel(0x1Eu, 5))
    {
      v14 = AVE_Log_CheckConsole(0x1Eu);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(5);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d\n", v15, 30, v16, "AVE_HEVC_SetQuality", 868, a2, (const void *)a1, *(_DWORD *)(a1 + 196));
        v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(5);
      }
      syslog(3, "%lld %d AVE %s: %s:%d Quality set with wrong RC mode %f %p %d", v15);
    }
  }
  v13 = 0;
LABEL_27:
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    v17 = AVE_Log_CheckConsole(0x1Eu);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %f %p %d\n", v18, 30, v19, "AVE_HEVC_SetQuality", a2, (const void *)a1, v13);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %f %p %d");
  }
  return v13;
}

uint64_t AVE_HEVCStartSession(const void *a1, const void *a2, unint64_t a3, const void *a4)
{
  int v4;
  unint64_t v7;
  uint64_t DerivedStorage;
  _DWORD *v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v13;
  pthread_mutex_t *v14;
  uint64_t v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  unsigned int v37;
  uint64_t updated;
  int v39;
  __uint64_t v40;
  const char *v41;
  __uint64_t v42;
  pthread_mutex_t *v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  uint64_t v47;
  __uint64_t v48;
  const char *v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  __uint64_t v53;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t i;
  int v59;
  uint64_t v60;
  __uint64_t v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  __uint64_t v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  pthread_mutex_t *v70;

  v4 = a3;
  v7 = HIDWORD(a3);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = AVE_DW_Get();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v10 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %dx%d %p\n", CurrTime, 20, LevelStr, "AVE_HEVCStartSession", a1, a2, v4, v7, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %dx%d %p", CurrTime, 20);
  }
  if (DerivedStorage)
  {
    v13 = DerivedStorage + 183408;
    v14 = (pthread_mutex_t *)(DerivedStorage + 183416);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    v15 = *(_QWORD *)(DerivedStorage + 183616);
    v16 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v15, 3u, v16);
    kdebug_trace();
    if (*(_DWORD *)(DerivedStorage + 183480))
      *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
    if (a1)
    {
      if (a2)
      {
        if (v4 <= 1)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v30 = AVE_Log_CheckConsole(3u);
            v31 = AVE_GetCurrTime();
            v32 = AVE_Log_GetLevelStr(4);
            if (v30)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v31, 3, v32, "AVE_HEVCStartSession", 11279, "dimensions.width >= 2", v4, v7);
              v31 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              v14 = (pthread_mutex_t *)(DerivedStorage + 183416);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v31);
          }
        }
        else if ((int)v7 <= 1)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v34 = AVE_Log_CheckConsole(3u);
            v35 = AVE_GetCurrTime();
            v36 = AVE_Log_GetLevelStr(4);
            if (v34)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v35, 3, v36, "AVE_HEVCStartSession", 11280, "dimensions.height >= 2", v4, v7);
              v35 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              v14 = (pthread_mutex_t *)(DerivedStorage + 183416);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v35);
          }
        }
        else
        {
          *(_QWORD *)DerivedStorage = a2;
          *(_DWORD *)(DerivedStorage + 1880) = v4;
          *(_DWORD *)(DerivedStorage + 1884) = v7;
          *(_DWORD *)(DerivedStorage + 19444) = v4;
          *(_DWORD *)(DerivedStorage + 19448) = v7;
          AVE_PrepareCropParams(DerivedStorage);
          if (!AVE_Enc_CheckResolution(*(_DWORD *)(DerivedStorage + 183536), 1, *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884), 0))
          {
            *(_QWORD *)(DerivedStorage + 16) = a4;
            if (a4)
              CFRetain(a4);
            AVE_SetEncoderDefault(DerivedStorage);
            v37 = *(_DWORD *)(DerivedStorage + 103100) + 8;
            if (v37 <= *(_DWORD *)(DerivedStorage + 103104) + 8)
              v37 = *(_DWORD *)(DerivedStorage + 103104) + 8;
            updated = AVE_UpdatePixelBufferDict(*(unsigned int *)(DerivedStorage + 183532), *(unsigned int *)(DerivedStorage + 183528), 30, 1, *(_DWORD *)(DerivedStorage + 19444), *(_DWORD *)(DerivedStorage + 19448), *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884), v37, 0, 0x414C4C20u, 1, *(_QWORD *)DerivedStorage);
            if ((_DWORD)updated)
            {
              v33 = updated;
              if (!AVE_Log_CheckLevel(3u, 4))
                goto LABEL_49;
              v70 = (pthread_mutex_t *)(DerivedStorage + 183416);
              v39 = AVE_Log_CheckConsole(3u);
              v40 = AVE_GetCurrTime();
              v41 = AVE_Log_GetLevelStr(4);
              if (v39)
              {
                printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.\n", v40, 3, v41, "AVE_HEVCStartSession", 11328, "err == noErr");
                v42 = AVE_GetCurrTime();
                v67 = AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v42, 3, v67, "AVE_HEVCStartSession", 11328, "err == noErr");
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_UpdatePixelBufferDict failed.", v40, 3, v41, "AVE_HEVCStartSession", 11328, "err == noErr");
              }
              goto LABEL_75;
            }
            *(_QWORD *)v13 = 30566;
            *(_DWORD *)(DerivedStorage + 184952) = 0;
            *(_DWORD *)(DerivedStorage + 184960) = -1;
            *(_DWORD *)(DerivedStorage + 18384) = 0;
            *(_DWORD *)(DerivedStorage + 185472) = 0;
            if (*(int *)(DerivedStorage + 228) >= 1)
              v55 = *(_DWORD *)(DerivedStorage + 228);
            else
              v55 = 30;
            AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183608), v55, 0, 0);
            *(_DWORD *)(DerivedStorage + 18632) = v9[196];
            v56 = AVE_VCP_Create(*(unsigned int *)(DerivedStorage + 183540), *(_DWORD *)(DerivedStorage + 18760), *(unsigned int *)(DerivedStorage + 1880), *(unsigned int *)(DerivedStorage + 1884));
            *(_QWORD *)(DerivedStorage + 183632) = v56;
            if (v56)
            {
              v57 = v9[27];
              if (v57)
                *(_DWORD *)(DerivedStorage + 19456) = v57;
              for (i = 0; i != 168; i += 28)
              {
                v59 = v9[i + 29];
                if ((v59 & 0x80000000) == 0)
                  *(_DWORD *)(DerivedStorage + 19464 + i * 4) = v59;
              }
              v60 = *(_QWORD *)(DerivedStorage + 183616);
              v61 = AVE_GetCurrTime();
              AVE_TimeStats_AddEndTime(v60, 3u, v61);
            }
            else if (AVE_Log_CheckLevel(0x14u, 4))
            {
              v70 = (pthread_mutex_t *)(DerivedStorage + 183416);
              v62 = AVE_Log_CheckConsole(0x14u);
              v63 = AVE_GetCurrTime();
              v64 = AVE_Log_GetLevelStr(4);
              if (v62)
              {
                printf("%lld %d AVE %s: %s:%d %s | failed to create VCP instance %p %d %d %d\n", v63, 20, v64, "AVE_HEVCStartSession", 11353, "encoderPrivateStorage->pcVCP != __null", (const void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 183540), *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
                v65 = AVE_GetCurrTime();
                v69 = AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create VCP instance %p %d %d %d", v65, 20, v69);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create VCP instance %p %d %d %d", v63, 20, v64);
              }
              v33 = 0;
LABEL_75:
              v14 = v70;
LABEL_49:
              if (*(_DWORD *)(DerivedStorage + 183480))
              {
                *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
                if (AVE_Log_CheckLevel(0x18u, 6))
                {
                  v43 = v14;
                  v44 = AVE_Log_CheckConsole(0x18u);
                  v45 = AVE_GetCurrTime();
                  v46 = AVE_Log_GetLevelStr(6);
                  v47 = *(_QWORD *)(v13 + 88) - *(_QWORD *)(v13 + 80);
                  if (v44)
                  {
                    printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms\n", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                    v48 = AVE_GetCurrTime();
                    v49 = AVE_Log_GetLevelStr(6);
                    syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v48, 24, v49, *(_DWORD *)(v13 + 132), *(_QWORD *)(v13 + 88) - *(_QWORD *)(v13 + 80));
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartSession took %lld ms", v45, 24, v46, *(_DWORD *)(v13 + 132), v47);
                  }
                  v14 = v43;
                }
              }
              kdebug_trace();
              pthread_mutex_unlock(v14);
              goto LABEL_56;
            }
            v33 = 0;
            goto LABEL_49;
          }
          if (AVE_Log_CheckLevel(0x16u, 4))
          {
            v70 = (pthread_mutex_t *)(DerivedStorage + 183416);
            v17 = AVE_Log_CheckConsole(0x16u);
            v18 = AVE_GetCurrTime();
            v19 = AVE_Log_GetLevelStr(4);
            if (v17)
            {
              printf("%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d\n", v18, 22, v19, "AVE_HEVCStartSession", 11304, "ret == 0", *(_DWORD *)(DerivedStorage + 1880), *(_DWORD *)(DerivedStorage + 1884));
              v18 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | resolution is not out of range %d %d", v18);
            v33 = 4294954394;
            goto LABEL_75;
          }
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        v27 = AVE_Log_CheckConsole(3u);
        v28 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v28, 3, v29, "AVE_HEVCStartSession", 11278, "session");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          v14 = (pthread_mutex_t *)(DerivedStorage + 183416);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      v24 = AVE_Log_CheckConsole(3u);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v25, 3, v26, "AVE_HEVCStartSession", 11277, "encoder");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        v14 = (pthread_mutex_t *)(DerivedStorage + 183416);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    v33 = 4294954394;
    goto LABEL_49;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v20 = AVE_Log_CheckConsole(3u);
    v21 = AVE_GetCurrTime();
    v22 = AVE_Log_GetLevelStr(4);
    if (v20)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCStartSession", 11262, "encoderPrivateStorage");
      v23 = AVE_GetCurrTime();
      v66 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v23, 3, v66, "AVE_HEVCStartSession", 11262, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v22, "AVE_HEVCStartSession", 11262, "encoderPrivateStorage");
    }
  }
  kdebug_trace();
  v33 = 4294954384;
LABEL_56:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v50 = AVE_Log_CheckConsole(0x14u);
    v51 = AVE_GetCurrTime();
    v52 = AVE_Log_GetLevelStr(6);
    if (v50)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %dx%d %p %d\n", v51, 20, v52, "AVE_HEVCStartSession", a1, a2, v4, v7, a4, v33);
      v53 = AVE_GetCurrTime();
      v68 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v53, 20, v68);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %dx%d %p %d", v51, 20, v52);
    }
  }
  return v33;
}

uint64_t AVE_HEVC_EncodeFrame(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  uint64_t v13;
  __uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v9 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v9)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeFrame");
      v12 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v12, 20, v22, "AVE_HEVC_EncodeFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeFrame");
    }
  }
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, CFSTR("SessionIndicator")))
      AVE_TimeStats_Restart(*(_QWORD *)(DerivedStorage + 183616));
    if (!*(_DWORD *)(DerivedStorage + 183412))
    {
      v13 = *(_QWORD *)(DerivedStorage + 183616);
      v14 = AVE_GetCurrTime();
      AVE_TimeStats_AddStartTime(v13, 5u, v14);
      if (*(int *)(DerivedStorage + 228) >= 1)
        v15 = *(_DWORD *)(DerivedStorage + 228);
      else
        v15 = 30;
      AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183608), v15, 0, 0);
    }
    v16 = AVE_HEVC_Encode();
  }
  else
  {
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      v17 = AVE_Log_CheckConsole(0x14u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v18, 20, v19, "AVE_HEVC_EncodeFrame", 12660, "pEnc", a1);
        v20 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v20);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v18);
      }
    }
    v16 = 4294954384;
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  return v16;
}

uint64_t AVE_HEVCCompleteFrames(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  uint64_t v7;
  __uint64_t v8;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  uint64_t v23;
  __uint64_t v24;
  uint64_t v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  const char *v31;
  const char *v32;
  __uint64_t v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCCompleteFrames", a1);
      v6 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v31, "AVE_HEVCCompleteFrames", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCCompleteFrames", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v21, 3, v22, "AVE_HEVCCompleteFrames", 12865, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  v7 = *(_QWORD *)(DerivedStorage + 183616);
  v8 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v7, 6u, v8);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183480))
    *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
  v9 = AVE_GetCurrTime();
  if (*(_DWORD *)(DerivedStorage + 183408) == 30568)
  {
    v33 = v9;
    if (AVE_USL_Drv_Complete(*(_QWORD *)(DerivedStorage + 24), &v33))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v10 = AVE_Log_CheckConsole(3u);
        v11 = AVE_GetCurrTime();
        v12 = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_HEVCCompleteFrames", 12890, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_24:
      v25 = 4294954384;
      goto LABEL_25;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183480))
  {
    *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v13 = AVE_Log_CheckConsole(0x18u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(6);
      v16 = *(_DWORD *)(DerivedStorage + 183540);
      v17 = *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488);
      if (v13)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183412) - 1, v17);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v18, 24, v19, *(_DWORD *)(DerivedStorage + 183540), *(_DWORD *)(DerivedStorage + 183412) - 1, *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v14, 24, v15, v16, *(_DWORD *)(DerivedStorage + 183412) - 1, v17);
      }
    }
  }
  v23 = *(_QWORD *)(DerivedStorage + 183616);
  v24 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v23, 6u, v24);
  v25 = 0;
LABEL_25:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v26 = AVE_Log_CheckConsole(0x14u);
    v27 = AVE_GetCurrTime();
    v28 = AVE_Log_GetLevelStr(7);
    if (v26)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
      v29 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v29, 20, v32, "AVE_HEVCCompleteFrames", a1, v25);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v27, 20, v28, "AVE_HEVCCompleteFrames", a1, v25);
    }
  }
  return v25;
}

uint64_t AVE_HEVCCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef *v4;
  _BYTE *v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  CFTypeRef v14;
  CFIndex v15;
  int v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  CFIndex v22;
  int v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  __uint64_t v34;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = (CFTypeRef *)(DerivedStorage + 183520);
    v5 = (_BYTE *)(DerivedStorage + 18849);
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      v6 = AVE_Log_CheckConsole(0x1Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(8);
      if (v6)
      {
        printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary\n", CurrTime, 30, LevelStr);
        v9 = AVE_GetCurrTime();
        v36 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", v9, 30, v36);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCopySupportedPropertyDictionary", CurrTime, 30, LevelStr);
      }
    }
    if (*v5)
    {
      v14 = v4[17];
      if (v14)
      {
        v15 = CFGetRetainCount(v14);
        if (v15 != 1)
        {
          v16 = v15;
          if (AVE_Log_CheckLevel(0x1Eu, 5))
          {
            v17 = AVE_Log_CheckConsole(0x1Eu);
            v18 = AVE_GetCurrTime();
            v19 = AVE_Log_GetLevelStr(5);
            if (v17)
            {
              v20 = v16;
              printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d\n", v18, 30, v19, v16);
              v21 = AVE_GetCurrTime();
              v38 = AVE_Log_GetLevelStr(5);
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v21, 30, v38, v20);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionaryHEIF = %d", v18, 30, v19, v16);
            }
          }
        }
        CFRetain(v4[17]);
        v29 = v4[17];
        goto LABEL_27;
      }
    }
    else if (*v4)
    {
      v22 = CFGetRetainCount(*v4);
      if (v22 != 1)
      {
        v23 = v22;
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          v24 = AVE_Log_CheckConsole(0x1Eu);
          v25 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(5);
          if (v24)
          {
            v27 = v23;
            printf("%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d\n", v25, 30, v26, v23);
            v28 = AVE_GetCurrTime();
            v39 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v28, 30, v39, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: count for supportedPropertyDictionary = %d", v25, 30, v26, v23);
          }
        }
      }
      CFRetain(*v4);
      v29 = *v4;
      goto LABEL_27;
    }
    v29 = 0;
LABEL_27:
    v30 = 0;
    *a2 = v29;
    goto LABEL_28;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v10 = AVE_Log_CheckConsole(3u);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 12953, "encoderPrivateStorage");
      v13 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v13, 3, v37, "AVE_HEVCCopySupportedPropertyDictionary", 12953, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v11, 3, v12, "AVE_HEVCCopySupportedPropertyDictionary", 12953, "encoderPrivateStorage");
    }
  }
  v30 = 4294954384;
LABEL_28:
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    v31 = AVE_Log_CheckConsole(0x1Eu);
    v32 = AVE_GetCurrTime();
    v33 = AVE_Log_GetLevelStr(8);
    if (v31)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d \n", v32, 30, v33, v30);
      v34 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v34, 30, v40, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCCopySupportedPropertyDictionary err %d ", v32, 30, v33, v30);
    }
  }
  return v30;
}

uint64_t AVE_HEVCSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  CFTypeID TypeID;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  __uint64_t v39;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  _QWORD v45[131];

  v45[130] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (DerivedStorage)
  {
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    if (AVE_Log_CheckLevel(0x1Eu, 8))
    {
      v5 = AVE_Log_CheckConsole(0x1Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(8);
      if (v5)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s\n", CurrTime, 30, LevelStr, "AVE_HEVCSetProperties");
        v8 = AVE_GetCurrTime();
        v41 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", v8, 30, v41, "AVE_HEVCSetProperties");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: ENTER %s", CurrTime, 30, LevelStr, "AVE_HEVCSetProperties");
      }
    }
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      v14 = 0;
      v15 = 0;
      v45[0] = *MEMORY[0x1E0CED0A8];
      v45[1] = CFSTR("StrictKeyFrameInterval");
      v16 = *MEMORY[0x1E0CECEC8];
      v45[2] = *MEMORY[0x1E0CECEB0];
      v45[3] = v16;
      v17 = *MEMORY[0x1E0CED180];
      v45[4] = *MEMORY[0x1E0CECEF0];
      v45[5] = v17;
      v18 = *MEMORY[0x1E0CED1F8];
      v45[6] = CFSTR("EnableWeightedPrediction");
      v45[7] = v18;
      v45[8] = *MEMORY[0x1E0CECFD0];
      v45[9] = CFSTR("MaximumRealTimeFrameRate");
      v19 = *MEMORY[0x1E0CECF68];
      v45[10] = *MEMORY[0x1E0CECF78];
      v45[11] = v19;
      v20 = *MEMORY[0x1E0CECF48];
      v45[12] = *MEMORY[0x1E0CECFF0];
      v45[13] = v20;
      v21 = *MEMORY[0x1E0CED290];
      v45[14] = *MEMORY[0x1E0CED238];
      v45[15] = v21;
      v22 = *MEMORY[0x1E0CECFC8];
      v45[16] = *MEMORY[0x1E0CED140];
      v45[17] = v22;
      v45[18] = *MEMORY[0x1E0CED0B0];
      v45[19] = CFSTR("StrictKeyFrameIntervalDuration");
      v23 = *MEMORY[0x1E0CED220];
      v45[20] = *MEMORY[0x1E0CED248];
      v45[21] = v23;
      v45[22] = CFSTR("BPictures");
      v45[23] = CFSTR("AllowOpenGOP");
      v45[24] = CFSTR("LookAheadFrames");
      v45[25] = CFSTR("PreemptiveLoadBalancing");
      v45[26] = CFSTR("SpatialAdaptiveQPLevel");
      v45[27] = CFSTR("InitialQPI");
      v45[28] = CFSTR("InitialQPP");
      v45[29] = CFSTR("InitialQPB");
      v24 = *MEMORY[0x1E0CED178];
      v45[30] = *MEMORY[0x1E0CED110];
      v45[31] = v24;
      v45[32] = CFSTR("DeblockingFiltering");
      v45[33] = CFSTR("DebugMetadataSEI");
      v25 = *MEMORY[0x1E0CED068];
      v45[34] = CFSTR("DebugMetadataSEIuseEPB");
      v45[35] = v25;
      v45[36] = *MEMORY[0x1E0CED218];
      v45[37] = CFSTR("LatencyMode");
      v26 = *MEMORY[0x1E0CECEF8];
      v45[38] = CFSTR("MCTFStrengthLevel");
      v45[39] = v26;
      v27 = *MEMORY[0x1E0CED250];
      v45[40] = CFSTR("EnableUserQPForFacetime");
      v45[41] = v27;
      v45[42] = CFSTR("DPBRequirements");
      v45[43] = CFSTR("EnableUserRefForFacetime");
      v28 = *MEMORY[0x1E0CED260];
      v45[44] = *MEMORY[0x1E0CED1A0];
      v45[45] = v28;
      v45[46] = CFSTR("EnableStatsCollect");
      v45[47] = CFSTR("EnableMultiReferenceP");
      v45[48] = CFSTR("MultiReferencePSpacing");
      v45[49] = CFSTR("log2_max_minus4");
      v29 = *MEMORY[0x1E0CED060];
      v45[50] = *MEMORY[0x1E0CED128];
      v45[51] = v29;
      v45[52] = *MEMORY[0x1E0CED138];
      v45[53] = CFSTR("CodedBuffersOverride");
      v45[54] = CFSTR("EnableMBInputCtrl");
      v45[55] = CFSTR("UserRPSForFaceTime");
      v30 = *MEMORY[0x1E0CED278];
      v45[56] = *MEMORY[0x1E0CED270];
      v45[57] = v30;
      v45[58] = CFSTR("ChromaQPIndexOffsetMultiPPS");
      v45[59] = CFSTR("iChatUsageString");
      v45[60] = CFSTR("UseReferenceCompressedBuffers");
      v45[61] = CFSTR("ChromaQpOffset");
      v45[62] = CFSTR("EnableHdrPqRC");
      v45[63] = CFSTR("ForceRefUncompressed");
      v45[64] = CFSTR("BaseLayerFrameRate");
      v45[65] = *MEMORY[0x1E0CED198];
      v45[66] = *MEMORY[0x1E0CED2A0];
      v45[67] = *MEMORY[0x1E0CED298];
      v45[68] = *MEMORY[0x1E0CED098];
      v45[69] = *MEMORY[0x1E0CED0C0];
      v45[70] = *MEMORY[0x1E0CED190];
      v45[71] = *MEMORY[0x1E0CECF98];
      v45[72] = CFSTR("EnableRCFW");
      v45[73] = CFSTR("EnableRCDriver");
      v45[74] = CFSTR("RCMode");
      v45[75] = CFSTR("SetDbgInternalParams");
      v45[76] = CFSTR("ForceSliceRPS");
      v45[77] = CFSTR("EdgeReplication");
      v45[78] = CFSTR("UseHWTileOffsets");
      v45[79] = *MEMORY[0x1E0CED0A0];
      v45[80] = CFSTR("MaximizePowerEfficiency");
      v45[81] = CFSTR("RelaxAverageBitRateTarget");
      v45[82] = CFSTR("IntraRefreshFrames");
      v45[83] = CFSTR("AllocCodedBufferHalfSize");
      v45[84] = *MEMORY[0x1E0CED090];
      v45[85] = *MEMORY[0x1E0CECF60];
      v45[86] = *MEMORY[0x1E0CECFB0];
      v45[87] = CFSTR("EnableTimingInfoMetadata");
      v45[88] = CFSTR("EnableContentColourVolumeSEI");
      v45[89] = *MEMORY[0x1E0CED1D8];
      v45[90] = CFSTR("DroppablePFramesOnly");
      v45[91] = *MEMORY[0x1E0CED0D8];
      v45[92] = CFSTR("SVEMap");
      v45[93] = CFSTR("SVENum");
      v45[94] = CFSTR("SVESchedMode");
      v45[95] = CFSTR("DLBType");
      v45[96] = CFSTR("CmdTimeOutMode");
      v45[97] = CFSTR("RCFeatureOn");
      v45[98] = CFSTR("RCFeatureOff");
      v45[99] = *MEMORY[0x1E0CED070];
      v45[100] = *MEMORY[0x1E0CED170];
      v45[101] = CFSTR("lrmeRCPassNum");
      v45[102] = CFSTR("EncodesDisparity");
      v45[103] = CFSTR("EncodesDepth");
      v45[104] = *MEMORY[0x1E0CED0F0];
      v45[105] = CFSTR("EnableVUI");
      v45[106] = CFSTR("EnableVUIBitstreamRestriction");
      v45[107] = CFSTR("EnableMultiSliceStats");
      v45[108] = CFSTR("SessionName");
      v45[109] = *MEMORY[0x1E0CED080];
      v45[110] = *MEMORY[0x1E0CED088];
      v45[111] = *MEMORY[0x1E0CED078];
      v45[112] = *MEMORY[0x1E0CED1E0];
      v45[113] = *MEMORY[0x1E0CED1E8];
      v45[114] = *MEMORY[0x1E0CED1F0];
      v45[115] = CFSTR("EncoderEncryptionData");
      v45[116] = *MEMORY[0x1E0CECF58];
      v45[117] = CFSTR("VariableBitRate");
      v45[118] = *MEMORY[0x1E0CED0E0];
      v45[119] = *MEMORY[0x1E0CED0E8];
      v45[120] = CFSTR("RecommendedParallelizationLimit");
      v45[121] = CFSTR("RecommendedParallelizedSubdivisionMinimumDuration");
      v45[122] = CFSTR("RecommendedParallelizedSubdivisionMinimumFrameCount");
      v45[123] = CFSTR("ReconstructedPixelBufferAttributes");
      v45[124] = CFSTR("ReconstructedPixelBuffer");
      v45[125] = CFSTR("MotionEstimationSearchMode");
      v45[126] = CFSTR("SupportedMotionSearchModes");
      v45[127] = *MEMORY[0x1E0CED130];
      v45[128] = CFSTR("CalculateMeanSquaredError");
      v45[129] = CFSTR("DebugFeature");
      do
      {
        v31 = (const void *)v45[v14];
        if (CFDictionaryContainsKey(a2, v31))
        {
          CFDictionaryGetValue(a2, v31);
          v15 = AVE_SetProperty_internal(v4, v31);
        }
        ++v14;
      }
      while (v14 != 130);
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v32 = AVE_Log_CheckConsole(3u);
        v33 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed\n", v33, 3, v34, "AVE_HEVCSetProperties", 15169, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
          v35 = AVE_GetCurrTime();
          v43 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v35, 3, v43, "AVE_HEVCSetProperties", 15169, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryGetTypeID failed", v33, 3, v34, "AVE_HEVCSetProperties", 15169, "CFDictionaryGetTypeID() == CFGetTypeID( propertyDictionary)");
        }
      }
      v15 = 4294954394;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v9 = AVE_Log_CheckConsole(3u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v10, 3, v11, "AVE_HEVCSetProperties", 15164, "encoderPrivateStorage");
        v12 = AVE_GetCurrTime();
        v42 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v12, 3, v42, "AVE_HEVCSetProperties", 15164, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v10, 3, v11, "AVE_HEVCSetProperties", 15164, "encoderPrivateStorage");
      }
    }
    v15 = 4294954384;
  }
  if (AVE_Log_CheckLevel(0x1Eu, 8))
  {
    v36 = AVE_Log_CheckConsole(0x1Eu);
    v37 = AVE_GetCurrTime();
    v38 = AVE_Log_GetLevelStr(8);
    if (v36)
    {
      printf("%lld %d AVE %s: FIG: EXIT %s err %d \n", v37, 30, v38, "AVE_HEVCSetProperties", v15);
      v39 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v39, 30, v44, "AVE_HEVCSetProperties", v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT %s err %d ", v37, 30, v38, "AVE_HEVCSetProperties", v15);
    }
  }
  if (v4)
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 183416));
  return v15;
}

uint64_t AVE_HEVCPrepareToEncodeFrames()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int *v2;
  int v3;
  __uint64_t v4;
  const char *v5;
  __uint64_t v6;
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v10;
  __uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  unsigned int v36;
  uint64_t v37;
  __uint64_t v38;
  const char *v39;
  uint64_t v40;
  __uint64_t v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = (unsigned int *)(DerivedStorage + 183408);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v7 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCPrepareToEncodeFrames", 15351, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_24;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    v4 = AVE_GetCurrTime();
    v5 = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames\n", v4, 20, v5);
      v6 = AVE_GetCurrTime();
      v42 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v6, 20, v42);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeFrames", v4, 20, v5);
    }
  }
  v10 = *((_QWORD *)v2 + 26);
  v11 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v10, 2u, v11);
  kdebug_trace();
  if (v2[18])
    *((_QWORD *)v2 + 10) = AVE_GetCurrTime();
  AVE_GetCurrTime();
  if (*v2 != 30566)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15415, "false", *v2);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v19, 3, v20, "AVE_HEVCPrepareToEncodeFrames", 15415, "false", *v2);
    }
    goto LABEL_24;
  }
  v12 = AVE_ManageSessionSettings(v1);
  if ((_DWORD)v12)
  {
    v13 = v12;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15374, "err == noErr");
        v17 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v17, 3, v43, "AVE_HEVCPrepareToEncodeFrames", 15374, "err == noErr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v15, 3, v16, "AVE_HEVCPrepareToEncodeFrames", 15374, "err == noErr");
      }
    }
    goto LABEL_25;
  }
  *(_DWORD *)(v1 + 18672) = 1;
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    v21 = AVE_Log_CheckConsole(0x1Eu);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(6);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v22, 30, v23);
      v24 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v24, 30, v44);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v22, 30, v23);
    }
  }
  if (AVE_USL_Drv_Prepare())
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v30 = AVE_Log_CheckConsole(3u);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v31, 3, v32, "AVE_HEVCPrepareToEncodeFrames", 15407, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
LABEL_24:
    v13 = 4294954384;
    goto LABEL_25;
  }
  *v2 = 30567;
  if (v2[18])
  {
    *((_QWORD *)v2 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v33 = AVE_Log_CheckConsole(0x18u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(6);
      v36 = v2[33];
      v37 = *((_QWORD *)v2 + 11) - *((_QWORD *)v2 + 10);
      if (v33)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us\n", v34, 24, v35, v36, 0, v37);
        v38 = AVE_GetCurrTime();
        v39 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v38, 24, v39, v2[33], 0, *((_QWORD *)v2 + 11) - *((_QWORD *)v2 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeFrames took %lld us", v34, 24, v35, v36, 0, v37);
      }
    }
  }
  v40 = *((_QWORD *)v2 + 26);
  v41 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v40, 2u, v41);
  v13 = 0;
LABEL_25:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v25 = AVE_Log_CheckConsole(0x14u);
    v26 = AVE_GetCurrTime();
    v27 = AVE_Log_GetLevelStr(7);
    if (v25)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x\n", v26, 20, v27, v13);
      v28 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v28, 20, v45, v13);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeFrames err = 0x%08x", v26, 20, v27, v13);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 183416));
  return v13;
}

uint64_t AVE_HEVCBeginPass(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  _DWORD *v10;
  pthread_mutex_t *v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  __uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  __uint64_t v45;
  const char *v47;
  const char *v48;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v7 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p 0x%x %p\n", CurrTime, 20, LevelStr, "AVE_HEVCBeginPass", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p 0x%x %p", CurrTime);
  }
  if (DerivedStorage)
  {
    v10 = (_DWORD *)(DerivedStorage + 183408);
    v11 = (pthread_mutex_t *)(DerivedStorage + 183416);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      v12 = AVE_Log_CheckConsole(0xD8u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(7);
      v15 = *(_DWORD *)(DerivedStorage + 183564);
      if (v12)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)\n", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183560), v15);
        v16 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v16, 216, v17, a2, *(_DWORD *)(DerivedStorage + 183560), *(_DWORD *)(DerivedStorage + 183564));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass called. beginPassFlags = %d (begin %d end %d)", v13, 216, v14, a2, *(_DWORD *)(DerivedStorage + 183560), v15);
      }
    }
    if (!*(_QWORD *)(DerivedStorage + 183552))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v27 = AVE_Log_CheckConsole(3u);
        v28 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.\n", v28, 3, v29, "AVE_HEVCBeginPass", 11553, "encoderPrivateStorage->multiPassStorage != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassStorage = NULL.");
      }
      goto LABEL_44;
    }
    v22 = *(_DWORD *)(DerivedStorage + 183560);
    if (v22 != *(_DWORD *)(DerivedStorage + 183564))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v30 = AVE_Log_CheckConsole(3u);
        v31 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v31, 3, v32, "AVE_HEVCBeginPass", 11554, "encoderPrivateStorage->multiPassBeginPassCounter == encoderPrivateStorage->multiPassEndPassCounter", v10[38], v10[39]);
          v31 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v31);
      }
      goto LABEL_44;
    }
    if (v22)
    {
      v23 = v22 + 1;
      *(_DWORD *)(DerivedStorage + 183560) = v23;
      if (v23 >= 3)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v24 = AVE_Log_CheckConsole(3u);
          v25 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(4);
          if (v24)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d\n", v25, 3, v26, "AVE_HEVCBeginPass", 11563, "false", v10[38]);
            v25 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->multiPassBeginPassCounter reached max %d", v25);
        }
LABEL_44:
        v33 = 4294954394;
LABEL_45:
        pthread_mutex_unlock(v11);
        goto LABEL_46;
      }
    }
    else
    {
      if (*v10 == 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v34 = AVE_Log_CheckConsole(3u);
          v35 = AVE_GetCurrTime();
          v36 = AVE_Log_GetLevelStr(4);
          if (v34)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run\n", v35, 3, v36, "AVE_HEVCBeginPass", 11557, "encoderPrivateStorage->SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_BeginPass called with SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
        }
        goto LABEL_44;
      }
      v23 = 1;
      *(_DWORD *)(DerivedStorage + 183560) = 1;
    }
    *(_DWORD *)(DerivedStorage + 18400) = v23;
    *(_DWORD *)(DerivedStorage + 183568) = a2;
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      v37 = AVE_Log_CheckConsole(0xD8u);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(7);
      v40 = v10[38];
      if (v37)
      {
        printf("%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d\n", v38, 216, v39, v40);
        v41 = AVE_GetCurrTime();
        v48 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v41, 216, v48, v10[38]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE FIG AVE_BeginPass encoderPrivateStorage->multiPassBeginPassCounter = %d", v38, 216, v39, v40);
      }
    }
    v33 = 0;
    goto LABEL_45;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v18 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v19, 3, v20, "AVE_HEVCBeginPass", 11545, "encoderPrivateStorage");
      v21 = AVE_GetCurrTime();
      v47 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v21, 3, v47, "AVE_HEVCBeginPass", 11545, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v19, 3, v20, "AVE_HEVCBeginPass", 11545, "encoderPrivateStorage");
    }
  }
  v33 = 4294954384;
LABEL_46:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v42 = AVE_Log_CheckConsole(0x14u);
    v43 = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(6);
    if (v42)
    {
      printf("%lld %d AVE %s: Exit %s %p 0x%x %p %d\n", v43, 20, v44, "AVE_HEVCBeginPass", a1, a2, a3, v33);
      v45 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v45, 20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p 0x%x %p %d", v43, 20);
    }
  }
  return v33;
}

uint64_t AVE_HEVCEndPass(const void *a1, _BYTE *a2, const void *a3)
{
  uint64_t DerivedStorage;
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  _DWORD *v10;
  pthread_mutex_t *v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  __int128 *v52;
  const __CFAllocator *v53;
  CFMutableArrayRef Mutable;
  __CFArray *v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  int v74;
  __uint64_t v75;
  const char *v76;
  int v77;
  __uint64_t v78;
  const char *v79;
  int v80;
  __uint64_t v81;
  const char *v82;
  int v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  int v87;
  __uint64_t v88;
  const char *v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  CFDictionaryRef v93;
  CFDictionaryRef v94;
  CFIndex Count;
  CFIndex v96;
  _OWORD *v97;
  const __CFDictionary *ValueAtIndex;
  __int128 v99;
  __int128 v100;
  int Pass;
  int v102;
  __uint64_t v103;
  const char *v104;
  int v105;
  __uint64_t v106;
  const char *v107;
  int v108;
  __uint64_t v109;
  const char *v110;
  const char *v111;
  const __CFAllocator *v112;
  _OWORD *v113;
  CMTimeRange theData;
  CMTimeRange range;
  CMTime end;
  CMTime start;
  CMTimeRange v118;
  CMTime rhs;
  CMTime lhs;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  CMTime v125;
  CMTime v126;
  CMTime v127;
  __int128 v128;
  CMTimeEpoch v129;
  __int128 v130;
  CMTimeEpoch epoch;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v7 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p\n", CurrTime, 20, LevelStr, "AVE_HEVCEndPass", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Enter %s %p %p %p", CurrTime);
  }
  if (DerivedStorage)
  {
    v10 = (_DWORD *)(DerivedStorage + 183408);
    v11 = (pthread_mutex_t *)(DerivedStorage + 183416);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      v12 = AVE_Log_CheckConsole(0xD8u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(7);
      if (v12)
      {
        printf("%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)\n", v13, 216, v14, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183568), *(_DWORD *)(DerivedStorage + 183560), *(_DWORD *)(DerivedStorage + 183564));
        v13 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: ENTER %s. beginPassFlags %d (begin %d end %d)", v13);
    }
    if (*v10 != 30568)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v29 = AVE_Log_CheckConsole(3u);
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
        if (v29)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run\n", v30, 3, v31, "AVE_HEVCEndPass", 11610, "encoderPrivateStorage->SessionStatus == AVE_CommonWrapper_SessionStatus_Run");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_EndPass called with SessionStatus != AVE_CommonWrapper_SessionStatus_Run");
      }
      goto LABEL_46;
    }
    if (!*(_QWORD *)(DerivedStorage + 183552))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v32 = AVE_Log_CheckConsole(3u);
        v33 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(4);
        if (v32)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.\n", v33, 3, v34, "AVE_HEVCEndPass", 11612, "encoderPrivateStorage->multiPassStorage != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassStorage = NULL.");
      }
      goto LABEL_46;
    }
    v19 = *(_DWORD *)(DerivedStorage + 183560);
    v20 = *(_DWORD *)(DerivedStorage + 183564);
    if (v19 != v20 + 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v35 = AVE_Log_CheckConsole(3u);
        v36 = AVE_GetCurrTime();
        v37 = AVE_Log_GetLevelStr(4);
        if (v35)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d\n", v36, 3, v37, "AVE_HEVCEndPass", 11618, "encoderPrivateStorage->multiPassBeginPassCounter == (encoderPrivateStorage->multiPassEndPassCounter + 1)", v10[38], v10[39]);
          v36 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: called with multiPassBeginPassCounter = %d, multiPassEndPassCounter = %d", v36);
      }
      goto LABEL_46;
    }
    v22 = *(_DWORD *)(DerivedStorage + 183568) != 1 && v20 == 0;
    *(_DWORD *)(DerivedStorage + 183564) = v19;
    if (a2)
      *a2 = v22;
    if (!v22)
    {
      v38 = 0;
LABEL_47:
      pthread_mutex_unlock(v11);
      goto LABEL_48;
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v23 = AVE_Log_CheckConsole(0xD8u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(6);
      v26 = *(_DWORD *)(DerivedStorage + 183412);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d\n", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183564), v26);
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v27, 216, v28, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183564), *(_DWORD *)(DerivedStorage + 183412));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %s furtherPassesRequested. Pass %d TotalFrames %d", v24, 216, v25, "AVE_HEVCEndPass", *(_DWORD *)(DerivedStorage + 183564), v26);
      }
    }
    AVE_FPS::Reset(*(AVE_FPS **)(DerivedStorage + 183608));
    if (AVE_USL_Drv_Reset(*(unsigned int **)(DerivedStorage + 24), *(_DWORD *)(DerivedStorage + 183564)))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v43 = AVE_Log_CheckConsole(3u);
        v44 = AVE_GetCurrTime();
        v45 = AVE_Log_GetLevelStr(4);
        if (v43)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.\n", v44, 3, v45, "AVE_HEVCEndPass", 11655, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Reset failed.");
      }
LABEL_65:
      v38 = 4294954384;
      goto LABEL_47;
    }
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      *(_OWORD *)&v118.start.value = *MEMORY[0x1E0CA2E18];
      v118.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      theData.start.value = 0;
      v130 = *(_OWORD *)&v118.start.value;
      epoch = v118.start.epoch;
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v46 = AVE_Log_CheckConsole(3u);
          v47 = AVE_GetCurrTime();
          v48 = AVE_Log_GetLevelStr(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v47, 3, v48, "AVE_HEVCEndPass", 11663, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        }
LABEL_46:
        v38 = 4294954394;
        goto LABEL_47;
      }
      if ((v118.start.flags & 0x1D) == 1)
      {
        if (AVE_Log_CheckLevel(0xD8u, 7))
        {
          v49 = AVE_Log_CheckConsole(0xD8u);
          v50 = AVE_GetCurrTime();
          v51 = AVE_Log_GetLevelStr(7);
          if (v49)
          {
            printf("%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d\n", v50, 216, v51, "AVE_HEVCEndPass", v118.start.value, v118.start.timescale, v118.start.flags);
            v50 = AVE_GetCurrTime();
            v51 = AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: FIG: %s VTMultiPassStorageGetTimeStamp value %lld timescale %d flags %d", v50, 216, v51, "AVE_HEVCEndPass", v118.start.value, v118.start.timescale, v118.start.flags);
        }
        v128 = *(_OWORD *)&v118.start.value;
        v129 = v118.start.epoch;
        if (VTMultiPassStorageCopyDataAtTimeStamp())
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v65 = AVE_Log_CheckConsole(3u);
            v66 = AVE_GetCurrTime();
            v67 = AVE_Log_GetLevelStr(4);
            if (v65)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v66, 3, v67, "AVE_HEVCEndPass", 11676, "err == noErr");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
          }
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          v68 = AVE_Log_CheckConsole(3u);
          v69 = AVE_GetCurrTime();
          v70 = AVE_Log_GetLevelStr(4);
          if (v68)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.\n", v69, 3, v70, "AVE_HEVCEndPass", 11677, "data != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL.");
        }
        goto LABEL_46;
      }
    }
    if (*(_QWORD *)DerivedStorage != 1)
    {
      v52 = (__int128 *)MEMORY[0x1E0CA2E18];
      v127 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v126 = v127;
      v125 = v127;
      v53 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v59 = AVE_Log_CheckConsole(3u);
          v60 = AVE_GetCurrTime();
          v61 = AVE_Log_GetLevelStr(4);
          if (v59)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.\n", v60, 3, v61, "AVE_HEVCEndPass", 11709, "timeRangeArray != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFArrayCreateMutable failed.");
        }
        goto LABEL_65;
      }
      v55 = Mutable;
      v123 = *v52;
      v124 = *((_QWORD *)v52 + 2);
      if (VTMultiPassStorageGetTimeStamp())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v56 = AVE_Log_CheckConsole(3u);
          v57 = AVE_GetCurrTime();
          v58 = AVE_Log_GetLevelStr(4);
          if (v56)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.\n", v57, 3, v58, "AVE_HEVCEndPass", 11712, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp kVTMultiPassStorageStep_GetFirstTimeStamp failed.");
        }
        goto LABEL_46;
      }
      v112 = v53;
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        v62 = AVE_Log_CheckConsole(0xD8u);
        v63 = AVE_GetCurrTime();
        v64 = AVE_Log_GetLevelStr(7);
        if (v62)
        {
          printf("%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d\n", v63, 216, v64, "AVE_HEVCEndPass", v127.value, v127.timescale, v127.flags);
          v63 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s firstTimeInTimeRange value %lld timescale %d flags %d", v63);
        v53 = v112;
      }
      v121 = *v52;
      v122 = *((_QWORD *)v52 + 2);
      if (VTMultiPassStorageGetTimeStampAndDuration())
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v71 = AVE_Log_CheckConsole(3u);
          v72 = AVE_GetCurrTime();
          v73 = AVE_Log_GetLevelStr(4);
          if (v71)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.\n", v72, 3, v73, "AVE_HEVCEndPass", 11728, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStampAndDuration kVTMultiPassStorageStep_GetLastTimeStamp failed.");
        }
        goto LABEL_46;
      }
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        v74 = AVE_Log_CheckConsole(0xD8u);
        v75 = AVE_GetCurrTime();
        v76 = AVE_Log_GetLevelStr(7);
        if (v74)
        {
          printf("%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d\n", v75, 216, v76, "AVE_HEVCEndPass", v126.value, v126.timescale, v126.flags);
          v75 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s lastTimeInTimeRange value %lld timescale %d flags %d", v75);
        v53 = v112;
      }
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        v77 = AVE_Log_CheckConsole(0xD8u);
        v78 = AVE_GetCurrTime();
        v79 = AVE_Log_GetLevelStr(7);
        if (v77)
        {
          printf("%lld %d AVE %s: %s duration value %lld timescale %d flags %d\n", v78, 216, v79, "AVE_HEVCEndPass", v125.value, v125.timescale, v125.flags);
          v78 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s duration value %lld timescale %d flags %d", v78);
        v53 = v112;
      }
      lhs = v126;
      rhs = v125;
      CMTimeAdd(&v118.start, &lhs, &rhs);
      v126 = v118.start;
      if (AVE_Log_CheckLevel(0xD8u, 7))
      {
        v80 = AVE_Log_CheckConsole(0xD8u);
        v81 = AVE_GetCurrTime();
        v82 = AVE_Log_GetLevelStr(7);
        if (v80)
        {
          printf("%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d\n", v81, 216, v82, "AVE_HEVCEndPass", v126.value, v126.timescale, v126.flags);
          v81 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: %s modified lastTimeInTimeRange value %lld timescale %d flags %d", v81);
        v53 = v112;
      }
      if (*(_DWORD *)(DerivedStorage + 183412) <= 1u && !v126.flags)
      {
        v83 = *(_DWORD *)(DerivedStorage + 228);
        if (v83 < 1)
          v83 = 30;
        *(_QWORD *)&v126.timescale = *(_QWORD *)&v127.timescale;
        v126.epoch = v127.epoch;
        v126.value = v127.value + v127.timescale / v83;
      }
      if (!v127.flags)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v87 = AVE_Log_CheckConsole(3u);
          v88 = AVE_GetCurrTime();
          v89 = AVE_Log_GetLevelStr(4);
          if (v87)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.\n", v88, 3, v89, "AVE_HEVCEndPass", 11756, "firstTimeInTimeRange.flags != 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: firstTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      if (!v126.flags)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v90 = AVE_Log_CheckConsole(3u);
          v91 = AVE_GetCurrTime();
          v92 = AVE_Log_GetLevelStr(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.\n", v91, 3, v92, "AVE_HEVCEndPass", 11758, "lastTimeInTimeRange.flags != 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: lastTimeInTimeRange invalid.");
        }
        goto LABEL_46;
      }
      memset(&v118, 0, sizeof(v118));
      start = v127;
      end = v126;
      CMTimeRangeFromTimeToTime(&v118, &start, &end);
      if (AVE_Log_CheckLevel(0xD8u, 6))
      {
        v84 = AVE_Log_CheckConsole(0xD8u);
        v85 = AVE_GetCurrTime();
        v86 = AVE_Log_GetLevelStr(6);
        if (v84)
        {
          printf("%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d\n",
            v85,
            216,
            v86,
            v118.start.value,
            v118.start.timescale,
            v118.start.flags,
            v118.duration.value,
            v118.duration.timescale,
            v118.duration.flags);
          v85 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: Start %lld, %d, %d; Duration %lld, %d, %d", v85, 216);
        v53 = v112;
      }
      range = v118;
      v93 = CMTimeRangeCopyAsDictionary(&range, v53);
      if (!v93)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v105 = AVE_Log_CheckConsole(3u);
          v106 = AVE_GetCurrTime();
          v107 = AVE_Log_GetLevelStr(4);
          if (v105)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.\n", v106, 3, v107, "AVE_HEVCEndPass", 11767, "currentTimeRangeDictionary != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CMTimeRangeCopyAsDictionary failed.");
        }
        goto LABEL_65;
      }
      v94 = v93;
      CFArrayAppendValue(v55, v93);
      CFRelease(v94);
      Count = CFArrayGetCount(v55);
      v113 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
      if (!v113)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v108 = AVE_Log_CheckConsole(3u);
          v109 = AVE_GetCurrTime();
          v110 = AVE_Log_GetLevelStr(4);
          if (v108)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.\n", v109, 3, v110, "AVE_HEVCEndPass", 11779, "timeRanges != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: malloc timeRanges failed.");
        }
        goto LABEL_65;
      }
      if (Count >= 1)
      {
        v96 = 0;
        v97 = v113;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, v96);
          CMTimeRangeMakeFromDictionary(&theData, ValueAtIndex);
          v99 = *(_OWORD *)&theData.start.value;
          v100 = *(_OWORD *)&theData.duration.timescale;
          v97[1] = *(_OWORD *)&theData.start.epoch;
          v97[2] = v100;
          *v97 = v99;
          v97 += 3;
          ++v96;
        }
        while (Count != v96);
      }
      Pass = VTEncoderSessionSetTimeRangesForNextPass();
      free(v113);
      CFRelease(v55);
      if (Pass)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v102 = AVE_Log_CheckConsole(3u);
          v103 = AVE_GetCurrTime();
          v104 = AVE_Log_GetLevelStr(4);
          if (v102)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.\n", v103, 3, v104, "AVE_HEVCEndPass", 11801, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTEncoderSessionSetTimeRangesForNextPass failed.");
        }
        goto LABEL_46;
      }
    }
    v38 = 0;
    v10[47] = v10[1];
    v10[1] = 0;
    goto LABEL_47;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v15 = AVE_Log_CheckConsole(3u);
    v16 = AVE_GetCurrTime();
    v17 = AVE_Log_GetLevelStr(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v16, 3, v17, "AVE_HEVCEndPass", 11599, "encoderPrivateStorage");
      v18 = AVE_GetCurrTime();
      v111 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v18, 3, v111, "AVE_HEVCEndPass", 11599, "encoderPrivateStorage");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v16, 3, v17, "AVE_HEVCEndPass", 11599, "encoderPrivateStorage");
    }
  }
  v38 = 4294954384;
LABEL_48:
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v39 = AVE_Log_CheckConsole(0x14u);
    v40 = AVE_GetCurrTime();
    v41 = AVE_Log_GetLevelStr(6);
    if (v39)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %d\n", v40, 20, v41, "AVE_HEVCEndPass", a1, a2, a3, v38);
      v40 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %d", v40, 20);
  }
  return v38;
}

uint64_t AVE_HEVCStartTileSession(const void *a1, const void *a2, const void *a3, unint64_t a4, const void *a5)
{
  int v6;
  unint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v14;
  uint64_t v15;
  __uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  __CFDictionary *Mutable;
  uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  int v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  __uint64_t v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  uint64_t v54;
  __uint64_t v55;
  const char *v56;
  int v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  uint64_t v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  uint64_t v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  __uint64_t v74;
  CFNumberRef v75;
  CFNumberRef v76;
  uint64_t v77;
  int v78;
  __uint64_t v79;
  const char *v80;
  __uint64_t v81;
  uint64_t v82;
  __uint64_t v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  __uint64_t v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v101;
  int v103;
  int valuePtr;
  __CFDictionary *v105;
  _OWORD v106[2];
  uint64_t v107;

  v6 = a4;
  v107 = *MEMORY[0x1E0C80C00];
  v8 = HIDWORD(a4);
  v105 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage + 183408;
  memset(v106, 0, sizeof(v106));
  v99 = DerivedStorage;
  v101 = DerivedStorage + 183408;
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v11 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v11)
    {
      printf("%lld %d AVE %s: Enter %s %p %p %p %dx%d %p\n", CurrTime, 20, LevelStr, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v8, a5);
      v14 = AVE_GetCurrTime();
      v88 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", v14, 20, v88);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %p %p %dx%d %p", CurrTime, 20, LevelStr);
    }
    v10 = DerivedStorage + 183408;
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v27 = AVE_Log_CheckConsole(3u);
      v28 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v28, 3, v29, "AVE_HEVCStartTileSession", 15831, "encoderPrivateStorage");
        v30 = AVE_GetCurrTime();
        v90 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v30, 3, v90, "AVE_HEVCStartTileSession", 15831, "encoderPrivateStorage");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.", v28, 3, v29, "AVE_HEVCStartTileSession", 15831, "encoderPrivateStorage");
      }
    }
    Mutable = 0;
    v41 = 4294954384;
    goto LABEL_51;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  v15 = *(_QWORD *)(v10 + 208);
  v16 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v15, 3u, v16);
  kdebug_trace();
  if (*(_DWORD *)(v10 + 72))
    *(_QWORD *)(v10 + 80) = AVE_GetCurrTime();
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v31 = AVE_Log_CheckConsole(3u);
      v32 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.\n", v32, 3, v33, "AVE_HEVCStartTileSession", 15846, "encoder");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoder NULL.");
    }
    goto LABEL_50;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v34 = AVE_Log_CheckConsole(3u);
      v35 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(4);
      if (v34)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: session NULL.\n", v35, 3, v36, "AVE_HEVCStartTileSession", 15847, "session");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: session NULL.");
    }
    goto LABEL_50;
  }
  if (v6 <= 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v37 = AVE_Log_CheckConsole(3u);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(4);
      if (v37)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.\n", v38, 3, v39, "AVE_HEVCStartTileSession", 15848, "tileDimensions.width >= 2", v6, v8);
        v38 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.width (%dx%d) not supported.", v38);
    }
    goto LABEL_50;
  }
  if ((int)v8 <= 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v42 = AVE_Log_CheckConsole(3u);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.\n", v43, 3, v44, "AVE_HEVCStartTileSession", 15849, "tileDimensions.height >= 2", v6, v8);
        v43 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: dimensions.height (%dx%d) not supported.", v43);
    }
LABEL_50:
    Mutable = 0;
    v41 = 4294954394;
    goto LABEL_51;
  }
  *(_QWORD *)(DerivedStorage + 8) = a2;
  v17 = DerivedStorage + 137893;
  v96 = DerivedStorage + 118378;
  *(_DWORD *)(DerivedStorage + 1880) = v6;
  *(_DWORD *)(DerivedStorage + 1884) = v8;
  v18 = DerivedStorage + 18808;
  v19 = DerivedStorage;
  v20 = DerivedStorage + 17884;
  *(_DWORD *)(v18 + 636) = v6;
  *(_DWORD *)(v18 + 640) = v8;
  AVE_PrepareCropParams(v19);
  v21 = *(_DWORD *)(v19 + 1880);
  if (v21 <= 0xA0)
    v21 = 160;
  v98 = v21;
  v22 = *(_DWORD *)(v19 + 1884);
  if (v22 <= 0x40)
    v22 = 64;
  v97 = v22;
  *(_QWORD *)(v19 + 16) = a5;
  if (a5)
    CFRetain(a5);
  AVE_SetEncoderDefault(v99);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v23 = AVE_Log_CheckConsole(0x14u);
    v24 = AVE_GetCurrTime();
    v25 = AVE_Log_GetLevelStr(7);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault\n", v24, 20, v25);
      v26 = AVE_GetCurrTime();
      v89 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v26, 20, v89);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderTileDefault", v24, 20, v25);
    }
    v10 = v101;
  }
  *(_BYTE *)(v18 + 41) = 1;
  *(_BYTE *)(v20 + 800) = 1;
  *(_BYTE *)(v18 + 52) = *(_DWORD *)(v10 + 124) > 2;
  *(_WORD *)v17 = 257;
  *(_DWORD *)(v96 + 6) = 2;
  *(_DWORD *)(v96 + 38) = 2;
  *(_DWORD *)v18 = 1;
  *(_DWORD *)(v99 + 1920) = 0;
  *(_DWORD *)(v99 + 1944) = 0;
  v45 = *(_DWORD *)(v99 + 2024);
  *(_DWORD *)v20 = 2;
  *(_DWORD *)(v20 + 52) = 7;
  *(_DWORD *)(v99 + 196) = 3;
  *(_QWORD *)(v99 + 1816) = 0x402E000000000000;
  *(_QWORD *)(v99 + 1824) = 0xF0000000FLL;
  *(_DWORD *)(v99 + 1832) = 15;
  *(_DWORD *)(v99 + 228) = 0;
  *(_DWORD *)(v99 + 2012) = -1;
  *(_BYTE *)(v99 + 244) = 1;
  *(_WORD *)(v99 + 252) = 256;
  *(_BYTE *)(v99 + 216) = 0;
  *(_BYTE *)(v99 + 251) = 1;
  *(_WORD *)(v99 + 255) = 0;
  *(_BYTE *)(v99 + 257) = 0;
  *(_DWORD *)(v99 + 246) = 1;
  *(_QWORD *)(v99 + 18784) = 0x400000000;
  *(_DWORD *)(v99 + 260) = 0;
  *(_DWORD *)(v99 + 1768) = 0;
  *(_QWORD *)(v20 + 801) = 0;
  *(_OWORD *)(v99 + 18694) = 0u;
  *(_OWORD *)(v99 + 18710) = 0u;
  *(_OWORD *)(v99 + 18726) = 0u;
  *(_BYTE *)(v99 + 18742) = 0;
  *(_BYTE *)(v17 + 669) = 1;
  *(_BYTE *)v96 = 1;
  *(_WORD *)(v20 + 452) = 0;
  *(_DWORD *)(v99 + 2024) = v45 & 0xFFFFFFFA;
  *(_QWORD *)(v20 + 912) = 0x100000000;
  v46 = v98;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v47 = AVE_Log_CheckConsole(0x14u);
    v48 = AVE_GetCurrTime();
    v49 = AVE_Log_GetLevelStr(7);
    if (v47)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault\n", v48, 20, v49);
      v50 = AVE_GetCurrTime();
      v91 = AVE_Log_GetLevelStr(7);
      v46 = v98;
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v50, 20, v91);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_SetEncoderTileDefault", v48, 20, v49);
    }
    v10 = v101;
  }
  v63 = AVE_PixelBufAttr_CreateDict(*(unsigned int *)(v10 + 124), *(unsigned int *)(v10 + 120), 30, 1, v6, v8, v46, v97, 0x414C4C20u, 1, (int *)v106, &v105);
  if ((_DWORD)v63)
  {
    v41 = v63;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v64 = AVE_Log_CheckConsole(3u);
      v65 = AVE_GetCurrTime();
      v66 = AVE_Log_GetLevelStr(4);
      if (v64)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v65, 3, v66, "AVE_HEVCStartTileSession", 15891, "err == noErr", "AVE_HEVCStartTileSession", 15891);
        v65 = AVE_GetCurrTime();
        v93 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v93 = v66;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v65, 3, v93, "AVE_HEVCStartTileSession", 15891, "err == noErr", "AVE_HEVCStartTileSession", 15891);
    }
LABEL_82:
    Mutable = 0;
LABEL_83:
    DerivedStorage = v99;
    goto LABEL_51;
  }
  DerivedStorage = v99;
  if (a2 == (const void *)1)
  {
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      v71 = AVE_Log_CheckConsole(0x14u);
      v72 = AVE_GetCurrTime();
      v73 = AVE_Log_GetLevelStr(7);
      if (v71)
      {
        printf("%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK\n", v72, 20, v73);
        v74 = AVE_GetCurrTime();
        v94 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v74, 20, v94);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: session = FIGINTERNALSESSIONMARK", v72, 20, v73);
      }
    }
    goto LABEL_102;
  }
  v67 = VTTileEncoderSessionSetTileAttributes();
  if (!(_DWORD)v67)
  {
    if (*(int *)(v10 + 124) >= 3)
    {
      valuePtr = 2;
      v103 = 2;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v84 = AVE_Log_CheckConsole(3u);
          v85 = AVE_GetCurrTime();
          v86 = AVE_Log_GetLevelStr(4);
          if (v84)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.\n", v85, 3, v86, "AVE_HEVCStartTileSession", 15918, "TileRequirements");
            v87 = AVE_GetCurrTime();
            v95 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v87, 3, v95, "AVE_HEVCStartTileSession", 15918, "TileRequirements");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: CFDictionaryCreateMutable failed.", v85, 3, v86, "AVE_HEVCStartTileSession", 15918, "TileRequirements");
          }
          v41 = 4294954392;
          goto LABEL_83;
        }
        v41 = 4294954392;
        goto LABEL_51;
      }
      v75 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CEDC28], v75);
      if (v75)
        CFRelease(v75);
      v76 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CEDC80], v76);
      if (v76)
        CFRelease(v76);
      if (*(int *)(v101 + 124) >= 11)
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CEDC20], (const void *)*MEMORY[0x1E0C9AE50]);
      v77 = VTTileEncoderSessionSetTileEncodeRequirements();
      if ((_DWORD)v77)
      {
        v41 = v77;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v78 = AVE_Log_CheckConsole(3u);
          v79 = AVE_GetCurrTime();
          v80 = AVE_Log_GetLevelStr(4);
          if (v78)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.\n", v79, 3, v80, "AVE_HEVCStartTileSession", 15944, "err == noErr", "AVE_HEVCStartTileSession", 15944);
            v81 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v81, 3);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d failed.", v79, 3);
          }
          goto LABEL_83;
        }
        goto LABEL_51;
      }
LABEL_103:
      *(_QWORD *)v101 = 30566;
      v82 = *(_QWORD *)(v101 + 208);
      v83 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v82, 3u, v83);
      v41 = 0;
      goto LABEL_51;
    }
LABEL_102:
    Mutable = 0;
    goto LABEL_103;
  }
  v41 = v67;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v68 = AVE_Log_CheckConsole(3u);
    v69 = AVE_GetCurrTime();
    v70 = AVE_Log_GetLevelStr(4);
    if (v68)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.\n", v69, 3, v70, "AVE_HEVCStartTileSession", 15908, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTTileEncoderSessionSetTileAttributes failed.");
    goto LABEL_82;
  }
  Mutable = 0;
LABEL_51:
  if (v105)
  {
    CFRelease(v105);
    v105 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (DerivedStorage)
  {
    if (*(_DWORD *)(v101 + 72))
    {
      *(_QWORD *)(v101 + 88) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        v51 = AVE_Log_CheckConsole(0x18u);
        v52 = AVE_GetCurrTime();
        v53 = AVE_Log_GetLevelStr(6);
        v54 = *(_QWORD *)(v101 + 88) - *(_QWORD *)(v101 + 80);
        if (v51)
        {
          printf("%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us\n", v52, 24, v53, *(_DWORD *)(v101 + 132), v54);
          v55 = AVE_GetCurrTime();
          v56 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v55, 24, v56, *(_DWORD *)(v101 + 132), *(_QWORD *)(v101 + 88) - *(_QWORD *)(v101 + 80));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d AVE_HEVCStartTileSession took %lld us", v52, 24, v53, *(_DWORD *)(v101 + 132), v54);
        }
        DerivedStorage = v99;
      }
    }
    kdebug_trace();
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  }
  else
  {
    kdebug_trace();
  }
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v57 = v8;
    v58 = AVE_Log_CheckConsole(0x14u);
    v59 = AVE_GetCurrTime();
    v60 = AVE_Log_GetLevelStr(6);
    if (v58)
    {
      printf("%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d\n", v59, 20, v60, "AVE_HEVCStartTileSession", a1, a2, a3, v6, v57, a5, v41);
      v61 = AVE_GetCurrTime();
      v92 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v61, 20, v92, "AVE_HEVCStartTileSession");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %p %p %dx%d %p %d", v59, 20, v60, "AVE_HEVCStartTileSession");
    }
  }
  return v41;
}

uint64_t AVE_HEVCPrepareToEncodeTiles(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  unsigned int *v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __uint64_t v23;
  uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  __uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  __uint64_t v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  __uint64_t v43;
  int v45;
  __uint64_t v46;
  const char *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  uint64_t v52;
  __uint64_t v53;
  const char *v54;
  uint64_t v55;
  __uint64_t v56;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (unsigned int *)(DerivedStorage + 183408);
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: Enter %s %p %d\n", CurrTime, 20, LevelStr, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
      v9 = AVE_GetCurrTime();
      v57 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", v9, 20, v57, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p %d", CurrTime, 20, LevelStr, "AVE_HEVCPrepareToEncodeTiles", a1, a2);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v15, 3, v16, "AVE_HEVCPrepareToEncodeTiles", 16002, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_34;
  }
  if (a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v10 = AVE_Log_CheckConsole(3u);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail\n", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16004, "expectPartialTiles == false");
        v13 = AVE_GetCurrTime();
        v58 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v13, 3, v58, "AVE_HEVCPrepareToEncodeTiles", 16004, "expectPartialTiles == false");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: expectPartialTiles = true. Not supported yet -> Fail", v11, 3, v12, "AVE_HEVCPrepareToEncodeTiles", 16004, "expectPartialTiles == false");
      }
    }
LABEL_17:
    v21 = 0;
    goto LABEL_35;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v17 = AVE_Log_CheckConsole(0x14u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(7);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles\n", v18, 20, v19);
      v20 = AVE_GetCurrTime();
      v59 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v20, 20, v59);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_HEVCPrepareToEncodeTiles", v18, 20, v19);
    }
  }
  v22 = *(_QWORD *)(DerivedStorage + 183616);
  v23 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v22, 2u, v23);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183480))
    *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
  AVE_GetCurrTime();
  if (*v5 != 30566)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v29 = AVE_Log_CheckConsole(3u);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.\n", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16068, "false", *v5);
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264PrepareToEncodeFrames with encoderPrivateStorage->SessionStatus %x.", v30, 3, v31, "AVE_HEVCPrepareToEncodeTiles", 16068, "false", *v5);
    }
LABEL_34:
    v21 = 4294954384;
    goto LABEL_35;
  }
  v24 = AVE_ManageSessionSettings(DerivedStorage);
  if (!(_DWORD)v24)
  {
    *(_DWORD *)(DerivedStorage + 18672) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v32 = AVE_Log_CheckConsole(0x1Eu);
      v33 = AVE_GetCurrTime();
      v34 = AVE_Log_GetLevelStr(6);
      if (v32)
      {
        printf("%lld %d AVE %s: FIG: received PrepareToEncodeFrames\n", v33, 30, v34);
        v35 = AVE_GetCurrTime();
        v61 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v35, 30, v61);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received PrepareToEncodeFrames", v33, 30, v34);
      }
    }
    if (!AVE_USL_Drv_Prepare())
    {
      *v5 = 30567;
      if (*(_DWORD *)(DerivedStorage + 183480))
      {
        *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
        if (AVE_Log_CheckLevel(0x18u, 6))
        {
          v48 = AVE_Log_CheckConsole(0x18u);
          v49 = AVE_GetCurrTime();
          v50 = AVE_Log_GetLevelStr(6);
          v51 = *(_DWORD *)(DerivedStorage + 183540);
          v52 = *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488);
          if (v48)
          {
            printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us\n", v49, 24, v50, v51, 0, v52);
            v53 = AVE_GetCurrTime();
            v54 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v53, 24, v54, *(_DWORD *)(DerivedStorage + 183540), 0, *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVCPrepareToEncodeTiles took %lld us", v49, 24, v50, v51, 0, v52);
          }
        }
      }
      v55 = *(_QWORD *)(DerivedStorage + 183616);
      v56 = AVE_GetCurrTime();
      AVE_TimeStats_AddEndTime(v55, 2u, v56);
      goto LABEL_17;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v45 = AVE_Log_CheckConsole(3u);
      v46 = AVE_GetCurrTime();
      v47 = AVE_Log_GetLevelStr(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.\n", v46, 3, v47, "AVE_HEVCPrepareToEncodeTiles", 16060, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Prepare failed.");
    }
    goto LABEL_34;
  }
  v21 = v24;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v25 = AVE_Log_CheckConsole(3u);
    v26 = AVE_GetCurrTime();
    v27 = AVE_Log_GetLevelStr(4);
    if (v25)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16027, "err == noErr");
      v28 = AVE_GetCurrTime();
      v60 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v28, 3, v60, "AVE_HEVCPrepareToEncodeTiles", 16027, "err == noErr");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed", v26, 3, v27, "AVE_HEVCPrepareToEncodeTiles", 16027, "err == noErr");
    }
  }
LABEL_35:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v36 = AVE_Log_CheckConsole(0x14u);
    v37 = AVE_GetCurrTime();
    v38 = AVE_Log_GetLevelStr(7);
    if (v36)
    {
      printf("%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x\n", v37, 20, v38, v21);
      v39 = AVE_GetCurrTime();
      v62 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v39, 20, v62, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE EXIT AVE_HEVCPrepareToEncodeTiles err = 0x%08x", v37, 20, v38, v21);
    }
  }
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 6))
  {
    v40 = AVE_Log_CheckConsole(0x14u);
    v41 = AVE_GetCurrTime();
    v42 = AVE_Log_GetLevelStr(6);
    if (v40)
    {
      printf("%lld %d AVE %s: Exit %s %p %d %d\n", v41, 20, v42, "AVE_HEVCPrepareToEncodeTiles", a1, a2, v21);
      v43 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d %d", v41);
    }
  }
  return v21;
}

uint64_t AVE_HEVCEncodeTile()
{
  _DWORD *v0;
  _DWORD *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  char *v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v21;
  __uint64_t v22;
  __uint64_t v23;
  int v24;
  OSType PixelFormatType;
  char *v26;
  const void *v27;
  unsigned int v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  uint64_t v36;
  int v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  int v41;
  int v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  int v55;
  const char *v56;
  unsigned int v57;
  uint64_t v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  __uint64_t v62;
  const char *v63;
  __uint64_t v64;
  int v66;
  const char *v67;
  unsigned int v68;
  uint64_t v69;
  __uint64_t v70;
  const char *v71;
  int v72;
  __uint64_t v73;
  const char *v74;
  int v75;
  int v76;
  int v77;
  __uint64_t v78;
  const char *v79;
  unsigned int v80;
  uint64_t v81;
  __uint64_t v82;
  const char *v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  unsigned int v87;
  uint64_t v88;
  __uint64_t v89;
  const char *v90;
  const __CFDictionary *v91;
  int v92;
  __uint64_t v93;
  const char *v94;
  __uint64_t v95;
  const __CFData *Value;
  const void *v97;
  CFTypeRef *v98;
  const void *v99;
  int v100;
  uint64_t v101;
  int v102;
  __uint64_t v103;
  const char *v104;
  __uint64_t v105;
  const void *v106;
  char v107;
  int v108;
  __uint64_t v109;
  const char *v110;
  __uint64_t v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  int v115;
  __uint64_t v116;
  const char *v117;
  uint64_t v118;
  int v119;
  __uint64_t v120;
  const char *v121;
  __uint64_t v122;
  int v123;
  __uint64_t v124;
  const char *v125;
  int v126;
  __uint64_t v127;
  const char *v128;
  unsigned int v129;
  _BOOL4 v130;
  int v131;
  __uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  __uint64_t v138;
  const char *v139;
  unsigned int v140;
  uint64_t v141;
  __uint64_t v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  const char *v147;
  const char *v148;
  const char *v149;
  __uint64_t v150;
  __uint64_t v151;
  _DWORD *v152;
  unint64_t v153;
  _OWORD v154[5];
  uint64_t v155;
  _QWORD v156[3];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _QWORD v163[4];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  int v169;
  char v170;
  CVPixelBufferRef texture;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __uint64_t v184;
  const UInt8 *BytePtr;
  int v186;
  BOOL v187;
  BOOL v188;
  char v189;
  char v190;
  char v191;
  int v192;
  const void *v193;
  uint64_t v194;

  MEMORY[0x1E0C80A78]();
  v1 = v0;
  v3 = v2;
  v153 = v4;
  v6 = v5;
  v8 = v7;
  v194 = *MEMORY[0x1E0C80C00];
  texture = v9;
  v170 = 0;
  v169 = 0;
  v168 = 0;
  v10 = (char *)AVE_DW_Get();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = DerivedStorage;
  v13 = (unsigned int *)(DerivedStorage + 183408);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVCEncodeTile", 16120, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_37;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v14 = AVE_Log_CheckConsole(0x14u);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile\n", v15, 20, v16);
      v17 = AVE_GetCurrTime();
      v144 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v17, 20, v144);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCEncodeTile", v15, 20, v16);
    }
  }
  kdebug_trace();
  if (v3 && CFDictionaryContainsKey(v3, CFSTR("SessionIndicator")))
    AVE_TimeStats_Restart(*((_QWORD *)v13 + 26));
  if (!v13[1])
  {
    v21 = *((_QWORD *)v13 + 26);
    v22 = AVE_GetCurrTime();
    AVE_TimeStats_AddStartTime(v21, 5u, v22);
  }
  if (v13[18])
    *((_QWORD *)v13 + 10) = AVE_GetCurrTime();
  if (!texture)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
    {
      v36 = 4294954394;
      goto LABEL_85;
    }
    v33 = AVE_Log_CheckConsole(3u);
    v34 = AVE_GetCurrTime();
    v35 = AVE_Log_GetLevelStr(4);
    if (v33)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVCEncodeTile", 16146, "imageBuffer");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    goto LABEL_84;
  }
  v152 = v1;
  v23 = AVE_GetCurrTime();
  if (*(int *)(v12 + 228) >= 1)
    v24 = *(_DWORD *)(v12 + 228);
  else
    v24 = 30;
  AVE_Time_Gen(v24, v12 + 184976);
  PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
  v13[514] = PixelFormatType;
  if (!v13[1])
  {
    v172 = *(_QWORD *)(v12 + 1880);
    v26 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (!v26)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v46 = AVE_Log_CheckConsole(3u);
        v47 = AVE_GetCurrTime();
        v48 = AVE_Log_GetLevelStr(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v47, 3, v48, "AVE_HEVCEncodeTile", 16164, "pPixelFmt != __null", (const void *)v12, v13[33], v13[514]);
          v47 = AVE_GetCurrTime();
          v48 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v47, 3, v48, "AVE_HEVCEncodeTile", 16164, "pPixelFmt != __null", v12, v13[33], v13[514]);
      }
      goto LABEL_84;
    }
    if (v10[792])
      v27 = v10 + 792;
    else
      v27 = 0;
    AVE_Dump_Init(*((_QWORD *)v13 + 27), v27, v13[30], *(_DWORD *)(v12 + 18760), *((_DWORD *)v10 + 196), *((_DWORD *)v10 + 197), &v172, 1, *((_DWORD *)v26 + 3), *((_DWORD *)v26 + 1), *(_DWORD *)(v12 + 192));
    AVE_Dump_WriteInput(*((_DWORD **)v13 + 27), -1, texture);
  }
  v28 = *v13;
  if (*v13 == 30566)
  {
    if (AVE_ISP_CheckMetadata(texture))
      v37 = 1;
    else
      v37 = 2;
    *(_DWORD *)(v12 + 18804) = v37;
    if (AVE_ManageSessionSettings(v12))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v38 = AVE_Log_CheckConsole(3u);
        v39 = AVE_GetCurrTime();
        v40 = AVE_Log_GetLevelStr(4);
        if (v38)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v39, 3, v40, "AVE_HEVCEncodeTile", 16300, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
      }
      goto LABEL_84;
    }
    AVE_UpdateCropParams(v12, texture);
    if (AVE_HEVC_VerifyImageBuffer(v12, (const void **)&texture, &v170, &v169, &v168, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v49 = AVE_Log_CheckConsole(3u);
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
        if (!v49)
        {
LABEL_83:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
          goto LABEL_84;
        }
        v32 = 16310;
LABEL_64:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v30, 3, v31, "AVE_HEVCEncodeTile", v32, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_83;
      }
LABEL_84:
      v36 = 4294954394;
      goto LABEL_85;
    }
    AVE_SetEncoderBasedOnFirstFrame(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (AVE_ValidateEncoderParameters((const void **)v12))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_84;
      v54 = AVE_Log_CheckConsole(3u);
      v51 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(4);
      if (v54)
      {
        v53 = 16320;
        goto LABEL_78;
      }
LABEL_98:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_84;
    }
    AVE_PrepareVideoAndSequenceHeader(v12, texture);
    AVE_PreparePictureHeader((_DWORD *)v12);
    if (v13[18])
    {
      *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        v66 = AVE_Log_CheckConsole(0x18u);
        v151 = AVE_GetCurrTime();
        v67 = AVE_Log_GetLevelStr(6);
        v68 = v13[33];
        v69 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
        if (v66)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us\n", v151, 24, v67, v68, v13[1], v69);
          v70 = AVE_GetCurrTime();
          v71 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v70, 24, v71, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %lld us", v151, 24, v67, v68, v13[1], v69);
        }
      }
      *((_QWORD *)v13 + 10) = AVE_GetCurrTime();
    }
    v181 = 0;
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v172 = v12 + 1872;
    v173 = v12 + 1880;
    v174 = v12 + 18640;
    v175 = v12 + 192;
    v176 = *((_OWORD *)v13 + 13);
    *(_QWORD *)&v179 = v12 + 20344;
    *((_QWORD *)&v179 + 1) = v12 + 102484;
    *((_QWORD *)&v180 + 1) = v12 + 118332;
    *(_QWORD *)&v180 = v12 + 110408;
    v181 = v12 + 127968;
    v182 = v12 + 137608;
    v183 = v12 + 159360;
    v184 = v23;
    if (v3 && CFDictionaryContainsKey(v3, CFSTR("ReconstructedPixelBuffer")))
      *(_DWORD *)(v173 + 176) |= 8u;
    if (AVE_USL_Drv_Start(*(_QWORD *)(v12 + 24), (uint64_t)&v172, v12 + 32, 0, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((_QWORD *)v13 + 18), v12 + 64, (unsigned int *)(v12 + 20152), (void *)(v12 + 19452)))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_37;
      v76 = AVE_Log_CheckConsole(3u);
      v73 = AVE_GetCurrTime();
      v74 = AVE_Log_GetLevelStr(4);
      if (v76)
      {
        v75 = 16386;
        goto LABEL_118;
      }
LABEL_193:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
      goto LABEL_37;
    }
  }
  else
  {
    if (v28 != 30567)
    {
      if (v28 != 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v43 = AVE_Log_CheckConsole(3u);
          v44 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v44, 3, v45, "AVE_HEVCEncodeTile", 16404, "false", *v13);
            v44 = AVE_GetCurrTime();
            v45 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v44, 3, v45, "AVE_HEVCEncodeTile", 16404, "false", *v13);
        }
        goto LABEL_37;
      }
      if (AVE_HEVC_VerifyImageBuffer(v12, (const void **)&texture, &v170, &v169, &v168, 0))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v29 = AVE_Log_CheckConsole(3u);
          v30 = AVE_GetCurrTime();
          v31 = AVE_Log_GetLevelStr(4);
          if (!v29)
            goto LABEL_83;
          v32 = 16183;
          goto LABEL_64;
        }
        goto LABEL_84;
      }
      goto LABEL_125;
    }
    if (AVE_ISP_CheckMetadata(texture))
      v41 = 1;
    else
      v41 = 2;
    *(_DWORD *)(v12 + 18804) = v41;
    AVE_UpdateCropParams(v12, texture);
    if (AVE_HEVC_VerifyImageBuffer(v12, (const void **)&texture, &v170, &v169, &v168, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v42 = AVE_Log_CheckConsole(3u);
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
        if (!v42)
          goto LABEL_83;
        v32 = 16200;
        goto LABEL_64;
      }
      goto LABEL_84;
    }
    AVE_SetEncoderBasedOnFirstFrame(v12, *(_DWORD *)(v12 + 18804) == 2);
    if (AVE_ValidateEncoderParameters((const void **)v12))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_84;
      v50 = AVE_Log_CheckConsole(3u);
      v51 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(4);
      if (v50)
      {
        v53 = 16208;
LABEL_78:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v51, 3, v52, "AVE_HEVCEncodeTile", v53, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_98;
      }
      goto LABEL_98;
    }
    AVE_PrepareVideoAndSequenceHeader(v12, texture);
    AVE_PreparePictureHeader((_DWORD *)v12);
    if (v13[18])
    {
      *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        v55 = AVE_Log_CheckConsole(0x18u);
        v150 = AVE_GetCurrTime();
        v56 = AVE_Log_GetLevelStr(6);
        v57 = v13[33];
        v58 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
        if (v55)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v150, 24, v56, v57, v13[1], v58);
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v59, 24, v60, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v150, 24, v56, v57, v13[1], v58);
        }
      }
      *((_QWORD *)v13 + 10) = AVE_GetCurrTime();
    }
    v181 = 0;
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v172 = v12 + 1872;
    v173 = v12 + 1880;
    v174 = v12 + 18640;
    v175 = v12 + 192;
    v176 = *((_OWORD *)v13 + 13);
    *(_QWORD *)&v179 = v12 + 20344;
    *((_QWORD *)&v179 + 1) = v12 + 102484;
    *((_QWORD *)&v180 + 1) = v12 + 118332;
    *(_QWORD *)&v180 = v12 + 110408;
    v181 = v12 + 127968;
    v182 = v12 + 137608;
    v183 = v12 + 159360;
    v184 = v23;
    if (v3 && CFDictionaryContainsKey(v3, CFSTR("ReconstructedPixelBuffer")))
      *(_DWORD *)(v173 + 176) |= 8u;
    if (AVE_USL_Drv_Start(*(_QWORD *)(v12 + 24), (uint64_t)&v172, v12 + 32, 0, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *((unsigned __int8 *)v13 + 104), *((_QWORD *)v13 + 18), v12 + 64, (unsigned int *)(v12 + 20152), (void *)(v12 + 19452)))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_37;
      v72 = AVE_Log_CheckConsole(3u);
      v73 = AVE_GetCurrTime();
      v74 = AVE_Log_GetLevelStr(4);
      if (v72)
      {
        v75 = 16275;
LABEL_118:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v73, 3, v74, "AVE_HEVCEncodeTile", v75, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_193;
      }
      goto LABEL_193;
    }
  }
  *v13 = 30568;
  if (!v13[18])
    goto LABEL_132;
  *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
  if (AVE_Log_CheckLevel(0x18u, 6))
  {
    v77 = AVE_Log_CheckConsole(0x18u);
    v78 = AVE_GetCurrTime();
    v79 = AVE_Log_GetLevelStr(6);
    v80 = v13[33];
    v81 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
    if (v77)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v78, 24, v79, v80, v13[1], v81);
      v82 = AVE_GetCurrTime();
      v83 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v82, 24, v83, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v78, 24, v79, v80, v13[1], v81);
    }
  }
  *((_QWORD *)v13 + 10) = AVE_GetCurrTime();
LABEL_125:
  if (v13[18] && *v13 == 30568)
  {
    *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v84 = AVE_Log_CheckConsole(0x18u);
      v85 = AVE_GetCurrTime();
      v86 = AVE_Log_GetLevelStr(6);
      v87 = v13[33];
      v88 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
      if (v84)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v85, 24, v86, v87, v13[1], v88);
        v89 = AVE_GetCurrTime();
        v90 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v89, 24, v90, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v85, 24, v86, v87, v13[1], v88);
      }
    }
    *((_QWORD *)v13 + 10) = AVE_GetCurrTime();
  }
LABEL_132:
  *v13 = 30568;
  v156[1] = 0;
  v157 = 0u;
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  memset(v163, 0, sizeof(v163));
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  v167 = 0u;
  memset(v154, 0, sizeof(v154));
  v155 = 0;
  bzero(&v172, 0x4AF8uLL);
  v156[0] = 0;
  v156[2] = v8;
  *(_QWORD *)&v157 = texture;
  BYTE8(v164) = *((_BYTE *)v13 + 105);
  *(_QWORD *)&v165 = v23;
  DWORD2(v165) = v13[39];
  *(_OWORD *)&v163[1] = *(_OWORD *)(v12 + 184976);
  if (*(_DWORD *)(v12 + 18804) == 2)
  {
    AVE_ISP_GetMetadata(texture, (double *)v154);
    AVE_Dump_WriteISPMetadata(*((_QWORD **)v13 + 27), v13[39], v13[1], (double *)v154);
  }
  v163[3] = v154;
  *(_QWORD *)&v159 = 0;
  BYTE8(v159) = *((_BYTE *)v13 + 107);
  if (*((_BYTE *)v13 + 106))
  {
    v91 = (const __CFDictionary *)CMGetAttachment(texture, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v91)
      *(_QWORD *)&v159 = CFDictionaryCreateCopy(0, v91);
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v92 = AVE_Log_CheckConsole(0x14u);
    v93 = AVE_GetCurrTime();
    v94 = AVE_Log_GetLevelStr(7);
    if (v92)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData\n", v93, 20, v94);
      v95 = AVE_GetCurrTime();
      v146 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v95, 20, v146);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_GetPerTileData", v93, 20, v94);
    }
  }
  v186 = *(_DWORD *)(v12 + 18776);
  v187 = *(_DWORD *)(v12 + 18784) == 1;
  v188 = *(_DWORD *)(v12 + 18788) == 4;
  v192 = *(_DWORD *)(v12 + 18808);
  v189 = *(_BYTE *)(v12 + 18845);
  *(_BYTE *)(v12 + 18845) = 0;
  v190 = *(_BYTE *)(v12 + 18012);
  BytePtr = 0;
  v191 = 0;
  if (!v3)
    goto LABEL_163;
  if (CFDictionaryContainsKey(v3, CFSTR("SessionIndicator")))
    AVE_TimeStats_Restart(*((_QWORD *)v13 + 26));
  Value = (const __CFData *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CED660]);
  if (Value)
    BytePtr = CFDataGetBytePtr(Value);
  v97 = CFDictionaryGetValue(v3, CFSTR("ForceNonRefFrame"));
  v98 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (v97 && CFEqual(v97, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
  {
    BYTE4(v172) = 1;
    goto LABEL_160;
  }
  v99 = CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CED5B8]);
  if (v99 && CFEqual(v99, *v98))
  {
    if (*(_DWORD *)(v12 + 18384))
    {
      v100 = 3;
    }
    else
    {
      if ((*(_BYTE *)(v12 + 2024) & 1) != 0)
      {
        v100 = 1;
        LODWORD(v172) = 1;
        v101 = 1;
LABEL_156:
        v174 = v101;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v102 = AVE_Log_CheckConsole(0x1Du);
          v103 = AVE_GetCurrTime();
          v104 = AVE_Log_GetLevelStr(6);
          if (v102)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v103, 29, v104, v100, v101);
            v105 = AVE_GetCurrTime();
            v147 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v105, 29, v147, v100, v101);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v103, 29, v104, v100, v101);
          }
        }
        goto LABEL_160;
      }
      v100 = 2;
    }
    LODWORD(v172) = v100;
    v101 = 256;
    goto LABEL_156;
  }
LABEL_160:
  if ((*(_BYTE *)(v12 + 2056) & 8) == 0)
  {
LABEL_163:
    v107 = 1;
    goto LABEL_164;
  }
  v106 = CFDictionaryGetValue(v3, CFSTR("ReconstructedPixelBuffer"));
  if (v106)
  {
    v193 = v106;
    goto LABEL_163;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v123 = AVE_Log_CheckConsole(3u);
    v124 = AVE_GetCurrTime();
    v125 = AVE_Log_GetLevelStr(4);
    if (v123)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p\n", v124, 3, v125, "AVE_GetPerTileData", 15533, "pUseReconBuffer != __null", 0);
      v124 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: failed to get ReconstructedPixelBuffer %p", v124);
  }
  v107 = 0;
LABEL_164:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v108 = AVE_Log_CheckConsole(0x14u);
    v109 = AVE_GetCurrTime();
    v110 = AVE_Log_GetLevelStr(7);
    if (v108)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData\n", v109, 20, v110);
      v111 = AVE_GetCurrTime();
      v148 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v111, 20, v148);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_GetPerTileData", v109, 20, v110);
    }
  }
  if ((v107 & 1) == 0)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v115 = AVE_Log_CheckConsole(3u);
      v116 = AVE_GetCurrTime();
      v117 = AVE_Log_GetLevelStr(4);
      if (v115)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.\n", v116, 3, v117, "AVE_HEVCEncodeTile", 16476, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerTileData failed.");
    }
    goto LABEL_84;
  }
  if (AVE_GetTileInfo((_DWORD *)v12, (uint64_t)&v172, v6, v153))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v112 = AVE_Log_CheckConsole(3u);
      v113 = AVE_GetCurrTime();
      v114 = AVE_Log_GetLevelStr(4);
      if (v112)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.\n", v113, 3, v114, "AVE_HEVCEncodeTile", 16481, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetTileInfo failed.");
    }
    goto LABEL_84;
  }
  *(_QWORD *)&v164 = &v172;
  *((_QWORD *)&v167 + 1) = v13[1];
  v118 = AVE_USL_Drv_Process(*(_QWORD *)(v12 + 24), (uint64_t)v156);
  v36 = v118;
  if ((_DWORD)v118)
  {
    if ((_DWORD)v118 == -536870173)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v119 = AVE_Log_CheckConsole(0x16u);
        v120 = AVE_GetCurrTime();
        v121 = AVE_Log_GetLevelStr(5);
        if (v119)
        {
          printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v120, 22, v121);
          v122 = AVE_GetCurrTime();
          v149 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v122, 22, v149);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v120, 22, v121);
        }
      }
      goto LABEL_195;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v126 = AVE_Log_CheckConsole(3u);
      v127 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(4);
      if (v126)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v127, 3, v128, "AVE_HEVCEncodeTile", 16498, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
    }
LABEL_37:
    v36 = 4294954384;
    goto LABEL_85;
  }
LABEL_195:
  if (v152)
    *v152 |= 1u;
  if (v13[18])
  {
    *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
    v129 = v13[1];
    v130 = AVE_Log_CheckLevel(0x18u, 6);
    if (v129)
    {
      if (v130)
      {
        v131 = AVE_Log_CheckConsole(0x18u);
        v132 = AVE_GetCurrTime();
        v133 = AVE_Log_GetLevelStr(6);
        v134 = *((_QWORD *)v13 + 11);
        v135 = v134 - *((_QWORD *)v13 + 10);
        v136 = v134 - *((_QWORD *)v13 + 12);
        if (v131)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)\n", v132, 24, v133, v13[33], v13[1], v135, v136);
          v132 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us (%lld us since tile #0)", v132);
      }
    }
    else
    {
      if (v130)
      {
        v137 = AVE_Log_CheckConsole(0x18u);
        v138 = AVE_GetCurrTime();
        v139 = AVE_Log_GetLevelStr(6);
        v140 = v13[33];
        v141 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
        if (v137)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us\n", v138, 24, v139, v140, v13[1], v141);
          v142 = AVE_GetCurrTime();
          v143 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v142, 24, v143, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeTile took %lld us", v138, 24, v139, v140, v13[1], v141);
        }
      }
      *((_QWORD *)v13 + 12) = *((_QWORD *)v13 + 10);
    }
  }
LABEL_85:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v61 = AVE_Log_CheckConsole(0x14u);
    v62 = AVE_GetCurrTime();
    v63 = AVE_Log_GetLevelStr(7);
    if (v61)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x\n", v62, 20, v63, v36);
      v64 = AVE_GetCurrTime();
      v145 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v64, 20, v145, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeTile err 0x%08x", v62, 20, v63, v36);
    }
  }
  if (v170 && texture)
    CVPixelBufferRelease(texture);
  kdebug_trace();
  ++v13[1];
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 183416));
  return v36;
}

uint64_t AVE_HEVCCompleteTiles(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  __uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  uint64_t v14;
  __uint64_t v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  __uint64_t v25;
  const char *v26;
  uint64_t v27;
  __uint64_t v28;
  uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  __uint64_t v33;
  const char *v35;
  const char *v36;
  const char *v37;
  __uint64_t v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: Enter %s %p\n", CurrTime, 20, LevelStr, "AVE_HEVCCompleteTiles", a1);
      v6 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Enter %s %p", v6, 20, v35, "AVE_HEVCCompleteTiles", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Enter %s %p", CurrTime, 20, LevelStr, "AVE_HEVCCompleteTiles", a1);
    }
  }
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v11 = AVE_Log_CheckConsole(3u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", v12, 3, v13, "AVE_HEVCCompleteTiles", 16568, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_28;
  }
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v7 = AVE_Log_CheckConsole(0x14u);
    v8 = AVE_GetCurrTime();
    v9 = AVE_Log_GetLevelStr(7);
    if (v7)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles\n", v8, 20, v9);
      v10 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v10, 20, v36);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_HEVCCompleteTiles", v8, 20, v9);
    }
  }
  v14 = *(_QWORD *)(DerivedStorage + 183616);
  v15 = AVE_GetCurrTime();
  AVE_TimeStats_AddStartTime(v14, 6u, v15);
  kdebug_trace();
  if (*(_DWORD *)(DerivedStorage + 183480))
    *(_QWORD *)(DerivedStorage + 183488) = AVE_GetCurrTime();
  v16 = AVE_GetCurrTime();
  if (*(_DWORD *)(DerivedStorage + 183408) == 30568)
  {
    v38 = v16;
    if (AVE_USL_Drv_Complete(*(_QWORD *)(DerivedStorage + 24), &v38))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v17 = AVE_Log_CheckConsole(3u);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v18, 3, v19, "AVE_HEVCCompleteTiles", 16594, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
      }
LABEL_28:
      v29 = 4294954384;
      goto LABEL_29;
    }
  }
  if (*(_DWORD *)(DerivedStorage + 183480))
  {
    *(_QWORD *)(DerivedStorage + 183496) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v20 = AVE_Log_CheckConsole(0x18u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(6);
      v23 = *(_DWORD *)(DerivedStorage + 183540);
      v24 = *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488);
      if (v20)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) Complete took %lld us\n", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183412) - 1, v24);
        v25 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v25, 24, v26, *(_DWORD *)(DerivedStorage + 183540), *(_DWORD *)(DerivedStorage + 183412) - 1, *(_QWORD *)(DerivedStorage + 183496) - *(_QWORD *)(DerivedStorage + 183488));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) Complete took %lld us", v21, 24, v22, v23, *(_DWORD *)(DerivedStorage + 183412) - 1, v24);
      }
    }
  }
  v27 = *(_QWORD *)(DerivedStorage + 183616);
  v28 = AVE_GetCurrTime();
  AVE_TimeStats_AddEndTime(v27, 6u, v28);
  v29 = 0;
LABEL_29:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v30 = AVE_Log_CheckConsole(0x14u);
    v31 = AVE_GetCurrTime();
    v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      printf("%lld %d AVE %s: Exit %s %p %d\n", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
      v33 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v33, 20, v37, "AVE_HEVCCompleteTiles", a1, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Exit %s %p %d", v31, 20, v32, "AVE_HEVCCompleteTiles", a1, v29);
    }
  }
  return v29;
}

uint64_t AVE_HEVC_EncodeMultiFrame(const void *a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  __uint64_t v16;
  int v17;
  unsigned int Count;
  int v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  CMTag *v31;
  unint64_t v32;
  unsigned __int8 *v33;
  const OpaqueCMTagCollection *TagCollectionAtIndex;
  OSStatus TagsWithCategory;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t FlagsValue;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  __uint64_t v46;
  const char *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int64_t SInt64Value;
  int v52;
  __uint64_t v53;
  const char *v54;
  __uint64_t v55;
  int v57;
  __uint64_t v58;
  const char *v59;
  int v60;
  __uint64_t v61;
  const char *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  CMItemCount numberOfTagsCopied;
  CMTag v67;
  CMTag tagBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v10 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeMultiFrame");
      v13 = AVE_GetCurrTime();
      v63 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v13, 20, v63, "AVE_HEVC_EncodeMultiFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 20, LevelStr, "AVE_HEVC_EncodeMultiFrame");
    }
  }
  if (DerivedStorage)
  {
    v14 = (unsigned int *)(DerivedStorage + 18436);
    pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 183416));
    kdebug_trace();
    if (a6 && CFDictionaryContainsKey(a6, CFSTR("SessionIndicator")))
      AVE_TimeStats_Restart(*(_QWORD *)(DerivedStorage + 183616));
    if (!*(_DWORD *)(DerivedStorage + 183412))
    {
      v15 = *(_QWORD *)(DerivedStorage + 183616);
      v16 = AVE_GetCurrTime();
      AVE_TimeStats_AddStartTime(v15, 5u, v16);
      if (*(int *)(DerivedStorage + 228) >= 1)
        v17 = *(_DWORD *)(DerivedStorage + 228);
      else
        v17 = 30;
      AVE_FPS::Update(*(AVE_FPS **)(DerivedStorage + 183608), v17, 0, 0);
    }
    if (*v14 == 2)
    {
      Count = CMTaggedBufferGroupGetCount(a3);
      v19 = Count;
      if (*v14 <= Count)
      {
        if (!Count)
        {
          v44 = 0;
          goto LABEL_72;
        }
        v29 = 0;
        v30 = Count;
        v31 = (CMTag *)MEMORY[0x1E0CA27F8];
        while (1)
        {
          v32 = 0;
          v67 = *v31;
          tagBuffer = v67;
          numberOfTagsCopied = 0;
          v65 = v29;
          v33 = (unsigned __int8 *)(DerivedStorage + v29 + 93835);
          do
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v32);
            TagsWithCategory = CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied);
            if (TagsWithCategory || numberOfTagsCopied != 1)
            {
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                v45 = AVE_Log_CheckConsole(0x14u);
                v46 = AVE_GetCurrTime();
                v47 = AVE_Log_GetLevelStr(4);
                if (v45)
                {
                  printf("%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p\n", v46, 20, v47, "AVE_HEVC_EncodeMultiFrame", 12769, "ret == 0 && numOfTags == 1", TagsWithCategory, numberOfTagsCopied, &tagBuffer);
                  v46 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | invalid VideoLayerID in taggedBuffer %d %d %p", v46, 20);
              }
              goto LABEL_71;
            }
            ++v32;
          }
          while (CMTagGetSInt64Value(tagBuffer) != *v33 && v32 < v30);
          if (!*v14)
            break;
          v37 = 0;
          while (1)
          {
            v38 = *(_DWORD *)(DerivedStorage + 18904) ? (_DWORD)v37 << (*(_BYTE *)(DerivedStorage + 94030) == 1) : v37;
            v39 = *(unsigned __int8 *)(DerivedStorage + v38 + 93835);
            if (CMTagGetSInt64Value(tagBuffer) == v39)
              break;
            if (++v37 >= *v14)
              goto LABEL_65;
          }
          v40 = *(unsigned __int8 *)(DerivedStorage + 93900 + v37);
          if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_StereoView, &v67, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
          {
            FlagsValue = CMTagGetFlagsValue(v67);
            v42 = 1748;
            if (FlagsValue != 1)
              v42 = 1749;
            v43 = *((unsigned __int8 *)v14 + v42);
            if (v40 != v43)
            {
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                v60 = AVE_Log_CheckConsole(0x14u);
                v61 = AVE_GetCurrTime();
                v62 = AVE_Log_GetLevelStr(4);
                if (v60)
                {
                  printf("%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d\n", v61, 20, v62, "AVE_HEVC_EncodeMultiFrame", 12818, "storedViewID == curViewID", 0, v40, v43);
                  v61 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | left/right ViewID not matching in taggedBuffer %d %d %d", v61, 20);
              }
              v44 = 4294948262;
              goto LABEL_72;
            }
          }
          if (!CMTaggedBufferGroupGetCVPixelBufferForTag(a3, tagBuffer, 0))
          {
            if (AVE_Log_CheckLevel(0x14u, 4))
            {
              v57 = AVE_Log_CheckConsole(0x14u);
              v58 = AVE_GetCurrTime();
              v59 = AVE_Log_GetLevelStr(4);
              if (v57)
              {
                printf("%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer\n", v58, 20, v59, "AVE_HEVC_EncodeMultiFrame", 12826, "pBuf != __null");
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get CVPixelBuffer in taggedBuffer");
            }
            goto LABEL_69;
          }
          v44 = AVE_HEVC_Encode();
          if (!(_DWORD)v44)
          {
            v29 = v65 + 1;
            v31 = (CMTag *)MEMORY[0x1E0CA27F8];
            if (v65 + 1 != v30)
              continue;
          }
          goto LABEL_72;
        }
LABEL_65:
        if (!AVE_Log_CheckLevel(0x14u, 4))
        {
LABEL_71:
          v44 = 4294949598;
          goto LABEL_72;
        }
        v48 = AVE_Log_CheckConsole(0x14u);
        v49 = AVE_GetCurrTime();
        v50 = AVE_Log_GetLevelStr(4);
        SInt64Value = CMTagGetSInt64Value(tagBuffer);
        if (v48)
        {
          printf("%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer\n", v49, 20, v50, "AVE_HEVC_EncodeMultiFrame", 12803, "storedLayerID != -1", SInt64Value);
          v49 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          CMTagGetSInt64Value(tagBuffer);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | mismatch VideoLayerID %lld in taggedBuffer", v49);
      }
      else if (AVE_Log_CheckLevel(0x14u, 4))
      {
        v20 = AVE_Log_CheckConsole(0x14u);
        v21 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | no enough buffers %d %d\n", v21, 20, v22, "AVE_HEVC_EncodeMultiFrame", 12749, "num >= pEnc->VideoParams.iLayerNum", v19, *v14);
          v21 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | no enough buffers %d %d", v21);
      }
LABEL_69:
      v44 = 4294949598;
      goto LABEL_72;
    }
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      v26 = AVE_Log_CheckConsole(0x14u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | invalid number of video layers %d\n", v27, 20, v28, "AVE_HEVC_EncodeMultiFrame", 12744, "pEnc->VideoParams.iLayerNum > 1 && pEnc->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *v14);
        v27 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | invalid number of video layers %d", v27);
    }
    v44 = 4294948264;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x14u, 4))
    {
      v23 = AVE_Log_CheckConsole(0x14u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get encoder %p\n", v24, 20, v25, "AVE_HEVC_EncodeMultiFrame", 12717, "pEnc", a1);
        v24 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get encoder %p", v24);
    }
    v44 = 4294954384;
  }
LABEL_72:
  kdebug_trace();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 183416));
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v52 = AVE_Log_CheckConsole(0x14u);
    v53 = AVE_GetCurrTime();
    v54 = AVE_Log_GetLevelStr(7);
    if (v52)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x\n", v53, 20, v54, "AVE_HEVC_EncodeMultiFrame", v44);
      v55 = AVE_GetCurrTime();
      v64 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v55, 20, v64, "AVE_HEVC_EncodeMultiFrame", v44);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit 0x%x", v53, 20, v54, "AVE_HEVC_EncodeMultiFrame", v44);
    }
  }
  return v44;
}

void AVE_PrepareCropParams(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;

  v2 = (int *)(a1 + 183532);
  v3 = a1 + 103080;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams\n", CurrTime, 20, LevelStr);
      v7 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", v7, 20, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareCropParams", CurrTime, 20, LevelStr);
    }
  }
  v8 = *(_DWORD *)(a1 + 1880);
  v9 = *(_DWORD *)(a1 + 1884);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(a1 + 103092) = 0;
  *(_QWORD *)(a1 + 103084) = 0;
  if (v9 < 0x40 || (v9 & 0xF) != 0)
  {
    if (*v2 >= 11)
      v2[359] = v9;
    v11 = (v9 + 15) & 0xFFFFFFF0;
    if (v11 <= 0x40)
      v11 = 64;
    *(_DWORD *)(a1 + 1884) = v11;
    *(_BYTE *)v3 = 1;
    *(_DWORD *)(v3 + 16) = v11 - v9;
  }
  if (v8 < 0xA0 || (v8 & 0xF) != 0)
  {
    if (*v2 >= 11)
      v2[358] = v8;
    v12 = (v8 + 15) & 0xFFFFFFF0;
    if (v12 <= 0xA0)
      v12 = 160;
    *(_DWORD *)(a1 + 1880) = v12;
    *(_BYTE *)v3 = 1;
    *(_DWORD *)(v3 + 8) = v12 - v8;
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    v13 = AVE_Log_CheckConsole(0x16u);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(7);
    if (v13)
    {
      printf("%lld %d AVE %s: FIG: input -> %dx%d\n", v14, 22, v15, v8, v9);
      v16 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v16, 22, v30, v8, v9);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input -> %dx%d", v14, 22, v15, v8, v9);
    }
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    v17 = AVE_Log_CheckConsole(0x16u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(7);
    v20 = *(_DWORD *)(a1 + 1884);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: input multiple -> %dx%d\n", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v21, 22, v22, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: input multiple -> %dx%d", v18, 22, v19, *(_DWORD *)(a1 + 1880), v20);
    }
  }
  if (AVE_Log_CheckLevel(0x16u, 7))
  {
    v23 = AVE_Log_CheckConsole(0x16u);
    v24 = AVE_GetCurrTime();
    v25 = AVE_Log_GetLevelStr(7);
    v26 = *(_DWORD *)(v3 + 8);
    if (v23)
    {
      printf("%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v27, 22, v28, *(_DWORD *)(v3 + 16), *(_DWORD *)(v3 + 8));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: frame_crop_bottom_offset %d frame_crop_right_offset %d", v24, 22, v25, *(_DWORD *)(v3 + 16), v26);
    }
  }
}

double AVE_SetEncoderDefault(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  uint64_t i;
  int v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  const char *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;

  v22 = (_DWORD *)(a1 + 183532);
  v2 = a1 + 137620;
  v25 = a1 + 118360;
  v26 = a1 + 126848;
  v3 = a1 + 109540;
  v4 = a1 + 102508;
  v23 = a1 + 87644;
  v24 = (_BYTE *)(a1 + 92788);
  v5 = a1 + 19452;
  v6 = a1 + 18808;
  v7 = a1 + 18448;
  v8 = a1 + 17868;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v9 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v9)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault\n", CurrTime, 20, LevelStr);
      v12 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", v12, 20, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetEncoderDefault", CurrTime, 20, LevelStr);
    }
  }
  *(_BYTE *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 200) = xmmword_1B5625540;
  *(_QWORD *)(a1 + 18664) = 31;
  *(_BYTE *)(v7 + 228) = 0;
  *(_DWORD *)(v7 + 232) = 1;
  *(_DWORD *)(v7 + 236) = 16777473;
  *(_BYTE *)(v7 + 240) = 1;
  *(_QWORD *)(a1 + 18736) = 0;
  *(_OWORD *)(a1 + 18689) = 0u;
  *(_OWORD *)(a1 + 18705) = 0u;
  *(_OWORD *)(a1 + 18721) = 0u;
  *(_BYTE *)(v7 + 304) = 1;
  *(_QWORD *)(a1 + 18744) = 0xC800000002;
  *(_WORD *)(v7 + 321) = 0;
  *(_BYTE *)(v7 + 326) = 0;
  v21 = *(_DWORD *)(a1 + 1884);
  *(_DWORD *)(v7 + 328) = 2
                        * (((v21 + 31) >> 5) * ((*(_DWORD *)(a1 + 1880) + 31) >> 5) > 0x398);
  *(_WORD *)(v7 + 332) = 0;
  *(_OWORD *)(a1 + 18784) = xmmword_1B5625550;
  *(_QWORD *)(a1 + 18888) = 0;
  *(_DWORD *)(a1 + 18896) = 0;
  *(_QWORD *)(a1 + 18872) = 0;
  *(_QWORD *)(a1 + 18880) = 0;
  *(_DWORD *)(v6 + 60) = -1;
  *(_DWORD *)(v6 + 46) = 0x10000;
  *(_BYTE *)(v6 + 50) = 0;
  *(_QWORD *)(v6 + 38) = 0x100000100;
  *(_WORD *)(v6 + 52) = 0;
  *(_DWORD *)(v7 + 352) = 1;
  *(_BYTE *)(v6 + 54) = 0;
  *(_DWORD *)(v6 + 101) = 0x10000;
  *(_QWORD *)(v6 + 628) = 0;
  *(_DWORD *)(v5 + 684) = 0;
  bzero((void *)(a1 + 19460), 0x2A0uLL);
  bzero((void *)(a1 + 18920), 0x201uLL);
  for (i = 0; i != 672; i += 112)
    *(_QWORD *)(a1 + 19460 + i) = 0xFFFFFFFF00000001;
  *(_QWORD *)v5 = 0x100000006;
  *(_DWORD *)(v5 + 680) = 1;
  *(_BYTE *)(v5 + 689) = 1;
  *(_BYTE *)(v8 + 452) = 0;
  *(_BYTE *)(v5 + 734) = 1;
  *(_DWORD *)(v6 + 108) = 0;
  *(_DWORD *)(v5 + 700) = 0;
  *(_DWORD *)(v5 + 716) = 0;
  *(_BYTE *)(v5 + 724) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1920) = 0;
  *(_BYTE *)(a1 + 1924) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  v14 = *(_DWORD *)(a1 + 2024);
  *(_DWORD *)(v8 + 524) = 0;
  *(_DWORD *)(a1 + 2024) = v14 | 7;
  *(_DWORD *)(a1 + 2012) = -1;
  *(_DWORD *)v8 = 0;
  *(_WORD *)(v8 + 4) = 4 * (*v22 > 5);
  *(_WORD *)(v8 + 6) = 0;
  *(_BYTE *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 2;
  *(_BYTE *)(v8 + 10) = 0;
  *(_WORD *)(a1 + 1925) = 0;
  *(_BYTE *)(v8 + 14) = 0;
  *(_DWORD *)(v8 + 184) = 1;
  *(_BYTE *)(v8 + 188) = 0;
  *(_QWORD *)(v8 + 192) = 1;
  *(_DWORD *)(v8 + 200) = v21;
  *(_DWORD *)(v8 + 456) = 16;
  *(_WORD *)(v8 + 460) = 0;
  *(_WORD *)(v8 + 144) = 256;
  *(_WORD *)(v8 + 468) = 0;
  *(_BYTE *)(v8 + 481) = 0;
  *(_WORD *)(v8 + 520) = 0;
  *(_BYTE *)(v8 + 528) = 0;
  *(_DWORD *)(v8 + 532) = 0;
  *(_QWORD *)(a1 + 18404) = -1;
  *(_QWORD *)(a1 + 18412) = -1;
  *(_DWORD *)(v8 + 564) = 0;
  *(_QWORD *)(a1 + 1936) = 0;
  *(_BYTE *)(v8 + 577) = 5;
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(a1 + 18460) = 0;
  *(_QWORD *)(a1 + 18452) = 0;
  *(_QWORD *)(a1 + 18474) = 0;
  *(_QWORD *)(a1 + 18468) = 0;
  *(_QWORD *)(v7 + 36) = 0x1000000001;
  *(_QWORD *)(a1 + 18624) = 8;
  *(_DWORD *)(v8 + 556) = 2;
  *(_BYTE *)(v7 + 172) = 0;
  *(_WORD *)(v8 + 20) = 3;
  *(_WORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 12) = 1;
  *(_QWORD *)(v8 + 48) = 0x8FFFFFFFFLL;
  *(_DWORD *)(v8 + 36) = 0xFFFF;
  *(_BYTE *)(v8 + 482) = 0;
  *(_BYTE *)(v8 + 552) = 21;
  *(_DWORD *)(a1 + 192) = ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880))
                                       * 1.5
                                       * 0.075
                                       * 30.0);
  *(_DWORD *)v6 = 1;
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(v5 + 884) = 0;
  *(_QWORD *)(a1 + 2028) = 0;
  *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 244) = 1;
  *(_WORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 246) = 16843009;
  *(_DWORD *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 254) = 0;
  *(_QWORD *)&v15 = 0x40000000400;
  *((_QWORD *)&v15 + 1) = 0x40000000400;
  *(_OWORD *)(a1 + 268) = v15;
  *(_QWORD *)(a1 + 284) = 1024;
  *(_BYTE *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  if (!*(_BYTE *)(v7 + 320))
    *(_DWORD *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(_QWORD *)(a1 + 1824) = 0x1A0000001ALL;
  *(_OWORD *)(a1 + 440) = unk_1B562594C;
  *(_OWORD *)(a1 + 376) = unk_1B562590C;
  *(_OWORD *)(a1 + 392) = xmmword_1B562591C;
  *(_OWORD *)(a1 + 408) = unk_1B562592C;
  *(_OWORD *)(a1 + 424) = xmmword_1B562593C;
  *(_OWORD *)(a1 + 312) = unk_1B56258CC;
  *(_OWORD *)(a1 + 328) = xmmword_1B56258DC;
  *(_OWORD *)(a1 + 344) = unk_1B56258EC;
  *(_OWORD *)(a1 + 360) = xmmword_1B56258FC;
  *(_OWORD *)(a1 + 296) = qp2Lambda;
  *(_OWORD *)(a1 + 456) = xmmword_1B562595C;
  *(_OWORD *)(a1 + 472) = unk_1B562596C;
  *(_OWORD *)(a1 + 648) = unk_1B5625A1C;
  *(_OWORD *)(a1 + 664) = xmmword_1B5625A2C;
  *(_OWORD *)(a1 + 680) = unk_1B5625A3C;
  *(_OWORD *)(a1 + 696) = xmmword_1B5625A4C;
  *(_OWORD *)(a1 + 584) = unk_1B56259DC;
  *(_OWORD *)(a1 + 600) = xmmword_1B56259EC;
  *(_OWORD *)(a1 + 616) = unk_1B56259FC;
  *(_OWORD *)(a1 + 632) = xmmword_1B5625A0C;
  *(_OWORD *)(a1 + 520) = *(_OWORD *)algn_1B562599C;
  *(_OWORD *)(a1 + 536) = xmmword_1B56259AC;
  *(_QWORD *)&v16 = 0xC0000000CLL;
  *((_QWORD *)&v16 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1840) = v16;
  *(_WORD *)(a1 + 255) = 257;
  *(_BYTE *)(a1 + 257) = 0;
  *(_QWORD *)(a1 + 1816) = 0x403A000000000000;
  *(_DWORD *)(a1 + 1832) = 26;
  *(_OWORD *)(a1 + 552) = unk_1B56259BC;
  *(_OWORD *)(a1 + 568) = xmmword_1B56259CC;
  *(_OWORD *)(a1 + 488) = xmmword_1B562597C;
  *(_OWORD *)(a1 + 504) = qp2LambdaArray;
  memcpy((void *)(a1 + 712), &lambdaArray, 0x414uLL);
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_QWORD *)(a1 + 1808) = 0;
  *(_BYTE *)(a1 + 250) = 0;
  *(_OWORD *)(a1 + 1756) = xmmword_1B5625560;
  *(_BYTE *)(a1 + 1772) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(v6 + 632) = 30;
  *(_BYTE *)(v8 + 576) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 1864) = 0;
  *(_DWORD *)(v5 + 880) = 0;
  *(_BYTE *)(v5 + 735) = 0;
  *(_WORD *)(v8 + 20) = 0;
  *(_DWORD *)(v5 + 896) = 0;
  *(_WORD *)(v5 + 900) = 257;
  *(_DWORD *)(v5 + 908) = 0;
  *(_BYTE *)(v5 + 912) = 0;
  *(_OWORD *)(a1 + 22084) = 0u;
  *(_OWORD *)(a1 + 22056) = 0u;
  *(_OWORD *)(a1 + 22072) = 0u;
  *(_OWORD *)(a1 + 22024) = 0u;
  *(_OWORD *)(a1 + 22040) = 0u;
  *(_OWORD *)(a1 + 22008) = 0u;
  *(_DWORD *)(v5 + 2552) = 4;
  result = 0.0;
  *(_QWORD *)(v5 + 2648) = 0;
  *(_BYTE *)(v5 + 2548) = 0;
  *(_BYTE *)v23 = 0;
  *(_QWORD *)(v23 + 4) = 0x5DC0000003E9;
  *(_BYTE *)(v23 + 12) = 0;
  *(_DWORD *)(v23 + 20) = 0;
  *v24 = 0;
  *(_QWORD *)(a1 + 20368) = 0;
  *(_DWORD *)(v5 + 924) = 1;
  *(_WORD *)(v5 + 960) = 1;
  *(_DWORD *)(v5 + 962) = 16843009;
  *(_DWORD *)(v5 + 966) = 65793;
  *(_DWORD *)(v5 + 976) = 0;
  *(_QWORD *)(a1 + 20872) = 0x101010101010101;
  *(_QWORD *)(a1 + 20840) = 0x101010101010101;
  *(_QWORD *)&v18 = 0x101010101010101;
  *((_QWORD *)&v18 + 1) = 0x101010101010101;
  *(_OWORD *)(a1 + 20808) = v18;
  *(_OWORD *)(a1 + 20824) = v18;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(a1 + 102504) = 0;
  *(_QWORD *)(a1 + 102496) = 0;
  *(_DWORD *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 44) = 16842753;
  *(_DWORD *)(v4 + 50) = 65793;
  *(_DWORD *)(v4 + 60) = 0;
  *(_QWORD *)(v4 + 544) = 0x100000000;
  *(_DWORD *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_DWORD *)(v4 + 600) = 7;
  *(_BYTE *)(v4 + 604) = 0;
  *(_OWORD *)(a1 + 103168) = 0u;
  *(_OWORD *)(a1 + 103184) = 0u;
  *(_OWORD *)(a1 + 103136) = 0u;
  *(_OWORD *)(a1 + 103152) = 0u;
  *(_OWORD *)(a1 + 103120) = 0u;
  *(_DWORD *)(v4 + 608) = 4;
  *(_OWORD *)(v4 + 692) = xmmword_1B5625570;
  *(_QWORD *)(v4 + 708) = 1;
  *(_BYTE *)(v4 + 716) = 0;
  *(_WORD *)v3 = 256;
  *(_BYTE *)(v3 + 2) = 0;
  *(_QWORD *)(v3 + 4) = 0x700000007;
  *(_DWORD *)(v3 + 12) = 1;
  *(_WORD *)(v3 + 20) = 1;
  *(_WORD *)(v3 + 156) = 1;
  *(_WORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_WORD *)(v3 + 176) = 256;
  *(_DWORD *)(v3 + 180) = 5;
  *(_BYTE *)(v3 + 188) = 1;
  *(_QWORD *)(v3 + 192) = 0x200000002;
  *(_DWORD *)(v3 + 200) = 2;
  *(_BYTE *)(v3 + 204) = 0;
  *(_BYTE *)(v3 + 236) = 0;
  *(_QWORD *)(v3 + 240) = 0x5DC0000003E9;
  *(_BYTE *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 256) = 257;
  *(_BYTE *)(v3 + 260) = 1;
  *(_OWORD *)(v3 + 264) = xmmword_1B5625580;
  *(_OWORD *)(v3 + 280) = xmmword_1B5625590;
  *(_DWORD *)(v3 + 296) = 48827;
  *(_BYTE *)(v3 + 300) = 0;
  *(_BYTE *)(v3 + 219) = 0;
  *(_BYTE *)(v3 + 328) = 0;
  *(_DWORD *)(v3 + 8816) = 0;
  *(_WORD *)v25 = 0;
  *(_QWORD *)(a1 + 118344) = 0;
  *(_WORD *)(a1 + 118352) = 0;
  *(_QWORD *)(a1 + 118364) = 0;
  *(_QWORD *)(a1 + 118370) = 0;
  *(_OWORD *)(v25 + 24) = xmmword_1B56255A0;
  *(_OWORD *)(v25 + 56) = xmmword_1B56255A0;
  *(_QWORD *)&v19 = 0xC0000000CLL;
  *((_QWORD *)&v19 + 1) = 0xC0000000CLL;
  *(_OWORD *)(v25 + 40) = v19;
  *(_OWORD *)(v25 + 72) = v19;
  *(_DWORD *)(v25 + 89) = 0;
  *(_BYTE *)(v25 + 93) = 1;
  *(_DWORD *)(v25 + 2157) = 256;
  *(_BYTE *)(v25 + 2172) = 0;
  *(_BYTE *)(v25 + 18) = 1;
  *(_DWORD *)(v25 + 20) = 2;
  *(_BYTE *)(v26 + 17) = 0;
  *(_BYTE *)(v25 + 88) = 0;
  *(_DWORD *)(v26 + 20) = 0;
  *(_DWORD *)v26 = 0;
  *(_BYTE *)(v26 + 4) = 0;
  *(_WORD *)v2 = 1;
  *(_DWORD *)(v2 + 4) = 0;
  *(_DWORD *)(v2 + 16) = 2;
  *(_WORD *)(v2 + 273) = 257;
  *(_DWORD *)(v2 + 928) = 0;
  *(_BYTE *)(v2 + 952) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 36) = 0;
  *(_BYTE *)(v2 + 272) = 0;
  *(_WORD *)(v2 + 412) = 0;
  *(_QWORD *)(a1 + 137895) = 0;
  *(_BYTE *)(a1 + 137903) = 0;
  *(_WORD *)(v2 + 941) = 0;
  *(_DWORD *)(v2 + 848) = 3;
  *(_QWORD *)(v2 + 1224) = -1;
  *(_BYTE *)(v2 + 414) = 1;
  *(_QWORD *)(a1 + 1872) = 0;
  return result;
}

uint64_t AVE_HEVC_Encode()
{
  _DWORD *v0;
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  __int128 *v9;
  __CVBuffer *v10;
  char *v11;
  const void **DerivedStorage;
  unsigned int *v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t CurrTime;
  const char *LevelStr;
  char *v21;
  __uint64_t v22;
  uint64_t v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  OSType PixelFormatType;
  char *v37;
  const void *v38;
  int v39;
  unsigned int v40;
  int v41;
  __uint64_t v42;
  const char *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  int v68;
  int64_t v69;
  __uint64_t v70;
  const char *v71;
  int v72;
  __uint64_t v73;
  const char *v74;
  __uint64_t v75;
  int v77;
  __uint64_t v78;
  const char *v79;
  int v80;
  int64_t v81;
  __uint64_t v82;
  const char *v83;
  int v84;
  __uint64_t v85;
  int v86;
  __uint64_t v87;
  const char *v88;
  int v89;
  int v90;
  int v91;
  __uint64_t v92;
  const char *v93;
  int v94;
  int64_t v95;
  __uint64_t v96;
  const char *v97;
  int v98;
  __uint64_t v99;
  const char *v100;
  int v101;
  int64_t v102;
  __uint64_t v103;
  const char *v104;
  const void *Value;
  const void *v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  __uint64_t v110;
  unsigned int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  __uint64_t v120;
  const char *v121;
  __uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  const __CFDictionary *v128;
  int v129;
  __uint64_t v130;
  const char *v131;
  uint64_t v132;
  _DWORD *v133;
  unsigned int *v134;
  const void **v135;
  int v136;
  __uint64_t v137;
  const char *v138;
  __uint64_t v139;
  int v140;
  __uint64_t v141;
  const char *v142;
  int v143;
  __uint64_t v144;
  const char *v145;
  unsigned int v146;
  uint64_t v147;
  __uint64_t v148;
  const char *v149;
  int v150;
  _DWORD *v151;
  BOOL v152;
  double v153;
  int v154;
  _BOOL4 v155;
  double v156;
  double v157;
  int v158;
  __uint64_t v159;
  const char *v160;
  __uint64_t v161;
  int v162;
  __uint64_t v163;
  const char *v164;
  unsigned int v165;
  __uint64_t v166;
  int v167;
  double v168;
  int v169;
  char v170;
  int v171;
  int v172;
  _DWORD *v173;
  int Slide;
  signed int v175;
  BOOL v176;
  int v177;
  signed int v178;
  signed int v179;
  int v180;
  int v181;
  const char *v182;
  int TotalCnt;
  double Rt;
  __uint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  __uint64_t v191;
  const char *v192;
  const char *v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *v197;
  const char *v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  __uint64_t v202;
  __uint64_t v203;
  const void **v204;
  uint64_t v205;
  _DWORD *v206;
  const __CFDictionary *theDict;
  int v208;
  __uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _QWORD v221[4];
  __int128 v222;
  _QWORD v223[4];
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  int v231;
  int v232;
  char v233;
  __CVBuffer *v234;
  uint64_t v235;
  __int16 v236;
  const void **v237;
  const void **v238;
  const void **v239;
  const void **v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  const void **v246;
  const void **v247;
  const void **v248;
  __uint64_t v249;
  uint64_t v250;

  MEMORY[0x1E0C80A78]();
  v1 = v0;
  v3 = v2;
  v205 = v4;
  theDict = v5;
  v7 = v6;
  v9 = v8;
  v250 = *MEMORY[0x1E0C80C00];
  v234 = v10;
  v233 = 0;
  v232 = 0;
  v231 = 0;
  v228 = 0uLL;
  v11 = (char *)AVE_DW_Get();
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v13 = (unsigned int *)(DerivedStorage + 22926);
  if (!DerivedStorage)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.\n", CurrTime, 3, LevelStr, "AVE_HEVC_Encode", 11902, "encoderPrivateStorage");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: FigBaseObjectGetDerivedStorage failed.");
    }
    goto LABEL_36;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v14 = AVE_Log_CheckConsole(0x14u);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(7);
    if (v14)
    {
      printf("%lld %d AVE %s: %s Enter\n", v15, 20, v16, "AVE_HEVC_Encode");
      v17 = AVE_GetCurrTime();
      v193 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v17, 20, v193, "AVE_HEVC_Encode");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", v15, 20, v16, "AVE_HEVC_Encode");
    }
  }
  if (*((_DWORD *)DerivedStorage + 45870))
    DerivedStorage[22936] = (const void *)AVE_GetCurrTime();
  if (!v234)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v33 = AVE_Log_CheckConsole(3u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v34, 3, v35, "AVE_HEVC_Encode", 11910, "imageBuffer");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_88;
  }
  v21 = (char *)DerivedStorage + 18420;
  v22 = AVE_GetCurrTime();
  v229 = *v9;
  v230 = *((_QWORD *)v9 + 2);
  v201 = *v7;
  v203 = v22;
  v23 = v7[1];
  v199 = v7[2];
  *(_QWORD *)&v228 = v229;
  DWORD2(v228) = DWORD2(v229);
  AVE_Time_Conv(0, (uint64_t)&v228);
  if (AVE_Log_CheckLevel(0x33u, 7))
  {
    v24 = AVE_Log_CheckConsole(0x33u);
    v25 = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(7);
    v27 = *((unsigned int *)DerivedStorage + 45885);
    v28 = *((unsigned int *)DerivedStorage + 45853);
    v29 = *(_QWORD *)v9;
    v30 = *((unsigned int *)v9 + 2);
    if (v24)
    {
      printf("%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v25, 51, v26, "AVE_HEVC_Encode", 11933, v27, v28, v29, v30, *((_DWORD *)v9 + 3), *((_QWORD *)v9 + 2), (_QWORD)v228, DWORD2(v228), *v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 3), v7[2]);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v31, 51, v32, "AVE_HEVC_Encode", 11933, *((unsigned int *)DerivedStorage + 45885), *((unsigned int *)DerivedStorage + 45853), *(_QWORD *)v9, *((unsigned int *)v9 + 2));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d timestamp %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v25, 51, v26, "AVE_HEVC_Encode", 11933, v27, v28, v29, v30);
    }
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(v234);
  *((_DWORD *)DerivedStorage + 46366) = PixelFormatType;
  if (!*((_DWORD *)DerivedStorage + 45853))
  {
    v237 = (const void **)DerivedStorage[235];
    v37 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (!v37)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v55 = AVE_Log_CheckConsole(3u);
        v56 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x\n", v56, 3, v57, "AVE_HEVC_Encode", 11949, "pPixelFmt != __null", DerivedStorage, *((_DWORD *)DerivedStorage + 45885), *((_DWORD *)DerivedStorage + 46366));
          v56 = AVE_GetCurrTime();
          v57 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to find pixel format %p %d 0x%x", v56, 3, v57, "AVE_HEVC_Encode", 11949, "pPixelFmt != __null", DerivedStorage, *((unsigned int *)DerivedStorage + 45885), *((unsigned int *)DerivedStorage + 46366));
      }
      goto LABEL_88;
    }
    if (v11[792])
      v38 = v11 + 792;
    else
      v38 = 0;
    if (DerivedStorage[22944])
      v39 = 2;
    else
      v39 = 1;
    AVE_Dump_Init((uint64_t)DerivedStorage[22953], v38, *((_DWORD *)DerivedStorage + 45882), *((_DWORD *)DerivedStorage + 4690), *((_DWORD *)v11 + 196), *((_DWORD *)v11 + 197), &v237, v39, *((_DWORD *)v37 + 3), *((_DWORD *)v37 + 1), *((_DWORD *)DerivedStorage + 48));
    CVPixelBufferGetIOSurface(v234);
    DerivedStorage[239] = (const void *)IOSurfaceGetProtectionOptions();
  }
  AVE_Dump_WriteInput(DerivedStorage[22953], *((_DWORD *)DerivedStorage + 45891), v234);
  v40 = *v13;
  if (*v13 == 30566)
  {
    if (AVE_ISP_CheckMetadata(v234))
      v46 = 1;
    else
      v46 = 2;
    *((_DWORD *)DerivedStorage + 4701) = v46;
    if (AVE_ManageSessionSettings((uint64_t)DerivedStorage))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v47 = AVE_Log_CheckConsole(3u);
        v48 = AVE_GetCurrTime();
        v49 = AVE_Log_GetLevelStr(4);
        if (v47)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed\n", v48, 3, v49, "AVE_HEVC_Encode", 12108, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ManageSessionSettings failed");
      }
      goto LABEL_88;
    }
    AVE_UpdateCropParams((uint64_t)DerivedStorage, v234);
    if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, (const void **)&v234, &v233, &v232, &v231, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v58 = AVE_Log_CheckConsole(3u);
        v42 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr(4);
        if (!v58)
        {
LABEL_87:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.");
          goto LABEL_88;
        }
        v44 = 12118;
LABEL_62:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_HEVC_VerifyImageBuffer failed.\n", v42, 3, v43, "AVE_HEVC_Encode", v44, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_87;
      }
LABEL_88:
      v45 = 4294954394;
      goto LABEL_89;
    }
    AVE_SetEncoderBasedOnFirstFrame((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      v63 = *((_DWORD *)DerivedStorage + 57);
      if (v63 < 1)
        v63 = 30;
      if (!*((_BYTE *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v63
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((_BYTE *)DerivedStorage + 20186) = 0;
      }
    }
    if (AVE_ValidateEncoderParameters(DerivedStorage))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_88;
      v64 = AVE_Log_CheckConsole(3u);
      v60 = AVE_GetCurrTime();
      v61 = AVE_Log_GetLevelStr(4);
      if (v64)
      {
        v62 = 12146;
        goto LABEL_82;
      }
LABEL_104:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
      goto LABEL_88;
    }
    AVE_PrepareVideoAndSequenceHeader((uint64_t)DerivedStorage, v234);
    AVE_PreparePictureHeader(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45870))
    {
      DerivedStorage[22937] = (const void *)AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        v77 = AVE_Log_CheckConsole(0x18u);
        v78 = AVE_GetCurrTime();
        v79 = AVE_Log_GetLevelStr(6);
        v80 = *((_DWORD *)DerivedStorage + 45885);
        v81 = (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936];
        if (v77)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us\n", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45853), v81);
          v82 = AVE_GetCurrTime();
          v83 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v82, 24, v83, *((_DWORD *)DerivedStorage + 45885), *((_DWORD *)DerivedStorage + 45853), (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Init setup  took %0lld us", v78, 24, v79, v80, *((_DWORD *)DerivedStorage + 45853), v81);
        }
      }
      DerivedStorage[22936] = (const void *)AVE_GetCurrTime();
    }
    v246 = 0;
    v244 = 0u;
    v245 = 0u;
    v242 = 0u;
    v243 = 0u;
    v237 = DerivedStorage + 234;
    v238 = DerivedStorage + 235;
    v239 = DerivedStorage + 2330;
    v240 = DerivedStorage + 24;
    v241 = *((_OWORD *)DerivedStorage + 11476);
    *(_QWORD *)&v244 = DerivedStorage + 2543;
    *((_QWORD *)&v244 + 1) = (char *)DerivedStorage + 102484;
    *(_QWORD *)&v245 = DerivedStorage + 13801;
    *((_QWORD *)&v245 + 1) = (char *)DerivedStorage + 118332;
    v246 = DerivedStorage + 15996;
    v247 = DerivedStorage + 17201;
    v248 = DerivedStorage + 19920;
    v249 = v203;
    v85 = v203;
    if (AVE_USL_Drv_Start((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183512), (uint64_t)DerivedStorage[22944], (uint64_t)(DerivedStorage + 8), (unsigned int *)DerivedStorage + 5038, (char *)DerivedStorage + 19452))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v90 = AVE_Log_CheckConsole(3u);
        v87 = AVE_GetCurrTime();
        v88 = AVE_Log_GetLevelStr(4);
        if (!v90)
        {
LABEL_228:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.");
          goto LABEL_36;
        }
        v89 = 12207;
LABEL_124:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Start failed.\n", v87, 3, v88, "AVE_HEVC_Encode", v89, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_228;
      }
LABEL_36:
      v45 = 4294954384;
      goto LABEL_89;
    }
  }
  else
  {
    if (v40 != 30567)
    {
      if (v40 != 30568)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v52 = AVE_Log_CheckConsole(3u);
          v53 = AVE_GetCurrTime();
          v54 = AVE_Log_GetLevelStr(4);
          if (v52)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.\n", v53, 3, v54, "AVE_HEVC_Encode", 12225, "false", *v13);
            v53 = AVE_GetCurrTime();
            v54 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_H264EncodeFrame encoderPrivateStorage->SessionStatus = 0x%08x.", v53, 3, v54, "AVE_HEVC_Encode", 12225, "false", *v13);
        }
        goto LABEL_36;
      }
      if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, (const void **)&v234, &v233, &v232, &v231, 0))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v41 = AVE_Log_CheckConsole(3u);
          v42 = AVE_GetCurrTime();
          v43 = AVE_Log_GetLevelStr(4);
          if (!v41)
            goto LABEL_87;
          v44 = 11976;
          goto LABEL_62;
        }
        goto LABEL_88;
      }
      goto LABEL_131;
    }
    if (AVE_ISP_CheckMetadata(v234))
      v50 = 1;
    else
      v50 = 2;
    *((_DWORD *)DerivedStorage + 4701) = v50;
    AVE_UpdateCropParams((uint64_t)DerivedStorage, v234);
    if (AVE_HEVC_VerifyImageBuffer((uint64_t)DerivedStorage, (const void **)&v234, &v233, &v232, &v231, 1))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v51 = AVE_Log_CheckConsole(3u);
        v42 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr(4);
        if (!v51)
          goto LABEL_87;
        v44 = 11993;
        goto LABEL_62;
      }
      goto LABEL_88;
    }
    AVE_SetEncoderBasedOnFirstFrame((uint64_t)DerivedStorage, *((_DWORD *)DerivedStorage + 4701) == 2);
    if (AVE_ValidateEncoderParameters(DerivedStorage))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_88;
      v59 = AVE_Log_CheckConsole(3u);
      v60 = AVE_GetCurrTime();
      v61 = AVE_Log_GetLevelStr(4);
      if (v59)
      {
        v62 = 12003;
LABEL_82:
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v60, 3, v61, "AVE_HEVC_Encode", v62, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_104;
      }
      goto LABEL_104;
    }
    AVE_PrepareVideoAndSequenceHeader((uint64_t)DerivedStorage, v234);
    AVE_PreparePictureHeader(DerivedStorage);
    if (*((_DWORD *)DerivedStorage + 45870))
    {
      DerivedStorage[22937] = (const void *)AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x18u, 6))
      {
        v65 = AVE_Log_CheckConsole(0x18u);
        v66 = AVE_GetCurrTime();
        v67 = AVE_Log_GetLevelStr(6);
        v68 = *((_DWORD *)DerivedStorage + 45885);
        v69 = (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936];
        if (v65)
        {
          printf("%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us\n", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45853), v69);
          v70 = AVE_GetCurrTime();
          v71 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v70, 24, v71, *((_DWORD *)DerivedStorage + 45885), *((_DWORD *)DerivedStorage + 45853), (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %d (%d) Pre Init setup  took %lld us", v66, 24, v67, v68, *((_DWORD *)DerivedStorage + 45853), v69);
        }
      }
      DerivedStorage[22936] = (const void *)AVE_GetCurrTime();
    }
    if (*((_DWORD *)DerivedStorage + 4701) == 2)
    {
      v84 = *((_DWORD *)DerivedStorage + 57);
      if (v84 < 1)
        v84 = 30;
      if (!*((_BYTE *)DerivedStorage + 1772)
        && (int)(((*((_DWORD *)DerivedStorage + 471) + 15) >> 4)
               * v84
               * ((*((_DWORD *)DerivedStorage + 470) + 15) >> 4)) > 1943999)
      {
        *((_DWORD *)DerivedStorage + 469) &= 0xFFFFFF1F;
        *((_BYTE *)DerivedStorage + 20186) = 0;
      }
    }
    v246 = 0;
    v244 = 0u;
    v245 = 0u;
    v242 = 0u;
    v243 = 0u;
    v237 = DerivedStorage + 234;
    v238 = DerivedStorage + 235;
    v239 = DerivedStorage + 2330;
    v240 = DerivedStorage + 24;
    v241 = *((_OWORD *)DerivedStorage + 11476);
    *(_QWORD *)&v244 = DerivedStorage + 2543;
    *((_QWORD *)&v244 + 1) = (char *)DerivedStorage + 102484;
    *(_QWORD *)&v245 = DerivedStorage + 13801;
    *((_QWORD *)&v245 + 1) = (char *)DerivedStorage + 118332;
    v246 = DerivedStorage + 15996;
    v247 = DerivedStorage + 17201;
    v248 = DerivedStorage + 19920;
    v249 = v203;
    v85 = v203;
    if (AVE_USL_Drv_Start((uint64_t)DerivedStorage[3], (uint64_t)&v237, (uint64_t)(DerivedStorage + 4), (uint64_t)*DerivedStorage, 0, (uint64_t)DerivedStorage[2], *((unsigned __int8 *)DerivedStorage + 183512), (uint64_t)DerivedStorage[22944], (uint64_t)(DerivedStorage + 8), (unsigned int *)DerivedStorage + 5038, (char *)DerivedStorage + 19452))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v86 = AVE_Log_CheckConsole(3u);
        v87 = AVE_GetCurrTime();
        v88 = AVE_Log_GetLevelStr(4);
        if (!v86)
          goto LABEL_228;
        v89 = 12083;
        goto LABEL_124;
      }
      goto LABEL_36;
    }
  }
  *v13 = 30568;
  if (!*((_DWORD *)DerivedStorage + 45870))
    goto LABEL_138;
  DerivedStorage[22937] = (const void *)AVE_GetCurrTime();
  if (AVE_Log_CheckLevel(0x18u, 6))
  {
    v91 = AVE_Log_CheckConsole(0x18u);
    v92 = AVE_GetCurrTime();
    v93 = AVE_Log_GetLevelStr(6);
    v94 = *((_DWORD *)DerivedStorage + 45885);
    v95 = (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936];
    if (v91)
    {
      printf("%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us\n", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45853), v95);
      v96 = AVE_GetCurrTime();
      v97 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v96, 24, v97, *((_DWORD *)DerivedStorage + 45885), *((_DWORD *)DerivedStorage + 45853), (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_USL_Drv_Start took %lld us", v92, 24, v93, v94, *((_DWORD *)DerivedStorage + 45853), v95);
    }
  }
  DerivedStorage[22936] = (const void *)AVE_GetCurrTime();
LABEL_131:
  v85 = v203;
  if (*((_DWORD *)DerivedStorage + 45870) && *v13 == 30568)
  {
    DerivedStorage[22937] = (const void *)AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v98 = AVE_Log_CheckConsole(0x18u);
      v99 = AVE_GetCurrTime();
      v100 = AVE_Log_GetLevelStr(6);
      v101 = *((_DWORD *)DerivedStorage + 45885);
      v102 = (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us\n", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45853), v102);
        v103 = AVE_GetCurrTime();
        v104 = AVE_Log_GetLevelStr(6);
        v85 = v203;
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v103, 24, v104, *((_DWORD *)DerivedStorage + 45885), *((_DWORD *)DerivedStorage + 45853), (_BYTE *)DerivedStorage[22937] - (_BYTE *)DerivedStorage[22936]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) AVE_HEVC_VerifyImageBuffer took %lld us", v99, 24, v100, v101, *((_DWORD *)DerivedStorage + 45853), v102);
      }
    }
    DerivedStorage[22936] = (const void *)AVE_GetCurrTime();
  }
LABEL_138:
  *v13 = 30568;
  v208 = 0;
  v217 = 0u;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  memset(v221, 0, sizeof(v221));
  v222 = 0u;
  memset(v223, 0, sizeof(v223));
  v224 = 0u;
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0;
  bzero(&v237, 0x4AF8uLL);
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("ResetRCState"));
    if (*((_DWORD *)DerivedStorage + 45883) == 26 && (*((_BYTE *)DerivedStorage + 1876) & 0xE0) == 0)
    {
      v106 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED610]);
      if (v106 && AVE_Log_CheckLevel(0x16u, 6))
      {
        v119 = AVE_Log_CheckConsole(0x16u);
        v120 = AVE_GetCurrTime();
        v121 = AVE_Log_GetLevelStr(6);
        if (v119)
        {
          printf("%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p\n", v120, 22, v121, *DerivedStorage, v106);
          v122 = AVE_GetCurrTime();
          v123 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v122, 22, v123, *DerivedStorage, v106);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: use scaled source for LRME, %p", v120, 22, v121, *DerivedStorage, v106);
        }
      }
    }
    else
    {
      v106 = 0;
    }
    if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
    {
      v85 = AVE_GetCurrTime();
      v209 = v85;
      AVE_USL_Drv_Complete((uint64_t)DerivedStorage[3], &v209);
    }
    else
    {
      v85 = v203;
    }
  }
  else
  {
    v106 = 0;
  }
  v216 = v205;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = v234;
  *((_QWORD *)&v218 + 1) = v106;
  *(_OWORD *)&v221[1] = v229;
  v221[3] = v230;
  *(_QWORD *)&v222 = v201;
  *((_QWORD *)&v222 + 1) = v23;
  v223[0] = v199;
  *(_OWORD *)&v223[1] = v228;
  BYTE8(v224) = *((_BYTE *)DerivedStorage + 183513);
  *(_QWORD *)&v225 = v85;
  DWORD2(v225) = *((_DWORD *)DerivedStorage + 45891);
  if (*((_DWORD *)DerivedStorage + 4701) == 2)
  {
    AVE_FPS::Add(DerivedStorage[22951], (int *)&v228);
    AVE_ISP_GetMetadata(v234, (double *)&v210);
    AVE_Dump_WriteISPMetadata(DerivedStorage[22953], *((_DWORD *)DerivedStorage + 45891), *((_DWORD *)DerivedStorage + 45853), (double *)&v210);
    if (*((int *)DerivedStorage + 45883) >= 16 && (*((_BYTE *)DerivedStorage + 1876) & 0xE0) != 0)
    {
      v204 = DerivedStorage;
      v206 = v1;
      if (*((_QWORD *)&v214 + 1) == 0x1FFFFFFFFLL && AVE_Log_CheckLevel(0x16u, 5))
      {
        v107 = AVE_Log_CheckConsole(0x16u);
        v108 = AVE_GetCurrTime();
        v109 = AVE_Log_GetLevelStr(5);
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!\n", v108, 22, v109);
          v110 = AVE_GetCurrTime();
          v195 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v110, 22, v195);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF Ban0Modulation Enabled, but Band0Strength is missing!", v108, 22, v109);
        }
      }
      if ((HIDWORD(v214) + 1) < 2 || DWORD2(v214) == -1)
      {
        v150 = *((unsigned __int8 *)v13 + 2060);
        if (*((double *)&v212 + 1) == 0.0 || *((double *)&v211 + 1) == 0.0 || *(double *)&v212 == 0.0)
        {
          if (AVE_Log_CheckLevel(0x1Cu, 7))
          {
            v162 = AVE_Log_CheckConsole(0x1Cu);
            v163 = AVE_GetCurrTime();
            v164 = AVE_Log_GetLevelStr(7);
            v165 = v13[1];
            if (v162)
            {
              printf("%lld %d AVE %s: FIG: F %d ISP meta data is missing!\n", v163, 28, v164, v165);
              v166 = AVE_GetCurrTime();
              v198 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v166, 28, v198, v13[1]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: F %d ISP meta data is missing!", v163, 28, v164, v165);
            }
          }
          DWORD2(v214) = 255;
          v170 = *((_BYTE *)v13 + 2060);
        }
        else
        {
          v151 = AVE_DW_Get();
          v152 = v13[31] == 26 && (_DWORD)v214 == 1587;
          v153 = *((double *)&v212 + 1) * *((double *)&v211 + 1) * *(double *)&v212 / (*(double *)&v213 * 16777216.0);
          v154 = v152;
          v155 = v215 == 2;
          if ((v154 & v155) != 0)
            v156 = 21.0;
          else
            v156 = 32.0;
          if ((v154 & v155) != 0)
            v157 = 16.0;
          else
            v157 = 24.0;
          if (AVE_Log_CheckLevel(0x16u, 8))
          {
            v158 = AVE_Log_CheckConsole(0x16u);
            v159 = AVE_GetCurrTime();
            v160 = AVE_Log_GetLevelStr(8);
            if (v158)
            {
              printf("%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d\n", v159, 22, v160, "AVE_HEVC_Encode", 12368, v13[1], v13[31], (_DWORD)v214, v215, (int)v156, (int)(v156 * 100.0) % 100, (int)v157, (int)(v157 * 100.0) % 100);
              v161 = AVE_GetCurrTime();
              v197 = AVE_Log_GetLevelStr(8);
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v161, 22, v197, "AVE_HEVC_Encode");
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %d, %d.%d %d.%d", v159, 22, v160, "AVE_HEVC_Encode");
            }
          }
          v167 = v151[333];
          v168 = (double)v167;
          if (v167 <= 0)
            v168 = v156;
          v169 = 127;
          if (v153 >= v168)
          {
            v170 = 1;
          }
          else
          {
            v170 = *((_BYTE *)v13 + 2060) != 0 && v153 >= v157;
            if (v170)
              v169 = 127;
            else
              v169 = 255;
          }
          DWORD2(v214) = v169;
          *((_BYTE *)v13 + 2060) = v170;
        }
        if (v170)
        {
          v171 = *((_DWORD *)v204 + 470);
          v172 = *((_DWORD *)v204 + 471);
          v173 = AVE_DW_Get();
          if (*((_BYTE *)v204 + 1772) || (Slide = *((_DWORD *)v204 + 57), Slide <= 0))
            Slide = (int)AVE_FPS::GetSlide(*((AVE_FPS **)v13 + 25));
          if (v150)
          {
            v175 = v173[334];
            v176 = v175 <= 0;
            v177 = 285600;
          }
          else
          {
            v175 = v173[335];
            v176 = v175 <= 0;
            v177 = 244800;
          }
          if (v176)
            v178 = v177;
          else
            v178 = v175;
          v179 = ((v172 + 31) >> 5) * ((v171 + 31) >> 5) * Slide;
          if (v179 > v178)
          {
            DWORD2(v214) = 255;
            *((_BYTE *)v13 + 2060) = 0;
          }
          if (AVE_Log_CheckLevel(0x1Cu, 8))
          {
            v180 = v150;
            v181 = AVE_Log_CheckConsole(0x1Cu);
            v202 = AVE_GetCurrTime();
            v200 = AVE_Log_GetLevelStr(8);
            if (*((_BYTE *)v13 + 2060))
              v182 = "Enable ";
            else
              v182 = "Disable";
            TotalCnt = AVE_FPS::GetTotalCnt(*((AVE_FPS **)v13 + 25));
            Rt = AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
            if (v181)
            {
              printf("%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)\n", v202, 28, v200, v182, Slide, TotalCnt, Rt, v179, v178, v180);
              v185 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(8);
              AVE_FPS::GetTotalCnt(*((AVE_FPS **)v13 + 25));
              AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v185, 28);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s MCTF. frameRate: %d cnt %d (%.2f), pixel rate %d threshold %d (prev set: %d)", v202, 28);
            }
          }
        }
      }
      DerivedStorage = v204;
      v1 = v206;
      if (*((int *)v204 + 57) >= 1 && HIDWORD(v214) && SDWORD2(v214) <= 254)
      {
        v186 = *((_DWORD *)v204 + 470);
        v187 = *((_DWORD *)v204 + 471);
        v188 = AVE_FPS::GetRt(*((AVE_FPS **)v13 + 25));
        v189 = ((v187 + 31) >> 5) * ((v186 + 31) >> 5) * v188;
        if (*((_BYTE *)v204 + 1772))
        {
          if (v189 < 0x68971)
            goto LABEL_160;
        }
        else if (v189 <= 0x45BA0)
        {
          goto LABEL_160;
        }
        if (AVE_Log_CheckLevel(0x16u, 5))
        {
          v190 = AVE_Log_CheckConsole(0x16u);
          v191 = AVE_GetCurrTime();
          v192 = AVE_Log_GetLevelStr(5);
          if (v190)
          {
            printf("%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d\n", v191, 22, v192, v188, v186, v187, *((unsigned __int8 *)v204 + 1772), HIDWORD(v214), DWORD2(v214));
            v191 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(5);
          }
          syslog(3, "%lld %d AVE %s: FIG: MCTF unsupported fps %d for %dx%d. VFR %d. Band0Mod %d, %d", v191, 22);
          DerivedStorage = v204;
        }
      }
    }
  }
  else
  {
    v111 = ((*((_DWORD *)DerivedStorage + 471) + 31) >> 5)
         * ((*((_DWORD *)DerivedStorage + 470) + 31) >> 5);
    if (v111 >> 5 < 0xFF)
    {
      if (v111 < 0x7F8)
        v112 = 11;
      else
        v112 = 16;
    }
    else
    {
      v112 = 21;
    }
    *v21 = v112;
    DWORD2(v214) = 127;
  }
LABEL_160:
  v223[3] = &v210;
  if (v21[491] && (int)v13[31] >= 3 && (*((_DWORD *)DerivedStorage + 57) - 1) <= 0x3B)
  {
    v208 = 10;
    if (AVE_ANFD_GetInfo(theDict, &DerivedStorage[80 * v13[386] + 22959], &v208))
    {
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        v118 = v13[388];
        if (v118 != -1 && v118 + 1 == v13[1])
        {
          *(_QWORD *)&v226 = &DerivedStorage[80 * (v13[386] == 0) + 22959];
          DWORD2(v226) = v13[387];
        }
      }
    }
    else
    {
      v236 = 0;
      v235 = 0;
      AVE_SNPrintf((char *)&v235, 10, "%d %d", v113, v114, v115, v116, v117, v13[33]);
      AVE_ANFD_PrintInfo((unsigned int *)&DerivedStorage[80 * v13[386] + 22959], v208, 47, 6, (uint64_t)&v235, 0, v124, v125);
      v126 = v13[386];
      *(_QWORD *)&v226 = &DerivedStorage[80 * v126 + 22959];
      v127 = v208;
      DWORD2(v226) = v208;
      if (*((_DWORD *)DerivedStorage + 57) == 60)
      {
        v13[386] = v126 == 0;
        v13[387] = v127;
        v13[388] = v13[1];
      }
    }
  }
  *(_QWORD *)&v220 = 0;
  BYTE8(v220) = *((_BYTE *)v13 + 107);
  if (*((_BYTE *)v13 + 106))
  {
    v128 = (const __CFDictionary *)CMGetAttachment(v234, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v128)
      *(_QWORD *)&v220 = CFDictionaryCreateCopy(0, v128);
  }
  AVE_GetPerFrameData((uint64_t)DerivedStorage, theDict, (int *)&v237, (uint64_t)&v216);
  if (!*((_DWORD *)v21 + 261))
    AVE_UpdateSettingsBasedOnSNR((uint64_t)DerivedStorage, (uint64_t)&v237, *(double *)v223[3]);
  *(_QWORD *)&v224 = &v237;
  if (v13[39] && *((_QWORD *)v13 + 18) && AVE_MultipassDataFetch((uint64_t)DerivedStorage, &v229))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v129 = AVE_Log_CheckConsole(3u);
      v130 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(4);
      if (v129)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.\n", v130, 3, v131, "AVE_HEVC_Encode", 12590, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_MultipassDataFetch failed.");
    }
    goto LABEL_36;
  }
  DWORD2(v227) = v13[1];
  HIDWORD(v227) = v3;
  v132 = AVE_USL_Drv_Process((uint64_t)DerivedStorage[3], (uint64_t)&v216);
  v45 = v132;
  if ((_DWORD)v132)
  {
    if ((_DWORD)v132 != -536870173)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v140 = AVE_Log_CheckConsole(3u);
        v141 = AVE_GetCurrTime();
        v142 = AVE_Log_GetLevelStr(4);
        if (v140)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.\n", v141, 3, v142, "AVE_HEVC_Encode", 12607, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_USL_Drv_Process failed.");
      }
      goto LABEL_36;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v133 = v1;
      v134 = v13;
      v135 = DerivedStorage;
      v136 = AVE_Log_CheckConsole(0x16u);
      v137 = AVE_GetCurrTime();
      v138 = AVE_Log_GetLevelStr(5);
      if (v136)
      {
        printf("%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame\n", v137, 22, v138);
        v139 = AVE_GetCurrTime();
        v196 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v139, 22, v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: device returned kIOReturnNoPower. reject the frame", v137, 22, v138);
      }
      DerivedStorage = v135;
      v13 = v134;
      v1 = v133;
    }
  }
  if (v1)
    *v1 |= 1u;
  if (v13[18])
  {
    *((_QWORD *)v13 + 11) = AVE_GetCurrTime();
    if (AVE_Log_CheckLevel(0x18u, 6))
    {
      v143 = AVE_Log_CheckConsole(0x18u);
      v144 = AVE_GetCurrTime();
      v145 = AVE_Log_GetLevelStr(6);
      v146 = v13[33];
      v147 = *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10);
      if (v143)
      {
        printf("%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us\n", v144, 24, v145, v146, v13[1], v147);
        v148 = AVE_GetCurrTime();
        v149 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v148, 24, v149, v13[33], v13[1], *((_QWORD *)v13 + 11) - *((_QWORD *)v13 + 10));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: %d (%d) EncodeFrame took %lld us", v144, 24, v145, v146, v13[1], v147);
      }
    }
  }
LABEL_89:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v72 = AVE_Log_CheckConsole(0x14u);
    v73 = AVE_GetCurrTime();
    v74 = AVE_Log_GetLevelStr(7);
    if (v72)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x\n", v73, 20, v74, v45);
      v75 = AVE_GetCurrTime();
      v194 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v75, 20, v194, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_HEVCEncodeFrame err 0x%08x", v73, 20, v74, v45);
    }
  }
  if (v233 && v234)
    CVPixelBufferRelease(v234);
  if (DerivedStorage)
    ++v13[1];
  return v45;
}

uint64_t AVE_HEVC_VerifyImageBuffer(uint64_t a1, const void **a2, _BYTE *a3, _DWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  char v26;
  int v27;
  int v28;
  __int128 v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v34;
  uint64_t updated;
  int v36;
  __uint64_t CurrTime;
  const char *LevelStr;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[28];

  v11 = a1 + 183388;
  v12 = (_DWORD *)(a1 + 103056);
  v13 = a1 + 17880;
  memset(v50, 0, sizeof(v50));
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  memset(v45, 0, sizeof(v45));
  v14 = *(_DWORD *)(a1 + 184964);
  if (!v14)
    v14 = *(_DWORD *)(a1 + 1880);
  v39 = v14;
  v15 = *(_DWORD *)(a1 + 184968);
  if (!v15)
    v15 = *(_DWORD *)(a1 + 1884);
  v16 = *(_DWORD *)(a1 + 183528);
  v17 = *(_DWORD *)(a1 + 183532);
  v40 = v15;
  v41 = v16;
  v18 = *(_DWORD *)(a1 + 18760);
  v19 = *(_DWORD *)(a1 + 1876);
  v42 = v17;
  v43 = v19;
  v44 = v18;
  LOBYTE(v45[0]) = *(_BYTE *)(a1 + 18849);
  v20 = *(_DWORD *)(a1 + 18868);
  DWORD1(v45[0]) = *(_DWORD *)(a1 + 292);
  DWORD2(v45[1]) = v20;
  BYTE12(v45[1]) = *(_DWORD *)(a1 + 264) > 0;
  LODWORD(v46) = *(_DWORD *)(a1 + 18804);
  v50[27] = v17 > 10;
  if (*(_BYTE *)(a1 + 103080))
    *(_OWORD *)((char *)v45 + 8) = *(_OWORD *)(a1 + 103084);
  v21 = AVE_VerifyImageBuffer(&v39, a2, (CVPixelBufferPoolRef *)(a1 + 183664));
  if ((_DWORD)v21)
    return v21;
  *a3 = v50[24];
  v22 = HIDWORD(v49);
  *a4 = DWORD2(v49);
  *a5 = v22;
  v23 = *(unsigned int *)(v11 + 144);
  if ((int)v23 < 11)
  {
    *(_WORD *)(v13 + 456) = v50[25];
    goto LABEL_13;
  }
  *(_WORD *)(v13 + 456) = v50[25];
  v24 = v39;
  v25 = BYTE8(v46) - 1;
  v26 = 1;
  *(_WORD *)(v13 + 460) = 1 << (BYTE8(v46) - 1);
  *(_DWORD *)(v13 + 464) = 65537 << v25;
  if (v24 == *(_DWORD *)(a1 + 1880))
  {
    if (v40 != *(_DWORD *)(a1 + 1884))
    {
      v26 = 1;
      goto LABEL_14;
    }
LABEL_13:
    v26 = v50[26];
  }
LABEL_14:
  *(_BYTE *)(v13 + 974) = v26;
  v27 = HIDWORD(v47);
  *(_BYTE *)(v13 + 132) = (HIDWORD(v47) & 0xFFFFFFFE) == 2;
  if (v27 == 3)
    *(_BYTE *)(v13 + 459) = BYTE4(v48);
  if (LOBYTE(v45[0]))
  {
    v28 = v49;
    *(_DWORD *)(a1 + 18872) = *(_DWORD *)v50;
    *(_DWORD *)(a1 + 18876) = v28;
    *(_QWORD *)&v29 = __PAIR64__(*(unsigned int *)&v50[16], DWORD1(v49));
    *((_QWORD *)&v29 + 1) = *(_QWORD *)&v50[8];
    *(_OWORD *)(a1 + 18880) = v29;
    *(_DWORD *)(a1 + 18896) = *(_DWORD *)&v50[20];
  }
  if (!a6)
    return 0;
  v30 = DWORD1(v46);
  *(_DWORD *)(v13 + 876) = DWORD1(v46);
  if (*(_BYTE *)(v13 + 969))
  {
LABEL_20:
    v31 = v47;
    v32 = DWORD2(v46);
    *v12 = v47;
    *(_DWORD *)(v13 + 40) = v32;
    *(_BYTE *)v13 = v27 != 1;
    *(_BYTE *)(v13 + 889) = 1;
    if (v32 == 10)
    {
      *(_BYTE *)(a1 + 20418) = 0;
      *(_BYTE *)(a1 + 102558) = 0;
    }
    if (v31 == 2)
    {
      v21 = 0;
      *(_BYTE *)(a1 + 20419) = 1;
      *(_BYTE *)(a1 + 102559) = 1;
      return v21;
    }
    if (v31 == 3)
    {
      v21 = 0;
      *(_WORD *)(a1 + 20419) = 0;
      *(_WORD *)(a1 + 102559) = 0;
      if (*(_DWORD *)(a1 + 292) == 37)
      {
        v21 = 0;
        *(_BYTE *)(v13 + 982) = 1;
        *(_BYTE *)(a1 + 254) = 0;
      }
      return v21;
    }
    return 0;
  }
  v34 = v12[11] + 8;
  if (v34 <= v12[12] + 8)
    v34 = v12[12] + 8;
  updated = AVE_UpdatePixelBufferDict(v23, *(unsigned int *)(v11 + 140), *(unsigned int *)(a1 + 1876), 1, *(_DWORD *)(a1 + 19444), *(_DWORD *)(a1 + 19448), *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), v34, *(_DWORD *)v11, v30, 1, *(_QWORD *)a1);
  if (!(_DWORD)updated)
  {
    v27 = HIDWORD(v47);
    goto LABEL_20;
  }
  v21 = updated;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v36 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v36)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.\n", CurrTime, 3, LevelStr, "AVE_HEVC_VerifyImageBuffer", 9120, "err == noErr", "AVE_HEVC_VerifyImageBuffer", 9120);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: %s:%d AVE_UpdatePixelBufferDict failed.", CurrTime, 3);
  }
  return v21;
}

void AVE_UpdateCropParams(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v4;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  OSType PixelFormatType;
  char *v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  const char *v26;

  v4 = a1 + 103080;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v5 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams\n", CurrTime, 20, LevelStr);
      v8 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", v8, 20, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_UpdateCropParams", CurrTime, 20, LevelStr);
    }
  }
  if (*(_BYTE *)v4)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    v10 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (v10)
    {
      v11 = *((_DWORD *)v10 + 3);
      *(_DWORD *)(a1 + 103056) = v11;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 103056);
    }
    v13 = v11 != 3 && v11 != 0;
    v14 = v11 == 1;
    v15 = *(_DWORD *)(v4 + 12);
    if (v15)
    {
      if (v11 == 1)
        v16 = 2;
      else
        v16 = 1;
      v17 = ((v15 + v16 - 1) & ~v14) >> v14;
      *(_DWORD *)(v4 + 12) = v17;
    }
    else
    {
      v17 = 0;
    }
    v18 = *(_DWORD *)(v4 + 16);
    if (v18)
    {
      v19 = ((v18 + v14) & ~v14) >> v14;
      *(_DWORD *)(v4 + 16) = v19;
    }
    else
    {
      v19 = 0;
    }
    v20 = *(_DWORD *)(v4 + 4);
    if (v20)
    {
      v20 = ((v20 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 4) = v20;
    }
    v21 = *(_DWORD *)(v4 + 8);
    if (v21)
    {
      v22 = ((v21 + v13) & ~v13) >> v13;
      *(_DWORD *)(v4 + 8) = v22;
    }
    else
    {
      v22 = 0;
    }
    if (*(_DWORD *)(a1 + 18900) || *(_DWORD *)(a1 + 18436) >= 2u)
    {
      *(_BYTE *)(a1 + 102196) = *(_BYTE *)v4;
      *(_DWORD *)(a1 + 102208) = v17;
      *(_DWORD *)(a1 + 102212) = v19;
      *(_DWORD *)(a1 + 102200) = v20;
      *(_DWORD *)(a1 + 102204) = v22;
    }
    if (AVE_Log_CheckLevel(0x16u, 7))
    {
      v23 = AVE_Log_CheckConsole(0x16u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(7);
      if (v23)
      {
        printf("%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d\n", v24, 22, v25, *(_DWORD *)(v4 + 12), *(_DWORD *)(v4 + 16), *(_DWORD *)(v4 + 4), *(_DWORD *)(v4 + 8));
        v24 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: FIG: conf_win_top_offset = %d conf_win_bottom_offset %d conf_win_left_offset = %d conf_win_right_offset %d", v24);
    }
  }
}

double AVE_SetEncoderBasedOnFirstFrame(uint64_t a1, int a2)
{
  double result;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  unsigned int v9;
  BOOL v11;
  const char *v12;

  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v5 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame\n", CurrTime, 20, LevelStr);
      v8 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", v8, 20, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE ENTER AVE_SetEncoderBasedOnFirstFrame", CurrTime, 20, LevelStr);
    }
  }
  v9 = *(_DWORD *)(a1 + 292);
  v11 = v9 <= 0x25 && ((1 << v9) & 0x2000100002) != 0 || v9 == 10000;
  if (!v11 && *(_DWORD *)(a1 + 264) == 1 && a2 && !*(_BYTE *)(a1 + 18849))
  {
    if (*(_BYTE *)(a1 + 18851))
    {
      *(_DWORD *)(a1 + 20348) = 0;
      *(_DWORD *)(a1 + 103052) = 0;
      *(_QWORD *)(a1 + 18016) = 0x100000000;
      *(_DWORD *)(a1 + 18052) = 2;
      *(_QWORD *)&result = 0x900000001;
      *(_QWORD *)(a1 + 18808) = 0x900000001;
      *(_BYTE *)(a1 + 103224) = 1;
    }
  }
  return result;
}

uint64_t AVE_ValidateEncoderParameters(const void **a1)
{
  char *v2;
  unsigned __int16 *v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  _WORD *v8;
  unsigned int *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  unsigned int v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  int v38;
  int v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  __uint64_t v53;
  uint64_t result;
  int v55;
  int v56;
  int v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  __uint64_t v62;
  unsigned int v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  int v67;
  __uint64_t v68;
  int v69;
  __uint64_t v70;
  const char *v71;
  int v72;
  __uint64_t v73;
  int v74;
  __uint64_t v75;
  const char *v76;
  __uint64_t v77;
  int v78;
  __uint64_t v79;
  const char *v80;
  int v81;
  __uint64_t v82;
  int v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  int v87;
  __uint64_t v88;
  int v89;
  __uint64_t v90;
  const char *v91;
  int v92;
  __uint64_t v93;
  int v94;
  __uint64_t v95;
  const char *v96;
  int v97;
  __uint64_t v98;
  _DWORD *v99;
  int v100;
  const char *v101;
  _DWORD *v102;
  int v103;
  const char *v104;
  int v105;
  int v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  int v110;
  __uint64_t v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  int v115;
  __uint64_t v116;
  const char *v117;
  char v118;
  int v119;
  __uint64_t v120;
  const char *v121;
  int v122;
  __uint64_t v123;
  int v124;
  char v125;
  int v126;
  __uint64_t v127;
  const char *v128;
  int v129;
  __uint64_t v130;
  int v131;
  __uint64_t v132;
  const char *v133;
  int v134;
  __uint64_t v135;
  const char *v136;
  __uint64_t v137;
  char *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unint64_t v144;
  int v145;
  __uint64_t v146;
  const char *v147;
  int v148;
  __uint64_t v149;
  int v150;
  int v151;
  int v152;
  __uint64_t v153;
  const char *v154;
  int v155;
  __uint64_t v156;
  int v157;
  __uint64_t v158;
  const char *v159;
  int v160;
  __uint64_t v161;
  int v162;
  __uint64_t v163;
  const char *v164;
  int v165;
  __uint64_t v166;
  int v167;
  __uint64_t v168;
  const char *v169;
  int v170;
  __uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  __uint64_t v179;
  const char *v180;
  _DWORD *v181;
  int *v182;
  int v183;
  __uint64_t v184;
  const char *v185;
  __uint64_t v186;
  unsigned int v187;
  int v188;
  __uint64_t v189;
  const char *v190;
  int v191;
  __uint64_t v192;
  const char *v193;
  int v194;
  __uint64_t v195;
  int v196;
  __uint64_t v197;
  const char *v198;
  int v199;
  __uint64_t v200;
  int v201;
  __uint64_t v202;
  const char *v203;
  int v204;
  int v205;
  __uint64_t v206;
  const char *v207;
  int v208;
  __uint64_t v209;
  const char *v210;
  __uint64_t v211;
  int v212;
  int v213;
  __uint64_t v214;
  const char *v215;
  __uint64_t v216;
  int v217;
  int v218;
  int v219;
  __uint64_t v220;
  const char *v221;
  int v222;
  __uint64_t v223;
  const char *v224;
  uint64_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int v228;
  int v229;
  __uint64_t v230;
  const char *v231;
  __uint64_t v232;
  int v233;
  __uint64_t v234;
  const char *v235;
  int v236;
  int v237;
  __uint64_t v238;
  const char *v239;
  __uint64_t v240;
  int v241;
  __uint64_t v242;
  const char *v243;
  __uint64_t v244;
  int v245;
  __uint64_t v246;
  const char *v247;
  __uint64_t v248;
  int v249;
  __uint64_t v250;
  const char *v251;
  __uint64_t v252;
  int v253;
  __uint64_t v254;
  const char *v255;
  int v256;
  __uint64_t v257;
  const char *v258;
  int v259;
  int v260;
  __uint64_t v261;
  const char *v262;
  int v263;
  __uint64_t v264;
  const char *v265;
  unsigned __int8 *v266;
  unsigned int v267;
  int v268;
  __uint64_t v269;
  const char *v270;
  int v271;
  __uint64_t v272;
  const char *v273;
  unsigned __int16 *v274;
  unsigned int v275;
  int v276;
  __uint64_t v277;
  const char *v278;
  __uint64_t v279;
  int v280;
  __uint64_t v281;
  const char *v282;
  unsigned int v283;
  int v284;
  char *v285;
  uint64_t v286;
  unsigned __int8 v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  __uint64_t v295;
  const char *v296;
  const void *v297;
  int v298;
  __uint64_t v299;
  const char *v300;
  int v301;
  __uint64_t v302;
  const char *v303;
  int v304;
  __uint64_t v305;
  const char *v306;
  unsigned __int16 *v307;
  unsigned int v308;
  int v309;
  __uint64_t v310;
  const char *v311;
  int v312;
  __uint64_t v313;
  int v314;
  __uint64_t v315;
  const char *v316;
  __uint64_t v317;
  unsigned __int16 v318;
  unsigned int v319;
  int v320;
  __uint64_t v321;
  const char *v322;
  int v323;
  __uint64_t v324;
  int v325;
  int v326;
  int v327;
  __int16 v328;
  int v329;
  __uint64_t v330;
  const char *v331;
  __uint64_t v332;
  int v333;
  int v334;
  unsigned int v335;
  int v336;
  __uint64_t v337;
  const char *v338;
  int v339;
  __uint64_t v340;
  int v341;
  __uint64_t v342;
  const char *v343;
  unint64_t v344;
  char v345;
  int v346;
  __uint64_t v347;
  const char *v348;
  __uint64_t v349;
  int v350;
  __uint64_t v351;
  const char *v352;
  int v353;
  int v354;
  __uint64_t v355;
  const char *v356;
  __uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  int v361;
  int v362;
  __uint64_t v363;
  const char *v364;
  int v365;
  char v366;
  int v367;
  int v368;
  int v369;
  const char *v370;
  int v371;
  const char *v372;
  int v373;
  const char *v374;
  int v375;
  const char *v376;
  int v377;
  int v378;
  const char *v379;
  int v381;
  __uint64_t v382;
  const char *v383;
  __uint64_t v384;
  const char *v385;
  const char *v386;
  const char *v387;
  const char *v388;
  const char *v389;
  const char *v390;
  const char *v391;
  const char *v392;
  const char *v393;
  const char *v394;
  const char *v395;
  const char *v396;
  const char *v397;
  const char *v398;
  const char *v399;
  const char *v400;
  const char *v401;
  const char *v402;
  const char *v403;
  const char *v404;
  const char *v405;
  const char *v406;
  const char *v407;
  const char *v408;
  const char *v409;
  const char *v410;
  const char *v411;
  const char *v412;
  const char *v413;
  const char *v414;
  const char *v415;
  const char *v416;
  const char *v417;
  const char *v418;
  const char *v419;
  const char *v420;
  const char *v421;
  const char *v422;
  const char *v423;
  uint64_t v424;
  const void *v425;
  uint64_t v426;
  uint64_t v427;
  int *v428;
  _DWORD *v429;
  const void **v430;
  _DWORD *v431;

  v430 = a1 + 23141;
  v2 = (char *)a1 + 183388;
  v3 = (unsigned __int16 *)(a1 + 2234);
  v429 = AVE_DW_Get();
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters\n", CurrTime, 20, LevelStr);
      v7 = AVE_GetCurrTime();
      v385 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", v7, 20, v385);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ValidateEncoderParameters", CurrTime, 20, LevelStr);
    }
  }
  v8 = (_WORD *)((char *)a1 + 137893);
  v9 = (unsigned int *)a1 + 25625;
  if (*((int *)v2 + 36) < 16 || *((_BYTE *)v3 + 977) || *(_QWORD *)(v2 + 164) || !*((_DWORD *)v430 + 27))
  {
    *((_DWORD *)a1 + 469) &= 0xFFFFFF1F;
    *((_BYTE *)v3 + 2314) = 0;
    if (*(_QWORD *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v10 = AVE_Log_CheckConsole(0x16u);
        v11 = AVE_GetCurrTime();
        v12 = AVE_Log_GetLevelStr(5);
        if (v10)
        {
          printf("%lld %d AVE %s: FIG: MCTF is not supported for Multipass\n", v11, 22, v12);
          v13 = AVE_GetCurrTime();
          v386 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v13, 22, v386);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MCTF is not supported for Multipass", v11, 22, v12);
        }
      }
    }
  }
  if (*((_BYTE *)v3 + 517))
  {
    if (*((_BYTE *)v3 + 516))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v14 = AVE_Log_CheckConsole(3u);
        v15 = AVE_GetCurrTime();
        v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.\n", v15, 3, v16, "AVE_ValidateEncoderParameters", 7511, "false", *((unsigned __int8 *)v3 + 517), *((unsigned __int8 *)v3 + 516));
          v15 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: encoderPrivateStorage->VideoParams.bMultiViewDepth = %d and encoderPrivateStorage->VideoParams.bMultiViewDisparity = %d -> fail.", v15);
      }
      return 4294954394;
    }
  }
  else if (!*((_BYTE *)v3 + 516))
  {
    goto LABEL_28;
  }
  *((_BYTE *)a1 + 245) = 0;
  *((_BYTE *)a1 + 247) = 0;
  *((_DWORD *)a1 + 442) = 0;
  *((_DWORD *)a1 + 65) = 0;
  *((_BYTE *)v3 + 478) = 0;
  *((_DWORD *)v3 + 229) = 0;
  *((_BYTE *)a1 + 109541) = 0;
  *v8 = 0;
  *((_BYTE *)a1 + 120520) = 0;
  *((_BYTE *)a1 + 138562) = 0;
  *(_DWORD *)((char *)a1 + 249) = 0;
  *(_DWORD *)((char *)a1 + 255) = 0;
  if (*((int *)a1 + 462) <= -13)
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25775);
  if (*((int *)a1 + 463) <= -13)
    *((_DWORD *)a1 + 463) = 48;
  if (*((int *)a1 + 460) <= -13)
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25775);
  if (*((int *)a1 + 461) <= -13)
    *((_DWORD *)a1 + 461) = 48;
LABEL_28:
  v17 = *((_DWORD *)a1 + 49);
  if (!v17)
    goto LABEL_42;
  if (v17 == 4)
  {
    if (*(_QWORD *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v22 = AVE_Log_CheckConsole(3u);
        v23 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail\n", v23, 3, v24, "AVE_ValidateEncoderParameters", 7575, "false", *((_DWORD *)a1 + 73));
          v23 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: multiPassStorage and RC UsageMode = %d... not supported. fail", v23);
      }
      return 4294954384;
    }
    goto LABEL_41;
  }
  if (v17 != 20)
  {
LABEL_41:
    *((_BYTE *)a1 + 252) = 0;
    *((_BYTE *)v3 + 880) = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)a1 + 73) != 1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.\n", v19, 3, v20, "AVE_ValidateEncoderParameters", 7565, "false", *((_DWORD *)a1 + 73), *((_DWORD *)a1 + 49));
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
      }
      v425 = (const void *)*((unsigned int *)a1 + 73);
      v426 = *((unsigned int *)a1 + 49);
      v424 = 7565;
      v387 = v20;
      v21 = "%lld %d AVE %s: %s:%d %s | FIG: Usage mode %d does not support eRCMode = 0x%x. Fail.";
LABEL_210:
      syslog(3, v21, v19, 3, v387, "AVE_ValidateEncoderParameters", v424, "false", v425, v426, v427);
      return 4294954394;
    }
    return 4294954394;
  }
LABEL_42:
  if ((*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    v25 = *((_DWORD *)a1 + 73);
    if (v25 <= 0x26 && ((1 << v25) & 0x4000100002) != 0)
      *v3 = 0;
  }
  v26 = (unint64_t)a1[25];
  if ((v26 & 0x80000000) != 0)
  {
    a1[25] = (const void *)(v26 | 4);
    v27 = *((_DWORD *)a1 + 486);
    if (v27 == 2)
    {
      v28 = (int *)(a1 + 243);
      goto LABEL_58;
    }
  }
  else
  {
    v27 = *((_DWORD *)a1 + 486);
  }
  v28 = (int *)(a1 + 243);
  if (v27 <= 3)
    goto LABEL_59;
  if (AVE_Log_CheckLevel(0x16u, 5))
  {
    v29 = AVE_Log_CheckConsole(0x16u);
    v30 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(5);
    if (v29)
    {
      printf("%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!\n", v30, 22, v31, *v28, 3);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(5);
    }
    syslog(3, "%lld %d AVE %s: FIG: too many B frames (%d) max is %d. -> will gracefully default to the internal max!", v30, 22, v31, *v28, 3);
    v8 = (_WORD *)((char *)a1 + 137893);
  }
LABEL_58:
  v27 = 3;
  *v28 = 3;
LABEL_59:
  v32 = *((_DWORD *)a1 + 506);
  if (*((int *)v2 + 36) < 3)
  {
    v33 = v32 & 0xFFFFFFFB;
  }
  else
  {
    if ((v32 & 4) == 0)
      goto LABEL_65;
    if (v27)
    {
      *((_BYTE *)v3 + 460) = 1;
      goto LABEL_65;
    }
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v50 = AVE_Log_CheckConsole(0x16u);
      v51 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(5);
      if (v50)
      {
        printf("%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB\n", v51, 22, v52);
        v53 = AVE_GetCurrTime();
        v388 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v53, 22, v388);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: AdaptiveB is set when BFrames not enabled -> will disable AdaptiveB", v51, 22, v52);
      }
    }
    v33 = (_DWORD)a1[253] & 0xFFFFFFFB;
  }
  *((_DWORD *)a1 + 506) = v33;
LABEL_65:
  if (!*((_DWORD *)v3 + 222))
  {
    v34 = (double)*((int *)a1 + 48)
        / (double)(((*((_DWORD *)a1 + 470) + 15) >> 4) * ((*((_DWORD *)a1 + 471) + 15) >> 4))
        * 0.0133333333
        + -6.66666667;
    if (v34 < 0.0)
      v34 = 0.0;
    v35 = v34 + 0.5;
    v36 = v34 <= 20.0;
    v37 = 20.5;
    if (v36)
      v37 = v35;
    *((_DWORD *)v3 + 197) = v37;
    *((_DWORD *)v3 + 199) = v37;
  }
  v38 = *((_DWORD *)v3 + 47);
  if (v38 >= 33)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v40 = AVE_Log_CheckConsole(3u);
      v41 = AVE_GetCurrTime();
      v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)\n", v41, 3, v42, "AVE_ValidateEncoderParameters", 7686, "encoderPrivateStorage->VideoParams.sSliceMap.iNum <= ((32) < (256) ? (32) : (256))", *((_DWORD *)v3 + 47), 32);
        v41 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: too many slices (%d) max is %d for now (can be changed)", v41);
    }
    return 4294954394;
  }
  if (!v38)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v43 = AVE_Log_CheckConsole(3u);
      v44 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(4);
      if (v43)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d\n", v44, 3, v45, "AVE_ValidateEncoderParameters", 7687, "encoderPrivateStorage->VideoParams.sSliceMap.iNum != 0", *((_DWORD *)v3 + 47));
        v44 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: Slices Per Frame = %d", v44);
    }
    return 4294954394;
  }
  v39 = *(_DWORD *)v2;
  if (*(int *)v2 > 1007)
  {
    if (v39 != 1308 && v39 != 1008)
      goto LABEL_93;
  }
  else if (v39 != 1 && v39 != 3)
  {
    goto LABEL_93;
  }
  if (*((_BYTE *)v3 + 898) && *((_DWORD *)a1 + 25775) >= 2u)
  {
    if (AVE_Log_CheckLevel(0x16u, 4))
    {
      v46 = AVE_Log_CheckConsole(0x16u);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(4);
      if (v46)
      {
        printf("%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8\n", v47, 22, v48, "AVE_ValidateEncoderParameters", 7698, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | Unable to set bitdepth 10 for HEVC Profile that only supports bitdepth 8");
    }
    return 4294954394;
  }
LABEL_93:
  if (*((_DWORD *)a1 + 25629) > 1u)
    goto LABEL_116;
  if (*((_BYTE *)v3 + 898))
    v49 = *((_DWORD *)a1 + 25775) + 8;
  else
    v49 = *((_DWORD *)v3 + 12);
  v55 = *((_DWORD *)a1 + 25764);
  switch(v55)
  {
    case 0:
      v56 = 1010;
LABEL_115:
      *((_DWORD *)a1 + 25629) = v56;
      *((_DWORD *)v3 + 626) = v56;
      break;
    case 2:
      v56 = 1210;
      goto LABEL_115;
    case 3:
      if (v49 == 10)
        v56 = 1310;
      else
        v56 = 1308;
      goto LABEL_115;
  }
LABEL_116:
  if (*((_BYTE *)v3 + 804))
  {
    v57 = *((_DWORD *)a1 + 73);
    if (v57 == 20 || v57 == 10000 || v57 == 37)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v58 = AVE_Log_CheckConsole(0x16u);
        v59 = AVE_GetCurrTime();
        v60 = AVE_Log_GetLevelStr(5);
        v61 = *((_DWORD *)a1 + 73);
        if (v58)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.\n", v59, 22, v60, v61);
          v62 = AVE_GetCurrTime();
          v389 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v62, 22, v389, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bMultiReferenceP is true. cannot, set it to false.", v59, 22, v60, v61);
        }
      }
      *((_BYTE *)v3 + 804) = 0;
    }
  }
  if (*((_BYTE *)v3 + 987))
    *((_DWORD *)a1 + 506) &= ~4u;
  if (*((_BYTE *)a1 + 118451))
  {
    v63 = *((_DWORD *)a1 + 73);
    if (v63 <= 0x25 && ((1 << v63) & 0x2000100002) != 0 || v63 == 10000)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v64 = AVE_Log_CheckConsole(0x16u);
        v65 = AVE_GetCurrTime();
        v66 = AVE_Log_GetLevelStr(5);
        v67 = *((_DWORD *)a1 + 73);
        if (v64)
        {
          printf("%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.\n", v65, 22, v66, v67);
          v68 = AVE_GetCurrTime();
          v390 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v68, 22, v390, *((_DWORD *)a1 + 73));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: usageMode = %d and bIsLossless is true not supported. Set it to false.", v65, 22, v66, v67);
        }
      }
      *((_BYTE *)a1 + 118451) = 0;
    }
    if (*((_DWORD *)a1 + 49) != 3)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v69 = AVE_Log_CheckConsole(0x16u);
        v70 = AVE_GetCurrTime();
        v71 = AVE_Log_GetLevelStr(5);
        v72 = *((_DWORD *)a1 + 49);
        if (v69)
        {
          printf("%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.\n", v70, 22, v71, v72);
          v73 = AVE_GetCurrTime();
          v391 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v73, 22, v391, *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eRCMode = %d and bIsLossless is true not supported. Set eRCMode to FIXQP.", v70, 22, v71, v72);
        }
      }
      *((_DWORD *)a1 + 49) = 3;
    }
    if (*((_BYTE *)a1 + 244) || *((_BYTE *)a1 + 252))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v74 = AVE_Log_CheckConsole(0x16u);
        v75 = AVE_GetCurrTime();
        v76 = AVE_Log_GetLevelStr(5);
        if (v74)
        {
          printf("%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.\n", v75, 22, v76);
          v77 = AVE_GetCurrTime();
          v392 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v77, 22, v392);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod / bEnableQPModRefresh set and bIsLossless is true not supported. Set bEnableQPMod, bEnableQPModRefresh to false.", v75, 22, v76);
        }
      }
      *((_BYTE *)a1 + 244) = 0;
      *((_BYTE *)a1 + 252) = 0;
      *((_BYTE *)a1 + 118378) = 0;
    }
    if (*((_BYTE *)a1 + 246))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v78 = AVE_Log_CheckConsole(0x16u);
        v79 = AVE_GetCurrTime();
        v80 = AVE_Log_GetLevelStr(5);
        v81 = *((unsigned __int8 *)a1 + 246);
        if (v78)
        {
          printf("%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.\n", v79, 22, v80, v81);
          v82 = AVE_GetCurrTime();
          v393 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v82, 22, v393, *((unsigned __int8 *)a1 + 246));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLamdaMod = %d and bIsLossless is true not supported. Set bEnableLamdaMod to false.", v79, 22, v80, v81);
        }
      }
      *((_BYTE *)a1 + 246) = 0;
    }
    a1[227] = 0;
    v83 = -6 * *((_DWORD *)a1 + 25775);
    *((_DWORD *)a1 + 463) = v83;
    *((_DWORD *)a1 + 462) = v83;
    *((_DWORD *)a1 + 458) = v83;
    *((_DWORD *)a1 + 457) = v83;
    *((_DWORD *)a1 + 456) = v83;
    a1[230] = a1[231];
    if (*((_DWORD *)a1 + 480))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v84 = AVE_Log_CheckConsole(0x16u);
        v85 = AVE_GetCurrTime();
        v86 = AVE_Log_GetLevelStr(5);
        v87 = *((_DWORD *)a1 + 480);
        if (v84)
        {
          printf("%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.\n", v85, 22, v86, v87);
          v88 = AVE_GetCurrTime();
          v394 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v88, 22, v394, *((_DWORD *)a1 + 480));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: EnableSelStatsFlags = %d and bIsLossless is true not supported. Forcing EnableSelStatsFlags to STATISTICS_DISABLED.", v85, 22, v86, v87);
        }
      }
      *((_DWORD *)a1 + 480) = 0;
    }
    if (*((_DWORD *)a1 + 65))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v89 = AVE_Log_CheckConsole(0x16u);
        v90 = AVE_GetCurrTime();
        v91 = AVE_Log_GetLevelStr(5);
        v92 = *((_DWORD *)a1 + 65);
        if (v89)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v90, 22, v91, v92);
          v93 = AVE_GetCurrTime();
          v395 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v93, 22, v395, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bIsLossless is true not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v90, 22, v91, v92);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    *((_BYTE *)a1 + 120520) = 1;
    *((_BYTE *)a1 + 109541) = 0;
    *v8 = 0;
  }
  if (*v28 && *((int *)a1 + 56) >= 1 && !*((_BYTE *)v3 + 974))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v94 = AVE_Log_CheckConsole(0x16u);
      v95 = AVE_GetCurrTime();
      v96 = AVE_Log_GetLevelStr(5);
      v97 = *v28;
      if (v94)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.\n", v95, 22, v96, v97);
        v98 = AVE_GetCurrTime();
        v396 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v98, 22, v396, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and iAverageNonDroppableFrameRate is true. not supported yet, gracefully set it to false.", v95, 22, v96, v97);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (!*((_DWORD *)a1 + 503))
  {
    *((_WORD *)a1 + 122) = 0;
    *((_BYTE *)a1 + 118378) = 0;
    *(_WORD *)((char *)a1 + 255) = 0;
    *(_DWORD *)((char *)a1 + 247) = 0;
  }
  if (*((int *)a1 + 460) <= -13)
    *((_DWORD *)a1 + 460) = -6 * *((_DWORD *)a1 + 25775);
  if (*((int *)a1 + 461) <= -13)
    *((_DWORD *)a1 + 461) = 48;
  if (*((int *)a1 + 462) <= -13)
    *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25775);
  v99 = a1 + 231;
  if (*((int *)a1 + 463) <= -13)
    *((_DWORD *)a1 + 463) = 48;
  if (AVE_CheckQPRange((int *)a1 + 462, *((_DWORD *)a1 + 25775) + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v100 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v101 = AVE_Log_GetLevelStr(4);
      if (v100)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]\n", v19, 3, v101, "AVE_ValidateEncoderParameters", 7895, "false", *((_DWORD *)a1 + 462), *((_DWORD *)a1 + 463));
        v19 = AVE_GetCurrTime();
        v101 = AVE_Log_GetLevelStr(4);
      }
      v425 = (const void *)*((unsigned int *)a1 + 462);
      v426 = *((unsigned int *)a1 + 463);
      v424 = 7895;
      v387 = v101;
      v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sHardQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  v102 = a1 + 230;
  if (AVE_CheckQPRange((int *)a1 + 460, *((_DWORD *)a1 + 25775) + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v103 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v104 = AVE_Log_GetLevelStr(4);
      if (v103)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]\n", v19, 3, v104, "AVE_ValidateEncoderParameters", 7903, "false", *((_DWORD *)a1 + 460), *((_DWORD *)a1 + 461));
        v19 = AVE_GetCurrTime();
        v104 = AVE_Log_GetLevelStr(4);
      }
      v425 = (const void *)*((unsigned int *)a1 + 460);
      v426 = *((unsigned int *)a1 + 461);
      v424 = 7903;
      v387 = v104;
      v21 = "%lld %d AVE %s: %s:%d %s | FIG: Incorrect sSoftQPRange [%d %d]";
      goto LABEL_210;
    }
    return 4294954394;
  }
  if (*v102 < *v99)
    *v102 = *v99;
  v105 = *((_DWORD *)a1 + 463);
  if (*((_DWORD *)a1 + 461) > v105)
    *((_DWORD *)a1 + 461) = v105;
  v106 = *((_DWORD *)a1 + 49);
  if (*((_BYTE *)v3 + 812))
  {
    if (v106 != 20)
      goto LABEL_221;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v107 = AVE_Log_CheckConsole(0x16u);
      v108 = AVE_GetCurrTime();
      v109 = AVE_Log_GetLevelStr(5);
      v110 = *((_DWORD *)a1 + 49);
      if (v107)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false\n", v108, 22, v109, v110);
        v111 = AVE_GetCurrTime();
        v397 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v111, 22, v397, *((_DWORD *)a1 + 49));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = true -> not supported. set bUseAsyncFWScheduling to false", v108, 22, v109, v110);
      }
    }
    v118 = 0;
    goto LABEL_220;
  }
  if (v106 != 20 && *v28)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v112 = AVE_Log_CheckConsole(0x16u);
      v113 = AVE_GetCurrTime();
      v114 = AVE_Log_GetLevelStr(5);
      v115 = *((_DWORD *)a1 + 486);
      if (v112)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true\n", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
        v116 = AVE_GetCurrTime();
        v117 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v116, 22, v117, *((_DWORD *)a1 + 49), *((_DWORD *)a1 + 486));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bUseAsyncFWScheduling = false Bframes 0x%x -> not supported. set bUseAsyncFWScheduling to true", v113, 22, v114, *((_DWORD *)a1 + 49), v115);
      }
    }
    v118 = 1;
LABEL_220:
    *((_BYTE *)v3 + 812) = v118;
  }
LABEL_221:
  if (*(_QWORD *)(v2 + 164))
  {
    *((_BYTE *)v3 + 524) = 1;
    *((_DWORD *)v3 + 132) = 1;
  }
  if (*v28 && *((_DWORD *)a1 + 516) == 1)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v119 = AVE_Log_CheckConsole(0x16u);
      v120 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(5);
      v122 = *v28;
      if (v119)
      {
        printf("%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.\n", v120, 22, v121, v122);
        v123 = AVE_GetCurrTime();
        v398 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v123, 22, v398, *v28);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: BFrames = %d and LowDelay is true. Default to regular BFrames case.", v120, 22, v121, v122);
      }
    }
    *((_DWORD *)a1 + 516) = 0;
  }
  v124 = *((_DWORD *)v3 + 12);
  if (v124 == 8)
  {
    v125 = 1;
  }
  else
  {
    if (v124 != 10)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v131 = AVE_Log_CheckConsole(3u);
        v132 = AVE_GetCurrTime();
        v133 = AVE_Log_GetLevelStr(4);
        if (v131)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail\n", v132, 3, v133, "AVE_ValidateEncoderParameters", 7979, "(encoderPrivateStorage->VideoParams.input_bitdepth == 8) || (encoderPrivateStorage->VideoParams.input_bitdepth == 10)", *((_DWORD *)v3 + 12));
          v132 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: input_bitdepth = %d... not supported. Fail", v132);
      }
      return 4294954394;
    }
    v125 = *((_BYTE *)v3 + 986);
  }
  *((_BYTE *)v3 + 556) = v125;
  if (!AVE_DevCap_FindSearchRangeMode(*((_DWORD *)v2 + 37), 1, 1, *v3))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v126 = AVE_Log_CheckConsole(0x16u);
      v127 = AVE_GetCurrTime();
      v128 = AVE_Log_GetLevelStr(5);
      v129 = *v3;
      if (v126)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0\n", v127, 22, v128, v129);
        v130 = AVE_GetCurrTime();
        v399 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v130, 22, v399, *v3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode %d not supported. Default to 0", v127, 22, v128, v129);
      }
    }
    *v3 = 0;
  }
  if (*((int *)v2 + 36) <= 7 && (*v3 & 0xFFFE) == 4 && (*((_BYTE *)v3 + 804) || *((_DWORD *)v3 + 141) >= 2u))
    *v3 = 0;
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) >= 0x7E9000
    && *((int *)a1 + 57) >= 100
    && (v429[337] & 0x80000000) != 0
    && (*((_DWORD *)v2 + 433) & 0x80000000) != 0)
  {
    *v3 = 0;
    goto LABEL_255;
  }
  if (*v3 != 7)
  {
LABEL_255:
    if (*((_DWORD *)v2 + 35) != 2 && !*((_BYTE *)v3 + 477))
      goto LABEL_263;
  }
  if (!*((_BYTE *)v3 + 9))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v134 = AVE_Log_CheckConsole(0x16u);
      v135 = AVE_GetCurrTime();
      v136 = AVE_Log_GetLevelStr(5);
      if (v134)
      {
        printf("%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.\n", v135, 22, v136);
        v137 = AVE_GetCurrTime();
        v400 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v137, 22, v400);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: SearchRangeMode = 7 or LRMEStandAlone or LRMERC -> must run in LRME-pipe async.", v135, 22, v136);
      }
    }
    *((_BYTE *)v3 + 9) = 1;
  }
LABEL_263:
  v428 = v28;
  if (*((_BYTE *)v3 + 991))
  {
    v138 = (char *)a1 + 109541;
    if (*((_BYTE *)v3 + 517) || *((_BYTE *)v3 + 516))
    {
      v139 = -6 * *((_DWORD *)a1 + 25775);
      v140 = *((_DWORD *)a1 + 456);
      if (v140 <= 47)
        v141 = v140 + 4;
      else
        v141 = 51;
      if (v140 + 4 >= v139)
        v142 = v141;
      else
        v142 = -6 * *((_DWORD *)a1 + 25775);
      *((_DWORD *)a1 + 457) = v142;
      if (v142 < 51)
        v143 = v142 + 1;
      else
        v143 = 51;
      if (v142 + 1 >= v139)
        v139 = v143;
      *((_DWORD *)a1 + 458) = v139;
LABEL_278:
      *((_DWORD *)a1 + 49) = 3;
      goto LABEL_288;
    }
    if (*((_BYTE *)v3 + 899) || *((_DWORD *)a1 + 49) == 4 || *((_BYTE *)v3 + 992))
    {
      a1[227] = (const void *)0x403A000000000000;
      a1[228] = (const void *)0x1A0000001ALL;
      *((_DWORD *)a1 + 458) = 26;
      *((_DWORD *)a1 + 462) = -6 * *((_DWORD *)a1 + 25775);
      *((_DWORD *)a1 + 463) = 48;
      a1[230] = a1[231];
      *((_BYTE *)a1 + 118451) = *((_BYTE *)v3 + 992);
      *((_BYTE *)v3 + 991) = 0;
      goto LABEL_288;
    }
    if (*((_BYTE *)v3 + 1036))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((_BYTE *)v3 + 880) = 0;
      *((_BYTE *)a1 + 118378) = 0;
      *((_BYTE *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((_BYTE *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((_BYTE *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((_BYTE *)a1 + 257) = 0;
      *((_DWORD *)a1 + 442) = 0;
    }
    if ((*((_BYTE *)a1 + 203) & 0x80) == 0)
      goto LABEL_278;
  }
  else
  {
    v138 = (char *)a1 + 109541;
    if (*((_BYTE *)v3 + 1036) && !*((_BYTE *)v3 + 899) && *((_DWORD *)a1 + 49) != 4 && !*((_BYTE *)v3 + 992))
    {
      *((_DWORD *)a1 + 480) = 0;
      *((_BYTE *)v3 + 880) = 0;
      *((_BYTE *)a1 + 118378) = 0;
      *((_BYTE *)a1 + 244) = 0;
      *((_WORD *)a1 + 123) = 0;
      *((_BYTE *)a1 + 252) = 0;
      *((_DWORD *)a1 + 65) = 0;
      *((_BYTE *)a1 + 249) = 0;
      *(_WORD *)((char *)a1 + 255) = 0;
      *((_BYTE *)a1 + 257) = 0;
      *((_DWORD *)a1 + 49) = 3;
      a1[227] = (const void *)0x403E000000000000;
      a1[228] = (const void *)0x1E0000001ELL;
      *((_DWORD *)a1 + 458) = 30;
      *((_DWORD *)a1 + 442) = 0;
    }
  }
LABEL_288:
  if ((int)(*(double *)v430 * 100.0 + 0.5) != 100
    && !*((_BYTE *)v3 + 1036)
    && !*((_BYTE *)v3 + 987)
    && (*((_BYTE *)a1 + 1876) & 0xE0) == 0
    && !*(_QWORD *)(v2 + 164)
    && *((_DWORD *)v3 + 141) <= 1u
    && !*((_DWORD *)v3 + 571))
  {
    if ((a1[25] & 0x80000000) == 0)
      goto LABEL_297;
    goto LABEL_296;
  }
  *((_DWORD *)a1 + 58) = 0;
  v144 = (unint64_t)a1[25] & 0xFFFFFFFF7FFFFFFFLL;
  a1[25] = (const void *)v144;
  if ((v144 & 0x80000000) != 0)
LABEL_296:
    *((_DWORD *)a1 + 56) = 0;
LABEL_297:
  if (*((_BYTE *)a1 + 244) && !*((_BYTE *)a1 + 118378))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v145 = AVE_Log_CheckConsole(0x16u);
      v146 = AVE_GetCurrTime();
      v147 = AVE_Log_GetLevelStr(5);
      v148 = *((unsigned __int8 *)a1 + 244);
      if (v145)
      {
        printf("%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.\n", v146, 22, v147, v148);
        v149 = AVE_GetCurrTime();
        v401 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v149, 22, v401, *((unsigned __int8 *)a1 + 244));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableQPMod = %d and cu_qp_delta_enabled_flag is false. Set cu_qp_delta_enabled_flag to true.", v146, 22, v147, v148);
      }
    }
    *((_BYTE *)a1 + 118378) = 1;
  }
  v431 = (_DWORD *)a1 + 34617;
  if (*((_DWORD *)v3 + 12) != 10)
  {
    if (*((_BYTE *)v3 + 977))
      goto LABEL_342;
    goto LABEL_316;
  }
  if (*((_BYTE *)v3 + 977))
    goto LABEL_342;
  v150 = *(_DWORD *)(v138 + 195);
  if (v150 == 18)
  {
    v151 = -12;
    goto LABEL_312;
  }
  if (v150 == 16)
  {
    v151 = -6;
LABEL_312:
    *((_DWORD *)a1 + 29604) = v151;
    *((_DWORD *)a1 + 29605) = v151;
  }
  if (*((int *)v2 + 36) >= 22 && (v150 | 2) == 0x12)
    *((_BYTE *)a1 + 118448) = 0;
LABEL_316:
  if (!*((_BYTE *)a1 + 244))
  {
    if (*((_DWORD *)a1 + 65))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v152 = AVE_Log_CheckConsole(0x16u);
        v153 = AVE_GetCurrTime();
        v154 = AVE_Log_GetLevelStr(5);
        v155 = *((_DWORD *)a1 + 65);
        if (v152)
        {
          printf("%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.\n", v153, 22, v154, v155);
          v156 = AVE_GetCurrTime();
          v402 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v156, 22, v402, *((_DWORD *)a1 + 65));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: eStaticAreasLowQpSel = %d and bEnableQPMod set to false is not supported. Forcing eStaticAreasLowQpSel to STATICAREAS_LOWQP_DISABLE.", v153, 22, v154, v155);
        }
      }
      *((_DWORD *)a1 + 65) = 0;
    }
    if (*((_BYTE *)a1 + 247))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v157 = AVE_Log_CheckConsole(0x16u);
        v158 = AVE_GetCurrTime();
        v159 = AVE_Log_GetLevelStr(5);
        v160 = *((unsigned __int8 *)a1 + 247);
        if (v157)
        {
          printf("%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.\n", v158, 22, v159, v160);
          v161 = AVE_GetCurrTime();
          v403 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v161, 22, v403, *((unsigned __int8 *)a1 + 247));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableVarianceQPMod off.", v158, 22, v159, v160);
        }
      }
      *((_BYTE *)a1 + 247) = 0;
    }
    if (*((_BYTE *)a1 + 248))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v162 = AVE_Log_CheckConsole(0x16u);
        v163 = AVE_GetCurrTime();
        v164 = AVE_Log_GetLevelStr(5);
        v165 = *((unsigned __int8 *)a1 + 248);
        if (v162)
        {
          printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.\n", v163, 22, v164, v165);
          v166 = AVE_GetCurrTime();
          v404 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v166, 22, v404, *((unsigned __int8 *)a1 + 248));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableLowVarianceQPMod off.", v163, 22, v164, v165);
        }
      }
      *((_BYTE *)a1 + 248) = 0;
    }
    if (*((_BYTE *)a1 + 249))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v167 = AVE_Log_CheckConsole(0x16u);
        v168 = AVE_GetCurrTime();
        v169 = AVE_Log_GetLevelStr(5);
        v170 = *((unsigned __int8 *)a1 + 249);
        if (v167)
        {
          printf("%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.\n", v168, 22, v169, v170);
          v171 = AVE_GetCurrTime();
          v405 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v171, 22, v405, *((unsigned __int8 *)a1 + 249));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: bEnableHevcDeRingingQPMod = %d and bEnableQPMod set to false is not supported. Forcing bEnableHevcDeRingingQPMod off.", v168, 22, v169, v170);
        }
      }
      *((_BYTE *)a1 + 249) = 0;
    }
  }
LABEL_342:
  if (*((_DWORD *)a1 + 65))
  {
    v172 = *((_DWORD *)a1 + 470) + 15;
    v173 = *((_DWORD *)a1 + 471) + 15;
    v174 = v173 >> 4;
    v175 = (v172 >> 4) + 31;
    v176 = v175 & 0x1FFFFFE0;
    if (v172 > 0x78F || v173 >= 0x450)
      v177 = (((((v172 >> 4) + 1) >> 1) + 31) >> 5) * ((v174 + 1) >> 1);
    else
      v177 = (v175 >> 5) * v174;
    if (v176 > 0x100 || v173 > 0xC0F || v177 >= 0x121)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v178 = AVE_Log_CheckConsole(0x16u);
        v179 = AVE_GetCurrTime();
        v180 = AVE_Log_GetLevelStr(5);
        if (v178)
        {
          printf("%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d\n", v179, 22, v180, v176, 256, v174, 192);
          v179 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(5);
        }
        syslog(3, "%lld %d AVE %s: AVE_FIG: align32MbW <= MAX_STATICAREASLOWQP_NMB_FRAME_HORIZONTAL && picHeightInMb <= MAX_STATICAREASLOWQP_NMB_FRAME_VERTICAL %d %d %d %d", v179);
      }
      *((_DWORD *)a1 + 65) = 0;
    }
  }
  v181 = (_DWORD *)a1 + 34617;
  v182 = v428;
  if (*((_DWORD *)v3 + 574) >= 0x1Fu)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v183 = AVE_Log_CheckConsole(0x16u);
      v184 = AVE_GetCurrTime();
      v185 = AVE_Log_GetLevelStr(5);
      if (v183)
      {
        printf("%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM\n", v184, 22, v185, 30);
        v186 = AVE_GetCurrTime();
        v181 = (_DWORD *)a1 + 34617;
        v406 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v186, 22, v406, 30);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_FIG: ui32NumCodedBuffers exceeds max allowed value of AVE_CODED_BUF_MAX_NUM (%d) Forcing to AVE_CODED_BUF_MAX_NUM", v184, 22, v185, 30);
      }
    }
    *((_DWORD *)v3 + 574) = 30;
  }
  if (*((_BYTE *)a1 + 255))
  {
    v187 = *((_DWORD *)a1 + 49);
    if ((v187 > 0x14 || ((1 << v187) & 0x100009) == 0) && *((_BYTE *)a1 + 244) && !*((_BYTE *)a1 + 252))
      goto LABEL_380;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v188 = AVE_Log_CheckConsole(0x16u);
      v189 = AVE_GetCurrTime();
      v190 = AVE_Log_GetLevelStr(5);
      if (v188)
      {
        printf("%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false\n", v189, 22, v190, *((_DWORD *)a1 + 49), *((unsigned __int8 *)a1 + 255), *((unsigned __int8 *)a1 + 244), *((unsigned __int8 *)a1 + 252));
        v189 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
      }
      syslog(3, "%lld %d AVE %s: FIG: eRCMode 0x%x bFlatAreaLowQpEn %d bEnableQPMod %d bEnableQPModRefresh %d -> not supported. set bFlatAreaLowQpEn to false", v189);
    }
    *((_BYTE *)a1 + 255) = 0;
  }
  if (*((_BYTE *)a1 + 257))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v191 = AVE_Log_CheckConsole(0x16u);
      v192 = AVE_GetCurrTime();
      v193 = AVE_Log_GetLevelStr(5);
      v194 = *((unsigned __int8 *)a1 + 255);
      if (v191)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false\n", v192, 22, v193, v194);
        v195 = AVE_GetCurrTime();
        v407 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v195, 22, v407, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bPerceptualQualityOptimization to false", v192, 22, v193, v194);
      }
    }
    *((_BYTE *)a1 + 257) = 0;
  }
LABEL_380:
  if (*((_BYTE *)a1 + 256) && !*((_BYTE *)a1 + 255))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v196 = AVE_Log_CheckConsole(0x16u);
      v197 = AVE_GetCurrTime();
      v198 = AVE_Log_GetLevelStr(5);
      v199 = *((unsigned __int8 *)a1 + 255);
      if (v196)
      {
        printf("%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false\n", v197, 22, v198, v199);
        v200 = AVE_GetCurrTime();
        v408 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v200, 22, v408, *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bFlatAreaLowQpEn %d -> not supported. set bUltraFlatAreaLowQpEn to false", v197, 22, v198, v199);
      }
    }
    *((_BYTE *)a1 + 256) = 0;
  }
  if (*((_BYTE *)a1 + 248) && (!*((_BYTE *)a1 + 247) || !*((_BYTE *)a1 + 255)))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v201 = AVE_Log_CheckConsole(0x16u);
      v202 = AVE_GetCurrTime();
      v203 = AVE_Log_GetLevelStr(5);
      v204 = *((unsigned __int8 *)a1 + 248);
      v205 = *((unsigned __int8 *)a1 + 255);
      if (v201)
      {
        printf("%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.\n", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
        v206 = AVE_GetCurrTime();
        v207 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v206, 22, v207, *((unsigned __int8 *)a1 + 248), *((unsigned __int8 *)a1 + 247), *((unsigned __int8 *)a1 + 255));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: bEnableLowVarianceQPMod = %d and requires both bEnableVarianceQPMod %d and bFlatAreaLowQpEn %d. Forcing bEnableLowVarianceQPMod off.", v202, 22, v203, v204, *((unsigned __int8 *)a1 + 247), v205);
      }
    }
    *((_BYTE *)a1 + 248) = 0;
  }
  if (*((_BYTE *)a1 + 250) && *((_DWORD *)a1 + 65))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v208 = AVE_Log_CheckConsole(0x16u);
      v209 = AVE_GetCurrTime();
      v210 = AVE_Log_GetLevelStr(5);
      if (v208)
      {
        printf("%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled\n", v209, 22, v210);
        v211 = AVE_GetCurrTime();
        v409 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v211, 22, v409);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: enableCrcQpModMode set and EnableSelStatsFlags set is not supported. Forcing EnableSelStatsFlags to disabled", v209, 22, v210);
      }
    }
    *((_DWORD *)a1 + 65) = 0;
  }
  if ((*((_BYTE *)a1 + 203) & 0x80) != 0)
  {
    v212 = v429[311];
    if ((v212 & 0x20) == 0)
      *((_DWORD *)a1 + 506) |= 0x20u;
    if ((v212 & 0x40) == 0)
      *((_DWORD *)a1 + 506) |= 0x40u;
    *((_BYTE *)a1 + 255) = 0;
    *((_DWORD *)a1 + 65) = 0;
    if (AVE_Log_CheckLevel(0x16u, 6))
    {
      v213 = AVE_Log_CheckConsole(0x16u);
      v214 = AVE_GetCurrTime();
      v215 = AVE_Log_GetLevelStr(6);
      if (v213)
      {
        printf("%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled\n", v214, 22, v215);
        v216 = AVE_GetCurrTime();
        v410 = AVE_Log_GetLevelStr(6);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v216, 22, v410);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FlatArea and Static QP mod is disabled when lookahead RC feature is enabled", v214, 22, v215);
      }
    }
  }
  v217 = *((_DWORD *)v3 + 45);
  if (v217 >= 2)
  {
    v218 = *((_DWORD *)a1 + 49);
    if (v218 && v218 != 20 && !*((_BYTE *)a1 + 103224))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v219 = AVE_Log_CheckConsole(0x16u);
        v220 = AVE_GetCurrTime();
        v221 = AVE_Log_GetLevelStr(5);
        v222 = *((_DWORD *)a1 + 49);
        if (v219)
        {
          printf("%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1\n", v220, 22, v221, *((_DWORD *)v3 + 45), v222);
          v223 = AVE_GetCurrTime();
          v224 = AVE_Log_GetLevelStr(5);
          v181 = (_DWORD *)a1 + 34617;
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v223, 22, v224, *((_DWORD *)v3 + 45), *((_DWORD *)a1 + 49));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: i32PPSsCount (%d), eRCMode %d and scaling_list_enabled_flag is false. Not supported. Forcing i32PPSsCount to 1", v220, 22, v221, *((_DWORD *)v3 + 45), v222);
        }
      }
      v217 = 1;
      *((_DWORD *)v3 + 45) = 1;
    }
    if (*((_DWORD *)a1 + 73) == 1)
    {
      v225 = 0;
      v226 = 0uLL;
      v227.i64[0] = 0xC0000000CLL;
      v227.i64[1] = 0xC0000000CLL;
      do
      {
        v226 = vsubq_s32(v226, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&a1[v225 + 14798], v227)));
        v225 += 2;
      }
      while (v225 != 4);
      v228 = vaddvq_s32(v226);
      if (v217 != v228)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v233 = AVE_Log_CheckConsole(3u);
          v234 = AVE_GetCurrTime();
          v235 = AVE_Log_GetLevelStr(4);
          if (v233)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail\n", v234, 3, v235, "AVE_ValidateEncoderParameters", 8366, "encoderPrivateStorage->VideoParams.i32PPSsCount == ch_qp_index_offset_cnt", *((_DWORD *)v3 + 45), v228);
            v234 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: PPS count = %d and ch_qp_index_offset_cnt = %d... are not compatible. fail", v234);
        }
        return 4294954394;
      }
    }
  }
  if (!*((_BYTE *)v3 + 804))
  {
LABEL_435:
    if (!*v428
      && (*v3 & 0xFFFE) != 4
      && (*((_BYTE *)a1 + 1876) & 0xE0) == 0
      && *((_DWORD *)v3 + 141) <= 1u
      && !*((_BYTE *)v3 + 871))
    {
      goto LABEL_442;
    }
    goto LABEL_440;
  }
  if (*((_BYTE *)v3 + 871))
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v229 = AVE_Log_CheckConsole(0x16u);
      v230 = AVE_GetCurrTime();
      v231 = AVE_Log_GetLevelStr(5);
      if (v229)
      {
        printf("%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.\n", v230, 22, v231);
        v232 = AVE_GetCurrTime();
        v411 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v232, 22, v411);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MultiRef and WP not supported together. Disabling MultiRef.", v230, 22, v231);
      }
    }
    *((_BYTE *)v3 + 804) = 0;
    goto LABEL_435;
  }
LABEL_440:
  if (!*((_BYTE *)v3 + 10))
    *((_BYTE *)v3 + 10) = 1;
LABEL_442:
  if (*((_DWORD *)a1 + 507) == 1)
  {
    v236 = *((_DWORD *)a1 + 506);
    if (*((_DWORD *)v3 + 142) == 1)
    {
      *((_DWORD *)a1 + 508) = 0;
      a1[255] = (const void *)0xBFF0000000000000;
      a1[256] = (const void *)0xBFF0000000000000;
      *((_BYTE *)a1 + 216) = 0;
      v3[487] = 0;
      *((_DWORD *)a1 + 486) = 0;
      v236 &= ~4u;
      *((_DWORD *)a1 + 506) = v236;
      *((_DWORD *)v3 + 114) = 0;
    }
  }
  else
  {
    v236 = *((_DWORD *)a1 + 506);
  }
  if ((v236 & 1) != 0 && !*v428)
  {
    *((_DWORD *)a1 + 506) = v236 & 0xFFFFFFFE;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v237 = AVE_Log_CheckConsole(0x16u);
      v238 = AVE_GetCurrTime();
      v239 = AVE_Log_GetLevelStr(5);
      if (v237)
      {
        printf("%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true\n", v238, 22, v239);
        v240 = AVE_GetCurrTime();
        v412 = AVE_Log_GetLevelStr(5);
        v181 = (_DWORD *)a1 + 34617;
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v240, 22, v412);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: CRA not supported with no B Frames. Forcing bClosedGOP to true", v238, 22, v239);
      }
    }
  }
  if (*((_DWORD *)v3 + 141) >= 2u)
  {
    if (*((int *)a1 + 57) <= 0 && AVE_Log_CheckLevel(0x16u, 5))
    {
      v241 = AVE_Log_CheckConsole(0x16u);
      v242 = AVE_GetCurrTime();
      v243 = AVE_Log_GetLevelStr(5);
      if (v241)
      {
        printf("%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined\n", v242, 22, v243);
        v244 = AVE_GetCurrTime();
        v413 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v244, 22, v413);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: iLayerNum > 1 and ExpectedFR is not set, behavior is undefined", v242, 22, v243);
      }
    }
    if (*((_BYTE *)a1 + 254))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v245 = AVE_Log_CheckConsole(0x16u);
        v246 = AVE_GetCurrTime();
        v247 = AVE_Log_GetLevelStr(5);
        if (v245)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop\n", v246, 22, v247);
          v248 = AVE_GetCurrTime();
          v414 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v248, 22, v414);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to disable FrameDrop", v246, 22, v247);
        }
      }
      *((_BYTE *)a1 + 254) = 0;
    }
    if (*((_BYTE *)v3 + 184))
    {
      *((_BYTE *)v3 + 184) = 0;
      *((_DWORD *)v3 + 47) = 1;
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v249 = AVE_Log_CheckConsole(0x16u);
        v250 = AVE_GetCurrTime();
        v251 = AVE_Log_GetLevelStr(5);
        if (v249)
        {
          printf("%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode\n", v250, 22, v251);
          v252 = AVE_GetCurrTime();
          v415 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v252, 22, v415);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: MV-HEVC force to Frame Encoding mode", v250, 22, v251);
        }
      }
    }
    if (*(_QWORD *)(v2 + 164))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v253 = AVE_Log_CheckConsole(3u);
        v254 = AVE_GetCurrTime();
        v255 = AVE_Log_GetLevelStr(4);
        if (v253)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass\n", v254, 3, v255, "AVE_ValidateEncoderParameters", 8443, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Multipass");
      }
      return 4294954396;
    }
    if (*((_DWORD *)v3 + 571) == 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v256 = AVE_Log_CheckConsole(3u);
        v257 = AVE_GetCurrTime();
        v258 = AVE_Log_GetLevelStr(4);
        if (v256)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization\n", v257, 3, v258, "AVE_ValidateEncoderParameters", 8450, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support Parallelization");
      }
      return 4294954396;
    }
    v259 = *((_DWORD *)a1 + 49);
    if (v259 == 4 || v259 == 2 && (*((_BYTE *)a1 + 203) & 0x80) == 0)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v260 = AVE_Log_CheckConsole(3u);
        v261 = AVE_GetCurrTime();
        v262 = AVE_Log_GetLevelStr(4);
        if (v260)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR\n", v261, 3, v262, "AVE_ValidateEncoderParameters", 8458, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support DRL/CBR");
      }
      return 4294954396;
    }
    if (*((int *)a1 + 56) >= 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v263 = AVE_Log_CheckConsole(3u);
        v264 = AVE_GetCurrTime();
        v265 = AVE_Log_GetLevelStr(4);
        if (v263)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate\n", v264, 3, v265, "AVE_ValidateEncoderParameters", 8464, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support BaseLayerFrameRate");
      }
      return 4294954396;
    }
    if (*((_DWORD *)a1 + 25764) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v271 = AVE_Log_CheckConsole(3u);
        v272 = AVE_GetCurrTime();
        v273 = AVE_Log_GetLevelStr(4);
        if (v271)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444\n", v272, 3, v273, "AVE_ValidateEncoderParameters", 8471, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MV-HEVC does not support ChromaFmt_400, ChromaFmt_422, or ChromaFmt_444");
      }
      return 4294954396;
    }
    v266 = (unsigned __int8 *)a1 + 93835;
    v267 = (_DWORD)a1[253] & 0xFFFFFFFB;
    *((_BYTE *)v3 + 460) = 1;
    *((_BYTE *)v3 + 572) = 1;
    *((_DWORD *)a1 + 506) = v267 | 1;
    if (*((_BYTE *)a1 + 93835))
    {
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        v268 = AVE_Log_CheckConsole(0x1Eu);
        v269 = AVE_GetCurrTime();
        v270 = AVE_Log_GetLevelStr(4);
        if (v268)
        {
          printf("%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d\n", v269, 30, v270, "AVE_ValidateEncoderParameters", 8486, "encoderPrivateStorage->VPSHevcParams.layer_id_in_nuh[0] == 0", *v266);
          v269 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | non-zero layer ID at base layer %d", v269);
      }
      return 4294948265;
    }
    v274 = v3;
    if (*((_DWORD *)v3 + 141) >= 3u)
    {
      if (AVE_Log_CheckLevel(0x1Eu, 4))
      {
        v280 = AVE_Log_CheckConsole(0x1Eu);
        v281 = AVE_GetCurrTime();
        v282 = AVE_Log_GetLevelStr(4);
        if (v280)
        {
          printf("%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d\n", v281, 30, v282, "AVE_ValidateEncoderParameters", 8491, "encoderPrivateStorage->VideoParams.iLayerNum <= ((2) < ((63 + 1)) ? (2) : ((63 + 1)))", *((_DWORD *)v3 + 141), 2);
          v281 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | video layer number %d is larger than MAX %d", v281);
      }
      return 4294948264;
    }
    v275 = *((unsigned __int8 *)a1 + 93899);
    if (!*((_BYTE *)a1 + 93899))
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v276 = AVE_Log_CheckConsole(0x16u);
        v277 = AVE_GetCurrTime();
        v278 = AVE_Log_GetLevelStr(5);
        if (v276)
        {
          printf("%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values\n", v277, 22, v278);
          v279 = AVE_GetCurrTime();
          v416 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v279, 22, v416);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: kVTCompressionPropertyKey_MVHEVCViewIDs never received, setting default values", v277, 22, v278);
        }
      }
      v283 = *((_DWORD *)v274 + 141);
      *((_DWORD *)v274 + 142) = v283;
      v275 = 1;
      *((_BYTE *)a1 + 93899) = 1;
      if (v283)
      {
        v284 = 0;
        do
        {
          v285 = (char *)a1 + v284;
          v285[93900] = v284;
          v285[20184] = v284++;
        }
        while (v283 > v284);
        v275 = 1;
      }
    }
    v286 = 0;
    while (2)
    {
      v287 = 0;
      while (*((unsigned __int8 *)a1 + v286 + 20184) != *((unsigned __int8 *)a1 + v287 + 93900))
      {
        if (v275 < ++v287)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v381 = AVE_Log_CheckConsole(3u);
            v382 = AVE_GetCurrTime();
            v383 = AVE_Log_GetLevelStr(4);
            if (v381)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list\n", v382, 3, v383, "AVE_ValidateEncoderParameters", 8520, "bFound", *((unsigned __int8 *)a1 + v286 + 20184));
              v384 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v384);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: LeftRightID %d not found in viewID list", v382);
            }
          }
          return 4294948263;
        }
      }
      if (++v286 != 2)
        continue;
      break;
    }
    if (*((_DWORD *)a1 + 65) == 2)
      *((_DWORD *)a1 + 65) = 0;
    v3 = v274;
    *((_BYTE *)v274 + 987) = 1;
    v181 = (_DWORD *)a1 + 34617;
    v182 = v428;
  }
  v288 = *((unsigned __int8 *)v3 + 975);
  *((_DWORD *)a1 + 485) = v288;
  v289 = *((unsigned __int8 *)v3 + 974);
  *((_DWORD *)a1 + 484) = v289;
  if (!(v289 | v288))
    goto LABEL_608;
  v290 = *((_DWORD *)a1 + 56);
  if (v290 < 1)
  {
    v292 = 0;
LABEL_554:
    v307 = v3 + 228;
    v308 = v3[228];
    if (!v3[228])
      goto LABEL_567;
    if (v290 <= 0)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v309 = AVE_Log_CheckConsole(0x16u);
        v310 = AVE_GetCurrTime();
        v311 = AVE_Log_GetLevelStr(5);
        v312 = *v307;
        if (v309)
        {
          printf("%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding\n", v310, 22, v311, v312);
          v313 = AVE_GetCurrTime();
          v417 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v313, 22, v417, *v307);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numTemporalLayers set to %d but BaseLayerFrameRate not specified. Encoder has to turn off hierarchical encoding", v310, 22, v311, v312);
        }
      }
      v308 = 0;
      v3[228] = 0;
      *((_BYTE *)v3 + 974) = 0;
    }
    goto LABEL_561;
  }
  v291 = *((_DWORD *)a1 + 57);
  if (v291 >= 1)
  {
    v292 = -1;
    do
      v293 = v291 >> (v292++ + 2);
    while (v293 >= v290);
    if (v290 << v292 != v291)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v294 = AVE_Log_CheckConsole(0x16u);
        v295 = AVE_GetCurrTime();
        v296 = AVE_Log_GetLevelStr(5);
        v297 = *a1;
        v298 = *((_DWORD *)a1 + 56);
        if (v294)
        {
          printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d\n", v295, 22, v296, v297, *((_DWORD *)a1 + 57), v298);
          v299 = AVE_GetCurrTime();
          v300 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v299, 22, v300, *a1, *((_DWORD *)a1 + 57), *((_DWORD *)a1 + 56));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not multiple of BaseLayerFrameRate %d", v295, 22, v296, v297, *((_DWORD *)a1 + 57), v298);
        }
      }
      v290 = *((int *)a1 + 57) >> v292;
      *((_DWORD *)a1 + 56) = v290;
    }
    goto LABEL_554;
  }
  if (AVE_Log_CheckLevel(0x16u, 5))
  {
    v301 = AVE_Log_CheckConsole(0x16u);
    v302 = AVE_GetCurrTime();
    v303 = AVE_Log_GetLevelStr(5);
    v304 = *((_DWORD *)a1 + 57);
    if (v301)
    {
      printf("%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct\n", v302, 22, v303, *a1, v304);
      v305 = AVE_GetCurrTime();
      v306 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v305, 22, v306, *a1, *((_DWORD *)a1 + 57));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: %p: ExpectedFrameRate %d is not correct", v302, 22, v303, *a1, v304);
    }
  }
  *((_DWORD *)a1 + 56) = 15;
  v307 = v3 + 228;
  v308 = v3[228];
  v292 = 1;
  if (v3[228])
  {
LABEL_561:
    if (v292 != v308)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v314 = AVE_Log_CheckConsole(0x16u);
        v315 = AVE_GetCurrTime();
        v316 = AVE_Log_GetLevelStr(5);
        if (v314)
        {
          printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d\n", v315, 22, v316, v292);
          v317 = AVE_GetCurrTime();
          v418 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v317, 22, v418, v292);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers value is not optimal. Overriding with optimal value. calculatedNumTemporalLayers %d", v315, 22, v316, v292);
        }
      }
      v308 = (unsigned __int16)v292;
      *v307 = v292;
    }
  }
LABEL_567:
  if (v292 <= v308)
    v318 = v308;
  else
    v318 = v292;
  v319 = v318;
  v3[228] = v318;
  if (*((_DWORD *)v3 + 141) >= 2u && v318)
  {
    v182 = v428;
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v320 = AVE_Log_CheckConsole(0x16u);
      v321 = AVE_GetCurrTime();
      v322 = AVE_Log_GetLevelStr(5);
      v323 = *v307;
      if (v320)
      {
        printf("%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0\n", v321, 22, v322, v323);
        v324 = AVE_GetCurrTime();
        v419 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v324, 22, v419, *v307);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NumberOfTemporalLayers is %d and we are encoding multiple layers. Setting NumberOfTemporalLayers to 0", v321, 22, v322, v323);
      }
    }
    v319 = 0;
    *v307 = 0;
    v325 = *((_DWORD *)a1 + 506);
  }
  else
  {
    v325 = *((_DWORD *)a1 + 506);
    v182 = v428;
    if ((v325 & 4) != 0 && v319 > 1 && !*((_BYTE *)v3 + 901))
    {
      v325 &= ~4u;
      *((_DWORD *)a1 + 506) = v325;
    }
  }
  if ((*((_DWORD *)a1 + 471) * *((_DWORD *)a1 + 470)) <= 0x7E8FFF)
  {
    if (v319 >= 4)
    {
      v319 = 3;
      goto LABEL_586;
    }
  }
  else if (v319 > 2)
  {
    v319 = 2;
LABEL_586:
    *v307 = v319;
  }
  v181 = (_DWORD *)a1 + 34617;
  if (!*((_BYTE *)v3 + 976))
  {
    v326 = *((_DWORD *)a1 + 57);
    if (v326 < 1)
    {
      v328 = 2;
    }
    else
    {
      v327 = v326 / *((_DWORD *)a1 + 56) - 2;
      if (v327 > 6)
        v328 = 0;
      else
        v328 = word_1B5625E94[v327];
    }
    v3[229] = v328;
  }
  *((_DWORD *)a1 + 29591) = 1;
  *((_DWORD *)a1 + 486) = 3;
  *v431 = 0;
  if (*((_BYTE *)a1 + 216))
  {
    if (v3[229] > v319)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v329 = AVE_Log_CheckConsole(0x16u);
        v330 = AVE_GetCurrTime();
        v331 = AVE_Log_GetLevelStr(5);
        if (v329)
        {
          printf("%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0\n", v330, 22, v331);
          v332 = AVE_GetCurrTime();
          v420 = AVE_Log_GetLevelStr(5);
          v181 = (_DWORD *)a1 + 34617;
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v332, 22, v420);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: numBTemporalLayers set to invalid value defaulting to 0", v330, 22, v331);
        }
      }
      v3[229] = 0;
      v319 = v3[228];
    }
  }
  else
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) = v325 & 0xFFFFFFFB;
    v3[229] = 0;
    *((_BYTE *)v3 + 975) = 0;
    if (*((int *)v2 + 36) <= 2 && *((_DWORD *)a1 + 66) == 1)
      *v431 = 3;
    if (*((_DWORD *)a1 + 57) == *((_DWORD *)a1 + 56))
    {
      *((_BYTE *)v3 + 974) = 0;
      *((_DWORD *)v3 + 114) = 0;
      *((_DWORD *)a1 + 56) = 0;
      goto LABEL_608;
    }
  }
  if (v319)
  {
    *((_DWORD *)v3 + 622) = v319;
    *v9 = v319;
  }
LABEL_608:
  v333 = *((_DWORD *)v2 + 36);
  if (v333 >= 28)
  {
    *((_DWORD *)a1 + 25801) = 3;
    *v181 = 4;
  }
  if (*((int *)a1 + 507) <= 0
    && *((int *)a1 + 508) <= 0
    && *((double *)a1 + 255) <= 0.0
    && *((double *)a1 + 256) <= 0.0)
  {
    *((_DWORD *)a1 + 507) = 30;
  }
  if (!v3[228])
  {
    *((_BYTE *)v3 + 2492) = 1;
    *((_BYTE *)a1 + 102504) = 1;
  }
  if (!*((_BYTE *)a1 + 216))
  {
    *((_DWORD *)a1 + 486) = 0;
    *((_DWORD *)a1 + 506) &= ~4u;
    v3[229] = 0;
    *((_BYTE *)v3 + 975) = 0;
  }
  if (!*((_BYTE *)v3 + 901))
  {
    v334 = *((_DWORD *)a1 + 506);
    if ((v334 & 4) != 0 && (*((_BYTE *)a1 + 203) & 0x80) != 0)
      *((_DWORD *)a1 + 506) = v334 & 0xFFFFFFFB;
  }
  v335 = v429[339];
  if (v335 <= 5)
    *v181 = 5 - v335;
  if (v333 <= 2)
  {
    if (*((_BYTE *)v3 + 141))
      *((_BYTE *)v3 + 141) = 0;
    *((_BYTE *)v3 + 140) = 0;
  }
  else
  {
    *((_BYTE *)v3 + 141) = 1;
  }
  if (*((_DWORD *)a1 + 66) == 1 && *((_BYTE *)v3 + 989))
    *((_BYTE *)v3 + 989) = 0;
  if (*((_DWORD *)v3 + 233) == 1 && *((_BYTE *)v3 + 981))
    *((_BYTE *)v3 + 981) = 0;
  if (!*((_BYTE *)v3 + 977) && *((_DWORD *)a1 + 56) == 1 && *((int *)a1 + 57) <= 0)
  {
    if (AVE_Log_CheckLevel(0x16u, 5))
    {
      v336 = AVE_Log_CheckConsole(0x16u);
      v337 = AVE_GetCurrTime();
      v338 = AVE_Log_GetLevelStr(5);
      v339 = *((_DWORD *)a1 + 57);
      if (v336)
      {
        printf("%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported\n", v337, 22, v338, v339);
        v340 = AVE_GetCurrTime();
        v421 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v340, 22, v421, *((_DWORD *)a1 + 57));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: NonDroppableFrameRate = 1 and ExpectedFrameRate = %d. Not Supported", v337, 22, v338, v339);
      }
    }
    *((_DWORD *)a1 + 56) = 0;
  }
  if (*((_BYTE *)a1 + 1772))
  {
    *((_DWORD *)a1 + 57) = *((_DWORD *)v3 + 392);
    *((_DWORD *)a1 + 506) &= ~4u;
  }
  if ((*((_BYTE *)a1 + 1876) & 0xE0) != 0)
  {
    *((_BYTE *)a1 + 253) = 1;
    *((_BYTE *)v3 + 821) = 1;
    if (!*((_BYTE *)v3 + 477))
      *((_BYTE *)v3 + 477) = 3;
    *((_BYTE *)a1 + 120520) = 0;
    *((_BYTE *)v3 + 9) = 1;
    *((_BYTE *)v3 + 476) = 1;
    if (*((_DWORD *)v3 + 138) == 1)
      *v182 = 0;
    if (*((_DWORD *)v3 + 141) >= 2u)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v341 = AVE_Log_CheckConsole(3u);
        v342 = AVE_GetCurrTime();
        v343 = AVE_Log_GetLevelStr(4);
        if (v341)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail\n", v342, 3, v343, "AVE_ValidateEncoderParameters", 8878, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF unsupported for MV-HEVC. Fail");
      }
      return 4294954394;
    }
    if (*((_DWORD *)a1 + 25764) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v350 = AVE_Log_CheckConsole(3u);
        v351 = AVE_GetCurrTime();
        v352 = AVE_Log_GetLevelStr(4);
        if (v350)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail\n", v351, 3, v352, "AVE_ValidateEncoderParameters", 8881, "(encoderPrivateStorage->saSPS[0].chroma_format_idc == ChromaFmt_420)", v9[139]);
          v351 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: MCTF for ChromaFmt %d... not supported. Fail", v351);
      }
      return 4294954394;
    }
  }
  else if (!*((_BYTE *)v3 + 9))
  {
    v344 = (unint64_t)a1[25] & 0xFFFFFFFFFFFFFFFELL;
    v345 = 1;
    goto LABEL_659;
  }
  v345 = 0;
  v344 = (unint64_t)a1[25] | 1;
LABEL_659:
  a1[25] = (const void *)v344;
  if (*((_BYTE *)v3 + 871))
  {
    if (*((int *)v3 + 398) > 0)
      v345 = 1;
    if ((v345 & 1) != 0
      || *((_DWORD *)v3 + 141) > 1u
      || *((_BYTE *)v3 + 909)
      || (v344 & 0x80000000) != 0
      || *((int *)v3 + 226) >= 4)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v346 = AVE_Log_CheckConsole(0x16u);
        v347 = AVE_GetCurrTime();
        v348 = AVE_Log_GetLevelStr(5);
        if (v346)
        {
          printf("%lld %d AVE %s: FIG: Force to disable Weighted Prediction\n", v347, 22, v348);
          v349 = AVE_GetCurrTime();
          v422 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v349, 22, v422);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Force to disable Weighted Prediction", v347, 22, v348);
        }
      }
      *((_DWORD *)v3 + 18) = 0;
      *((_BYTE *)v3 + 871) = 0;
      *(_WORD *)((char *)a1 + 118449) = 0;
      *((_BYTE *)a1 + 126848) = 0;
    }
  }
  if (*((_BYTE *)v3 + 184))
  {
    v353 = *((_DWORD *)v3 + 47);
    if (v353 == 1)
    {
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v354 = AVE_Log_CheckConsole(0x16u);
        v355 = AVE_GetCurrTime();
        v356 = AVE_Log_GetLevelStr(5);
        if (v354)
        {
          printf("%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode\n", v355, 22, v356);
          v357 = AVE_GetCurrTime();
          v423 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v357, 22, v423);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: Only one slice. Force to Frame Encoding Mode", v355, 22, v356);
        }
      }
      *((_BYTE *)v3 + 184) = 0;
      v353 = *((_DWORD *)v3 + 47);
    }
    if (v353)
    {
      v358 = 0;
      v359 = (v353 - 1);
      v360 = (int *)(v3 + 98);
      while (1)
      {
        if (v359 == v358)
        {
          v361 = HIDWORD(a1[v359 + 2258]);
          if (v361 < 96)
            break;
        }
        else
        {
          v361 = *v360;
          if (*v360 < 128)
            break;
        }
        if ((v361 + *(v360 - 1)) > *((_DWORD *)a1 + 471))
          break;
        ++v358;
        v360 += 2;
        if (v353 == v358)
          goto LABEL_700;
      }
      if (AVE_Log_CheckLevel(0x16u, 5))
      {
        v362 = AVE_Log_CheckConsole(0x16u);
        v363 = AVE_GetCurrTime();
        v364 = AVE_Log_GetLevelStr(5);
        if (v362)
        {
          printf("%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding\n", v363, 22, v364, v358, *(v360 - 1), *v360, *((_DWORD *)a1 + 471));
          v363 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(5);
        }
        syslog(3, "%lld %d AVE %s: FIG: Slice Parameters Invalid. slice[%d] iY: %d, iHeight: %d, frame height: %d, Force to Frame Encoding", v363);
      }
      *((_BYTE *)v3 + 184) = 0;
      *(_QWORD *)(v3 + 94) = 1;
      *((_DWORD *)v3 + 49) = *((_DWORD *)a1 + 471);
    }
  }
LABEL_700:
  v365 = *((_DWORD *)v2 + 36);
  if (v365 >= 8)
  {
    v366 = 2;
    if (v365 <= 0x1C && ((1 << v365) & 0x14410800) != 0)
    {
      if (*((_DWORD *)a1 + 73))
        v366 = 2;
      else
        v366 = 5;
    }
  }
  else
  {
    v366 = 5;
  }
  *((_BYTE *)v3 + 573) = v366;
  v367 = *((_DWORD *)a1 + 469) | 0x1E;
  *((_DWORD *)a1 + 469) = v367;
  if (!*((_BYTE *)v3 + 477))
    *((_DWORD *)a1 + 469) = v367 & 0xFFFFFFF7;
  v368 = *((_DWORD *)a1 + 25775);
  if (*((_DWORD *)a1 + 49) != 8)
  {
    if (AVE_CheckQuality(*((double *)a1 + 227), v368 + 8))
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v369 = AVE_Log_CheckConsole(3u);
      v19 = AVE_GetCurrTime();
      v370 = AVE_Log_GetLevelStr(4);
      if (v369)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f\n", v19, 3, v370, "AVE_ValidateEncoderParameters", 8988, "false", *((double *)a1 + 227));
        v19 = AVE_GetCurrTime();
        v370 = AVE_Log_GetLevelStr(4);
      }
      v425 = a1[227];
      v424 = 8988;
      v387 = v370;
      v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid Quality %f";
      goto LABEL_210;
    }
    v368 = *((_DWORD *)a1 + 25775);
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 456), v368 + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v371 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v372 = AVE_Log_GetLevelStr(4);
    if (v371)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d\n", v19, 3, v372, "AVE_ValidateEncoderParameters", 8993, "false", *((_DWORD *)a1 + 456));
      v19 = AVE_GetCurrTime();
      v372 = AVE_Log_GetLevelStr(4);
    }
    v425 = (const void *)*((unsigned int *)a1 + 456);
    v424 = 8993;
    v387 = v372;
    v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpI %d";
    goto LABEL_210;
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 457), *((_DWORD *)a1 + 25775) + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v373 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v374 = AVE_Log_GetLevelStr(4);
    if (v373)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d\n", v19, 3, v374, "AVE_ValidateEncoderParameters", 8998, "false", *((_DWORD *)a1 + 457));
      v19 = AVE_GetCurrTime();
      v374 = AVE_Log_GetLevelStr(4);
    }
    v425 = (const void *)*((unsigned int *)a1 + 457);
    v424 = 8998;
    v387 = v374;
    v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpP %d";
    goto LABEL_210;
  }
  if (AVE_CheckQPValue(*((_DWORD *)a1 + 458), *((_DWORD *)a1 + 25775) + 8))
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v375 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v376 = AVE_Log_GetLevelStr(4);
    if (v375)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d\n", v19, 3, v376, "AVE_ValidateEncoderParameters", 9003, "false", *((_DWORD *)a1 + 458));
      v19 = AVE_GetCurrTime();
      v376 = AVE_Log_GetLevelStr(4);
    }
    v425 = (const void *)*((unsigned int *)a1 + 458);
    v424 = 9003;
    v387 = v376;
    v21 = "%lld %d AVE %s: %s:%d %s | FIG: Invalid InitialQpB %d";
    goto LABEL_210;
  }
  v377 = *((_DWORD *)a1 + 507) != 1 || *((_DWORD *)v3 + 142) != 1;
  result = AVE_Enc_CheckResolution(*((_DWORD *)v2 + 37), 1, *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), v377);
  if ((_DWORD)result)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v378 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v379 = AVE_Log_GetLevelStr(4);
    if (v378)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.\n", v19, 3, v379, "AVE_ValidateEncoderParameters", 9017, "false", *((_DWORD *)a1 + 470), *((_DWORD *)a1 + 471), *((_DWORD *)a1 + 507));
      v19 = AVE_GetCurrTime();
      v379 = AVE_Log_GetLevelStr(4);
    }
    v426 = *((unsigned int *)a1 + 471);
    v427 = *((unsigned int *)a1 + 507);
    v425 = (const void *)*((unsigned int *)a1 + 470);
    v424 = 9017;
    v387 = v379;
    v21 = "%lld %d AVE %s: %s:%d %s | FIG: dimensions (%dx%d) not supported %d.";
    goto LABEL_210;
  }
  return result;
}

void AVE_PrepareVideoAndSequenceHeader(uint64_t a1, __CVBuffer *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned __int16 v27;
  __int16 v28;
  unsigned __int16 v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned __int16 v41;
  __int16 v42;
  unsigned __int16 v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t j;
  uint64_t k;
  uint64_t v55;
  unsigned __int16 v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t m;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 v67;
  __int16 v68;
  uint64_t v69;
  int v70;
  __uint64_t v71;
  const char *v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  int v76;
  __uint64_t v77;
  const char *v78;
  int v79;
  int v80;
  int v81;
  char v82;
  OSType PixelFormatType;
  char *v84;
  char *v85;
  int v86;
  _BYTE *v87;
  BOOL v88;
  int v89;
  __uint64_t v90;
  const char *v91;
  int v92;
  __uint64_t v93;
  const char *v94;
  BOOL v95;
  CFTypeRef v96;
  CFTypeRef *v97;
  const void *v98;
  int v99;
  __uint64_t v100;
  const char *v101;
  __uint64_t v102;
  int v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  CFTypeRef v110;
  const void *v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  __uint64_t v115;
  int v116;
  int v117;
  __uint64_t v118;
  const char *v119;
  int v120;
  __uint64_t v121;
  const char *v122;
  int v123;
  __uint64_t v124;
  const char *v125;
  __uint64_t v126;
  int v127;
  __uint64_t v128;
  const char *v129;
  int v130;
  int v131;
  __uint64_t v132;
  const char *v133;
  int v134;
  int v135;
  int v136;
  BOOL v137;
  int v138;
  __uint64_t v139;
  const char *v140;
  int v141;
  __uint64_t v142;
  const char *v143;
  int v144;
  __uint64_t v145;
  const char *v146;
  BOOL v147;
  BOOL v148;
  int v149;
  const char *v150;
  __uint64_t v151;
  int v152;
  const char *v153;
  int v154;
  const char *v155;
  int v156;
  const char *v157;
  int v158;
  const char *v159;
  __uint64_t v160;
  BOOL v161;
  _BYTE *v162;
  _BYTE *v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  int v198;
  uint64_t v199;
  int v200;
  _BYTE *v201;
  _BYTE *v202;
  void *v203;
  unsigned int v204;
  int v205;
  int v206;
  const char *v207;
  int v208;
  __uint64_t v209;
  const char *v210;
  __uint64_t v211;
  int v212;
  const char *v213;
  int v214;
  __uint64_t v215;
  const char *v216;
  __uint64_t v217;
  int v218;
  __uint64_t v219;
  const char *v220;
  __uint64_t v221;
  int v222;
  __uint64_t v223;
  const char *v224;
  int v225;
  __uint64_t v226;
  const char *v227;
  int v228;
  __uint64_t v229;
  const char *v230;
  __uint64_t v231;
  const char *v232;
  const char *v233;
  int v234;
  __uint64_t v235;
  const char *v236;
  const char *v237;
  int v238;
  const char *v239;
  int v240;
  __uint64_t v241;
  const char *v242;
  uint64_t v243;
  const char *v244;
  int v245;
  __uint64_t v246;
  const char *v247;
  int v248;
  const char *v249;
  __uint64_t v250;
  int v251;
  const char *v252;
  int v253;
  const char *v254;
  uint64_t v255;
  int v256;
  const char *v257;
  uint64_t v258;
  const char *v259;
  int v260;
  const char *v261;
  int v262;
  const char *v263;
  const char *v264;
  const char *v265;
  const char *v266;
  const char *v267;
  const char *v268;
  const char *v269;
  const char *v270;
  const char *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _DWORD *__src;
  _DWORD *v287;
  uint64_t v288;
  _DWORD *v289;
  CVPixelBufferRef pixelBuffer;
  _BYTE __dst[2304];
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  unsigned __int16 v304[64];
  uint64_t v305;

  v305 = *MEMORY[0x1E0C80C00];
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader\n", CurrTime, 20, LevelStr);
      v7 = AVE_GetCurrTime();
      v264 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", v7, 20, v264);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareVideoAndSequenceHeader", CurrTime, 20, LevelStr);
    }
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v10 = AVE_Log_CheckConsole(3u);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.\n", v11, 3, v12, "AVE_PrepareVideoAndSequenceHeader", 6345, "imageBuffer != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: imageBuffer = NULL.");
    }
    goto LABEL_321;
  }
  pixelBuffer = a2;
  v8 = a1 + 109700;
  __src = (_DWORD *)(a1 + 102484);
  v287 = (_DWORD *)(a1 + 17920);
  v288 = a1 + 18808;
  v289 = (_DWORD *)(a1 + 102500);
  switch(*(_DWORD *)(a1 + 18808))
  {
    case 1:
      *(_WORD *)(a1 + 103224) = 1;
      goto LABEL_15;
    case 2:
    case 9:
      v300 = xmmword_1B5633660;
      v301 = unk_1B5633670;
      v302 = xmmword_1B5633680;
      v303 = unk_1B5633690;
      v296 = xmmword_1B5633620;
      v297 = unk_1B5633630;
      v298 = xmmword_1B5633640;
      v299 = unk_1B5633650;
      v292 = ExplicitScalingList4x4;
      v293 = unk_1B56335F0;
      v294 = xmmword_1B5633600;
      v295 = unk_1B5633610;
      v9 = &ExplicitScalingList;
      goto LABEL_18;
    case 8:
      if (*(_BYTE *)(a1 + 18350))
      {
        v300 = xmmword_1B56322E0;
        v301 = unk_1B56322F0;
        v302 = xmmword_1B5632300;
        v303 = unk_1B5632310;
        v296 = xmmword_1B56322A0;
        v297 = unk_1B56322B0;
        v298 = xmmword_1B56322C0;
        v299 = unk_1B56322D0;
        v292 = ExplicitStillHEVCHighGainScalingList4x4_PQ;
        v293 = unk_1B5632270;
        v294 = xmmword_1B5632280;
        v295 = unk_1B5632290;
        v9 = &ExplicitStillHEVCHighGainScalingList_PQ;
      }
      else
      {
        v300 = xmmword_1B5632CA0;
        v301 = unk_1B5632CB0;
        v302 = xmmword_1B5632CC0;
        v303 = unk_1B5632CD0;
        v296 = xmmword_1B5632C60;
        v297 = unk_1B5632C70;
        v298 = xmmword_1B5632C80;
        v299 = unk_1B5632C90;
        v292 = ExplicitStillHEVCHighGainScalingList4x4;
        v293 = unk_1B5632C30;
        v294 = xmmword_1B5632C40;
        v295 = unk_1B5632C50;
        v9 = &ExplicitStillHEVCHighGainScalingList;
      }
LABEL_18:
      memcpy(__dst, v9, sizeof(__dst));
      v13 = 0;
      *(_WORD *)(a1 + 103224) = 257;
      v14 = a1 + 103372;
      v15 = a1 + 103276;
      do
      {
        for (i = 0; i != 6; ++i)
        {
          *(_DWORD *)(v15 + 4 * i) = 0;
          *(_BYTE *)(v14 + i) = 1;
        }
        ++v13;
        v14 += 6;
        v15 += 24;
      }
      while (v13 != 4);
      v17 = 0;
      v18 = 1;
      break;
    default:
      *(_WORD *)(a1 + 103224) = 0;
      goto LABEL_15;
  }
  do
  {
    v19 = 0;
    v20 = v18;
    v21 = a1 + 103396 + (v17 << 7);
    do
    {
      v22 = 0;
      v23 = v19 + v17;
      do
      {
        v304[v22] = *((_WORD *)&v292 + 16 * v23 + 4 * scan_order4x4[v22 * 2 + 1] + scan_order4x4[v22 * 2]);
        ++v22;
      }
      while (v22 != 16);
      v24 = 0;
      v25 = 8;
      do
      {
        v26 = v304[v24];
        v27 = v26 - v25;
        if ((int)(v26 - v25) <= 0)
          v28 = 256;
        else
          v28 = -256;
        v29 = v28 + v27;
        if ((unsigned __int16)(char)(v26 - v25) != v27)
          v27 = v29;
        *(_WORD *)(v21 + 2 * v24) = v27;
        v30 = (v25 + v27);
        if (v30 != v26)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v70 = AVE_Log_CheckConsole(3u);
            v71 = AVE_GetCurrTime();
            v72 = AVE_Log_GetLevelStr(4);
            if (v70)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v71, 3, v72, "AVE_HEVC_set_default_scaling_lists", 6122, "nextCoef == ScalingList[i]", v30, v24, v26);
              v71 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v71, 3);
          }
          goto LABEL_104;
        }
        if (v26 <= 5)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v73 = AVE_Log_CheckConsole(3u);
            v74 = AVE_GetCurrTime();
            v75 = AVE_Log_GetLevelStr(4);
            if (v73)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v74, 3, v75, "AVE_HEVC_set_default_scaling_lists", 6123, "(nextCoef >= 6 && nextCoef <= 255)", v26);
              v74 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v74);
          }
          goto LABEL_104;
        }
        if ((unsigned __int16)(char)v27 != v27)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v76 = AVE_Log_CheckConsole(3u);
            v77 = AVE_GetCurrTime();
            v78 = AVE_Log_GetLevelStr(4);
            if (v76)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v77, 3, v78, "AVE_HEVC_set_default_scaling_lists", 6124, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 0, v23, v24, *(__int16 *)(v21 + 2 * v24));
              v77 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v77, 3);
          }
          goto LABEL_104;
        }
        ++v24;
        v25 = v26;
      }
      while (v24 != 16);
      ++v19;
      v21 += 128;
    }
    while (v19 != 3);
    v18 = 0;
    v17 = 3;
  }
  while ((v20 & 1) != 0);
  v31 = 0;
  v32 = 1;
  do
  {
    v33 = 0;
    v34 = v32;
    v35 = a1 + 104164 + (v31 << 7);
    do
    {
      v36 = 0;
      v37 = v33 + v31;
      do
      {
        v304[v36] = *(_WORD *)&__dst[128 * v37 + 16 * scan_order8x8[v36 * 2 + 1] + 2 * scan_order8x8[v36 * 2]];
        ++v36;
      }
      while (v36 != 64);
      v38 = 0;
      v39 = 8;
      do
      {
        v40 = v304[v38];
        v41 = v40 - v39;
        if ((int)(v40 - v39) <= 0)
          v42 = 256;
        else
          v42 = -256;
        v43 = v42 + v41;
        if ((unsigned __int16)(char)(v40 - v39) != v41)
          v41 = v43;
        *(_WORD *)(v35 + 2 * v38) = v41;
        v44 = (v39 + v41);
        if (v44 != v40)
        {
          v8 = a1 + 109700;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v222 = AVE_Log_CheckConsole(3u);
            v223 = AVE_GetCurrTime();
            v224 = AVE_Log_GetLevelStr(4);
            if (v222)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v223, 3, v224, "AVE_HEVC_set_default_scaling_lists", 6161, "nextCoef == ScalingList[i]", v44, v38, v40);
              v223 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v223, 3);
            goto LABEL_356;
          }
          goto LABEL_104;
        }
        if (v40 <= 5)
        {
          v8 = a1 + 109700;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_104;
          v225 = AVE_Log_CheckConsole(3u);
          v226 = AVE_GetCurrTime();
          v227 = AVE_Log_GetLevelStr(4);
          if (v225)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v226, 3, v227, "AVE_HEVC_set_default_scaling_lists", 6162, "(nextCoef >= 6 && nextCoef <= 255)", v40);
LABEL_348:
            v226 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          goto LABEL_355;
        }
        if ((unsigned __int16)(char)v41 != v41)
        {
          v8 = a1 + 109700;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_104;
          v228 = AVE_Log_CheckConsole(3u);
          v229 = AVE_GetCurrTime();
          v230 = AVE_Log_GetLevelStr(4);
          if (!v228)
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)", v229, 3);
            goto LABEL_356;
          }
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v229, 3, v230, "AVE_HEVC_set_default_scaling_lists", 6163, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 1, v37, v38, *(__int16 *)(v35 + 2 * v38));
          v231 = AVE_GetCurrTime();
          v232 = AVE_Log_GetLevelStr(4);
          v281 = v38;
          v283 = *(__int16 *)(v35 + 2 * v38);
          v277 = 1;
          v279 = v37;
          v273 = 6163;
          v275 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data."
                 "scaling_list_delta_coef[sizeId][matrixId][i] <= 127)";
LABEL_352:
          v271 = v232;
          v233 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)";
LABEL_353:
          syslog(3, v233, v231, 3, v271, "AVE_HEVC_set_default_scaling_lists", v273, v275, v277, v279, v281, v283);
          goto LABEL_356;
        }
        ++v38;
        v39 = v40;
      }
      while (v38 != 64);
      ++v33;
      v35 += 128;
    }
    while (v33 != 3);
    v32 = 0;
    v31 = 3;
  }
  while ((v34 & 1) != 0);
  v45 = 0;
  v46 = 1;
  while (2)
  {
    v47 = 0;
    v48 = v46;
    v49 = a1 + 104932 + (v45 << 7);
    while (2)
    {
      v50 = v47 + v45;
      v51 = *(__int16 *)&__dst[128 * v47 + 768 + 128 * v45];
      v52 = *(unsigned __int16 *)&__dst[128 * v47 + 768 + 128 * v45];
      *(_DWORD *)(a1 + 103228 + 4 * (v47 + v45)) = v52 - 8;
      if (v51 != (unsigned __int16)v51)
      {
        v8 = a1 + 109700;
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_104;
        v245 = AVE_Log_CheckConsole(3u);
        v246 = AVE_GetCurrTime();
        v247 = AVE_Log_GetLevelStr(4);
        if (v245)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v246, 3, v247, "AVE_HEVC_set_default_scaling_lists", 6185, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v51, 1, v50, v52);
          v246 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        goto LABEL_376;
      }
      if ((v52 - 6) > 0xF9)
      {
        v8 = a1 + 109700;
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_104;
        v248 = AVE_Log_CheckConsole(3u);
        v226 = AVE_GetCurrTime();
        v249 = AVE_Log_GetLevelStr(4);
        if (v248)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v226, 3, v249, "AVE_HEVC_set_default_scaling_lists", 6186, "(nextCoef >= 6 && nextCoef <= 255)", v52);
          goto LABEL_380;
        }
        goto LABEL_355;
      }
      for (j = 0; j != 64; ++j)
        v304[j] = *(_WORD *)&__dst[128 * v50 + 768 + 16 * scan_order8x8[j * 2 + 1] + 2 * scan_order8x8[j * 2]];
      for (k = 0; k != 64; ++k)
      {
        v55 = v304[k];
        v56 = v55 - v52;
        if ((int)v55 - (__int16)v52 <= 0)
          v57 = 256;
        else
          v57 = -256;
        if ((unsigned __int16)(char)(v55 - v52) != v56)
          v56 = v57 + v55 - v52;
        *(_WORD *)(v49 + 2 * k) = v56;
        v58 = (v56 + v52);
        if ((_DWORD)v58 != (_DWORD)v55)
        {
          v8 = a1 + 109700;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_104;
          v234 = AVE_Log_CheckConsole(3u);
          v235 = AVE_GetCurrTime();
          v236 = AVE_Log_GetLevelStr(4);
          if (!v234)
          {
LABEL_368:
            syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d", v235, 3);
            goto LABEL_356;
          }
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v235, 3, v236, "AVE_HEVC_set_default_scaling_lists", 6209, "nextCoef == ScalingList[i]", v58, k, v55);
          v231 = AVE_GetCurrTime();
          v237 = AVE_Log_GetLevelStr(4);
          v279 = k;
          v281 = v55;
          v275 = "nextCoef == ScalingList[i]";
          v277 = v58;
          v273 = 6209;
LABEL_361:
          v271 = v237;
          v233 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d";
          goto LABEL_353;
        }
        if (v55 <= 5)
        {
          v8 = a1 + 109700;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_104;
          v238 = AVE_Log_CheckConsole(3u);
          v226 = AVE_GetCurrTime();
          v239 = AVE_Log_GetLevelStr(4);
          if (v238)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v226, 3, v239, "AVE_HEVC_set_default_scaling_lists", 6210, "(nextCoef >= 6 && nextCoef <= 255)", v55);
            v226 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          goto LABEL_355;
        }
        if ((unsigned __int16)(char)v56 != v56)
        {
          v8 = a1 + 109700;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_104;
          v240 = AVE_Log_CheckConsole(3u);
          v241 = AVE_GetCurrTime();
          v242 = AVE_Log_GetLevelStr(4);
          if (v240)
          {
            v243 = v50;
            printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v241, 3, v242, "AVE_HEVC_set_default_scaling_lists", 6211, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 2, v50, k, *(__int16 *)(v49 + 2 * k));
            v231 = AVE_GetCurrTime();
            v232 = AVE_Log_GetLevelStr(4);
            v281 = k;
            v283 = *(__int16 *)(v49 + 2 * k);
            v277 = 2;
            v279 = v243;
            v273 = 6211;
            v275 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_dat"
                   "a.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)";
            goto LABEL_352;
          }
          v282 = k;
          v284 = *(__int16 *)(v49 + 2 * k);
          v278 = 2;
          v280 = v50;
          v274 = 6211;
          v276 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data."
                 "scaling_list_delta_coef[sizeId][matrixId][i] <= 127)";
          v272 = v242;
LABEL_371:
          v244 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)";
LABEL_372:
          syslog(3, v244, v241, 3, v272, "AVE_HEVC_set_default_scaling_lists", v274, v276, v278, v280, v282, v284);
          goto LABEL_356;
        }
        LOWORD(v52) = v55;
      }
      ++v47;
      v49 += 128;
      if (v47 != 3)
        continue;
      break;
    }
    v46 = 0;
    v45 = 3;
    if ((v48 & 1) != 0)
      continue;
    break;
  }
  v59 = 0;
  v60 = 1;
  v8 = a1 + 109700;
LABEL_73:
  v61 = v60;
  v62 = *(__int16 *)&__dst[128 * v59 + 1536];
  v63 = *(unsigned __int16 *)&__dst[128 * v59 + 1536];
  __src[v59 + 192] = v63 - 8;
  if ((_DWORD)v62 != (unsigned __int16)v62)
  {
    v8 = a1 + 109700;
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_104;
    v260 = AVE_Log_CheckConsole(3u);
    v241 = AVE_GetCurrTime();
    v261 = AVE_Log_GetLevelStr(4);
    if (!v260)
    {
      v282 = v59;
      v284 = v63;
      v278 = v62;
      v280 = 2;
      v274 = 6232;
      v276 = "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]";
      v272 = v261;
      v244 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d";
      goto LABEL_372;
    }
    printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d\n", v241, 3, v261, "AVE_HEVC_set_default_scaling_lists", 6232, "nextCoef == LocalExplicitScalingList[sizeId-1][matrixId][0]", v62, 2, v59, v63);
    v246 = AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
LABEL_376:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingListDefault[%d][%d][0] %d", v246, 3);
    goto LABEL_356;
  }
  if ((v63 - 6) <= 0xF9)
  {
    for (m = 0; m != 64; ++m)
      v304[m] = *(_WORD *)&__dst[128 * v59 + 1536 + 16 * scan_order8x8[m * 2 + 1] + 2 * scan_order8x8[m * 2]];
    v65 = 0;
    while (1)
    {
      v66 = v304[v65];
      v67 = v66 - v63;
      if ((int)v66 - (__int16)v63 <= 0)
        v68 = 256;
      else
        v68 = -256;
      if ((unsigned __int16)(char)(v66 - v63) != v67)
        v67 = v68 + v66 - v63;
      *(_WORD *)(a1 + 105700 + (v59 << 7) + 2 * v65) = v67;
      v69 = (v67 + v63);
      if ((_DWORD)v69 != (_DWORD)v66)
      {
        v8 = a1 + 109700;
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_104;
        v251 = AVE_Log_CheckConsole(3u);
        v235 = AVE_GetCurrTime();
        v252 = AVE_Log_GetLevelStr(4);
        if (v251)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d) != ScalingList[%d] %d\n", v235, 3, v252, "AVE_HEVC_set_default_scaling_lists", 6256, "nextCoef == ScalingList[i]", v69, v65, v66);
          v231 = AVE_GetCurrTime();
          v237 = AVE_Log_GetLevelStr(4);
          v279 = v65;
          v281 = v66;
          v275 = "nextCoef == ScalingList[i]";
          v277 = v69;
          v273 = 6256;
          goto LABEL_361;
        }
        goto LABEL_368;
      }
      if (v66 <= 5)
      {
        v8 = a1 + 109700;
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_104;
        v253 = AVE_Log_CheckConsole(3u);
        v226 = AVE_GetCurrTime();
        v254 = AVE_Log_GetLevelStr(4);
        if (v253)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v226, 3, v254, "AVE_HEVC_set_default_scaling_lists", 6257, "(nextCoef >= 6 && nextCoef <= 255)", v66);
          goto LABEL_348;
        }
        goto LABEL_355;
      }
      if ((unsigned __int16)(char)v67 != v67)
        break;
      ++v65;
      LOWORD(v63) = v66;
      if (v65 == 64)
      {
        v60 = 0;
        v59 = 3;
        if ((v61 & 1) != 0)
          goto LABEL_73;
        goto LABEL_104;
      }
    }
    v8 = a1 + 109700;
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_104;
    v255 = a1 + (v59 << 7) + 105700;
    v256 = AVE_Log_CheckConsole(3u);
    v241 = AVE_GetCurrTime();
    v257 = AVE_Log_GetLevelStr(4);
    if (v256)
    {
      v258 = v59;
      printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)\n", v241, 3, v257, "AVE_HEVC_set_default_scaling_lists", 6258, "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] <= 127)", 3, v59, v65, *(__int16 *)(v255 + 2 * v65));
      v231 = AVE_GetCurrTime();
      v259 = AVE_Log_GetLevelStr(4);
      v281 = v65;
      v283 = *(__int16 *)(v255 + 2 * v65);
      v277 = 3;
      v279 = v258;
      v273 = 6258;
      v275 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scal"
             "ing_list_delta_coef[sizeId][matrixId][i] <= 127)";
      v271 = v259;
      v233 = "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix scaling_list_delta_coef[%d][%d][%d] = (%d)";
      goto LABEL_353;
    }
    v282 = v65;
    v284 = *(__int16 *)(v255 + 2 * v65);
    v278 = 3;
    v280 = v59;
    v274 = 6258;
    v276 = "(sps->scaling_list_data.scaling_list_delta_coef[sizeId][matrixId][i] >= -128 && sps->scaling_list_data.scalin"
           "g_list_delta_coef[sizeId][matrixId][i] <= 127)";
    v272 = v257;
    goto LABEL_371;
  }
  v8 = a1 + 109700;
  if (!AVE_Log_CheckLevel(3u, 4))
    goto LABEL_104;
  v262 = AVE_Log_CheckConsole(3u);
  v226 = AVE_GetCurrTime();
  v263 = AVE_Log_GetLevelStr(4);
  if (!v262)
  {
LABEL_355:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v226);
    goto LABEL_356;
  }
  printf("%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)\n", v226, 3, v263, "AVE_HEVC_set_default_scaling_lists", 6233, "(nextCoef >= 6 && nextCoef <= 255)", v63);
LABEL_380:
  v250 = AVE_GetCurrTime();
  AVE_Log_GetLevelStr(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: HEVC Scaling Matrix nextCoef (%d)", v250);
LABEL_356:
  v8 = a1 + 109700;
LABEL_15:
  a2 = pixelBuffer;
LABEL_104:
  v79 = *(_DWORD *)(a1 + 1880);
  *(_DWORD *)(a1 + 103064) = v79;
  v80 = *(_DWORD *)(a1 + 1884);
  *(_DWORD *)(a1 + 103068) = v80;
  if (*(_DWORD *)(a1 + 103204) == 3)
    v81 = 63;
  else
    v81 = 31;
  if (*(_DWORD *)(a1 + 103204) == 3)
    v82 = 6;
  else
    v82 = 5;
  *(_DWORD *)(a1 + 103072) = (v79 + v81) >> v82;
  *(_DWORD *)(a1 + 103076) = (v80 + v81) >> v82;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v84 = AVE_PixelFmt_FindByType(PixelFormatType);
  if (v84)
  {
    v85 = v84;
    v86 = *((_DWORD *)v84 + 7);
    v87 = (_BYTE *)(a1 + 87644);
    v88 = v86 == 1 || *(_BYTE *)v8 != 0;
    *(_BYTE *)v8 = v88;
    *(_DWORD *)(v8 + 24) = v86 == 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v92 = AVE_Log_CheckConsole(0x1Eu);
      v93 = AVE_GetCurrTime();
      v94 = AVE_Log_GetLevelStr(6);
      if (v92)
      {
        printf("%lld %d AVE %s: FIG: video_full_range_flag %d\n", v93, 30, v94, *((_DWORD *)v85 + 7) == 1);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: video_full_range_flag %d");
    }
  }
  else
  {
    v87 = (_BYTE *)(a1 + 87644);
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v89 = AVE_Log_CheckConsole(0x1Eu);
      v90 = AVE_GetCurrTime();
      v91 = AVE_Log_GetLevelStr(6);
      if (v89)
      {
        printf("%lld %d AVE %s: FIG: Unknown dynamic range\n", v90, 30, v91);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: Unknown dynamic range");
    }
  }
  if (*v87)
    v95 = 1;
  else
    v95 = *(_BYTE *)v8 != 0;
  *(_BYTE *)v8 = v95;
  v96 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CE8], 0);
  v97 = (CFTypeRef *)MEMORY[0x1E0CA8D10];
  if (v96)
  {
    v98 = v96;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v99 = AVE_Log_CheckConsole(0x1Eu);
      v100 = AVE_GetCurrTime();
      v101 = AVE_Log_GetLevelStr(6);
      if (v99)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!\n", v100, 30, v101);
        v102 = AVE_GetCurrTime();
        v265 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v102, 30, v265);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationTopFieldKey found!", v100, 30, v101);
      }
    }
    if (CFEqual(v98, *v97))
    {
LABEL_131:
      v103 = 0;
    }
    else if (CFEqual(v98, (CFTypeRef)*MEMORY[0x1E0CA8D00]))
    {
      v103 = 1;
    }
    else if (CFEqual(v98, (CFTypeRef)*MEMORY[0x1E0CA8D20]))
    {
      v103 = 2;
    }
    else if (CFEqual(v98, (CFTypeRef)*MEMORY[0x1E0CA8D18]))
    {
      v103 = 3;
    }
    else if (CFEqual(v98, (CFTypeRef)*MEMORY[0x1E0CA8CF8]))
    {
      v103 = 4;
    }
    else
    {
      if (!CFEqual(v98, (CFTypeRef)*MEMORY[0x1E0CA8CF0]))
      {
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          v214 = AVE_Log_CheckConsole(0x1Eu);
          v215 = AVE_GetCurrTime();
          v216 = AVE_Log_GetLevelStr(5);
          if (v214)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v215, 30, v216);
            v217 = AVE_GetCurrTime();
            v269 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v217, 30, v269);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v215, 30, v216);
          }
        }
        goto LABEL_131;
      }
      v103 = 5;
    }
    *(_DWORD *)(v8 + 48) = v103;
    *(_DWORD *)(v8 + 52) = v103;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v104 = AVE_Log_CheckConsole(0x1Eu);
      v105 = AVE_GetCurrTime();
      v106 = AVE_Log_GetLevelStr(6);
      v107 = *(_DWORD *)(v8 + 52);
      if (v104)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v105, 30, v106, *(_DWORD *)(v8 + 48), v107);
        v108 = AVE_GetCurrTime();
        v109 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v108, 30, v109, *(_DWORD *)(v8 + 48), *(_DWORD *)(v8 + 52));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v105, 30, v106, *(_DWORD *)(v8 + 48), v107);
      }
    }
    CFRelease(v98);
  }
  v110 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CE0], 0);
  if (v110)
  {
    v111 = v110;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v112 = AVE_Log_CheckConsole(0x1Eu);
      v113 = AVE_GetCurrTime();
      v114 = AVE_Log_GetLevelStr(6);
      if (v112)
      {
        printf("%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!\n", v113, 30, v114);
        v115 = AVE_GetCurrTime();
        v266 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v115, 30, v266);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: kCVImageBufferChromaLocationBottomFieldKey found!", v113, 30, v114);
      }
    }
    if (CFEqual(v111, *v97))
    {
LABEL_153:
      v116 = 0;
    }
    else if (CFEqual(v111, (CFTypeRef)*MEMORY[0x1E0CA8D00]))
    {
      v116 = 1;
    }
    else if (CFEqual(v111, (CFTypeRef)*MEMORY[0x1E0CA8D20]))
    {
      v116 = 2;
    }
    else if (CFEqual(v111, (CFTypeRef)*MEMORY[0x1E0CA8D18]))
    {
      v116 = 3;
    }
    else if (CFEqual(v111, (CFTypeRef)*MEMORY[0x1E0CA8CF8]))
    {
      v116 = 4;
    }
    else
    {
      if (!CFEqual(v111, (CFTypeRef)*MEMORY[0x1E0CA8CF0]))
      {
        if (AVE_Log_CheckLevel(0x1Eu, 5))
        {
          v218 = AVE_Log_CheckConsole(0x1Eu);
          v219 = AVE_GetCurrTime();
          v220 = AVE_Log_GetLevelStr(5);
          if (v218)
          {
            printf("%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default\n", v219, 30, v220);
            v221 = AVE_GetCurrTime();
            v270 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v221, 30, v270);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: AVE FIG WARNING: kCVImageBufferChromaLocationTopFieldKey with invalid value -> use default", v219, 30, v220);
          }
        }
        goto LABEL_153;
      }
      v116 = 5;
    }
    *(_DWORD *)(v8 + 52) = v116;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v117 = AVE_Log_CheckConsole(0x1Eu);
      v118 = AVE_GetCurrTime();
      v119 = AVE_Log_GetLevelStr(6);
      v120 = *(_DWORD *)(v8 + 52);
      if (v117)
      {
        printf("%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v118, 30, v119, *(_DWORD *)(v8 + 48), v120);
        v121 = AVE_GetCurrTime();
        v122 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v121, 30, v122, *(_DWORD *)(v8 + 48), *(_DWORD *)(v8 + 52));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v118, 30, v119, *(_DWORD *)(v8 + 48), v120);
      }
    }
    CFRelease(v111);
  }
  if (*(_DWORD *)(v8 + 48) || *(_DWORD *)(v8 + 52))
  {
    *(_BYTE *)v8 = 1;
    *(_BYTE *)(v8 + 44) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v123 = AVE_Log_CheckConsole(0x1Eu);
      v124 = AVE_GetCurrTime();
      v125 = AVE_Log_GetLevelStr(6);
      if (v123)
      {
        printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE\n", v124, 30, v125);
        v126 = AVE_GetCurrTime();
        v267 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v126, 30, v267);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag TRUE", v124, 30, v125);
      }
    }
  }
  if (AVE_Log_CheckLevel(0x1Eu, 6))
  {
    v127 = AVE_Log_CheckConsole(0x1Eu);
    v128 = AVE_GetCurrTime();
    v129 = AVE_Log_GetLevelStr(6);
    v130 = *(unsigned __int8 *)(v8 + 44);
    v131 = *(_DWORD *)(v8 + 52);
    if (v127)
    {
      printf("%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d\n", v128, 30, v129, v130, *(_DWORD *)(v8 + 48), v131);
      v132 = AVE_GetCurrTime();
      v133 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v132, 30, v133, *(unsigned __int8 *)(v8 + 44), *(_DWORD *)(v8 + 48), *(_DWORD *)(v8 + 52));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: chroma_loc_info_present_flag %d , chroma_sample_loc_type_top_field %d, chroma_sample_loc_type_bottom_field %d", v128, 30, v129, v130, *(_DWORD *)(v8 + 48), v131);
    }
  }
  if ((*(_BYTE *)(a1 + 20144) & 2) != 0)
    *(_BYTE *)v8 = 0;
  v134 = *(_DWORD *)(a1 + 183388);
  if (!v134)
    v134 = *(_DWORD *)(a1 + 20376);
  if (v134 > 1009)
  {
    if (v134 <= 1307)
    {
      if (v134 == 1010)
      {
LABEL_197:
        *(_BYTE *)(a1 + 20384) = 1;
        *(_BYTE *)(a1 + 102524) = 1;
        *(_BYTE *)(a1 + 20424) = 1;
        *(_BYTE *)(a1 + 102564) = 1;
        *(_DWORD *)(a1 + 20376) = 4;
        *(_DWORD *)(a1 + 102516) = 4;
        v135 = *(_DWORD *)(a1 + 103056);
        if (v135)
        {
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v138 = AVE_Log_CheckConsole(3u);
            v139 = AVE_GetCurrTime();
            v140 = AVE_Log_GetLevelStr(4);
            if (v138)
            {
              printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v140, "AVE_PrepareVideoAndSequenceHeader", 6787, "false", v289[139], *(_DWORD *)(v288 + 1568));
              goto LABEL_245;
            }
            goto LABEL_320;
          }
          goto LABEL_321;
        }
        *(_BYTE *)(a1 + 20416) = 1;
        v147 = v134 == 1008;
        v148 = v134 == 1010 || v134 == 1008;
        *(_BYTE *)(a1 + 20417) = v148;
        *(_BYTE *)(a1 + 20418) = v147;
        *(_DWORD *)(a1 + 20419) = 65793;
        *(_BYTE *)(a1 + 20423) = 0;
        *(_BYTE *)(a1 + 102556) = 1;
        *(_BYTE *)(a1 + 102557) = v148;
        *(_BYTE *)(a1 + 102558) = v147;
        *(_DWORD *)(a1 + 102559) = 65793;
        *(_BYTE *)(a1 + 102563) = 0;
        goto LABEL_252;
      }
      if (v134 != 1210)
        goto LABEL_218;
      *(_BYTE *)(a1 + 20384) = 1;
      *(_BYTE *)(a1 + 102524) = 1;
      *(_BYTE *)(a1 + 20424) = 1;
      *(_BYTE *)(a1 + 102564) = 1;
      *(_DWORD *)(a1 + 20376) = 4;
      *(_DWORD *)(a1 + 102516) = 4;
      v135 = *(_DWORD *)(a1 + 103056);
      if ((v135 - 1) < 2)
      {
        *(_WORD *)(a1 + 20416) = 257;
        v136 = *(unsigned __int8 *)(a1 + 18849);
        if (*(_BYTE *)(a1 + 18849))
          v137 = 0;
        else
          v137 = *v287 == 8;
        v161 = 0;
        *(_BYTE *)(a1 + 20418) = v137;
        *(_BYTE *)(a1 + 20419) = 1;
        *(_DWORD *)(a1 + 20420) = 0;
        *(_WORD *)(a1 + 102556) = 257;
        if (!v136)
          v161 = *v287 == 8;
        *(_BYTE *)(a1 + 102558) = v161;
        *(_BYTE *)(a1 + 102559) = 1;
        *(_DWORD *)(a1 + 102560) = 0;
        goto LABEL_252;
      }
      if (!v135)
      {
LABEL_240:
        *(_QWORD *)(a1 + 20416) = 0x10101000001;
        *(_QWORD *)(a1 + 102556) = 0x10101000001;
        goto LABEL_252;
      }
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_321;
      v158 = AVE_Log_CheckConsole(3u);
      v139 = AVE_GetCurrTime();
      v159 = AVE_Log_GetLevelStr(4);
      if (!v158)
        goto LABEL_320;
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v159, "AVE_PrepareVideoAndSequenceHeader", 6746, "false", v289[139], *(_DWORD *)(v288 + 1568));
LABEL_245:
      v160 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v160);
      goto LABEL_321;
    }
    if (v134 == 1308)
    {
      if (!*(_DWORD *)(a1 + 103100) && !*(_DWORD *)(a1 + 103104))
      {
        *(_BYTE *)(a1 + 20384) = 1;
        *(_BYTE *)(a1 + 102524) = 1;
        *(_BYTE *)(a1 + 20424) = 1;
        *(_BYTE *)(a1 + 102564) = 1;
        *(_DWORD *)(a1 + 20376) = 4;
        *(_DWORD *)(a1 + 102516) = 4;
        v135 = *(_DWORD *)(a1 + 103056);
        if ((v135 - 1) < 3)
        {
          *(_WORD *)(a1 + 20416) = 257;
          *(_BYTE *)(a1 + 20418) = 1;
          *(_DWORD *)(a1 + 20419) = 0;
          *(_BYTE *)(a1 + 20423) = 0;
          *(_WORD *)(a1 + 102556) = 257;
          *(_BYTE *)(a1 + 102558) = 1;
          *(_DWORD *)(a1 + 102559) = 0;
          *(_BYTE *)(a1 + 102563) = 0;
          goto LABEL_252;
        }
        if (!v135)
        {
          *(_WORD *)(a1 + 20420) = 257;
          *(_DWORD *)(a1 + 20416) = 16843009;
          *(_WORD *)(a1 + 20422) = 0;
          *(_DWORD *)(a1 + 102556) = 16843009;
          *(_WORD *)(a1 + 102560) = 257;
          *(_WORD *)(a1 + 102562) = 0;
          goto LABEL_252;
        }
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_321;
        v212 = AVE_Log_CheckConsole(3u);
        v139 = AVE_GetCurrTime();
        v213 = AVE_Log_GetLevelStr(4);
        if (!v212)
          goto LABEL_320;
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v213, "AVE_PrepareVideoAndSequenceHeader", 6614, "false", v289[139], *(_DWORD *)(v288 + 1568));
        goto LABEL_245;
      }
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_321;
      v141 = AVE_Log_CheckConsole(3u);
      v142 = AVE_GetCurrTime();
      v143 = AVE_Log_GetLevelStr(4);
      if (v141)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v142, 3, v143, "AVE_PrepareVideoAndSequenceHeader", 6555, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 0) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 0))", *(_DWORD *)(v288 + 1568), v289[150], v289[151]);
LABEL_229:
        v151 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v151, 3);
        goto LABEL_321;
      }
    }
    else
    {
      if (v134 != 1310)
        goto LABEL_218;
      if (*(_DWORD *)(a1 + 103100) == 2 && *(_DWORD *)(a1 + 103104) == 2)
      {
        *(_BYTE *)(a1 + 20384) = 1;
        *(_BYTE *)(a1 + 102524) = 1;
        *(_BYTE *)(a1 + 20424) = 1;
        *(_BYTE *)(a1 + 102564) = 1;
        *(_DWORD *)(a1 + 20376) = 4;
        *(_DWORD *)(a1 + 102516) = 4;
        v135 = *(_DWORD *)(a1 + 103056);
        if (!v135)
          goto LABEL_240;
        if (v135 == 3 || v135 == 1)
        {
          *(_WORD *)(a1 + 20416) = 257;
          *(_DWORD *)(a1 + 20418) = 0;
          *(_WORD *)(a1 + 20422) = 0;
          *(_WORD *)(a1 + 102556) = 257;
          *(_DWORD *)(a1 + 102558) = 0;
          *(_WORD *)(a1 + 102562) = 0;
          goto LABEL_252;
        }
        if (!AVE_Log_CheckLevel(3u, 4))
          goto LABEL_321;
        v206 = AVE_Log_CheckConsole(3u);
        v139 = AVE_GetCurrTime();
        v207 = AVE_Log_GetLevelStr(4);
        if (!v206)
          goto LABEL_320;
        printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v207, "AVE_PrepareVideoAndSequenceHeader", 6681, "false", v289[139], *(_DWORD *)(v288 + 1568));
        goto LABEL_245;
      }
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_321;
      v149 = AVE_Log_CheckConsole(3u);
      v142 = AVE_GetCurrTime();
      v150 = AVE_Log_GetLevelStr(4);
      if (v149)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)\n", v142, 3, v150, "AVE_PrepareVideoAndSequenceHeader", 6623, "((encoderPrivateStorage->saSPS[0].bit_depth_luma_minus8 == 2) && (encoderPrivateStorage->saSPS[0].bit_depth_chroma_minus8 == 2))", *(_DWORD *)(v288 + 1568), v289[150], v289[151]);
        goto LABEL_229;
      }
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: profile_idc (%d) bit_depth_luma_minus8 (%d) and bit_depth_chroma_minus8 (%d)", v142, 3);
    goto LABEL_321;
  }
  if (v134 <= 2)
  {
    if (v134 != 1)
    {
      if (v134 == 2)
      {
        v135 = *(_DWORD *)(a1 + 103056);
        if (v135 == 1)
        {
          *(_BYTE *)(a1 + 20382) = 1;
          *(_BYTE *)(a1 + 102522) = 1;
          goto LABEL_252;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v156 = AVE_Log_CheckConsole(3u);
          v139 = AVE_GetCurrTime();
          v157 = AVE_Log_GetLevelStr(4);
          if (v156)
          {
            printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v157, "AVE_PrepareVideoAndSequenceHeader", 6525, "false", v289[139], *(_DWORD *)(v288 + 1568));
            goto LABEL_245;
          }
LABEL_320:
          syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported", v139);
        }
        goto LABEL_321;
      }
LABEL_218:
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v144 = AVE_Log_CheckConsole(3u);
        v145 = AVE_GetCurrTime();
        v146 = AVE_Log_GetLevelStr(4);
        if (v144)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported\n", v145, 3, v146, "AVE_PrepareVideoAndSequenceHeader", 6794, "false", *(_DWORD *)(v288 + 1568));
          v145 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: general_profile_idc (%d) nit supported", v145);
      }
      goto LABEL_321;
    }
    if (*(_DWORD *)(a1 + 103056) != 1)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v152 = AVE_Log_CheckConsole(3u);
        v139 = AVE_GetCurrTime();
        v153 = AVE_Log_GetLevelStr(4);
        if (v152)
        {
          printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v153, "AVE_PrepareVideoAndSequenceHeader", 6511, "false", v289[139], *(_DWORD *)(v288 + 1568));
          goto LABEL_245;
        }
        goto LABEL_320;
      }
      goto LABEL_321;
    }
    *(_WORD *)(a1 + 20381) = 257;
    *(_WORD *)(a1 + 102521) = 257;
    v135 = 1;
LABEL_252:
    v162 = (_BYTE *)(a1 + 93835);
    v163 = (_BYTE *)(a1 + 92788);
    if (*(_BYTE *)(a1 + 18909))
    {
      v164 = *(_DWORD *)(a1 + 192);
      if (v164)
      {
        v165 = -1;
        v166 = 33;
        do
        {
          v167 = v164 & (v165 >> 1);
          v165 >>= 1;
          --v166;
        }
        while (v167);
        if (v166 < 8)
        {
          v168 = 0;
          LOBYTE(v169) = 6;
          goto LABEL_263;
        }
        v170 = -1;
        v169 = 32;
        do
        {
          --v169;
          v171 = (v164 & (v170 >> 1)) == 0;
          v170 >>= 1;
        }
        while (!v171);
      }
      else
      {
        v169 = 32;
      }
      v168 = v169 - 6;
LABEL_263:
      *(_DWORD *)(v8 + 104) = v168;
      if (v164)
      {
        v172 = -1;
        v173 = 33;
        do
        {
          v174 = v164 & (v172 >> 1);
          v172 >>= 1;
          --v173;
        }
        while (v174);
        if (v173 >= 6)
        {
          v176 = -1;
          v175 = 28;
          do
          {
            v177 = v164 & (v176 >> 1);
            v176 >>= 1;
            --v175;
          }
          while (v177);
        }
        else
        {
          v175 = 0;
        }
      }
      else
      {
        v175 = 28;
      }
      *(_DWORD *)(v8 + 108) = v175;
      *(_DWORD *)(v8 + 132) = v164 / (1 << v169) - 1;
      *(_DWORD *)(v8 + 136) = v164 / (1 << (v175 + 4)) - 1;
    }
    v178 = *(_DWORD *)(a1 + 18436);
    if (v178 < 2)
    {
      v191 = *(_DWORD *)(a1 + 18900);
      if (v191 && !*(_DWORD *)(a1 + 18904))
      {
        *(_DWORD *)(a1 + 20356) = 1;
        *v163 = 1;
        *(_BYTE *)(a1 + 92791) = 0;
        *(_WORD *)(a1 + 92792) |= 8u;
        *(_BYTE *)(a1 + 92794) = 0;
        *(_BYTE *)(a1 + 92826) = 1;
        *(_BYTE *)(a1 + 93834) = 1;
        *v162 = 0;
        *(_BYTE *)(a1 + 93836) = v191;
        *(_BYTE *)(a1 + 93899) = 0;
        *(_BYTE *)(a1 + 97998) = 1;
        *(_BYTE *)(a1 + 98000) = 1;
        *(_QWORD *)(a1 + 102095) = 0x100000001000000;
        *(_BYTE *)(a1 + 102103) = 1;
        *(_DWORD *)(a1 + 102168) = 0;
        *(_WORD *)(a1 + 102172) = 0;
        *(_WORD *)(a1 + 102174) = *(_DWORD *)(a1 + 1880);
        *(_WORD *)(a1 + 102176) = *(_DWORD *)(a1 + 1884);
        *(_BYTE *)(a1 + 102178) = 1;
        *(_DWORD *)(a1 + 102180) = v135;
        *(_BYTE *)(a1 + 102184) = 0;
        *(_QWORD *)(a1 + 102188) = *(_QWORD *)(a1 + 103100);
      }
      goto LABEL_321;
    }
    v285 = v8;
    v179 = *(_DWORD *)(a1 + 18904);
    v180 = v178 - 1;
    if (v179)
      v181 = 3;
    else
      v181 = v178 - 1;
    *(_DWORD *)(a1 + 20356) = v181;
    *(_DWORD *)(a1 + 20360) = 0;
    *(_BYTE *)(a1 + 20364) = 1;
    memcpy((void *)(a1 + 20912), (const void *)(a1 + 20368), 0x220uLL);
    memcpy((void *)(a1 + 21456), (const void *)(a1 + 20368), 0x220uLL);
    *(_DWORD *)(a1 + 20972) = 0;
    *(_DWORD *)(a1 + 21464) = 6;
    *(_WORD *)(a1 + 21469) = 0;
    *(_BYTE *)(a1 + 21474) = 1;
    if (v179)
    {
      v182 = *v162;
      v183 = *(unsigned __int8 *)(a1 + 93836);
      v184 = *(_DWORD *)(a1 + 18900);
      if (v182 <= v183)
        v185 = *(unsigned __int8 *)(a1 + 93836);
      else
        v185 = *v162;
      v186 = a1 + 22172;
      *(_BYTE *)(v186 + v182) = 1;
      *(_BYTE *)(v186 + v183) = 1;
      v187 = a1 + 22236;
      *(_BYTE *)(v187 + v184) = 1;
      *(_BYTE *)(v187 + v179) = 1;
      v188 = a1 + 22300;
      *(_BYTE *)(a1 + 22300 + v182) = 1;
      if (v184 <= v179)
        LOBYTE(v189) = v179;
      else
        LOBYTE(v189) = v184;
      *(_BYTE *)(v188 + v183) = 1;
      if (v185 <= v189)
        v189 = v189;
      else
        v189 = v185;
      *(_DWORD *)(a1 + 22100) = v189;
      *(_DWORD *)(a1 + 22104) = 3;
      *(_BYTE *)(v188 + v184) = 1;
      *(_BYTE *)(v188 + v179) = 1;
      v190 = v285;
    }
    else
    {
      v192 = 0;
      v193 = *(unsigned __int8 *)(a1 + v180 + 93835);
      *(_DWORD *)(a1 + 22100) = v193;
      *(_DWORD *)(a1 + 22104) = v180;
      v194 = v193 + 1;
      if ((v181 + 1) > 1)
        v195 = (v181 + 1);
      else
        v195 = 1;
      v190 = v285;
      do
      {
        v196 = 0;
        do
        {
          if (v196 == *(unsigned __int8 *)(a1 + v192 + 93835))
            *(_BYTE *)(a1 + 22172 + v196) = 1;
          ++v196;
        }
        while (v194 != v196);
        ++v192;
      }
      while (v192 != v195);
    }
    *v163 = 1;
    v197 = *(_WORD *)(a1 + 92792);
    *(_WORD *)(a1 + 92792) = v197 | 2;
    *(_BYTE *)(a1 + 92794) = 2;
    *(_BYTE *)(a1 + 93834) = 1;
    *(_BYTE *)(a1 + 92826) = 1;
    *(_BYTE *)(a1 + 93966) = 1;
    if (v179)
    {
      v198 = *(unsigned __int8 *)(a1 + 93836);
      v199 = a1 + 102500;
      if (*v162)
      {
        v200 = *(_DWORD *)(a1 + 18900);
        v201 = (_BYTE *)(a1 + 97998);
        goto LABEL_305;
      }
      v200 = *(_DWORD *)(a1 + 18900);
      v201 = (_BYTE *)(a1 + 97998);
      if (v198 == 1)
      {
        *(_BYTE *)(a1 + 93837) = v200;
        *(_BYTE *)(a1 + 93838) = v179;
        *(_WORD *)(a1 + 92842) = 256;
        *(_WORD *)(a1 + 92858) = 257;
        *(_BYTE *)(a1 + 92827) = 0;
        LOBYTE(v200) = 1;
        *(_BYTE *)(a1 + 94096) = 1;
        v202 = (_BYTE *)(a1 + 117641);
      }
      else
      {
LABEL_305:
        v202 = (_BYTE *)(a1 + 117641);
        *(_BYTE *)(a1 + 93837) = v198;
        *(_BYTE *)(a1 + 93836) = v200;
        *(_BYTE *)(a1 + 93838) = v179;
        *(_WORD *)(a1 + 92826) = 256;
        *(_WORD *)(a1 + 92842) = 1;
        *(_WORD *)(a1 + 92858) = 257;
        *(_BYTE *)(a1 + 93966) = 0;
        *(_BYTE *)(a1 + 94030) = 1;
        *(_BYTE *)(a1 + 94095) = 1;
      }
      *(_WORD *)(a1 + 92792) = v197 | 0xA;
      *(_BYTE *)(a1 + 92795) = 2;
      *v201 = 0;
      *(_BYTE *)(a1 + 102099) = 0;
    }
    else
    {
      LOBYTE(v200) = *(_BYTE *)(a1 + 93836);
      v199 = a1 + 102500;
      v202 = (_BYTE *)(a1 + 117641);
    }
    *(_WORD *)(a1 + 102097) = 513;
    *(_BYTE *)(a1 + 92790) = 1;
    *(_WORD *)(a1 + 102174) = *(_DWORD *)(a1 + 1880);
    *(_WORD *)(a1 + 102176) = *(_DWORD *)(a1 + 1884);
    *(_BYTE *)(a1 + 102178) = 1;
    *(_DWORD *)(a1 + 102180) = *(_DWORD *)(v199 + 556);
    *(_QWORD *)(a1 + 102188) = *(_QWORD *)(v199 + 600);
    *(_WORD *)(a1 + 102102) = 257;
    *(_DWORD *)(a1 + 102170) = 16777472;
    *(_DWORD *)v199 = 0;
    *(_BYTE *)(v199 + 4) = 1;
    v203 = (void *)(a1 + 110408);
    v204 = *(_DWORD *)(v190 + 1276);
    memcpy(v203, __src, 0x1EF4uLL);
    *(_BYTE *)(v190 + 712) = v200;
    if (v204 <= 1)
      v205 = 1;
    else
      v205 = v204;
    *(_DWORD *)(v190 + 1276) = v205;
    v202[151] = 1;
    v202[153] = 1;
    *(_DWORD *)(v190 + 713) = 7;
    *v202 = 0;
    goto LABEL_321;
  }
  if (v134 != 3)
  {
    if (v134 != 1008)
      goto LABEL_218;
    goto LABEL_197;
  }
  *(_DWORD *)(a1 + 22004) = 0;
  *(_DWORD *)(a1 + 103116) = 0;
  v135 = *(_DWORD *)(a1 + 103056);
  if (v135 == 1)
  {
    *(_BYTE *)(a1 + 102523) = 1;
    *(_BYTE *)(a1 + 20381) = 1;
    *(_WORD *)(a1 + 102521) = 257;
    *(_WORD *)(a1 + 20382) = 257;
    goto LABEL_252;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v154 = AVE_Log_CheckConsole(3u);
    v139 = AVE_GetCurrTime();
    v155 = AVE_Log_GetLevelStr(4);
    if (v154)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: chroma_format_idc (%d) and profile_idc (%d) combination not supported\n", v139, 3, v155, "AVE_PrepareVideoAndSequenceHeader", 6547, "false", v289[139], *(_DWORD *)(v288 + 1568));
      goto LABEL_245;
    }
    goto LABEL_320;
  }
LABEL_321:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v208 = AVE_Log_CheckConsole(0x14u);
    v209 = AVE_GetCurrTime();
    v210 = AVE_Log_GetLevelStr(7);
    if (v208)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader\n", v209, 20, v210);
      v211 = AVE_GetCurrTime();
      v268 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v211, 20, v268);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PrepareVideoAndSequenceHeader", v209, 20, v210);
    }
  }
}

void AVE_PreparePictureHeader(_DWORD *a1)
{
  unsigned int *v2;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int32x2_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v21;
  const char *v22;
  const char *v23;

  v2 = a1 + 4609;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v3 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader\n", CurrTime, 20, LevelStr);
      v6 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", v6, 20, v21);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PreparePictureHeader", CurrTime, 20, LevelStr);
    }
  }
  v7 = v2[81];
  if (!v7)
    goto LABEL_8;
  if (v7 == 1)
  {
    a1[29593] = a1[456] - 26;
LABEL_8:
    v8 = *v2;
    if (v8 >= 2)
    {
      v9 = 1;
      v10 = 1;
      do
      {
        v11 = &a1[2409 * v10];
        v12 = *(int32x2_t *)(v11 + 29586);
        memcpy(v11 + 29583, a1 + 29583, 0x25A4uLL);
        *((_BYTE *)v11 + 118336) = *((_BYTE *)a1 + v10 + 93835);
        *((_BYTE *)v11 + 126848) = 1;
        *((_BYTE *)v11 + 126851) = 1;
        *((_BYTE *)v11 + 126853) = 1;
        *((int8x8_t *)v11 + 14793) = vbsl_s8((int8x8_t)vceqz_s32(v12), (int8x8_t)vdup_n_s32(v9), (int8x8_t)v12);
        v9 = ++v10;
        *(_DWORD *)((char *)v11 + 118337) = 0;
        *((_BYTE *)v11 + 118341) = 0;
      }
      while (v8 > v10);
    }
    goto LABEL_16;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v13 = AVE_Log_CheckConsole(3u);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized\n", v14, 3, v15, "AVE_PreparePictureHeader", 5985, "false");
      v16 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v16, 3, v22, "AVE_PreparePictureHeader", 5985, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: codec type unrecognized", v14, 3, v15, "AVE_PreparePictureHeader", 5985, "false");
    }
  }
LABEL_16:
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v17 = AVE_Log_CheckConsole(0x14u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(7);
    if (v17)
    {
      printf("%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader\n", v18, 20, v19);
      v20 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v20, 20, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: EXIT AVE_PreparePictureHeader", v18, 20, v19);
    }
  }
}

uint64_t AVE_ManageSessionSettings(uint64_t a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  unsigned int *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  _BYTE *v34;
  unsigned int v35;
  int v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  int v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  double *v68;
  unsigned int v69;
  int v70;
  __uint64_t v71;
  const char *v72;
  double v73;
  double v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  double *v78;
  unsigned int v79;
  int v80;
  __uint64_t v81;
  const char *v82;
  double v83;
  double v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  int v93;
  __uint64_t v94;
  const char *v95;
  unsigned int v96;
  int v97;
  __uint64_t v98;
  const char *v99;
  unsigned int v100;
  __uint64_t v101;
  const char *v102;
  int v103;
  __uint64_t v104;
  const char *v105;
  int v106;
  __uint64_t v107;
  const char *v108;
  int v109;
  __uint64_t v110;
  const char *v111;
  int v112;
  unsigned int v113;
  int v114;
  __uint64_t v115;
  const char *v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  BOOL v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  double *v134;
  int v135;
  __uint64_t v136;
  const char *v137;
  double v138;
  double v139;
  unsigned int v140;
  int v141;
  __uint64_t v142;
  const char *v143;
  int v144;
  __uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  __uint64_t v149;
  const char *v150;
  int v151;
  __uint64_t v152;
  const char *v153;
  uint64_t v154;
  int v155;
  __uint64_t v156;
  const char *v157;
  int v158;
  __uint64_t v159;
  const char *v160;
  int v161;
  __uint64_t v162;
  const char *v163;
  int v164;
  int v165;
  __uint64_t v166;
  const char *v167;
  int v168;
  __uint64_t v169;
  const char *v170;
  int v171;
  __uint64_t v172;
  const char *v173;
  double *v174;
  double *v175;
  int v176;
  int v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  __uint64_t v198;
  const char *v199;
  __uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  char v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  double v218;
  unsigned int v219;
  float v220;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  unsigned int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  double v232;
  float v233;
  int v234;
  int v235;
  double v236;
  int v237;
  __uint64_t v238;
  const char *v239;
  int v240;
  int v241;
  __uint64_t v242;
  int v243;
  __uint64_t v244;
  const char *v245;
  unsigned int v247;
  int v248;
  const char *v249;
  const char *v250;
  const char *v251;
  const char *v252;
  const char *v253;
  const char *v254;
  const char *v255;
  _BYTE *v256;
  _BYTE *v257;
  unsigned int v258;
  _BYTE *v259;

  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v2 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings\n", CurrTime, 20, LevelStr);
      v5 = AVE_GetCurrTime();
      v249 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", v5, 20, v249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_ManageSessionSettings", CurrTime, 20, LevelStr);
    }
  }
  if (*(_DWORD *)(a1 + 196) == 4 && !*(_DWORD *)(a1 + 292))
    *(_DWORD *)(a1 + 292) = 10000;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v6 = AVE_Log_CheckConsole(0x14u);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters\n", v7, 20, v8);
      v9 = AVE_GetCurrTime();
      v250 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v9, 20, v250);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_PrepareRealTimeParameters", v7, 20, v8);
    }
  }
  v10 = AVE_DW_Get();
  v11 = v10;
  if ((v10[57] & 1) != 0)
    *(_DWORD *)(a1 + 264) = 1;
  if ((v10[61] & 1) != 0)
    *(_DWORD *)(a1 + 264) = 0;
  if ((v10[1161] & 4) != 0)
    *(_BYTE *)(a1 + 216) = 1;
  if ((v10[1169] & 4) != 0)
    *(_BYTE *)(a1 + 216) = 0;
  if (AVE_Log_CheckLevel(0x16u, 8))
  {
    v12 = AVE_Log_CheckConsole(0x16u);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(8);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d\n", v13, 22, v14, "AVE_PrepareRealTimeParameters", 7103, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 264), *(unsigned __int8 *)(a1 + 18772), *(_DWORD *)(a1 + 196));
      v13 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s:%d usageMode %d RealTimeClient %d bRCModeSet %d eRCMode %d", v13, 22);
  }
  v15 = (_DWORD *)(a1 + 18808);
  if ((*(_BYTE *)(a1 + 203) & 0x80) == 0 && *(_DWORD *)(a1 + 196) == 8)
    *(_BYTE *)(a1 + 18772) = 0;
  if (*(_DWORD *)(a1 + 264) == 1)
  {
    if (!*(_BYTE *)(a1 + 216) && (v16 = *(_DWORD *)(a1 + 196), v16 != 20) && v16 != 3
      || *(_BYTE *)(a1 + 18846)
      || *(_BYTE *)(a1 + 18847))
    {
      if (!*(_BYTE *)(a1 + 18849) && !*(_DWORD *)(a1 + 292))
      {
        if (!*(_BYTE *)(a1 + 18772))
          *(_DWORD *)(a1 + 196) = 1;
        *(_BYTE *)(a1 + 18684) = 1;
        *(_DWORD *)(a1 + 1920) = 0;
        *(_BYTE *)(a1 + 18752) = 0;
        *(_WORD *)(a1 + 255) = 257;
        *(_BYTE *)(a1 + 18861) = 0;
        v53 = *(_DWORD *)(a1 + 228);
        if (v53 < 1)
        {
          *(_BYTE *)(a1 + 253) = 1;
        }
        else
        {
          v54 = *(_DWORD *)(a1 + 1884);
          v55 = v54 + 15;
          v56 = (v54 + 15) >> 4;
          v57 = *(_DWORD *)(a1 + 1880);
          v58 = (v57 + 15) >> 4;
          v59 = (v58 + 31) & 0x1FFFFFE0;
          if (v56 * v53 * v58 <= 0xAFC80)
            v60 = 1;
          else
            v60 = 2;
          *(_BYTE *)(a1 + 253) = v56 * v53 * v58 > 0xAFC80;
          *(_DWORD *)(a1 + 260) = v60;
          if (v59 > 0x80 || v59 * v56 >= 0x2D01)
          {
            if (v55 > 0x44F || (v57 + 15) >= 0x790)
            {
              v61 = (((v58 + 1) >> 1) + 31) >> 5;
              v56 = (v56 + 1) >> 1;
            }
            else
            {
              v61 = (v58 + 31) >> 5;
            }
            v247 = v61 * v56;
            if (v55 > 0xC0F || v59 > 0x100 || v247 > 0x120)
            {
              *(_DWORD *)(a1 + 260) = 0;
            }
            else
            {
              *(_BYTE *)(a1 + 253) = 1;
              if (v53 > 0x78
                || ((v54 + 31) >> 5) * v53 * ((v57 + 31) >> 5) > 0x77880)
              {
                v248 = 2;
              }
              else
              {
                v248 = 1;
              }
              *(_DWORD *)(a1 + 260) = v248;
            }
          }
        }
      }
    }
  }
  v17 = *((_DWORD *)v11 + 17);
  if (v17 >= 1)
    *(_DWORD *)(a1 + 20336) = v17;
  v18 = *((_DWORD *)v11 + 308);
  if ((v18 & 0x40) != 0)
    *(_BYTE *)(a1 + 255) = 1;
  v19 = *((_DWORD *)v11 + 309);
  if ((v19 & 0x40) != 0)
  {
    *(_BYTE *)(a1 + 255) = 0;
    if ((v18 & 0x80) == 0)
    {
LABEL_43:
      if ((v19 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  else if ((v18 & 0x80) == 0)
  {
    goto LABEL_43;
  }
  *(_BYTE *)(a1 + 256) = 1;
  if ((v19 & 0x80) != 0)
LABEL_44:
    *(_BYTE *)(a1 + 256) = 0;
LABEL_45:
  if ((v11[1161] & 0x80) != 0)
    *(_BYTE *)(a1 + 257) = 1;
  if ((v11[1169] & 0x80) != 0)
    *(_BYTE *)(a1 + 257) = 0;
  v20 = *((_DWORD *)v11 + 296);
  if (v20 != -1 && AVE_HEVC_SetQuality(a1, (double)v20) && AVE_Log_CheckLevel(0x16u, 5))
  {
    v21 = AVE_Log_CheckConsole(0x16u);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(5);
    if (v21)
    {
      printf("%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d\n", v22, 22, v23, v20);
      v24 = AVE_GetCurrTime();
      v251 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v24, 22, v251, v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Unsupported value coremedia_Quality = %d", v22, 22, v23, v20);
    }
  }
  if (*(_DWORD *)(a1 + 264) != 1)
    *(_DWORD *)(a1 + 18748) = 500;
  v25 = (unsigned int *)(a1 + 183384);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v26 = AVE_Log_CheckConsole(0x14u);
    v27 = AVE_GetCurrTime();
    v28 = AVE_Log_GetLevelStr(7);
    if (v26)
    {
      printf("%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel\n", v27, 20, v28);
      v29 = AVE_GetCurrTime();
      v252 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v29, 20, v252);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: ENTER AVE_SetNewEncoderDefaultBasedOnProfileAndLevel", v27, 20, v28);
    }
  }
  v30 = AVE_DW_Get();
  v31 = v30;
  v32 = v30[274];
  if (v32 <= 1009)
  {
    if ((v32 - 1) >= 3 && v32 != 1008)
      goto LABEL_75;
LABEL_74:
    *(_DWORD *)(a1 + 183388) = v32;
    goto LABEL_75;
  }
  if (v32 > 1307)
  {
    if (v32 == 1310 || v32 == 1308)
      goto LABEL_74;
  }
  else if (v32 == 1010 || v32 == 1210)
  {
    goto LABEL_74;
  }
LABEL_75:
  v33 = v30[275];
  if (v33 <= 149)
  {
    if (((v33 - 60) > 0x3F || ((1 << (v33 - 60)) & 0x9000000240000009) == 0)
      && v33 != 30)
    {
      goto LABEL_83;
    }
LABEL_82:
    *(_DWORD *)(a1 + 183392) = v33;
    goto LABEL_83;
  }
  if ((v33 - 150) <= 0x24 && ((1 << (v33 + 106)) & 0x1240000049) != 0 || v33 == 255)
    goto LABEL_82;
LABEL_83:
  v256 = (_BYTE *)(a1 + 126848);
  v257 = (_BYTE *)(a1 + 118376);
  v34 = (_BYTE *)(a1 + 109700);
  v259 = (_BYTE *)(a1 + 102504);
  v35 = v30[276];
  if (v35 <= 1)
    *v25 = v35;
  v36 = *(_DWORD *)(a1 + 183388);
  if (v36)
  {
    *(_DWORD *)(a1 + 18800) = v36;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v37 = AVE_Log_CheckConsole(0x1Eu);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(6);
      v40 = *(_DWORD *)(a1 + 102516);
      if (v37)
      {
        printf("%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d\n", v38, 30, v39, *(_DWORD *)(a1 + 183388), v40);
        v41 = AVE_GetCurrTime();
        v42 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v41, 30, v42, *(_DWORD *)(a1 + 183388), *(_DWORD *)(a1 + 102516));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: FIGHevcProfile = %d -> change the default %d", v38, 30, v39, *(_DWORD *)(a1 + 183388), v40);
      }
    }
    v43 = *(_DWORD *)(a1 + 183388);
    if (v43 <= 1009)
    {
      if ((v43 - 1) < 3)
      {
LABEL_101:
        *(_DWORD *)(a1 + 20376) = v43;
        *(_DWORD *)(a1 + 102516) = v43;
        goto LABEL_102;
      }
      if (v43 != 1008)
        goto LABEL_109;
LABEL_100:
      v43 = 4;
      goto LABEL_101;
    }
    if (v43 > 1307)
    {
      if (v43 == 1310 || v43 == 1308)
        goto LABEL_100;
    }
    else if (v43 == 1010 || v43 == 1210)
    {
      goto LABEL_100;
    }
LABEL_109:
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v50 = AVE_Log_CheckConsole(3u);
      v51 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(4);
      if (v50)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized\n", v51, 3, v52, "AVE_SetNewEncoderDefaultBasedOnProfileUsagePropertiesPassed", 10036, "false", *(_DWORD *)(a1 + 183388));
        v51 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_NewDefaultsBasedOnProfileUsageDefault failed. FIGHevcProfile (%d) unrecognized", v51);
    }
    goto LABEL_199;
  }
LABEL_102:
  if (*(_DWORD *)(a1 + 18760) == 1)
  {
    if (*v25 != 2)
    {
      if (AVE_Log_CheckLevel(0x1Eu, 6))
      {
        v44 = AVE_Log_CheckConsole(0x1Eu);
        v45 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(6);
        v47 = *(_DWORD *)(a1 + 102512);
        if (v44)
        {
          printf("%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d\n", v45, 30, v46, *v25, v47);
          v48 = AVE_GetCurrTime();
          v49 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v48, 30, v49, *v25, *(_DWORD *)(a1 + 102512));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: FIGHevcTier = %d -> change the default %d", v45, 30, v46, *v25, v47);
        }
      }
      *(_DWORD *)(a1 + 102512) = *v25;
    }
    if (*(_DWORD *)(a1 + 228)
       * ((*(_DWORD *)(a1 + 1880) + 15) >> 4)
       * ((*(_DWORD *)(a1 + 1884) + 15) >> 4) >= 0x1DA9C0)
    {
      *(_DWORD *)(a1 + 20372) = 1;
      *(_DWORD *)(a1 + 102512) = 1;
    }
  }
  v62 = *(_BYTE *)(a1 + 18676)
     || *(_DWORD *)(a1 + 1944)
     || (*(_WORD *)(a1 + 17872) & 0xFFFE) == 4
     || *(int *)(a1 + 18680) > 1
     || *(_DWORD *)(a1 + 1756) > 1u
     || (*(_BYTE *)(a1 + 1876) & 0xE0) != 0;
  *(_BYTE *)(a1 + 17882) = v62;
  v63 = *(_DWORD *)(a1 + 196);
  if (v63 == 4 || v63 == 2)
  {
    v64 = *(_DWORD *)(a1 + 292);
    if (v64 == 37 || !v64)
    {
      *(_DWORD *)(a1 + 292) = 10000;
      *(_BYTE *)(a1 + 253) = 0;
      *(_BYTE *)(a1 + 18332) = 1;
      *(_DWORD *)(a1 + 1920) = 0;
      *(_DWORD *)(a1 + 260) = 0;
    }
  }
  v65 = v31[343];
  if (v65 <= 19)
  {
    if (!v65)
    {
      *(_DWORD *)(a1 + 292) = 0;
      goto LABEL_192;
    }
    if (v65 == 1)
    {
      *(_DWORD *)(a1 + 292) = 1;
      goto LABEL_166;
    }
  }
  else
  {
    switch(v65)
    {
      case 20:
        *(_DWORD *)(a1 + 292) = 20;
        goto LABEL_176;
      case 37:
        *(_DWORD *)(a1 + 292) = 37;
        goto LABEL_189;
      case 10000:
        *(_DWORD *)(a1 + 292) = 10000;
LABEL_143:
        AVE_NewDefaultsBasedOnProfileUsageDefault(a1);
        *(_QWORD *)(a1 + 200) &= ~0x10uLL;
        *(_DWORD *)(a1 + 1920) = 0;
        *(_DWORD *)(a1 + 260) = 0;
        *(_BYTE *)(a1 + 18332) = 1;
        *(_DWORD *)(a1 + 2024) &= ~1u;
        *(_BYTE *)(a1 + 254) = *(_DWORD *)(a1 + 264) == 1;
        if (*(int *)(a1 + 1852) <= -13)
          *(_DWORD *)(a1 + 1852) = 51;
        if (*(int *)(a1 + 1844) <= -13)
          *(_DWORD *)(a1 + 1844) = 51;
        if (*(int *)(a1 + 185148) <= 0 && *(double *)(a1 + 185152) <= 0.0)
        {
          *(_QWORD *)(a1 + 2028) = 120;
          *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
          *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
        }
        if (!*(_BYTE *)(a1 + 183404))
        {
          if (*(_BYTE *)(a1 + 183406))
          {
            v66 = *(_DWORD *)(a1 + 1808);
            if (v66 >= 1)
            {
              v67 = 0;
              v68 = (double *)(a1 + 1784);
              v69 = 0x7FFFFFFF;
              do
              {
                if (v69 > (*(v68 - 1) * 8.0 / *v68))
                {
                  if (AVE_Log_CheckLevel(0x1Eu, 6))
                  {
                    v70 = AVE_Log_CheckConsole(0x1Eu);
                    v71 = AVE_GetCurrTime();
                    v72 = AVE_Log_GetLevelStr(6);
                    v73 = *(v68 - 1);
                    v74 = *v68;
                    if (v70)
                    {
                      printf("%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v71, 30, v72, v67, *(v68 - 1), v74);
                      v71 = AVE_GetCurrTime();
                      v72 = AVE_Log_GetLevelStr(6);
                      v73 = *(v68 - 1);
                      v74 = *v68;
                    }
                    syslog(3, "%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v71, 30, v72, v67, v73, v74);
                  }
                  v69 = (*(v68 - 1) * 8.0 / 1.5 / *v68);
                  v66 = *(_DWORD *)(a1 + 1808);
                }
                ++v67;
                v68 += 2;
              }
              while (v67 < v66);
              if (v69 != 0x7FFFFFFF)
                *(_DWORD *)(a1 + 192) = v69;
            }
          }
        }
        goto LABEL_199;
    }
  }
  v131 = *(_DWORD *)(a1 + 292);
  if (v131 <= 36)
  {
    if (v131 != 1)
    {
      if (v131 != 20)
        goto LABEL_192;
LABEL_176:
      *v34 = 1;
      *(_BYTE *)(a1 + 109841) = 1;
      *(_BYTE *)(a1 + 109843) = 1;
      *(_OWORD *)(a1 + 109852) = xmmword_1B56255B0;
      *(_DWORD *)(a1 + 228) = 60;
      *(_QWORD *)(a1 + 2028) = 0x7FFFFFFFLL;
      *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 254) = 1;
      *(_DWORD *)(a1 + 260) = 0;
      *(_QWORD *)(a1 + 200) |= 0x10uLL;
      *(_DWORD *)(a1 + 1868) = 3;
      if (!*(_BYTE *)(a1 + 183404))
      {
        if (*(_BYTE *)(a1 + 183406))
        {
          v76 = *(_DWORD *)(a1 + 1808);
          if (v76 >= 1)
          {
            v77 = 0;
            v78 = (double *)(a1 + 1784);
            v79 = 0x7FFFFFFF;
            do
            {
              if (v79 > (*(v78 - 1) * 8.0 / *v78))
              {
                if (AVE_Log_CheckLevel(0x1Eu, 6))
                {
                  v80 = AVE_Log_CheckConsole(0x1Eu);
                  v81 = AVE_GetCurrTime();
                  v82 = AVE_Log_GetLevelStr(6);
                  v83 = *(v78 - 1);
                  v84 = *v78;
                  if (v80)
                  {
                    printf("%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v81, 30, v82, v77, *(v78 - 1), v84);
                    v81 = AVE_GetCurrTime();
                    v82 = AVE_Log_GetLevelStr(6);
                    v83 = *(v78 - 1);
                    v84 = *v78;
                  }
                  syslog(3, "%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v81, 30, v82, v77, v83, v84);
                }
                v79 = (*(v78 - 1) * 8.0 / *v78);
                v76 = *(_DWORD *)(a1 + 1808);
              }
              ++v77;
              v78 += 2;
            }
            while (v77 < v76);
LABEL_348:
            v25 = (unsigned int *)(a1 + 183384);
            if (v79 != 0x7FFFFFFF)
              *(_DWORD *)(a1 + 192) = v79;
            goto LABEL_190;
          }
        }
      }
      goto LABEL_190;
    }
LABEL_166:
    *(_DWORD *)(a1 + 208) |= 0x20u;
    *(_BYTE *)(a1 + 1924) = 1;
    *(_BYTE *)(a1 + 244) = 0;
    *(_BYTE *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 196) = 20;
    *(_BYTE *)(a1 + 18684) = 0;
    *(_WORD *)(a1 + 255) = 0;
    *(_BYTE *)(a1 + 257) = 0;
    *(_BYTE *)(a1 + 18013) = 0;
    *(_DWORD *)(a1 + 2024) &= ~1u;
    *(_DWORD *)(a1 + 18776) = 2;
    if (*(_BYTE *)(a1 + 216))
    {
      *(_DWORD *)(a1 + 1944) = 1;
      *(_DWORD *)(a1 + 22036) = 1;
      *(_DWORD *)(a1 + 103144) = 1;
      *v256 = 1;
    }
    *v15 = 0;
    *(_BYTE *)(a1 + 120519) = 1;
    *(_BYTE *)(a1 + 138561) = 1;
    if (*(_BYTE *)(a1 + 18743))
      *(_WORD *)(a1 + 118449) = 1;
    v75 = *(_QWORD *)(a1 + 20144);
    if ((v75 & 4) != 0)
    {
      *v34 = 1;
      *(_DWORD *)(a1 + 109841) = 16843009;
      *(_OWORD *)(a1 + 109848) = xmmword_1B56255C0;
      *(_DWORD *)(a1 + 109864) = 15;
    }
    if ((v75 & 8) != 0)
    {
      *v34 = 1;
      *(_BYTE *)(a1 + 109841) = 0;
    }
    *(_BYTE *)(a1 + 18752) = 0;
    *(_QWORD *)(a1 + 18685) = 0;
    *(_BYTE *)(a1 + 118378) = 1;
    goto LABEL_199;
  }
  if (v131 != 37)
  {
    if (v131 == 10000)
      goto LABEL_143;
LABEL_192:
    v85 = *(_DWORD *)(a1 + 183532);
    if (v85 <= 0x19 && ((1 << v85) & 0x33CE600) != 0)
    {
      v86 = *(unsigned __int8 *)(a1 + 18056);
      *(_BYTE *)(a1 + 17881) = v86 ^ 1;
      if (!v86)
      {
        *(_BYTE *)(a1 + 253) = 1;
        if (!*(_BYTE *)(a1 + 18743) && (*(_BYTE *)(a1 + 203) & 0x80) == 0)
        {
          *(_DWORD *)(a1 + 17944) = 1;
          *(_BYTE *)(a1 + 18743) = 1;
          *(_WORD *)(a1 + 118449) = 1;
          *v256 = 1;
        }
      }
    }
    AVE_NewDefaultsBasedOnProfileUsageDefault(a1);
    goto LABEL_199;
  }
LABEL_189:
  *v34 = 1;
  *(_BYTE *)(a1 + 109841) = 1;
  *(_BYTE *)(a1 + 109843) = 1;
  *(_OWORD *)(a1 + 109852) = xmmword_1B56255B0;
  *(_DWORD *)(a1 + 228) = 60;
  *(_QWORD *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 254) = 1;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 200) |= 0x10uLL;
  *(_DWORD *)(a1 + 1868) = 3;
  if (!*(_BYTE *)(a1 + 183404))
  {
    if (*(_BYTE *)(a1 + 183406))
    {
      v132 = *(_DWORD *)(a1 + 1808);
      if (v132 >= 1)
      {
        v133 = 0;
        v134 = (double *)(a1 + 1784);
        v79 = 0x7FFFFFFF;
        do
        {
          if (v79 > (*(v134 - 1) * 8.0 / *v134))
          {
            if (AVE_Log_CheckLevel(0x1Eu, 6))
            {
              v135 = AVE_Log_CheckConsole(0x1Eu);
              v136 = AVE_GetCurrTime();
              v137 = AVE_Log_GetLevelStr(6);
              v138 = *(v134 - 1);
              v139 = *v134;
              if (v135)
              {
                printf("%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f\n", v136, 30, v137, v133, *(v134 - 1), v139);
                v136 = AVE_GetCurrTime();
                v137 = AVE_Log_GetLevelStr(6);
                v138 = *(v134 - 1);
                v139 = *v134;
              }
              syslog(3, "%lld %d AVE %s: FIG: i = %d DataRateLimitsSize %f DataRateLimitsSeconds %f", v136, 30, v137, v133, v138, v139);
            }
            v79 = (*(v134 - 1) * 8.0 / *v134);
            v132 = *(_DWORD *)(a1 + 1808);
          }
          ++v133;
          v134 += 2;
        }
        while (v133 < v132);
        goto LABEL_348;
      }
    }
  }
LABEL_190:
  *(_DWORD *)(a1 + 2024) &= ~1u;
LABEL_199:
  v87 = *(_DWORD *)(a1 + 1884);
  v88 = *(_DWORD *)(a1 + 1880);
  v89 = *(_DWORD *)(a1 + 228);
  if (v89 <= 0)
  {
    if ((((v88 + 15) >> 4) * ((v87 + 15) >> 4)) >> 5 <= 0xFE)
      v89 = 240;
    else
      v89 = 60;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v90 = AVE_Log_CheckConsole(0xD1u);
    v91 = AVE_GetCurrTime();
    v92 = AVE_Log_GetLevelStr(7);
    v93 = *(_DWORD *)(a1 + 102568);
    if (v90)
    {
      printf("%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d\n", v91, 209, v92, *(_DWORD *)(a1 + 102516), v93);
      v94 = AVE_GetCurrTime();
      v95 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v94, 209, v95, *(_DWORD *)(a1 + 102516), *(_DWORD *)(a1 + 102568));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: SPSHevcParams.PTL.general_profile_idc = %d - SPSHevcParams.PTL.general_level_idc = %d", v91, 209, v92, *(_DWORD *)(a1 + 102516), v93);
    }
  }
  v96 = v88 * v87;
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v97 = AVE_Log_CheckConsole(0xD1u);
    v98 = AVE_GetCurrTime();
    v99 = AVE_Log_GetLevelStr(7);
    v100 = v25[2];
    if (v97)
    {
      printf("%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d\n", v98, 209, v99, v25[1], v100);
      v101 = AVE_GetCurrTime();
      v102 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v101, 209, v102, v25[1], v25[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: FIGProfile = %d - FIGLevel = %d", v98, 209, v99, v25[1], v100);
    }
  }
  v258 = v89 * v96;
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v103 = AVE_Log_CheckConsole(0xD1u);
    v104 = AVE_GetCurrTime();
    v105 = AVE_Log_GetLevelStr(7);
    if (v103)
    {
      printf("%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v104, 209, v105, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      v104 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: starting with: ui32MBf %d, ui32MBs %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v104);
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v106 = AVE_Log_CheckConsole(0xD1u);
    v107 = AVE_GetCurrTime();
    v108 = AVE_Log_GetLevelStr(7);
    v109 = *(_DWORD *)(a1 + 1868);
    if (v106)
    {
      printf("%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d\n", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
      v110 = AVE_GetCurrTime();
      v111 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v110, 209, v111, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 1868));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: starting with: USAGE %d ui32MaxNumLTR %d", v107, 209, v108, *(_DWORD *)(a1 + 292), v109);
    }
  }
  if (v96 >= 0x2200001)
    v112 = 255;
  else
    v112 = 180;
  if (v96 < 0x880001)
    v112 = 150;
  if (v96 <= 0x220000)
    v112 = 120;
  if (v96 <= 0xF0000)
    v112 = 93;
  if (v96 <= 0x87000)
    v112 = 90;
  if (v96 <= 0x3C000)
    v112 = 63;
  if (v96 <= 0x1E000)
    v112 = 60;
  if (v96 >= 0x8F4D)
    v113 = v112;
  else
    v113 = 30;
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v114 = AVE_Log_CheckConsole(0xD1u);
    v115 = AVE_GetCurrTime();
    v116 = AVE_Log_GetLevelStr(7);
    if (v114)
    {
      printf("%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d\n", v115, 209, v116, v96, v113);
      v115 = AVE_GetCurrTime();
      v116 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: restrict based on Luma size (%d): ui32Level = %d", v115, 209, v116, v96, v113);
  }
  v117 = *(_DWORD *)(a1 + 1880);
  if (v117 >= 0x41F9)
    v118 = 255;
  else
    v118 = 180;
  if (v117 < 0x20FD)
    v118 = 150;
  if (v117 < 0x107F)
    v118 = 120;
  if (v117 < 0xAF5)
    v118 = 93;
  if (v117 < 0x838)
    v118 = 90;
  if (v117 < 0x57B)
    v118 = 63;
  if (v117 < 0x3E0)
    v118 = 60;
  if (v117 >= 0x21E)
    v119 = v118;
  else
    v119 = 30;
  if (v113 > v119)
    v119 = v113;
  v120 = *(_DWORD *)(a1 + 1884);
  if (v120 >= 0x41F9)
    v121 = 255;
  else
    v121 = 180;
  if (v120 < 0x20FD)
    v121 = 150;
  if (v120 < 0x107F)
    v121 = 120;
  if (v120 < 0xAF5)
    v121 = 93;
  if (v120 < 0x838)
    v121 = 90;
  if (v120 < 0x57B)
    v121 = 63;
  if (v120 < 0x3E0)
    v121 = 60;
  if (v120 < 0x21E)
    v121 = 30;
  if (v119 <= v121)
    v122 = v121;
  else
    v122 = v119;
  if ((*(_DWORD *)(a1 + 102516) - 1) <= 1)
  {
    if (v258 >= 0xFF000001)
      v123 = 255;
    else
      v123 = 186;
    if (v258 < 0x7F800001)
      v123 = 183;
    if (v258 < 0x3FC00001)
      v123 = 156;
    if (v258 < 0x1FE00001)
      v123 = 153;
    if (v258 < 0xFF00001)
      v123 = 150;
    if (v258 < 0x7F80001)
      v123 = 123;
    if (v258 < 0x3FC0001)
      v123 = 120;
    if (v258 < 0x1FA4001)
      v123 = 93;
    if (v258 <= 0xFD2000)
      v123 = 90;
    if (v258 < 0x708001)
      v123 = 63;
    if (v258 <= 0x384000)
      v123 = 60;
    if (v258 >= 0x87001)
      v124 = v123;
    else
      v124 = 30;
    if (v122 <= v124)
      v122 = v124;
    v125 = *(_DWORD *)(a1 + 196);
    if (v125 >= 1 && v125 != 3 && v125 != 8)
    {
      v126 = *(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(a1 + 102512))
      {
        if (v126 >= 800000001)
          v127 = 255;
        else
          v127 = 186;
        if (v126 < 480000001)
          v127 = 183;
        if (v126 >= 240000001)
          v128 = v127;
        else
          v128 = 156;
        if (v126 < 160000001)
          v128 = 153;
        if (v126 < 100000001)
          v128 = 150;
        if (v126 < 50000001)
          v128 = 123;
        v129 = v126 < 30000001;
        v130 = 120;
      }
      else
      {
        if (v126 >= 240000001)
          v128 = 255;
        else
          v128 = 186;
        if (v126 < 120000001)
          v128 = 183;
        if (v126 < 60000001)
          v128 = 156;
        if (v126 < 40000001)
          v128 = 153;
        if (v126 < 25000001)
          v128 = 150;
        if (v126 < 20000001)
          v128 = 123;
        if (v126 < 12000001)
          v128 = 120;
        if (v126 < 10000001)
          v128 = 93;
        if (v126 < 6000001)
          v128 = 90;
        if (v126 < 3000001)
          v128 = 63;
        if (v126 < 1500001)
          v128 = 60;
        v129 = v126 < 128001;
        v130 = 30;
      }
      if (v129)
        v140 = v130;
      else
        v140 = v128;
      if (AVE_Log_CheckLevel(0xD1u, 7))
      {
        v141 = AVE_Log_CheckConsole(0xD1u);
        v142 = AVE_GetCurrTime();
        v143 = AVE_Log_GetLevelStr(7);
        v144 = *(_DWORD *)(a1 + 192);
        if (v141)
        {
          printf("%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX\n", v142, 209, v143, v144, v122, v140);
          v145 = AVE_GetCurrTime();
          v253 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v145, 209, v253, *(_DWORD *)(a1 + 192), v122, v140);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: restrict based on bitrate (%d) ui32Level = %d, ui32TempLevel = %d will use the MAX", v142, 209, v143, v144, v122, v140);
        }
      }
      if (v122 <= v140)
        v122 = v140;
    }
  }
  v146 = *(_DWORD *)(a1 + 102568);
  if (v146 <= v122)
    v146 = v122;
  *(_DWORD *)(a1 + 102568) = v146;
  *(_DWORD *)(a1 + 20428) = v146;
  v147 = *(_DWORD *)(a1 + 183392);
  if (!v147)
    goto LABEL_392;
  if (v147 < v146 && *(int *)(a1 + 228) >= 1)
  {
    if (AVE_Log_CheckLevel(0xD1u, 4))
    {
      v148 = AVE_Log_CheckConsole(0xD1u);
      v149 = AVE_GetCurrTime();
      v150 = AVE_Log_GetLevelStr(4);
      v151 = *(_DWORD *)(a1 + 102568);
      if (v148)
      {
        printf("%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)\n", v149, 209, v150, *(_DWORD *)(a1 + 183392), v151);
        v152 = AVE_GetCurrTime();
        v153 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v152, 209, v153, *(_DWORD *)(a1 + 183392), *(_DWORD *)(a1 + 102568));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: HEVCLevel %d incompatible with other settings (min should be %d)", v149, 209, v150, *(_DWORD *)(a1 + 183392), v151);
      }
    }
    if (AVE_Log_CheckLevel(0xD1u, 4))
    {
      v165 = AVE_Log_CheckConsole(0xD1u);
      v166 = AVE_GetCurrTime();
      v167 = AVE_Log_GetLevelStr(4);
      if (v165)
      {
        printf("%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d\n", v166, 209, v167, v96, v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
        v166 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: FIG: Luma size = %d, Luma samples per second = %d, FrameRate = %d, BitRate = %d", v166);
    }
    v154 = 4294954394;
    goto LABEL_410;
  }
  if (v146 == v147)
  {
LABEL_392:
    v154 = 0;
LABEL_410:
    v164 = *(_DWORD *)(a1 + 102568);
    goto LABEL_411;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v155 = AVE_Log_CheckConsole(0xD1u);
    v156 = AVE_GetCurrTime();
    v157 = AVE_Log_GetLevelStr(7);
    v158 = *(_DWORD *)(a1 + 102568);
    if (v155)
    {
      printf("%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)\n", v156, 209, v157, *(_DWORD *)(a1 + 183392), v158);
      v159 = AVE_GetCurrTime();
      v160 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v159, 209, v160, *(_DWORD *)(a1 + 183392), *(_DWORD *)(a1 + 102568));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: HEVCLevel received (%d) is too high... consider lowering it with these settings (min should be %d)", v156, 209, v157, *(_DWORD *)(a1 + 183392), v158);
    }
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v161 = AVE_Log_CheckConsole(0xD1u);
    v162 = AVE_GetCurrTime();
    v163 = AVE_Log_GetLevelStr(7);
    if (v161)
    {
      printf("%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d\n", v162, 209, v163, v96, *(_DWORD *)(a1 + 1880), *(_DWORD *)(a1 + 1884), v258, *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 192));
      v162 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: Luma size = %d (%dx%d), Luma samples per second = %d, ExpectedFrameRate = %d, BitRate = %d", v162, 209);
  }
  v154 = 0;
  v164 = *(_DWORD *)(a1 + 183392);
  *(_DWORD *)(a1 + 102568) = v164;
  *(_DWORD *)(a1 + 20428) = v164;
LABEL_411:
  if (v164 == 255)
  {
    *(_DWORD *)(a1 + 20372) = 1;
    *(_DWORD *)(a1 + 102512) = 1;
    *(_QWORD *)(a1 + 20480) = 0x101010101010101;
    *(_QWORD *)(a1 + 102620) = 0x101010101010101;
  }
  if (AVE_Log_CheckLevel(0xD1u, 7))
  {
    v168 = AVE_Log_CheckConsole(0xD1u);
    v169 = AVE_GetCurrTime();
    v170 = AVE_Log_GetLevelStr(7);
    if (v168)
    {
      printf("%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d\n", v169, 209, v170, *(_DWORD *)(a1 + 102568), v122, v96, v258, *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 228));
      v169 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: FIG: end with encoderPrivateStorage->SPSHevcParams.PTL.general_level_idc %d (min %d), ui32LPs %d, ui32LSr %d, bitrate %d (eRCMode is %d), iExpectedFrameRate %d", v169, 209);
  }
  if ((_DWORD)v154)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v171 = AVE_Log_CheckConsole(3u);
      v172 = AVE_GetCurrTime();
      v173 = AVE_Log_GetLevelStr(4);
      if (v171)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed\n", v172, 3, v173, "AVE_ManageSessionSettings", 11856, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_PrepareHEVCLevel failed");
    }
    return v154;
  }
  v174 = (double *)AVE_DW_Get();
  v175 = v174;
  v176 = *((_DWORD *)v174 + 317);
  if ((v176 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 2028) = v176;
  v177 = *((_DWORD *)v174 + 318);
  if ((v177 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 2032) = v177;
  v178 = v174[160];
  if (v178 >= 0.0)
    *(double *)(a1 + 2040) = v178;
  v179 = v174[161];
  if (v179 >= 0.0)
    *(double *)(a1 + 2048) = v179;
  v180 = *((_QWORD *)v174 + 3);
  v181 = *((_QWORD *)v174 + 4);
  *(_QWORD *)(a1 + 1888) = (*(_QWORD *)(a1 + 1888) | v180) & ~v181;
  *(_QWORD *)(a1 + 1896) = (*(_QWORD *)(a1 + 1896) | *((_QWORD *)v174 + 5)) & ~*((_QWORD *)v174 + 6);
  if ((v180 & 1) != 0)
  {
    *(_QWORD *)(a1 + 2028) = 1;
    *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
    if ((v180 & 2) == 0)
    {
LABEL_432:
      if ((v180 & 4) == 0)
        goto LABEL_433;
      goto LABEL_438;
    }
  }
  else if ((v180 & 2) == 0)
  {
    goto LABEL_432;
  }
  *(_QWORD *)(a1 + 2028) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 2040) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2048) = 0xBFF0000000000000;
  if ((v180 & 4) == 0)
  {
LABEL_433:
    if ((v181 & 4) == 0)
      goto LABEL_434;
LABEL_439:
    *(_BYTE *)(a1 + 18676) = 0;
    if ((v180 & 0x20) == 0)
      goto LABEL_452;
    goto LABEL_440;
  }
LABEL_438:
  *(_BYTE *)(a1 + 18676) = 1;
  if ((v181 & 4) != 0)
    goto LABEL_439;
LABEL_434:
  if ((v180 & 0x20) == 0)
    goto LABEL_452;
LABEL_440:
  if (*(_DWORD *)v174 == 1)
  {
    v182 = AVE_MCTF_Validate(*(_DWORD *)(a1 + 183532), *(unsigned int *)(a1 + 183528), *(_DWORD *)(a1 + 1876), *(_DWORD *)(a1 + 18760), *(_DWORD *)(a1 + 185464));
    v183 = *(_DWORD *)(a1 + 1876);
    if (v182)
    {
      v184 = v183 & 0xFFFFFF1F;
      goto LABEL_446;
    }
  }
  else
  {
    v183 = *(_DWORD *)(a1 + 1876);
  }
  v184 = v183 | 0xE0;
LABEL_446:
  *(_DWORD *)(a1 + 1876) = v184;
  v180 = *((_QWORD *)v175 + 3);
  if ((v180 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 20186) = 1;
  v181 = *((_QWORD *)v175 + 4);
  if ((v181 & 0x1000000) != 0)
  {
    *(_BYTE *)(a1 + 20186) = 0;
    if ((v180 & 0x4000000) == 0)
    {
LABEL_450:
      if ((v181 & 0x4000000) == 0)
        goto LABEL_452;
      goto LABEL_451;
    }
  }
  else if ((v180 & 0x4000000) == 0)
  {
    goto LABEL_450;
  }
  *(_DWORD *)(a1 + 18424) = 1;
  if ((v181 & 0x4000000) != 0)
LABEL_451:
    *(_DWORD *)(a1 + 18424) = 2;
LABEL_452:
  if ((v181 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 1876) &= 0xFFFFFF1F;
    if ((v180 & 0x40) == 0)
    {
LABEL_454:
      if ((v181 & 0x40) == 0)
        goto LABEL_455;
      goto LABEL_544;
    }
  }
  else if ((v180 & 0x40) == 0)
  {
    goto LABEL_454;
  }
  *v257 = 1;
  if ((v181 & 0x40) == 0)
  {
LABEL_455:
    if ((v180 & 0x200) == 0)
      goto LABEL_456;
    goto LABEL_545;
  }
LABEL_544:
  *v257 = 0;
  if ((v180 & 0x200) == 0)
  {
LABEL_456:
    if ((v181 & 0x200) == 0)
      goto LABEL_457;
    goto LABEL_546;
  }
LABEL_545:
  *(_BYTE *)(a1 + 118451) = 1;
  if ((v181 & 0x200) == 0)
  {
LABEL_457:
    if ((v180 & 0x400) == 0)
      goto LABEL_458;
    goto LABEL_547;
  }
LABEL_546:
  *(_BYTE *)(a1 + 118451) = 0;
  if ((v180 & 0x400) == 0)
  {
LABEL_458:
    if ((v181 & 0x400) == 0)
      goto LABEL_459;
    goto LABEL_548;
  }
LABEL_547:
  *(_BYTE *)(a1 + 20364) = 1;
  *v259 = 1;
  if ((v181 & 0x400) == 0)
  {
LABEL_459:
    if ((v180 & 0x1000) == 0)
      goto LABEL_460;
    goto LABEL_549;
  }
LABEL_548:
  *(_BYTE *)(a1 + 20364) = 0;
  *v259 = 0;
  if ((v180 & 0x1000) == 0)
  {
LABEL_460:
    if ((v181 & 0x1000) == 0)
      goto LABEL_461;
    goto LABEL_550;
  }
LABEL_549:
  *(_WORD *)(a1 + 18685) = 257;
  *(_WORD *)(a1 + 18688) = 257;
  *(_BYTE *)(a1 + 18693) = 1;
  if ((v181 & 0x1000) == 0)
  {
LABEL_461:
    if ((v180 & 0x2000000) == 0)
      goto LABEL_462;
    goto LABEL_551;
  }
LABEL_550:
  *(_WORD *)(a1 + 18685) = 0;
  *(_WORD *)(a1 + 18688) = 0;
  *(_BYTE *)(a1 + 18693) = 0;
  if ((v180 & 0x2000000) == 0)
  {
LABEL_462:
    if ((v181 & 0x2000000) == 0)
      goto LABEL_463;
    goto LABEL_552;
  }
LABEL_551:
  *(_BYTE *)(a1 + 18694) = 1;
  if ((v181 & 0x2000000) == 0)
  {
LABEL_463:
    if ((v180 & 0x2000) == 0)
      goto LABEL_464;
    goto LABEL_553;
  }
LABEL_552:
  *(_BYTE *)(a1 + 18694) = 0;
  if ((v180 & 0x2000) == 0)
  {
LABEL_464:
    if ((v181 & 0x2000) == 0)
      goto LABEL_465;
    goto LABEL_554;
  }
LABEL_553:
  *(_BYTE *)(a1 + 183514) = 1;
  if ((v181 & 0x2000) == 0)
  {
LABEL_465:
    if ((v180 & 0x4000) == 0)
      goto LABEL_466;
    goto LABEL_555;
  }
LABEL_554:
  *(_BYTE *)(a1 + 183514) = 0;
  if ((v180 & 0x4000) == 0)
  {
LABEL_466:
    if ((v181 & 0x4000) == 0)
      goto LABEL_467;
    goto LABEL_556;
  }
LABEL_555:
  *(_BYTE *)(a1 + 183515) = 1;
  if ((v181 & 0x4000) == 0)
  {
LABEL_467:
    if ((v180 & 0x8000) == 0)
      goto LABEL_468;
    goto LABEL_557;
  }
LABEL_556:
  *(_BYTE *)(a1 + 183515) = 0;
  if ((v180 & 0x8000) == 0)
  {
LABEL_468:
    if ((v181 & 0x8000) == 0)
      goto LABEL_469;
    goto LABEL_558;
  }
LABEL_557:
  *(_BYTE *)(a1 + 18910) = 1;
  if ((v181 & 0x8000) == 0)
  {
LABEL_469:
    if ((v180 & 0x10000) == 0)
      goto LABEL_470;
    goto LABEL_559;
  }
LABEL_558:
  *(_BYTE *)(a1 + 18910) = 0;
  if ((v180 & 0x10000) == 0)
  {
LABEL_470:
    if ((v181 & 0x10000) == 0)
      goto LABEL_471;
    goto LABEL_560;
  }
LABEL_559:
  *(_BYTE *)(a1 + 18909) = 1;
  *(_BYTE *)(a1 + 87644) = 1;
  *(_BYTE *)(a1 + 109776) = 1;
  if ((v181 & 0x10000) == 0)
  {
LABEL_471:
    if ((v180 & 0x20000) == 0)
      goto LABEL_472;
    goto LABEL_561;
  }
LABEL_560:
  *(_BYTE *)(a1 + 18909) = 0;
  if ((v180 & 0x20000) == 0)
  {
LABEL_472:
    if ((v181 & 0x20000) == 0)
      goto LABEL_473;
    goto LABEL_562;
  }
LABEL_561:
  *(_BYTE *)(a1 + 18013) = 1;
  if ((v181 & 0x20000) == 0)
  {
LABEL_473:
    if ((v180 & 0x40000) == 0)
      goto LABEL_474;
    goto LABEL_563;
  }
LABEL_562:
  *(_BYTE *)(a1 + 18013) = 0;
  if ((v180 & 0x40000) == 0)
  {
LABEL_474:
    if ((v181 & 0x40000) == 0)
      goto LABEL_475;
    goto LABEL_564;
  }
LABEL_563:
  *(_BYTE *)(a1 + 18014) = 1;
  if ((v181 & 0x40000) == 0)
  {
LABEL_475:
    if ((v180 & 0x80000) == 0)
      goto LABEL_476;
    goto LABEL_565;
  }
LABEL_564:
  *(_BYTE *)(a1 + 18014) = 0;
  if ((v180 & 0x80000) == 0)
  {
LABEL_476:
    if ((v181 & 0x80000) == 0)
      goto LABEL_477;
    goto LABEL_566;
  }
LABEL_565:
  *(_BYTE *)(a1 + 18911) = 1;
  if ((v181 & 0x80000) == 0)
  {
LABEL_477:
    if ((v180 & 0x100000) == 0)
      goto LABEL_478;
    goto LABEL_567;
  }
LABEL_566:
  *(_BYTE *)(a1 + 18911) = 0;
  if ((v180 & 0x100000) == 0)
  {
LABEL_478:
    if ((v181 & 0x100000) == 0)
      goto LABEL_479;
    goto LABEL_568;
  }
LABEL_567:
  *(_BYTE *)(a1 + 18860) = 1;
  if ((v181 & 0x100000) == 0)
  {
LABEL_479:
    if ((v180 & 0x200000) == 0)
      goto LABEL_480;
    goto LABEL_569;
  }
LABEL_568:
  *(_BYTE *)(a1 + 18860) = 0;
  if ((v180 & 0x200000) == 0)
  {
LABEL_480:
    if ((v181 & 0x200000) == 0)
      goto LABEL_482;
    goto LABEL_481;
  }
LABEL_569:
  *(_BYTE *)(a1 + 20141) = 1;
  if ((v181 & 0x200000) != 0)
LABEL_481:
    *(_BYTE *)(a1 + 20141) = 0;
LABEL_482:
  v185 = *((_QWORD *)v175 + 145);
  v186 = *((_QWORD *)v175 + 146);
  *(_QWORD *)(a1 + 200) = (*(_QWORD *)(a1 + 200) | v185) & ~v186;
  if ((v185 & 2) != 0)
  {
    *(_BYTE *)(a1 + 254) = 1;
    if ((v186 & 2) == 0)
    {
LABEL_484:
      if ((v185 & 0x40) == 0)
        goto LABEL_485;
      goto LABEL_573;
    }
  }
  else if ((v186 & 2) == 0)
  {
    goto LABEL_484;
  }
  *(_BYTE *)(a1 + 254) = 0;
  if ((v185 & 0x40) == 0)
  {
LABEL_485:
    if ((v186 & 0x40) == 0)
      goto LABEL_486;
    goto LABEL_574;
  }
LABEL_573:
  *(_DWORD *)(a1 + 2064) = 1;
  if ((v186 & 0x40) == 0)
  {
LABEL_486:
    if ((v185 & 0x10000) == 0)
      goto LABEL_487;
    goto LABEL_575;
  }
LABEL_574:
  *(_DWORD *)(a1 + 2064) = 0;
  if ((v185 & 0x10000) == 0)
  {
LABEL_487:
    if ((v186 & 0x10000) == 0)
      goto LABEL_488;
    goto LABEL_576;
  }
LABEL_575:
  *(_BYTE *)(a1 + 18851) = 1;
  if ((v186 & 0x10000) == 0)
  {
LABEL_488:
    if ((v185 & 0x20000) == 0)
      goto LABEL_489;
    goto LABEL_577;
  }
LABEL_576:
  *(_BYTE *)(a1 + 18851) = 0;
  if ((v185 & 0x20000) == 0)
  {
LABEL_489:
    if ((v186 & 0x20000) == 0)
      goto LABEL_490;
    goto LABEL_578;
  }
LABEL_577:
  *(_BYTE *)(a1 + 18350) = 1;
  if ((v186 & 0x20000) == 0)
  {
LABEL_490:
    if ((v185 & 0x40000) == 0)
      goto LABEL_491;
    goto LABEL_579;
  }
LABEL_578:
  *(_BYTE *)(a1 + 18350) = 0;
  if ((v185 & 0x40000) == 0)
  {
LABEL_491:
    if ((v186 & 0x40000) == 0)
      goto LABEL_492;
    goto LABEL_580;
  }
LABEL_579:
  *(_BYTE *)(a1 + 18856) = 1;
  if ((v186 & 0x40000) == 0)
  {
LABEL_492:
    if ((v185 & 0x80000) == 0)
      goto LABEL_493;
    goto LABEL_581;
  }
LABEL_580:
  *(_BYTE *)(a1 + 18856) = 0;
  if ((v185 & 0x80000) == 0)
  {
LABEL_493:
    if ((v186 & 0x80000) == 0)
      goto LABEL_494;
    goto LABEL_582;
  }
LABEL_581:
  *(_BYTE *)(a1 + 18857) = 1;
  if ((v186 & 0x80000) == 0)
  {
LABEL_494:
    if ((v185 & 0x100000) == 0)
      goto LABEL_495;
    goto LABEL_583;
  }
LABEL_582:
  *(_BYTE *)(a1 + 18857) = 0;
  if ((v185 & 0x100000) == 0)
  {
LABEL_495:
    if ((v186 & 0x100000) == 0)
      goto LABEL_496;
    goto LABEL_584;
  }
LABEL_583:
  *(_BYTE *)(a1 + 18858) = 1;
  *(_BYTE *)(a1 + 18853) = 1;
  if ((v186 & 0x100000) == 0)
  {
LABEL_496:
    if ((v185 & 0x800000) == 0)
      goto LABEL_497;
    goto LABEL_585;
  }
LABEL_584:
  *(_BYTE *)(a1 + 18858) = 0;
  *(_BYTE *)(a1 + 18853) = 0;
  if ((v185 & 0x800000) == 0)
  {
LABEL_497:
    if ((v186 & 0x800000) == 0)
      goto LABEL_498;
    goto LABEL_586;
  }
LABEL_585:
  *(_WORD *)(a1 + 18388) = 257;
  if ((v186 & 0x800000) == 0)
  {
LABEL_498:
    if ((v185 & 0x1000000) == 0)
      goto LABEL_499;
    goto LABEL_587;
  }
LABEL_586:
  *(_WORD *)(a1 + 18388) = 0;
  if ((v185 & 0x1000000) == 0)
  {
LABEL_499:
    if ((v186 & 0x1000000) == 0)
      goto LABEL_500;
    goto LABEL_588;
  }
LABEL_587:
  *(_BYTE *)(a1 + 246) = 1;
  if ((v186 & 0x1000000) == 0)
  {
LABEL_500:
    if ((v185 & 0x2000000) == 0)
      goto LABEL_501;
    goto LABEL_589;
  }
LABEL_588:
  *(_BYTE *)(a1 + 246) = 0;
  if ((v185 & 0x2000000) == 0)
  {
LABEL_501:
    if ((v186 & 0x2000000) == 0)
      goto LABEL_502;
    goto LABEL_590;
  }
LABEL_589:
  *(_BYTE *)(a1 + 18850) = 1;
  if ((v186 & 0x2000000) == 0)
  {
LABEL_502:
    if ((v185 & 0x100000000) == 0)
      goto LABEL_503;
LABEL_591:
    *(_DWORD *)(a1 + 17944) = 1;
    *(_BYTE *)(a1 + 18743) = 1;
    *(_WORD *)(a1 + 118449) = 1;
    *v256 = 1;
    if ((v186 & 0x100000000) == 0)
      goto LABEL_505;
    goto LABEL_504;
  }
LABEL_590:
  *(_BYTE *)(a1 + 18850) = 0;
  if ((v185 & 0x100000000) != 0)
    goto LABEL_591;
LABEL_503:
  if ((v186 & 0x100000000) != 0)
  {
LABEL_504:
    *(_DWORD *)(a1 + 17944) = 0;
    *(_BYTE *)(a1 + 18743) = 0;
    *(_WORD *)(a1 + 118449) = 0;
    *v256 = 0;
  }
LABEL_505:
  v187 = *((_DWORD *)v175 + 308);
  v188 = *((_DWORD *)v175 + 309);
  *(_DWORD *)(a1 + 208) = (*(_DWORD *)(a1 + 208) | v187) & ~v188;
  if ((v187 & 1) != 0)
  {
    *(_BYTE *)(a1 + 244) = 1;
    if (*(_DWORD *)(a1 + 18760) == 1)
      *(_BYTE *)(a1 + 118378) = 1;
  }
  if ((v188 & 1) != 0)
  {
    *(_BYTE *)(a1 + 244) = 0;
    if (*(_DWORD *)(a1 + 18760) == 1)
      *(_BYTE *)(a1 + 118378) = 0;
  }
  if ((v187 & 2) != 0)
  {
    *(_BYTE *)(a1 + 247) = 1;
    if ((v188 & 2) == 0)
    {
LABEL_513:
      if ((v187 & 4) == 0)
        goto LABEL_514;
      goto LABEL_595;
    }
  }
  else if ((v188 & 2) == 0)
  {
    goto LABEL_513;
  }
  *(_BYTE *)(a1 + 247) = 0;
  if ((v187 & 4) == 0)
  {
LABEL_514:
    if ((v188 & 4) == 0)
      goto LABEL_515;
    goto LABEL_596;
  }
LABEL_595:
  *(_BYTE *)(a1 + 248) = 1;
  if ((v188 & 4) == 0)
  {
LABEL_515:
    if ((v187 & 8) == 0)
      goto LABEL_516;
    goto LABEL_597;
  }
LABEL_596:
  *(_BYTE *)(a1 + 248) = 0;
  if ((v187 & 8) == 0)
  {
LABEL_516:
    if ((v188 & 8) == 0)
      goto LABEL_518;
    goto LABEL_517;
  }
LABEL_597:
  *(_BYTE *)(a1 + 249) = 1;
  if ((v188 & 8) != 0)
LABEL_517:
    *(_BYTE *)(a1 + 249) = 0;
LABEL_518:
  *(_DWORD *)(a1 + 2024) = (*(_DWORD *)(a1 + 2024) | *((_DWORD *)v175 + 310)) & ~*((_DWORD *)v175 + 311);
  *(_DWORD *)(a1 + 212) = (*(_DWORD *)(a1 + 212) | *((_DWORD *)v175 + 324)) & ~*((_DWORD *)v175 + 325);
  v190 = *((_DWORD *)v175 + 14);
  v189 = *((_DWORD *)v175 + 15);
  *(_DWORD *)(a1 + 1904) = (*(_DWORD *)(a1 + 1904) | v190) & ~v189;
  if ((v190 & 1) != 0)
  {
    *(_BYTE *)(a1 + 253) = 1;
    if ((v189 & 1) == 0)
    {
LABEL_520:
      if ((v190 & 2) == 0)
        goto LABEL_521;
      goto LABEL_601;
    }
  }
  else if ((v189 & 1) == 0)
  {
    goto LABEL_520;
  }
  *(_BYTE *)(a1 + 253) = 0;
  if ((v190 & 2) == 0)
  {
LABEL_521:
    if ((v189 & 2) == 0)
      goto LABEL_522;
    goto LABEL_602;
  }
LABEL_601:
  *(_BYTE *)(a1 + 183513) = 1;
  if ((v189 & 2) == 0)
  {
LABEL_522:
    if ((v190 & 0x10) == 0)
      goto LABEL_523;
    goto LABEL_603;
  }
LABEL_602:
  *(_BYTE *)(a1 + 183513) = 0;
  if ((v190 & 0x10) == 0)
  {
LABEL_523:
    if ((v189 & 0x10) == 0)
      goto LABEL_524;
    goto LABEL_604;
  }
LABEL_603:
  *(_DWORD *)(a1 + 18776) = 4;
  *(_WORD *)(a1 + 18780) = 257;
  if ((v189 & 0x10) == 0)
  {
LABEL_524:
    if ((v190 & 8) == 0)
      goto LABEL_525;
    goto LABEL_605;
  }
LABEL_604:
  *(_DWORD *)(a1 + 18776) = 2;
  *(_WORD *)(a1 + 18780) = 1;
  if ((v190 & 8) == 0)
  {
LABEL_525:
    if ((v189 & 8) == 0)
      goto LABEL_526;
    goto LABEL_606;
  }
LABEL_605:
  *(_BYTE *)(a1 + 18861) = 1;
  if ((v189 & 8) == 0)
  {
LABEL_526:
    if ((v190 & 0x20) == 0)
      goto LABEL_527;
    goto LABEL_607;
  }
LABEL_606:
  *(_BYTE *)(a1 + 18861) = 0;
  if ((v190 & 0x20) == 0)
  {
LABEL_527:
    if ((v189 & 0x20) == 0)
      goto LABEL_528;
    goto LABEL_608;
  }
LABEL_607:
  *(_BYTE *)(a1 + 18912) = 1;
  if ((v189 & 0x20) == 0)
  {
LABEL_528:
    if ((v190 & 0x40) == 0)
      goto LABEL_529;
    goto LABEL_609;
  }
LABEL_608:
  *(_BYTE *)(a1 + 18912) = 0;
  if ((v190 & 0x40) == 0)
  {
LABEL_529:
    if ((v189 & 0x40) == 0)
      goto LABEL_531;
    goto LABEL_530;
  }
LABEL_609:
  *(_BYTE *)(a1 + 17881) = 1;
  if ((v189 & 0x40) != 0)
LABEL_530:
    *(_BYTE *)(a1 + 17881) = 0;
LABEL_531:
  if (((_BYTE)v175[98] & 8) != 0)
    *(_DWORD *)(a1 + 1920) = 0x8000000;
  v191 = *((_DWORD *)v175 + 295);
  if (v191 >= 1)
  {
    *(_DWORD *)(a1 + 192) = v191;
    *(_WORD *)(a1 + 183404) = 257;
  }
  v192 = *((_DWORD *)v175 + 16);
  if ((v192 - 1) <= 0x1F)
    *(_DWORD *)(a1 + 20152) = v192;
  v193 = *((_DWORD *)v175 + 338);
  if ((v193 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18776) = v193;
    *(_BYTE *)(a1 + 18780) = 1;
  }
  v194 = *((_DWORD *)v175 + 341);
  if ((v194 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 18788) = v194;
    if (v194 >= 5)
    {
      if (AVE_Log_CheckLevel(0x16u, 4))
      {
        v197 = AVE_Log_CheckConsole(0x16u);
        v198 = AVE_GetCurrTime();
        v199 = AVE_Log_GetLevelStr(4);
        if (v197)
        {
          printf("%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)\n", v198, 22, v199, v194);
          v200 = AVE_GetCurrTime();
          v254 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v200, 22, v254, v194);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: SetProperty AVE_kVTCompressionPropertyKey_SAOMode not supported (%d)", v198, 22, v199, v194);
        }
      }
      LOBYTE(v195) = 0;
      LOBYTE(v196) = 0;
    }
    else
    {
      v195 = 0x101000100uLL >> (8 * v194);
      v196 = 0x101010000uLL >> (8 * v194);
    }
    *(_BYTE *)(a1 + 137893) = v195;
    *(_BYTE *)(a1 + 137894) = v196;
  }
  v201 = *((_DWORD *)v175 + 337);
  if (AVE_DevCap_FindSearchRangeMode(*(_DWORD *)(a1 + 183536), 1, 1, v201))
    *(_WORD *)(a1 + 17872) = v201;
  v202 = *((_DWORD *)v175 + 326);
  if ((v202 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 18412) = v202;
  v203 = *((_DWORD *)v175 + 327);
  if ((v203 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 18408) = v203;
  v204 = *((_DWORD *)v175 + 328);
  if ((v204 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 18404) = v204;
  v205 = *((_DWORD *)v175 + 329);
  if ((v205 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 18416) = v205;
  v206 = *((_DWORD *)v175 + 313);
  if ((v206 & 0x80000000) == 0)
    *(_WORD *)(a1 + 18328) = v206;
  v207 = *((_DWORD *)v175 + 316);
  if (v207 <= 0)
  {
    if (v207)
      goto LABEL_636;
    v208 = 0;
  }
  else
  {
    v208 = 1;
  }
  *(_DWORD *)(a1 + 224) = v207;
  *(_BYTE *)(a1 + 18846) = v208;
LABEL_636:
  v209 = *((_DWORD *)v175 + 285);
  if (v209 != -13)
    *(_DWORD *)(a1 + 1840) = v209;
  v210 = *((_DWORD *)v175 + 286);
  if (v210 != -13)
    *(_DWORD *)(a1 + 1844) = v210;
  v211 = *((_DWORD *)v175 + 287);
  if (v211 != -13)
    *(_DWORD *)(a1 + 1848) = v211;
  v212 = *((_DWORD *)v175 + 288);
  if (v212 != -13)
    *(_DWORD *)(a1 + 1852) = v212;
  v213 = *((_DWORD *)v175 + 282);
  if (v213 != -13)
    *(_DWORD *)(a1 + 1824) = v213;
  v214 = *((_DWORD *)v175 + 283);
  if (v214 != -13)
    *(_DWORD *)(a1 + 1828) = v214;
  v215 = *((_DWORD *)v175 + 284);
  if (v215 != -13)
    *(_DWORD *)(a1 + 1832) = v215;
  v216 = *((_DWORD *)v175 + 342);
  if (v216 <= 4)
    *(_DWORD *)(a1 + 18868) = v216;
  v217 = *((_DWORD *)v175 + 331);
  if (v217)
  {
    v218 = (double)v217 / 100.0 + 1.0;
    v219 = *(unsigned __int8 *)(a1 + 18420);
    v220 = v218 * (double)v219;
    if (v220 >= 25.0 || v220 < 0.0)
      v220 = (float)v219;
    *(_BYTE *)(a1 + 18420) = v220;
  }
  v222 = *((_DWORD *)v175 + 330);
  if ((v222 & 0x80000000) == 0)
    *(_BYTE *)(a1 + 18420) = v222;
  v223 = *((_DWORD *)v175 + 349);
  if (v223 >= 1)
    *(_DWORD *)(a1 + 20168) = v223;
  v224 = *((_DWORD *)v175 + 350);
  if (v224 >= 1)
    *(_DWORD *)(a1 + 20172) = v224;
  v225 = *((_DWORD *)v175 + 277);
  if ((v225 & 0x80000000) == 0)
  {
    *v15 = v225;
    *(_BYTE *)(a1 + 18845) = 1;
  }
  v226 = *((_DWORD *)v175 + 336);
  if (v226 >= 1)
    *(_DWORD *)(a1 + 18060) = v226;
  v227 = *((_DWORD *)v175 + 340);
  if (v227 <= 2)
    *(_BYTE *)(a1 + 138562) = v227 != 0;
  v228 = *((_DWORD *)v175 + 314);
  if ((v228 & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 1772) = v228 != 0;
    *(_DWORD *)(a1 + 19440) = v228;
  }
  v229 = *((_DWORD *)v175 + 294);
  if (v229 >= 1)
    *(_DWORD *)(a1 + 196) = v229;
  v230 = *((_DWORD *)v175 + 295);
  if (v230 >= 1)
    *(_DWORD *)(a1 + 192) = v230;
  v231 = *((_DWORD *)v175 + 302);
  if ((v231 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = v231;
    *(_QWORD *)(a1 + 200) |= 0x80000000uLL;
  }
  v232 = v175[149];
  if (v232 >= 0.0)
  {
    v233 = v232;
    *(float *)(a1 + 240) = v233;
  }
  v234 = *((_DWORD *)v175 + 345);
  if (v234 >= 1)
    *(_DWORD *)(a1 + 220) = v234;
  if (*(_BYTE *)(a1 + 18912))
  {
    v235 = *(_DWORD *)(a1 + 228);
    if (v235 >= 1)
      v236 = (double)v235;
    else
      v236 = 30.0;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v237 = AVE_Log_CheckConsole(0x1Eu);
      v238 = AVE_GetCurrTime();
      v239 = AVE_Log_GetLevelStr(6);
      v240 = *(_DWORD *)(a1 + 1884);
      v241 = *(_DWORD *)(a1 + 192);
      if (v237)
      {
        printf("%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f\n", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
        v242 = AVE_GetCurrTime();
        v255 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v242, 30, v255, *(_DWORD *)(a1 + 192), v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: PrepareMemoryUsage - br %d, thr %f", v238, 30, v239, v241, v236 * ((double)(v240 * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2);
      }
    }
    if (v236 * ((double)(*(_DWORD *)(a1 + 1884) * *(_DWORD *)(a1 + 1880)) * 1.5) * 0.2 <= (double)*(int *)(a1 + 192))
      *(_BYTE *)(a1 + 18912) = 0;
    else
      *(_DWORD *)(a1 + 20180) = 50;
  }
  v154 = AVE_ValidateEncoderParameters((const void **)a1);
  if ((_DWORD)v154 && AVE_Log_CheckLevel(3u, 4))
  {
    v243 = AVE_Log_CheckConsole(3u);
    v244 = AVE_GetCurrTime();
    v245 = AVE_Log_GetLevelStr(4);
    if (v243)
    {
      printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed\n", v244, 3, v245, "AVE_ManageSessionSettings", 11877, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_ValidateEncoderParameters failed");
  }
  return v154;
}

void AVE_GetPerFrameData(uint64_t a1, CFDictionaryRef theDict, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  int v20;
  __uint64_t CurrTime;
  const char *LevelStr;
  char v23;
  int v24;
  uint64_t v25;
  double v26;
  double v27;
  int v28;
  int v29;
  BOOL v30;
  signed int v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __int128 v40;
  const __CFData *Value;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  __uint64_t v46;
  const void *v47;
  int v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  uint64_t v52;
  __uint64_t v53;
  const char *v54;
  const void *v55;
  const void *v56;
  CFTypeID TypeID;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  const void *v62;
  int v63;
  __uint64_t v64;
  const char *v65;
  int v66;
  __uint64_t v67;
  const __CFNumber *v68;
  const __CFNumber *v69;
  CFTypeID v70;
  int *v71;
  int v72;
  __uint64_t v73;
  const char *v74;
  int v75;
  __uint64_t v76;
  const __CFNumber *v77;
  const __CFNumber *v78;
  CFTypeID v79;
  int *v80;
  int v81;
  __uint64_t v82;
  const char *v83;
  int v84;
  __uint64_t v85;
  const __CFNumber *v86;
  const __CFNumber *v87;
  CFTypeID v88;
  int *v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  int v93;
  __uint64_t v94;
  const void *v95;
  const void *v96;
  CFTypeID v97;
  int v98;
  __uint64_t v99;
  const char *v100;
  int v101;
  __uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  _DWORD *v105;
  const __CFNumber *ValueAtIndex;
  int v107;
  __uint64_t v108;
  const char *v109;
  int v110;
  __uint64_t v111;
  const char *v112;
  const __CFDictionary *v113;
  const __CFNumber *v114;
  uint64_t v115;
  int *v116;
  int v117;
  __uint64_t v118;
  const char *v119;
  int v120;
  __uint64_t v121;
  const __CFNumber *v122;
  int *v123;
  int v124;
  __uint64_t v125;
  const char *v126;
  int v127;
  __uint64_t v128;
  const void *v129;
  int v130;
  __uint64_t v131;
  const char *v132;
  int v133;
  __uint64_t v134;
  const __CFData *v135;
  const __CFNumber *v136;
  int v137;
  int v138;
  __uint64_t v139;
  const char *v140;
  int v141;
  __uint64_t v142;
  const char *v143;
  const void *v144;
  int v145;
  __uint64_t v146;
  const char *v147;
  int v148;
  __uint64_t v149;
  const void *v150;
  const void *v151;
  int v152;
  __uint64_t v153;
  const char *v154;
  int v155;
  __uint64_t v156;
  int v157;
  __uint64_t v158;
  const char *v159;
  __uint64_t v160;
  int v161;
  __uint64_t v162;
  const char *v163;
  __uint64_t v164;
  const void *v165;
  const __CFNumber *v166;
  const void *v167;
  int v168;
  __uint64_t v169;
  const char *v170;
  __uint64_t v171;
  const __CFNumber *v172;
  int v173;
  int v174;
  __uint64_t v175;
  const char *v176;
  int v177;
  __uint64_t v178;
  const char *v179;
  const __CFNumber *v180;
  int v181;
  __uint64_t v182;
  const char *v183;
  int v184;
  __uint64_t v185;
  const __CFNumber *v186;
  int v187;
  __uint64_t v188;
  const char *v189;
  int v190;
  __uint64_t v191;
  const __CFArray *v192;
  const __CFArray *v193;
  CFTypeID v194;
  int v195;
  __uint64_t v196;
  const char *v197;
  int v198;
  __uint64_t v199;
  unint64_t v200;
  int *v201;
  int v202;
  __uint64_t v203;
  const char *v204;
  int v205;
  __uint64_t v206;
  const char *v207;
  const __CFNumber *v208;
  int *v209;
  int v210;
  __uint64_t v211;
  const char *v212;
  int v213;
  __uint64_t v214;
  const __CFNumber *v215;
  int *v216;
  int v217;
  __uint64_t v218;
  const char *v219;
  int v220;
  __uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const void *v230;
  int v231;
  __uint64_t v232;
  const char *v233;
  __uint64_t v234;
  const void *v235;
  int v236;
  int v237;
  int v238;
  __uint64_t v239;
  const char *v240;
  int v241;
  __uint64_t v242;
  const char *v243;
  int v244;
  __uint64_t v245;
  const char *v246;
  _DWORD *v247;
  const __CFDictionary *v248;
  const __CFDictionary *v249;
  int v250;
  __uint64_t v251;
  const char *v252;
  __uint64_t v253;
  unsigned int v254;
  const void *v255;
  const __CFNumber *v256;
  const __CFNumber *v257;
  CFTypeID v258;
  int v259;
  __uint64_t v260;
  const char *v261;
  int v262;
  __uint64_t v263;
  const __CFArray *v264;
  const __CFArray *v265;
  CFTypeID v266;
  CFIndex Count;
  CFIndex v268;
  CFIndex i;
  int v270;
  __uint64_t v271;
  const char *v272;
  __uint64_t v273;
  const char *v274;
  const __CFNumber *v275;
  int *v276;
  int v277;
  __uint64_t v278;
  const char *v279;
  int v280;
  __uint64_t v281;
  const __CFNumber *v282;
  int *v283;
  int v284;
  __uint64_t v285;
  const char *v286;
  int v287;
  __uint64_t v288;
  const void *v289;
  int v290;
  __uint64_t v291;
  const char *v292;
  int v293;
  __uint64_t v294;
  const __CFNumber *v295;
  int v296;
  __uint64_t v297;
  const char *v298;
  int v299;
  __uint64_t v300;
  const __CFNumber *v301;
  int *v302;
  int v303;
  __uint64_t v304;
  const char *v305;
  int v306;
  __uint64_t v307;
  const void *v308;
  int v309;
  __uint64_t v310;
  const char *v311;
  const char *v312;
  const char *v313;
  const char *v314;
  const char *v315;
  const char *v316;
  const char *v317;
  const char *v318;
  const char *v319;
  const char *v320;
  const char *v321;
  const char *v322;
  const char *v323;
  const char *v324;
  const char *v325;
  const char *v326;
  const char *v327;
  const char *v328;
  const char *v329;
  const char *v330;
  const char *v331;
  const char *v332;
  const char *v333;
  const char *v334;
  const char *v335;
  const char *v336;
  const char *v337;
  const char *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  _DWORD *v342;
  uint64_t v343;
  uint64_t valuePtr;
  __int16 v345;
  uint64_t v346;

  v346 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.\n", CurrTime, 3, LevelStr, "AVE_GetPerFrameData", 4887, "PerFrameData != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: AVE_GetPerFrameData PerFrameData = NULL.");
    }
    return;
  }
  v8 = a1 + 184964;
  v9 = a1 + 183405;
  v10 = a1 + 18012;
  *((_BYTE *)a3 + 136) = *(_BYTE *)(a1 + 183405);
  *(_BYTE *)(a1 + 183405) = 0;
  a3[35] = *(_DWORD *)(a1 + 192);
  *((_BYTE *)a3 + 128) = *(_BYTE *)(a1 + 183407);
  *(_BYTE *)(a1 + 183407) = 0;
  a3[33] = *(_DWORD *)(a1 + 228);
  v11 = *(_OWORD *)(a1 + 1776);
  v12 = *(_OWORD *)(a1 + 1792);
  *((_QWORD *)a3 + 23) = *(_QWORD *)(a1 + 1808);
  *(_OWORD *)(a3 + 42) = v12;
  *(_OWORD *)(a3 + 38) = v11;
  *(_BYTE *)(a1 + 183406) = 0;
  a3[381] = *(_DWORD *)(a1 + 18776);
  *((_BYTE *)a3 + 1528) = *(_DWORD *)(a1 + 18784) == 1;
  *((_BYTE *)a3 + 1530) = *(_DWORD *)(a1 + 18788) == 4;
  *((_BYTE *)a3 + 1531) = *(_BYTE *)(a1 + 18852);
  *((_BYTE *)a3 + 1532) = *(_BYTE *)(a1 + 18853);
  *((_BYTE *)a3 + 1536) = *(_BYTE *)(a1 + 18861);
  *((_BYTE *)a3 + 1533) = *(_BYTE *)(a1 + 18854);
  a3[386] = *(_DWORD *)(a1 + 18808);
  *((_BYTE *)a3 + 1537) = *(_BYTE *)(a1 + 18012);
  v13 = *(_DWORD *)(a1 + 184964);
  if (!v13)
    v13 = *(_DWORD *)(a1 + 1880);
  a3[181] = v13;
  v14 = *(_DWORD *)(a1 + 184968);
  if (!v14)
    v14 = *(_DWORD *)(a1 + 1884);
  a3[182] = v14;
  *((_BYTE *)a3 + 1535) = 0;
  *((_BYTE *)a3 + 1529) = 0;
  if ((*(_BYTE *)(a1 + 1876) & 0xE0) == 0)
  {
    *((_BYTE *)a3 + 1538) = 0;
    goto LABEL_47;
  }
  v15 = *(_DWORD *)(a1 + 1884);
  v16 = *(_DWORD *)(a1 + 1880);
  if (!*(_BYTE *)(a1 + 20186))
  {
    v23 = 1;
    goto LABEL_19;
  }
  v17 = *((_DWORD *)AVE_DW_Get() + 332);
  if (v17 < 1)
  {
    v23 = *(_DWORD *)(*(_QWORD *)(a4 + 144) + 72) < 255;
    goto LABEL_19;
  }
  v18 = *(_DWORD *)(v9 + 7);
  if (v18 > 3)
  {
    v24 = v18 % v17;
    v23 = *(_BYTE *)(v8 + 505);
    if (!v24)
    {
      v19 = v23 ^ 1;
      goto LABEL_21;
    }
LABEL_19:
    *((_BYTE *)a3 + 1538) = v23;
    goto LABEL_22;
  }
  v19 = 1;
LABEL_21:
  *((_BYTE *)a3 + 1538) = v19;
  *(_BYTE *)(v8 + 505) = v19;
LABEL_22:
  v25 = *(_QWORD *)(a4 + 144);
  v26 = *(double *)(v25 + 56);
  v27 = 1.0;
  if (v26 == 0.0)
    v26 = 1.0;
  *((double *)a3 + 198) = v26;
  v28 = *(_DWORD *)(v25 + 80);
  a3[398] = v28;
  if (*(int *)(v9 + 127) < 26 || ((v29 = *(_DWORD *)(v25 + 64), v28 == 2) ? (v30 = v29 == 2418) : (v30 = 0), !v30))
  {
    if (v28 != 1)
      goto LABEL_37;
  }
  v31 = ((v16 + 15) >> 4) * ((v15 + 15) >> 4);
  if (v31 <= 3600)
  {
    if (v26 >= 0.39)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (v31 > 0x1FE0)
  {
LABEL_36:
    *((double *)a3 + 198) = v27;
    goto LABEL_37;
  }
  if (v26 <= 0.5)
  {
LABEL_35:
    v27 = v26 + v26;
    goto LABEL_36;
  }
LABEL_37:
  if (*(_DWORD *)(v9 + 7) <= 5u)
    *((_BYTE *)a3 + 1538) = 1;
  if (AVE_Log_CheckLevel(0x1Cu, 8))
  {
    v32 = AVE_Log_CheckConsole(0x1Cu);
    v33 = AVE_GetCurrTime();
    v34 = AVE_Log_GetLevelStr(8);
    v35 = *(_DWORD *)(v9 + 7);
    v36 = *((unsigned __int8 *)a3 + 1538);
    if (v32)
    {
      printf("%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d\n", v33, 28, v34, v35, *(_DWORD *)(*(_QWORD *)(a4 + 144) + 72), v36);
      v37 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v37, 28, v38, *(_DWORD *)(v9 + 7), *(_DWORD *)(*(_QWORD *)(a4 + 144) + 72), *((unsigned __int8 *)a3 + 1538));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MCTF F %d iBand0Strength %d NoiseFrame %d", v33, 28, v34, v35, *(_DWORD *)(*(_QWORD *)(a4 + 144) + 72), v36);
    }
  }
  v39 = *(_DWORD *)(v8 + 508);
  if (!*((_BYTE *)a3 + 1538))
  {
    if ((v39 - 1) > 4)
    {
      *(_DWORD *)(v8 + 508) = 0;
      goto LABEL_47;
    }
    *((_BYTE *)a3 + 1538) = 1;
  }
  *(_DWORD *)(v8 + 508) = v39 + 1;
LABEL_47:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)&v40 = -1;
  *((_QWORD *)&v40 + 1) = -1;
  *(_OWORD *)(a3 + 58) = v40;
  *((_WORD *)a3 + 100) = 0;
  *((_BYTE *)a3 + 1576) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 2397) = 0;
  *((_BYTE *)a3 + 212) = 0;
  a3[54] = -1;
  *((_QWORD *)a3 + 28) = 0;
  *(_QWORD *)(a3 + 51) = 0xFFFFFFF3FFFFFFFFLL;
  *(_OWORD *)(a3 + 62) = v40;
  *((_QWORD *)a3 + 87) = 0;
  *((_BYTE *)a3 + 732) = 0;
  a3[387] = -1;
  a3[176] = -1;
  *(_OWORD *)(a3 + 389) = v40;
  if (*(_DWORD *)(v10 + 388) == 2 && !*(_QWORD *)(v9 + 147))
  {
    Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("ReadFirstPassStats"));
    if (Value)
      *((_QWORD *)a3 + 2397) = CFDataGetBytePtr(Value);
  }
  if (theDict)
  {
    if (AVE_Log_CheckLevel(0x1Du, 6))
    {
      v42 = AVE_Log_CheckConsole(0x1Du);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(6);
      v45 = *(_DWORD *)(v9 + 7);
      if (v42)
      {
        printf("%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d\n", v43, 29, v44, v45);
        v46 = AVE_GetCurrTime();
        v312 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v46, 29, v312, *(_DWORD *)(v9 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: frameProperties is NOT NULL -> start parsing - Buffer F %d", v43, 29, v44, v45);
      }
    }
    v47 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5B8]);
    if (v47 && CFEqual(v47, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
    {
      if (*(_DWORD *)(v10 + 372))
        v48 = 3;
      else
        v48 = (*(_BYTE *)(a1 + 2024) & 1) != 0 ? 1 : 2;
      *a3 = v48;
      *((_QWORD *)a3 + 2) |= 0x100uLL;
      if (AVE_Log_CheckLevel(0x1Du, 6))
      {
        v49 = AVE_Log_CheckConsole(0x1Du);
        v50 = AVE_GetCurrTime();
        v51 = AVE_Log_GetLevelStr(6);
        v52 = *((_QWORD *)a3 + 2);
        if (v49)
        {
          printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx\n", v50, 29, v51, *a3, v52);
          v53 = AVE_GetCurrTime();
          v54 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v53, 29, v54, *a3, *((_QWORD *)a3 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceKeyFrame = %d %llx", v50, 29, v51, *a3, v52);
        }
      }
    }
    v55 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5A8]);
    if (v55)
    {
      v56 = v55;
      TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v56))
      {
        *((_BYTE *)a3 + 5) = 1;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v58 = AVE_Log_CheckConsole(0x1Du);
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(6);
          if (v58)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices\n", v59, 29, v60);
            v61 = AVE_GetCurrTime();
            v313 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v61, 29, v313);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FirstMbInRecvSlices", v59, 29, v60);
          }
        }
      }
    }
    v62 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5C8]);
    if (v62)
    {
      if (CFEqual(v62, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
      {
        *((_BYTE *)a3 + 5) = 1;
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v63 = AVE_Log_CheckConsole(0x1Du);
          v64 = AVE_GetCurrTime();
          v65 = AVE_Log_GetLevelStr(6);
          v66 = *((unsigned __int8 *)a3 + 5);
          if (v63)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d\n", v64, 29, v65, v66);
            v67 = AVE_GetCurrTime();
            v314 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v67, 29, v314, *((unsigned __int8 *)a3 + 5));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_ForceRefresh = %d", v64, 29, v65, v66);
          }
        }
      }
    }
    v343 = a4;
    v68 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5E0]);
    if (v68)
    {
      v69 = v68;
      v70 = CFNumberGetTypeID();
      if (v70 == CFGetTypeID(v69))
      {
        v71 = a3 + 7;
        CFNumberGetValue(v69, kCFNumberSInt32Type, a3 + 7);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v72 = AVE_Log_CheckConsole(0x1Du);
          v73 = AVE_GetCurrTime();
          v74 = AVE_Log_GetLevelStr(6);
          v75 = *v71;
          if (v72)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d\n", v73, 29, v74, v75);
            v76 = AVE_GetCurrTime();
            v315 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v76, 29, v315, *v71);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_NumBitsInTransmissionBuffer = %d", v73, 29, v74, v75);
          }
        }
      }
    }
    v77 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED590]);
    if (v77)
    {
      v78 = v77;
      v79 = CFNumberGetTypeID();
      if (v79 == CFGetTypeID(v78))
      {
        v80 = a3 + 8;
        CFNumberGetValue(v78, kCFNumberSInt32Type, a3 + 8);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v81 = AVE_Log_CheckConsole(0x1Du);
          v82 = AVE_GetCurrTime();
          v83 = AVE_Log_GetLevelStr(6);
          v84 = *v80;
          if (v81)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d\n", v82, 29, v83, v84);
            v85 = AVE_GetCurrTime();
            v316 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v85, 29, v316, *v80);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FECNumBitsAdded = %d", v82, 29, v83, v84);
          }
        }
      }
    }
    v86 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5F0]);
    if (v86)
    {
      v87 = v86;
      v88 = CFNumberGetTypeID();
      if (v88 == CFGetTypeID(v87))
      {
        v89 = a3 + 9;
        CFNumberGetValue(v87, kCFNumberSInt32Type, a3 + 9);
        if (AVE_Log_CheckLevel(0x1Du, 6))
        {
          v90 = AVE_Log_CheckConsole(0x1Du);
          v91 = AVE_GetCurrTime();
          v92 = AVE_Log_GetLevelStr(6);
          v93 = *v89;
          if (v90)
          {
            printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d\n", v91, 29, v92, v93);
            v94 = AVE_GetCurrTime();
            v317 = AVE_Log_GetLevelStr(6);
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v94, 29, v317, *v89);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PacketHeaderBitsAdded = %d", v91, 29, v92, v93);
          }
        }
      }
    }
    v341 = v9;
    v340 = a1;
    v342 = a3 + 389;
    v95 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4A0]);
    if (!v95)
      goto LABEL_113;
    v96 = v95;
    v97 = CFArrayGetTypeID();
    if (v97 != CFGetTypeID(v96))
      goto LABEL_113;
    a3[12] = CFArrayGetCount((CFArrayRef)v96);
    if (AVE_Log_CheckLevel(0x1Du, 6))
    {
      v98 = AVE_Log_CheckConsole(0x1Du);
      v99 = AVE_GetCurrTime();
      v100 = AVE_Log_GetLevelStr(6);
      v101 = a3[12];
      if (v98)
      {
        printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d\n", v99, 29, v100, v101);
        v102 = AVE_GetCurrTime();
        v318 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v102, 29, v318, a3[12]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_AcknowledgedTokens, count = %d", v99, 29, v100, v101);
      }
    }
    v103 = a3[12];
    if (v103 < 0x11)
    {
      if (!v103)
      {
LABEL_113:
        v113 = theDict;
        v114 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED630]);
        v115 = v343;
        if (v114)
        {
          v116 = a3 + 29;
          CFNumberGetValue(v114, kCFNumberSInt32Type, a3 + 29);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v117 = AVE_Log_CheckConsole(0x1Du);
            v118 = AVE_GetCurrTime();
            v119 = AVE_Log_GetLevelStr(6);
            v120 = *v116;
            if (v117)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d\n", v118, 29, v119, v120);
              v121 = AVE_GetCurrTime();
              v319 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v121, 29, v319, *v116);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RoundTripDelay = %d", v118, 29, v119, v120);
            }
            v115 = v343;
          }
        }
        v122 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5F8]);
        if (v122)
        {
          v123 = a3 + 31;
          CFNumberGetValue(v122, kCFNumberSInt32Type, a3 + 31);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v124 = AVE_Log_CheckConsole(0x1Du);
            v125 = AVE_GetCurrTime();
            v126 = AVE_Log_GetLevelStr(6);
            v127 = *v123;
            if (v124)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d\n", v125, 29, v126, v127);
              v128 = AVE_GetCurrTime();
              v320 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v128, 29, v320, *v123);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_PadFrameToMinimumSize = %d", v125, 29, v126, v127);
            }
            v115 = v343;
          }
        }
        v129 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED620]);
        if (v129)
        {
          if (CFEqual(v129, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            *((_BYTE *)a3 + 6) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v130 = AVE_Log_CheckConsole(0x1Du);
              v131 = AVE_GetCurrTime();
              v132 = AVE_Log_GetLevelStr(6);
              v133 = *((unsigned __int8 *)a3 + 6);
              if (v130)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d\n", v131, 29, v132, v133);
                v134 = AVE_GetCurrTime();
                v321 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v134, 29, v321, *((unsigned __int8 *)a3 + 6));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_RepeatedFrame = %d", v131, 29, v132, v133);
              }
            }
          }
        }
        v135 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED660]);
        if (v135)
          *((_QWORD *)a3 + 24) = CFDataGetBytePtr(v135);
        v136 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED668]);
        if (v136)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v136, kCFNumberSInt32Type, &valuePtr);
          v137 = (unsigned __int16)valuePtr;
          a3[10] = WORD1(valuePtr);
          a3[11] = v137;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v138 = AVE_Log_CheckConsole(0x1Du);
            v139 = AVE_GetCurrTime();
            v140 = AVE_Log_GetLevelStr(6);
            v141 = a3[11];
            if (v138)
            {
              printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d\n", v139, 29, v140, a3[10], v141);
              v142 = AVE_GetCurrTime();
              v143 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v142, 29, v143, a3[10], a3[11]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_VRAUsedDimension = %d x %d", v139, 29, v140, a3[10], v141);
            }
          }
        }
        v144 = CFDictionaryGetValue(theDict, CFSTR("AttachDPB"));
        if (v144 && CFEqual(v144, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        {
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v145 = AVE_Log_CheckConsole(0x1Du);
            v146 = AVE_GetCurrTime();
            v147 = AVE_Log_GetLevelStr(6);
            v148 = *(_DWORD *)(v341 + 7);
            if (v145)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)\n", v146, 29, v147, v148);
              v149 = AVE_GetCurrTime();
              v322 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v149, 29, v322, *(_DWORD *)(v341 + 7));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_AttachDPB found (%d)", v146, 29, v147, v148);
            }
          }
          *((_BYTE *)a3 + 200) = 1;
        }
        v150 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED648]);
        if (v150)
        {
          if (*(_DWORD *)(v341 + 7))
          {
            v151 = v150;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v152 = AVE_Log_CheckConsole(0x1Du);
              v153 = AVE_GetCurrTime();
              v154 = AVE_Log_GetLevelStr(6);
              v155 = *(_DWORD *)(v341 + 7);
              if (v152)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)\n", v153, 29, v154, v155);
                v156 = AVE_GetCurrTime();
                v323 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v156, 29, v323, *(_DWORD *)(v341 + 7));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SetDPB found (%d)", v153, 29, v154, v155);
              }
              v115 = v343;
            }
            *((_BYTE *)a3 + 201) = 1;
            *(_QWORD *)(v115 + 72) = v151;
          }
          else
          {
            if (AVE_Log_CheckLevel(0x16u, 5))
            {
              v157 = AVE_Log_CheckConsole(0x16u);
              v158 = AVE_GetCurrTime();
              v159 = AVE_Log_GetLevelStr(5);
              if (v157)
              {
                printf("%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true\n", v158, 22, v159);
                v160 = AVE_GetCurrTime();
                v324 = AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v160, 22, v324);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: frameNumber = 0 and updateDPB = true", v158, 22, v159);
              }
            }
            if (AVE_Log_CheckLevel(0x16u, 5))
            {
              v161 = AVE_Log_CheckConsole(0x16u);
              v162 = AVE_GetCurrTime();
              v163 = AVE_Log_GetLevelStr(5);
              if (v161)
              {
                printf("%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag\n", v162, 22, v163);
                v164 = AVE_GetCurrTime();
                v325 = AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v164, 22, v325);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: you need to encode at least one picture to prime AVE before using this feature. -> will disregard updateDPB flag", v162, 22, v163);
              }
            }
          }
        }
        v165 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED588]);
        if (v165 && CFEqual(v165, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          *((_QWORD *)a3 + 2) |= 0x8000uLL;
        v166 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4D0]);
        if (v166)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v166, kCFNumberSInt32Type, &valuePtr);
          if ((_DWORD)valuePtr)
            *((_QWORD *)a3 + 2) |= 0x10000uLL;
        }
        v167 = CFDictionaryGetValue(theDict, CFSTR("MarkCurrentFrameAsLTR"));
        if (v167)
        {
          if (CFEqual(v167, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            *((_BYTE *)a3 + 212) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v168 = AVE_Log_CheckConsole(0x1Du);
              v169 = AVE_GetCurrTime();
              v170 = AVE_Log_GetLevelStr(6);
              if (v168)
              {
                printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE\n", v169, 29, v170);
                v171 = AVE_GetCurrTime();
                v326 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v171, 29, v326);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_MarkCurrentFrameAsLTR = TRUE", v169, 29, v170);
              }
            }
          }
        }
        v172 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RVRADimension"));
        if (v172)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v172, kCFNumberSInt32Type, &valuePtr);
          v173 = (unsigned __int16)valuePtr;
          a3[56] = WORD1(valuePtr);
          a3[57] = v173;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v174 = AVE_Log_CheckConsole(0x1Du);
            v175 = AVE_GetCurrTime();
            v176 = AVE_Log_GetLevelStr(6);
            v177 = a3[57];
            if (v174)
            {
              printf("%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d\n", v175, 29, v176, a3[56], v177);
              v178 = AVE_GetCurrTime();
              v179 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v178, 29, v179, a3[56], a3[57]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncoderFrameOptionKey_RVRADimension = %d x %d", v175, 29, v176, a3[56], v177);
            }
          }
        }
        v180 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("FrameNumForLTRToReplace"));
        if (v180)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v180, kCFNumberSInt32Type, &valuePtr);
          a3[54] = valuePtr;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v181 = AVE_Log_CheckConsole(0x1Du);
            v182 = AVE_GetCurrTime();
            v183 = AVE_Log_GetLevelStr(6);
            v184 = a3[54];
            if (v181)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)\n", v182, 29, v183, v184);
              v185 = AVE_GetCurrTime();
              v327 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v185, 29, v327, a3[54]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_FrameNumForLTRToReplace found (%d)", v182, 29, v183, v184);
            }
          }
        }
        v186 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UserFrameType"));
        if (v186)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v186, kCFNumberSInt32Type, &valuePtr);
          a3[51] = valuePtr;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v187 = AVE_Log_CheckConsole(0x1Du);
            v188 = AVE_GetCurrTime();
            v189 = AVE_Log_GetLevelStr(6);
            v190 = a3[51];
            if (v187)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)\n", v188, 29, v189, v190);
              v191 = AVE_GetCurrTime();
              v328 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v191, 29, v328, a3[51]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_UserFrameType found (%d)", v188, 29, v189, v190);
            }
          }
        }
        v192 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED618]);
        if (v192)
        {
          v193 = v192;
          v194 = CFArrayGetTypeID();
          if (v194 == CFGetTypeID(v193))
          {
            LODWORD(valuePtr) = 4;
            AVE_VCP_Ref_RetrieveArray(v193, a3 + 58, (int *)&valuePtr);
            *((_BYTE *)a3 + 220) = valuePtr;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v195 = AVE_Log_CheckConsole(0x1Du);
              v196 = AVE_GetCurrTime();
              v197 = AVE_Log_GetLevelStr(6);
              v198 = *((unsigned __int8 *)a3 + 220);
              if (v195)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d\n", v196, 29, v197, v198);
                v199 = AVE_GetCurrTime();
                v329 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v199, 29, v329, *((unsigned __int8 *)a3 + 220));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncoderFrameOptionKey_ReferenceL0, count = %d", v196, 29, v197, v198);
              }
            }
            if (*((_BYTE *)a3 + 220))
            {
              v200 = 0;
              v201 = a3 + 58;
              do
              {
                if ((*v201 & 0x80000000) == 0 && AVE_Log_CheckLevel(0x1Eu, 6))
                {
                  v202 = AVE_Log_CheckConsole(0x1Eu);
                  v203 = AVE_GetCurrTime();
                  v204 = AVE_Log_GetLevelStr(6);
                  v205 = *v201;
                  if (v202)
                  {
                    printf("%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d\n", v203, 30, v204, v200, v205);
                    v206 = AVE_GetCurrTime();
                    v207 = AVE_Log_GetLevelStr(6);
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v206, 30, v207, v200, *v201);
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: AVE Fig: userRefInfo_[%d].userRefFrameNumDriver = %d", v203, 30, v204, v200, v205);
                  }
                }
                ++v200;
                v201 += 2;
              }
              while (v200 < *((unsigned __int8 *)a3 + 220));
            }
            v113 = theDict;
          }
        }
        v208 = (const __CFNumber *)CFDictionaryGetValue(v113, CFSTR("SliceTcOffsetDiv2"));
        if (v208)
        {
          v209 = a3 + 175;
          CFNumberGetValue(v208, kCFNumberSInt32Type, a3 + 175);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v210 = AVE_Log_CheckConsole(0x1Du);
            v211 = AVE_GetCurrTime();
            v212 = AVE_Log_GetLevelStr(6);
            v213 = *v209;
            if (v210)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)\n", v211, 29, v212, v213);
              v214 = AVE_GetCurrTime();
              v330 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v214, 29, v330, *v209);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceTcOffsetDiv2 found (%d)", v211, 29, v212, v213);
            }
          }
        }
        v215 = (const __CFNumber *)CFDictionaryGetValue(v113, CFSTR("SliceBetaOffsetDiv2"));
        if (v215)
        {
          v216 = a3 + 174;
          CFNumberGetValue(v215, kCFNumberSInt32Type, a3 + 174);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v217 = AVE_Log_CheckConsole(0x1Du);
            v218 = AVE_GetCurrTime();
            v219 = AVE_Log_GetLevelStr(6);
            v220 = *v216;
            if (v217)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)\n", v218, 29, v219, v220);
              v221 = AVE_GetCurrTime();
              v331 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v221, 29, v331, *v216);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_SliceBetaOffsetDiv2 found (%d)", v218, 29, v219, v220);
            }
          }
        }
        if (*(_BYTE *)(v10 + 731)
          && a3[51] == 1
          && !AVE_WtPred_GetInfo(v113, *((unsigned __int8 *)a3 + 220), a3 + 66))
        {
          v345 = 0;
          valuePtr = 0;
          AVE_SNPrintf((char *)&valuePtr, 10, "%d %d", v222, v223, v224, v225, v226, *(_DWORD *)(v341 + 135));
          AVE_WtPred_PrintInfo(a3 + 66, 215, 6, (uint64_t)&valuePtr, 0, v227, v228, v229);
        }
        v230 = CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E0CED598]);
        if (v230)
        {
          if (CFEqual(v230, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            *((_BYTE *)a3 + 732) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v231 = AVE_Log_CheckConsole(0x1Du);
              v232 = AVE_GetCurrTime();
              v233 = AVE_Log_GetLevelStr(6);
              if (v231)
              {
                printf("%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE\n", v232, 29, v233);
                v234 = AVE_GetCurrTime();
                v332 = AVE_Log_GetLevelStr(6);
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v234, 29, v332);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: FIG: received kVTEncodeFrameOptionKey_FinalFrame = TRUE", v232, 29, v233);
              }
            }
          }
        }
        v235 = CFDictionaryGetValue(v113, CFSTR("ResetRCState"));
        if (v235)
        {
          v236 = CFEqual(v235, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
          *((_BYTE *)a3 + 8) = v236 != 0;
          if (v236)
          {
            v237 = *(_DWORD *)(v340 + 196);
            if (v237 == 1)
            {
              AVE_FPS::Reset(*(AVE_FPS **)(v341 + 203));
              *a3 = 2;
              if (AVE_Log_CheckLevel(0x1Du, 6))
              {
                v241 = AVE_Log_CheckConsole(0x1Du);
                v242 = AVE_GetCurrTime();
                v243 = AVE_Log_GetLevelStr(6);
                if (v241)
                {
                  printf("%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR\n", v242, 29, v243, *((unsigned __int8 *)a3 + 8));
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(6);
                }
                syslog(3, "%lld %d AVE %s: FIG: received AVE_kVTEncodeFrameOptionKey_ResetRCState = %d, set forceKeyFrame to IDR");
              }
            }
            else if (v237 == 20)
            {
              *((_BYTE *)a3 + 8) = 0;
              if (AVE_Log_CheckLevel(0x1Du, 5))
              {
                v238 = AVE_Log_CheckConsole(0x1Du);
                v239 = AVE_GetCurrTime();
                v240 = AVE_Log_GetLevelStr(5);
                if (v238)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.\n", v239, 29, v240);
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state for Direct RC.");
              }
            }
            else
            {
              *((_BYTE *)a3 + 8) = 0;
              if (AVE_Log_CheckLevel(0x1Du, 5))
              {
                v244 = AVE_Log_CheckConsole(0x1Du);
                v245 = AVE_GetCurrTime();
                v246 = AVE_Log_GetLevelStr(5);
                if (v244)
                {
                  printf("%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.\n", v245, 29, v246);
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(5);
                }
                syslog(3, "%lld %d AVE %s: AVE FIG WARNING: Cannot reset rc state if RC is NOT On.");
              }
            }
          }
        }
        v247 = a3 + 52;
        v248 = (const __CFDictionary *)CFDictionaryGetValue(v113, CFSTR("RPSInfo"));
        if (v248)
        {
          v249 = v248;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v250 = AVE_Log_CheckConsole(0x1Du);
            v251 = AVE_GetCurrTime();
            v252 = AVE_Log_GetLevelStr(6);
            if (v250)
            {
              printf("%lld %d AVE %s: FIG: AVE_kRPSInfo found \n", v251, 29, v252);
              v253 = AVE_GetCurrTime();
              v333 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v253, 29, v333);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kRPSInfo found ", v251, 29, v252);
            }
          }
          v254 = a3[51];
          if (v254 <= 7 && ((1 << v254) & 0x87) != 0)
            AVE_HEVC_Slice_ST_RPS_Retrieve(v249, (BOOL *)a3 + 736);
        }
        v255 = (const void *)*MEMORY[0x1E0CED650];
        v256 = (const __CFNumber *)CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E0CED650]);
        if (v256 && (v257 = v256, v258 = CFNumberGetTypeID(), v258 == CFGetTypeID(v257)))
        {
          CFNumberGetValue(v257, kCFNumberSInt32Type, v247);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v259 = AVE_Log_CheckConsole(0x1Du);
            v260 = AVE_GetCurrTime();
            v261 = AVE_Log_GetLevelStr(6);
            v262 = *v247;
            if (v259)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)\n", v260, 29, v261, v262);
              v263 = AVE_GetCurrTime();
              v334 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v263, 29, v334, *v247);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP found (%d)", v260, 29, v261, v262);
            }
          }
        }
        else
        {
          v264 = (const __CFArray *)CFDictionaryGetValue(v113, v255);
          if (v264)
          {
            v265 = v264;
            v266 = CFArrayGetTypeID();
            if (v266 == CFGetTypeID(v265))
            {
              Count = CFArrayGetCount(v265);
              LODWORD(valuePtr) = 0;
              if (Count >= 1)
              {
                v268 = Count;
                for (i = 0; i < v268; i = (i + 1))
                {
                  AVE_CFArray_GetSInt32(v265, i, (int *)&valuePtr);
                  if (!(_DWORD)i)
                    *v247 = valuePtr;
                  if (AVE_Log_CheckLevel(0x1Du, 6))
                  {
                    v270 = AVE_Log_CheckConsole(0x1Du);
                    v271 = AVE_GetCurrTime();
                    v272 = AVE_Log_GetLevelStr(6);
                    if (v270)
                    {
                      printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)\n", v271, 29, v272, i, valuePtr);
                      v273 = AVE_GetCurrTime();
                      v274 = AVE_Log_GetLevelStr(6);
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v273, 29, v274, i, valuePtr);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_SliceQP[%d] found (%d)", v271, 29, v272, i, valuePtr);
                    }
                  }
                }
              }
              v113 = theDict;
            }
          }
        }
        v275 = (const __CFNumber *)CFDictionaryGetValue(v113, CFSTR("POCLsb"));
        if (v275)
        {
          v276 = a3 + 387;
          CFNumberGetValue(v275, kCFNumberSInt32Type, a3 + 387);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v277 = AVE_Log_CheckConsole(0x1Du);
            v278 = AVE_GetCurrTime();
            v279 = AVE_Log_GetLevelStr(6);
            v280 = *v276;
            if (v277)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)\n", v278, 29, v279, v280);
              v281 = AVE_GetCurrTime();
              v335 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v281, 29, v335, *v276);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_POCLsb found (%d)", v278, 29, v279, v280);
            }
          }
        }
        v282 = (const __CFNumber *)CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E0CED600]);
        if (v282)
        {
          v283 = a3 + 176;
          CFNumberGetValue(v282, kCFNumberSInt32Type, a3 + 176);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v284 = AVE_Log_CheckConsole(0x1Du);
            v285 = AVE_GetCurrTime();
            v286 = AVE_Log_GetLevelStr(6);
            v287 = *v283;
            if (v284)
            {
              printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)\n", v285, 29, v286, v287);
              v288 = AVE_GetCurrTime();
              v336 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v288, 29, v336, *v283);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_PicParameterSetId found (%d)", v285, 29, v286, v287);
            }
          }
        }
        v289 = CFDictionaryGetValue(v113, CFSTR("UserSaoMap"));
        if (v289)
        {
          *((_BYTE *)a3 + 1529) = CFEqual(v289, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v290 = AVE_Log_CheckConsole(0x1Du);
            v291 = AVE_GetCurrTime();
            v292 = AVE_Log_GetLevelStr(6);
            v293 = *((unsigned __int8 *)a3 + 1529);
            if (v290)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)\n", v291, 29, v292, v293);
              v294 = AVE_GetCurrTime();
              v337 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v294, 29, v337, *((unsigned __int8 *)a3 + 1529));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncodeFrameOptionKey_UserSaoMap found (%d)", v291, 29, v292, v293);
            }
          }
        }
        v295 = (const __CFNumber *)CFDictionaryGetValue(v113, CFSTR("NaluType"));
        if (v295)
        {
          CFNumberGetValue(v295, kCFNumberSInt32Type, v342);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v296 = AVE_Log_CheckConsole(0x1Du);
            v297 = AVE_GetCurrTime();
            v298 = AVE_Log_GetLevelStr(6);
            v299 = *v342;
            if (v296)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)\n", v297, 29, v298, v299);
              v300 = AVE_GetCurrTime();
              v338 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v300, 29, v338, *v342);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_NaluType found (%d)", v297, 29, v298, v299);
            }
          }
        }
        v301 = (const __CFNumber *)CFDictionaryGetValue(v113, CFSTR("TemporalID"));
        if (v301)
        {
          v302 = a3 + 390;
          CFNumberGetValue(v301, kCFNumberSInt32Type, a3 + 390);
          if (AVE_Log_CheckLevel(0x1Du, 6))
          {
            v303 = AVE_Log_CheckConsole(0x1Du);
            v304 = AVE_GetCurrTime();
            v305 = AVE_Log_GetLevelStr(6);
            v306 = *v302;
            if (v303)
            {
              printf("%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)\n", v304, 29, v305, v306);
              v307 = AVE_GetCurrTime();
              v339 = AVE_Log_GetLevelStr(6);
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v307, 29, v339, *v302);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: FIG: AVE_kVTEncoderFrameOptionKey_TemporalID found (%d)", v304, 29, v305, v306);
            }
          }
        }
        v308 = CFDictionaryGetValue(v113, (const void *)*MEMORY[0x1E0CED628]);
        if (v308)
        {
          if (CFEqual(v308, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            *((_BYTE *)a3 + 1576) = 1;
            if (AVE_Log_CheckLevel(0x1Du, 6))
            {
              v309 = AVE_Log_CheckConsole(0x1Du);
              v310 = AVE_GetCurrTime();
              v311 = AVE_Log_GetLevelStr(6);
              if (v309)
              {
                printf("%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)\n", v310, 29, v311, *((unsigned __int8 *)a3 + 1576));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(6);
              }
              syslog(3, "%lld %d AVE %s: FIG: kVTEncodeFrameOptionKey_RequestNonReferenceFrame found (%d)");
            }
          }
        }
        return;
      }
    }
    else
    {
      a3[12] = 16;
    }
    v104 = 0;
    v105 = a3 + 13;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v96, v104);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, v105);
      if (AVE_Log_CheckLevel(0x1Du, 6))
      {
        v107 = AVE_Log_CheckConsole(0x1Du);
        v108 = AVE_GetCurrTime();
        v109 = AVE_Log_GetLevelStr(6);
        v110 = *v105;
        if (v107)
        {
          printf("%lld %d AVE %s: FIG: index %d: token = %d\n", v108, 29, v109, v104, v110);
          v111 = AVE_GetCurrTime();
          v112 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v111, 29, v112, v104, *v105);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: FIG: index %d: token = %d", v108, 29, v109, v104, v110);
        }
      }
      ++v104;
      ++v105;
    }
    while (v104 < a3[12]);
    goto LABEL_113;
  }
}

void AVE_UpdateSettingsBasedOnSNR(uint64_t a1, uint64_t a2, double a3)
{
  _DWORD *v6;
  int *v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  double Rt;
  double v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  double v16;
  double v17;
  unsigned int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  float v21;
  float v22;
  double v23;
  BOOL v24;
  _BOOL4 v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  _BOOL4 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v50;
  __uint64_t v51;
  const char *v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  double v56;
  double v57;

  v6 = AVE_DW_Get();
  if (*(_DWORD *)(a1 + 292))
    return;
  v7 = (int *)(a1 + 183412);
  if (*(int *)(a1 + 183532) >= 3)
  {
    v8 = v6[351];
    if (*(_DWORD *)(a1 + 18804) == 2)
    {
      if (*(_BYTE *)(a1 + 18858))
        v9 = 0;
      else
        v9 = v8 <= 0;
      if (!v9)
      {
LABEL_11:
        v10 = *(_DWORD *)(a2 + 140);
        if (!*(_DWORD *)(a1 + 183648))
          *(_DWORD *)(a1 + 183648) = v10;
        Rt = AVE_FPS::GetRt(*(AVE_FPS **)(a1 + 183608));
        v12 = a3;
        if (*v7)
          v12 = (a3 + *(double *)(a1 + 183640) * 3.0) * 0.25;
        *(double *)(a1 + 183640) = v12;
        if (v8 >= 1)
        {
          v12 = (double)v8;
          *(double *)(a1 + 183640) = (double)v8;
          if (v8 <= 0x19)
            *(_BYTE *)(a2 + 1535) = 1;
        }
        v13 = *(_DWORD *)(a1 + 1880);
        v14 = *(_DWORD *)(a1 + 1884);
        v15 = *(_DWORD *)(a1 + 228);
        v16 = (double)v15;
        if (v15 >= 1)
          v17 = (double)v15;
        else
          v17 = Rt;
        v18 = v14 * v13;
        v19 = (v14 * v13) >> 12 > 0x7E8;
        v20 = v17 > 120.0 || (v14 * v13) >> 12 > 0x7E8;
        if (v17 <= 90.0)
          v19 = 0;
        v21 = (float)v13;
        v22 = (float)v14;
        if (v18 > 0x8CA00)
        {
          v27 = (float)(v21 * v22);
          if (v18 > 0x15F900)
          {
            if (v18 > 0x473100)
            {
              v23 = v27 / 8294400.0;
              if (v17 <= 27.0)
              {
                v28 = 24.0;
                v29 = 18000000.0;
                goto LABEL_53;
              }
              if (v17 <= 45.0)
              {
                v28 = 30.0;
                v29 = 22500000.0;
                goto LABEL_53;
              }
              v24 = v17 > 90.0;
              v29 = dbl_1B56255D0[v17 > 90.0];
              v28 = 60.0;
              v30 = 120.0;
LABEL_40:
              if (v24)
                v28 = v30;
LABEL_53:
              v31 = (v17 * v29 / v28);
              if (*(_DWORD *)(a1 + 18760) == 1)
              {
                v32 = *(_DWORD *)(a1 + 103100) == 2;
                v33 = 1.1;
                if (*(_DWORD *)(a1 + 103100) != 2)
                  v33 = 1.0;
              }
              else
              {
                v32 = 0;
                v33 = 1.0;
              }
              v34 = v23 * (double)v31 * v33;
              if (v20)
              {
                if (v19)
                {
                  if (v12 <= 8.0)
                  {
                    v43 = 125.0;
                  }
                  else
                  {
                    if (v12 > 18.0)
                    {
                      if (v12 <= 22.0)
                      {
                        v35 = v34 * 125.0;
LABEL_112:
                        v57 = v35 / 100.0;
                        if (v57 <= (double)v10)
                          v57 = (double)v10;
                        v39 = v57;
                        v38 = 1;
                        goto LABEL_87;
                      }
                      goto LABEL_72;
                    }
                    v43 = 150.0;
                  }
                  v44 = v34 * v43;
                }
                else
                {
                  if (v12 > 18.0)
                  {
                    if (v12 <= 23.0)
                    {
                      v56 = 125.0;
                      if (v32)
                        v56 = 150.0;
                      v35 = v56 * v34;
                      goto LABEL_112;
                    }
LABEL_72:
                    v38 = 0;
                    v39 = v10;
LABEL_87:
                    if (v39 >= 2 * v10)
                      v39 = 2 * v10;
                    *(_DWORD *)(a2 + 140) = v39;
                    *(_DWORD *)(a2 + 144) = v38;
                    *(_DWORD *)(a1 + 183648) = v39;
                    if (AVE_Log_CheckLevel(0x30u, 6))
                    {
                      v47 = AVE_Log_CheckConsole(0x30u);
                      CurrTime = AVE_GetCurrTime();
                      LevelStr = AVE_Log_GetLevelStr(6);
                      if (v47)
                      {
                        printf("%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d\n", CurrTime, 48, LevelStr, *v7, a3, *(double *)(a1 + 183640), Rt, v10, *(_DWORD *)(a2 + 140));
                        AVE_GetCurrTime();
                        AVE_Log_GetLevelStr(6);
                      }
                      syslog(3, "%lld %d AVE %s: FIG: F %d SNR %f filteredSNR %f instantaneousFPS %lf targetBitrate %d NewtargetBitrate %d");
                    }
                    goto LABEL_94;
                  }
                  v45 = 175.0;
                  if (v32)
                    v45 = 200.0;
                  v44 = v45 * v34;
                }
              }
              else
              {
                LODWORD(v16) = *(_DWORD *)(a1 + 18440);
                v36 = (double)*(unint64_t *)&v16;
                if (v12 <= 20.0)
                {
                  v40 = !v32;
                  v41 = 175.0;
                  v42 = 200.0;
                }
                else
                {
                  if (v12 > 23.0)
                  {
                    if (v12 <= 25.0)
                    {
                      v37 = 125.0;
                      if (v32)
                        v37 = 150.0;
                      v35 = v37 * (v34 * v36);
                      goto LABEL_112;
                    }
                    goto LABEL_72;
                  }
                  v40 = !v32;
                  v41 = 150.0;
                  v42 = 175.0;
                }
                if (!v40)
                  v41 = v42;
                v44 = v41 * (v34 * v36);
              }
              v46 = v44 / 100.0;
              if (v46 <= (double)v10)
                v46 = (double)v10;
              v39 = v46;
              v38 = 2;
              goto LABEL_87;
            }
            v23 = v27 / 2073600.0;
            if (v17 <= 45.0)
            {
              v28 = 30.0;
              v29 = 7700000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              v28 = 60.0;
              v29 = 11700000.0;
              goto LABEL_53;
            }
            v24 = v17 > 180.0;
            v25 = v17 > 180.0;
            v26 = (double *)&unk_1B56255E0;
          }
          else
          {
            v23 = v27 / 921600.0;
            if (v17 <= 45.0)
            {
              v28 = 30.0;
              v29 = 4900000.0;
              goto LABEL_53;
            }
            if (v17 <= 90.0)
            {
              v28 = 60.0;
              v29 = 8600000.0;
              goto LABEL_53;
            }
            v24 = v17 > 180.0;
            v25 = v17 > 180.0;
            v26 = (double *)&unk_1B56255F0;
          }
        }
        else
        {
          v23 = (float)(v21 * v22) / 307200.0;
          if (v17 <= 45.0)
          {
            v28 = 30.0;
            v29 = 2500000.0;
            goto LABEL_53;
          }
          if (v17 <= 90.0)
          {
            v28 = 60.0;
            v29 = 4400000.0;
            goto LABEL_53;
          }
          v24 = v17 > 180.0;
          v25 = v17 > 180.0;
          v26 = (double *)&unk_1B5625600;
        }
        v29 = v26[v25];
        v28 = 120.0;
        v30 = 240.0;
        goto LABEL_40;
      }
    }
    else if (v8 >= 1)
    {
      goto LABEL_11;
    }
  }
LABEL_94:
  if (AVE_Log_CheckLevel(0x30u, 6))
  {
    v50 = AVE_Log_CheckConsole(0x30u);
    v51 = AVE_GetCurrTime();
    v52 = AVE_Log_GetLevelStr(6);
    v53 = *v7;
    if (v50)
    {
      printf("%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f\n", v51, 48, v52, v53, 25.0, a3);
      v54 = AVE_GetCurrTime();
      v55 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v54, 48, v55, *v7, 25.0, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: F %d lowLightSNRThreashold %f SNR %f", v51, 48, v52, v53, 25.0, a3);
    }
  }
  if (*(_DWORD *)(a1 + 264) && *(_DWORD *)(a1 + 18804) == 2 && *(_BYTE *)(a1 + 18851))
  {
    *(_DWORD *)(a2 + 704) = a3 <= 25.0;
    *(_DWORD *)(a2 + 1544) = *(_DWORD *)(a1 + 4 * (a3 <= 25.0) + 18808);
  }
  if ((*(_DWORD *)(a1 + 18804) == 2 && *(_BYTE *)(a1 + 18856) || *(_BYTE *)(a1 + 18857))
    && (a3 <= 25.0 || *(_BYTE *)(a1 + 18857)))
  {
    *(_BYTE *)(a2 + 1535) = 1;
  }
}

uint64_t AVE_MultipassDataFetch(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  __uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  unsigned int v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  const char *v25;
  int v26;
  const char *v27;
  int v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  int v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = (unsigned int *)(a1 + 183412);
  if (!*(_DWORD *)(a1 + 183412))
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 183572) = *a2;
    *(_QWORD *)(a1 + 183580) = a2[1];
    *(_QWORD *)(a1 + 183588) = v8;
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v9 = AVE_Log_CheckConsole(0xD8u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
      v12 = *v2;
      if (v9)
      {
        printf("%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d\n", CurrTime, 216, LevelStr, v12);
        v13 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", v13, 216, v35, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: AVE_MultipassDataFetch : Frame %d", CurrTime, 216, LevelStr, v12);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v19 = AVE_Log_CheckConsole(0xD8u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(6);
      if (v19)
      {
        printf("%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v20, 216, v21, *a2, *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3), a2[2]);
        v20 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v20);
    }
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v22 = AVE_Log_CheckConsole(3u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d\n", v23, 3, v24, "AVE_MultipassDataFetch", 11425, "err == noErr", *v2, *a2, *((_DWORD *)a2 + 2));
        v23 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        v40 = *a2;
        v41 = *((unsigned int *)a2 + 2);
        v38 = "err == noErr";
        v39 = *v2;
        v37 = 11425;
      }
      else
      {
        v40 = *a2;
        v41 = *((unsigned int *)a2 + 2);
        v39 = *v2;
        v37 = 11425;
        v38 = "err == noErr";
      }
      v36 = v24;
      v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed. F %d PTS %lld ts %d";
    }
    else
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v26 = AVE_Log_CheckConsole(3u);
      v23 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d\n", v23, 3, v27, "AVE_MultipassDataFetch", 11426, "data != __null", *v2, *a2, *((_DWORD *)a2 + 2));
        v23 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        v40 = *a2;
        v41 = *((unsigned int *)a2 + 2);
        v38 = "data != __null";
        v39 = *v2;
        v37 = 11426;
      }
      else
      {
        v40 = *a2;
        v41 = *((unsigned int *)a2 + 2);
        v39 = *v2;
        v37 = 11426;
        v38 = "data != __null";
      }
      v36 = v27;
      v25 = "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp data == NULL. F %d PTS %lld ts %d";
    }
    syslog(3, v25, v23, 3, v36, "AVE_MultipassDataFetch", v37, v38, v39, v40, v41);
    return 4294954394;
  }
  if (VTMultiPassStorageGetTimeStamp())
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v3 = AVE_Log_CheckConsole(3u);
      v4 = AVE_GetCurrTime();
      v5 = AVE_Log_GetLevelStr(4);
      if (!v3)
      {
LABEL_20:
        syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.");
        return 4294954394;
      }
      v6 = 11480;
LABEL_6:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageGetTimeStamp failed.\n", v4, 3, v5, "AVE_MultipassDataFetch", v6, "err == noErr");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      goto LABEL_20;
    }
    return 4294954394;
  }
  if ((v2[43] & 0x1D) == 1)
  {
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v14 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        v17 = 11485;
LABEL_15:
        printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.\n", v15, 3, v16, "AVE_MultipassDataFetch", v17, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        goto LABEL_45;
      }
      goto LABEL_45;
    }
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v29 = AVE_Log_CheckConsole(3u);
    v30 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(4);
    if (v29)
    {
      v32 = 11486;
LABEL_50:
      printf("%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.\n", v30, 3, v31, "AVE_MultipassDataFetch", v32, "d != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      goto LABEL_54;
    }
    goto LABEL_54;
  }
  if (!VTMultiPassStorageGetTimeStamp())
  {
    if ((v2[43] & 0x1D) != 1)
      return 0;
    if (VTMultiPassStorageCopyDataAtTimeStamp())
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 4294954394;
      v28 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        v17 = 11510;
        goto LABEL_15;
      }
LABEL_45:
      syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp failed.");
      return 4294954394;
    }
    if (!AVE_Log_CheckLevel(3u, 4))
      return 4294954394;
    v34 = AVE_Log_CheckConsole(3u);
    v30 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(4);
    if (v34)
    {
      v32 = 11511;
      goto LABEL_50;
    }
LABEL_54:
    syslog(3, "%lld %d AVE %s: %s:%d %s | FIG: VTMultiPassStorageCopyDataAtTimeStamp d == NULL.");
    return 4294954394;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v18 = AVE_Log_CheckConsole(3u);
    v4 = AVE_GetCurrTime();
    v5 = AVE_Log_GetLevelStr(4);
    if (!v18)
      goto LABEL_20;
    v6 = 11505;
    goto LABEL_6;
  }
  return 4294954394;
}

void AVE_NewDefaultsBasedOnProfileUsageDefault(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;

  v2 = (int *)(a1 + 183400);
  v3 = a1 + 18484;
  v4 = *((_DWORD *)AVE_DW_Get() + 312);
  if (v4 <= 3)
  {
    *v2 = v4;
    if (v4 != 3)
      *(_BYTE *)(v3 + 363) = 0;
  }
  v5 = AVE_DW_Get();
  if ((v5[24] & 8) != 0)
    *(_BYTE *)(v3 + 363) = 1;
  if ((v5[32] & 8) != 0)
    *(_BYTE *)(v3 + 363) = 0;
  v6 = (_BYTE *)(a1 + 118378);
  if (*(_BYTE *)(a1 + 216))
  {
    v7 = *v2;
    if (*v2 < 0)
    {
      if (*(_BYTE *)(v3 + 363))
        v7 = 3;
      else
        v7 = 1;
    }
    *(_DWORD *)(a1 + 1944) = v7;
    if (*(_DWORD *)(a1 + 196) != 20)
      *(_BYTE *)(v3 + 200) = 1;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v8 = AVE_Log_CheckConsole(0x1Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
      if (v8)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)\n", CurrTime, 30, LevelStr, *(_DWORD *)(a1 + 1944), *v2);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering ON -> B will be = %d (FIGNumberOfBFrames %d)");
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1944) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    if (AVE_Log_CheckLevel(0x1Eu, 6))
    {
      v11 = AVE_Log_CheckConsole(0x1Eu);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(6);
      if (v11)
      {
        printf("%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF\n", v12, 30, v13);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(6);
      }
      syslog(3, "%lld %d AVE %s: FIG: FIGAllowFrameReordering OFF");
    }
  }
  *(_DWORD *)(a1 + 118372) = *(_DWORD *)(a1 + 1824) - 26;
  if (*(_BYTE *)(a1 + 1924))
  {
    *v6 = 1;
    *(_BYTE *)(a1 + 18013) = 0;
  }
  if (*(_DWORD *)(a1 + 196) == 3)
  {
    *(_BYTE *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(_BYTE *)(v3 + 268) = 0;
    if (!*(_BYTE *)(v3 + 365))
    {
      *(_BYTE *)(a1 + 244) = 0;
      *v6 = 0;
      *(_BYTE *)(a1 + 252) = 0;
      *(_BYTE *)(a1 + 246) = 0;
    }
    *(_WORD *)(a1 + 255) = 0;
    *(_BYTE *)(a1 + 257) = 0;
    *(_DWORD *)(a1 + 260) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
  }
  if (*(_BYTE *)(a1 + 118451))
  {
    *(_DWORD *)(a1 + 196) = 3;
    *(_BYTE *)(v3 + 200) = 1;
    *(_DWORD *)(a1 + 1920) = 0;
    *(_BYTE *)(v3 + 268) = 0;
    *(_BYTE *)(a1 + 244) = 0;
    *(_BYTE *)(a1 + 252) = 0;
    *(_BYTE *)(a1 + 246) = 0;
    *(_DWORD *)(a1 + 2024) &= ~4u;
    *v6 = 0;
    *(_QWORD *)(a1 + 1816) = 0;
    v14 = -6 * *(_DWORD *)(a1 + 103100);
    *(_DWORD *)(a1 + 1852) = v14;
    *(_DWORD *)(a1 + 1848) = v14;
    *(_DWORD *)(a1 + 1832) = v14;
    *(_DWORD *)(a1 + 1828) = v14;
    *(_DWORD *)(a1 + 1824) = v14;
    *(_QWORD *)(a1 + 1840) = *(_QWORD *)(a1 + 1848);
    *(_WORD *)(a1 + 255) = 0;
    *(_DWORD *)(a1 + 1768) = 0;
    *(_DWORD *)v3 = 0;
  }
}

uint64_t AVE_GetTileInfo(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v5;
  _DWORD *v8;
  unint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  uint64_t v47;
  __uint64_t v48;
  const char *v49;
  int32x2_t v50;
  int32x2_t v51;
  uint32x2_t v52;
  uint32x2_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  char v62;
  int v63;
  __uint64_t v64;
  const char *v65;
  int v66;
  __uint64_t v67;
  const char *v68;
  const char *v69;
  int v70;
  const char *v71;
  __uint64_t v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  int v76;
  __uint64_t v77;
  const char *v78;
  uint64_t result;
  int v80;
  uint32x2_t v81;
  uint32x2_t v82;
  uint32x2_t v83;
  uint32x2_t v84;
  int8x8_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  __uint64_t v91;
  int v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  const char *v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int *v109;
  _DWORD *v110;
  uint64_t v111;
  int v112;
  _DWORD *v113;

  v5 = a3;
  v113 = a1 + 4718;
  v8 = a1 + 4470;
  v9 = HIDWORD(a3);
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v10 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v13 = v113[1];
    v14 = v113[2];
    if (v10)
    {
      printf("%lld %d AVE %s: FIG: Pixelbuffer width %d height %d\n", CurrTime, 20, LevelStr, v13, v14);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", v15, 20, v16, v113[1], v113[2]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Pixelbuffer width %d height %d", CurrTime, 20, LevelStr, v13, v14);
    }
  }
  if (!*((_BYTE *)v8 + 980))
  {
    if (((v5 + 63) & 0xFFFFFFC0) != v5)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v27 = AVE_Log_CheckConsole(3u);
        v28 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        if (v27)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned\n", v28, 3, v29, "AVE_GetTileInfo", 15562, "tileOffset.x == (((tileOffset.x) + (64) - 1) & ~((64) - 1))", v5);
          v28 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x = %d not aligned", v28);
      }
      return 4294954394;
    }
    if ((((_DWORD)v9 + 15) & 0xFFFFFFF0) != (_DWORD)v9)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v24 = AVE_Log_CheckConsole(3u);
        v25 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned\n", v25, 3, v26, "AVE_GetTileInfo", 15565, "tileOffset.y == (((tileOffset.y) + (16) - 1) & ~((16) - 1))", v9);
          v25 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y = %d not aligned", v25);
      }
      return 4294954394;
    }
  }
  v110 = v8;
  v17 = HIDWORD(a4);
  v109 = a1 + 45883;
  v18 = a4 + 15;
  v19 = a4;
  *(_DWORD *)(a2 + 716) = v5;
  v111 = a2;
  *(_DWORD *)(a2 + 720) = v9;
  v112 = v5;
  LODWORD(a4) = v9;
  v108 = v17;
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v20 = v19;
    v21 = AVE_Log_CheckConsole(0x14u);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(7);
    if (v21)
    {
      v19 = v20;
      printf("%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)\n", v22, 20, v23, v5, a4, v20, v17);
      v22 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    else
    {
      v19 = v20;
    }
    syslog(3, "%lld %d AVE %s: FIG: Tile Offset (%d, %d), Tile Aperture (%d, %d)", v22);
  }
  v106 = v19;
  v107 = a4;
  v30 = v19 + v5;
  v31 = v17 + a4;
  v32 = v18 & 0xFFFFFFF0;
  v33 = (HIDWORD(a4) + 15) & 0xFFFFFFF0;
  if (*v109 < 11)
  {
    v34 = v8;
    v35 = (_DWORD *)v111;
    *(_QWORD *)(v111 + 724) = *(_QWORD *)(v113 + 1);
  }
  else
  {
    v34 = v8;
    v35 = (_DWORD *)v111;
    if (*((_BYTE *)v110 + 980))
    {
      if (v30 >= v113[1])
        v36 = v113[1];
      else
        v36 = v30;
      if (a1[470] == v32)
        v37 = v113[1];
      else
        v37 = v36;
      *(_DWORD *)(v111 + 724) = v37;
      if (v31 >= v113[2])
        v38 = v113[2];
      else
        v38 = v31;
      if (a1[471] == v33)
        v39 = v113[2];
      else
        v39 = v38;
      *(_DWORD *)(v111 + 728) = v39;
      v30 = v113[1];
      v31 = v113[2];
    }
    else
    {
      v40 = v113[1];
      v41 = v113[2];
      if (v30 <= v40)
        v42 = v19;
      else
        v42 = v40 - v112;
      *(_DWORD *)(v111 + 724) = v42;
      v30 = v42 + v112;
      v43 = v41 - v107;
      if (v31 <= v41)
        v43 = v108;
      *(_DWORD *)(v111 + 728) = v43;
      v31 = v43 + v107;
    }
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v44 = AVE_Log_CheckConsole(0x14u);
    v45 = AVE_GetCurrTime();
    v46 = AVE_Log_GetLevelStr(7);
    v47 = a1[470];
    if (v44)
    {
      printf("%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n\n", v45, 20, v46, v47, a1[471], v113[1], v113[2], v32, v33, v35[181], v35[182], v30, v31);
      v48 = AVE_GetCurrTime();
      v49 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v48, 20, v49, a1[470]);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: Tile: %d %d | %u %u | %d %d | %d %d | %d %d\n", v45, 20, v46, v47);
    }
  }
  if (!*((_BYTE *)v34 + 132))
  {
    if (*(_BYTE *)v34)
    {
      v62 = v34[10] == 10;
      if (v30 << v62 > *v113)
      {
        if (!AVE_Log_CheckLevel(3u, 4))
          return 4294954394;
        v63 = AVE_Log_CheckConsole(3u);
        v64 = AVE_GetCurrTime();
        v65 = AVE_Log_GetLevelStr(4);
        if (v63)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v65, "AVE_GetTileInfo", 15688, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
LABEL_65:
          v72 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v72, 3);
          return 4294954394;
        }
        goto LABEL_97;
      }
      if (v31 > v113[2])
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v73 = AVE_Log_CheckConsole(3u);
          v74 = AVE_GetCurrTime();
          v75 = AVE_Log_GetLevelStr(4);
          if (v73)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)\n", v74, 3, v75, "AVE_GetTileInfo", 15693, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            v74 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height (%u)", v74, 3);
        }
        return 4294954394;
      }
      result = 0;
      v80 = v112 << v62;
    }
    else
    {
      if (((2 * ((2863311531u * (unint64_t)(v30 + 2)) >> 32)) & 0xFFFFFFFC) > *v113)
      {
        if (!AVE_Log_CheckLevel(3u, 4))
          return 4294954394;
        v70 = AVE_Log_CheckConsole(3u);
        v64 = AVE_GetCurrTime();
        v71 = AVE_Log_GetLevelStr(4);
        if (v70)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)\n", v64, 3, v71, "AVE_GetTileInfo", 15668, "stride <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Stride", v112, v106, *v113);
          goto LABEL_65;
        }
LABEL_97:
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: x(%d) + width(%d) > buffer stride(%u)", v64, 3);
        return 4294954394;
      }
      if (v31 > v113[2])
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v76 = AVE_Log_CheckConsole(3u);
          v77 = AVE_GetCurrTime();
          v78 = AVE_Log_GetLevelStr(4);
          if (v76)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)\n", v77, 3, v78, "AVE_GetTileInfo", 15673, "height <= encoderPrivateStorage->VideoParamsDriver.pixelBuffer.Height", v107, v108, v113[2]);
            v77 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: y(%d) + height(%d) > buffer height(%u)", v77, 3);
        }
        return 4294954394;
      }
      result = 0;
      v80 = (v112 / 48) << 6;
    }
    v35[177] = v80;
    v35[178] = v107;
    return result;
  }
  if (*v109 < 11)
  {
LABEL_93:
    result = 0;
    *(_QWORD *)(v35 + 177) = 0;
    return result;
  }
  v50.i32[0] = v113[1];
  v51.i32[0] = v113[2];
  v50.i32[1] = v35[181];
  v52 = (uint32x2_t)vadd_s32(v50, (int32x2_t)0x1F0000001FLL);
  v51.i32[1] = v35[182];
  v53 = (uint32x2_t)vadd_s32(v51, (int32x2_t)0x1F0000001FLL);
  v54 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v53, 5uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v52, 5uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000040, v52))), (int8x8_t)vcgt_u32(v53, (uint32x2_t)0x3F0000003FLL));
  v55 = v54.u32[1];
  v56 = v54.u32[0];
  if (v54.i32[0] == v54.i32[1])
  {
    v57 = a1 + 25764;
    if (AVE_Log_CheckLevel(0x14u, 7))
    {
      v58 = AVE_Log_CheckConsole(0x14u);
      v59 = AVE_GetCurrTime();
      v60 = AVE_Log_GetLevelStr(7);
      if (v58)
      {
        printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d\n", v59, 20, v60, v56, v56);
        v61 = AVE_GetCurrTime();
        v95 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v61, 20, v95, v56, v56);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsLuma %d uiEncodedRegionTwiddleBitsLuma %d", v59, 20, v60, v56, v56);
      }
    }
    v81.i32[0] = v113[1];
    v82.i32[0] = v113[2];
    v81.i32[1] = v35[181];
    v83 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v81, (uint32x2_t)vneg_s32(vdup_n_s32((*v57 - 1) < 2))), (int32x2_t)0xF0000000FLL);
    v82.i32[1] = v35[182];
    v84 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v82, (uint32x2_t)vneg_s32(vdup_n_s32(*v57 == 1))), (int32x2_t)0xF0000000FLL);
    v85 = vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v84, 4uLL))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v83, 4uLL))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v83))), (int8x8_t)vcgt_u32(v84, (uint32x2_t)0x1F0000001FLL));
    v86 = v85.u32[1];
    v87 = v85.u32[0];
    if (v85.i32[0] == v85.i32[1])
    {
      if (AVE_Log_CheckLevel(0x14u, 7))
      {
        v88 = AVE_Log_CheckConsole(0x14u);
        v89 = AVE_GetCurrTime();
        v90 = AVE_Log_GetLevelStr(7);
        if (v88)
        {
          printf("%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d\n", v89, 20, v90, v87, v87);
          v91 = AVE_GetCurrTime();
          v96 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v91, 20, v96, v87, v87);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: uiPixelBufferTwiddleBitsChroma %d uiEncodedRegionTwiddleBitsChroma %d", v89, 20, v90, v87, v87);
        }
      }
      goto LABEL_93;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v92 = AVE_Log_CheckConsole(3u);
      v67 = AVE_GetCurrTime();
      v68 = AVE_Log_GetLevelStr(4);
      if (v92)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15653, "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma", v113[1], v113[2], v87, v35[181], v35[182], v86);
        v67 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(4);
        v104 = v35[182];
        v105 = v86;
        v102 = v87;
        v103 = v35[181];
        v100 = v113[1];
        v101 = v113[2];
        v98 = 15653;
        v99 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
        goto LABEL_86;
      }
      v104 = v35[182];
      v105 = v86;
      v102 = v87;
      v103 = v35[181];
      v100 = v113[1];
      v101 = v113[2];
      v93 = "uiPixelBufferTwiddleBitsChroma == uiEncodedRegionTwiddleBitsChroma";
      v94 = 15653;
      goto LABEL_95;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    v66 = AVE_Log_CheckConsole(3u);
    v67 = AVE_GetCurrTime();
    v68 = AVE_Log_GetLevelStr(4);
    if (v66)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d \n", v67, 3, v68, "AVE_GetTileInfo", 15639, "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma", v113[1], v113[2], v56, v35[181], v35[182], v55);
      v67 = AVE_GetCurrTime();
      v69 = AVE_Log_GetLevelStr(4);
      v104 = v35[182];
      v105 = v55;
      v102 = v56;
      v103 = v35[181];
      v100 = v113[1];
      v101 = v113[2];
      v98 = 15639;
      v99 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
LABEL_86:
      v97 = v69;
LABEL_96:
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERR: Encoded region of compressed buffer is not within correct size. (%d ,%d)%d | (%d, %d)%d ", v67, 3, v97, "AVE_GetTileInfo", v98, v99, v100, v101, v102, v103, v104, v105);
      return 4294954394;
    }
    v104 = v35[182];
    v105 = v55;
    v102 = v56;
    v103 = v35[181];
    v100 = v113[1];
    v101 = v113[2];
    v93 = "uiPixelBufferTwiddleBitsLuma == uiEncodedRegionTwiddleBitsLuma";
    v94 = 15639;
LABEL_95:
    v98 = v94;
    v99 = v93;
    v97 = v68;
    goto LABEL_96;
  }
  return 4294954394;
}

BOOL AVE_AddSupportedProperty(__CFDictionary *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void **v10;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDA08], a2);
    v10 = (const void **)MEMORY[0x1E0CED9D8];
    if (a4)
      v10 = (const void **)MEMORY[0x1E0CED9D0];
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CED9C8], *v10);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E0CED9E0], (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionarySetValue(a1, a3, v9);
    CFRelease(v9);
  }
  return v9 != 0;
}

void _GLOBAL__sub_I_AppleAVEHEVCFIGWrapper_cpp()
{
  kHEVCProfileAutoLevelTable = *MEMORY[0x1E0CED9B0];
  dword_1ED52D8B0 = 1;
  qword_1ED52D8B8 = *MEMORY[0x1E0CED988];
  dword_1ED52D8C0 = 2;
  qword_1ED52D8C8 = *MEMORY[0x1E0CED9A0];
  dword_1ED52D8D0 = 1308;
  qword_1ED52D8D8 = *MEMORY[0x1E0CED998];
  dword_1ED52D8E0 = 1310;
  qword_1ED52D8E8 = *MEMORY[0x1E0CED990];
  dword_1ED52D8F0 = 1210;
  qword_1ED52D8F8 = *MEMORY[0x1E0CED9C0];
  dword_1ED52D900 = 1008;
  qword_1ED52D908 = *MEMORY[0x1E0CED9B8];
  dword_1ED52D910 = 1010;
  qword_1ED52D918 = *MEMORY[0x1E0CED9A8];
  dword_1ED52D920 = 3;
}

void H9EncoderRegister()
{
  int v0;
  __CFDictionary *Mutable;
  const __CFDictionary *v2;
  const void *v3;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  const char *v10;

  v0 = AVE_UC_Verify();
  if (!v0)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v2 = Mutable;
      v3 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CEDD58], (const void *)*MEMORY[0x1E0C9AE50]);
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v2);
      if (MutableCopy)
      {
        v5 = MutableCopy;
        CFDictionaryAddValue(v2, CFSTR("CMClassImplementationID"), CFSTR("com.apple.videotoolbox.videoencoder.hevc"));
        v0 = VTRegisterVideoEncoderWithInfo();
        if (!v0)
        {
          CFDictionaryAddValue(v5, CFSTR("CMClassImplementationID"), CFSTR("com.apple.videotoolbox.videoencoder.ohvc"));
          CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E0CEDD50], v3);
          v0 = VTRegisterVideoEncoderWithInfo();
        }
        CFRelease(v2);
      }
      else
      {
        v0 = 0;
        v5 = v2;
      }
      CFRelease(v5);
    }
    else
    {
      v0 = 0;
    }
  }
  if (AVE_Log_CheckLevel(2u, 5))
  {
    v6 = AVE_Log_CheckConsole(2u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(5);
    if (v6)
    {
      printf("%lld %d AVE %s: Register HEVC video encoder of AVE %d\n", CurrTime, 2, LevelStr, v0);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", v9, 2, v10, v0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: Register HEVC video encoder of AVE %d", CurrTime, 2, LevelStr, v0);
    }
  }
}

uint64_t AVE_MCTF_Validate(int a1, uint64_t a2, int a3, int a4, int a5)
{
  return AVE_PixelFmt_CheckSupportedType(a1, a2, a3 | 0xE0u, a4, a5);
}

uint64_t AVE_MCTF_Print(unsigned int *a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _OWORD *v20;
  const char *v21;
  const char *v22;
  unsigned int *v24;
  const char *v25;
  _OWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(v44, 0, sizeof(v44));
  AVE_ComposePosStr(a4, a5, (char *)v44, 32, a5, a6, a7, a8);
  v11 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v12 = AVE_Log_CheckConsole(a2);
    v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v44, a1, *a1, a1[1], a1[2], a1[3]);
        return 0;
      }
      v20 = v44;
      printf("MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", (const char *)v44, a1, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
      v39 = a1[14];
      v40 = a1[15];
      v37 = a1[12];
      v38 = a1[13];
      v35 = a1[10];
      v36 = a1[11];
      v33 = a1[8];
      v34 = a1[9];
      v31 = a1[6];
      v32 = a1[7];
      v29 = a1[4];
      v30 = a1[5];
      v27 = (unsigned int *)a1[2];
      v28 = a1[3];
      v25 = (const char *)*a1;
      v26 = (_OWORD *)a1[1];
      v22 = "MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
      v24 = a1;
    }
    else
    {
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr((char)a3);
      v16 = *a1;
      v17 = a1[1];
      v18 = a1[2];
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", CurrTime, a2, LevelStr, v44, a1, v16, v17, v18);
        return 0;
      }
      v19 = a2;
      printf("%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", CurrTime, (_DWORD)a2, LevelStr, (const char *)v44, a1, v16, v17, v18, a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12],
        a1[13],
        a1[14],
        a1[15]);
      v20 = (_OWORD *)AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(v11);
      v42 = a1[14];
      v43 = a1[15];
      v40 = a1[12];
      v41 = a1[13];
      v38 = a1[10];
      v39 = a1[11];
      v36 = a1[8];
      v37 = a1[9];
      v34 = a1[6];
      v35 = a1[7];
      v32 = a1[4];
      v33 = a1[5];
      v30 = a1[2];
      v31 = a1[3];
      v28 = *a1;
      v29 = a1[1];
      v26 = v44;
      v27 = a1;
      v24 = v19;
      v25 = v21;
      v22 = "%lld %d AVE %s: MCTF %s | %p %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d";
    }
    syslog(3, v22, v20, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43);
  }
  return 0;
}

uint64_t AVE_MCTF_Retrieve(const __CFArray *a1, _OWORD *a2)
{
  int Count;
  int v5;
  int v6;
  char v7;
  int *v8;
  char v9;
  uint64_t SInt32;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  char v35;
  __int16 v36;
  int v37[3];

  v37[0] = 0;
  v36 = 0;
  v35 = 0;
  Count = CFArrayGetCount(a1);
  if (a1 && a2)
  {
    v5 = 0;
    v6 = Count >> 1;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[3] = 0u;
    v7 = 1;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    v8 = (int *)(a2 + 2);
    do
    {
      v9 = v7;
      AVE_CFArray_GetChar(a1, (v5 * v6), &v35);
      *(v8 - 8) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 1), &v35);
      *(v8 - 7) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 2), &v35);
      *(v8 - 6) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 3), &v35);
      *(v8 - 5) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 4), &v35);
      *(v8 - 4) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 5), &v35);
      *(v8 - 3) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 6), &v35);
      *(v8 - 2) = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 7), &v35);
      *(v8 - 1) = v35;
      AVE_CFArray_GetSInt16(a1, (v5 * v6 + 8), &v36);
      *v8 = v36;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 9), &v35);
      v8[1] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 10), &v35);
      v8[2] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 11), &v35);
      v8[3] = v35;
      AVE_CFArray_GetChar(a1, (v5 * v6 + 12), &v35);
      v8[4] = v35;
      AVE_CFArray_GetSInt32(a1, (v5 * v6 + 13), v37);
      v8[5] = v37[0];
      AVE_CFArray_GetSInt32(a1, (v5 * v6 + 14), v37);
      v8[6] = v37[0];
      SInt32 = AVE_CFArray_GetSInt32(a1, (v5 * v6 + 15), v37);
      v8[7] = v37[0];
      if (AVE_Log_CheckLevel(0x1Cu, 7))
      {
        v11 = AVE_Log_CheckConsole(0x1Cu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(7);
        v14 = *(v8 - 8);
        v15 = *(v8 - 7);
        v16 = *(v8 - 6);
        v17 = *(v8 - 5);
        v18 = *(v8 - 4);
        v19 = *(v8 - 3);
        v20 = *(v8 - 2);
        v21 = *(v8 - 1);
        v22 = *v8;
        v23 = v8[1];
        v24 = v8[2];
        v25 = v8[3];
        v26 = v8[4];
        v27 = v8[5];
        v28 = v8[7];
        if (v11)
        {
          printf("%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d\n", CurrTime, 28, LevelStr, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
            v8[6],
            v28);
          v29 = AVE_GetCurrTime();
          v30 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", v29, 28, v30, v5, *(v8 - 8), *(v8 - 7), *(v8 - 6), *(v8 - 5), *(v8 - 4), *(v8 - 3), *(v8 - 2), *(v8 - 1), *v8, v8[1], v8[2], v8[3], v8[4],
            v8[5],
            v8[6],
            v8[7]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: MCTF Pop [%d]: %d | %d %d %d - %d %d %d - %d %d %d %d %d %d %d %d %d", CurrTime, 28, LevelStr, v5, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
            v27,
            v8[6],
            v28);
        }
      }
      v7 = 0;
      v8 += 16;
      v5 = 1;
    }
    while ((v9 & 1) != 0);
  }
  else
  {
    if (AVE_Log_CheckLevel(0x1Cu, 4))
    {
      v31 = AVE_Log_CheckConsole(0x1Cu);
      v32 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v32, 28, v33, "AVE_MCTF_Retrieve", 81, "pArray != __null && pMCTF != __null", a1, a2);
        v32 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v32, 28);
    }
    return 4294966295;
  }
  return SInt32;
}

uint64_t H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(H264VideoEncoderFrameReceiver *this)
{
  double v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  _opaque_pthread_t *v10;
  thread_act_t v11;
  double v13;
  mach_timebase_info info;
  integer_t policy_info[2];
  integer_t v16;
  int v17;

  v1 = 33.0;
  if (*((int *)this + 17469) > 59)
    v1 = 15.0;
  v13 = v1;
  mach_timebase_info(&info);
  LODWORD(v3) = info.numer;
  LODWORD(v2) = info.denom;
  v4 = (double)v2 / (double)v3 * 1000000.0;
  __asm { FMOV            V1.2D, #3.0 }
  _Q1.f64[0] = v13;
  *(int32x2_t *)policy_info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64(_Q1, v4)));
  v16 = policy_info[0];
  v17 = 1;
  v10 = pthread_self();
  v11 = pthread_mach_thread_np(v10);
  return thread_policy_set(v11, 2u, policy_info, 4u);
}

uint64_t H264VideoEncoderFrameReceiver::H264VideoEncoderFrameReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  int v12;
  const void *v13;
  const void *v14;
  const void *v15;
  void *v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v28;
  const char *v29;
  uint64_t v31;
  uint64_t v32;

  v4 = a1 + 245232;
  v5 = a1 + 239288;
  v6 = a1 + 51224;
  AVE_MultiPass::AVE_MultiPass((AVE_MultiPass *)(a1 + 8));
  *(_OWORD *)(v6 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 128) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(v5 + 9) = *(_BYTE *)(a2 + 208);
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 220);
  *(_QWORD *)v5 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)v4 = *(_BYTE *)(a2 + 232);
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 51288) = v7;
  v8 = *(_QWORD **)(a2 + 80);
  if (v8)
    *(_QWORD *)(v6 + 144) = *v8;
  v9 = *(const void **)(a2 + 88);
  if (v9)
    memcpy((void *)(a1 + 51376), v9, 0x4178uLL);
  v10 = *(const void **)(a2 + 96);
  if (v10)
    memcpy((void *)(a1 + 68136), v10, 0x6A8uLL);
  v11 = *(const void **)(a2 + 104);
  if (v11)
    memcpy((void *)(a1 + 69840), v11, 0x690uLL);
  *(_OWORD *)(v6 + 20296) = *(_OWORD *)(a2 + 112);
  v12 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120);
  if (v12 == 1)
  {
    v31 = v5;
    v32 = v4;
    v18 = *(const void **)(a2 + 152);
    if (v18)
      memcpy((void *)(a1 + 76236), v18, 0x140DCuLL);
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = a2 + 8 * v19;
      v23 = *(const void **)(v22 + 160);
      if (v23)
        memcpy((void *)(a1 + 7924 * v19 + 158376), v23, 0x1EF4uLL);
      v24 = *(const void **)(v22 + 176);
      if (v24)
        memcpy((void *)(a1 + 9636 * v19 + 174224), v24, 0x25A4uLL);
      v20 = 0;
      v19 = 1;
    }
    while ((v21 & 1) != 0);
    v25 = *(const void **)(a2 + 192);
    if (v25)
      memcpy((void *)(a1 + 193496), v25, 0x54F8uLL);
    v15 = *(const void **)(a2 + 200);
    v5 = v31;
    v4 = v32;
    if (v15)
    {
      v16 = (void *)(a1 + 215248);
      v17 = 24024;
      goto LABEL_29;
    }
  }
  else if (v12)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      if (AVE_Log_CheckConsole(0x2Eu))
      {
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        printf("%lld %d AVE %s: codectype not recognized! %d\n", CurrTime, 46, LevelStr, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120));
      }
      v28 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v28, 46, v29, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120));
    }
  }
  else
  {
    v13 = *(const void **)(a2 + 128);
    if (v13)
      memcpy((void *)(a1 + 71536), v13, 0x6ACuLL);
    v14 = *(const void **)(a2 + 136);
    if (v14)
      memcpy((void *)(a1 + 73244), v14, 0x184uLL);
    v15 = *(const void **)(a2 + 144);
    if (v15)
    {
      v16 = (void *)(a1 + 73632);
      v17 = 2604;
LABEL_29:
      memcpy(v16, v15, v17);
    }
  }
  *(_QWORD *)(a1 + 51100) = 0;
  *(_OWORD *)(a1 + 51084) = 0u;
  *(_OWORD *)(a1 + 51112) = 0u;
  *(_DWORD *)v6 = -1;
  *(_BYTE *)(v6 + 4) = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(a1 + 25784) = 0;
  *(_BYTE *)(v5 + 10) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_OWORD *)(a1 + 25792) = 0u;
  *(_OWORD *)(a1 + 25808) = 0u;
  *(_OWORD *)(a1 + 25824) = 0u;
  *(_OWORD *)(a1 + 25840) = 0u;
  *(_OWORD *)(a1 + 25856) = 0u;
  *(_OWORD *)(a1 + 25872) = 0u;
  *(_OWORD *)(a1 + 25888) = 0u;
  *(_OWORD *)(a1 + 25904) = 0u;
  *(_OWORD *)(a1 + 25920) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25984) = 0u;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(_OWORD *)(a1 + 26016) = 0u;
  *(_OWORD *)(a1 + 26032) = 0u;
  *(_OWORD *)(a1 + 26048) = 0u;
  *(_OWORD *)(a1 + 26064) = 0u;
  *(_OWORD *)(a1 + 26080) = 0u;
  *(_OWORD *)(a1 + 26096) = 0u;
  *(_OWORD *)(a1 + 26112) = 0u;
  *(_OWORD *)(a1 + 26128) = 0u;
  *(_OWORD *)(a1 + 26144) = 0u;
  *(_OWORD *)(a1 + 26160) = 0u;
  *(_OWORD *)(a1 + 26176) = 0u;
  *(_OWORD *)(a1 + 26192) = 0u;
  *(_OWORD *)(a1 + 26208) = 0u;
  *(_OWORD *)(a1 + 26224) = 0u;
  *(_OWORD *)(a1 + 26240) = 0u;
  *(_OWORD *)(a1 + 26256) = 0u;
  *(_OWORD *)(a1 + 26920) = 0u;
  *(_OWORD *)(a1 + 26936) = 0u;
  *(_OWORD *)(a1 + 26888) = 0u;
  *(_OWORD *)(a1 + 26904) = 0u;
  *(_OWORD *)(a1 + 26856) = 0u;
  *(_OWORD *)(a1 + 26872) = 0u;
  *(_OWORD *)(a1 + 26824) = 0u;
  *(_OWORD *)(a1 + 26840) = 0u;
  *(_OWORD *)(a1 + 26792) = 0u;
  *(_OWORD *)(a1 + 26808) = 0u;
  *(_OWORD *)(a1 + 26760) = 0u;
  *(_OWORD *)(a1 + 26776) = 0u;
  *(_OWORD *)(a1 + 26728) = 0u;
  *(_OWORD *)(a1 + 26744) = 0u;
  *(_OWORD *)(a1 + 26696) = 0u;
  *(_OWORD *)(a1 + 26712) = 0u;
  *(_OWORD *)(a1 + 26664) = 0u;
  *(_OWORD *)(a1 + 26680) = 0u;
  *(_OWORD *)(a1 + 26632) = 0u;
  *(_OWORD *)(a1 + 26648) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(_OWORD *)(a1 + 26568) = 0u;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26536) = 0u;
  *(_OWORD *)(a1 + 26552) = 0u;
  *(_OWORD *)(a1 + 26504) = 0u;
  *(_OWORD *)(a1 + 26520) = 0u;
  *(_OWORD *)(a1 + 26472) = 0u;
  *(_OWORD *)(a1 + 26488) = 0u;
  bzero((void *)(a1 + 27072), 0x3C0uLL);
  *(_OWORD *)(a1 + 51240) = 0u;
  *(_OWORD *)(a1 + 245216) = 0u;
  return a1;
}

void sub_1B558CF94(_Unwind_Exception *a1)
{
  AVE_MultiPass *v1;

  AVE_MultiPass::~AVE_MultiPass(v1);
  _Unwind_Resume(a1);
}

void AVE_MultiPass::~AVE_MultiPass(AVE_MultiPass *this)
{
  void *v2;

  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((_QWORD *)this + 3179);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((_QWORD *)this + 3173);
  v2 = (void *)*((_QWORD *)this + 3169);
  if (v2)
  {
    *((_QWORD *)this + 3170) = v2;
    operator delete(v2);
  }
}

uint64_t H264VideoEncoderFrameReceiver::UpdateSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const void *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  const void *v28;
  int v29;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v32;
  __uint64_t v33;
  const char *v35;
  const char *v36;

  if (a2)
  {
    v4 = a1 + 51304;
    *(_OWORD *)(a1 + 51320) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 51336) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 51352) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 51304) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 239297) = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(a1 + 239304) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a1 + 239300) = *(_DWORD *)(a2 + 212);
    *(_DWORD *)(a1 + 239308) = *(_DWORD *)(a2 + 220);
    *(_QWORD *)(a1 + 239288) = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 245232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 245240) = *(_QWORD *)(a2 + 240);
    v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 51272) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 51288) = v5;
    v6 = *(_QWORD **)(a2 + 80);
    if (v6)
      *(_QWORD *)(a1 + 51368) = *v6;
    v7 = *(const void **)(a2 + 88);
    if (v7)
      memcpy((void *)(a1 + 51376), v7, 0x4178uLL);
    v8 = *(const void **)(a2 + 96);
    if (v8)
      memcpy((void *)(a1 + 68136), v8, 0x6A8uLL);
    v9 = *(const void **)(a2 + 104);
    if (v9)
      memcpy((void *)(a1 + 69840), v9, 0x690uLL);
    *(_OWORD *)(v4 + 20216) = *(_OWORD *)(a2 + 112);
    v10 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120);
    if (v10 == 1)
    {
      v21 = *(const void **)(a2 + 152);
      if (v21)
        memcpy((void *)(a1 + 76236), v21, 0x140DCuLL);
      v22 = 0;
      v23 = 1;
      do
      {
        v24 = v23;
        v25 = a2 + 8 * v22;
        v26 = *(const void **)(v25 + 160);
        if (v26)
          memcpy((void *)(a1 + 7924 * v22 + 158376), v26, 0x1EF4uLL);
        v27 = *(const void **)(v25 + 176);
        if (v27)
          memcpy((void *)(a1 + 9636 * v22 + 174224), v27, 0x25A4uLL);
        v23 = 0;
        v22 = 1;
      }
      while ((v24 & 1) != 0);
      v28 = *(const void **)(a2 + 192);
      if (v28)
        memcpy((void *)(a1 + 193496), v28, 0x54F8uLL);
      v13 = *(const void **)(a2 + 200);
      if (!v13)
        return 0;
      v14 = (void *)(a1 + 215248);
      v15 = 24024;
    }
    else
    {
      if (v10)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v29 = AVE_Log_CheckConsole(0x2Eu);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
          v32 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120);
          if (v29)
          {
            printf("%lld %d AVE %s: codectype not recognized! %d\n", CurrTime, 46, LevelStr, v32);
            v33 = AVE_GetCurrTime();
            v36 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", v33, 46, v36, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 120));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: codectype not recognized! %d", CurrTime, 46, LevelStr, v32);
          }
        }
        return 0;
      }
      v11 = *(const void **)(a2 + 128);
      if (v11)
        memcpy((void *)(a1 + 71536), v11, 0x6ACuLL);
      v12 = *(const void **)(a2 + 136);
      if (v12)
        memcpy((void *)(a1 + 73244), v12, 0x184uLL);
      v13 = *(const void **)(a2 + 144);
      if (!v13)
        return 0;
      v14 = (void *)(a1 + 73632);
      v15 = 2604;
    }
    memcpy(v14, v13, v15);
    return 0;
  }
  v16 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v17 = AVE_Log_CheckConsole(3u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.\n", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
      v20 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v20, 3, v35, "UpdateSettings", 307, "interface != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: UpdateSettings failed.", v18, 3, v19, "UpdateSettings", 307, "interface != __null");
    }
  }
  return v16;
}

void *H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(uint64_t a1, void *__dst)
{
  return memcpy(__dst, (const void *)(a1 + 25504), 0x108uLL);
}

uint64_t H264VideoEncoderFrameReceiver::SetMultiPassOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25776) = a2;
  return this;
}

void H264VideoEncoderFrameReceiver::~H264VideoEncoderFrameReceiver(H264VideoEncoderFrameReceiver *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  __IOSurface *v5;
  __IOSurface *v6;
  char *v7;
  __IOSurface *v8;
  __IOSurface *v9;
  void *v10;

  v2 = (char *)this + 51112;
  v3 = -240;
  do
  {
    v4 = (char *)this + v3;
    v5 = *(__IOSurface **)((char *)this + v3 + 26272);
    if (v5)
    {
      IOSurfaceUnlock(v5, 0, 0);
      CFRelease(*((CFTypeRef *)v4 + 3284));
      *((_QWORD *)v4 + 3284) = 0;
    }
    v6 = (__IOSurface *)*((_QWORD *)v4 + 3369);
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease(*((CFTypeRef *)v4 + 3369));
      *((_QWORD *)v4 + 3369) = 0;
    }
    v7 = (char *)this + v3;
    v8 = *(__IOSurface **)((char *)this + v3 + 27552);
    if (v8)
    {
      IOSurfaceUnlock(v8, 0, 0);
      CFRelease(*((CFTypeRef *)v7 + 3444));
      *((_QWORD *)v7 + 3444) = 0;
    }
    v9 = (__IOSurface *)*((_QWORD *)v7 + 3504);
    if (v9)
    {
      IOSurfaceUnlock(v9, 0, 0);
      CFRelease(*((CFTypeRef *)v7 + 3504));
      *((_QWORD *)v7 + 3504) = 0;
    }
    v3 += 8;
  }
  while (v3);
  if (*((_QWORD *)v2 + 31))
  {
    FigFormatDescriptionRelease();
    *((_QWORD *)v2 + 31) = 0;
  }
  if (*(_QWORD *)v2)
  {
    free(*(void **)v2);
    *(_QWORD *)v2 = 0;
    *((_DWORD *)v2 + 2) = 0;
  }
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((_QWORD *)this + 3180);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100]((_QWORD *)this + 3174);
  v10 = (void *)*((_QWORD *)this + 3170);
  if (v10)
  {
    *((_QWORD *)this + 3171) = v10;
    operator delete(v10);
  }
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t H264VideoEncoderFrameReceiver::Setup(H264VideoEncoderFrameReceiver *this)
{
  const void **v2;
  CFRunLoopRef Current;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  const void *v7;
  __uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;

  v2 = (const void **)((char *)this + 51232);
  Current = CFRunLoopGetCurrent();
  *v2 = Current;
  if (Current)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v4 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      v7 = *v2;
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFRunLoopGetCurrent = %p\n", CurrTime, 46, LevelStr, v7);
        v8 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCurrent = %p", v8, 46, v27, *v2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFRunLoopGetCurrent = %p", CurrTime, 46, LevelStr, v7);
      }
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v13 = AVE_Log_CheckConsole(0x2Eu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(7);
      if (v13)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.\n", v14, 46, v15);
        v16 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v16, 46, v29);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddIODispatcherToRunLoop to CFRunLoopRun.", v14, 46, v15);
      }
    }
    if (H264VideoEncoderFrameReceiver::AddIODispatcherToRunLoop(this))
    {
      v17 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v18 = AVE_Log_CheckConsole(3u);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.\n", v19, 3, v20, "Setup", 479, "err == 0");
          v21 = AVE_GetCurrTime();
          v30 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v21, 3, v30, "Setup", 479, "err == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddIODispatcherToRunLoop failed.", v19, 3, v20, "Setup", 479, "err == 0");
        }
      }
    }
    else
    {
      if (*((_BYTE *)this + 239297))
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v22 = AVE_Log_CheckConsole(0x2Eu);
          v23 = AVE_GetCurrTime();
          v24 = AVE_Log_GetLevelStr(4);
          if (v22)
          {
            printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v23, 46, v24);
            v25 = AVE_GetCurrTime();
            v31 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v25, 46, v31);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v23, 46, v24);
          }
        }
        setpriority(3, 0, 4096);
      }
      else
      {
        H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(this);
      }
      return 0;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    v9 = AVE_Log_CheckConsole(3u);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.\n", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
      v12 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v12, 3, v28, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CFRunLoopGetCurrent failed.", v10, 3, v11, "Setup", 472, "m_CFRunLoopRef != __null");
    }
    return 3758097085;
  }
  else
  {
    return 3758097085;
  }
  return v17;
}

uint64_t H264VideoEncoderFrameReceiver::AddIODispatcherToRunLoop(H264VideoEncoderFrameReceiver *this)
{
  uint64_t v2;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  const __CFAllocator *v7;
  __CFMachPort *v8;
  BOOL v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __CFRunLoopSource *RunLoopSource;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  const char *v23;
  const char *v24;
  const char *v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void (*v30)(H264VideoEncoderFrameReceiver *, void *, int *, unint64_t *);
  H264VideoEncoderFrameReceiver *v31;
  Boolean shouldFreeInfo;
  CFMachPortContext context;

  shouldFreeInfo = 0;
  if (IOCreateReceivePort(0x39u, (mach_port_t *)this + 12814))
  {
    v2 = 3758097084;
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v3 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed\n", CurrTime, 46, LevelStr);
        v6 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", v6, 46, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: IOCreateReceivePort failed -> Dispatcher cannot be installed", CurrTime, 46, LevelStr);
      }
    }
    return v2;
  }
  context.version = 1;
  context.info = this;
  memset(&context.retain, 0, 24);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((_DWORD *)this + 12814), MEMORY[0x1E0CBAE48], &context, &shouldFreeInfo);
  *((_QWORD *)this + 6408) = v8;
  if (v8)
    v9 = shouldFreeInfo == 1;
  else
    v9 = 1;
  if (v9)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v10 = AVE_Log_CheckConsole(0x2Eu);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d\n", v11, 46, v12, *((const void **)this + 6408), shouldFreeInfo);
        v11 = AVE_GetCurrTime();
        v12 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateWithPort failed m_CFAsyncPort %p shouldFreeInfo %d", v11, 46, v12, *((const void **)this + 6408), shouldFreeInfo);
    }
    *((_QWORD *)this + 6408) = 0;
    goto LABEL_25;
  }
  RunLoopSource = CFMachPortCreateRunLoopSource(v7, v8, 0);
  *((_QWORD *)this + 6406) = RunLoopSource;
  if (!RunLoopSource)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v18 = AVE_Log_CheckConsole(0x2Eu);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed\n", v19, 46, v20);
        v21 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v21, 46, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: CFMachPortCreateRunLoopSource failed -> Dispatcher cannot be installed", v19, 46, v20);
      }
    }
LABEL_25:
    H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
    return 3758097085;
  }
  CFRunLoopAddSource(*((CFRunLoopRef *)this + 6404), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  v28 = 0u;
  v29 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = *((unsigned int *)this + 59827);
  v30 = H264VideoEncoderFrameReceiver::FrameDone;
  v31 = this;
  if (!AVE_DAL::UCConfig(*((const void ***)this + 6415), (const void *)*((unsigned int *)this + 12814), &v27, v26))return 0;
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    v14 = AVE_Log_CheckConsole(0x2Eu);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed\n", v15, 46, v16);
      v17 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v17, 46, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: kH264VideoEncoderUserClientSetCallback failed -> Dispatcher cannot be installed", v15, 46, v16);
    }
  }
  v2 = 3758097084;
  H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
  return v2;
}

uint64_t H264VideoEncoderFrameReceiver::ChangeBackgroundPolicy(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 239297) != a2)
  {
    *(_BYTE *)(this + 239297) = a2;
    *(_BYTE *)(this + 239298) = 1;
  }
  return this;
}

uint64_t H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(H264VideoEncoderFrameReceiver *this)
{
  char *v1;
  __CFRunLoopSource *v2;
  __CFMachPort *v3;

  v1 = (char *)this + 51232;
  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 6406);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)v1, v2, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    CFRelease(*((CFTypeRef *)v1 + 2));
    *((_QWORD *)v1 + 2) = 0;
  }
  v3 = (__CFMachPort *)*((_QWORD *)v1 + 4);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)v1 + 4));
    *((_QWORD *)v1 + 4) = 0;
  }
  return mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *((_DWORD *)v1 + 6), 1u, -1);
}

void H264VideoEncoderFrameReceiver::FrameDone(H264VideoEncoderFrameReceiver *this, void *a2, int *a3, unint64_t *a4)
{
  int v4;
  int v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  _BYTE *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  __uint64_t v23;
  const char *v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  __uint64_t v37;
  char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  __uint64_t v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  __uint64_t v46;
  uint64_t v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  __uint64_t v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  __uint64_t v65;
  int v66;
  __uint64_t v67;
  const char *v68;
  int v69;
  __uint64_t v70;
  const char *v71;
  int v72;
  __uint64_t v73;
  int v74;
  __uint64_t v75;
  const char *v76;
  int v77;
  __uint64_t v78;
  uint64_t v79;
  char *v80;
  __IOSurface *v81;
  char *v82;
  __IOSurface *v83;
  __IOSurface *v84;
  char *v85;
  __IOSurface *v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  __uint64_t v96;
  const char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  const void **v101;
  IOSurfaceID v102;
  __IOSurface *v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  int v107;
  const void *v108;
  __uint64_t v109;
  const char *v110;
  IOSurfaceID *v111;
  const void **v112;
  uint64_t v113;
  __IOSurface *v114;
  int v115;
  __uint64_t v116;
  const char *v117;
  IOSurfaceID v118;
  const void *v119;
  __uint64_t v120;
  const char *v121;
  BOOL v122;
  IOSurfaceID *v123;
  const void **v124;
  uint64_t v125;
  __IOSurface *v126;
  int v127;
  __uint64_t v128;
  const char *v129;
  IOSurfaceID v130;
  const void *v131;
  __uint64_t v132;
  const char *v133;
  IOSurfaceID *v134;
  const void **v135;
  uint64_t v136;
  __IOSurface *v137;
  int v138;
  __uint64_t v139;
  const char *v140;
  IOSurfaceID v141;
  const void *v142;
  __uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  __uint64_t v149;
  const char *v150;
  int v151;
  __uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  __uint64_t v158;
  const char *v159;
  int v160;
  __uint64_t v161;
  const char *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  __uint64_t v167;
  const char *v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  __uint64_t v173;
  const char *v174;
  __uint64_t v175;
  int v176;
  int v177;
  int v178;
  __uint64_t v179;
  const char *v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  __uint64_t v187;
  const char *v188;
  __uint64_t v189;
  int v190;
  __uint64_t v191;
  const char *v192;
  int v193;
  __uint64_t v194;
  int v195;
  int v196;
  int v197;
  __uint64_t v198;
  const char *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  unint64_t v207;
  int v208;
  __uint64_t v209;
  const char *v210;
  __uint64_t v211;
  double v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  double v217;
  int v218;
  __uint64_t v219;
  const char *v220;
  int v221;
  __uint64_t v222;
  int v223;
  int v224;
  __uint64_t v225;
  const char *v226;
  __uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231;
  double v232;
  int v233;
  __uint64_t v234;
  const char *v235;
  int v236;
  __uint64_t v237;
  int v238;
  int v239;
  __uint64_t v240;
  const char *v241;
  __uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  int *v246;
  double v247;
  int v248;
  __uint64_t v249;
  const char *v250;
  int v251;
  int v252;
  __uint64_t v253;
  const char *v254;
  int v255;
  int v256;
  __uint64_t v257;
  const char *v258;
  __uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  int v263;
  double v264;
  int v265;
  __uint64_t v266;
  const char *v267;
  int v268;
  __uint64_t v269;
  int v270;
  int v271;
  __uint64_t v272;
  const char *v273;
  __uint64_t v274;
  int v275;
  int v276;
  FILE *File;
  int v278;
  __uint64_t v279;
  const char *v280;
  int v281;
  __uint64_t v282;
  const char *v283;
  int v284;
  __uint64_t v285;
  const char *v286;
  int v287;
  __uint64_t v288;
  int v289;
  int v290;
  BOOL v291;
  int v292;
  __uint64_t v293;
  const char *v294;
  int v295;
  int v296;
  __uint64_t v297;
  const char *v298;
  int v299;
  int v300;
  const void *v301;
  BOOL v302;
  uint64_t v303;
  __uint64_t v304;
  uint64_t v305;
  int v306;
  __uint64_t v307;
  const char *v308;
  __uint64_t v309;
  uint64_t v310;
  const char *v311;
  const char *v312;
  const char *v313;
  const char *v314;
  const char *v315;
  const char *v316;
  const char *v317;
  const char *v318;
  const char *v319;
  const char *v320;
  const char *v321;
  const char *v322;
  const char *v323;
  const char *v324;
  const char *v325;
  const char *v326;
  const char *v327;
  uint64_t v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  char *v334;
  BOOL v335;
  int *v336;
  _BYTE *v337;
  OpaqueVTMultiPassStorage **v338;
  int v339;
  int v340;
  unsigned int v341;
  int v342;
  unint64_t v343;
  unint64_t v346[4];
  int v347;

  v4 = (int)a4;
  v5 = (int)a2;
  if (AVE_Log_CheckLevel(0x2Eu, 8))
  {
    v6 = AVE_Log_CheckConsole(0x2Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p 0x%x %p %d\n", CurrTime, 46, LevelStr, "FrameDone", this, v5, a3, v4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p 0x%x %p %d", CurrTime, 46);
  }
  if (!this || !a3 || v4 <= 0)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v14 = AVE_Log_CheckConsole(0x2Eu);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d\n", v15, 46, v16, "FrameDone", 5172, "pRefCon != __null && args != __null && numArgs > 0", this, v5, a3, v4);
        v17 = AVE_GetCurrTime();
        v312 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v17, 46, v312, "FrameDone");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p 0x%x %p %d", v15, 46, v16, "FrameDone");
      }
    }
    goto LABEL_26;
  }
  v9 = (char *)this + 239297;
  if (!*((_QWORD *)this + 6415) || !*((_DWORD *)this + 59826))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v18 = AVE_Log_CheckConsole(0x2Eu);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        v21 = v4;
        v22 = 46;
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d\n", v19, 46, v20, "FrameDone", 5177, "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None", *((const void **)this + 6415), *((_DWORD *)this + 59826));
        v23 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        v330 = *((_QWORD *)this + 6415);
        v331 = *((unsigned int *)this + 59826);
        v328 = 5177;
        v329 = "context->m_pcDAL != __null && context->m_DeviceType != AVE_DevType_None";
        v313 = v24;
        v25 = "%lld %d AVE %s: %s:%d %s | wrong state %p %d";
LABEL_23:
        v310 = v22;
        v4 = v21;
        syslog(3, v25, v23, v310, v313, "FrameDone", v328, v329, v330, v331, v332);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d", v19, 46);
      }
    }
    goto LABEL_26;
  }
  if (v5 == -536870210)
    goto LABEL_14;
  if (v5)
  {
    if (v5 != -536870165)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v30 = AVE_Log_CheckConsole(3u);
        v31 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(4);
        if (v30)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.\n", v31, 3, v32, "FrameDone", 5187, "commandResult == 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: commandResult != kIOReturnSuccess.");
      }
      goto LABEL_26;
    }
LABEL_14:
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v10 = AVE_Log_CheckConsole(0x2Eu);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources\n", v11, 46, v12);
        v13 = AVE_GetCurrTime();
        v311 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v13, 46, v311);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: commandResult = kIOReturnNoResources", v11, 46, v12);
      }
    }
  }
  v33 = *a3;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v34 = AVE_Log_CheckConsole(0x2Eu);
    v35 = AVE_GetCurrTime();
    v36 = AVE_Log_GetLevelStr(7);
    if (v34)
    {
      printf("%lld %d AVE %s: \nH264FrameRec: counter received = %d\n", v35, 46, v36, v33);
      v37 = AVE_GetCurrTime();
      v314 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v37, 46, v314, v33);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: \nH264FrameRec: counter received = %d", v35, 46, v36, v33);
    }
  }
  v338 = (OpaqueVTMultiPassStorage **)((char *)this + 239288);
  v38 = (char *)this + 25784;
  if (*((_BYTE *)this + 239298))
  {
    if (*v9)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        v39 = AVE_Log_CheckConsole(0x2Eu);
        v40 = AVE_GetCurrTime();
        v41 = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND\n", v40, 46, v41);
          v42 = AVE_GetCurrTime();
          v315 = AVE_Log_GetLevelStr(4);
          v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v42, 46, v315);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to BACKGROUND", v40, 46, v41);
        }
      }
      setpriority(3, 0, 4096);
    }
    else
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v43 = AVE_Log_CheckConsole(0x2Eu);
        v44 = AVE_GetCurrTime();
        v45 = AVE_Log_GetLevelStr(7);
        if (v43)
        {
          printf("%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND\n", v44, 46, v45);
          v46 = AVE_GetCurrTime();
          v316 = AVE_Log_GetLevelStr(7);
          v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v46, 46, v316);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264VideoEncoder: setpriority to FOREGROUND", v44, 46, v45);
        }
      }
      setpriority(3, 0, 0);
      H264VideoEncoderFrameReceiver::MakeCurrentThreadTimeConstraintThread(this);
    }
    *((_BYTE *)this + 239298) = 0;
  }
  v346[0] = 0;
  AVE_DAL::Idx2Addr(*((AVE_DAL **)this + 6415), v33, v346);
  v47 = v346[0];
  kdebug_trace();
  v342 = v4;
  v343 = v47;
  v339 = v5;
  switch(*(_DWORD *)(v47 + 4))
  {
    case 4:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v48 = AVE_Log_CheckConsole(0x2Eu);
        v49 = AVE_GetCurrTime();
        v50 = AVE_Log_GetLevelStr(7);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d\n", v49, 46, v50, *(_DWORD *)(v47 + 160));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          v38 = (char *)this + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_PREPARE frame %d");
      }
      goto LABEL_171;
    case 5:
      if (v5 != -536870210 && v5 != -536870165)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v51 = AVE_Log_CheckConsole(0x2Eu);
          v52 = AVE_GetCurrTime();
          v53 = AVE_Log_GetLevelStr(7);
          if (v51)
          {
            printf("%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d\n", v52, 46, v53, "FrameDone", 5428, v33, *(_DWORD *)(v47 + 160));
            v54 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v54);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d DataType_INIT counter %d frame %d", v52);
          }
        }
        v99 = 0;
        v100 = v47 + 356;
        v101 = (const void **)((char *)this + 26712);
        *((_DWORD *)this + 6447) = *(_DWORD *)(v47 + 352);
        do
        {
          v102 = *(_DWORD *)(v100 + 4 * v99);
          if (v102)
          {
            v103 = IOSurfaceLookup(v102);
            *v101 = v103;
            IOSurfaceLock(v103, 0, 0);
            *(v101 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v101);
            *((_DWORD *)this + v99 + 6738) = IOSurfaceGetAllocSize((IOSurfaceRef)*v101);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v104 = AVE_Log_CheckConsole(0x2Eu);
              v105 = AVE_GetCurrTime();
              v106 = AVE_Log_GetLevelStr(7);
              v107 = *(_DWORD *)(v100 + 4 * v99);
              v108 = *(v101 - 30);
              if (v104)
              {
                printf("%lld %d AVE %s: %s:%d CodedData %d %d %p %p\n", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
                v109 = AVE_GetCurrTime();
                v110 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v109, 46, v110, "FrameDone", 5444, v99, *(_DWORD *)(v100 + 4 * v99), *v101, *(v101 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedData %d %d %p %p", v105, 46, v106, "FrameDone", 5444, v99, v107, *v101, v108);
              }
            }
          }
          ++v99;
          ++v101;
        }
        while (v99 != 30);
        v111 = (IOSurfaceID *)(v47 + 476);
        v112 = (const void **)((char *)this + 27312);
        v113 = -30;
        do
        {
          if (*v111)
          {
            v114 = IOSurfaceLookup(*v111);
            *v112 = v114;
            IOSurfaceLock(v114, 0, 0);
            *(v112 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v112);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v115 = AVE_Log_CheckConsole(0x2Eu);
              v116 = AVE_GetCurrTime();
              v117 = AVE_Log_GetLevelStr(7);
              v118 = *v111;
              v119 = *(v112 - 30);
              if (v115)
              {
                printf("%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p\n", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
                v120 = AVE_GetCurrTime();
                v121 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v120, 46, v121, "FrameDone", 5460, v113 + 30, *v111, *v112, *(v112 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d CodedHeader %d %d %p %p", v116, 46, v117, "FrameDone", 5460, v113 + 30, v118, *v112, v119);
              }
            }
          }
          ++v111;
          ++v112;
          v122 = __CFADD__(v113++, 1);
        }
        while (!v122);
        v123 = (IOSurfaceID *)(v47 + 596);
        v124 = (const void **)((char *)this + 27792);
        v125 = -30;
        do
        {
          if (*v123)
          {
            v126 = IOSurfaceLookup(*v123);
            *v124 = v126;
            IOSurfaceLock(v126, 0, 0);
            *(v124 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v124);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v127 = AVE_Log_CheckConsole(0x2Eu);
              v128 = AVE_GetCurrTime();
              v129 = AVE_Log_GetLevelStr(7);
              v130 = *v123;
              v131 = *(v124 - 30);
              if (v127)
              {
                printf("%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p\n", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
                v132 = AVE_GetCurrTime();
                v133 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v132, 46, v133, "FrameDone", 5476, v125 + 30, *v123, *v124, *(v124 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d SliceHeader %d %d %p %p", v128, 46, v129, "FrameDone", 5476, v125 + 30, v130, *v124, v131);
              }
            }
          }
          ++v123;
          ++v124;
          v122 = __CFADD__(v125++, 1);
        }
        while (!v122);
        v134 = (IOSurfaceID *)(v47 + 716);
        v135 = (const void **)((char *)this + 26032);
        v136 = -30;
        do
        {
          if (*v134)
          {
            v137 = IOSurfaceLookup(*v134);
            *v135 = v137;
            IOSurfaceLock(v137, 0, 0);
            *(v135 - 30) = IOSurfaceGetBaseAddress((IOSurfaceRef)*v135);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v138 = AVE_Log_CheckConsole(0x2Eu);
              v139 = AVE_GetCurrTime();
              v140 = AVE_Log_GetLevelStr(7);
              v141 = *v134;
              v142 = *(v135 - 30);
              if (v138)
              {
                printf("%lld %d AVE %s: %s:%d MBStats %d %d %p %p\n", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
                v143 = AVE_GetCurrTime();
                v144 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v143, 46, v144, "FrameDone", 5492, v136 + 30, *v134, *v135, *(v135 - 30));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d MBStats %d %d %p %p", v139, 46, v140, "FrameDone", 5492, v136 + 30, v141, *v135, v142);
              }
            }
          }
          ++v134;
          ++v135;
          v122 = __CFADD__(v136++, 1);
        }
        while (!v122);
        v145 = 0;
        v146 = v47 + 836;
        do
        {
          v147 = *(_DWORD *)(v146 + 4 * v145);
          if (v147)
          {
            *((_DWORD *)this + v145 + 6598) = v147;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v148 = AVE_Log_CheckConsole(0x2Eu);
              v149 = AVE_GetCurrTime();
              v150 = AVE_Log_GetLevelStr(7);
              v151 = *(_DWORD *)(v146 + 4 * v145);
              if (v148)
              {
                printf("%lld %d AVE %s: %s:%d iaLFSResult %d %d\n", v149, 46, v150, "FrameDone", 5506, v145, v151);
                v152 = AVE_GetCurrTime();
                v153 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v152, 46, v153, "FrameDone", 5506, v145, *(_DWORD *)(v146 + 4 * v145));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLFSResult %d %d", v149, 46, v150, "FrameDone", 5506, v145, v151);
              }
            }
          }
          ++v145;
        }
        while (v145 != 10);
        v154 = 0;
        v155 = v47 + 876;
        do
        {
          v156 = *(_DWORD *)(v155 + 4 * v154);
          if (v156)
          {
            *((_DWORD *)this + v154 + 6608) = v156;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v157 = AVE_Log_CheckConsole(0x2Eu);
              v158 = AVE_GetCurrTime();
              v159 = AVE_Log_GetLevelStr(7);
              v160 = *(_DWORD *)(v155 + 4 * v154);
              if (v157)
              {
                printf("%lld %d AVE %s: %s:%d iaLRSResult %d %d\n", v158, 46, v159, "FrameDone", 5518, v154, v160);
                v161 = AVE_GetCurrTime();
                v162 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v161, 46, v162, "FrameDone", 5518, v154, *(_DWORD *)(v155 + 4 * v154));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d iaLRSResult %d %d", v158, 46, v159, "FrameDone", 5518, v154, v160);
              }
            }
          }
          ++v154;
        }
        while (v154 != 10);
        v9 = (char *)this + 239297;
        *((_DWORD *)this + 16887) = *(_DWORD *)(v47 + 2360);
        v38 = (char *)this + 25784;
      }
      goto LABEL_171;
    case 6:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v55 = AVE_Log_CheckConsole(0x2Eu);
        v56 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(7);
        v58 = *((_DWORD *)this + 59827);
        if (v55)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d \n", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v59, 46, v60, *(_DWORD *)(v47 + 160), *((_DWORD *)this + 59827));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_STOP frame %d ClientID %d ", v56, 46, v57, *(_DWORD *)(v47 + 160), v58);
        }
      }
      v79 = 0;
      v80 = (char *)this + 26032;
      do
      {
        v81 = *(__IOSurface **)&v80[v79];
        if (v81)
        {
          IOSurfaceUnlock(v81, 0, 0);
          CFRelease(*(CFTypeRef *)&v80[v79]);
          *(_QWORD *)&v80[v79] = 0;
        }
        v82 = &v80[v79];
        v83 = *(__IOSurface **)&v80[v79 + 680];
        if (v83)
        {
          IOSurfaceUnlock(v83, 0, 0);
          CFRelease(*((CFTypeRef *)v82 + 85));
          *((_QWORD *)v82 + 85) = 0;
        }
        v84 = (__IOSurface *)*((_QWORD *)v82 + 160);
        if (v84)
        {
          IOSurfaceUnlock(v84, 0, 0);
          CFRelease(*((CFTypeRef *)v82 + 160));
          *((_QWORD *)v82 + 160) = 0;
        }
        v85 = &v80[v79];
        v86 = *(__IOSurface **)&v80[v79 + 1760];
        if (v86)
        {
          IOSurfaceUnlock(v86, 0, 0);
          CFRelease(*((CFTypeRef *)v85 + 220));
          *((_QWORD *)v85 + 220) = 0;
        }
        v79 += 8;
      }
      while (v79 != 240);
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      v87 = -1;
      v9 = (char *)this + 239297;
      v38 = (char *)this + 25784;
      goto LABEL_173;
    case 7:
      *(_QWORD *)(v47 + 27704) = AVE_GetCurrTime();
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v61 = v4;
        v62 = AVE_Log_CheckConsole(0x2Eu);
        v63 = AVE_GetCurrTime();
        v64 = AVE_Log_GetLevelStr(7);
        if (v62)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d\n", v63, 46, v64, *(_DWORD *)(v47 + 160), *(_DWORD *)(v47 + 23468), *((_DWORD *)this + 59827), v33);
          v65 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v65);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_YUV frame %d type %d ClientID %d counter %d", v63);
        }
        v4 = v61;
        v38 = (char *)this + 25784;
      }
      if (!*(_DWORD *)(v47 + 160))
        *((_QWORD *)this + 6414) = *(_QWORD *)(v47 + 2344);
      if (*((_DWORD *)this + 16983) >= 2u && *(_DWORD *)(v47 + 168) && *((_BYTE *)this + 51229))
        *(_DWORD *)(v47 + 23468) = 4;
      v88 = *((_DWORD *)this + 59825);
      if (v88 != 3)
      {
        v336 = (int *)(v47 + 23468);
        v93 = *(_DWORD *)(v47 + 23468);
        if (v93 >= 4)
        {
          if (v93 == 4)
          {
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              v278 = AVE_Log_CheckConsole(0x2Eu);
              v279 = AVE_GetCurrTime();
              v280 = AVE_Log_GetLevelStr(5);
              v281 = *v336;
              if (v278)
              {
                printf("%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d\n", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
                v282 = AVE_GetCurrTime();
                v283 = AVE_Log_GetLevelStr(5);
                v38 = (char *)this + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v282, 46, v283, *(_DWORD *)(v47 + 160), *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: DROPPING frame %d type %d", v279, 46, v280, *(_DWORD *)(v47 + 160), v281);
              }
            }
            v334 = (char *)this + 67552;
            v176 = H264VideoEncoderFrameReceiver::DropFrame((uint64_t)this, v47);
            v291 = 0;
            v299 = 0;
          }
          else
          {
            if (v93 == 7)
              goto LABEL_106;
            v334 = (char *)this + 67552;
            if (AVE_Log_CheckLevel(0x2Eu, 4))
            {
              v284 = AVE_Log_CheckConsole(0x2Eu);
              v285 = AVE_GetCurrTime();
              v286 = AVE_Log_GetLevelStr(4);
              v287 = *v336;
              if (v284)
              {
                printf("%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.\n", v285, 46, v286, v287);
                v288 = AVE_GetCurrTime();
                v326 = AVE_Log_GetLevelStr(4);
                v38 = (char *)this + 25784;
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v288, 46, v326, *v336);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FrameType NOT RECOGNIZED = %d. cannot process frame.", v285, 46, v286, v287);
              }
              v291 = 0;
              v299 = 0;
              v176 = 0;
              v87 = -1;
              goto LABEL_361;
            }
            v291 = 0;
            v299 = 0;
            v176 = 0;
          }
          v87 = -1;
          goto LABEL_361;
        }
LABEL_106:
        v94 = *((_QWORD *)this + 6420);
        if (v94 || *v38)
        {
          if (*((_BYTE *)this + 68345) && *(_BYTE *)(v47 + 3990))
          {
            if (v94)
            {
              FigFormatDescriptionRelease();
              *((_QWORD *)this + 6420) = 0;
            }
            if (H264VideoEncoderFrameReceiver::SendSPSandPPS((uint64_t)this, (int *)v47, 0))
            {
              if (!AVE_Log_CheckLevel(3u, 4))
                goto LABEL_26;
              v95 = AVE_Log_CheckConsole(3u);
              v96 = AVE_GetCurrTime();
              v97 = AVE_Log_GetLevelStr(4);
              if (!v95)
                goto LABEL_355;
              v98 = 5292;
LABEL_116:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.\n", v96, 3, v97, "FrameDone", v98, "err == noErr");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
LABEL_355:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS failed.");
              goto LABEL_26;
            }
          }
        }
        else if (v88 == 1
               && H264VideoEncoderFrameReceiver::SendSPSandPPS((uint64_t)this, (int *)v47, *((unsigned __int8 *)this + 67552)))
        {
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_26;
          v289 = AVE_Log_CheckConsole(3u);
          v96 = AVE_GetCurrTime();
          v97 = AVE_Log_GetLevelStr(4);
          if (!v289)
            goto LABEL_355;
          v98 = 5299;
          goto LABEL_116;
        }
        v87 = a3[2];
        v290 = *((_DWORD *)this + 16889) - 1;
        v291 = v290 == v87;
        v334 = (char *)this + 67552;
        if (!*((_BYTE *)this + 67552) || (v87 & 0x80000000) != 0)
        {
          if (*((_DWORD *)this + 59825) == 2)
          {
            v38 = (char *)this + 25784;
            if (H264VideoEncoderFrameReceiver::ProcessAndEmitLrmeStats((uint64_t)this, v47))
            {
              if (AVE_Log_CheckLevel(3u, 4))
              {
                v296 = AVE_Log_CheckConsole(3u);
                v297 = AVE_GetCurrTime();
                v298 = AVE_Log_GetLevelStr(4);
                if (v296)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed\n", v297, 3, v298, "FrameDone", 5330, "err == noErr");
                  AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats failed");
              }
              goto LABEL_26;
            }
          }
          else
          {
            v38 = (char *)this + 25784;
            if (!*((_BYTE *)this + 67552))
            {
              if (H264VideoEncoderFrameReceiver::CollectSlicesSizes((uint64_t)this, v47))
              {
                if (!AVE_Log_CheckLevel(3u, 4))
                  goto LABEL_26;
                v300 = AVE_Log_CheckConsole(3u);
                v293 = AVE_GetCurrTime();
                v294 = AVE_Log_GetLevelStr(4);
                if (!v300)
                  goto LABEL_354;
                v295 = 5339;
                goto LABEL_337;
              }
              Connection::peekPacket(*((_QWORD *)this + 6416), (uint64_t)v346);
              v176 = H264VideoEncoderFrameReceiver::SendFrame((uint64_t)this, v47, v346, 0xFFFFFFFF);
              v299 = 0;
              goto LABEL_361;
            }
          }
          v299 = 0;
          v176 = 0;
        }
        else
        {
          if (H264VideoEncoderFrameReceiver::CollectSlicesSizes((uint64_t)this, v47))
          {
            if (!AVE_Log_CheckLevel(3u, 4))
              goto LABEL_26;
            v292 = AVE_Log_CheckConsole(3u);
            v293 = AVE_GetCurrTime();
            v294 = AVE_Log_GetLevelStr(4);
            if (!v292)
              goto LABEL_354;
            v295 = 5318;
LABEL_337:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.\n", v293, 3, v294, "FrameDone", v295, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
LABEL_354:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes failed.");
            goto LABEL_26;
          }
          Connection::peekPacket(*((_QWORD *)this + 6416), (uint64_t)v346);
          v176 = H264VideoEncoderFrameReceiver::SendFrame((uint64_t)this, v47, v346, v87);
          v299 = 1;
          if (v290 != v87)
          {
            v291 = 0;
            v38 = (char *)this + 25784;
            goto LABEL_372;
          }
          v291 = 1;
          v38 = (char *)this + 25784;
        }
LABEL_361:
        v301 = *(const void **)(v47 + 336);
        if (v301)
        {
          CFRelease(v301);
          *(_QWORD *)(v47 + 336) = 0;
        }
        if (*((_DWORD *)this + 59825) == 1)
        {
          v333 = v299;
          v302 = v291;
          v303 = *((_QWORD *)v334 + 496);
          v304 = AVE_GetCurrTime();
          v305 = v303;
          v291 = v302;
          v299 = v333;
          AVE_TimeStats_AddEndTime(v305, 5u, v304);
        }
        if (v176 && AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v335 = v291;
          v306 = AVE_Log_CheckConsole(0x2Eu);
          v307 = AVE_GetCurrTime();
          v308 = AVE_Log_GetLevelStr(4);
          if (v306)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.\n", v307, 46, v308);
            v309 = AVE_GetCurrTime();
            v327 = AVE_Log_GetLevelStr(4);
            v38 = (char *)this + 25784;
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v309, 46, v327);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: SendFrame failed. continue.", v307, 46, v308);
          }
          v291 = v335;
        }
        AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
LABEL_372:
        if (v299 && !v291 && *v336 != 4)
        {
LABEL_189:
          v4 = v342;
          switch(*(_DWORD *)(v47 + 4))
          {
            case 4:
              LODWORD(v346[0]) = v33;
              v347 = v339;
              v177 = Connection::writePacketBlock(*((_QWORD *)v38 + 3194), (__int128 *)v346);
              if (v176)
              {
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v178 = AVE_Log_CheckConsole(3u);
                  v179 = AVE_GetCurrTime();
                  v180 = AVE_Log_GetLevelStr(4);
                  if (!v178)
                    goto LABEL_324;
                  v181 = 5660;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v177)
                  goto LABEL_242;
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v197 = AVE_Log_CheckConsole(3u);
                  v198 = AVE_GetCurrTime();
                  v199 = AVE_Log_GetLevelStr(4);
                  if (!v197)
                    goto LABEL_348;
                  v200 = 5661;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 5:
              LODWORD(v346[0]) = v33;
              v347 = v339;
              v182 = Connection::writePacketBlock(*((_QWORD *)v38 + 3194), (__int128 *)v346);
              if (v176)
              {
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v183 = AVE_Log_CheckConsole(3u);
                  v179 = AVE_GetCurrTime();
                  v180 = AVE_Log_GetLevelStr(4);
                  if (!v183)
                    goto LABEL_324;
                  v181 = 5676;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v182)
                  goto LABEL_242;
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v201 = AVE_Log_CheckConsole(3u);
                  v198 = AVE_GetCurrTime();
                  v199 = AVE_Log_GetLevelStr(4);
                  if (!v201)
                    goto LABEL_348;
                  v200 = 5677;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 6:
              LODWORD(v346[0]) = v33;
              v347 = v339;
              v184 = Connection::writePacketBlock(*((_QWORD *)v38 + 3194), (__int128 *)v346);
              if (v176)
              {
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v185 = AVE_Log_CheckConsole(3u);
                  v179 = AVE_GetCurrTime();
                  v180 = AVE_Log_GetLevelStr(4);
                  if (!v185)
                    goto LABEL_324;
                  v181 = 5692;
                  goto LABEL_235;
                }
              }
              else
              {
                if (!v184)
                  goto LABEL_242;
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v202 = AVE_Log_CheckConsole(3u);
                  v198 = AVE_GetCurrTime();
                  v199 = AVE_Log_GetLevelStr(4);
                  if (!v202)
                    goto LABEL_348;
                  v200 = 5693;
                  goto LABEL_240;
                }
              }
              goto LABEL_26;
            case 7:
              goto LABEL_242;
            case 8:
              LODWORD(v346[0]) = v33;
              v347 = v339;
              if (AVE_Log_CheckLevel(0x2Eu, 7))
              {
                v186 = AVE_Log_CheckConsole(0x2Eu);
                v187 = AVE_GetCurrTime();
                v188 = AVE_Log_GetLevelStr(7);
                if (v186)
                {
                  printf("%lld %d AVE %s: H264FrameRec: writePacketBlock = %d\n", v187, 46, v188, v33);
                  v189 = AVE_GetCurrTime();
                  v320 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlock = %d", v189, 46, v320, v33);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: writePacketBlock = %d", v187, 46, v188, v33);
                }
                v4 = v342;
              }
              v204 = Connection::writePacketBlock(*((_QWORD *)this + 6417), (__int128 *)v346);
              if (v176)
              {
                v5 = v339;
                if (!AVE_Log_CheckLevel(3u, 4))
                  goto LABEL_26;
                v205 = AVE_Log_CheckConsole(3u);
                v179 = AVE_GetCurrTime();
                v180 = AVE_Log_GetLevelStr(4);
                if (v205)
                {
                  v181 = 5644;
                  goto LABEL_235;
                }
                goto LABEL_324;
              }
              if (!v204)
                goto LABEL_242;
              v5 = v339;
              if (!AVE_Log_CheckLevel(3u, 4))
                goto LABEL_26;
              v206 = AVE_Log_CheckConsole(3u);
              v198 = AVE_GetCurrTime();
              v199 = AVE_Log_GetLevelStr(4);
              if (!v206)
                goto LABEL_348;
              v200 = 5645;
              goto LABEL_240;
            case 0xA:
              LODWORD(v346[0]) = v33;
              v347 = v339;
              v195 = Connection::writePacketBlock(*((_QWORD *)v38 + 3194), (__int128 *)v346);
              if (v176)
              {
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v196 = AVE_Log_CheckConsole(3u);
                  v179 = AVE_GetCurrTime();
                  v180 = AVE_Log_GetLevelStr(4);
                  if (v196)
                  {
                    v181 = 5708;
LABEL_235:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.\n", v179, 3, v180, "FrameDone", v181, "err == noErr");
                    AVE_GetCurrTime();
                    AVE_Log_GetLevelStr(4);
                  }
LABEL_324:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: writePacketBlock failed.");
                }
              }
              else
              {
                if (!v195)
                {
LABEL_242:
                  v5 = v339;
                  if ((*((_BYTE *)AVE_DW_Get() + 784) & 0x20) == 0)
                    goto LABEL_26;
                  v207 = *((_QWORD *)this + 2 * *(unsigned __int8 *)(v47 + 160) + 30141);
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    v208 = AVE_Log_CheckConsole(0x2Eu);
                    v209 = AVE_GetCurrTime();
                    v210 = AVE_Log_GetLevelStr(8);
                    if (v208)
                    {
                      printf("%lld %d AVE %s: \n", v209, 46, v210);
                      v211 = AVE_GetCurrTime();
                      v322 = AVE_Log_GetLevelStr(8);
                      syslog(3, "%lld %d AVE %s: ", v211, 46, v322);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: ", v209, 46, v210);
                    }
                  }
                  v341 = v87;
                  v212 = (double)v207;
                  v213 = *(_DWORD *)(v47 + 160) - 1;
                  v337 = v9;
                  if (v213 < 0)
                  {
                    v214 = 0;
                    LODWORD(v216) = 0;
                    v223 = 0;
                    *(_QWORD *)(v47 + 29368) = 0;
                    v217 = 0.0;
                  }
                  else
                  {
                    v214 = *(_DWORD *)(v47 + 160);
                    v215 = 0;
                    LODWORD(v216) = 0;
                    while (1)
                    {
                      v217 = (v212 - (double)*((uint64_t *)this + 2 * v213 + 30141))
                           / (double)*(int *)(v47 + 2352);
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        v218 = AVE_Log_CheckConsole(0x2Eu);
                        v219 = AVE_GetCurrTime();
                        v220 = AVE_Log_GetLevelStr(8);
                        v221 = *(_DWORD *)(v47 + 160);
                        if (v218)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v219, 46, v220, v221, v213, v216, v217, v215);
                          v222 = AVE_GetCurrTime();
                          v323 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v222, 46, v323, *(_DWORD *)(v47 + 160), v213, v216, v217, v215);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/10 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v219, 46, v220, v221, v213, v216, v217, v215);
                        }
                      }
                      v216 = *((int *)this + 4 * v213 + 60280) + (uint64_t)(int)v216;
                      if (v217 >= 0.1)
                        break;
                      --v213;
                      ++v215;
                      if (v213 == -1)
                        goto LABEL_258;
                    }
                    v214 = v215 + 1;
LABEL_258:
                    *(_QWORD *)(v47 + 29368) = v216;
                    if (v217 == 0.0)
                      v223 = 0;
                    else
                      v223 = (int)((double)(int)v216 / v217);
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    v224 = AVE_Log_CheckConsole(0x2Eu);
                    v225 = AVE_GetCurrTime();
                    v226 = AVE_Log_GetLevelStr(8);
                    if (v224)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d\n", v225, 46, v226, *(_DWORD *)(v47 + 160), v214, v216, v217, v223);
                      v227 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v227);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d, 1/10 -> frames %d, bits %d, timepassed %04.3f, -> bitrate %d", v225);
                    }
                  }
                  v228 = *(_DWORD *)(v47 + 160);
                  v229 = v228 - 1;
                  if (v228 - 1 < 0)
                  {
                    v231 = 0;
                    LODWORD(v230) = 0;
                    v238 = 0;
                    v4 = v342;
                    *(_QWORD *)(v343 + 29376) = 0;
                    v232 = 0.0;
                  }
                  else
                  {
                    LODWORD(v230) = 0;
                    v231 = 1;
                    v4 = v342;
                    do
                    {
                      v232 = (v212 - (double)*((uint64_t *)this + 2 * v229 + 30141))
                           / (double)*(int *)(v343 + 2352);
                      v230 = *((int *)this + 4 * v229 + 60280) + (uint64_t)(int)v230;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        v233 = AVE_Log_CheckConsole(0x2Eu);
                        v234 = AVE_GetCurrTime();
                        v235 = AVE_Log_GetLevelStr(8);
                        v236 = *(_DWORD *)(v343 + 160);
                        if (v233)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v234, 46, v235, v236, v229, v230, v232, v231);
                          v237 = AVE_GetCurrTime();
                          v4 = v342;
                          v324 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v237, 46, v324, *(_DWORD *)(v343 + 160), v229, v230, v232, v231);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v234, 46, v235, v236, v229, v230, v232, v231);
                        }
                      }
                      if (v232 >= 0.5)
                        goto LABEL_274;
                      --v229;
                      ++v231;
                    }
                    while (v229 != -1);
                    v231 = v228;
LABEL_274:
                    *(_QWORD *)(v343 + 29376) = v230;
                    if (v232 == 0.0)
                      v238 = 0;
                    else
                      v238 = (int)((double)(int)v230 / v232);
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    v239 = AVE_Log_CheckConsole(0x2Eu);
                    v240 = AVE_GetCurrTime();
                    v241 = AVE_Log_GetLevelStr(8);
                    if (v239)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v240, 46, v241, *(_DWORD *)(v343 + 160), v231, v230, v232, v238);
                      v242 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v242);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1/2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v240);
                    }
                  }
                  if (*(_DWORD *)(v343 + 160) - 1 <= 0)
                  {
                    v244 = 0;
                    LODWORD(v243) = 0;
                    v255 = 0;
                    *(_QWORD *)(v343 + 29384) = 0;
                    v247 = 0.0;
                  }
                  else
                  {
                    LODWORD(v243) = 0;
                    v244 = 1;
                    v340 = *(_DWORD *)(v343 + 160) - 1;
                    v245 = v340;
                    do
                    {
                      v246 = (int *)((char *)this + 16 * v245 + 241120);
                      v247 = (v212 - (double)*((uint64_t *)this + 2 * v245 + 30141))
                           / (double)*(int *)(v343 + 2352);
                      v243 = *v246 + (uint64_t)(int)v243;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        v248 = AVE_Log_CheckConsole(0x2Eu);
                        v249 = AVE_GetCurrTime();
                        v250 = AVE_Log_GetLevelStr(8);
                        v251 = *(_DWORD *)(v343 + 160);
                        v252 = *v246;
                        if (v248)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d\n", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                          v253 = AVE_GetCurrTime();
                          v254 = AVE_Log_GetLevelStr(8);
                          v4 = v342;
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v253, 46, v254, *(_DWORD *)(v343 + 160), v245, v243, *v246, v247, v244);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> i %d, bits %d (frame %d), timePassed %4.3f, framesUsed %d", v249, 46, v250, v251, v245, v243, v252, v247, v244);
                        }
                      }
                      if (v247 >= 1.0)
                        goto LABEL_291;
                      ++v244;
                      --v245;
                    }
                    while (v245);
                    v244 = v340;
LABEL_291:
                    *(_QWORD *)(v343 + 29384) = v243;
                    if (v247 == 0.0)
                      v255 = 0;
                    else
                      v255 = (int)((double)(int)v243 / v247);
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    v256 = AVE_Log_CheckConsole(0x2Eu);
                    v257 = AVE_GetCurrTime();
                    v258 = AVE_Log_GetLevelStr(8);
                    if (v256)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######\n", v257, 46, v258, *(_DWORD *)(v343 + 160), v244, v243, v247, v255);
                      v259 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v259);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 1 -> frames %d bits %d timepassed %04.3f -> ###### bitrate %d ######", v257);
                    }
                  }
                  v260 = *(_DWORD *)(v343 + 160);
                  v261 = v260 - 1;
                  if (v260 - 1 < 0)
                  {
                    v263 = 0;
                    LODWORD(v262) = 0;
                    v270 = 0;
                    *(_QWORD *)(v343 + 29392) = 0;
                    v264 = 0.0;
                  }
                  else
                  {
                    LODWORD(v262) = 0;
                    v263 = 1;
                    do
                    {
                      v264 = (v212 - (double)*((uint64_t *)this + 2 * v261 + 30141))
                           / (double)*(int *)(v343 + 2352);
                      v262 = *((int *)this + 4 * v261 + 60280) + (uint64_t)(int)v262;
                      if (AVE_Log_CheckLevel(0x2Eu, 8))
                      {
                        v265 = AVE_Log_CheckConsole(0x2Eu);
                        v266 = AVE_GetCurrTime();
                        v267 = AVE_Log_GetLevelStr(8);
                        v268 = *(_DWORD *)(v343 + 160);
                        if (v265)
                        {
                          printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d\n", v266, 46, v267, v268, v261, v262, v264, v263);
                          v269 = AVE_GetCurrTime();
                          v4 = v342;
                          v325 = AVE_Log_GetLevelStr(8);
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v269, 46, v325, *(_DWORD *)(v343 + 160), v261, v262, v264, v263);
                        }
                        else
                        {
                          syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> i %d, bits %d, timePassed %4.3f, framesUsed %d", v266, 46, v267, v268, v261, v262, v264, v263);
                        }
                      }
                      if (v264 >= 2.0)
                        goto LABEL_308;
                      --v261;
                      ++v263;
                    }
                    while (v261 != -1);
                    v263 = v260;
LABEL_308:
                    *(_QWORD *)(v343 + 29392) = v262;
                    if (v264 == 0.0)
                      v270 = 0;
                    else
                      v270 = (int)((double)(int)v262 / v264);
                  }
                  if (AVE_Log_CheckLevel(0x2Eu, 8))
                  {
                    v271 = AVE_Log_CheckConsole(0x2Eu);
                    v272 = AVE_GetCurrTime();
                    v273 = AVE_Log_GetLevelStr(8);
                    if (v271)
                    {
                      printf("%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d\n", v272, 46, v273, *(_DWORD *)(v343 + 160), v263, v262, v264, v270);
                      v274 = AVE_GetCurrTime();
                      AVE_Log_GetLevelStr(8);
                      v4 = v342;
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v274);
                    }
                    else
                    {
                      syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d 2 -> frames %d bits %d timepassed %04.3f -> bitrate %d", v272);
                    }
                  }
                  v275 = *((_DWORD *)this + 17485);
                  *((_BYTE *)this + 239404) = (*((_BYTE *)this + 69848) & 0x10) != 0;
                  v276 = *(_DWORD *)(v337 + 7);
                  *((_DWORD *)this + 59849) = v275;
                  *((_DWORD *)this + 59850) = v276;
                  *((_DWORD *)this + 59848) = *((_DWORD *)AVE_DW_Get() + 197) & 0x20;
                  *((_BYTE *)this + 239405) = *((_BYTE *)this + 67552);
                  *((_DWORD *)this + 59852) = v341;
                  File = (FILE *)AVE_Dump_FindFile(*((_QWORD *)this + 8941), 5u, *(_DWORD *)(v343 + 16));
                  AVE_FrameStats_PrintStatFrame((_BYTE *)this + 239392, v343, File);
                  memcpy((char *)this + 239416, (const void *)(v343 + 27672), 0x698uLL);
                  *((_OWORD *)this + 15069) = *(_OWORD *)(v343 + 2344);
                  v5 = v339;
                  goto LABEL_26;
                }
                v5 = v339;
                if (AVE_Log_CheckLevel(3u, 4))
                {
                  v203 = AVE_Log_CheckConsole(3u);
                  v198 = AVE_GetCurrTime();
                  v199 = AVE_Log_GetLevelStr(4);
                  if (v203)
                  {
                    v200 = 5709;
LABEL_240:
                    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread\n", v198, 3, v199, "FrameDone", v200, "ret == 0");
                    AVE_GetCurrTime();
                    AVE_Log_GetLevelStr(4);
                  }
LABEL_348:
                  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Timed Out waiting for space to write packet to main thread");
                }
              }
              break;
            default:
              if (AVE_Log_CheckLevel(0x2Eu, 4))
              {
                v190 = AVE_Log_CheckConsole(0x2Eu);
                v191 = AVE_GetCurrTime();
                v192 = AVE_Log_GetLevelStr(4);
                v193 = *(_DWORD *)(v47 + 4);
                if (v190)
                {
                  printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v191, 46, v192, v193);
                  v194 = AVE_GetCurrTime();
                  v321 = AVE_Log_GetLevelStr(4);
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v194, 46, v321, *(_DWORD *)(v47 + 4));
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v191, 46, v192, v193);
                }
              }
              goto LABEL_242;
          }
          goto LABEL_26;
        }
        goto LABEL_173;
      }
      v89 = H264VideoEncoderFrameReceiver::SendFrameMCTF((uint64_t)this, v47);
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      if (v89)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v90 = AVE_Log_CheckConsole(3u);
          v91 = AVE_GetCurrTime();
          v92 = AVE_Log_GetLevelStr(4);
          if (v90)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.\n", v91, 3, v92, "FrameDone", 5264, "err == noErr");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF failed.");
        }
        goto LABEL_26;
      }
LABEL_172:
      v87 = -1;
LABEL_173:
      v163 = *((_QWORD *)v38 + 3193);
      pthread_mutex_lock((pthread_mutex_t *)v163);
      do
      {
        v164 = *(_DWORD *)(v163 + 200);
        if (v164)
        {
          v169 = *(_DWORD *)(v163 + 204);
          v170 = *(_DWORD *)(v163 + 196);
          if (v169 + 1 < v170)
            v171 = v169 + 1;
          else
            v171 = 0;
          *(_DWORD *)(v163 + 200) = v164 - 1;
          *(_DWORD *)(v163 + 204) = v171;
          if (v164 == v170)
            pthread_cond_signal((pthread_cond_t *)(v163 + 112));
          pthread_mutex_unlock((pthread_mutex_t *)v163);
          v38 = (char *)this + 25784;
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v172 = AVE_Log_CheckConsole(0x2Eu);
            v173 = AVE_GetCurrTime();
            v174 = AVE_Log_GetLevelStr(7);
            if (v172)
            {
              printf("%lld %d AVE %s: H264FrameRec: readPacketBlock = %d\n", v173, 46, v174, v33);
              v175 = AVE_GetCurrTime();
              v319 = AVE_Log_GetLevelStr(7);
              v38 = (char *)this + 25784;
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlock = %d", v175, 46, v319, v33);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: readPacketBlock = %d", v173, 46, v174, v33);
            }
          }
          v176 = 0;
          goto LABEL_189;
        }
        gettimeofday((timeval *)(v163 + 176), 0);
        v165 = (1000 * *(_DWORD *)(v163 + 184));
        *(_QWORD *)(v163 + 160) = *(_QWORD *)(v163 + 176) + 120;
        *(_QWORD *)(v163 + 168) = v165;
      }
      while (pthread_cond_timedwait((pthread_cond_t *)(v163 + 64), (pthread_mutex_t *)v163, (const timespec *)(v163 + 160)) != 60);
      pthread_mutex_unlock((pthread_mutex_t *)v163);
      v5 = v339;
      v4 = v342;
      if (!AVE_Log_CheckLevel(3u, 4))
        goto LABEL_26;
      v166 = AVE_Log_CheckConsole(3u);
      v167 = AVE_GetCurrTime();
      v168 = AVE_Log_GetLevelStr(4);
      if (v166)
      {
        v21 = v342;
        v22 = 3;
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d\n", v167, 3, v168, "FrameDone", 5620, "err == noErr", -1);
        v23 = AVE_GetCurrTime();
        v329 = "err == noErr";
        v330 = 0xFFFFFFFFLL;
        v328 = 5620;
        v313 = AVE_Log_GetLevelStr(4);
        v25 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d";
        goto LABEL_23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: readPacketBlock failed. %d", v167);
LABEL_26:
      if (AVE_Log_CheckLevel(0x2Eu, 8))
      {
        v26 = AVE_Log_CheckConsole(0x2Eu);
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(8);
        if (v26)
        {
          printf("%lld %d AVE %s: %s Exit %p 0x%x %p %d\n", v27, 46, v28, "FrameDone", this, v5, a3, v4);
          v29 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v29, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s Exit %p 0x%x %p %d", v27, 46);
        }
      }
      return;
    case 8:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v66 = AVE_Log_CheckConsole(0x2Eu);
        v67 = AVE_GetCurrTime();
        v68 = AVE_Log_GetLevelStr(7);
        if (v66)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d\n", v67, 46, v68, *(_DWORD *)(v47 + 160), v33, *((_DWORD *)this + 59827));
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          v38 = (char *)this + 25784;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_COMPLETE frame %d counter %d ClientID %d");
      }
      goto LABEL_171;
    case 0xA:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v74 = AVE_Log_CheckConsole(0x2Eu);
        v75 = AVE_GetCurrTime();
        v76 = AVE_Log_GetLevelStr(7);
        v77 = *(_DWORD *)(v47 + 160);
        if (v74)
        {
          printf("%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d\n", v75, 46, v76, v77);
          v78 = AVE_GetCurrTime();
          v318 = AVE_Log_GetLevelStr(7);
          v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v78, 46, v318, *(_DWORD *)(v47 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: DataType_RESETMULTIPASS frame %d", v75, 46, v76, v77);
        }
      }
      if (*v338)
        AVE_MultiPass::FlushStats((H264VideoEncoderFrameReceiver *)((char *)this + 8), *v338, 0);
      *v38 = 0;
      if (*((_QWORD *)v38 + 3197))
      {
        FigFormatDescriptionRelease();
        *((_QWORD *)v38 + 3197) = 0;
      }
LABEL_171:
      AVE_DAL::Free(*((AVE_DAL **)this + 6415), (const void *)v47);
      goto LABEL_172;
    default:
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        v69 = AVE_Log_CheckConsole(0x2Eu);
        v70 = AVE_GetCurrTime();
        v71 = AVE_Log_GetLevelStr(4);
        v72 = *(_DWORD *)(v47 + 4);
        if (v69)
        {
          printf("%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame\n", v70, 46, v71, v72);
          v73 = AVE_GetCurrTime();
          v317 = AVE_Log_GetLevelStr(4);
          v38 = (char *)this + 25784;
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v73, 46, v317, *(_DWORD *)(v47 + 4));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: OutputDataFromKernel.type NOT RECOGNIZED = %d. cannot process frame", v70, 46, v71, v72);
        }
      }
      goto LABEL_172;
  }
}

uint64_t H264VideoEncoderFrameReceiver::removeEPB(H264VideoEncoderFrameReceiver *this, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned __int8 *v9;
  int v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  uint64_t result;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;

  if (!a2)
  {
    result = AVE_Log_CheckLevel(3u, 4);
    if (!(_DWORD)result)
      return result;
    v15 = AVE_Log_CheckConsole(3u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v15)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL\n", CurrTime, 3, LevelStr, "removeEPB", 617, "p_buf_start != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: input buffer NULL. FAIL");
    return 0;
  }
  if (a3 <= 2)
  {
    result = AVE_Log_CheckLevel(3u, 4);
    if (!(_DWORD)result)
      return result;
    v18 = AVE_Log_CheckConsole(3u);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL\n", v19, 3, v20, "removeEPB", 618, "length >= 3");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: lenght < 3. FAIL");
    return 0;
  }
  v4 = (int)a4;
  if (!a4)
  {
    result = AVE_Log_CheckLevel(3u, 4);
    if (!(_DWORD)result)
      return result;
    v21 = AVE_Log_CheckConsole(3u);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL\n", v22, 3, v23, "removeEPB", 619, "outbuffer != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE - removeEPB: output buffer NULL. FAIL");
    return 0;
  }
  v6 = 0;
  v7 = 0;
  v9 = a4;
  do
  {
    v10 = a2[v6];
    v7 = v10 | (v7 << 8);
    if ((v7 & 0xFFFFFF) == 3)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v11 = AVE_Log_CheckConsole(0x2Eu);
        v12 = AVE_GetCurrTime();
        v13 = AVE_Log_GetLevelStr(7);
        if (v11)
        {
          printf("%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!\n", v12, 46, v13, (_DWORD)v9 - v4, v6);
          v12 = AVE_GetCurrTime();
          v13 = AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: AddEPB: found one emulation at position %d (%d)!!!", v12, 46, v13, (_DWORD)v9 - v4, v6);
      }
    }
    else
    {
      *v9++ = v10;
    }
    ++v6;
  }
  while (a3 != (_DWORD)v6);
  return ((_DWORD)v9 - v4);
}

uint64_t H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE *v9;
  _DWORD *v10;
  int v11;
  size_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  unsigned int v16;
  __uint64_t v17;
  const char *v18;
  size_t v19;
  int v20;
  __uint64_t CurrTime;
  const char *LevelStr;
  unsigned int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  size_t v30;
  CFIndex v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  size_t v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  __uint64_t v46;
  size_t v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  unsigned int v51;
  __uint64_t v52;
  const char *v53;
  const __CFAllocator *v54;
  UInt8 *v55;
  char *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  UInt8 *v60;
  const CFDictionaryKeyCallBacks *v61;
  const CFDictionaryValueCallBacks *v62;
  CFDictionaryRef v63;
  __CFDictionary *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  __uint64_t v71;
  uint64_t v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  CFIndex v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  int v80;
  __uint64_t v81;
  const char *v82;
  unsigned int v83;
  char *v84;
  _BYTE *v85;
  char *v86;
  int v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  __uint64_t v91;
  H264VideoEncoderFrameReceiver *v92;
  int v93;
  __uint64_t v94;
  const char *v95;
  __uint64_t v96;
  const __CFAllocator *v97;
  CFMutableDataRef Mutable;
  __CFData *v99;
  UInt8 *MutableBytePtr;
  H264VideoEncoderFrameReceiver *v101;
  uint64_t v102;
  UInt8 v103;
  uint64_t i;
  UInt8 v105;
  char v106;
  UInt8 *v107;
  uint64_t v108;
  UInt8 *v109;
  signed int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  UInt8 *v117;
  uint64_t v118;
  const CFDictionaryKeyCallBacks *v119;
  const CFDictionaryValueCallBacks *v120;
  int *v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  __uint64_t v126;
  const char *v127;
  __uint64_t v128;
  int v129;
  __uint64_t v130;
  const char *v131;
  int v132;
  __uint64_t v133;
  const char *v134;
  uint64_t v135;
  int v136;
  __uint64_t v137;
  const char *v138;
  uint64_t VideoFormatDescription;
  const char *v141;
  const char *v142;
  const char *v143;
  const char *v144;
  const char *v145;
  CFIndex v146;
  size_t v147;
  size_t __n;
  CFAllocatorRef allocatora;
  _BYTE *v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  _DWORD *v157;
  void *keys;
  int v159;
  void *values;
  CFTypeRef cf;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 71540;
  v9 = (_BYTE *)(a1 + 68221);
  v10 = (_DWORD *)(a1 + 51376);
  values = 0;
  cf = 0;
  v159 = 0;
  v11 = *(_DWORD *)(a1 + 68256);
  if (v11 == 1)
  {
    v19 = *a4 - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v20 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      v23 = *a4;
      if (v20)
      {
        printf("%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)\n", CurrTime, 46, LevelStr, v19, v23);
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", v24, 46, v25, v19, *a4);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: VPSLengthNoStartCode %d (%d)", CurrTime, 46, LevelStr, v19, v23);
      }
    }
    v157 = v10;
    v47 = a4[1] - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v48 = AVE_Log_CheckConsole(0x2Eu);
      v49 = AVE_GetCurrTime();
      v50 = AVE_Log_GetLevelStr(7);
      v51 = a4[1];
      if (v48)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v49, 46, v50, v47, v51);
        v52 = AVE_GetCurrTime();
        v53 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v52, 46, v53, v47, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v49, 46, v50, v47, v51);
      }
    }
    v154 = v8;
    v156 = v9;
    v151 = (_BYTE *)a1;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v147 = v47;
    __n = v19;
    v76 = v19 + v47 + 36;
    if ((int)v157[4043] >= 1)
    {
      v77 = 0;
      v78 = a4 + 2;
      do
      {
        v79 = v78[v77] - 4;
        *((_QWORD *)&v162 + v77) = v79;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v80 = AVE_Log_CheckConsole(0x2Eu);
          v81 = AVE_GetCurrTime();
          v82 = AVE_Log_GetLevelStr(7);
          v83 = v78[v77];
          if (v80)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v81, 46, v82, v77, v79, v83);
            v81 = AVE_GetCurrTime();
            v82 = AVE_Log_GetLevelStr(7);
            v83 = v78[v77];
          }
          syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v81, 46, v82, v77, v79, v83);
        }
        v76 += v79 + 2;
        ++v77;
      }
      while (v77 < (int)v157[4043]);
    }
    if (*v156)
    {
      v84 = (char *)malloc_type_malloc(0x11uLL, 0x11244186uLL);
      v85 = v151;
      if (!v84)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v88 = AVE_Log_CheckConsole(3u);
          v89 = AVE_GetCurrTime();
          v90 = AVE_Log_GetLevelStr(4);
          if (v88)
          {
            printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.\n", v89, 3, v90, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
            v91 = AVE_GetCurrTime();
            v143 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v91, 3, v143, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate SEI Data Buffer.", v89, 3, v90, "CreatevideoFormatDesc", 976, "SEI_Data != __null");
          }
        }
        v86 = 0;
LABEL_114:
        v72 = 4294954384;
        goto LABEL_115;
      }
      v86 = v84;
      v87 = AddAmbientViewingEnvironmentSEI((uint64_t)v84, (uint64_t)(v151 + 68136), a5, &v159);
      if (v87)
      {
        v72 = AVE_RetCode2IOReturn(v87);
LABEL_115:
        v92 = 0;
        goto LABEL_116;
      }
      v76 += v159 + 1;
    }
    else
    {
      v86 = 0;
      v85 = v151;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v93 = AVE_Log_CheckConsole(0x2Eu);
      v94 = AVE_GetCurrTime();
      v95 = AVE_Log_GetLevelStr(7);
      if (v93)
      {
        printf("%lld %d AVE %s: H264FrameRec: hevccSize %d\n", v94, 46, v95, v76);
        v96 = AVE_GetCurrTime();
        v144 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v96, 46, v144, v76);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: hevccSize %d", v94, 46, v95, v76);
      }
    }
    v97 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v76);
    cf = Mutable;
    if (Mutable)
    {
      v99 = Mutable;
      CFDataSetLength(Mutable, v76);
      MutableBytePtr = CFDataGetMutableBytePtr(v99);
      v101 = (H264VideoEncoderFrameReceiver *)malloc_type_malloc(0x22uLL, 0x99A3ADE8uLL);
      if (v101)
      {
        v92 = v101;
        H264VideoEncoderFrameReceiver::removeEPB(v101, a3, 0x22u, (unsigned __int8 *)v101);
        v102 = 0;
        *MutableBytePtr = 1;
        MutableBytePtr[1] = *((_BYTE *)v92 + 10);
        do
        {
          v103 = *((_BYTE *)v92 + v102 + 11);
          MutableBytePtr[v102 + 2] = v103;
          v85[v102++ + 239272] = v103;
        }
        while (v102 != 4);
        for (i = 0; i != 6; ++i)
        {
          v105 = *((_BYTE *)v92 + i + 15);
          MutableBytePtr[i + 6] = v105;
          v85[i + 239276] = v105;
        }
        MutableBytePtr[12] = *((_BYTE *)v92 + 21);
        *(_WORD *)(MutableBytePtr + 13) = 240;
        MutableBytePtr[15] = -4;
        MutableBytePtr[16] = v85[158948] | 0xFC;
        MutableBytePtr[17] = v85[158992] | 0xF8;
        v152 = (int *)(v85 + 158948);
        MutableBytePtr[18] = v85[158996] | 0xF8;
        *(_WORD *)(MutableBytePtr + 19) = 0;
        MutableBytePtr[21] = 11;
        if (*v156)
          v106 = 4;
        else
          v106 = 3;
        MutableBytePtr[22] = v106;
        MutableBytePtr[23] = -96;
        *((_WORD *)MutableBytePtr + 12) = 256;
        *((_WORD *)MutableBytePtr + 13) = bswap32(__n) >> 16;
        memcpy(MutableBytePtr + 28, a3 + 4, __n);
        v107 = &MutableBytePtr[__n];
        v107[28] = -95;
        *(_WORD *)(v107 + 29) = 256;
        *(_WORD *)(v107 + 31) = bswap32(v147) >> 16;
        memcpy(&MutableBytePtr[__n + 33], &a3[*a4 + 4], v147);
        v108 = *a4;
        v109 = &MutableBytePtr[__n + 33 + v147];
        *v109 = -94;
        v110 = v157[4043];
        *(_WORD *)(v109 + 1) = bswap32(v110) >> 16;
        v111 = __n + 33 + v147 + 3;
        if (v110 >= 1)
        {
          v112 = 0;
          v113 = &a3[v108 + 4];
          do
          {
            v114 = *((_QWORD *)&v162 + v112);
            *(_WORD *)&MutableBytePtr[v111] = bswap32(v114) >> 16;
            v115 = v111 + 2;
            v116 = v112 + 1;
            v113 += a4[v112 + 1];
            memcpy(&MutableBytePtr[v111 + 2], v113, v114);
            v111 = v114 + v115;
            v112 = v116;
          }
          while (v116 < (int)v157[4043]);
        }
        if (*v156)
        {
          v117 = &MutableBytePtr[v111];
          *v117 = -89;
          *(_WORD *)(v117 + 1) = 256;
          v118 = v159 - 4;
          *(_WORD *)(v117 + 3) = bswap32(v118) >> 16;
          memcpy(v117 + 5, v86 + 4, v118);
        }
        keys = CFSTR("hvcC");
        v119 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v120 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        v63 = CFDictionaryCreate(v97, (const void **)&keys, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v64 = CFDictionaryCreateMutable(v97, 0, v119, v120);
        CFDictionaryAddValue(v64, (const void *)*MEMORY[0x1E0CA2240], v63);
        CFDictionaryAddValue(v64, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("HEVC"));
        v121 = v152;
        v122 = *v152;
        if (v122 >= 4)
        {
          v72 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v136 = AVE_Log_CheckConsole(3u);
            v137 = AVE_GetCurrTime();
            v138 = AVE_Log_GetLevelStr(4);
            if (v136)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v137, 3, v138, "CreatevideoFormatDesc", 1197, "false", *(_DWORD *)(v154 + 36));
              v137 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v137);
          }
        }
        else
        {
          v123 = *v157 + v152[8] * dword_1B5625F00[v122];
          v124 = v157[1] + v152[10] * dword_1B5625F10[v122];
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v125 = AVE_Log_CheckConsole(0x2Eu);
            v126 = AVE_GetCurrTime();
            v127 = AVE_Log_GetLevelStr(7);
            if (v125)
            {
              printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v126, 46, v127, *v157, v157[1], v123, v124, v152[8], v152[10]);
              v128 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(7);
              v121 = v152;
              syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v128, 46);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v126, 46);
            }
          }
          if (v121[1667])
            CFDictionarySetValue(v64, (const void *)*MEMORY[0x1E0CA21D0], (const void *)*MEMORY[0x1E0C9AE50]);
          if (v156[124])
            VideoFormatDescription = VTTileEncoderSessionCreateVideoFormatDescription();
          else
            VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
          v72 = VideoFormatDescription;
        }
        goto LABEL_102;
      }
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v132 = AVE_Log_CheckConsole(3u);
        v133 = AVE_GetCurrTime();
        v134 = AVE_Log_GetLevelStr(4);
        if (v132)
        {
          printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.\n", v133, 3, v134, "CreatevideoFormatDesc", 1003, "EPB_PSData != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec allocate PS EPB Data Buffer.");
      }
    }
    else if (AVE_Log_CheckLevel(3u, 4))
    {
      v129 = AVE_Log_CheckConsole(3u);
      v130 = AVE_GetCurrTime();
      v131 = AVE_Log_GetLevelStr(4);
      if (v129)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld\n", v130, 3, v131, "CreatevideoFormatDesc", 993, "hevccData != __null", v76);
        v130 = AVE_GetCurrTime();
        v146 = v76;
        v145 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v146 = v76;
        v145 = v131;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to call CFDataCreateMutable %ld", v130, 3, v145, "CreatevideoFormatDesc", 993, "hevccData != __null", v146);
    }
    goto LABEL_114;
  }
  if (!v11)
  {
    v12 = a4[1] - 4;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v13 = AVE_Log_CheckConsole(0x2Eu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(7);
      v16 = a4[1];
      if (v13)
      {
        printf("%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)\n", v14, 46, v15, v12, v16);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v17, 46, v18, v12, a4[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: SPSLengthNoStartCode %d (%d)", v14, 46, v15, v12, v16);
      }
    }
    v153 = v8;
    allocatora = (CFAllocatorRef)a4;
    v155 = v9;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v30 = v12 + 9;
    v31 = v12 + 9;
    if ((int)v10[4043] >= 1)
    {
      v32 = 0;
      v33 = (char *)allocatora + 8;
      v31 = v12 + 9;
      do
      {
        v34 = (*(_DWORD *)&v33[4 * v32] - 4);
        *((_QWORD *)&v162 + v32) = v34;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v35 = v10;
          v36 = AVE_Log_CheckConsole(0x2Eu);
          v37 = AVE_GetCurrTime();
          v38 = AVE_Log_GetLevelStr(7);
          v39 = *(_DWORD *)&v33[4 * v32];
          if (v36)
          {
            printf("%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)\n", v37, 46, v38, v32, v34, v39);
            v40 = AVE_GetCurrTime();
            v41 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v40, 46, v41, v32, v34, *(_DWORD *)&v33[4 * v32]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: PPSLengthNoStartCode0[%d] %d (%d)", v37, 46, v38, v32, v34, v39);
          }
          v10 = v35;
        }
        v31 += v34 + 2;
        ++v32;
      }
      while (v32 < (int)v10[4043]);
    }
    if (*(_DWORD *)v153 == 100 || *(_DWORD *)v153 == 122)
      v31 += 4;
    v42 = v12;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v43 = AVE_Log_CheckConsole(0x2Eu);
      v44 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(7);
      if (v43)
      {
        printf("%lld %d AVE %s: H264FrameRec: avccSize %d\n", v44, 46, v45, v31);
        v46 = AVE_GetCurrTime();
        v142 = AVE_Log_GetLevelStr(7);
        v42 = v12;
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v46, 46, v142, v31);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: avccSize %d", v44, 46, v45, v31);
      }
    }
    v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v31);
    CFDataSetLength((CFMutableDataRef)values, v31);
    v55 = CFDataGetMutableBytePtr((CFMutableDataRef)values);
    *v55 = 1;
    v55[1] = a3[5];
    v55[2] = a3[6];
    v55[3] = a3[7];
    *((_WORD *)v55 + 2) = -7681;
    *((_WORD *)v55 + 3) = bswap32(v42) >> 16;
    v56 = (char *)(a3 + 4);
    memcpy(v55 + 8, a3 + 4, v42);
    v55[v42 + 8] = v10[4043];
    if ((int)v10[4043] >= 1)
    {
      v57 = 0;
      do
      {
        v58 = *((_QWORD *)&v162 + v57);
        *(_WORD *)&v55[v30] = bswap32(v58) >> 16;
        v59 = v57 + 1;
        v56 += *((unsigned int *)allocatora + v57 + 1);
        memcpy(&v55[v30 + 2], v56, v58);
        v30 += v58 + 2;
        v57 = v59;
      }
      while (v59 < (int)v10[4043]);
    }
    if (*(_DWORD *)v153 == 100 || *(_DWORD *)v153 == 122)
    {
      v60 = &v55[v30];
      *v60 = *(_BYTE *)(v153 + 36) | 0xFC;
      v60[1] = *(_BYTE *)(v153 + 44) | 0xF8;
      v60[2] = *(_BYTE *)(v153 + 48) | 0xF8;
      v60[3] = 0;
    }
    keys = CFSTR("avcC");
    v61 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v62 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v63 = CFDictionaryCreate(v54, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v64 = CFDictionaryCreateMutable(v54, 0, v61, v62);
    CFDictionaryAddValue(v64, (const void *)*MEMORY[0x1E0CA2240], v63);
    CFDictionaryAddValue(v64, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("H.264"));
    v65 = *(int *)(v153 + 36);
    if (v65 >= 4)
    {
      v72 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v73 = AVE_Log_CheckConsole(3u);
        v74 = AVE_GetCurrTime();
        v75 = AVE_Log_GetLevelStr(4);
        if (v73)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.\n", v74, 3, v75, "CreatevideoFormatDesc", 856, "false", *(_DWORD *)(v153 + 36));
          v74 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc chroma_format_idc (%d) not supported.", v74);
      }
    }
    else
    {
      v66 = *v10 + *(_DWORD *)(v153 + 1172) * dword_1B5625F00[v65];
      v67 = v10[1] + *(_DWORD *)(v153 + 1180) * dword_1B5625F10[v65];
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v68 = AVE_Log_CheckConsole(0x2Eu);
        v69 = AVE_GetCurrTime();
        v70 = AVE_Log_GetLevelStr(7);
        if (v68)
        {
          printf("%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d\n", v69, 46, v70, *v10, v10[1], v66, v67, *(_DWORD *)(v153 + 1172), *(_DWORD *)(v153 + 1180));
          v71 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v71, 46);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: for FIG coded: %d - %d, passed %d - %d, crop %d - %d", v69, 46);
        }
      }
      if (*(_DWORD *)(v153 + 1096))
        CFDictionarySetValue(v64, (const void *)*MEMORY[0x1E0CA21D0], (const void *)*MEMORY[0x1E0C9AE50]);
      if (v155[124])
        v135 = VTTileEncoderSessionCreateVideoFormatDescription();
      else
        v135 = VTEncoderSessionCreateVideoFormatDescription();
      v72 = v135;
    }
    v92 = 0;
    v86 = 0;
LABEL_102:
    if (v64)
      CFRelease(v64);
    if (v63)
      CFRelease(v63);
    goto LABEL_116;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v26 = AVE_Log_CheckConsole(3u);
    v27 = AVE_GetCurrTime();
    v28 = AVE_Log_GetLevelStr(4);
    if (v26)
    {
      printf("%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.\n", v27, 3, v28, "CreatevideoFormatDesc", 1248, "false");
      v29 = AVE_GetCurrTime();
      v141 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v29, 3, v141, "CreatevideoFormatDesc", 1248, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | CreatevideoFormatDesc ERROR: codec Type not recognized.", v27, 3, v28, "CreatevideoFormatDesc", 1248, "false");
    }
  }
  v92 = 0;
  v86 = 0;
  v72 = 4294954384;
LABEL_116:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v86)
    free(v86);
  if (v92)
    free(v92);
  return v72;
}

uint64_t H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  uint64_t MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  const char *v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  int v37;
  const char *v38;
  int v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  __uint64_t v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  __uint64_t v47;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  CFMutableDictionaryRef theDict;
  _OWORD v58[5];
  int v59;
  unsigned int v60;

  v9 = a1 + 67932;
  v60 = 0;
  theDict = 0;
  if (*(_BYTE *)(a1 + 68221))
  {
    v10 = malloc_type_malloc(0x11uLL, 0xC8E11BDFuLL);
    if (!v10)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        v22 = AVE_Log_CheckConsole(0x2Eu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v22)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d\n", CurrTime, 46, LevelStr, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1311, "pSEIData != __null", 17);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate SEI memory %d", CurrTime, 46);
      }
      goto LABEL_55;
    }
    v11 = v10;
    v12 = AddAmbientViewingEnvironmentSEI((uint64_t)v10, a1 + 68136, a5, &v60);
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        v14 = AVE_Log_CheckConsole(0x2Eu);
        v15 = AVE_GetCurrTime();
        v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to add SEI %d\n", v15, 46, v16, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1315, "ret == 0", 17);
          v15 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add SEI %d", v15, 46);
      }
      goto LABEL_57;
    }
  }
  else
  {
    v11 = 0;
  }
  if (*(_DWORD *)v9 >= 2u)
  {
    MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults = VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults();
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v34 = AVE_Log_CheckConsole(0x2Eu);
      v35 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(4);
      if (v34)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d\n", v35, 46, v36, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults);
        v35 = AVE_GetCurrTime();
        v55 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        v50 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v55 = MVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults;
        v50 = v36;
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults %d", v35, 46, v50, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1324, "pSEI3D != __null", v55);
    }
    goto LABEL_56;
  }
  v19 = *(_DWORD *)(a5 + 172);
  v18 = a5 + 172;
  if (v19)
  {
    v20 = *(_OWORD *)(v18 + 48);
    v58[2] = *(_OWORD *)(v18 + 32);
    v58[3] = v20;
    v58[4] = *(_OWORD *)(v18 + 64);
    v59 = *(_DWORD *)(v18 + 80);
    v21 = *(_OWORD *)(v18 + 16);
    v58[0] = *(_OWORD *)v18;
    v58[1] = v21;
    goto LABEL_17;
  }
  AVE_PS_Parse(a3, a4, 1, 2, (int *)v58);
  if (!v11)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v40 = AVE_Log_CheckConsole(0x2Eu);
      v41 = AVE_GetCurrTime();
      v42 = AVE_Log_GetLevelStr(4);
      if (v40)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d\n", v41, 46, v42, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1335, "pSEIData != __null", a3, a4);
        v43 = AVE_GetCurrTime();
        v51 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v43, 46, v51);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to parse PS %p %d", v41, 46, v42);
      }
    }
LABEL_55:
    v11 = 0;
    goto LABEL_56;
  }
LABEL_17:
  AVE_PS_Make_hvcC_Dict(0, a3, (unsigned int *)v58, v11, v60, 0, 0, (const void *)(a1 + 158376), &theDict);
  if (!theDict)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v30 = AVE_Log_CheckConsole(0x2Eu);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(4);
      if (v30)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d\n", v31, 46, v32, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1347, "pCFDict != __null", a3, a4);
        v31 = AVE_GetCurrTime();
        v54 = a3;
        v56 = a4;
        v53 = 1347;
        v49 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v54 = a3;
        v56 = a4;
        v53 = 1347;
        v49 = v32;
      }
      v33 = "%lld %d AVE %s: %s::%s:%d %s | failed to make hvcC dictionary %p %d";
      goto LABEL_51;
    }
LABEL_56:
    v13 = 4294966293;
    goto LABEL_57;
  }
  v13 = AVE_PS_Add_lhvC_Dict(1, a3, (unsigned int *)v58, (const void *)(a1 + 158376), theDict);
  if (!theDict)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v37 = AVE_Log_CheckConsole(0x2Eu);
      v31 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(4);
      if (v37)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d\n", v31, 46, v38, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1353, "pCFDict != __null", a3, a4);
        v31 = AVE_GetCurrTime();
        v54 = a3;
        v56 = a4;
        v53 = 1353;
        v49 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v54 = a3;
        v56 = a4;
        v53 = 1353;
        v49 = v38;
      }
      v33 = "%lld %d AVE %s: %s::%s:%d %s | failed to add lhvC dictionary %p %d";
LABEL_51:
      syslog(3, v33, v31, 46, v49, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", v53, "pCFDict != __null", v54, v56);
      goto LABEL_56;
    }
    goto LABEL_56;
  }
  if (*(_DWORD *)(a1 + 165616))
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA21D0], (const void *)*MEMORY[0x1E0C9AE50]);
  v25 = *(_DWORD *)(a1 + 51376);
  v26 = *(int *)(a1 + 158948);
  if ((int)v26 > 3)
  {
    v28 = 0;
  }
  else
  {
    v27 = (int *)((char *)&gc_iaAVE_SubC + 8 * v26);
    v29 = *v27;
    v28 = v27[1];
    v25 -= v29 * *(_DWORD *)(a1 + 158980);
  }
  v39 = *(_DWORD *)(a1 + 51380) - *(_DWORD *)(a1 + 158988) * v28;
  if (*(_BYTE *)(v9 + 413))
  {
    if (!VTTileEncoderSessionCreateVideoFormatDescription())
      goto LABEL_57;
  }
  else if (!VTEncoderSessionCreateVideoFormatDescription())
  {
    goto LABEL_57;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    v44 = AVE_Log_CheckConsole(0x2Eu);
    v45 = AVE_GetCurrTime();
    v46 = AVE_Log_GetLevelStr(4);
    if (v44)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p\n", v45, 46, v46, "AVE_FrameRecv", "CreatevideoFormatDesc_MVHEVC", 1390, "res == noErr", v25, v39, theDict);
      v47 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v47, 46, v52);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create format descriptor %d %d %p", v45, 46, v46);
    }
  }
  v13 = 4294966296;
LABEL_57:
  if (theDict)
  {
    CFRelease(theDict);
    theDict = 0;
  }
  if (v11)
    free(v11);
  return v13;
}

uint64_t H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  int v8;
  __uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  const char *v21;
  FILE *File;
  FILE *v23;

  if (a2)
  {
    v4 = *(unsigned int *)(a2 + 916);
    if (v4 >= 0x1F)
    {
      v11 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v15 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d\n", CurrTime, 3, LevelStr, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame->PlaneNumber = %d", CurrTime, 3, LevelStr, "DoneWithThisFrameFromTheHW", 1424, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v4 + 27072);
      if (v6)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v8 = AVE_Log_CheckConsole(0x2Eu);
          v9 = AVE_GetCurrTime();
          v10 = AVE_Log_GetLevelStr(7);
          if (v8)
          {
            printf("%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d\n", v9, 46, v10, "DoneWithThisFrameFromTheHW", 1430, *(_DWORD *)(a2 + 916), *(_DWORD *)(v6 + 384));
            v9 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: %s:%d H264FrameRec: DoneWithThis PlaneNumber %d size %d", v9);
        }
        AVE_Dump_WriteVQMetrics(*(_QWORD **)(a1 + 71528), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (float *)(v6 + 182920));
        AVE_Dump_WriteFPS(*(_QWORD **)(a1 + 71528), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 160), (double *)(a2 + 67288));
        File = (FILE *)AVE_Dump_FindFile(*(_QWORD *)(a1 + 71528), 7u, *(_DWORD *)(a2 + 12));
        AVE_MCTFStats_PrintAll((_BYTE *)(v6 + 181488), File, *(_DWORD *)(a2 + 160));
        v23 = (FILE *)AVE_Dump_FindFile(*(_QWORD *)(a1 + 71528), 6u, *(_DWORD *)(a2 + 12));
        AVE_FwStats_PrintAll((char *)(v6 + 143600), (int *)(a2 + 27568), v23, *(_DWORD *)(a2 + 160), a3);
        AVE_Dump_WriteHwEventTrace(*(_QWORD **)(a1 + 71528), *(_DWORD *)(a2 + 12), (int *)(v6 + 181640));
        bzero((void *)v6, 0x2CAB8uLL);
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        v11 = AVE_Log_CheckConsole(3u);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(4);
        if (!(_DWORD)v11)
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
          return v11;
        }
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v18, 3, v19, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL", v20, 3, v21, "DoneWithThisFrameFromTheHW", 1428, "codedHeader != __null");
      }
      return 0;
    }
  }
  else
  {
    v11 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v12 = AVE_Log_CheckConsole(3u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL\n", v13, 3, v14, "DoneWithThisFrameFromTheHW", 1423, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DoneWithThisFrameFromTheHW Frame == NULL");
    }
  }
  return v11;
}

uint64_t H264VideoEncoderFrameReceiver::CollectSlicesSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  __uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v21;
  __uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  unsigned int v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  int v37;
  const char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  __uint64_t v46;
  const char *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  int v54;
  uint64_t v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  unsigned __int8 *v66;
  __uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  __uint64_t v84;
  const char *v85;
  int v86;
  __uint64_t v87;
  const char *v88;
  __uint64_t v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  int v93;
  __uint64_t v94;
  const char *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  int *v99;
  int v100;
  __uint64_t v101;
  const char *v102;
  int v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  int v107;
  __uint64_t v108;
  const char *v109;
  int v110;
  int v111;
  __uint64_t v112;
  const char *v113;
  int v115;
  __uint64_t v116;
  const char *v117;
  const char *v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  if (!a2)
  {
    v17 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v18 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???\n", CurrTime, 3, LevelStr, "CollectSlicesSizes", 1456, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame == NULL ???");
    }
    return v17;
  }
  if (*(_DWORD *)(a2 + 916) > 0x1Eu)
  {
    v17 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4))
      return v17;
    v21 = AVE_Log_CheckConsole(3u);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(4);
    if (v21)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d\n", v22, 3, v23, "CollectSlicesSizes", 1457, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      v123 = *(unsigned int *)(a2 + 916);
      v121 = 1457;
    }
    else
    {
      v123 = *(unsigned int *)(a2 + 916);
      v121 = 1457;
      v122 = "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    }
    v119 = v23;
    v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CollectSlicesSizes Frame->PlaneNumber = %d";
LABEL_79:
    syslog(3, v24, v22, 3, v119, "CollectSlicesSizes", v121, v122, v123);
    return v17;
  }
  v4 = 0;
  v5 = (_DWORD *)(a1 + 239300);
  v126 = (_BYTE *)(a1 + 67552);
  v129 = a1 + 51072;
  v6 = (_DWORD *)(a1 + 28032);
  do
  {
    v7 = 0;
    v8 = v6;
    do
    {
      v9 = 3;
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[2880] = 0;
        ++v10;
        --v9;
      }
      while (v9);
      ++v7;
      v8 += 3;
    }
    while (v7 != 32);
    ++v4;
    v6 += 96;
  }
  while (v4 != 30);
  *(_DWORD *)(a1 + 51080) = 0;
  *(_QWORD *)v129 = 0;
  v11 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)v11 = 0;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v12 = AVE_Log_CheckConsole(0x2Eu);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(7);
    v15 = *(_DWORD *)(a2 + 916);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d\n", v13, 46, v14, v15);
      v16 = AVE_GetCurrTime();
      v118 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v16, 46, v118, *(_DWORD *)(a2 + 916));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes ONLY ONE TO LOOK AT PlaneNumber = %d", v13, 46, v14, v15);
    }
  }
  v25 = *(_QWORD *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  if (!v25)
  {
    v17 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4))
      return v17;
    v37 = AVE_Log_CheckConsole(3u);
    v22 = AVE_GetCurrTime();
    v38 = AVE_Log_GetLevelStr(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v22, 3, v38, "CollectSlicesSizes", 1481, "codedHeader != __null", *(_DWORD *)(a2 + 916));
      v22 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(4);
      v122 = "codedHeader != __null";
      v123 = *(unsigned int *)(a2 + 916);
      v121 = 1481;
    }
    else
    {
      v123 = *(unsigned int *)(a2 + 916);
      v121 = 1481;
      v122 = "codedHeader != __null";
    }
    v119 = v38;
    v24 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL";
    goto LABEL_79;
  }
  v124 = v5;
  v26 = *(_QWORD *)(a1 + 8 * *(int *)(a2 + 916) + 27072);
  v127 = v26;
  v27 = v25 + 12 * *(unsigned int *)(a2 + 168);
  v28 = *(_QWORD *)(v27 + 244);
  v29 = a1 + 12 * *(unsigned int *)(a2 + 168) + 51084;
  *(_DWORD *)(v29 + 8) = *(_DWORD *)(v27 + 252);
  *(_QWORD *)v29 = v28;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v30 = AVE_Log_CheckConsole(0x2Eu);
    v31 = AVE_GetCurrTime();
    v32 = AVE_Log_GetLevelStr(7);
    v33 = *(_DWORD *)(a2 + 168);
    v34 = *(_DWORD *)(a1 + 12 * v33 + 51092);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d\n", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
      v35 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v35, 46, v36, *(_DWORD *)(a2 + 168), *(char *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51091), *(_DWORD *)(a1 + 12 * *(unsigned int *)(a2 + 168) + 51092));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes Filler[%d] %d %d", v31, 46, v32, v33, *(char *)(a1 + 12 * v33 + 51091), v34);
    }
  }
  v39 = 0;
  *(_DWORD *)(v129 + 8) = 3 * *(_DWORD *)(v26 + 240);
  v40 = a1 + 28032;
  v128 = a1 + 28036;
  v41 = -3072;
  while (1)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v42 = AVE_Log_CheckConsole(0x2Eu);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(7);
      v45 = *(unsigned __int8 *)(v26 + 908);
      if (v42)
      {
        printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d\n", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
        v46 = AVE_GetCurrTime();
        v47 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v46, 46, v47, v39, *(_DWORD *)(v26 + 384), *(unsigned __int8 *)(v26 + 908));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32BytesWritten = %d ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch %d", v43, 46, v44, v39, *(_DWORD *)(v26 + 384), v45);
      }
    }
    if (!*(_DWORD *)(v26 + 384))
      break;
    if (*(char *)(v26 + 908) < 0)
    {
      v17 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v90 = AVE_Log_CheckConsole(3u);
        v91 = AVE_GetCurrTime();
        v92 = AVE_Log_GetLevelStr(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d\n", v91, 3, v92, "CollectSlicesSizes", 1499, "codedHeader->SliceData[i].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch < 128", v39, *(unsigned __int8 *)(v26 + 908));
          v91 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->SliceData[%d].ui32BytesToRemoveAtTheEndOfTheSliceForContextSwitch = %d", v91);
      }
      return v17;
    }
    if (*(_DWORD *)(v26 + 920) && *(_QWORD *)(v26 + 912))
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v48 = AVE_Log_CheckConsole(0x2Eu);
        v49 = AVE_GetCurrTime();
        v50 = AVE_Log_GetLevelStr(7);
        v51 = *(_DWORD *)(v26 + 920);
        if (v48)
        {
          printf("%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d\n", v49, 46, v50, v39, v51);
          v52 = AVE_GetCurrTime();
          v53 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v52, 46, v53, v39, *(_DWORD *)(v26 + 920));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader->SliceData[%d].ui32SliceHeaderSize = %d", v49, 46, v50, v39, v51);
        }
      }
      *(_DWORD *)(a1 + 39552 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 920);
      if (v41 != -3072)
        *(_DWORD *)(a1 + 39556 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(a1
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39552)
                                                                          + *(_DWORD *)(a1
                                                                                      + 384 * *(int *)(a2 + 916)
                                                                                      + 12 * (v39 - 1)
                                                                                      + 39556);
    }
    v54 = *(unsigned __int8 *)(v26 + 908);
    *(_DWORD *)(v40 + v41 + 384 * *(int *)(a2 + 916) + 3072) = *(_DWORD *)(v26 + 384) - v54;
    *(_DWORD *)(a1 + 28040 + v41 + 384 * *(int *)(a2 + 916) + 3072) = v54;
    v55 = *(int *)(a2 + 916);
    *(_QWORD *)v129 = v40 + v41 + 384 * (int)v55 + 3072;
    if (v41 != -3072)
    {
      if (*v126)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v56 = AVE_Log_CheckConsole(0x2Eu);
          v57 = AVE_GetCurrTime();
          v58 = AVE_Log_GetLevelStr(7);
          v59 = v39 - 1;
          v60 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
          v61 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
          v62 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
          v63 = v127 + 544 * v59;
          v64 = *(unsigned __int8 *)(v63 + 908);
          if (v56)
          {
            v65 = (_DWORD *)(v63 + 384);
            v66 = (unsigned __int8 *)(v63 + 908);
            printf("%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
            v67 = AVE_GetCurrTime();
            v68 = AVE_Log_GetLevelStr(7);
            v40 = a1 + 28032;
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v67, 46, v68, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v65, *v66);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. Updating values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v57, 46, v58, v39, v60, v61, v62, *(_DWORD *)(v63 + 384), v64);
          }
          v69 = a1 + 28036;
          v70 = v127;
        }
        else
        {
          v59 = v39 - 1;
          v70 = v127;
          v69 = a1 + 28036;
        }
        v71 = v70 + 544 * v59;
        v72 = *(_DWORD *)(v71 + 384);
        LODWORD(v71) = *(unsigned __int8 *)(v71 + 908);
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59) = v72 - v71;
        *(_DWORD *)(a1 + 28032 + 384 * *(int *)(a2 + 916) + 12 * v59 + 8) = v71;
        v55 = *(int *)(a2 + 916);
      }
      else
      {
        LODWORD(v59) = v39 - 1;
        v69 = a1 + 28036;
      }
      v73 = 3 * v55;
      v74 = (_DWORD *)(a1 + (v73 << 7) + 12 * v59 + 28032);
      *(_DWORD *)(v69 + v41 + (v73 << 7) + 3072) = *v74 + v74[1] + v74[2];
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v75 = AVE_Log_CheckConsole(0x2Eu);
        v76 = AVE_GetCurrTime();
        v77 = AVE_Log_GetLevelStr(7);
        v78 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032);
        v79 = *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072);
        v80 = *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040);
        v81 = v127 + 544 * v59;
        v82 = *(unsigned __int8 *)(v81 + 908);
        if (v75)
        {
          v125 = (_DWORD *)(v81 + 384);
          v83 = (unsigned __int8 *)(v81 + 908);
          printf("%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d\n", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
          v84 = AVE_GetCurrTime();
          v85 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v84, 46, v85, v39, *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28032), *(_DWORD *)(v128 + v41 + 384 * *(int *)(a2 + 916) + 3072), *(_DWORD *)(a1 + 384 * *(int *)(a2 + 916) + 12 * v59 + 28040), *v125, *v83);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Slice %d. UpdatED values Size %d Offset %d Bytes to Remove %d -- ui32BytesWritten %d ui32BytesToRemove %d", v76, 46, v77, v39, v78, v79, v80, *(_DWORD *)(v81 + 384), v82);
        }
        v40 = a1 + 28032;
      }
    }
    v26 += 544;
    ++v39;
    v41 += 12;
    if (!v41)
    {
      v39 = 256;
      if (*v124 != 2)
      {
LABEL_74:
        v17 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v93 = AVE_Log_CheckConsole(3u);
          v94 = AVE_GetCurrTime();
          v95 = AVE_Log_GetLevelStr(4);
          if (v93)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d\n", v94, 3, v95, "CollectSlicesSizes", 1552, "TotalSlices <= ((32) < (256) ? (32) : (256))", v39);
            v94 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: TotalSlices = %d", v94);
        }
        return v17;
      }
LABEL_67:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v86 = AVE_Log_CheckConsole(0x2Eu);
        v87 = AVE_GetCurrTime();
        v88 = AVE_Log_GetLevelStr(7);
        if (v86)
        {
          printf("%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d\n", v87, 46, v88, v39);
          v89 = AVE_GetCurrTime();
          v120 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v89, 46, v120, v39);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CollectSlicesSizes TotalSlices = %d", v87, 46, v88, v39);
        }
      }
      v96 = 0;
      v97 = (int *)(a1 + 28032);
      do
      {
        v98 = 0;
        v99 = v97;
        do
        {
          if (!*v99)
            break;
          if (v99[2880] && AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v100 = AVE_Log_CheckConsole(0x2Eu);
            v101 = AVE_GetCurrTime();
            v102 = AVE_Log_GetLevelStr(7);
            v103 = v99[2880];
            v104 = v99[2882];
            if (v100)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
              v105 = AVE_GetCurrTime();
              v106 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v105, 46, v106, v96, v98, v96, v98, v99[2880], v99[2881], v99[2882]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSliceHeadersSizes \t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v101, 46, v102, v96, v98, v96, v98, v103, v99[2881], v104);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v107 = AVE_Log_CheckConsole(0x2Eu);
            v108 = AVE_GetCurrTime();
            v109 = AVE_Log_GetLevelStr(7);
            v110 = *v99;
            v111 = v99[2];
            if (v107)
            {
              printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
              v112 = AVE_GetCurrTime();
              v113 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v112, 46, v113, v96, v98, v96, v98, *v99, v99[1], v99[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes \t\t= [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v108, 46, v109, v96, v98, v96, v98, v110, v99[1], v111);
            }
          }
          ++v98;
          v99 += 3;
        }
        while (v98 != 32);
        ++v96;
        v97 += 96;
      }
      while (v96 != 30);
      return 0;
    }
  }
  if (*v124 == 2)
    goto LABEL_67;
  if (v39 >= 0x21)
    goto LABEL_74;
  if (*(_QWORD *)v129)
    goto LABEL_67;
  v17 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v115 = AVE_Log_CheckConsole(3u);
    v116 = AVE_GetCurrTime();
    v117 = AVE_Log_GetLevelStr(4);
    if (v115)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL\n", v116, 3, v117, "CollectSlicesSizes", 1553, "m_pLastOutputSlicesSizes != __null");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_pLastOutputSlicesSizes = NULL");
  }
  return v17;
}

void H264VideoEncoderFrameReceiver::PrintBufferInfo(H264VideoEncoderFrameReceiver *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t a8, unsigned __int8 *a9)
{
  int v17;
  const char *LevelStr;
  __uint64_t v19;
  const char *v20;
  uint64_t v21;
  int *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  int v27;
  int v28;
  __uint64_t CurrTime;

  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    v17 = AVE_Log_CheckConsole(0x2Eu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu\n", CurrTime, 46, LevelStr, "PrintBufferInfo", 1694, a2, a3, a6, a4, a5, a9, a7, a8);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", v19, 46, v20, "PrintBufferInfo", 1694, a2, a3);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d Src %p >= %p + %d | Dst %p >= %p + %zu", CurrTime, 46, LevelStr, "PrintBufferInfo", 1694, a2, a3);
    }
  }
  v21 = 0;
  v22 = (int *)((char *)this + 384 * a2 + 28032);
  do
  {
    if (!*v22)
      break;
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v23 = AVE_Log_CheckConsole(0x2Eu);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      v26 = *v22;
      v27 = v22[1];
      v28 = v22[2880];
      if (v23)
      {
        printf("%lld %d AVE %s: AVE %s:%d %d %d %d %d\n", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v22[1], v28);
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        v26 = *v22;
        v27 = v22[1];
        v28 = v22[2880];
      }
      syslog(3, "%lld %d AVE %s: AVE %s:%d %d %d %d %d", v24, 46, v25, "PrintBufferInfo", 1703, v21, v26, v27, v28);
    }
    ++v21;
    v22 += 3;
  }
  while (v21 != 32);
}

uint64_t H264VideoEncoderFrameReceiver::AddAllSEIs(uint64_t a1, uint64_t a2, char *a3, int a4, char a5, int a6, CFDataRef theData)
{
  char *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  UInt8 *BytePtr;
  unsigned int Length;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int active;
  int v40;
  __uint64_t v41;
  const char *v42;
  __uint64_t v43;
  const void *v44;
  size_t v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  __uint64_t v61;
  const char *v62;
  __uint64_t v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  int v67;
  __uint64_t v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  __uint64_t v78;
  int v79;
  int v80;
  __uint64_t v81;
  const char *v82;
  __uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  __uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  __uint64_t v102;
  const char *v103;
  __uint64_t v104;
  int v105;
  __uint64_t v106;
  const char *v107;
  __uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  __uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  __uint64_t v122;
  const char *v123;
  __uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  const char *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  const char *v142;
  int v143;

  if (!a2)
  {
    v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", CurrTime, 3, LevelStr, "AddAllSEIs", 1717, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v13;
  }
  v7 = a3;
  if (!a3)
  {
    v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v24, 3, v25, "AddAllSEIs", 1718, "StreamBufferCopy != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v13;
  }
  if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
  {
    v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v26 = AVE_Log_CheckConsole(3u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v27, 3, v28, "AddAllSEIs", 1719, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v13;
  }
  v12 = a1 + 239312;
  *(_QWORD *)(a1 + 239312) = 0;
  if (a6)
  {
    v13 = 0;
    if ((a5 & 1) != 0)
      return v13;
  }
  v14 = a1 + 68136;
  if (*(_BYTE *)(a1 + 68136) && !*(_DWORD *)(a2 + 160))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v30 = AVE_Log_CheckConsole(0x2Eu);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      v33 = *(_DWORD *)(v12 + 5912);
      if (v30)
      {
        printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v34, 46, v35, *(const void **)(v12 + 5904), *(_QWORD *)(v12 + 5912));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bUseElementaryStreamOutput %p %d\n", v31, 46, v32, *(const void **)(v12 + 5904), v33);
      }
    }
    v44 = *(const void **)(v12 + 5904);
    if (!v44)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v46 = AVE_Log_CheckConsole(3u);
        v47 = AVE_GetCurrTime();
        v48 = AVE_Log_GetLevelStr(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL\n", v47, 3, v48, "AddAllSEIs", 1733, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputbUseElementaryStreamOutput = NULL");
      }
      return v13;
    }
    v45 = *(_QWORD *)(v12 + 5912);
    if (!v45)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v49 = AVE_Log_CheckConsole(3u);
        v50 = AVE_GetCurrTime();
        v51 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0\n", v50, 3, v51, "AddAllSEIs", 1734, "m_SPSPPSFinalOutputSizebUseElementaryStreamOutput != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_SPSPPSFinalOutputSizebUseElementaryStreamOutput = 0");
      }
      return v13;
    }
    memcpy(v7, v44, v45);
    v7 += *(_QWORD *)(v12 + 5912);
    H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, *(unsigned __int8 **)(v12 + 5904));
    *(_QWORD *)(v12 + 5904) = 0;
  }
  if (*(_QWORD *)(a2 + 336))
  {
    v143 = a4;
    if (!theData)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v36 = AVE_Log_CheckConsole(3u);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL\n", v37, 3, v38, "AddAllSEIs", 1750, "serialMetadata != __null");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer serialMetadata == NULL");
      }
      return v13;
    }
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v17 = AVE_Log_CheckConsole(0x2Eu);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(7);
      if (v17)
      {
        printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d\n", v18, 46, v19, BytePtr, Length);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON buff %p size %d", v18, 46, v19, BytePtr, Length);
    }
    active = AddSEIDebugMetadata(v7, a1 + 68136, BytePtr, Length, a2, *(unsigned __int8 *)(a2 + 344), &v143);
    if (active)
      return AVE_RetCode2IOReturn(active);
    if (!v143)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v52 = AVE_Log_CheckConsole(3u);
        v53 = AVE_GetCurrTime();
        v54 = AVE_Log_GetLevelStr(4);
        if (v52)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.\n", v53, 3, v54, "AddAllSEIs", 1765, "SEISize != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddSEIDebugMetadata failed.");
      }
      return v13;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v40 = AVE_Log_CheckConsole(0x2Eu);
      v41 = AVE_GetCurrTime();
      v42 = AVE_Log_GetLevelStr(7);
      if (v40)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes\n", v41, 46, v42, v143);
        v43 = AVE_GetCurrTime();
        v134 = AVE_Log_GetLevelStr(7);
        v14 = a1 + 68136;
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v43, 46, v134, v143);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddSEIDebugMetadata added %d bytes", v41, 46, v42, v143);
      }
    }
    v55 = v143;
    v56 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v143;
    *(_DWORD *)(a1 + 4 * v56 + 239320) = v55;
    v57 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v57 + 1;
    if (v57 >= 15)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v67 = AVE_Log_CheckConsole(3u);
        v68 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(4);
        if (!v67)
          goto LABEL_175;
        v70 = 1772;
        goto LABEL_169;
      }
      return v13;
    }
    v7 += v55;
    CFRelease(theData);
  }
  v58 = (_DWORD *)(a2 + 23468);
  v59 = *(_DWORD *)(v14 + 120);
  if (!v59)
  {
LABEL_125:
    if (!*(_BYTE *)(v14 + 54))
      goto LABEL_133;
    v143 = 0;
    active = AddRegisteredITUTT35SEI(v7, v14, a2, 1, &v143);
    if (!active)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v105 = AVE_Log_CheckConsole(0x2Eu);
        v106 = AVE_GetCurrTime();
        v107 = AVE_Log_GetLevelStr(7);
        if (v105)
        {
          printf("%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes\n", v106, 46, v107, v143);
          v108 = AVE_GetCurrTime();
          v140 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v108, 46, v140, v143);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add Registered SEI added %d bytes", v106, 46, v107, v143);
        }
      }
      v109 = v143;
      v110 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v143;
      *(_DWORD *)(a1 + 4 * v110 + 239320) = v109;
      v111 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v111 + 1;
      if (v111 >= 15)
      {
        v13 = 3758097084;
        if (!AVE_Log_CheckLevel(3u, 4))
          return v13;
        v116 = AVE_Log_CheckConsole(3u);
        v68 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(4);
        if (v116)
        {
          v70 = 1967;
LABEL_169:
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.\n", v68, 3, v69, "AddAllSEIs", v70, "m_SEI_num < 16");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
LABEL_175:
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: Exceed the max supported SEI, failed.");
        return v13;
      }
      v7 += v109;
      *(_DWORD *)(a2 + 2436) = 0;
LABEL_133:
      if ((!*(_BYTE *)(v14 + 45) || *(double *)(a2 + 2384) == 0.0 || *v58 != 3 && *(_DWORD *)(a2 + 23768) != 21)
        && (!*(_BYTE *)(v14 + 49) || *(double *)(a2 + 2368) == 0.0)
        && (!*(_BYTE *)(v14 + 46) || *(_DWORD *)(a2 + 160))
        && (!*(_BYTE *)(v14 + 47) || *(_DWORD *)(a2 + 160))
        && (!*(_BYTE *)(v14 + 48) || *(_DWORD *)(a2 + 160))
        && (!*(_BYTE *)(v14 + 50) || !*(_BYTE *)(v14 + 55) || *(_DWORD *)(a2 + 160))
        && (!*(_BYTE *)(v14 + 51) || !*(_BYTE *)(v14 + 56) || *(_DWORD *)(a2 + 160))
        && (!*(_BYTE *)(v14 + 52) || !*(_BYTE *)(v14 + 85) || *(_DWORD *)(a2 + 160))
        && !*(_BYTE *)(v14 + 53))
      {
        return 0;
      }
      v143 = 0;
      active = AddUnregisteredSEI(v7, v14, a1 + 69840, a2, 1, &v143);
      if (active)
        return AVE_RetCode2IOReturn(active);
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v112 = AVE_Log_CheckConsole(0x2Eu);
        v113 = AVE_GetCurrTime();
        v114 = AVE_Log_GetLevelStr(7);
        if (v112)
        {
          printf("%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes\n", v113, 46, v114, v143);
          v115 = AVE_GetCurrTime();
          v141 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v115, 46, v141, v143);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Add UnRegistered SEI added %d bytes", v113, 46, v114, v143);
        }
      }
      v117 = v143;
      v118 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v143;
      *(_DWORD *)(a1 + 4 * v118 + 239320) = v117;
      v119 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v119 + 1;
      if (v119 < 15)
        return 0;
      v13 = 3758097084;
      if (!AVE_Log_CheckLevel(3u, 4))
        return v13;
      v120 = AVE_Log_CheckConsole(3u);
      v68 = AVE_GetCurrTime();
      v69 = AVE_Log_GetLevelStr(4);
      if (v120)
      {
        v70 = 1997;
        goto LABEL_169;
      }
      goto LABEL_175;
    }
    return AVE_RetCode2IOReturn(active);
  }
  if (v59 != 1)
  {
    v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v64 = AVE_Log_CheckConsole(3u);
      v65 = AVE_GetCurrTime();
      v66 = AVE_Log_GetLevelStr(4);
      if (v64)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v65, 3, v66, "AddAllSEIs", 1946, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
    }
    return v13;
  }
  if (!*(_BYTE *)(v14 + 269))
  {
LABEL_113:
    if (*(_BYTE *)(v14 + 270))
    {
      v143 = 0;
      if (!*(_DWORD *)(a2 + 160))
      {
        active = AddContentColourVolumeSEI((uint64_t)v7, v14, a2, &v143);
        if (active)
          return AVE_RetCode2IOReturn(active);
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v101 = AVE_Log_CheckConsole(0x2Eu);
          v102 = AVE_GetCurrTime();
          v103 = AVE_Log_GetLevelStr(7);
          if (v101)
          {
            printf("%lld %d AVE %s: H264FrameRec: AddContentColourVolumeSEI added %d bytes\n", v102, 46, v103, v143);
            v104 = AVE_GetCurrTime();
            v139 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: AddContentColourVolumeSEI added %d bytes", v104, 46, v139, v143);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: AddContentColourVolumeSEI added %d bytes", v102, 46, v103, v143);
          }
        }
        v125 = v143;
        v126 = *(int *)(v12 + 4);
        *(_DWORD *)v12 += v143;
        *(_DWORD *)(a1 + 4 * v126 + 239320) = v125;
        v127 = *(_DWORD *)(v12 + 4);
        *(_DWORD *)(v12 + 4) = v127 + 1;
        if (v127 >= 15)
        {
          v13 = 3758097084;
          if (!AVE_Log_CheckLevel(3u, 4))
            return v13;
          v128 = AVE_Log_CheckConsole(3u);
          v68 = AVE_GetCurrTime();
          v69 = AVE_Log_GetLevelStr(4);
          if (!v128)
            goto LABEL_175;
          v70 = 1891;
          goto LABEL_169;
        }
        v7 += v125;
      }
    }
    if (*(_BYTE *)(v14 + 85))
    {
      v143 = 0;
      v100 = *(_BYTE *)(v14 + 209) ? *(_QWORD *)(a1 + 51352) : *(_QWORD *)(a1 + 51344);
      if (v100 == 1 && !*(_DWORD *)(a2 + 160))
      {
        active = AddAmbientViewingEnvironmentSEI((uint64_t)v7, v14, a2, &v143);
        if (active)
          return AVE_RetCode2IOReturn(active);
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v121 = AVE_Log_CheckConsole(0x2Eu);
          v122 = AVE_GetCurrTime();
          v123 = AVE_Log_GetLevelStr(7);
          if (v121)
          {
            printf("%lld %d AVE %s: H264FrameRec: AddAmbientViewingEnvironmentSEI added %d bytes\n", v122, 46, v123, v143);
            v124 = AVE_GetCurrTime();
            v142 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: AddAmbientViewingEnvironmentSEI added %d bytes", v124, 46, v142, v143);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: AddAmbientViewingEnvironmentSEI added %d bytes", v122, 46, v123, v143);
          }
        }
        v129 = v143;
        v130 = *(int *)(v12 + 4);
        *(_DWORD *)v12 += v143;
        *(_DWORD *)(a1 + 4 * v130 + 239320) = v129;
        v131 = *(_DWORD *)(v12 + 4);
        *(_DWORD *)(v12 + 4) = v131 + 1;
        if (v131 >= 15)
        {
          v13 = 3758097084;
          if (!AVE_Log_CheckLevel(3u, 4))
            return v13;
          v132 = AVE_Log_CheckConsole(3u);
          v68 = AVE_GetCurrTime();
          v69 = AVE_Log_GetLevelStr(4);
          if (!v132)
            goto LABEL_175;
          v70 = 1928;
          goto LABEL_169;
        }
        v7 += v129;
      }
    }
    goto LABEL_125;
  }
  v143 = 0;
  active = AddAccessUnitDelimiter((uint64_t)v7, a1 + 158376, v14, a2, &v143);
  if (active)
    return AVE_RetCode2IOReturn(active);
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v60 = AVE_Log_CheckConsole(0x2Eu);
    v61 = AVE_GetCurrTime();
    v62 = AVE_Log_GetLevelStr(7);
    if (v60)
    {
      printf("%lld %d AVE %s: H264FrameRec: AddAccessUnitDelimiter added %d bytes\n", v61, 46, v62, v143);
      v63 = AVE_GetCurrTime();
      v135 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: AddAccessUnitDelimiter added %d bytes", v63, 46, v135, v143);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: AddAccessUnitDelimiter added %d bytes", v61, 46, v62, v143);
    }
  }
  v71 = v143;
  v72 = *(int *)(v12 + 4);
  *(_DWORD *)v12 += v143;
  *(_DWORD *)(a1 + 4 * v72 + 239320) = v71;
  v73 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v12 + 4) = v73 + 1;
  if (v73 >= 15)
  {
    v13 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v79 = AVE_Log_CheckConsole(3u);
      v68 = AVE_GetCurrTime();
      v69 = AVE_Log_GetLevelStr(4);
      if (!v79)
        goto LABEL_175;
      v70 = 1806;
      goto LABEL_169;
    }
    return v13;
  }
  v74 = (uint64_t)&v7[v71];
  if (!*(_DWORD *)(a2 + 160))
  {
    active = AddActiveParameterSetsSEI(v74, a1 + 158376, v14, a2, &v143);
    if (active)
      return AVE_RetCode2IOReturn(active);
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v80 = AVE_Log_CheckConsole(0x2Eu);
      v81 = AVE_GetCurrTime();
      v82 = AVE_Log_GetLevelStr(7);
      if (v80)
      {
        printf("%lld %d AVE %s: H264FrameRec: AddActiveParameterSetsSEI added %d bytes\n", v81, 46, v82, v143);
        v83 = AVE_GetCurrTime();
        v137 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddActiveParameterSetsSEI added %d bytes", v83, 46, v137, v143);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: AddActiveParameterSetsSEI added %d bytes", v81, 46, v82, v143);
      }
    }
    v93 = v143;
    v94 = *(int *)(v12 + 4);
    *(_DWORD *)v12 += v143;
    *(_DWORD *)(a1 + 4 * v94 + 239320) = v93;
    v95 = *(_DWORD *)(v12 + 4);
    *(_DWORD *)(v12 + 4) = v95 + 1;
    if (v95 >= 15)
    {
      v13 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v96 = AVE_Log_CheckConsole(3u);
        v68 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(4);
        if (!v96)
          goto LABEL_175;
        v70 = 1825;
        goto LABEL_169;
      }
      return v13;
    }
    v74 += v93;
  }
  active = AddPictureTimingSEI(v74, a1 + 158376, v14, a2, &v143);
  if (active)
    return AVE_RetCode2IOReturn(active);
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v75 = AVE_Log_CheckConsole(0x2Eu);
    v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    if (v75)
    {
      printf("%lld %d AVE %s: H264FrameRec: AddPictureTimingSEI added %d bytes\n", v76, 46, v77, v143);
      v78 = AVE_GetCurrTime();
      v136 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: AddPictureTimingSEI added %d bytes", v78, 46, v136, v143);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: AddPictureTimingSEI added %d bytes", v76, 46, v77, v143);
    }
  }
  v84 = v143;
  v85 = *(int *)(v12 + 4);
  *(_DWORD *)v12 += v143;
  *(_DWORD *)(a1 + 4 * v85 + 239320) = v84;
  v86 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v12 + 4) = v86 + 1;
  if (v86 < 15)
  {
    v7 = (char *)(v74 + v84);
    if (*v58 == 3 || *(_DWORD *)(a2 + 23768) == 21)
    {
      active = AddBufferingPeriodSEI((uint64_t)v7, a1 + 158376, v14, a2, &v143);
      if (active)
        return AVE_RetCode2IOReturn(active);
      v87 = v14;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v88 = AVE_Log_CheckConsole(0x2Eu);
        v89 = AVE_GetCurrTime();
        v90 = AVE_Log_GetLevelStr(7);
        if (v88)
        {
          printf("%lld %d AVE %s: H264FrameRec: AddBufferingPeriodSEI added %d bytes\n", v89, 46, v90, v143);
          v91 = AVE_GetCurrTime();
          v138 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: AddBufferingPeriodSEI added %d bytes", v91, 46, v138, v143);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: AddBufferingPeriodSEI added %d bytes", v89, 46, v90, v143);
        }
      }
      v97 = v143;
      v98 = *(int *)(v12 + 4);
      *(_DWORD *)v12 += v143;
      *(_DWORD *)(a1 + 4 * v98 + 239320) = v97;
      v99 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)(v12 + 4) = v99 + 1;
      if (v99 >= 15)
      {
        v13 = 3758097084;
        if (!AVE_Log_CheckLevel(3u, 4))
          return v13;
        v133 = AVE_Log_CheckConsole(3u);
        v68 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(4);
        if (!v133)
          goto LABEL_175;
        v70 = 1864;
        goto LABEL_169;
      }
      v7 += v97;
    }
    else
    {
      v87 = v14;
    }
    v14 = v87;
    goto LABEL_113;
  }
  v13 = 3758097084;
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v92 = AVE_Log_CheckConsole(3u);
    v68 = AVE_GetCurrTime();
    v69 = AVE_Log_GetLevelStr(4);
    if (!v92)
      goto LABEL_175;
    v70 = 1842;
    goto LABEL_169;
  }
  return v13;
}

void H264VideoEncoderFrameReceiver::DeleteBuffer(H264VideoEncoderFrameReceiver *this, unsigned __int8 *a2)
{
  _DWORD *v3;
  _BYTE *v4;
  char *v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  const char *v14;
  const char *v15;

  if (a2)
  {
    v3 = (_DWORD *)((char *)this + 239300);
    v4 = (char *)this + 68345;
    v5 = (char *)this + 51304;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v6 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (v6)
      {
        printf("%lld %d AVE %s: H264FrameRec: DeleteBuffer %p\n", CurrTime, 46, LevelStr, a2);
        v9 = AVE_GetCurrTime();
        v14 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", v9, 46, v14, a2);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: DeleteBuffer %p", CurrTime, 46, LevelStr, a2);
      }
    }
    if (*v4)
    {
      if (*((_QWORD *)v5 + 6) != 1 && *v3 != 2)
      {
        CFAllocatorDeallocate(*(CFAllocatorRef *)v5, a2);
        return;
      }
      goto LABEL_15;
    }
    if (*((_QWORD *)v5 + 5) == 1 || *v3 == 2)
    {
LABEL_15:
      if (*v3 == 2)
      {
        if (!CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)a2, 0))
          CVPixelBufferRelease((CVPixelBufferRef)a2);
      }
      else
      {
        free(a2);
      }
    }
  }
  else if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    v10 = AVE_Log_CheckConsole(0x2Eu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.\n", v11, 46, v12);
      v13 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v13, 46, v15);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: Trying to free a buffer that is NULL.", v11, 46, v12);
    }
  }
}

uint64_t H264VideoEncoderFrameReceiver::CopyEncodedFrameIntoExternalBuffer(_DWORD *a1, uint64_t a2, char *a3, const void *a4, unint64_t a5, int a6, uint64_t a7)
{
  signed int v8;
  _DWORD *v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  size_t v31;
  uint64_t v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  __uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  int *v62;
  int v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  _DWORD *v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  int v74;
  __uint64_t v75;
  const char *v76;
  int *v77;
  int v78;
  char *v79;
  __uint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned int *v83;
  size_t v84;
  unsigned __int8 *v85;
  int v87;
  __uint64_t v88;
  const char *v89;
  int v90;
  int v91;
  __uint64_t v92;
  const char *v93;
  int v94;
  __uint64_t v95;
  const char *v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  int v100;
  __uint64_t v101;
  const char *v102;
  char *v103;
  __uint64_t v104;
  const char *v105;
  int v106;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  int v110;
  int v111;
  _BYTE *v112;
  int v113;
  __uint64_t v114;
  const char *v115;
  __uint64_t v116;
  uint64_t v117;
  char v118;
  _DWORD *v119;
  char v120;
  int *v121;
  _DWORD *v122;
  int *v123;
  char *v124;
  uint64_t v125;
  int v126;
  __uint64_t v127;
  const char *v128;
  int v129;
  __uint64_t v130;
  const char *v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  int *v135;
  int v136;
  __uint64_t v137;
  const char *v138;
  int v139;
  int v140;
  __uint64_t v141;
  const char *v142;
  char *v143;
  int v144;
  __uint64_t v145;
  const char *v146;
  int v147;
  __uint64_t v148;
  unint64_t v149;
  char *v150;
  int v151;
  __uint64_t v152;
  const char *v153;
  int v154;
  __uint64_t v155;
  int v156;
  __uint64_t v157;
  const char *v158;
  int v159;
  __uint64_t v160;
  const char *v161;
  int v162;
  __uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  int *v167;
  int v168;
  __uint64_t v169;
  const char *v170;
  int v171;
  int v172;
  __uint64_t v173;
  const char *v174;
  unsigned __int8 *v175;
  int v176;
  __uint64_t v177;
  const char *v178;
  int v179;
  __uint64_t v180;
  int v181;
  __uint64_t v182;
  const char *v183;
  size_t v184;
  int v185;
  __uint64_t v186;
  const char *v187;
  const char *v189;
  const char *v190;
  const char *v191;
  const char *v192;
  const char *v193;
  const char *v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198[2];
  _DWORD *v199;
  unsigned __int8 *v200;
  int v201;
  unsigned __int8 *v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unsigned __int8 *v207;
  _DWORD **v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;

  if (!a2)
  {
    v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v17 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL\n", CurrTime, 3, LevelStr, "CopyEncodedFrameIntoExternalBuffer", 2016, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame == NULL");
    }
    return v16;
  }
  if (!a3)
  {
    v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL\n", v21, 3, v22, "CopyEncodedFrameIntoExternalBuffer", 2017, "StreamBufferCopy != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer StreamBufferCopy == NULL");
    }
    return v16;
  }
  v8 = *(_DWORD *)(a2 + 916);
  if (v8 >= 0x1F)
  {
    v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v23 = AVE_Log_CheckConsole(3u);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d\n", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer Frame->PlaneNumber = %d", v24, 3, v25, "CopyEncodedFrameIntoExternalBuffer", 2018, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
    }
    return v16;
  }
  v13 = a1;
  v14 = a1 + 59827;
  v15 = a1 + 16889;
  v201 = a1[16889];
  if (a6)
  {
    if (!a4 || (_DWORD)a7)
      goto LABEL_7;
LABEL_18:
    v209 = (unsigned __int8 *)a3;
    if (a1[59828])
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v26 = AVE_Log_CheckConsole(0x2Eu);
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(7);
        v29 = v14[1];
        if (v26)
        {
          printf("%lld %d AVE %s: H264FrameRec: memcpy SEI size %u\n", v27, 46, v28, v29);
          v30 = AVE_GetCurrTime();
          v189 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v30, 46, v189, v14[1]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: memcpy SEI size %u", v27, 46, v28, v29);
        }
        v13 = a1;
      }
      v31 = v14[1];
      if ((int)v31 <= 0)
      {
        v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v42 = AVE_Log_CheckConsole(3u);
          v43 = AVE_GetCurrTime();
          v44 = AVE_Log_GetLevelStr(4);
          if (v42)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big\n", v43, 3, v44, "CopyEncodedFrameIntoExternalBuffer", 2031, "false");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - SEI buffer size too big");
        }
        return v16;
      }
      memcpy(a3, a4, v31);
      v209 = (unsigned __int8 *)&a3[v14[1]];
      v8 = *(_DWORD *)(a2 + 916);
    }
    goto LABEL_29;
  }
  if (a4)
    goto LABEL_18;
LABEL_7:
  v209 = (unsigned __int8 *)a3;
LABEL_29:
  v207 = *(unsigned __int8 **)&v13[2 * v8 + 6618];
  if (v207)
  {
    v32 = v13[v8 + 6738];
    v203 = a5;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v33 = AVE_Log_CheckConsole(0x2Eu);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(7);
      v36 = *v14;
      if (v33)
      {
        printf("%lld %d AVE %s: ClientID %d buf %p, buf_size %d\n", v34, 46, v35, v36, v207, v32);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v37, 46, v38, *v14, v207, v32);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ClientID %d buf %p, buf_size %d", v34, 46, v35, v36, v207, v32);
      }
    }
    v45 = *(_DWORD *)(a2 + 916);
    if (v13[96 * v45 + 9888])
    {
      v200 = *(unsigned __int8 **)&v13[2 * v45 + 6888];
      if (!v200)
      {
        v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v46 = AVE_Log_CheckConsole(3u);
          v47 = AVE_GetCurrTime();
          v48 = AVE_Log_GetLevelStr(4);
          if (v46)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL\n", v47, 3, v48, "CopyEncodedFrameIntoExternalBuffer", 2048, "buf_header != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf_header == NULL");
        }
        return v16;
      }
    }
    else
    {
      v200 = 0;
    }
    v199 = v15;
    if ((a6 & 1) != 0)
    {
      if (v13[96 * v45 + 7008 + 3 * (int)a7])
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v49 = AVE_Log_CheckConsole(0x2Eu);
          v50 = AVE_GetCurrTime();
          v51 = AVE_Log_GetLevelStr(7);
          if (v49)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v50, 46, v51, *(_DWORD *)(a2 + 916), a7, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7], v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]);
            v52 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
            v13 = a1;
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v52);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v50);
          }
        }
        *(_QWORD *)v198 = v32;
        if (v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7])
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v91 = AVE_Log_CheckConsole(0x2Eu);
            v92 = AVE_GetCurrTime();
            v93 = AVE_Log_GetLevelStr(7);
            v94 = v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7];
            if (v91)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
              v95 = AVE_GetCurrTime();
              v96 = AVE_Log_GetLevelStr(7);
              v13 = a1;
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v95, 46, v96, &v200[1024 * (uint64_t)(int)a7], v209, a1[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v92, 46, v93, &v200[1024 * (uint64_t)(int)a7], v209, v94);
            }
          }
          v97 = v203;
          if (v209 >= (unsigned __int8 *)&a3[v203])
          {
            v16 = 3758097084;
            H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, *(unsigned int *)(a2 + 916), a7, v200, -1, &v200[1024 * (uint64_t)(int)a7], (unsigned __int8 *)a3, v203, v209);
            if (!AVE_Log_CheckLevel(3u, 4))
              return v16;
            v106 = AVE_Log_CheckConsole(3u);
            v88 = AVE_GetCurrTime();
            v89 = AVE_Log_GetLevelStr(4);
            if (v106)
            {
              v90 = 2128;
LABEL_107:
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big\n", v88, 3, v89, "CopyEncodedFrameIntoExternalBuffer", v90, "false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
LABEL_187:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer - buffer size too big");
            return v16;
          }
          v99 = v13 + 9888;
          memcpy(v209, &v200[1024 * (uint64_t)(int)a7], v13[96 * *(int *)(a2 + 916) + 9888 + 3 * (int)a7]);
          v13 = a1;
          v209 += v99[96 * *(int *)(a2 + 916) + 3 * (int)a7];
        }
        else
        {
          v97 = v203;
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v100 = AVE_Log_CheckConsole(0x2Eu);
          v101 = AVE_GetCurrTime();
          v102 = AVE_Log_GetLevelStr(7);
          v103 = (char *)&v207[v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]];
          if (v100)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d\n", v101, 46, v102, v103, v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
            v104 = AVE_GetCurrTime();
            v105 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v104, 46, v105, &v207[v13[96 * *(int *)(a2 + 916) + 7009 + 3 * (int)a7]], v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d", v101, 46, v102, v103, v209, v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]);
          }
          v97 = v203;
        }
        v107 = *(int *)(a2 + 916);
        v108 = v13[96 * (int)v107 + 7008 + 3 * (int)a7];
        v109 = v13[96 * (int)v107 + 7009 + 3 * (int)a7];
        if (&v209[v108] > (unsigned __int8 *)&a3[v97] || &v207[v109 + v108] > &v207[*(_QWORD *)v198])
        {
          v16 = 3758097084;
          H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, v107, a7, v207, v198[0], &v207[v109], (unsigned __int8 *)a3, v97, v209);
          if (!AVE_Log_CheckLevel(3u, 4))
            return v16;
          v110 = AVE_Log_CheckConsole(3u);
          v88 = AVE_GetCurrTime();
          v89 = AVE_Log_GetLevelStr(4);
          if (v110)
          {
            v90 = 2148;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        v195 = a6;
        v196 = a7;
        memcpy(v209, &v207[v109], v108);
        v57 = &v209[v13[96 * *(int *)(a2 + 916) + 7008 + 3 * (int)a7]];
      }
      else
      {
        v195 = a6;
        v196 = a7;
        v57 = v209;
      }
    }
    else
    {
      v195 = a6;
      v196 = a7;
      v53 = 0;
      v204 = (unsigned __int8 *)&a3[v203];
      v197 = v32;
      v202 = &v207[v32];
      v54 = 7008;
      v55 = 9888;
      v56 = v200;
      v57 = v209;
      while (v13[96 * v45 + v54])
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v58 = AVE_Log_CheckConsole(0x2Eu);
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(7);
          v61 = *(_DWORD *)(a2 + 916);
          v62 = &v13[96 * v61 + v54];
          v63 = *v62;
          v64 = v62[1];
          if (v58)
          {
            printf("%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d \n", v59, 46, v60, v61, v53, v63, v64);
            v65 = AVE_GetCurrTime();
            v66 = AVE_Log_GetLevelStr(7);
            v67 = &v13[96 * *(int *)(a2 + 916) + v54];
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v65, 46, v66, *(_DWORD *)(a2 + 916), v53, *v67, v67[1]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: copy PlaneNumber = %d, slice %d size %d, from offset %d ", v59, 46, v60, v61, v53, v63, v64);
          }
        }
        if (v13[96 * *(int *)(a2 + 916) + v55])
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v68 = AVE_Log_CheckConsole(0x2Eu);
            v69 = AVE_GetCurrTime();
            v70 = AVE_Log_GetLevelStr(7);
            v71 = v13[96 * *(int *)(a2 + 916) + v55];
            if (v68)
            {
              printf("%lld %d AVE %s: slice header memcpy: %p -> %p %d\n", v69, 46, v70, v56, v57, v71);
              v72 = AVE_GetCurrTime();
              v73 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v72, 46, v73, v56, v57, v13[96 * *(int *)(a2 + 916) + v55]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: slice header memcpy: %p -> %p %d", v69, 46, v70, v56, v57, v71);
            }
          }
          if (v57 >= v204)
          {
            v16 = 3758097084;
            H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, *(unsigned int *)(a2 + 916), v53, v200, -1, v56, (unsigned __int8 *)a3, v203, v57);
            if (!AVE_Log_CheckLevel(3u, 4))
              return v16;
            v98 = AVE_Log_CheckConsole(3u);
            v88 = AVE_GetCurrTime();
            v89 = AVE_Log_GetLevelStr(4);
            if (v98)
            {
              v90 = 2074;
              goto LABEL_107;
            }
            goto LABEL_187;
          }
          memcpy(v57, v56, v13[96 * *(int *)(a2 + 916) + v55]);
          v57 += v13[96 * *(int *)(a2 + 916) + v55];
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v74 = AVE_Log_CheckConsole(0x2Eu);
          v75 = AVE_GetCurrTime();
          v76 = AVE_Log_GetLevelStr(7);
          v77 = &v13[96 * *(int *)(a2 + 916) + v54];
          v78 = *v77;
          v79 = (char *)&v207[v77[1]];
          if (v74)
          {
            printf("%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu\n", v75, 46, v76, v79, v57, v78, a3, v203);
            v80 = AVE_GetCurrTime();
            v81 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v80, 46, v81, &v207[v13[96 * *(int *)(a2 + 916) + 1 + v54]], v57, v13[96 * *(int *)(a2 + 916) + v54], a3, v203);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: memcpy: %p -> %p %d, StreamBufferCopy %p FinalOutput_FRAME_Size %lu", v75, 46, v76, v79, v57, v78, a3, v203);
          }
        }
        v82 = *(int *)(a2 + 916);
        v83 = &v13[96 * (int)v82 + v54];
        v84 = *v83;
        v85 = &v207[v83[1]];
        if (&v57[v84] > v204 || &v85[v84] > v202)
        {
          v16 = 3758097084;
          H264VideoEncoderFrameReceiver::PrintBufferInfo((H264VideoEncoderFrameReceiver *)v13, v82, v53, v207, v197, v85, (unsigned __int8 *)a3, v203, v57);
          if (!AVE_Log_CheckLevel(3u, 4))
            return v16;
          v87 = AVE_Log_CheckConsole(3u);
          v88 = AVE_GetCurrTime();
          v89 = AVE_Log_GetLevelStr(4);
          if (v87)
          {
            v90 = 2094;
            goto LABEL_107;
          }
          goto LABEL_187;
        }
        memcpy(v57, v85, v84);
        v45 = *(_DWORD *)(a2 + 916);
        v57 += v13[96 * v45 + v54];
        ++v53;
        v56 += 1024;
        v55 += 3;
        v54 += 3;
        if (v53 == 32)
          break;
      }
    }
    v210 = v57;
    v111 = v201 - 1;
    v112 = v199;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v113 = AVE_Log_CheckConsole(0x2Eu);
      v114 = AVE_GetCurrTime();
      v115 = AVE_Log_GetLevelStr(7);
      if (v113)
      {
        printf("%lld %d AVE %s: H264FrameRec: isLastSlice %d\n", v114, 46, v115, v111 == v196);
        v116 = AVE_GetCurrTime();
        v190 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v116, 46, v190, v111 == v196);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: isLastSlice %d", v114, 46, v115, v111 == v196);
      }
      v13 = a1;
    }
    if (!v195 || v111 == v196)
    {
      v208 = (_DWORD **)(v13 + 12768);
      if (v199[94] < 2u || *(_DWORD *)(a2 + 168))
      {
        v117 = 0;
        v118 = 1;
        v119 = v13 + 12768;
        v13[12777] = 0;
        do
        {
          v120 = v118;
          v121 = &v13[3 * v117 + 12771];
          v122 = v13;
          v123 = v121 + 2;
          if (v121[2])
          {
            v124 = (char *)&v122[3 * v117 + 12772] + 3;
            memcpy(v210, v121, *v124 - 1);
            memset(&v210[*v124 - 1], 255, *v123);
            v210[*v123 - 1 + *v124] = 0x80;
            v125 = *v123 + (uint64_t)*v124;
            v119[9] += v125;
            **(_DWORD **)v119 += v125;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v126 = AVE_Log_CheckConsole(0x2Eu);
              v127 = AVE_GetCurrTime();
              v128 = AVE_Log_GetLevelStr(7);
              v129 = *v123;
              if (v126)
              {
                printf("%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d\n", v127, 46, v128, v117, *v124, v129);
                v130 = AVE_GetCurrTime();
                v131 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v130, 46, v131, v117, *v124, *v123);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] done %d %d", v127, 46, v128, v117, *v124, v129);
              }
              v119 = v208;
            }
            v210 += v125;
            v121[2] = 0;
            *(_QWORD *)v121 = 0;
          }
          v118 = 0;
          v117 = 1;
          v13 = a1;
        }
        while ((v120 & 1) != 0);
      }
      else
      {
        v119 = v13 + 12768;
      }
      if (v119[2])
      {
        v132 = 0;
        v133 = v13 + 7010;
        do
        {
          v134 = 0;
          v135 = v133;
          do
          {
            if (!*(v135 - 2))
              break;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v136 = AVE_Log_CheckConsole(0x2Eu);
              v137 = AVE_GetCurrTime();
              v138 = AVE_Log_GetLevelStr(7);
              v139 = *(v135 - 2);
              v140 = *v135;
              if (v136)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
                v141 = AVE_GetCurrTime();
                v142 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v141, 46, v142, v132, v134, v132, v134, *(v135 - 2), *(v135 - 1), *v135);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v137, 46, v138, v132, v134, v132, v134, v139, *(v135 - 1), v140);
              }
            }
            ++v134;
            v135 += 3;
          }
          while (v134 != 32);
          ++v132;
          v133 += 96;
        }
        while (v132 != 30);
        v143 = (char *)v210;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v144 = AVE_Log_CheckConsole(0x2Eu);
          v145 = AVE_GetCurrTime();
          v146 = AVE_Log_GetLevelStr(7);
          v147 = *((_DWORD *)v208 + 2);
          if (v144)
          {
            printf("%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes\n", v145, 46, v146, v147);
            v148 = AVE_GetCurrTime();
            v191 = AVE_Log_GetLevelStr(7);
            v143 = (char *)v210;
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v148, 46, v191, *((_DWORD *)v208 + 2));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: m_numCABACzeroWordToBeInserted %d bytes", v145, 46, v146, v147);
          }
        }
        if (*((_DWORD *)v208 + 2))
        {
          v149 = 0;
          do
          {
            v150 = &v143[v149];
            *(_WORD *)v150 = 0;
            v150[2] = 3;
            v149 += 3;
          }
          while (v149 < *((unsigned int *)v208 + 2));
        }
        if (!*v208)
        {
          v16 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v156 = AVE_Log_CheckConsole(3u);
            v157 = AVE_GetCurrTime();
            v158 = AVE_Log_GetLevelStr(4);
            if (v156)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL\n", v157, 3, v158, "CopyEncodedFrameIntoExternalBuffer", 2217, "m_pLastOutputSlicesSizes != __null");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer m_pLastOutputSlicesSizes = NULL");
          }
          return v16;
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v151 = AVE_Log_CheckConsole(0x2Eu);
          v152 = AVE_GetCurrTime();
          v153 = AVE_Log_GetLevelStr(7);
          v154 = **v208;
          if (v151)
          {
            printf("%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes\n", v152, 46, v153, v154);
            v155 = AVE_GetCurrTime();
            v192 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v155, 46, v192, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: previous *m_pLastOutputSlicesSizes %d bytes", v152, 46, v153, v154);
          }
        }
        **v208 += *((_DWORD *)v208 + 2);
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v159 = AVE_Log_CheckConsole(0x2Eu);
          v160 = AVE_GetCurrTime();
          v161 = AVE_Log_GetLevelStr(7);
          v162 = **v208;
          if (v159)
          {
            printf("%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes\n", v160, 46, v161, v162);
            v163 = AVE_GetCurrTime();
            v193 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v163, 46, v193, **v208);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: after *m_pLastOutputSlicesSizes %d bytes", v160, 46, v161, v162);
          }
        }
        v164 = 0;
        v165 = a1 + 7010;
        do
        {
          v166 = 0;
          v167 = v165;
          do
          {
            if (!*(v167 - 2))
              break;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v168 = AVE_Log_CheckConsole(0x2Eu);
              v169 = AVE_GetCurrTime();
              v170 = AVE_Log_GetLevelStr(7);
              v171 = *(v167 - 2);
              v172 = *v167;
              if (v168)
              {
                printf("%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d\n", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
                v173 = AVE_GetCurrTime();
                v174 = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v173, 46, v174, v164, v166, v164, v166, *(v167 - 2), *(v167 - 1), *v167);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: buffer %2d slices %2d m_OutputSlicesSizes = [%2d][%2d][SIZE] %8d [OFFSET] %8d [CODED_BUFFER_CONTEXT_SWITCH_REMOVE] %8d", v169, 46, v170, v164, v166, v164, v166, v171, *(v167 - 1), v172);
              }
            }
            ++v166;
            v167 += 3;
          }
          while (v166 != 32);
          ++v164;
          v165 += 96;
        }
        while (v164 != 30);
        v13 = a1;
      }
      v112 = v199;
    }
    v16 = *((unsigned int *)v112 + 175);
    v175 = v210;
    if (!(_DWORD)v16)
      return v16;
    if ((_DWORD)v16 == 1)
    {
      if (!v112[860])
        return 0;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v176 = AVE_Log_CheckConsole(0x2Eu);
        v177 = AVE_GetCurrTime();
        v178 = AVE_Log_GetLevelStr(7);
        v179 = *((_DWORD *)v112 + 344);
        if (v176)
        {
          printf("%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d\n", v177, 46, v178, v179);
          v180 = AVE_GetCurrTime();
          v194 = AVE_Log_GetLevelStr(7);
          v175 = v210;
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v180, 46, v194, *((_DWORD *)v112 + 344));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: CopyEncodedFrameIntoExternalBuffer bRPUNutPresent - size %d", v177, 46, v178, v179);
        }
      }
      v184 = *((unsigned int *)v112 + 344);
      if ((_DWORD)v184)
      {
        memcpy(v175, (char *)v13 + 68417, v184);
        return 0;
      }
      v16 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v185 = AVE_Log_CheckConsole(3u);
        v186 = AVE_GetCurrTime();
        v187 = AVE_Log_GetLevelStr(4);
        if (v185)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0\n", v186, 3, v187, "CopyEncodedFrameIntoExternalBuffer", 2252, "m_VideoParamsDriver.RPUNutSize != 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: RPUNutSize = 0");
      }
    }
    else
    {
      v16 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v181 = AVE_Log_CheckConsole(3u);
        v182 = AVE_GetCurrTime();
        v183 = AVE_Log_GetLevelStr(4);
        if (v181)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL\n", v182, 3, v183, "CopyEncodedFrameIntoExternalBuffer", 2269, "false");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR - codecID not recognized. FAIL");
      }
    }
  }
  else
  {
    v16 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v39 = AVE_Log_CheckConsole(3u);
      v40 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL\n", v40, 3, v41, "CopyEncodedFrameIntoExternalBuffer", 2041, "buf != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CopyEncodedFrameIntoExternalBuffer buf == NULL");
    }
  }
  return v16;
}

uint64_t H264VideoEncoderFrameReceiver::SendSPSandPPS(uint64_t a1, int *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  char *Buffer;
  unsigned __int8 *v17;
  __IOSurface *v18;
  __IOSurface *v19;
  uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  __uint64_t v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  __uint64_t v41;
  char *v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  unsigned __int8 *BaseAddress;
  uint64_t v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  unsigned int v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  uint64_t i;
  int v79;
  __uint64_t v80;
  const char *v81;
  int v82;
  __uint64_t v83;
  const char *v84;
  int v85;
  __uint64_t v86;
  const char *v87;
  int v88;
  __uint64_t v89;
  const char *v90;
  int v91;
  const char *v92;
  uint64_t v93;
  int v94;
  __uint64_t v95;
  const char *v96;
  __uint64_t v97;
  int v98;
  int v99;
  __uint64_t v100;
  const char *v101;
  __uint64_t v102;
  const char *v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  __uint64_t v107;
  const char *v108;
  int v109;
  __uint64_t v110;
  const char *v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  int v115;
  __uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  __uint64_t v121;
  const char *v122;
  __IOSurface *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  __uint64_t v129;
  const char *v130;
  __uint64_t v131;
  uint64_t v132;
  int v133;
  __uint64_t v134;
  const char *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  __uint64_t v141;
  const char *v142;
  __uint64_t v143;
  int v144;
  __uint64_t v145;
  const char *v146;
  __uint64_t v147;
  int v148;
  __uint64_t v149;
  const char *v150;
  __uint64_t v151;
  int v152;
  __uint64_t v153;
  const char *v154;
  __uint64_t v155;
  uint64_t v156;
  const char *v157;
  const char *v158;
  const char *v159;
  const char *v160;
  const char *v161;
  const char *v162;
  const char *v163;
  const char *v164;
  const char *v165;
  const char *v166;
  const char *v167;
  const char *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  int *v172;
  __IOSurface *v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  const void **v176;
  CFTypeRef cf;
  unsigned int v178[4];
  _DWORD v179[7];
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 67932;
  v7 = a1 + 51272;
  v8 = AVE_CalcBufSizeOfParameterSet(*(_DWORD *)(a1 + 68256), 2);
  *(_OWORD *)v178 = 0u;
  memset(v179, 0, sizeof(v179));
  cf = 0;
  if (*(_BYTE *)(v6 + 413))
  {
    if (!*(_QWORD *)(v7 + 80))
    {
      if (AVE_Log_CheckLevel(0x2Eu, 4))
      {
        v9 = AVE_Log_CheckConsole(0x2Eu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.\n", CurrTime, 46, LevelStr);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: HEIF -> nobody wants this SPS PPS header. dump it.");
      }
      return 0;
    }
  }
  else if (!*(_QWORD *)(v7 + 72))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v31 = AVE_Log_CheckConsole(0x2Eu);
      v32 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(4);
      if (v31)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.\n", v32, 46, v33);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this SPS PPS header. dump it.");
    }
    return 0;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v12 = AVE_Log_CheckConsole(0x2Eu);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      printf("%lld %d AVE %s: H264FrameRec: Sending SPS PPS\n", v13, 46, v14);
      v15 = AVE_GetCurrTime();
      v157 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v15, 46, v157);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Sending SPS PPS", v13, 46, v14);
    }
  }
  if (!a2)
  {
    v20 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v25 = AVE_Log_CheckConsole(3u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL\n", v26, 3, v27, "SendSPSandPPS", 2316, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame == NULL");
    }
    goto LABEL_36;
  }
  if (a2[229] >= 0x1F)
  {
    v20 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d\n", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
        v29 = AVE_GetCurrTime();
        v30 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendSPSandPPS Frame->PlaneNumber = %d", v29, 3, v30, "SendSPSandPPS", 2317, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", a2[229]);
    }
LABEL_36:
    v17 = 0;
    goto LABEL_37;
  }
  Buffer = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v8, (OpaqueCMBlockBuffer **)&cf);
  if (Buffer)
  {
    v17 = (unsigned __int8 *)Buffer;
    v176 = (const void **)(a1 + 245216);
    if (!*(_BYTE *)(v6 + 204) || a2[40])
      goto LABEL_16;
    v43 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v8, (OpaqueCMBlockBuffer **)&cf);
    *v176 = v43;
    if (v43)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v44 = AVE_Log_CheckConsole(0x2Eu);
        v45 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(7);
        v47 = *(_DWORD *)(a1 + 245224);
        if (v44)
        {
          printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d\n", v45, 46, v46, *v176, v47);
          v48 = AVE_GetCurrTime();
          v49 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v48, 46, v49, *(const void **)(a1 + 245216), *(_QWORD *)(a1 + 245224));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CreateBuffer %p %d", v45, 46, v46, *v176, v47);
        }
      }
LABEL_16:
      v18 = IOSurfaceLookup(*(_DWORD *)(a1 + 25788));
      if (!v18)
      {
        v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v38 = AVE_Log_CheckConsole(3u);
          v39 = AVE_GetCurrTime();
          v40 = AVE_Log_GetLevelStr(4);
          if (v38)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.\n", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
            v41 = AVE_GetCurrTime();
            v160 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v41, 3, v160, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFWSurface IOSurfaceLookup failed.", v39, 3, v40, "SendSPSandPPS", 2333, "SPSPPSBufferFromFWSurface != __null");
          }
        }
        goto LABEL_37;
      }
      v19 = v18;
      if (IOSurfaceLock(v18, 0, 0))
      {
        v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v21 = AVE_Log_CheckConsole(3u);
          v22 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          if (v21)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.\n", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
            v24 = AVE_GetCurrTime();
            v158 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v24, 3, v158, "SendSPSandPPS", 2336, "err2 == 0");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock SPSPPSBufferFromFWSurface failed.", v22, 3, v23, "SendSPSandPPS", 2336, "err2 == 0");
          }
        }
        goto LABEL_117;
      }
      BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(v19);
      if (!BaseAddress)
      {
        v20 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v62 = AVE_Log_CheckConsole(3u);
          v63 = AVE_GetCurrTime();
          v64 = AVE_Log_GetLevelStr(4);
          if (v62)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.\n", v63, 3, v64, "SendSPSandPPS", 2339, "SPSPPSBufferFromFW != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SPSPPSBufferFromFW = NULL.");
        }
        goto LABEL_116;
      }
      v175 = v17;
      if (a3)
      {
        v173 = v19;
        v51 = *(_QWORD *)(a1 + 8 * a2[229] + 27072);
        if (!v51)
        {
          v20 = 3758097084;
          v19 = v173;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v71 = AVE_Log_CheckConsole(3u);
            v72 = AVE_GetCurrTime();
            v73 = AVE_Log_GetLevelStr(4);
            if (v71)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL\n", v72, 3, v73, "SendSPSandPPS", 2348, "codedHeader != __null", a2[229]);
              v72 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              v19 = v173;
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: m_CodedBuffPointerDataHeader[%d] == NULL", v72);
          }
          goto LABEL_116;
        }
        v174 = BaseAddress;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v52 = AVE_Log_CheckConsole(0x2Eu);
          v53 = AVE_GetCurrTime();
          v54 = AVE_Log_GetLevelStr(7);
          v55 = *(_DWORD *)(v51 + 152);
          if (v52)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v53, 46, v54, a2[229], v55);
            v56 = AVE_GetCurrTime();
            v57 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v56, 46, v57, a2[229], *(_DWORD *)(v51 + 152));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v53, 46, v54, a2[229], v55);
          }
        }
        for (i = 0; i != 16; i += 4)
        {
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v79 = AVE_Log_CheckConsole(0x2Eu);
            v80 = AVE_GetCurrTime();
            v81 = AVE_Log_GetLevelStr(7);
            v82 = *(_DWORD *)(v51 + i);
            if (v79)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d\n", v80, 46, v81, a2[229], v82);
              v83 = AVE_GetCurrTime();
              v84 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v83, 46, v84, a2[229], *(_DWORD *)(v51 + i));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_I_MbCnt %d", v80, 46, v81, a2[229], v82);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v85 = AVE_Log_CheckConsole(0x2Eu);
            v86 = AVE_GetCurrTime();
            v87 = AVE_Log_GetLevelStr(7);
            v88 = *(_DWORD *)(v51 + i + 16);
            if (v85)
            {
              printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d\n", v86, 46, v87, a2[229], v88);
              v89 = AVE_GetCurrTime();
              v90 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v89, 46, v90, a2[229], *(_DWORD *)(v51 + i + 16));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_P_MbCnt %d", v86, 46, v87, a2[229], v88);
            }
          }
        }
        v74 = *(_DWORD *)(v51 + 152);
        v19 = v173;
        if (v74 < 8)
        {
          v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v91 = AVE_Log_CheckConsole(3u);
            v76 = AVE_GetCurrTime();
            v92 = AVE_Log_GetLevelStr(4);
            if (v91)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v92, "SendSPSandPPS", 2359, "SPSPPSHeaderSize != 0", a2[229]);
              v76 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
              v19 = v173;
            }
LABEL_115:
            syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])", v76);
            goto LABEL_116;
          }
          goto LABEL_116;
        }
      }
      else
      {
        v174 = BaseAddress;
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v65 = AVE_Log_CheckConsole(0x2Eu);
          v66 = AVE_GetCurrTime();
          v67 = AVE_Log_GetLevelStr(7);
          v68 = a2[5480];
          if (v65)
          {
            printf("%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d\n", v66, 46, v67, a2[229], v68);
            v69 = AVE_GetCurrTime();
            v70 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v69, 46, v70, a2[229], a2[5480]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: codedHeader PlaneNumber %d ui32_SPSPPSHeaderBits %d", v66, 46, v67, a2[229], v68);
          }
        }
        v74 = a2[5480];
        if (v74 <= 7)
        {
          v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v75 = AVE_Log_CheckConsole(3u);
            v76 = AVE_GetCurrTime();
            v77 = AVE_Log_GetLevelStr(4);
            if (v75)
            {
              printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader->ui32_SPSPPSHeaderBits = 0 (m_CodedBuffPointerDataHeader[%d])\n", v76, 3, v77, "SendSPSandPPS", 2365, "SPSPPSHeaderSize != 0", a2[229]);
              v76 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            goto LABEL_115;
          }
LABEL_116:
          IOSurfaceUnlock(v19, 0, 0);
LABEL_117:
          CFRelease(v19);
          goto LABEL_37;
        }
      }
      v93 = v74 >> 3;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v94 = AVE_Log_CheckConsole(0x2Eu);
        v95 = AVE_GetCurrTime();
        v96 = AVE_Log_GetLevelStr(7);
        if (v94)
        {
          printf("%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d\n", v95, 46, v96, v93);
          v97 = AVE_GetCurrTime();
          v162 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v97, 46, v162, v93);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: m_SPSPPSHeaderSize from FW = %d", v95, 46, v96, v93);
        }
      }
      v98 = *(_DWORD *)(v6 + 324);
      if (v98 == 1)
      {
        v17 = v175;
        CopyVPSSPSPPSHeader(v174, v175, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v104 = AVE_Log_CheckConsole(0x2Eu);
          v105 = AVE_GetCurrTime();
          v106 = AVE_Log_GetLevelStr(7);
          if (v104)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v105, 46, v106, v93, v178[1], v178[2]);
            v107 = AVE_GetCurrTime();
            v108 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v107, 46, v108, v93, v178[1], v178[2]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v105, 46, v106, v93, v178[1], v178[2]);
          }
          v17 = v175;
        }
        if (*(_BYTE *)(v6 + 204))
        {
          if (!a2[40])
          {
            CopyVPSSPSPPSHeader(v174, (unsigned __int8 *)*v176, v93, v178, *(_DWORD *)v6, *(_DWORD *)(v7 + 16276));
            *(_QWORD *)(a1 + 245224) = v93;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v115 = AVE_Log_CheckConsole(0x2Eu);
              v116 = AVE_GetCurrTime();
              v117 = AVE_Log_GetLevelStr(7);
              if (v115)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d\n", v116, 46, v117, *v176, *(_DWORD *)(a1 + 245224));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopyVPSSPSPPSHeader %p %d");
              goto LABEL_135;
            }
          }
        }
      }
      else
      {
        v17 = v175;
        if (v98)
        {
          v20 = 3758097084;
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v109 = AVE_Log_CheckConsole(3u);
            v110 = AVE_GetCurrTime();
            v111 = AVE_Log_GetLevelStr(4);
            if (v109)
            {
              printf("%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)\n", v110, 3, v111, "SendSPSandPPS", 2402, "false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | SendSPSAndPPS ERROR: codecType not recognized)");
          }
          goto LABEL_116;
        }
        CopySPSPPSHeader(v174, v175, v93, v178, *(_DWORD *)(v7 + 16276));
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v99 = AVE_Log_CheckConsole(0x2Eu);
          v100 = AVE_GetCurrTime();
          v101 = AVE_Log_GetLevelStr(7);
          if (v99)
          {
            printf("%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)\n", v100, 46, v101, v93, v178[1], v178[2]);
            v102 = AVE_GetCurrTime();
            v103 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v102, 46, v103, v93, v178[1], v178[2]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: CopySPSPPSHeader m_SPSPPSHeaderSize %d (SPS %d + PPS %d)", v100, 46, v101, v93, v178[1], v178[2]);
          }
          v17 = v175;
        }
        if (*(_BYTE *)(v6 + 204))
        {
          if (!a2[40])
          {
            CopySPSPPSHeader(v174, (unsigned __int8 *)*v176, v93, v178, *(_DWORD *)(v7 + 16276));
            *(_QWORD *)(a1 + 245224) = v93;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v112 = AVE_Log_CheckConsole(0x2Eu);
              v113 = AVE_GetCurrTime();
              v114 = AVE_Log_GetLevelStr(7);
              if (v112)
              {
                printf("%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d\n", v113, 46, v114, *v176, *(_DWORD *)(a1 + 245224));
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: SendSPSandPPS bUseElementaryStreamOutput CopySPSPPSHeader %p %d");
LABEL_135:
              v17 = v175;
            }
          }
        }
      }
      if (*(_BYTE *)(v6 + 413))
      {
        v118 = *(_QWORD *)(v7 + 80);
        if (v118 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            v119 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(a1, v118, v17, v178, (uint64_t)a2);
            if ((_DWORD)v119)
            {
              v20 = v119;
              if (!AVE_Log_CheckLevel(3u, 4))
                goto LABEL_116;
              v120 = AVE_Log_CheckConsole(3u);
              v121 = AVE_GetCurrTime();
              v122 = AVE_Log_GetLevelStr(4);
              if (v120)
              {
                v123 = v19;
                v124 = 2425;
LABEL_149:
                printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.\n", v121, 3, v122, "SendSPSandPPS", v124, "err == noErr");
                AVE_GetCurrTime();
                v19 = v123;
                AVE_Log_GetLevelStr(4);
                goto LABEL_187;
              }
              goto LABEL_187;
            }
            goto LABEL_164;
          }
          AVE_PS_Compose_general_profile_compatibility_flag(a1 + 158376, a1 + 239272, 4);
          AVE_PS_Compose_general_constraint_indicator_flags(a1 + 158376, (_BYTE *)(a1 + 239276), 6);
          v132 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(a1, *(_QWORD *)(v7 + 80), v17, v93, (uint64_t)a2);
          if ((_DWORD)v132)
          {
            v20 = v132;
            if (!AVE_Log_CheckLevel(0x2Eu, 4))
              goto LABEL_116;
            v133 = AVE_Log_CheckConsole(0x2Eu);
            v134 = AVE_GetCurrTime();
            v135 = AVE_Log_GetLevelStr(4);
            if (v133)
            {
              v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2436, "err == noErr", v175, v93, a2);
              v134 = AVE_GetCurrTime();
              v136 = AVE_Log_GetLevelStr(4);
              v171 = v93;
              v172 = a2;
              v170 = v175;
              v137 = 2436;
LABEL_163:
              v169 = v137;
              v164 = v136;
LABEL_190:
              syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p", v134, 46, v164, "AVE_FrameRecv", "SendSPSandPPS", v169, "err == noErr", v170, v171, v172);
              goto LABEL_116;
            }
            v171 = v93;
            v172 = a2;
            v17 = v175;
            v170 = v175;
            v156 = 2436;
            goto LABEL_189;
          }
          goto LABEL_164;
        }
      }
      else
      {
        v125 = *(_QWORD *)(v7 + 72);
        if (v125 != 1)
        {
          if (*(_DWORD *)v6 <= 1u)
          {
            v126 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc(a1, v125, v17, v178, (uint64_t)a2);
            if ((_DWORD)v126)
            {
              v20 = v126;
              if (!AVE_Log_CheckLevel(3u, 4))
                goto LABEL_116;
              v127 = AVE_Log_CheckConsole(3u);
              v121 = AVE_GetCurrTime();
              v122 = AVE_Log_GetLevelStr(4);
              if (v127)
              {
                v123 = v19;
                v124 = 2472;
                goto LABEL_149;
              }
LABEL_187:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreatevideoFormatDesc failed.");
              goto LABEL_116;
            }
            goto LABEL_164;
          }
          AVE_PS_Compose_general_profile_compatibility_flag(a1 + 158376, a1 + 239272, 4);
          AVE_PS_Compose_general_constraint_indicator_flags(a1 + 158376, (_BYTE *)(a1 + 239276), 6);
          v138 = H264VideoEncoderFrameReceiver::CreatevideoFormatDesc_MVHEVC(a1, *(_QWORD *)(v7 + 72), v17, v93, (uint64_t)a2);
          if ((_DWORD)v138)
          {
            v20 = v138;
            if (!AVE_Log_CheckLevel(0x2Eu, 4))
              goto LABEL_116;
            v139 = AVE_Log_CheckConsole(0x2Eu);
            v134 = AVE_GetCurrTime();
            v135 = AVE_Log_GetLevelStr(4);
            if (v139)
            {
              v17 = v175;
              printf("%lld %d AVE %s: %s::%s:%d %s | failed to create MV-HEVC format descriptor %p %d %p\n", v134, 46, v135, "AVE_FrameRecv", "SendSPSandPPS", 2483, "err == noErr", v175, v93, a2);
              v134 = AVE_GetCurrTime();
              v136 = AVE_Log_GetLevelStr(4);
              v171 = v93;
              v172 = a2;
              v170 = v175;
              v137 = 2483;
              goto LABEL_163;
            }
            v171 = v93;
            v172 = a2;
            v17 = v175;
            v170 = v175;
            v156 = 2483;
LABEL_189:
            v169 = v156;
            v164 = v135;
            goto LABEL_190;
          }
LABEL_164:
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v140 = AVE_Log_CheckConsole(0x2Eu);
            v141 = AVE_GetCurrTime();
            v142 = AVE_Log_GetLevelStr(7);
            if (v140)
            {
              printf("%lld %d AVE %s: H264FrameRec: VPS  size %d\n", v141, 46, v142, v178[0]);
              v143 = AVE_GetCurrTime();
              v165 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v143, 46, v165, v178[0]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: VPS  size %d", v141, 46, v142, v178[0]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v144 = AVE_Log_CheckConsole(0x2Eu);
            v145 = AVE_GetCurrTime();
            v146 = AVE_Log_GetLevelStr(7);
            if (v144)
            {
              printf("%lld %d AVE %s: H264FrameRec: SPS  size %d\n", v145, 46, v146, v178[1]);
              v147 = AVE_GetCurrTime();
              v166 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v147, 46, v166, v178[1]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: SPS  size %d", v145, 46, v146, v178[1]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v148 = AVE_Log_CheckConsole(0x2Eu);
            v149 = AVE_GetCurrTime();
            v150 = AVE_Log_GetLevelStr(7);
            if (v148)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS1 size %d\n", v149, 46, v150, v178[2]);
              v151 = AVE_GetCurrTime();
              v167 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v151, 46, v167, v178[2]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS1 size %d", v149, 46, v150, v178[2]);
            }
          }
          if (AVE_Log_CheckLevel(0x2Eu, 7))
          {
            v152 = AVE_Log_CheckConsole(0x2Eu);
            v153 = AVE_GetCurrTime();
            v154 = AVE_Log_GetLevelStr(7);
            if (v152)
            {
              printf("%lld %d AVE %s: H264FrameRec: PPS2 size %d\n", v153, 46, v154, v178[3]);
              v155 = AVE_GetCurrTime();
              v168 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v155, 46, v168, v178[3]);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec: PPS2 size %d", v153, 46, v154, v178[3]);
            }
          }
LABEL_184:
          AVE_Dump_WriteOutput(*(_QWORD **)(a1 + 71528), a2[3], v17, v93);
          v20 = 0;
          goto LABEL_116;
        }
      }
      if (*(_QWORD *)(v7 + 8) && *(_QWORD *)v7)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v128 = AVE_Log_CheckConsole(0x2Eu);
          v129 = AVE_GetCurrTime();
          v130 = AVE_Log_GetLevelStr(7);
          if (v128)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)\n", v129, 46, v130, v93);
            v131 = AVE_GetCurrTime();
            v163 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v131, 46, v163, v93);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes (SPS PPS)", v129, 46, v130, v93);
          }
          v17 = v175;
        }
        (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(v7 + 8))(*(_QWORD *)v7, v17, v93, 0, *(unsigned int *)(v6 + 324));
      }
      *(_BYTE *)(a1 + 25784) = 1;
      goto LABEL_184;
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v58 = AVE_Log_CheckConsole(3u);
      v59 = AVE_GetCurrTime();
      v60 = AVE_Log_GetLevelStr(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.\n", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
        v61 = AVE_GetCurrTime();
        v161 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v61, 3, v161, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed 2.", v59, 3, v60, "SendSPSandPPS", 2327, "m_SPSPPSFinalOutputbUseElementaryStreamOutput != __null");
      }
      v20 = 3758097085;
    }
    else
    {
      v20 = 3758097085;
    }
  }
  else if (AVE_Log_CheckLevel(3u, 4))
  {
    v34 = AVE_Log_CheckConsole(3u);
    v35 = AVE_GetCurrTime();
    v36 = AVE_Log_GetLevelStr(4);
    if (v34)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.\n", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
      v37 = AVE_GetCurrTime();
      v159 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v37, 3, v159, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: CreateBuffer failed.", v35, 3, v36, "SendSPSandPPS", 2322, "FinalOutput != __null");
    }
    v17 = 0;
    v20 = 3758097085;
  }
  else
  {
    v17 = 0;
    v20 = 3758097085;
  }
LABEL_37:
  H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, v17);
  if (cf)
    CFRelease(cf);
  return v20;
}

char *H264VideoEncoderFrameReceiver::CreateBuffer(CFAllocatorRef *this, size_t size, OpaqueCMBlockBuffer **a3)
{
  _DWORD *v4;
  char *v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  char *dataPointerOut;

  dataPointerOut = 0;
  if (size)
  {
    v4 = (_DWORD *)this + 59825;
    if (*((_BYTE *)this + 68345))
    {
      if (this[6419] != (CFAllocatorRef)1 && *v4 != 2)
      {
        v5 = (char *)CFAllocatorAllocate(this[6413], size, 0);
LABEL_15:
        dataPointerOut = v5;
        goto LABEL_16;
      }
    }
    else if (this[6418] != (CFAllocatorRef)1 && *v4 != 2)
    {
      VTEncoderSessionCreateCMBlockBuffer();
      CMBlockBufferGetDataPointer(*a3, 0, 0, 0, &dataPointerOut);
LABEL_16:
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v9 = AVE_Log_CheckConsole(0x2Eu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(7);
        if (v9)
        {
          printf("%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld\n", CurrTime, 46, LevelStr, dataPointerOut, size);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CreateBuffer %p size %ld");
      }
      return dataPointerOut;
    }
    if (*v4 == 2 && this[6412])
    {
      VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer();
      goto LABEL_16;
    }
    v5 = (char *)malloc_type_malloc(size, 0x1B9D6B20uLL);
    goto LABEL_15;
  }
  if (AVE_Log_CheckLevel(0x2Eu, 4))
  {
    v6 = AVE_Log_CheckConsole(0x2Eu);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(4);
    if (v6)
    {
      printf("%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0\n", v7, 46, v8);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: FIG: H264FrameRec: CreateBuffer with size 0");
  }
  return dataPointerOut;
}

__uint64_t H264VideoEncoderFrameReceiver::ProcessAndEmitLrmeStats(uint64_t a1, uint64_t a2)
{
  __uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  __uint64_t v15;
  int v16;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v19;
  __uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  IOSurfaceID *v24;
  IOSurfaceID *v25;
  IOSurfaceID *v26;
  char v27;
  int v28;
  int v29;
  __IOSurface *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  __IOSurface *v36;
  __uint64_t v37;
  __uint64_t v38;
  const char *v39;
  void (*v40)(uint64_t, unsigned __int8 *, uint64_t, _QWORD *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  __uint64_t v46;
  __uint64_t v47;
  const char *v48;
  char v49;
  __IOSurface *v50;
  size_t v51;
  char *BaseAddress;
  int v54;
  unsigned int v55;
  char *v56;
  unsigned int AllocSize;
  char *v58;
  char *v59;
  size_t BytesPerRow;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int16 *v79;
  char *v85;
  char *v88;
  char *v91;
  char *v94;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned __int16 *v103;
  char *v105;
  char *v108;
  char *v111;
  char *v114;
  const char *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  char *v121;
  char *v122;
  size_t v123;
  unsigned __int8 *v124;
  int v125;
  const char *v126;
  char *v127;
  char *v128;
  char *v129;
  size_t v130;
  const char *v131;
  int v132;
  __uint64_t v133;
  const char *v134;
  int v135;
  __uint64_t v136;
  const char *v137;
  int v138;
  __uint64_t v139;
  const char *v140;
  int v141;
  __uint64_t v142;
  const char *v143;
  int v144;
  int v145;
  __uint64_t v146;
  const char *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  int v153;
  int v154;
  char *v155;
  int v156;
  int v157;
  int v158;
  char *v160;
  int v162;
  __uint64_t v163;
  const char *v164;
  int v165;
  __uint64_t v166;
  const char *v167;
  int v168;
  __uint64_t v169;
  const char *v170;
  int v171;
  __uint64_t v172;
  const char *v173;
  int v174;
  int v175;
  __uint64_t v176;
  const char *v177;
  int v178;
  __uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  char v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int i;
  uint64_t v190;
  unsigned int v191;
  char *v192;
  uint64_t j;
  unsigned __int16 *v194;
  int v195;
  char *v197;
  _BOOL4 v200;
  int v202;
  __uint64_t v203;
  const char *v204;
  const char *v205;
  const char *v206;
  const char *v207;
  const char *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __uint64_t v213;
  size_t v214;
  int v215;
  int v216;
  unsigned int v217;
  __uint64_t v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  BOOL v226;
  unsigned int v227;
  _DWORD *v228;
  unsigned __int8 *v229;
  int v230;
  uint64_t *v231;
  __IOSurface *v232;
  OpaqueCMBlockBuffer *v233;
  _QWORD v234[6];

  v234[4] = *MEMORY[0x1E0C80C00];
  v233 = 0;
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.\n", CurrTime, 3, LevelStr, "ProcessAndEmitLrmeStats", 2652, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with Frame == NULL.");
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 239300) != 2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.\n", v20, 3, v21, "ProcessAndEmitLrmeStats", 2654, "false");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec WARNING: ProcessAndEmitLrmeStats called with AVE_ClientType_LRME == false.");
    }
LABEL_25:
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
    return 0;
  }
  v4 = 3758097084;
  v5 = (_DWORD *)(a2 + 23468);
  if (*(_DWORD *)(a2 + 23468) == 3)
  {
    v229 = 0;
    v231 = (uint64_t *)(a1 + 51272);
    v6 = 0;
    v232 = 0;
    v7 = 0;
    v8 = -536870212;
LABEL_5:
    v9 = v6;
    AVE_Dump_WriteOutput(*(_QWORD **)(a1 + 71528), *(_DWORD *)(a2 + 12), v7, v6);
    v10 = v229;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v11 = AVE_Log_CheckConsole(0x2Eu);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(7);
      v14 = *(_DWORD *)(a2 + 160);
      if (v11)
      {
        printf("%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d\n", v12, 46, v13, v14);
        v15 = AVE_GetCurrTime();
        v205 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v15, 46, v205, *(_DWORD *)(a2 + 160));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ARK H264FrameRec:ProcessAndEmitLrmeStats %d", v12, 46, v13, v14);
      }
    }
    if (*v5 == 3)
      goto LABEL_34;
    v40 = (void (*)(uint64_t, unsigned __int8 *, uint64_t, _QWORD *, _QWORD))v231[1];
    if (v40)
    {
      v41 = *v231;
      if (*v231)
      {
        v234[0] = *(unsigned int *)(a2 + 160);
        v234[1] = -1;
        v42 = *(int *)(a2 + 2304);
        v234[2] = *(_QWORD *)(a2 + 2296);
        v234[3] = v42;
        v40(v41, v229, v9, v234, *(unsigned int *)(a1 + 68256));
LABEL_34:
        v4 = 0;
LABEL_35:
        v36 = v232;
        goto LABEL_36;
      }
    }
    if (!AVE_Log_CheckLevel(3u, 4))
      goto LABEL_35;
    v43 = AVE_Log_CheckConsole(3u);
    v44 = AVE_GetCurrTime();
    v45 = AVE_Log_GetLevelStr(4);
    v36 = v232;
    if (v43)
    {
      printf("%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped\n", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
      v46 = AVE_GetCurrTime();
      v207 = AVE_Log_GetLevelStr(4);
      v36 = v232;
      v4 = 3758097084;
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v46, 3, v207, "ProcessAndEmitLrmeStats", 3137, "false");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: Session callbacks are not set properly, output will be dropped", v44, 3, v45, "ProcessAndEmitLrmeStats", 3137, "false");
    }
LABEL_36:
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
    if (v10)
      H264VideoEncoderFrameReceiver::DeleteBuffer((H264VideoEncoderFrameReceiver *)a1, v10);
    goto LABEL_57;
  }
  v228 = (_DWORD *)(a2 + 23468);
  v22 = (char *)(a1 + 67834);
  v23 = a1 + 4 * *(int *)(a2 + 916);
  v24 = (IOSurfaceID *)(v23 + 26392);
  v25 = (IOSurfaceID *)(v23 + 26432);
  if (*(_BYTE *)(a1 + 67845))
    v26 = v25;
  else
    v26 = v24;
  if (!*v26)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      v38 = AVE_GetCurrTime();
      v39 = AVE_Log_GetLevelStr(4);
      if (!(_DWORD)v32)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
        goto LABEL_55;
      }
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.\n", v38, 3, v39, "ProcessAndEmitLrmeStats", 2661, "statsMapCSID != 0");
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: ProcessAndEmitLrmeStats with statsMapCSID == NULL.");
    }
LABEL_44:
    v36 = 0;
    goto LABEL_45;
  }
  v27 = *v22;
  v28 = *(_DWORD *)(a1 + 51376);
  v29 = *(_DWORD *)(a1 + 51380);
  v231 = (uint64_t *)(a1 + 51272);
  v30 = IOSurfaceLookup(*v26);
  if (!v30)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v32 = AVE_Log_CheckConsole(3u);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(4);
      if ((_DWORD)v32)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.\n", v47, 3, v48, "ProcessAndEmitLrmeStats", 2664, "LrmeStatSurfaceRef != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
        goto LABEL_44;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: statSurfaceRef IOSurfaceLookup failed.");
LABEL_55:
      v36 = 0;
      goto LABEL_56;
    }
    goto LABEL_44;
  }
  v232 = v30;
  v31 = IOSurfaceLock(v30, 0, 0);
  if ((_DWORD)v31)
  {
    v32 = v31;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v33 = AVE_Log_CheckConsole(3u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      v36 = v232;
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.\n", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
        v37 = AVE_GetCurrTime();
        v206 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v37, 3, v206, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: IOSurfaceLock statSurfaceRef failed.", v34, 3, v35, "ProcessAndEmitLrmeStats", 2667, "lockErr == 0");
      }
      LODWORD(v4) = v32;
      goto LABEL_56;
    }
    LODWORD(v4) = v32;
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 67845))
  {
    v50 = v232;
    v49 = *(_BYTE *)(a1 + 67845);
    v51 = (IOSurfaceGetAllocSize(v232) >> 1) * ((v49 & 1) == 0);
  }
  else
  {
    LODWORD(v51) = 0;
    v50 = v232;
  }
  BaseAddress = (char *)IOSurfaceGetBaseAddress(v50);
  if (BaseAddress)
  {
    v54 = v28 << (2 * v27);
    v230 = v29 << (2 * v27);
    v223 = v54 + 15;
    v225 = v54 + 31;
    v227 = (v54 + 15) >> 4;
    v55 = (v230 + 15) >> 4;
    v56 = &BaseAddress[v51];
    AllocSize = IOSurfaceGetAllocSize(v50);
    if (*(int *)(a1 + 239304) > 7)
    {
      v4 = 3758097084;
      if (!*(_BYTE *)(a1 + 67845))
      {
        switch(*(_DWORD *)(a1 + 69632))
        {
          case 0:
            v221 = v230 + 15;
            v226 = *v22 == 0;
            v222 = 4 * v227 * v55;
            v127 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v222, &v233);
            v128 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v127);
            if (!v128)
            {
              v10 = (unsigned __int8 *)v127;
              if (AVE_Log_CheckLevel(0x14u, 4))
              {
                v178 = AVE_Log_CheckConsole(0x14u);
                v179 = AVE_GetCurrTime();
                v180 = AVE_Log_GetLevelStr(4);
                if (v178)
                {
                  printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v179, 20, v180, "ProcessAndEmitLrmeStats", 2999, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
                  v179 = AVE_GetCurrTime();
                  AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v179);
              }
              goto LABEL_240;
            }
            v129 = v128;
            v229 = (unsigned __int8 *)v127;
            v130 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v127) >> 2;
            if (AVE_Log_CheckLevel(0x14u, 7))
            {
              v216 = AVE_Log_CheckConsole(0x14u);
              v218 = AVE_GetCurrTime();
              v131 = AVE_Log_GetLevelStr(7);
              if (v216)
              {
                printf("%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v218, 20, v131, "ProcessAndEmitLrmeStats", v227, v55, v222, v130);
                v218 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: OF: %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v218, 20);
            }
            if (*(int *)(a1 + 239304) >= 22)
            {
              AVE_LRME_FillFSResultsBestMV(v56, v129, v222, v227, v55, v130, *v22);
              v6 = 4 * v227 * v55;
              v8 = 0;
              goto LABEL_135;
            }
            bzero(v129, v222);
            if (v221 >= 0x10)
            {
              v184 = 0;
              v183 = 0;
              v182 = 0;
              v185 = 2 * v226;
              v186 = (v55 + 3) >> 2;
              v187 = v55 * v130;
              v181 = 0;
              if (v227 <= 1)
                v188 = 1;
              else
                v188 = v227;
              if (v186 <= 1)
                v186 = 1;
              do
              {
                if (v223 >= 0x10)
                {
                  for (i = 0; i != v188; ++i)
                  {
                    v190 = 0;
                    v191 = i + 4 * v130 * v184;
                    v192 = v56;
                    do
                    {
                      for (j = 0; j != 7; ++j)
                      {
                        if (*(__int16 *)&v192[2 * j] < 0)
                          break;
                      }
                      v194 = (unsigned __int16 *)&v56[16 * v190 + 2 * j];
                      v195 = (__int16)*v194;
                      if (v195 < 0 && v191 < v187)
                      {
                        _S0 = (float)((char)v195 << v185);
                        __asm { FCVT            H0, S0 }
                        v197 = &v129[4 * v191];
                        *(_WORD *)v197 = LOWORD(_S0);
                        _S1 = (float)(*v194 << 17 >> 25 << v185);
                        __asm { FCVT            H1, S1 }
                        *((_WORD *)v197 + 1) = LOWORD(_S1);
                        v182 = (v182 + 1);
                        __asm { FCVT            S0, H0 }
                        v200 = _S0 != 0.0;
                        __asm { FCVT            S0, H1 }
                        if (_S0 != 0.0)
                          v200 = 1;
                        v183 = (v183 + v200);
                      }
                      v191 += v130;
                      ++v190;
                      v192 += 16;
                    }
                    while (v190 != 4);
                    v56 += 64;
                  }
                  v181 = (4 * v188 + v181);
                }
                ++v184;
              }
              while (v184 != v186);
            }
            else
            {
              v181 = 0;
              v182 = 0;
              v183 = 0;
            }
            if (AVE_Log_CheckLevel(0x14u, 7))
            {
              v202 = AVE_Log_CheckConsole(0x14u);
              v203 = AVE_GetCurrTime();
              v204 = AVE_Log_GetLevelStr(7);
              if (v202)
              {
                printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", v203, 20, v204, "ProcessAndEmitLrmeStats", v181, v182, v183);
                v203 = AVE_GetCurrTime();
                v211 = v182;
                v212 = v183;
                v210 = v181;
                v209 = AVE_Log_GetLevelStr(7);
              }
              else
              {
                v211 = v182;
                v212 = v183;
                v210 = v181;
                v209 = v204;
              }
              syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", v203, 20, v209, "ProcessAndEmitLrmeStats", v210, v211, v212);
            }
            goto LABEL_174;
          case 1:
            if (!AVE_Log_CheckLevel(0x14u, 4))
            {
LABEL_189:
              LODWORD(v4) = 0;
              v32 = 4294954394;
              goto LABEL_49;
            }
            v174 = AVE_Log_CheckConsole(0x14u);
            v142 = AVE_GetCurrTime();
            v143 = AVE_Log_GetLevelStr(4);
            v36 = v232;
            if (v174)
            {
              v144 = 3054;
LABEL_188:
              printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path\n", v142, 20, v143, "ProcessAndEmitLrmeStats", v144, "bVTOF == false");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
LABEL_207:
            syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_ALL_MV_RESULTS is not supported in video toolbox path");
LABEL_208:
            LODWORD(v4) = 0;
            v32 = 4294954394;
            break;
          case 2:
            v5 = v228;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              v165 = AVE_Log_CheckConsole(0x2Eu);
              v166 = AVE_GetCurrTime();
              v167 = AVE_Log_GetLevelStr(5);
              if (v165)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n\n", v166, 46, v167);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                v5 = v228;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_STATISTICS_ONLY is not supported\n");
            }
            goto LABEL_210;
          case 3:
            v5 = v228;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              v175 = AVE_Log_CheckConsole(0x2Eu);
              v176 = AVE_GetCurrTime();
              v177 = AVE_Log_GetLevelStr(5);
              if (v175)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n\n", v176, 46, v177);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                v5 = v228;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported\n");
            }
            goto LABEL_210;
          case 4:
            v5 = v228;
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              v168 = AVE_Log_CheckConsole(0x2Eu);
              v169 = AVE_GetCurrTime();
              v170 = AVE_Log_GetLevelStr(5);
              if (v168)
              {
                printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n\n", v169, 46, v170);
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                v5 = v228;
              }
              syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported\n");
            }
LABEL_210:
            v8 = 0;
            v6 = 0;
            v229 = 0;
            v7 = 0;
            goto LABEL_5;
          default:
LABEL_134:
            v8 = 0;
            v6 = 0;
            v229 = 0;
LABEL_135:
            v7 = 0;
            v5 = v228;
            goto LABEL_5;
        }
        goto LABEL_56;
      }
      v220 = v230 + 15;
      v118 = 4 * v227 * v55;
      v215 = *v22;
      if (*(_BYTE *)(a1 + 69636))
        v119 = 2 * v227 * v55;
      else
        v119 = 0;
      v120 = v119 + v118;
      v10 = (unsigned __int8 *)H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, v119 + v118, &v233);
      v121 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v10);
      if (v121)
      {
        v122 = v121;
        v222 = v120;
        bzero(v121, v120);
        v123 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v10) >> 2;
        v229 = v10;
        if (*(_BYTE *)(a1 + 69636))
          v124 = &v10[v118];
        else
          v124 = 0;
        if (AVE_Log_CheckLevel(0x14u, 7))
        {
          v125 = AVE_Log_CheckConsole(0x14u);
          v213 = AVE_GetCurrTime();
          v126 = AVE_Log_GetLevelStr(7);
          if (v125)
          {
            printf("%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n\n", v213, 20, v126, v227, v55, v222, v123);
            v213 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: Copy LRME Best MV data: %d x %d MBs, FinalOutputSize %lu, iMBsPerRowForOutput %d\n", v213);
        }
        if (v220 >= 0x10)
        {
          v149 = 0;
          v150 = 0;
          v148 = 0;
          LODWORD(v151) = (v55 + 3) >> 2;
          v152 = 4.0;
          if (!v215)
            v152 = 1.0;
          if (v227 <= 1)
            v153 = 1;
          else
            v153 = v227;
          if (v151 <= 1)
            v151 = 1;
          else
            v151 = v151;
          do
          {
            if (v223 >= 0x10)
            {
              v154 = 0;
              v155 = &v56[(((v225 & 0xFFFFFFE0) + 63) & 0x1FFFFFFC0) * v150];
              v156 = 4 * v150 * v123;
              do
              {
                v157 = 0;
                v158 = v156;
                do
                {
                  if (v149 + v157 < v55)
                  {
                    _S1 = (float)((int)(*(_DWORD *)v155 << 21) >> 21) / v152;
                    __asm { FCVT            H1, S1 }
                    v160 = &v122[4 * v158];
                    *(_WORD *)v160 = LOWORD(_S1);
                    _S1 = (float)((int)(*(_DWORD *)v155 << 11) >> 22) / v152;
                    __asm { FCVT            H1, S1 }
                    *((_WORD *)v160 + 1) = LOWORD(_S1);
                    if (*(_BYTE *)(a1 + 69636))
                      *(_WORD *)&v124[2 * v158] = *(_DWORD *)v155 >> 21;
                    if ((*(_DWORD *)v155 & 0x1FFFFF) != 0)
                      ++v148;
                  }
                  v155 += 4;
                  v158 += v123;
                  ++v157;
                }
                while (v157 != 4);
                ++v154;
                ++v156;
              }
              while (v154 != v153);
            }
            ++v150;
            v149 += 4;
          }
          while (v150 != v151);
        }
        else
        {
          v148 = 0;
        }
        if (AVE_Log_CheckLevel(0x14u, 7))
        {
          v162 = AVE_Log_CheckConsole(0x14u);
          v163 = AVE_GetCurrTime();
          v164 = AVE_Log_GetLevelStr(7);
          if (v162)
          {
            printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n\n", v163, 20, v164, "ProcessAndEmitLrmeStats", v227 * v55, v148);
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(7);
          }
          syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_nonzero = %d\n");
        }
LABEL_174:
        v8 = 0;
        v7 = 0;
LABEL_175:
        v5 = v228;
        v6 = v222;
        goto LABEL_5;
      }
      if (!AVE_Log_CheckLevel(0x14u, 4))
      {
LABEL_240:
        v8 = 0;
        goto LABEL_35;
      }
      v132 = AVE_Log_CheckConsole(0x14u);
      v133 = AVE_GetCurrTime();
      v134 = AVE_Log_GetLevelStr(4);
      v36 = v232;
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL\n", v133, 20, v134, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
        v133 = AVE_GetCurrTime();
        v208 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v208 = v134;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | OF: %s: MvStatsBuffer is NULL", v133, 20, v208, "ProcessAndEmitLrmeStats", 2935, "MvStatsBuffer != __null", "ProcessAndEmitLrmeStats");
    }
    else
    {
      v4 = 3758097084;
      switch(*(_DWORD *)(a1 + 69632))
      {
        case 0:
          v217 = AllocSize;
          v58 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)a1, 4 * v227 * v55, &v233);
          v59 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v58);
          if (v59)
          {
            v7 = v59;
            v224 = v230 + 31;
            v222 = 4 * v227 * v55;
            bzero(v59, v222);
            v229 = (unsigned __int8 *)v58;
            BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v58);
            if (v224 >= 0x20)
            {
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v64 = v225 >> 5;
              v214 = BytesPerRow >> 3;
              v65 = (96 * (v225 >> 5) + 63) & 0xFFFFFFC0;
              v66 = v227 * v55 - 1;
              v67 = (BytesPerRow >> 3) & 0x7FFFFFFF;
              v68 = 2 * (*v22 == 0);
              v69 = 2 * (v225 >> 5);
              v70 = 2 * v67;
              if (v225 >> 5 <= 1)
                v71 = 1;
              else
                v71 = v225 >> 5;
              if (((v224 >> 5) + 1) >> 1 <= 1)
                v72 = 1;
              else
                v72 = ((v224 >> 5) + 1) >> 1;
              v73 = 2 * v71;
              v74 = 8 * v67;
              v75 = 8 * v64;
              v219 = v70;
              v76 = v227;
              do
              {
                if (v225 >= 0x20)
                {
                  v77 = 0;
                  v78 = v63 * v65;
                  do
                  {
                    if (v61 + v77 <= v66)
                    {
                      v79 = (unsigned __int16 *)&v56[v78];
                      if (v77 < v227)
                      {
                        _S0 = (float)(*v79 << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        v85 = &v7[4 * v62 + 4 * v77];
                        *(_WORD *)v85 = LOWORD(_S0);
                        _S0 = (float)(*v79 << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v85 + 1) = LOWORD(_S0);
                      }
                      if (v77 + 1 < v227)
                      {
                        _S0 = (float)(v79[9] << 25 >> 25 << v68);
                        __asm { FCVT            H0, S0 }
                        v88 = &v7[4 * v62 + 4 + 4 * v77];
                        *(_WORD *)v88 = LOWORD(_S0);
                        _S0 = (float)(v79[9] << 19 >> 26 << v68);
                        __asm { FCVT            H0, S0 }
                        *((_WORD *)v88 + 1) = LOWORD(_S0);
                      }
                      if (v69 + v77 <= v66 && ((4 * v63) | 1u) < v55)
                      {
                        if (v77 < v227)
                        {
                          _S0 = (float)(v79[18] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          v91 = &v7[4 * v70 + 4 * v77];
                          *(_WORD *)v91 = LOWORD(_S0);
                          _S0 = (float)(v79[18] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v91 + 1) = LOWORD(_S0);
                        }
                        if (v77 + 1 < v227)
                        {
                          _S0 = (float)(v79[27] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          v94 = &v7[4 * v70 + 4 + 4 * v77];
                          *(_WORD *)v94 = LOWORD(_S0);
                          _S0 = (float)(v79[27] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v94 + 1) = LOWORD(_S0);
                        }
                      }
                    }
                    v78 += 96;
                    v77 += 2;
                  }
                  while (v73 != v77);
                }
                ++v63;
                v70 += v74;
                v62 += v74;
                v69 += v75;
                v61 += v75;
              }
              while (v63 != v72);
              if (v224 >= 0x40)
              {
                v96 = 0;
                v97 = 4 * v214;
                v98 = 6 * v64;
                v99 = 4 * v64;
                v100 = v219 + 4 * v214;
                do
                {
                  if (v225 >= 0x20)
                  {
                    v101 = 0;
                    v102 = v96 * v65;
                    do
                    {
                      if (v99 + v101 <= v66)
                      {
                        v103 = (unsigned __int16 *)&v56[(v217 >> 1) + v102];
                        if (v101 < v76)
                        {
                          _S0 = (float)(*v103 << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          v105 = &v7[4 * v97 + 4 * v101];
                          *(_WORD *)v105 = LOWORD(_S0);
                          _S0 = (float)(*v103 << 19 >> 26 << v68);
                          v76 = v227;
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v105 + 1) = LOWORD(_S0);
                        }
                        if (v101 + 1 < v76)
                        {
                          _S0 = (float)(v103[9] << 25 >> 25 << v68);
                          __asm { FCVT            H0, S0 }
                          v108 = &v7[4 * v97 + 4 + 4 * v101];
                          *(_WORD *)v108 = LOWORD(_S0);
                          _S0 = (float)(v103[9] << 19 >> 26 << v68);
                          __asm { FCVT            H0, S0 }
                          *((_WORD *)v108 + 1) = LOWORD(_S0);
                        }
                        v76 = v227;
                        if (v98 + v101 <= v66 && ((4 * v96) | 3u) < v55)
                        {
                          if (v101 < v227)
                          {
                            _S0 = (float)(v103[18] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            v111 = &v7[4 * v100 + 4 * v101];
                            *(_WORD *)v111 = LOWORD(_S0);
                            _S0 = (float)(v103[18] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v111 + 1) = LOWORD(_S0);
                            v76 = v227;
                          }
                          if (v101 + 1 < v76)
                          {
                            _S0 = (float)(v103[27] << 25 >> 25 << v68);
                            __asm { FCVT            H0, S0 }
                            v114 = &v7[4 * v100 + 4 + 4 * v101];
                            *(_WORD *)v114 = LOWORD(_S0);
                            _S0 = (float)(v103[27] << 19 >> 26 << v68);
                            __asm { FCVT            H0, S0 }
                            *((_WORD *)v114 + 1) = LOWORD(_S0);
                          }
                        }
                      }
                      v102 += 96;
                      v101 += 2;
                    }
                    while (v73 != v101);
                  }
                  ++v96;
                  v100 += v74;
                  v97 += v74;
                  v98 += v75;
                  v99 += v75;
                }
                while (v96 != v224 >> 6);
              }
            }
            v8 = 0;
            goto LABEL_175;
          }
          v10 = (unsigned __int8 *)v58;
          if (!AVE_Log_CheckLevel(3u, 4))
            goto LABEL_240;
          v171 = AVE_Log_CheckConsole(3u);
          v172 = AVE_GetCurrTime();
          v173 = AVE_Log_GetLevelStr(4);
          v36 = v232;
          if (v171)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.\n", v172, 3, v173, "ProcessAndEmitLrmeStats", 2721, "MvStatsBuffer != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: MvStatsBuffer = NULL.");
          break;
        case 1:
          v36 = v232;
          if (!AVE_Log_CheckLevel(0x14u, 4))
            goto LABEL_208;
          v141 = AVE_Log_CheckConsole(0x14u);
          v142 = AVE_GetCurrTime();
          v143 = AVE_Log_GetLevelStr(4);
          if (!v141)
            goto LABEL_207;
          v144 = 2836;
          goto LABEL_188;
        case 2:
          if (!AVE_Log_CheckLevel(0x14u, 4))
            goto LABEL_189;
          v135 = AVE_Log_CheckConsole(0x14u);
          v136 = AVE_GetCurrTime();
          v137 = AVE_Log_GetLevelStr(4);
          v36 = v232;
          if (v135)
          {
            printf("%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path\n", v136, 20, v137, "ProcessAndEmitLrmeStats", 2878, "bVTOF == false");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | OF: LRME_OUTPUT_STATISTICS_ONLY is not supported in video toolbox path");
          goto LABEL_208;
        case 3:
          v5 = v228;
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            v145 = AVE_Log_CheckConsole(0x2Eu);
            v146 = AVE_GetCurrTime();
            v147 = AVE_Log_GetLevelStr(5);
            if (v145)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n\n", v146, 46, v147);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(5);
              v5 = v228;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_BEST_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        case 4:
          v5 = v228;
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            v138 = AVE_Log_CheckConsole(0x2Eu);
            v139 = AVE_GetCurrTime();
            v140 = AVE_Log_GetLevelStr(5);
            if (v138)
            {
              printf("%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n\n", v139, 46, v140);
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(5);
              v5 = v228;
            }
            syslog(3, "%lld %d AVE %s: LRME_OUTPUT_ALL_MV_AND_STATISTICS is not supported yet \n");
          }
          goto LABEL_210;
        default:
          goto LABEL_134;
      }
    }
    v8 = 0;
    goto LABEL_36;
  }
  if (!AVE_Log_CheckLevel(3u, 4))
  {
    LODWORD(v4) = 0;
    v32 = 0;
LABEL_49:
    v36 = v232;
    goto LABEL_56;
  }
  v32 = AVE_Log_CheckConsole(3u);
  v4 = AVE_GetCurrTime();
  v116 = AVE_Log_GetLevelStr(4);
  v36 = v232;
  if (!(_DWORD)v32)
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
    LODWORD(v4) = 0;
    goto LABEL_56;
  }
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.\n", v4, 3, v116, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  v4 = AVE_GetCurrTime();
  v117 = AVE_Log_GetLevelStr(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: lrmeStat = NULL.", v4, 3, v117, "ProcessAndEmitLrmeStats", 2676, "lrmeStat != __null");
  LODWORD(v4) = 0;
LABEL_45:
  v32 = 0;
LABEL_56:
  v8 = v4;
  H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(a1, a2, 0);
  v4 = v32;
LABEL_57:
  if (v36)
  {
    if (!v8)
      IOSurfaceUnlock(v36, 0, 0);
    CFRelease(v36);
  }
  return v4;
}

void AVE_LRME_FillFSResultsBestMV(char *a1, char *a2, size_t a3, int a4, int a5, int a6, int a7)
{
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v30;
  int v33;
  int v35;
  __uint64_t CurrTime;
  const char *LevelStr;

  bzero(a2, a3);
  if (a5)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (a7)
      v17 = 0;
    else
      v17 = 2;
    do
    {
      if (a4)
      {
        v18 = 0;
        do
        {
          v19 = 0;
          v20 = v18 + 4 * a6 * v13;
          v21 = a1;
          do
          {
            v22 = 0;
            v23 = &a1[20 * v19];
            do
            {
              if (*(__int16 *)&v21[2 * v22] < 0)
                break;
              ++v22;
            }
            while (v22 != 7);
            v24 = *(__int16 *)&v23[2 * v22];
            if (v24 < 0 && v20 < a6 * a5)
            {
              _S0 = (float)((char)v24 << v17);
              __asm { FCVT            H0, S0 }
              v30 = &a2[4 * v20];
              *(_WORD *)v30 = LOWORD(_S0);
              _S1 = (float)(*(unsigned __int16 *)&v23[2 * v22] << 17 >> 25 << v17);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v30 + 1) = LOWORD(_S1);
              ++v15;
              __asm { FCVT            S0, H0 }
              v33 = _S0 != 0.0;
              __asm { FCVT            S0, H1 }
              if (_S0 != 0.0)
                v33 = 1;
              v14 += v33;
            }
            v20 += a6;
            ++v19;
            v21 += 20;
          }
          while (v19 != 4);
          a1 += 80;
          ++v18;
        }
        while (v18 != a4);
        v16 += 4 * a4;
      }
      ++v13;
    }
    while (v13 != (a5 + 3) >> 2);
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v14 = 0;
  }
  if (AVE_Log_CheckLevel(0x14u, 7))
  {
    v35 = AVE_Log_CheckConsole(0x14u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v35)
    {
      printf("%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n\n", CurrTime, 20, LevelStr, "AVE_LRME_FillFSResultsBestMV", v16, v15, v14);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: OF: %s: total_mbs = %d, total_valid = %d, total_nonzero = %d\n", CurrTime);
  }
}

void *H264VideoEncoderFrameReceiver::MultiPass_EnqueueStats(uint64_t a1, const void *a2)
{
  _QWORD *v3;
  void *result;
  uint64_t v5;

  v3 = (_QWORD *)(a1 + 8);
  result = (void *)AVE_MultiPass::new_stats((AVE_MultiPass *)(a1 + 8));
  if (result)
  {
    v5 = (uint64_t)result;
    memcpy(result, a2, 0x626uLL);
    return (void *)AVE_MultiPass::enqueue_first_pass(v3, v5, 0);
  }
  return result;
}

uint64_t AVE_MultiPass::new_stats(AVE_MultiPass *this)
{
  int v1;
  unsigned int v2;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  const char *v8;

  v1 = *((_DWORD *)this + 6330);
  if (v1)
  {
    v2 = v1 - 1;
    *((_DWORD *)this + 6330) = v2;
    return *((_QWORD *)this + v2 + 3149);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD8u, 4))
    {
      v4 = AVE_Log_CheckConsole(0xD8u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get free spot \n", CurrTime, 216, LevelStr, "new_stats", 56, "free_pool_available > 0");
        v7 = AVE_GetCurrTime();
        v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", v7, 216, v8, "new_stats", 56, "free_pool_available > 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get free spot ", CurrTime, 216, LevelStr, "new_stats", 56, "free_pool_available > 0");
      }
    }
    return 0;
  }
}

uint64_t H264VideoEncoderFrameReceiver::DropFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __uint64_t v6;
  const char *v7;
  __uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;

  v4 = a1 + 51112;
  if ((*(_QWORD *)(a1 + 51344) || *(_QWORD *)(a1 + 51352)) && *(_DWORD *)(a1 + 239300) != 2)
  {
    v9 = a1 + 16 * *(unsigned __int8 *)(a2 + 160) + 241120;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 2344);
    v10 = *(_DWORD *)(a2 + 23736);
    v11 = (_DWORD *)(a1 + 67932);
    *(_DWORD *)v9 = 0;
    *(_DWORD *)(v9 + 4) = v10;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v12 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", CurrTime, 46, LevelStr, "DropFrame", 3335, *v11, *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 160), *(const void **)v4, *(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 112), *(unsigned __int8 *)(v4 + 116));
        v15 = AVE_GetCurrTime();
        v40 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v15, 46, v40, "DropFrame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", CurrTime, 46, LevelStr, "DropFrame");
      }
    }
    *(_DWORD *)(v4 + 112) = -1;
    *(_BYTE *)(v4 + 116) = 0;
    if (*v11 >= 2u && !*(_DWORD *)(a2 + 168))
      *(_BYTE *)(v4 + 117) = 1;
    if (*(_BYTE *)(a1 + 68345))
      v17 = *(_QWORD *)(v4 + 240);
    else
      v17 = *(_QWORD *)(v4 + 232);
    if (v17 == 1)
    {
      kdebug_trace();
      if (*(_QWORD *)(v4 + 168) && *(_QWORD *)(v4 + 160))
      {
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v21 = AVE_Log_CheckConsole(0x2Eu);
          v22 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(7);
          if (v21)
          {
            printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes\n", v22, 46, v23, 0);
            v24 = AVE_GetCurrTime();
            v41 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v24, 46, v41, 0);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame on %d bytes", v22, 46, v23, 0);
          }
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v4 + 168))(*(_QWORD *)(v4 + 160), 0, 0, 0, *(unsigned int *)(a1 + 68256));
      }
      else if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v25 = AVE_Log_CheckConsole(0x2Eu);
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(7);
        if (v25)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v26, 46, v27);
          v28 = AVE_GetCurrTime();
          v42 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v28, 46, v42);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v26, 46, v27);
        }
      }
      v16 = 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v18 = AVE_Log_CheckConsole(0x2Eu);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(7);
        if (v18)
        {
          printf("%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d\n", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
          v19 = AVE_GetCurrTime();
          v20 = AVE_Log_GetLevelStr(7);
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: DROP F %d infoFlagsOut %d", v19, 46, v20, *(_DWORD *)(a2 + 160), 3);
      }
      kdebug_trace();
      if (*(_BYTE *)(a1 + 68345))
        v29 = VTEncoderSessionEmitEncodedTile();
      else
        v29 = VTEncoderSessionEmitEncodedFrame();
      v16 = v29;
    }
    kdebug_trace();
    *(_QWORD *)(a2 + 27680) = AVE_GetCurrTime();
    v30 = *(unsigned int *)(a2 + 916);
    if ((v30 & 0x80000000) == 0)
    {
      if (v30 >= 0x1F)
      {
        v16 = 3758097084;
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v32 = AVE_Log_CheckConsole(3u);
          v33 = AVE_GetCurrTime();
          v34 = AVE_Log_GetLevelStr(4);
          if (v32)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d\n", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
            v33 = AVE_GetCurrTime();
            v34 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: DropFrame Frame->PlaneNumber = %d", v33, 3, v34, "DropFrame", 3501, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
        }
      }
      else
      {
        v31 = *(void **)(a1 + 8 * v30 + 27072);
        if (v31)
        {
          bzero(v31, 0x2CAB8uLL);
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          v35 = AVE_Log_CheckConsole(3u);
          v36 = AVE_GetCurrTime();
          v37 = AVE_Log_GetLevelStr(4);
          if (v35)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v36, 3, v37, "DropFrame", 3503, "codedHeader != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v5 = AVE_Log_CheckConsole(0x2Eu);
      v6 = AVE_GetCurrTime();
      v7 = AVE_Log_GetLevelStr(7);
      if (v5)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v6, 46, v7);
        v8 = AVE_GetCurrTime();
        v39 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v8, 46, v39);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v6, 46, v7);
      }
    }
    return 0;
  }
  return v16;
}

__CFDictionary *H264VideoEncoderFrameReceiver::CreateTemporalLevelInfoDictionary(uint64_t a1, int *a2, int a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  CFDataRef v8;
  CFDataRef v9;
  CFDataRef v10;
  CFDataRef v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v15;
  __uint64_t v16;
  const char *v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __CFDictionary *v21;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v12 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL\n", CurrTime, 46, LevelStr, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3747, "TemporalLevelInfoDict != __null");
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | TemporalLevelInfoDict == NULL", CurrTime);
    }
    return 0;
  }
  v7 = Mutable;
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23A8], a3, Mutable);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23A0], *a2, v7);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA23B0], a2[1] != 0, v7);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA2398], a2[2], v7);
  v8 = CFDataCreate(0, (const UInt8 *)(a1 + 239272), 4);
  if (!v8)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v15 = AVE_Log_CheckConsole(0x2Eu);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL\n", v16, 46, v17, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3756, "cf_profileCompatibilityFlags != __null");
        v16 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_profileCompatibilityFlags == NULL", v16);
    }
    v21 = v7;
    goto LABEL_21;
  }
  v9 = v8;
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA2390], v8);
  v10 = CFDataCreate(0, (const UInt8 *)(a1 + 239276), 6);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v18 = AVE_Log_CheckConsole(0x2Eu);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL\n", v19, 46, v20, "AVE_FrameRecv", "CreateTemporalLevelInfoDictionary", 3763, "cf_constraintIndicatorFlags != __null");
        v19 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | cf_constraintIndicatorFlags == NULL", v19);
    }
    CFRelease(v7);
    v21 = v9;
LABEL_21:
    CFRelease(v21);
    return 0;
  }
  v11 = v10;
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA2380], v10);
  AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CA2388], a2[15], v7);
  CFRelease(v9);
  CFRelease(v11);
  return v7;
}

uint64_t H264VideoEncoderFrameReceiver::SendFrameMCTF(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  void (*v14)(void);

  if (a2)
  {
    if (*(_DWORD *)(a2 + 916) >= 0x1Fu)
    {
      v7 = 3758097084;
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v11 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d\n", CurrTime, 3, LevelStr, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(a2 + 916));
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame->PlaneNumber = %d", CurrTime, 3, LevelStr, "SendFrameMCTF", 3802, "(uint32_t)(pFrame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(unsigned int *)(a2 + 916));
      }
    }
    else
    {
      v3 = a1 + 51272;
      if (AVE_Log_CheckLevel(0x2Eu, 6))
      {
        v4 = AVE_Log_CheckConsole(0x2Eu);
        v5 = AVE_GetCurrTime();
        v6 = AVE_Log_GetLevelStr(6);
        if (v4)
        {
          printf("%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p\n", v5, 46, v6, *(_DWORD *)(a2 + 916), *(_DWORD *)(a2 + 160), *(const void **)v3, *(const void **)(a2 + 320));
          v5 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(6);
        }
        syslog(3, "%lld %d AVE %s: Send MCTF PlaneNumber:%d framenumber:%d %p %p", v5);
      }
      v14 = *(void (**)(void))(v3 + 16);
      if (v14 && *(_QWORD *)v3 && *(_QWORD *)(a2 + 320))
        v14();
      return 0;
    }
  }
  else
  {
    v7 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v8 = AVE_Log_CheckConsole(3u);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL\n", v9, 3, v10, "SendFrameMCTF", 3800, "pFrame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrameMCTF pFrame == NULL");
    }
  }
  return v7;
}

uint64_t H264VideoEncoderFrameReceiver::SendFrame(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v16;
  __uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  __uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  __uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  __uint64_t v51;
  const char *v52;
  char v53;
  char *v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __uint64_t v61;
  const char *v62;
  __uint64_t v63;
  const void *v64;
  const __CFData *Data;
  const __CFData *v66;
  CFIndex Length;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  int v74;
  uint64_t v75;
  int v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  char v80;
  char v81;
  int v82;
  __uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _DWORD *v88;
  int v89;
  __uint64_t v90;
  const char *v91;
  int v92;
  __uint64_t v93;
  const char *v94;
  __uint64_t v95;
  unsigned int v96;
  size_t v97;
  char *v98;
  char *v99;
  unsigned int v100;
  const void *v101;
  unsigned int v102;
  void *v103;
  int v104;
  __uint64_t v105;
  const char *v106;
  __uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _BOOL4 v113;
  _BOOL4 v114;
  _BOOL4 v115;
  int v116;
  int v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  BOOL v124;
  int v125;
  int v126;
  size_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  int v132;
  __uint64_t v133;
  const char *v134;
  int v135;
  __uint64_t v136;
  const char *v137;
  BOOL v138;
  _DWORD *v139;
  char *v140;
  H264VideoEncoderFrameReceiver *v141;
  uint64_t v142;
  __int128 v143;
  _DWORD *v144;
  int v145;
  uint64_t v146;
  __CVBuffer *v147;
  uint64_t v148;
  int v149;
  _DWORD *v150;
  int v151;
  __uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  H264VideoEncoderFrameReceiver *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  CMTimeEpoch v160;
  CMTimeValue v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  __uint64_t v165;
  const char *v166;
  __uint64_t v167;
  int v168;
  int v169;
  __uint64_t v170;
  const char *v171;
  __uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  FILE *File;
  FILE *v176;
  uint64_t v177;
  char *v178;
  unsigned int v179;
  int v180;
  __uint64_t v181;
  const char *v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  CMTimeEpoch v187;
  CMTimeValue v188;
  CMTimeEpoch v189;
  CMTimeValue v190;
  CMFormatDescriptionRef *v191;
  int v192;
  __uint64_t v193;
  const char *v194;
  __uint64_t v195;
  int v196;
  __uint64_t v197;
  const char *v198;
  int v199;
  __uint64_t v200;
  uint64_t v201;
  int v202;
  __uint64_t v203;
  const char *v204;
  __uint64_t v205;
  int v206;
  __uint64_t v207;
  const char *v208;
  __uint64_t v209;
  int v210;
  __uint64_t v211;
  const char *v212;
  int v213;
  __uint64_t v214;
  const char *v215;
  int v216;
  __uint64_t v217;
  const char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  unsigned int v222;
  unsigned int v223;
  _DWORD *v224;
  int v225;
  __uint64_t v226;
  const char *v227;
  int v228;
  __uint64_t v229;
  const char *v230;
  uint64_t v231;
  _DWORD *v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  _DWORD *v236;
  int v237;
  __uint64_t v238;
  const char *v239;
  __CFData *Mutable;
  __CFData *v241;
  opaqueCMSampleBuffer *v242;
  uint64_t v243;
  int v244;
  __uint64_t v245;
  const char *v246;
  __uint64_t v247;
  int v248;
  __uint64_t v249;
  const char *v250;
  int v251;
  __uint64_t v252;
  const char *v253;
  int v254;
  __uint64_t v255;
  const char *v256;
  __uint64_t v257;
  int v258;
  __uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  __uint64_t v263;
  const char *v264;
  const __CFAllocator *v265;
  OSStatus v266;
  CMFormatDescriptionRef *v267;
  int v268;
  __uint64_t v269;
  const char *v270;
  CMFormatDescriptionRef v271;
  __uint64_t v272;
  const char *v273;
  int v274;
  __uint64_t v275;
  const char *v276;
  __uint64_t v277;
  int v278;
  _BOOL4 v279;
  uint64_t v280;
  int v281;
  const char *v282;
  int v283;
  const char *v284;
  __uint64_t v285;
  _BOOL4 v286;
  char v287;
  _BOOL4 v288;
  int v289;
  __uint64_t v290;
  const char *v291;
  int v292;
  __uint64_t v293;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v296;
  const void **v297;
  const void **v298;
  const void **v299;
  int v300;
  __uint64_t v301;
  const char *v302;
  int v303;
  __uint64_t v304;
  int v305;
  __uint64_t v306;
  const char *v307;
  int v308;
  int v309;
  __uint64_t v310;
  const char *v311;
  __CFDictionary *TemporalLevelInfoDictionary;
  __CFDictionary *v313;
  unsigned int v314;
  const void *v315;
  _DWORD *v316;
  const void *v317;
  const void *v318;
  const void *v319;
  _DWORD *v320;
  _DWORD *v321;
  CFNumberRef v322;
  CFNumberRef v323;
  int v324;
  __uint64_t v325;
  const char *v326;
  int v327;
  __uint64_t v328;
  int v329;
  const char *v330;
  __uint64_t v331;
  CFNumberRef v332;
  CFNumberRef v333;
  __CFDictionary *QualityMetricsDictionary;
  __CFDictionary *v335;
  CFNumberRef v336;
  CFNumberRef v337;
  int v338;
  _DWORD *v339;
  CFNumberRef v340;
  CFNumberRef v341;
  __CFData *v342;
  __CFData *v343;
  int v344;
  __uint64_t v345;
  const char *v346;
  unsigned int v347;
  const UInt8 *v348;
  int v349;
  int v350;
  __CFData *v351;
  __CFDictionary *v352;
  CFIndex v353;
  int v354;
  __uint64_t v355;
  const char *v356;
  const CFArrayCallBacks *v357;
  __CFArray *v358;
  __CFArray *v359;
  unsigned int *v360;
  uint64_t v361;
  int v362;
  const CFArrayCallBacks *v363;
  __CFArray *v364;
  __CFArray *v365;
  unsigned int *v366;
  uint64_t v367;
  unsigned int v368;
  const __CFString *v369;
  int v370;
  __uint64_t v371;
  const char *v372;
  int v373;
  __uint64_t v374;
  const char *v375;
  __uint64_t v376;
  uint64_t v377;
  int v378;
  const char *v379;
  __uint64_t v380;
  int v381;
  const char *v382;
  __uint64_t v383;
  const CFArrayCallBacks *v384;
  __CFArray *v385;
  __CFArray *v386;
  unsigned int *v387;
  uint64_t v388;
  unsigned int v389;
  __CFArray *v390;
  uint64_t i;
  __CFArray *v392;
  uint64_t j;
  __CFDictionary *v394;
  uint64_t v395;
  AVE_VCP *v396;
  AVE_VCP *v397;
  int v398;
  __uint64_t v399;
  const char *v400;
  const UInt8 *v401;
  int v402;
  int v403;
  __CFData *v404;
  __CFData *v405;
  CFIndex v406;
  int v407;
  __uint64_t v408;
  const char *v409;
  __uint64_t v410;
  int v411;
  __uint64_t v412;
  const char *v413;
  int v414;
  int v415;
  CMItemCount numSampleSizeEntries;
  size_t *sampleSizeArray;
  const char *sampleSizeArraya;
  const char *sampleSizeArrayb;
  size_t *sampleSizeArrayc;
  const char *sampleSizeArrayd;
  const char *sampleSizeArraye;
  const char *sampleSizeArrayf;
  const char *sampleSizeArrayg;
  const char *sampleSizeArrayh;
  const char *sampleSizeArrayi;
  const char *sampleSizeArrayj;
  size_t *sampleSizeArrayk;
  const char *sampleSizeArrayl;
  const char *sampleSizeArraym;
  const char *sampleSizeArrayn;
  const char *sampleSizeArrayo;
  const char *sampleSizeArrayp;
  const char *sampleSizeArrayq;
  const char *sampleSizeArrayr;
  const char *sampleBufferOut;
  uint64_t v437;
  uint64_t v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  unsigned __int8 *memoryBlock;
  float *v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  char v448;
  _DWORD *v449;
  uint64_t v450;
  uint64_t v451;
  H264VideoEncoderFrameReceiver *v452;
  H264VideoEncoderFrameReceiver *v453;
  unsigned int *v454;
  uint64_t v455;
  int v457;
  int v458[2];
  int v459[2];
  int valuePtr;
  CMTime time2;
  CMTime time1;
  CMSampleBufferRef sbuf[4];
  CMBlockBufferRef dataBuffer;
  size_t dataLength;
  int __dst[136];
  CMSampleTimingInfo sampleTimingArray;
  uint64_t v468;

  v468 = *MEMORY[0x1E0C80C00];
  dataBuffer = 0;
  dataLength = 0;
  if (!a2)
  {
    v12 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v13 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL\n", CurrTime, 3, LevelStr, "SendFrame", 3836, "Frame != __null");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame == NULL");
    }
    return v12;
  }
  v4 = a2;
  v5 = *(_DWORD *)(a2 + 916);
  if (v5 >= 0x1F)
  {
    v12 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4))
      return v12;
    v16 = AVE_Log_CheckConsole(3u);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(4);
    if (v16)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d\n", v17, 3, v18, "SendFrame", 3837, "(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))", *(_DWORD *)(v4 + 916));
      v17 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      v438 = (uint64_t)"(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
      v439 = (const char *)*(unsigned int *)(v4 + 916);
      sampleBufferOut = "SendFrame";
      v437 = 3837;
      sampleSizeArray = (size_t *)v19;
      v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_20:
      numSampleSizeEntries = 3;
LABEL_34:
      syslog(3, v20, v17, numSampleSizeEntries, sampleSizeArray, sampleBufferOut, v437, v438, v439, v440, v441);
      return v12;
    }
    v439 = (const char *)*(unsigned int *)(v4 + 916);
    v437 = 3837;
    v438 = (uint64_t)"(uint32_t)(Frame->PlaneNumber) <= (((3 + 2) + 2 + 5 + (2 + 1)) * ((2) < ((63 + 1)) ? (2) : ((63 + 1))))";
    sampleSizeArray = (size_t *)v18;
    sampleBufferOut = "SendFrame";
    v34 = 3;
    v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SendFrame Frame->PlaneNumber = %d";
LABEL_33:
    numSampleSizeEntries = v34;
    goto LABEL_34;
  }
  v6 = a1;
  if (!*(_BYTE *)a1)
  {
    v12 = 3758097084;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v21 = AVE_Log_CheckConsole(3u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing\n", v22, 3, v23, "SendFrame", 3838, "m_moreWorkToDo");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec Error, CFRunloop Closing");
    }
    return v12;
  }
  v7 = (unsigned int *)(a1 + 51080);
  if (!*(_QWORD *)(a1 + 51344) && !*(_QWORD *)(a1 + 51352))
  {
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v38 = AVE_Log_CheckConsole(0x2Eu);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(7);
      if (v38)
      {
        printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v39, 46, v40);
        v41 = AVE_GetCurrTime();
        sampleSizeArrayb = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v41, 46, sampleSizeArrayb);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v39, 46, v40);
      }
    }
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW(v6, v4, 0);
    return 0;
  }
  v8 = (a4 & 0x80000000) != 0 || *(_BYTE *)(a1 + 67552) == 0;
  v9 = !v8;
  if (v8)
  {
    v11 = 0;
    v24 = a1 + 384 * v5 + 28032;
    v25 = 32;
    v26 = (unsigned int *)v24;
    do
    {
      v28 = *v26;
      v26 += 3;
      v27 = v28;
      if (!v28)
        break;
      v11 += v27 + *(unsigned int *)(v24 + 11520);
      v24 = (uint64_t)v26;
      --v25;
    }
    while (v25);
  }
  else
  {
    v10 = a1 + 384 * v5 + 12 * a4;
    v11 = *(unsigned int *)(v10 + 28032) + (unint64_t)*(unsigned int *)(v10 + 39552);
  }
  if (!v11)
  {
    v12 = 3758097084;
    if (!AVE_Log_CheckLevel(3u, 4))
      return v12;
    v35 = AVE_Log_CheckConsole(3u);
    v17 = AVE_GetCurrTime();
    v36 = AVE_Log_GetLevelStr(4);
    if (v35)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld\n",
        v17,
        3,
        v36,
        "SendFrame",
        3877,
        "FinalOutput_FRAME_Size != 0",
        *(_DWORD *)(v4 + 160),
        0);
      v17 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(4);
      v439 = (const char *)*(unsigned int *)(v4 + 160);
      v440 = 0;
      v437 = 3877;
      v438 = (uint64_t)"FinalOutput_FRAME_Size != 0";
      sampleSizeArray = (size_t *)v37;
      sampleBufferOut = "SendFrame";
      v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
      goto LABEL_20;
    }
    v439 = (const char *)*(unsigned int *)(v4 + 160);
    v440 = 0;
    v437 = 3877;
    v438 = (uint64_t)"FinalOutput_FRAME_Size != 0";
    sampleSizeArray = (size_t *)v36;
    sampleBufferOut = "SendFrame";
    v34 = 3;
    v20 = "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: frame %d; FinalOutput_FRAME_Size %ld";
    goto LABEL_33;
  }
  v457 = v9;
  v455 = a1 + 67552;
  v29 = *(_DWORD *)(a1 + 67556) - 1;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v30 = AVE_Log_CheckConsole(0x2Eu);
    v31 = AVE_GetCurrTime();
    v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      printf("%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld\n", v31, 46, v32, v11);
      v33 = AVE_GetCurrTime();
      sampleSizeArraya = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v33, 46, sampleSizeArraya, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: start FinalOutput_FRAME_Size %ld", v31, 46, v32, v11);
    }
  }
  v43 = v4 + 21664;
  v44 = v6 + 239288;
  v45 = v6 + 68136;
  v8 = v29 == a4;
  v46 = a4;
  v47 = v457;
  if (v8)
    v48 = 0;
  else
    v48 = v457;
  v448 = v48;
  if ((v48 & 1) == 0)
  {
    v49 = *v7;
    v11 += v49;
    if ((_DWORD)v49)
    {
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v50 = AVE_Log_CheckConsole(0x2Eu);
        v51 = AVE_GetCurrTime();
        v52 = AVE_Log_GetLevelStr(7);
        if (v50)
        {
          printf("%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld\n", v51, 46, v52, *v7, v11);
          v51 = AVE_GetCurrTime();
          v52 = AVE_Log_GetLevelStr(7);
          v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CABACzeroWord = %d - FinalOutput_FRAME_Size %ld", v51, 46, v52, *v7, v11);
      }
      v47 = v457;
    }
  }
  if ((_DWORD)v46)
    v53 = v47;
  else
    v53 = 0;
  if ((v53 & 1) != 0)
  {
    v54 = 0;
    goto LABEL_61;
  }
  v64 = *(const void **)(v4 + 336);
  if (v64)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v64, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (Data)
    {
      v66 = Data;
      Length = CFDataGetLength(Data);
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v452 = (H264VideoEncoderFrameReceiver *)v6;
        v68 = AVE_Log_CheckConsole(0x2Eu);
        v69 = AVE_GetCurrTime();
        v70 = AVE_Log_GetLevelStr(7);
        if (v68)
        {
          printf("%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d\n", v69, 46, v70, *(_QWORD *)(v4 + 336), Length);
          v69 = AVE_GetCurrTime();
          v70 = AVE_Log_GetLevelStr(7);
          v46 = a4;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: CFDebugMetadataSEI is ON (%#llx) size %d", v69, 46, v70, *(_QWORD *)(v4 + 336), Length);
        v43 = v4 + 21664;
        v6 = (uint64_t)v452;
      }
      if (Length >= 0)
        v108 = Length;
      else
        v108 = Length + 1;
      v75 = Length + (v108 >> 1) + 512;
      goto LABEL_116;
    }
    v12 = 3758097084;
    if (!AVE_Log_CheckLevel(0x2Eu, 4))
      return v12;
    v76 = AVE_Log_CheckConsole(0x2Eu);
    v17 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(4);
    if (v76)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx\n",
        v17,
        46,
        v77,
        "AVE_FrameRecv",
        "SendFrame",
        3902,
        "serialMetadata != __null",
        *(_DWORD *)(v4 + 160),
        *(_QWORD *)(v4 + 336));
      v17 = AVE_GetCurrTime();
      v78 = AVE_Log_GetLevelStr(4);
      v440 = *(unsigned int *)(v4 + 160);
      v441 = *(_QWORD *)(v4 + 336);
      v438 = 3902;
      v439 = "serialMetadata != __null";
      sampleBufferOut = "AVE_FrameRecv";
      v437 = (uint64_t)"SendFrame";
      numSampleSizeEntries = 46;
      sampleSizeArray = (size_t *)v78;
      v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
      goto LABEL_34;
    }
    v440 = *(unsigned int *)(v4 + 160);
    v441 = *(_QWORD *)(v4 + 336);
    v438 = 3902;
    v439 = "serialMetadata != __null";
    sampleBufferOut = "AVE_FrameRecv";
    v437 = (uint64_t)"SendFrame";
    sampleSizeArray = (size_t *)v77;
    v34 = 46;
    v20 = "%lld %d AVE %s: %s::%s:%d %s | H264FrameRec ERROR: meta date creation failed. frame %d; SEI 0x%llx";
    goto LABEL_33;
  }
  v66 = 0;
  v75 = 0;
LABEL_116:
  v109 = *(unsigned __int8 *)(v45 + 45);
  if (*(_BYTE *)(v45 + 45))
  {
    if (*(double *)(v4 + 2384) == 0.0)
      v109 = 0;
    else
      v109 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
  }
  v110 = *(unsigned __int8 *)(v45 + 46);
  if (*(_BYTE *)(v45 + 46))
    v110 = *(_DWORD *)(v4 + 160) == 0;
  v111 = *(unsigned __int8 *)(v45 + 47);
  if (*(_BYTE *)(v45 + 47))
    v111 = *(_DWORD *)(v4 + 160) == 0;
  v112 = *(unsigned __int8 *)(v45 + 48);
  if (*(_BYTE *)(v45 + 48))
    v112 = *(_DWORD *)(v4 + 160) == 0;
  if (*(_BYTE *)(v45 + 49))
    v113 = *(double *)(v4 + 2368) != 0.0;
  else
    v113 = 0;
  if (*(_BYTE *)(v45 + 50))
    v114 = *(_BYTE *)(v45 + 55) != 0;
  else
    v114 = 0;
  if (*(_BYTE *)(v45 + 51))
    v115 = *(_BYTE *)(v45 + 56) != 0;
  else
    v115 = 0;
  v116 = *(_DWORD *)(v4 + 2436);
  if (*(unsigned __int8 *)(v45 + 270) | *(unsigned __int8 *)(v45 + 269))
    v117 = 1;
  else
    v117 = v110;
  if (*(_BYTE *)(v45 + 53) || v116 > 0 || v115 || ((v114 | v113 | v112 | v111 | v109 | v117) & 1) != 0)
  {
    v119 = v109 == 0;
    if (v109)
      v120 = 9;
    else
      v120 = 0;
    if (v119)
      v121 = 23;
    else
      v121 = 32;
    if (v113)
      v120 += 9;
    v122 = v121 + 9;
    if (!v113)
      v122 = v121;
    if (v110)
      v120 += 5;
    v123 = v122 + 5;
    if (!v110)
      v123 = v122;
    v124 = v111 == 0;
    if (v111)
      v120 += 5;
    v125 = v123 + 5;
    if (v124)
      v125 = v123;
    if (v112)
    {
      v120 += 5;
      v125 += 5;
    }
    if (v114)
    {
      v120 += 25;
      v125 += 25;
    }
    if (v115)
    {
      v120 += 5;
      v125 += 5;
    }
    if (*(_BYTE *)(v45 + 269))
    {
      v120 += 56;
      v125 += 56;
    }
    if (*(_BYTE *)(v45 + 270))
    {
      v120 += 10;
      v125 += 10;
    }
    if (*(_BYTE *)(v45 + 85))
    {
      v120 += 17;
      v125 += 17;
    }
    if (v116 > 0)
    {
      v120 += 9;
      v125 += 9;
    }
    if (*(_BYTE *)(v45 + 53))
      v120 += 6;
    v126 = v125 + 6;
    if (!*(_BYTE *)(v45 + 53))
      v126 = v125;
    v118 = v120 + v126 + (v120 >> 1) + 1;
  }
  else
  {
    v118 = 0;
  }
  v127 = v75 + v118;
  v128 = (char *)malloc_type_malloc(v127, 0x557F7C4EuLL);
  if (!v128)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v135 = AVE_Log_CheckConsole(3u);
      v136 = AVE_GetCurrTime();
      v137 = AVE_Log_GetLevelStr(4);
      if (v135)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld\n",
          v136,
          3,
          v137,
          "SendFrame",
          3963,
          "SEIBuffer != __null",
          *(_DWORD *)(v4 + 160),
          v127);
        v136 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: SEIBuffer malloc failed. frame %d; SEI_FRAME_Size %ld",
        v136,
        3);
    }
    return 0;
  }
  v129 = v128;
  v130 = H264VideoEncoderFrameReceiver::AddAllSEIs(v6, v4, v128, v127, v457, v46, v66);
  if (v130)
  {
    v131 = v130;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v132 = AVE_Log_CheckConsole(3u);
      v133 = AVE_GetCurrTime();
      v134 = AVE_Log_GetLevelStr(4);
      if (v132)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d\n", v133, 3, v134, "SendFrame", 3966, "err == 0", *(_DWORD *)(v4 + 160), v131);
        v133 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: AddAllSEIs failed. frame %d err = %d", v133);
    }
    return 0;
  }
  v11 += *(int *)(v44 + 24);
  if (*(_BYTE *)v45)
  {
    v54 = v129;
    v43 = v4 + 21664;
    if (!*(_DWORD *)(v4 + 160))
    {
      v11 += *(_QWORD *)(v44 + 5936);
      *(_QWORD *)(v44 + 5936) = 0;
    }
  }
  else
  {
    v54 = v129;
    v43 = v4 + 21664;
  }
  if (*(_BYTE *)(v45 + 280))
    v11 += *(unsigned int *)(v45 + 796);
LABEL_61:
  v55 = *(_QWORD *)(v6 + 8 * *(int *)(v4 + 916) + 27072);
  if (!v55)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 0;
    v71 = AVE_Log_CheckConsole(3u);
    v72 = AVE_GetCurrTime();
    v73 = AVE_Log_GetLevelStr(4);
    if (!v71)
    {
LABEL_110:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL");
      return 0;
    }
    v74 = 3990;
LABEL_73:
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codedHeader == NULL\n", v72, 3, v73, "SendFrame", v74, "codedHeader != __null");
    AVE_GetCurrTime();
    AVE_Log_GetLevelStr(4);
    goto LABEL_110;
  }
  v445 = v54;
  v56 = (__int128 *)(v55 + 182920);
  v443 = (float *)(v6 + 51128);
  v57 = (_OWORD *)(v6 + 51128 + 48 * *(unsigned int *)(v4 + 168));
  v58 = *v56;
  v59 = v56[2];
  v57[1] = v56[1];
  v57[2] = v59;
  *v57 = v58;
  v454 = v7;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v60 = AVE_Log_CheckConsole(0x2Eu);
    v61 = AVE_GetCurrTime();
    v62 = AVE_Log_GetLevelStr(7);
    if (v60)
    {
      printf("%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d\n", v61, 46, v62, "SendFrame", 3995, *(_DWORD *)(v455 + 380), *(_DWORD *)(v4 + 168), *(_DWORD *)(v4 + 160), *((const void **)v7 + 4), v7[10], v7[36], *((unsigned __int8 *)v7 + 148));
      v63 = AVE_GetCurrTime();
      sampleSizeArrayc = (size_t *)AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v63, 46, sampleSizeArrayc, "SendFrame");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %d %d %d %p %d %d %d", v61, 46, v62, "SendFrame");
    }
    v46 = a4;
  }
  v446 = v4;
  v450 = v44;
  v444 = v45;
  if (*(_DWORD *)(v455 + 380) <= 1u || *(_DWORD *)(v4 + 168))
  {
    v451 = v43;
    v79 = 0;
    v80 = 1;
    do
    {
      v81 = v80;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v82 = AVE_Log_CheckConsole(0x2Eu);
        v83 = AVE_GetCurrTime();
        v84 = AVE_Log_GetLevelStr(7);
        v85 = v6;
        v86 = v6 + 12 * v79 + 51084;
        v89 = *(_DWORD *)(v86 + 8);
        v88 = (_DWORD *)(v86 + 8);
        v87 = v89;
        if (v82)
        {
          printf("%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d\n", v83, 46, v84, v79, *((char *)v88 - 1), v87);
          v90 = AVE_GetCurrTime();
          v91 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v90, 46, v91, v79, *((char *)v88 - 1), *v88);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: Filler[%d] %d %d", v83, 46, v84, v79, *((char *)v88 - 1), v87);
        }
        v6 = v85;
      }
      v80 = 0;
      v11 += *(int *)(v6 + 12 * v79 + 51092) + (uint64_t)*(char *)(v6 + 12 * v79 + 51091);
      v79 = 1;
    }
    while ((v81 & 1) != 0);
    v4 = v446;
    v7 = v454;
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v92 = AVE_Log_CheckConsole(0x2Eu);
      v93 = AVE_GetCurrTime();
      v94 = AVE_Log_GetLevelStr(7);
      if (v92)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v93, 46, v94, v11);
        v95 = AVE_GetCurrTime();
        sampleSizeArrayd = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v95, 46, sampleSizeArrayd, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v93, 46, v94, v11);
      }
    }
    dataLength = v11;
    v96 = v454[36];
    v97 = v11;
    if ((v96 & 0x80000000) == 0)
    {
      v97 = v11;
      if (v96 == *(_DWORD *)(v446 + 160) - 1)
      {
        v97 = v11 + (int)v454[10];
        dataLength = v97;
      }
    }
    v98 = H264VideoEncoderFrameReceiver::CreateBuffer((CFAllocatorRef *)v6, v97, &dataBuffer);
    v99 = v98;
    v100 = v454[36];
    v43 = v451;
    v46 = a4;
    if ((v100 & 0x80000000) == 0
      && v100 == *(_DWORD *)(v446 + 160) - 1
      && (v101 = (const void *)*((_QWORD *)v454 + 4)) != 0)
    {
      memcpy(v98, v101, (int)v454[10]);
      v102 = v454[10];
    }
    else
    {
      v102 = 0;
    }
    v454[10] = 0;
    v454[36] = -1;
    if (*(_DWORD *)(v455 + 380) <= 1u)
      *((_BYTE *)v454 + 148) = 0;
  }
  else
  {
    if (!*((_QWORD *)v7 + 4))
    {
      v103 = malloc_type_malloc(*(unsigned int *)(v6 + 26952), 0x1187280DuLL);
      *((_QWORD *)v7 + 4) = v103;
      if (!v103)
      {
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v206 = AVE_Log_CheckConsole(0x2Eu);
          v207 = AVE_GetCurrTime();
          v208 = AVE_Log_GetLevelStr(4);
          if (v206)
          {
            printf("%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d\n", v207, 46, v208, "AVE_FrameRecv", "SendFrame", 4038, "m_sMVBuf.pBuf != __null", *((const void **)v7 + 4), *(_DWORD *)(v4 + 160));
            v209 = AVE_GetCurrTime();
            sampleSizeArrayk = (size_t *)AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v209, 46, sampleSizeArrayk);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong multi view buffer %p %d", v207, 46, v208);
          }
        }
        return 4294954394;
      }
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v104 = AVE_Log_CheckConsole(0x2Eu);
      v105 = AVE_GetCurrTime();
      v106 = AVE_Log_GetLevelStr(7);
      if (v104)
      {
        printf("%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld\n", v105, 46, v106, v11);
        v107 = AVE_GetCurrTime();
        sampleSizeArraye = AVE_Log_GetLevelStr(7);
        v46 = a4;
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v107, 46, sampleSizeArraye, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: FinalOutput_FRAME_Size = %ld", v105, 46, v106, v11);
      }
    }
    dataLength = v11;
    v99 = (char *)*((_QWORD *)v7 + 4);
    v7[10] = v11;
    v7[36] = *(_DWORD *)(v4 + 160);
    v138 = *(_DWORD *)(v43 + 1804) == 3 || *(_DWORD *)(v43 + 2104) == 21;
    v102 = 0;
    *((_BYTE *)v7 + 148) = v138;
  }
  if (!v99)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 3758097085;
    v151 = AVE_Log_CheckConsole(3u);
    v152 = AVE_GetCurrTime();
    v153 = AVE_Log_GetLevelStr(4);
    if (v151)
    {
      printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld\n",
        v152,
        3,
        v153,
        "SendFrame",
        4048,
        "FinalOutputFrameBuffer != __null",
        *(_DWORD *)(v4 + 160),
        v11);
      v152 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: FinalOutputFrameBuffer malloc failed. frame %d; FinalOutput_FRAME_Size %ld",
      v152,
      3);
    return 3758097085;
  }
  v139 = (_DWORD *)v43;
  v453 = (H264VideoEncoderFrameReceiver *)v6;
  if (*(_DWORD *)(v455 + 380) >= 2u)
    *((_BYTE *)v7 + 149) = 0;
  memoryBlock = (unsigned __int8 *)v99;
  v140 = &v99[v102];
  v141 = v453;
  H264VideoEncoderFrameReceiver::CopyEncodedFrameIntoExternalBuffer(v453, v4, v140, v445, v11, v457, v46);
  if (!*(_QWORD *)v450)
    goto LABEL_214;
  v142 = *((_QWORD *)v453 + *(int *)(v4 + 916) + 3384);
  if (!v142)
  {
    if (!AVE_Log_CheckLevel(3u, 4))
      return 0;
    v168 = AVE_Log_CheckConsole(3u);
    v72 = AVE_GetCurrTime();
    v73 = AVE_Log_GetLevelStr(4);
    if (!v168)
      goto LABEL_110;
    v74 = 4066;
    goto LABEL_73;
  }
  *(_BYTE *)(v450 + 8) = 0;
  v143 = *(_OWORD *)(v4 + 2296);
  *(_QWORD *)(v142 + 140880) = *(_QWORD *)(v4 + 2312);
  *(_OWORD *)(v142 + 140864) = v143;
  v141 = v453;
  if (!*(_DWORD *)(v4 + 12))
  {
    v173 = H264VideoEncoderFrameReceiver::MultiPass_EnqueueStats((uint64_t)v453, (const void *)(v142 + 140860));
    if (v173)
    {
      v174 = v173;
      memcpy((void *)(v4 + 25350), v173, 0x626uLL);
      *(_BYTE *)(v450 + 8) = 1;
      File = (FILE *)AVE_Dump_FindFile(*(_QWORD *)(v45 + 3392), 4u, *(_DWORD *)(v4 + 12));
      v141 = v453;
      if (File)
      {
        v176 = File;
        fseeko(File, 1574 * v174[11] + 264, 0);
        fwrite(v174, 1uLL, 0x626uLL, v176);
      }
    }
    else
    {
      v141 = v453;
      if (AVE_Log_CheckLevel(0xD8u, 6))
      {
        v196 = AVE_Log_CheckConsole(0xD8u);
        v197 = AVE_GetCurrTime();
        v198 = AVE_Log_GetLevelStr(6);
        v199 = *(_DWORD *)(v4 + 160);
        if (v196)
        {
          printf("%lld %d AVE %s:   F %d pMpStats NULL \n", v197, 216, v198, v199);
          v200 = AVE_GetCurrTime();
          sampleSizeArrayi = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v200, 216, sampleSizeArrayi, *(_DWORD *)(v4 + 160));
        }
        else
        {
          syslog(3, "%lld %d AVE %s:   F %d pMpStats NULL ", v197, 216, v198, v199);
        }
        v141 = v453;
      }
    }
  }
LABEL_214:
  v144 = (_DWORD *)((char *)v141 + 51376);
  if ((v448 & 1) == 0)
  {
    if (v457)
      v145 = a4;
    else
      v145 = 0;
    H264VideoEncoderFrameReceiver::DoneWithThisFrameFromTheHW((uint64_t)v453, v4, v145);
  }
  v146 = v450;
  if (v445)
    free(v445);
  AVE_Dump_WriteMBStats(*(_QWORD **)(v45 + 3392), *(_DWORD *)(v4 + 16), *((const void **)v453 + *(int *)(v4 + 916) + 3224), 432 * ((*v144 + 15) >> 4) * ((v144[1] + 15) >> 4));
  v147 = *(__CVBuffer **)(v4 + 21640);
  if (v147)
    AVE_Dump_WriteRecon(*(_QWORD *)(v45 + 3392), v147);
  v449 = v144;
  if (*(_DWORD *)(v455 + 380) >= 2u && *(_DWORD *)(v4 + 168))
  {
    v148 = (uint64_t)v453 + 16 * *(unsigned __int8 *)(v4 + 160) + 241120;
    v149 = *((_DWORD *)v453 + 4 * *(unsigned __int8 *)(v4 + 160) + 60281);
    *(_DWORD *)v148 += 8 * v11;
    *(_QWORD *)(v148 + 8) = *(_QWORD *)(v4 + 2344);
    v150 = v139;
    *(_DWORD *)(v148 + 4) = v149 + v139[518];
  }
  else
  {
    v154 = (uint64_t)v453 + 16 * *(unsigned __int8 *)(v4 + 160) + 241120;
    *(_DWORD *)v154 = 8 * v11;
    *(_QWORD *)(v154 + 8) = *(_QWORD *)(v4 + 2344);
    v150 = v139;
    *(_DWORD *)(v154 + 4) = v139[518];
  }
  v155 = (uint64_t *)(v7 + 66);
  AVE_Dump_WriteOutput(*(_QWORD **)(v45 + 3392), *(_DWORD *)(v4 + 16), v140, v11);
  *(_QWORD *)(v4 + 27688) = AVE_GetCurrTime();
  if (*(_BYTE *)(v45 + 209))
    v156 = *((_QWORD *)v7 + 34);
  else
    v156 = *v155;
  if (v156 == 1)
  {
    if (*((_QWORD *)v7 + 25) && *((_QWORD *)v7 + 24))
    {
      memset(&sampleTimingArray, 0, 32);
      v157 = v453;
      v158 = memoryBlock;
      if (*(_DWORD *)(v455 + 380) >= 2u && !*(_DWORD *)(v4 + 168))
        return 0;
      if (v457)
      {
        v159 = 0;
        v160 = -1;
        v161 = -1;
        v162 = a4;
      }
      else
      {
        v160 = *(_QWORD *)(v4 + 2296);
        v161 = *(int *)(v4 + 2304);
        v162 = -1;
        v159 = *(_QWORD *)(v4 + 21640);
      }
      sampleTimingArray.duration.value = *(unsigned int *)(v4 + 160);
      *(_QWORD *)&sampleTimingArray.duration.timescale = v162;
      sampleTimingArray.duration.epoch = v160;
      sampleTimingArray.presentationTimeStamp.value = v161;
      *(_QWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v159;
      if (*(_QWORD *)v450
        && *(_BYTE *)(v450 + 8)
        && !*(_DWORD *)(v4 + 12)
        && (Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0)) != 0)
      {
        v241 = Mutable;
        CFDataAppendBytes(Mutable, (const UInt8 *)(v4 + 25350), 1574);
        v242 = *(opaqueCMSampleBuffer **)(v4 + 25370);
        sbuf[1] = *(CMSampleBufferRef *)(v4 + 25354);
        sbuf[2] = *(CMSampleBufferRef *)(v4 + 25362);
        sbuf[3] = v242;
        v12 = VTMultiPassStorageSetDataAtTimeStamp();
        CFRelease(v241);
        if ((_DWORD)v12)
        {
          v243 = v45;
          if (AVE_Log_CheckLevel(0x2Eu, 4))
          {
            v244 = AVE_Log_CheckConsole(0x2Eu);
            v245 = AVE_GetCurrTime();
            v246 = AVE_Log_GetLevelStr(4);
            if (v244)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v245, 46, v246);
              v247 = AVE_GetCurrTime();
              sampleSizeArrayl = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v247, 46, sampleSizeArrayl);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v245, 46, v246);
            }
          }
          v45 = v243;
          v158 = memoryBlock;
        }
      }
      else
      {
        v12 = 0;
      }
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v201 = v45;
        v202 = AVE_Log_CheckConsole(0x2Eu);
        v203 = AVE_GetCurrTime();
        v204 = AVE_Log_GetLevelStr(7);
        v158 = memoryBlock;
        if (v202)
        {
          printf("%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes\n", v203, 46, v204, memoryBlock, v11);
          v205 = AVE_GetCurrTime();
          sampleSizeArrayj = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v205, 46, sampleSizeArrayj, memoryBlock, v11);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec: calling emitEncodedFrame %p on %ld bytes", v203, 46, v204, memoryBlock, v11);
        }
        v45 = v201;
      }
      kdebug_trace();
      (*((void (**)(_QWORD, unsigned __int8 *, size_t, CMSampleTimingInfo *, _QWORD))v454 + 25))(*((_QWORD *)v454 + 24), v158, dataLength, &sampleTimingArray, *(unsigned int *)(v45 + 120));
      kdebug_trace();
    }
    else
    {
      v157 = v453;
      v158 = memoryBlock;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v169 = AVE_Log_CheckConsole(0x2Eu);
        v170 = AVE_GetCurrTime();
        v171 = AVE_Log_GetLevelStr(7);
        if (v169)
        {
          printf("%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it\n", v170, 46, v171);
          v172 = AVE_GetCurrTime();
          sampleSizeArrayg = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v172, 46, sampleSizeArrayg);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264FrameRec WARNING: nobody wants this frame. dump it", v170, 46, v171);
        }
      }
      v12 = 0;
    }
    H264VideoEncoderFrameReceiver::DeleteBuffer(v157, v158);
    goto LABEL_537;
  }
  if ((v457 & 1) != 0)
  {
    v12 = 0;
LABEL_537:
    if (dataBuffer)
    {
      CFRelease(dataBuffer);
      dataBuffer = 0;
    }
    *(_QWORD *)(v4 + 27680) = AVE_GetCurrTime();
    return v12;
  }
  sbuf[0] = 0;
  if (*(_BYTE *)v45)
  {
LABEL_243:
    if (*(_DWORD *)(v455 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      if (*(_BYTE *)(v45 + 209))
      {
        v163 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], memoryBlock, dataLength, *((CFAllocatorRef *)v454 + 28), 0, 0, dataLength, 1u, &dataBuffer);
        if ((_DWORD)v163)
        {
          v12 = v163;
          if (AVE_Log_CheckLevel(0x2Eu, 4))
          {
            v164 = AVE_Log_CheckConsole(0x2Eu);
            v165 = AVE_GetCurrTime();
            v166 = AVE_Log_GetLevelStr(4);
            if (v164)
            {
              printf("%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.\n", v165, 46, v166);
              v167 = AVE_GetCurrTime();
              sampleSizeArrayf = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v167, 46, sampleSizeArrayf);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigBlockBufferCreateWithMemoryBlock failed.", v165, 46, v166);
            }
          }
          kdebug_trace();
          if (*(_BYTE *)(v45 + 209))
            v12 = VTEncoderSessionEmitEncodedTile();
          kdebug_trace();
          if (!(_DWORD)v12)
            goto LABEL_535;
          if ((_DWORD)v12 == -12903)
          {
            if (AVE_Log_CheckLevel(0x2Eu, 5))
            {
              v248 = AVE_Log_CheckConsole(0x2Eu);
              v249 = AVE_GetCurrTime();
              v250 = AVE_Log_GetLevelStr(5);
              if (v248)
              {
                printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v250, "SendFrame", 5110, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_528:
                v380 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(5);
                syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v380);
                goto LABEL_533;
              }
              goto LABEL_532;
            }
            goto LABEL_533;
          }
          if (!AVE_Log_CheckLevel(0x2Eu, 4))
            goto LABEL_535;
          v251 = AVE_Log_CheckConsole(0x2Eu);
          v252 = AVE_GetCurrTime();
          v253 = AVE_Log_GetLevelStr(4);
          if (v251)
          {
            printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v253, "SendFrame", 5119, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
LABEL_385:
            v285 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v285);
            goto LABEL_535;
          }
          goto LABEL_534;
        }
      }
      sampleTimingArray.duration.value = *(_QWORD *)(v4 + 2320);
      v187 = *(_QWORD *)(v4 + 2336);
      *(_QWORD *)&sampleTimingArray.duration.timescale = *(_QWORD *)(v4 + 2328);
      v188 = *(_QWORD *)(v4 + 2296);
      sampleTimingArray.duration.epoch = v187;
      sampleTimingArray.presentationTimeStamp.value = v188;
      v189 = *(_QWORD *)(v4 + 2312);
      *(_QWORD *)&sampleTimingArray.presentationTimeStamp.timescale = *(_QWORD *)(v4 + 2304);
      v190 = a3[1];
      sampleTimingArray.presentationTimeStamp.epoch = v189;
      sampleTimingArray.decodeTimeStamp.value = v190;
      *(_QWORD *)&sampleTimingArray.decodeTimeStamp.timescale = a3[2];
      sampleTimingArray.decodeTimeStamp.epoch = a3[3];
      time1.epoch = v189;
      *(_OWORD *)&time1.value = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value;
      time2 = sampleTimingArray.decodeTimeStamp;
      v191 = (CMFormatDescriptionRef *)v454;
      if (!CMTimeCompare(&time1, &time2) && !*(_BYTE *)(v45 + 1728))
      {
        sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        if (AVE_Log_CheckLevel(0x2Eu, 8))
        {
          v192 = AVE_Log_CheckConsole(0x2Eu);
          v193 = AVE_GetCurrTime();
          v194 = AVE_Log_GetLevelStr(8);
          if (v192)
          {
            printf("%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID\n", v193, 46, v194);
            v195 = AVE_GetCurrTime();
            sampleSizeArrayh = AVE_Log_GetLevelStr(8);
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v195, 46, sampleSizeArrayh);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: final decodeTimeStamp INVALID", v193, 46, v194);
          }
        }
      }
      *(_QWORD *)v459 = v155;
      if (AVE_Log_CheckLevel(0x33u, 7))
      {
        v258 = AVE_Log_CheckConsole(0x33u);
        v259 = AVE_GetCurrTime();
        v260 = AVE_Log_GetLevelStr(7);
        v261 = *(unsigned int *)(v146 + 20);
        v262 = *(unsigned int *)(v4 + 160);
        if (v258)
        {
          printf("%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld\n", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value, sampleTimingArray.presentationTimeStamp.timescale, sampleTimingArray.presentationTimeStamp.flags, sampleTimingArray.presentationTimeStamp.epoch, *(_QWORD *)(v4 + 2344), *(_DWORD *)(v4 + 2352), sampleTimingArray.duration.value,
            sampleTimingArray.duration.timescale,
            sampleTimingArray.duration.flags,
            sampleTimingArray.duration.epoch);
          v263 = AVE_GetCurrTime();
          v264 = AVE_Log_GetLevelStr(7);
          v191 = (CMFormatDescriptionRef *)v454;
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v263, 51, v264, "SendFrame", 4526, *(unsigned int *)(v146 + 20), *(unsigned int *)(v4 + 160), sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %d %d DTS %lld %d 0x%x %lld | PTS %lld %d 0x%x %lld -> %lld %d | duration %lld %d 0x%x %lld", v259, 51, v260, "SendFrame", 4526, v261, v262, sampleTimingArray.decodeTimeStamp.value, sampleTimingArray.decodeTimeStamp.timescale, sampleTimingArray.decodeTimeStamp.flags, sampleTimingArray.decodeTimeStamp.epoch, sampleTimingArray.presentationTimeStamp.value);
        }
      }
      v265 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v266 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], dataBuffer, 1u, 0, 0, v191[35], 1, 1, &sampleTimingArray, 1, &dataLength, sbuf);
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v267 = v191;
        v268 = AVE_Log_CheckConsole(0x2Eu);
        v269 = AVE_GetCurrTime();
        v270 = AVE_Log_GetLevelStr(7);
        v271 = v267[35];
        if (v268)
        {
          printf("%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p\n", v269, 46, v270, v266, sbuf[0], v271);
          v272 = AVE_GetCurrTime();
          v273 = AVE_Log_GetLevelStr(7);
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v272, 46, v273, v266, sbuf[0], v267[35]);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: CMSampleBufferCreate err %d sbuf %p m_videoFormatDesc %p", v269, 46, v270, v266, sbuf[0], v271);
        }
        v191 = v267;
      }
      if (v266)
      {
        v155 = *(uint64_t **)v459;
        if (AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v274 = AVE_Log_CheckConsole(0x2Eu);
          v275 = AVE_GetCurrTime();
          v276 = AVE_Log_GetLevelStr(4);
          if (v274)
          {
            printf("%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.\n", v275, 46, v276);
            v277 = AVE_GetCurrTime();
            sampleSizeArraym = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v277, 46, sampleSizeArraym);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: FigSampleBufferCreate failed.", v275, 46, v276);
          }
        }
        if (*(_BYTE *)(v444 + 209))
          v280 = VTEncoderSessionEmitEncodedTile();
        else
          v280 = VTEncoderSessionEmitEncodedFrame();
        v12 = v280;
        if (!(_DWORD)v280)
          goto LABEL_535;
        if ((_DWORD)v280 == -12903)
        {
          if (AVE_Log_CheckLevel(0x2Eu, 5))
          {
            v281 = AVE_Log_CheckConsole(0x2Eu);
            v249 = AVE_GetCurrTime();
            v282 = AVE_Log_GetLevelStr(5);
            if (v281)
            {
              printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v282, "SendFrame", 5069, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
              goto LABEL_528;
            }
LABEL_532:
            syslog(3, "%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d", v249);
          }
LABEL_533:
          *v155 = 0;
          v155[1] = 0;
          v12 = 4294954393;
          goto LABEL_535;
        }
        if (!AVE_Log_CheckLevel(0x2Eu, 4))
          goto LABEL_535;
        v283 = AVE_Log_CheckConsole(0x2Eu);
        v252 = AVE_GetCurrTime();
        v284 = AVE_Log_GetLevelStr(4);
        if (v283)
        {
          printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v284, "SendFrame", 5078, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
          goto LABEL_385;
        }
LABEL_534:
        syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v252);
LABEL_535:
        if (sbuf[0])
          CFRelease(sbuf[0]);
        goto LABEL_537;
      }
      v278 = v150[451];
      if (v278 == 3)
      {
        v279 = 1;
      }
      else
      {
        if (v150[526] == 21)
          v279 = 1;
        else
          v279 = *(_DWORD *)(v455 + 380) >= 2u && *((_BYTE *)v191 + 148) != 0;
        if (v278 == 2)
          goto LABEL_393;
      }
      if (!*(_BYTE *)(v446 + 4032))
      {
        v286 = 0;
        if (v278 == 1 && *(_BYTE *)(v444 + 206))
        {
          if (*(_WORD *)(v455 + 272))
          {
            v286 = v150[525] == *(unsigned __int16 *)(v455 + 272);
            if (v279)
              goto LABEL_395;
            goto LABEL_400;
          }
          v286 = 0;
        }
LABEL_394:
        if (v279)
        {
LABEL_395:
          v287 = 1;
          v288 = 1;
          goto LABEL_401;
        }
LABEL_400:
        v287 = 0;
        v288 = v278 == 0;
LABEL_401:
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v289 = AVE_Log_CheckConsole(0x2Eu);
          v290 = AVE_GetCurrTime();
          v291 = AVE_Log_GetLevelStr(7);
          v292 = v150[451];
          if (v289)
          {
            printf("%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d\n", v290, 46, v291, v292, v279, v288);
            v293 = AVE_GetCurrTime();
            sampleSizeArrayn = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v293, 46, sampleSizeArrayn, v150[451], v279, v288);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: FrameType %d isSyncSample %d isIFrame %d", v290, 46, v291, v292, v279, v288);
          }
        }
        SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf[0], 1u);
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        v4 = v446;
        if (!ValueAtIndex)
          goto LABEL_477;
        v296 = ValueAtIndex;
        v297 = (const void **)MEMORY[0x1E0C9AE50];
        if ((v287 & 1) == 0)
          CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
        v298 = (const void **)MEMORY[0x1E0C9AE40];
        if (v288)
          v299 = (const void **)MEMORY[0x1E0C9AE40];
        else
          v299 = v297;
        CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA25C8], *v299);
        if (v286)
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA2618], *v298);
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v300 = AVE_Log_CheckConsole(0x2Eu);
          v301 = AVE_GetCurrTime();
          v302 = AVE_Log_GetLevelStr(7);
          v303 = *(unsigned __int8 *)(v444 + 206);
          if (v300)
          {
            printf("%lld %d AVE %s: H264FrameRec: bIsHierarchical %d\n", v301, 46, v302, v303);
            v304 = AVE_GetCurrTime();
            sampleSizeArrayo = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v304, 46, sampleSizeArrayo, *(unsigned __int8 *)(v444 + 206));
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: bIsHierarchical %d", v301, 46, v302, v303);
          }
        }
        if (AVE_Log_CheckLevel(0x2Eu, 7))
        {
          v305 = AVE_Log_CheckConsole(0x2Eu);
          v306 = AVE_GetCurrTime();
          v307 = AVE_Log_GetLevelStr(7);
          v308 = *(_DWORD *)(v446 + 160);
          v309 = v150[526];
          if (v305)
          {
            printf("%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d\n", v306, 46, v307, v308, v150[451], v309);
            v310 = AVE_GetCurrTime();
            v311 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v310, 46, v311, *(_DWORD *)(v446 + 160), v150[451], v150[526]);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: H264FrameRec: F %d FrameType %d nalUnitType %d", v306, 46, v307, v308, v150[451], v309);
          }
        }
        if (*(_BYTE *)(v444 + 206))
        {
          memcpy(__dst, (char *)v453 + 158400, sizeof(__dst));
          TemporalLevelInfoDictionary = H264VideoEncoderFrameReceiver::CreateTemporalLevelInfoDictionary((uint64_t)v453, __dst, v150[525]);
          if (TemporalLevelInfoDictionary)
          {
            v313 = TemporalLevelInfoDictionary;
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA2600], TemporalLevelInfoDictionary);
            CFRelease(v313);
          }
          v314 = v150[526] & 0xFFFFFFFE;
          v315 = (const void *)*MEMORY[0x1E0C9AE50];
          v316 = v150;
          v317 = *v298;
          if (v314 == 2)
            v318 = (const void *)*MEMORY[0x1E0C9AE50];
          else
            v318 = *v298;
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA2608], v318);
          if ((v316[526] & 0xFFFFFFFE) == 4)
            v319 = v315;
          else
            v319 = v317;
          v150 = v316;
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA25F0], v319);
        }
        v320 = v150;
        v321 = v449;
        if (*(_DWORD *)(v444 + 120) == 1 && (v320[526] - 19) <= 2)
        {
          v322 = CFNumberCreate(v265, kCFNumberSInt32Type, v320 + 526);
          if (v322)
          {
            v323 = v322;
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v324 = AVE_Log_CheckConsole(0x2Eu);
              v325 = AVE_GetCurrTime();
              v326 = AVE_Log_GetLevelStr(7);
              v327 = *(_DWORD *)(v446 + 160);
              if (v324)
              {
                printf("%lld %d AVE %s: H264FrameRec: F %d NUT CRA\n", v325, 46, v326, v327);
                v328 = AVE_GetCurrTime();
                sampleSizeArrayp = AVE_Log_GetLevelStr(7);
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v328, 46, sampleSizeArrayp, *(_DWORD *)(v446 + 160));
              }
              else
              {
                syslog(3, "%lld %d AVE %s: H264FrameRec: F %d NUT CRA", v325, 46, v326, v327);
              }
              v321 = v449;
            }
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CA25F8], v323);
            CFRelease(v323);
          }
        }
        v4 = v446;
        if ((*(_BYTE *)(v444 + 1712) & 0x10) != 0)
        {
          if (*v320 == 1)
          {
            v332 = CFNumberCreate(v265, kCFNumberIntType, (const void *)(v446 + 160));
            if (v332)
            {
              v333 = v332;
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDA98], v332);
              CFRelease(v333);
            }
          }
          if (*((_BYTE *)v320 + 40) && *(_DWORD *)(v444 + 1804) != 1)
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDA90], (const void *)*MEMORY[0x1E0C9AE50]);
        }
        if ((*((_BYTE *)v321 + 11) & 8) != 0)
        {
          QualityMetricsDictionary = CreateQualityMetricsDictionary(v443, *(_DWORD *)(v455 + 380));
          if (QualityMetricsDictionary)
          {
            v335 = QualityMetricsDictionary;
            CFDictionarySetValue(v296, CFSTR("QualityMetrics"), QualityMetricsDictionary);
            CFRelease(v335);
          }
        }
        if (*(int *)(v146 + 16) >= 16 && (v454[73] & 0xE0) != 0)
        {
          v336 = CFNumberCreate(v265, kCFNumberSInt32Type, (const void *)(v446 + 4036));
          if (v336)
          {
            v337 = v336;
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDAB0], v336);
            CFRelease(v337);
          }
        }
        v338 = *(_DWORD *)(v444 + 1804);
        if (v338 > 36)
        {
          v339 = v320;
          if ((v338 - 37) >= 2 && v338 != 10000)
            goto LABEL_477;
          goto LABEL_475;
        }
        if (v338)
        {
          v339 = v320;
          if (v338 != 1)
          {
            if (v338 != 20)
            {
LABEL_477:
              v155 = *(uint64_t **)v459;
              if (*(_QWORD *)v146)
              {
                if (*(_BYTE *)(v146 + 8))
                {
                  v342 = CFDataCreateMutable(v265, 0);
                  if (v342)
                  {
                    v343 = v342;
                    CFDataAppendBytes(v342, (const UInt8 *)(v4 + 25350), 1574);
                    if (AVE_Log_CheckLevel(0x2Eu, 7))
                    {
                      v344 = AVE_Log_CheckConsole(0x2Eu);
                      v345 = AVE_GetCurrTime();
                      v346 = AVE_Log_GetLevelStr(7);
                      v347 = *(_DWORD *)(v4 + 12);
                      if (v347 >= 2)
                        v347 = 2;
                      if (v344)
                      {
                        printf("%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d\n", v345, 46, v346, v347);
                        v345 = AVE_GetCurrTime();
                        v346 = AVE_Log_GetLevelStr(7);
                        v347 = *(_DWORD *)(v4 + 12);
                        if (v347 >= 2)
                          v347 = 2;
                      }
                      syslog(3, "%lld %d AVE %s: H264FrameRec: m_multiPassStorage multiPassEndPassCounter %d", v345, 46, v346, v347);
                    }
                    if (AVE_Log_CheckLevel(0xD8u, 7))
                    {
                      v370 = AVE_Log_CheckConsole(0xD8u);
                      v371 = AVE_GetCurrTime();
                      v372 = AVE_Log_GetLevelStr(7);
                      if (v370)
                      {
                        printf("%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld\n", v371, 216, v372, *(_QWORD *)(v4 + 2296), *(_DWORD *)(v4 + 2304), *(_DWORD *)(v4 + 2308), *(_QWORD *)(v4 + 2312));
                        v371 = AVE_GetCurrTime();
                        AVE_Log_GetLevelStr(7);
                      }
                      syslog(3, "%lld %d AVE %s: RECV_PTS: val %lld, timeScale %d, flags 0x%x, epoch %lld", v371);
                    }
                    if (VTMultiPassStorageSetDataAtTimeStamp() && AVE_Log_CheckLevel(0x2Eu, 4))
                    {
                      v373 = AVE_Log_CheckConsole(0x2Eu);
                      v374 = AVE_GetCurrTime();
                      v375 = AVE_Log_GetLevelStr(4);
                      if (v373)
                      {
                        printf("%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...\n", v374, 46, v375);
                        v376 = AVE_GetCurrTime();
                        sampleSizeArrayq = AVE_Log_GetLevelStr(4);
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v376, 46, sampleSizeArrayq);
                      }
                      else
                      {
                        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: VTMultiPassStorageSetDataAtTimeStamp failed. need to set up a recovery here...", v374, 46, v375);
                      }
                    }
                    CFRelease(v343);
                  }
                }
              }
              kdebug_trace();
              if (*(_BYTE *)(v444 + 209))
                v377 = VTEncoderSessionEmitEncodedTile();
              else
                v377 = VTEncoderSessionEmitEncodedFrame();
              v12 = v377;
              kdebug_trace();
              if (!(_DWORD)v12)
                goto LABEL_535;
              if ((_DWORD)v12 == -12903)
              {
                if (AVE_Log_CheckLevel(0x2Eu, 5))
                {
                  v378 = AVE_Log_CheckConsole(0x2Eu);
                  v249 = AVE_GetCurrTime();
                  v379 = AVE_Log_GetLevelStr(5);
                  if (v378)
                  {
                    printf("%lld %d AVE %s: %s:%d m_VTEncoderSession has already been invalidated. Dropping frame %d %d\n", v249, 46, v379, "SendFrame", 5027, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                    goto LABEL_528;
                  }
                  goto LABEL_532;
                }
                goto LABEL_533;
              }
              if (!AVE_Log_CheckLevel(0x2Eu, 4))
                goto LABEL_535;
              v381 = AVE_Log_CheckConsole(0x2Eu);
              v252 = AVE_GetCurrTime();
              v382 = AVE_Log_GetLevelStr(4);
              if (v381)
              {
                printf("%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d\n", v252, 46, v382, "SendFrame", 5036, v12, *(_DWORD *)(v146 + 20), *(_DWORD *)(v4 + 160));
                v383 = AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d ERROR: VTEncoderSessionEmitEncodedFrame failed. %d %d %d", v383);
                goto LABEL_535;
              }
              goto LABEL_534;
            }
LABEL_475:
            valuePtr = *((unsigned __int8 *)v339 + 380);
            v340 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v340)
            {
              v341 = v340;
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDA58], v340);
              CFRelease(v341);
            }
            goto LABEL_477;
          }
          v357 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          v358 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          v359 = CFArrayCreateMutable(0, 0, v357);
          v360 = v320 + 17;
          v361 = 4;
          do
          {
            AVE_CFArray_AddSInt64(*v360, v358);
            AVE_CFArray_AddSInt64(*(v360 - 4), v359);
            ++v360;
            --v361;
          }
          while (v361);
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDAE0], v358);
          if (v358)
            CFRelease(v358);
          CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDAE8], v359);
          if (v359)
            CFRelease(v359);
          v362 = *(_DWORD *)(v444 + 120);
          if (v362 == 1)
          {
            v384 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            v385 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            v386 = CFArrayCreateMutable(0, 0, v384);
            v365 = CFArrayCreateMutable(0, 0, v384);
            v387 = v320 + 57;
            v388 = 4;
            do
            {
              AVE_CFArray_AddSInt64(*(v387 - 8), v385);
              AVE_CFArray_AddSInt64(*(v387 - 4), v386);
              v389 = *v387++;
              AVE_CFArray_AddSInt64(v389, v365);
              --v388;
            }
            while (v388);
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDB00], v385);
            if (v385)
              CFRelease(v385);
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDAF8], v386);
            if (v386)
              CFRelease(v386);
            v369 = CFSTR("NumberOfSkipped8x8Blocks");
          }
          else
          {
            if (v362)
            {
              if (AVE_Log_CheckLevel(3u, 4))
              {
                v398 = AVE_Log_CheckConsole(3u);
                v399 = AVE_GetCurrTime();
                v400 = AVE_Log_GetLevelStr(4);
                if (v398)
                {
                  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.\n", v399, 3, v400, "SendFrame", 4826, "false", *(_DWORD *)(v444 + 120));
                  v399 = AVE_GetCurrTime();
                  v400 = AVE_Log_GetLevelStr(4);
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: codec type (%d) not recognized.", v399, 3, v400, "SendFrame", 4826, "false", *(unsigned int *)(v444 + 120));
              }
              return 3758097084;
            }
            v363 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            v364 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            v365 = CFArrayCreateMutable(0, 0, v363);
            v366 = v320 + 57;
            v367 = 4;
            do
            {
              AVE_CFArray_AddSInt64(*(v366 - 8), v364);
              v368 = *v366++;
              AVE_CFArray_AddSInt64(v368, v365);
              --v367;
            }
            while (v367);
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDB08], v364);
            if (v364)
              CFRelease(v364);
            v369 = (const __CFString *)*MEMORY[0x1E0CEDB10];
          }
          CFDictionarySetValue(v296, v369, v365);
          if (v365)
            CFRelease(v365);
          v390 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          for (i = 0; i != 16; i += 4)
            AVE_CFArray_AddSInt64(*(unsigned int *)(v446 + 21944 + i), v390);
          if (v390)
          {
            CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDAD0], v390);
            CFRelease(v390);
          }
          v392 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          for (j = 0; j != 16; j += 4)
            AVE_CFArray_AddSInt64(*(unsigned int *)(v446 + 21960 + j), v392);
          if (v392)
          {
            CFDictionarySetValue(v296, CFSTR("SliceDataLength"), v392);
            CFRelease(v392);
          }
          if (!v449[10] || *(_DWORD *)(v444 + 120))
            goto LABEL_559;
          v401 = (const UInt8 *)*((_QWORD *)v453 + *(int *)(v446 + 916) + 3224);
          if (v401)
          {
            v403 = *v449;
            v402 = v449[1];
            v404 = CFDataCreateMutable(v265, 0);
            if (v404)
            {
              v405 = v404;
              v406 = 432 * ((v403 + 15) >> 4) * ((v402 + 15) >> 4);
              CFDataAppendBytes(v404, v401, v406);
              if (AVE_Log_CheckLevel(0x2Eu, 7))
              {
                v407 = AVE_Log_CheckConsole(0x2Eu);
                v408 = AVE_GetCurrTime();
                v409 = AVE_Log_GetLevelStr(7);
                if (v407)
                {
                  printf("%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out\n", v408, 46, v409, v406);
                  v410 = AVE_GetCurrTime();
                  sampleSizeArrayr = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v410, 46, sampleSizeArrayr, v406);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: H264FrameRec: EnableSelStatsFlags sending %d bytes out", v408, 46, v409, v406);
                }
              }
              CFDictionarySetValue(v296, CFSTR("MBStatistics"), v405);
              CFRelease(v405);
            }
LABEL_559:
            v4 = v446;
            if (!*(_BYTE *)(v446 + 2656))
              goto LABEL_477;
            v394 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v394)
              goto LABEL_477;
            v352 = v394;
            if (!AVE_DPB_MakeSnapshot((int *)(v446 + 920), v394))
            {
              CFDictionarySetValue(v296, (const void *)*MEMORY[0x1E0CEDB28], v352);
              v395 = *(_QWORD *)(v446 + 2472);
              if ((v395 & 0x8000) != 0)
              {
                v396 = *(AVE_VCP **)(v146 + 5952);
                if (v396)
                {
                  AVE_VCP::ChromaFilter(v396, v352, *(unsigned int *)(v446 + 160), *(unsigned int *)(v446 + 2664));
                  v395 = *(_QWORD *)(v446 + 2472);
                }
              }
              if ((v395 & 0x10000) != 0)
              {
                v397 = *(AVE_VCP **)(v146 + 5952);
                if (v397)
                  AVE_VCP::CalcChecksum(v397, v352, *(unsigned int *)(v446 + 160), v296);
              }
            }
LABEL_589:
            CFRelease(v352);
            v4 = v446;
            goto LABEL_477;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v411 = AVE_Log_CheckConsole(3u);
            v412 = AVE_GetCurrTime();
            v413 = AVE_Log_GetLevelStr(4);
            if (!v411)
              goto LABEL_590;
            v414 = 4859;
            goto LABEL_583;
          }
        }
        else
        {
          if (!v321[10] || *(_DWORD *)(v444 + 120) || *(_DWORD *)(v444 + 124) != 1)
            goto LABEL_477;
          v348 = (const UInt8 *)*((_QWORD *)v453 + *(int *)(v446 + 916) + 3224);
          if (v348)
          {
            v350 = *v449;
            v349 = v449[1];
            v351 = CFDataCreateMutable(v265, 0);
            v4 = v446;
            if (!v351)
              goto LABEL_477;
            v352 = v351;
            v353 = 432 * ((v350 + 15) >> 4) * ((v349 + 15) >> 4);
            CFDataAppendBytes(v351, v348, v353);
            if (AVE_Log_CheckLevel(0x2Eu, 7))
            {
              v354 = AVE_Log_CheckConsole(0x2Eu);
              v355 = AVE_GetCurrTime();
              v356 = AVE_Log_GetLevelStr(7);
              if (v354)
              {
                printf("%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n\n", v355, 46, v356, *(_DWORD *)(v444 + 124), v353);
                v355 = AVE_GetCurrTime();
                v356 = AVE_Log_GetLevelStr(7);
              }
              syslog(3, "%lld %d AVE %s: H264FrameRec: AttachMVStats %d - EnableSelStatsFlags sending %d bytes out\n", v355, 46, v356, *(_DWORD *)(v444 + 124), v353);
            }
            CFDictionarySetValue(v296, CFSTR("MBStatistics"), v352);
            goto LABEL_589;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v415 = AVE_Log_CheckConsole(3u);
            v412 = AVE_GetCurrTime();
            v413 = AVE_Log_GetLevelStr(4);
            if (!v415)
            {
LABEL_590:
              syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.");
              return 3758097084;
            }
            v414 = 4918;
LABEL_583:
            printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: stat = NULL.\n", v412, 3, v413, "SendFrame", v414, "stat != __null");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
            goto LABEL_590;
          }
        }
        return 3758097084;
      }
LABEL_393:
      v286 = 1;
      goto LABEL_394;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v213 = AVE_Log_CheckConsole(0x2Eu);
      v214 = AVE_GetCurrTime();
      v215 = AVE_Log_GetLevelStr(7);
      if (v213)
      {
        printf("%lld %d AVE %s: BAIL for first layer\n", v214, 46, v215);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(7);
      }
      syslog(3, "%lld %d AVE %s: BAIL for first layer");
    }
    return 0;
  }
  if (*(int *)(v450 + 28) >= 1)
  {
    v177 = 0;
    v178 = (char *)v453 + 239320;
    while (*(_DWORD *)v140 == 0x1000000)
    {
      v179 = *(_DWORD *)&v178[4 * v177] - 4;
      if (AVE_Log_CheckLevel(0x2Eu, 7))
      {
        v180 = AVE_Log_CheckConsole(0x2Eu);
        v181 = AVE_GetCurrTime();
        v182 = AVE_Log_GetLevelStr(7);
        v183 = *(_DWORD *)(v450 + 24);
        v184 = *(_DWORD *)v140;
        if (v180)
        {
          printf("%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x\n", v181, 46, v182, v183, v179, v184);
          v181 = AVE_GetCurrTime();
          v182 = AVE_Log_GetLevelStr(7);
          v183 = *(_DWORD *)(v450 + 24);
          v184 = *(_DWORD *)v140;
        }
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert m_SEI_size %d slice_size_fig %d &p_in[0] 0x%x", v181, 46, v182, v183, v179, v184);
        v4 = v446;
      }
      *(_DWORD *)v140 = bswap32(v179);
      v185 = *(int *)&v178[4 * v177];
      v140 += v185;
      v186 = *(_DWORD *)(v450 + 24) - v185;
      *(_DWORD *)(v450 + 24) = v186;
      *(_DWORD *)&v178[4 * v177++] = 0;
      if (v177 >= *(int *)(v450 + 28))
      {
        v155 = (uint64_t *)(v7 + 66);
        v146 = v450;
        goto LABEL_293;
      }
    }
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v216 = AVE_Log_CheckConsole(3u);
      v217 = AVE_GetCurrTime();
      v218 = AVE_Log_GetLevelStr(4);
      if (v216)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v217, 3, v218, "SendFrame", 4395, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        v217 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v217);
      return 3758097085;
    }
    return 3758097085;
  }
  v186 = *(_DWORD *)(v450 + 24);
LABEL_293:
  if (v186)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v210 = AVE_Log_CheckConsole(3u);
      v211 = AVE_GetCurrTime();
      v212 = AVE_Log_GetLevelStr(4);
      if (v210)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error\n", v211, 3, v212, "SendFrame", 4405, "m_SEI_size == 0");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (0): SEI buffer error");
      return 3758097085;
    }
    return 3758097085;
  }
  *(_QWORD *)v458 = v155;
  v219 = (char *)v453 + 28032;
  *(_DWORD *)(v146 + 28) = 0;
  v220 = 32;
  do
  {
    v221 = &v219[384 * *(int *)(v4 + 916)];
    v222 = *((_DWORD *)v221 + 2880) + *(_DWORD *)v221;
    if (!v222)
      break;
    v223 = v222 - 4;
    if (*(_DWORD *)(v455 + 380) < 2u || *(_DWORD *)(v4 + 168))
    {
      v224 = v150;
      v223 -= v454[7];
    }
    else
    {
      v224 = v150;
    }
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v225 = AVE_Log_CheckConsole(0x2Eu);
      v226 = AVE_GetCurrTime();
      v227 = AVE_Log_GetLevelStr(7);
      v228 = *(_DWORD *)v140;
      if (v225)
      {
        printf("%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v226, 46, v227, v222, v223, *(_DWORD *)(v446 + 916), v228);
        v229 = AVE_GetCurrTime();
        v230 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v229, 46, v230, v222, v223, *(_DWORD *)(v446 + 916), *(_DWORD *)v140);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: insert slice_size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v226, 46, v227, v222, v223, *(_DWORD *)(v446 + 916), v228);
      }
    }
    if (*(_DWORD *)v140 != 0x1000000)
    {
      if (!AVE_Log_CheckLevel(3u, 4))
        return 3758097085;
      v254 = AVE_Log_CheckConsole(3u);
      v255 = AVE_GetCurrTime();
      v256 = AVE_Log_GetLevelStr(4);
      if (v254)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v256, "SendFrame", 4429, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)v140);
        v257 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v257);
        return 3758097085;
      }
LABEL_449:
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v255);
      return 3758097085;
    }
    v219 += 12;
    *(_DWORD *)v140 = bswap32(v223);
    v140 += v222;
    --v220;
    v4 = v446;
    v150 = v224;
  }
  while (v220);
  v231 = v454[7];
  v45 = v444;
  v155 = *(uint64_t **)v458;
  if ((int)v231 < 1)
    goto LABEL_243;
  v232 = v150;
  if (*(_DWORD *)(v455 + 380) >= 2u && !*(_DWORD *)(v4 + 168))
  {
LABEL_440:
    v454[7] = 0;
    v150 = v232;
    goto LABEL_243;
  }
  v233 = v146;
  v234 = v231 - 4;
  v235 = -v231;
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v236 = v232;
    v237 = AVE_Log_CheckConsole(0x2Eu);
    v238 = AVE_GetCurrTime();
    v239 = AVE_Log_GetLevelStr(7);
    if (v237)
    {
      printf("%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x\n", v238, 46, v239, v454[7], v234, *(_DWORD *)(v4 + 916), *(_DWORD *)&v140[v235]);
      v238 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: H264FrameRec: insert filler size %d slice_size_fig %d slice # %d &p_in[0] 0x%x", v238);
    v45 = v444;
    v232 = v236;
  }
  if (*(_DWORD *)&v140[v235] == 0x1000000)
  {
    *(_DWORD *)&v140[v235] = bswap32(v234);
    v146 = v233;
    goto LABEL_440;
  }
  if (!AVE_Log_CheckLevel(3u, 4))
    return 3758097085;
  v329 = AVE_Log_CheckConsole(3u);
  v255 = AVE_GetCurrTime();
  v330 = AVE_Log_GetLevelStr(4);
  if (!v329)
    goto LABEL_449;
  printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)\n", v255, 3, v330, "SendFrame", 4455, "*(uint32_t *)&p_in[0] == 0x01000000", *(_DWORD *)&v140[v235]);
  v331 = AVE_GetCurrTime();
  AVE_Log_GetLevelStr(4);
  syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR (1): *(uint32_t *)&p_in[0] != 0x01000000 (= 0x%x)", v331);
  return 3758097085;
}

__CFDictionary *CreateQualityMetricsDictionary(float *a1, int a2)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  __CFArray *v13;
  CFMutableArrayRef v14;
  __CFArray *v15;
  float *v16;
  float v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  __uint64_t v29;
  __CFArray *v30;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;

  LODWORD(v2) = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v6 = AVE_Log_CheckConsole(0xE2u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary\n", CurrTime, 226, LevelStr, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
        v9 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", v9, 226, v32, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary", CurrTime, 226, LevelStr, "CreateQualityMetricsDictionary", 3539, "pQualityMetricsDict != __null");
      }
    }
    return 0;
  }
  v5 = Mutable;
  if ((int)v2 <= 1)
  {
    AVE_CFDict_AddDouble(CFSTR("LumaMeanSquaredError"), a1[4], Mutable);
    AVE_CFDict_AddDouble(CFSTR("ChromaBlueMeanSquaredError"), a1[5], v5);
    AVE_CFDict_AddDouble(CFSTR("ChromaRedMeanSquaredError"), a1[6], v5);
    return v5;
  }
  v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v10)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v18 = AVE_Log_CheckConsole(0xE2u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
        v21 = AVE_GetCurrTime();
        v33 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v21, 226, v33, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v19, 226, v20, "CreateQualityMetricsDictionary", 3556, "pLumaMeanSquaredErrorArr != __null");
      }
    }
    goto LABEL_31;
  }
  v11 = v10;
  v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v12)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v22 = AVE_Log_CheckConsole(0xE2u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
        v25 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v25, 226, v34, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v23, 226, v24, "CreateQualityMetricsDictionary", 3559, "pChromaBlueMeanSquaredErrorArr != __null");
      }
    }
    v30 = v11;
    goto LABEL_30;
  }
  v13 = v12;
  v14 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v14)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v26 = AVE_Log_CheckConsole(0xE2u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(4);
      if (v26)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
        v29 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v29, 226, v35, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v27, 226, v28, "CreateQualityMetricsDictionary", 3562, "pChromaRedMeanSquaredErrorArr != __null");
      }
    }
    CFRelease(v11);
    v30 = v13;
LABEL_30:
    CFRelease(v30);
LABEL_31:
    CFRelease(v5);
    return 0;
  }
  v15 = v14;
  v2 = v2;
  v16 = a1 + 6;
  do
  {
    AVE_CFArray_AddDouble(*(v16 - 2), v11);
    AVE_CFArray_AddDouble(*(v16 - 1), v13);
    v17 = *v16;
    v16 += 12;
    AVE_CFArray_AddDouble(v17, v15);
    --v2;
  }
  while (v2);
  CFDictionaryAddValue(v5, CFSTR("LumaMeanSquaredError"), v11);
  CFDictionaryAddValue(v5, CFSTR("ChromaBlueMeanSquaredError"), v13);
  CFDictionaryAddValue(v5, CFSTR("ChromaRedMeanSquaredError"), v15);
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  return v5;
}

uint64_t Connection::peekPacket(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  result = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 200))
  {
    v5 = *(_QWORD *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
    v6 = *(_OWORD *)v5;
    v7 = *(_OWORD *)(v5 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v5 + 32);
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    return pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return result;
}

uint64_t Connection::writePacketBlock(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v8;
  __uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  const char *v19;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (*(_DWORD *)(a1 + 200) == *(_DWORD *)(a1 + 196))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    v4 = 1000 * *(int *)(a1 + 184);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 176) + 120;
    *(_QWORD *)(a1 + 168) = v4;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      if (AVE_Log_CheckLevel(0x2Au, 4))
      {
        v5 = AVE_Log_CheckConsole(0x2Au);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        v8 = *(_DWORD *)(a1 + 200);
        if (v5)
        {
          printf("%lld %d AVE %s: H264 Connection: connection full %d\n", CurrTime, 42, LevelStr, v8);
          v9 = AVE_GetCurrTime();
          v19 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", v9, 42, v19, *(_DWORD *)(a1 + 200));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: H264 Connection: connection full %d", CurrTime, 42, LevelStr, v8);
        }
      }
      v10 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 208);
  v12 = *a2;
  v13 = a2[1];
  *(_QWORD *)(v11 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *(_OWORD *)(v11 + 16) = v13;
  v14 = *(_DWORD *)(a1 + 208);
  v16 = *(_DWORD *)(a1 + 196);
  v15 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 200) = v15 + 1;
  if (v14 + 1 < v16)
    v17 = v14 + 1;
  else
    v17 = 0;
  *(_DWORD *)(a1 + 208) = v17;
  if (!v15)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
    v10 = 0;
  }
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v10;
}

uint64_t H264VideoEncoderFrameReceiver::StopRunLoop(H264VideoEncoderFrameReceiver *this)
{
  CFRunLoopRef *v2;
  const void *v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  const char *v14;
  const char *v15;

  *(_BYTE *)this = 0;
  v2 = (CFRunLoopRef *)((char *)this + 51232);
  v3 = (const void *)*((_QWORD *)this + 6404);
  if (v3)
  {
    CFRetain(v3);
    if (AVE_Log_CheckLevel(0x2Eu, 7))
    {
      v4 = AVE_Log_CheckConsole(0x2Eu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (v4)
      {
        printf("%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.\n", CurrTime, 46, LevelStr);
        v7 = AVE_GetCurrTime();
        v14 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", v7, 46, v14);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec: RemoveIODispatcherFromRunLoop to CFRunLoopRun.", CurrTime, 46, LevelStr);
      }
    }
    H264VideoEncoderFrameReceiver::RemoveIODispatcherFromRunLoop(this);
    CFRunLoopStop(*v2);
    CFRelease(*v2);
    v8 = 0;
    *v2 = 0;
  }
  else
  {
    v8 = 3758097084;
    if (AVE_Log_CheckLevel(0x2Eu, 4))
    {
      v9 = AVE_Log_CheckConsole(0x2Eu);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL\n", v10, 46, v11);
        v12 = AVE_GetCurrTime();
        v15 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v12, 46, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: H264FrameRec ERROR: runLoopRef NULL", v10, 46, v11);
      }
    }
  }
  return v8;
}

uint64_t CreateH264VideoEncoderFrameReceiver(_QWORD *a1, uint64_t a2, pthread_attr_t *a3, pthread_t *a4)
{
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v10;
  __uint64_t v11;
  const char *v12;
  sched_param v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;

  v15[0] = 0;
  v16 = 0;
  v17 = a2;
  pthread_attr_init(a3);
  if (pthread_attr_getschedparam(a3, &v14))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v7 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.\n", CurrTime, 3, LevelStr, "CreateH264VideoEncoderFrameReceiver", 5886, "err == noErr");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_getschedparam failed.");
    }
  }
  else
  {
    v14.sched_priority = 47;
    if (pthread_attr_setschedparam(a3, &v14))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v10 = AVE_Log_CheckConsole(3u);
        v11 = AVE_GetCurrTime();
        v12 = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.\n", v11, 3, v12, "CreateH264VideoEncoderFrameReceiver", 5889, "err == noErr");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: pthread_attr_setschedparam failed.");
      }
    }
    else
    {
      pthread_create(a4, a3, (void *(__cdecl *)(void *))H264VideoEncoderFrameReceiverEntry, v15);
      while (!v15[0])
        usleep(0x3E8u);
      *a1 = v16;
    }
  }
  if (*a1)
    return 0;
  else
    return 3758097084;
}

void H264VideoEncoderFrameReceiverEntry(H264VideoEncoderFrameReceiver *a1)
{
  H264VideoEncoderFrameReceiver *v1;
  H264VideoEncoderFrameReceiver *v2;
  char v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  void *v7;

  v1 = a1;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (H264VideoEncoderFrameReceiver *)operator new();
  H264VideoEncoderFrameReceiver::H264VideoEncoderFrameReceiver((uint64_t)v2, *((_QWORD *)v1 + 2));
  os_retain(*(void **)(*((_QWORD *)v1 + 2) + 248));
  voucher_adopt();
  if (H264VideoEncoderFrameReceiver::Setup(v2))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v4 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to set up DataRecv\n", CurrTime, 3, LevelStr, "H264VideoEncoderFrameReceiverEntry", 5961, "result == 0");
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to set up DataRecv", CurrTime, 3, LevelStr, "H264VideoEncoderFrameReceiverEntry", 5961, "result == 0");
    }
    H264VideoEncoderFrameReceiver::~H264VideoEncoderFrameReceiver(v2);
    MEMORY[0x1B5E4D1C0]();
    v3 = 1;
  }
  else
  {
    *((_QWORD *)v1 + 1) = v2;
    pthread_setname_np("AVE_DataRecv");
    *(_BYTE *)v1 = 1;
    *(_BYTE *)v2 = 1;
    CFRunLoopRun();
    v3 = 0;
    v1 = v2;
  }
  *(_BYTE *)v1 = v3;
  v7 = (void *)voucher_adopt();
  os_release(v7);
  pthread_exit(0);
}

void sub_1B55A0174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x10F0C4033AF1F48);
  _Unwind_Resume(a1);
}

uint64_t DestroyH264VideoEncoderFrameReceiver(H264VideoEncoderFrameReceiver *a1, _opaque_pthread_attr_t *a2, _opaque_pthread_t **a3)
{
  uint64_t v6;
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  const char *v16;
  const char *v17;

  H264VideoEncoderFrameReceiver::StopRunLoop(a1);
  pthread_join(*a3, 0);
  if (!*(_BYTE *)a1)
  {
    v6 = 0;
LABEL_6:
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = 3758097084;
  if (!AVE_Log_CheckLevel(3u, 4))
    goto LABEL_6;
  v7 = AVE_Log_CheckConsole(3u);
  CurrTime = AVE_GetCurrTime();
  LevelStr = AVE_Log_GetLevelStr(4);
  if (v7)
  {
    printf("%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.\n", CurrTime, 3, LevelStr, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
    v10 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", v10, 3, v16, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
  }
  else
  {
    syslog(3, "%lld %d AVE %s: %s:%d %s | H264FrameRec ERROR: wait for H264VideoEncoderFrameReceiver thread failed.", CurrTime, 3, LevelStr, "DestroyH264VideoEncoderFrameReceiver", 5917, "pFrameReceiver->m_moreWorkToDo == false");
  }
  if (!a2)
    goto LABEL_8;
LABEL_7:
  pthread_attr_destroy(a2);
LABEL_8:
  if (AVE_Log_CheckLevel(0x2Eu, 7))
  {
    v11 = AVE_Log_CheckConsole(0x2Eu);
    v12 = AVE_GetCurrTime();
    v13 = AVE_Log_GetLevelStr(7);
    if (v11)
    {
      printf("%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu\n", v12, 46, v13, a1, 245248);
      v14 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v14, 46, v17, a1, 245248);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: H264FrameRec: Destroy pFrameReciever %p sz %lu", v12, 46, v13, a1, 245248);
    }
  }
  H264VideoEncoderFrameReceiver::~H264VideoEncoderFrameReceiver(a1);
  MEMORY[0x1B5E4D1C0]();
  return v6;
}

void AVE_MultiPass::AVE_MultiPass(AVE_MultiPass *this)
{
  *(_OWORD *)((char *)this + 25352) = 0u;
  *((_QWORD *)this + 3171) = 0;
  *(_OWORD *)((char *)this + 25384) = 0u;
  *(_OWORD *)((char *)this + 25400) = 0u;
  *(_OWORD *)((char *)this + 25416) = 0u;
  *(_OWORD *)((char *)this + 25432) = 0u;
  *(_OWORD *)((char *)this + 25448) = 0u;
  *(_OWORD *)((char *)this + 25464) = 0u;
  AVE_MultiPass::reset(this);
}

void sub_1B55A03D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;

  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](v1 + 3179);
  std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](v2);
  v4 = (void *)v1[3169];
  if (v4)
  {
    v1[3170] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

double AVE_MultiPass::reset(AVE_MultiPass *this)
{
  _DWORD *v2;
  double result;

  v2 = (_DWORD *)((char *)this + 25480);
  AVE_MultiPass::empty_queues(this);
  *v2 = 0;
  *((_QWORD *)this + 3186) = 0;
  *((_QWORD *)this + 3220) = 0;
  bzero((char *)this + 25496, 0x108uLL);
  v2[23] = 0;
  result = 0.0;
  *((_QWORD *)this + 3168) = 0;
  v2[72] = 0;
  return result;
}

void AVE_MultiPass::empty_queues(AVE_MultiPass *this)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;

  v2 = (_QWORD *)((char *)this + 25352);
  v3 = (void *)*((_QWORD *)this + 3169);
  if (v3)
  {
    *((_QWORD *)this + 3170) = v3;
    operator delete(v3);
  }
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (void **)*((_QWORD *)this + 3174);
  v5 = *((_QWORD *)this + 3175);
  *((_QWORD *)this + 3178) = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v4 = (void **)(*((_QWORD *)this + 3174) + 8);
      *((_QWORD *)this + 3174) = v4;
      v6 = *((_QWORD *)this + 3175) - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v7 = 256;
  }
  else
  {
    if (v6 >> 3 != 2)
      goto LABEL_10;
    v7 = 512;
  }
  *((_QWORD *)this + 3177) = v7;
LABEL_10:
  v8 = (void **)*((_QWORD *)this + 3180);
  v9 = *((_QWORD *)this + 3181);
  *((_QWORD *)this + 3184) = 0;
  v10 = v9 - (_QWORD)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      v8 = (void **)(*((_QWORD *)this + 3180) + 8);
      *((_QWORD *)this + 3180) = v8;
      v10 = *((_QWORD *)this + 3181) - (_QWORD)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    v11 = 256;
    goto LABEL_16;
  }
  if (v10 >> 3 == 2)
  {
    v11 = 512;
LABEL_16:
    *((_QWORD *)this + 3183) = v11;
  }
  v12 = 0;
  v13 = (int64x2_t)xmmword_1B5625EF0;
  v14 = vdupq_n_s64(2uLL);
  v15 = vaddq_s64(vdupq_n_s64((unint64_t)this), v14);
  do
  {
    v16.i64[0] = 1574 * v13.i64[0];
    v16.i64[1] = 1574 * v13.i64[1];
    *(int64x2_t *)((char *)this + v12 + 25192) = vaddq_s64(v15, v16);
    v13 = vaddq_s64(v13, v14);
    v12 += 16;
  }
  while (v12 != 128);
  *((_DWORD *)this + 6330) = 16;
}

uint64_t std::deque<_S_AVE_MultiPassStats *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<_S_AVE_MultiPassStats **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<_S_AVE_MultiPassStats **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t AVE_USL_CalcDataSurfaceInfo(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;

  v5 = *(_DWORD *)(a1 + 188116);
  v6 = *(_DWORD *)(a2 + 18568);
  v7 = *(_DWORD *)(a2 + 1688);
  v8 = *(_DWORD *)(a2 + 1692);
  v9 = *(_DWORD *)(a1 + 188128);
  if (v9)
    v10 = 2;
  else
    v10 = *(_DWORD *)(a2 + 18208);
  v11 = *(_DWORD *)(a3 + 160) == 0;
  v12 = *(_QWORD *)(a3 + 21632) != 0;
  a4[4] = AVE_CalcBufNumOfMBInputCtrl(*(_DWORD *)(a1 + 188116), *(unsigned int *)(a2 + 18568), *(unsigned __int8 *)(a2 + 1732) != 0);
  a4[5] = AVE_CalcBufSizeOfMBInputCtrl(v6, v7, v8);
  a4[10] = AVE_CalcBufNumOfMultiPassStats(v5, v10, v9);
  a4[11] = AVE_CalcBufSizeOfMultiPassStats(v11, v12);
  return 0;
}

uint64_t AVE_USL_Drv_Create(uint32_t a1, int a2, _QWORD *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  _DWORD *v9;
  _DWORD *v10;
  AVE_DAL *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  BOOL v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  int v28;
  BOOL v29;
  __uint64_t v30;
  const char *v31;
  _OWORD v33[2];
  uint64_t v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  bzero(v35, 0x6E0uLL);
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %d %d\n", CurrTime, 40, LevelStr, "AVE_USL_Drv_Create", a1, a2);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d", CurrTime, 40, LevelStr, "AVE_USL_Drv_Create", a1, a2);
  }
  v9 = malloc_type_malloc(0x2DEF0uLL, 0x102004039AF7E20uLL);
  if (v9)
  {
    v10 = v9;
    bzero(v9, 0x2DEF0uLL);
    v11 = (AVE_DAL *)operator new();
    AVE_DAL::AVE_DAL(v11);
    v12 = AVE_DAL::Init(v11, 64, 67360);
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        v14 = AVE_Log_CheckConsole(0x28u);
        v15 = AVE_GetCurrTime();
        v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to initialize DAL %d %d%d\n", v15, 40, v16, "AVE_USL_Drv_Create", 326, "ret == 0", 64, 67360, v13);
          v15 = AVE_GetCurrTime();
          v16 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize DAL %d %d%d", v15, 40, v16, "AVE_USL_Drv_Create", 326, "ret == 0", 64, 67360, v13);
      }
    }
    else
    {
      v20 = AVE_DAL::UCCreate(v11, a1);
      if ((_DWORD)v20)
      {
        v13 = v20;
        if (AVE_Log_CheckLevel(0x28u, 4))
        {
          v21 = AVE_Log_CheckConsole(0x28u);
          v22 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          if (v21)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to open driver %d %d\n", v22, 40, v23, "AVE_USL_Drv_Create", 330, "ret == 0", a1, v13);
            v22 = AVE_GetCurrTime();
            v23 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %d", v22, 40, v23, "AVE_USL_Drv_Create", 330, "ret == 0", a1, v13);
        }
      }
      else
      {
        v36 = 118000;
        v37 = (uint64_t)AVE_GetCurrTime() / 1000;
        v38 = a2;
        v13 = AVE_DAL::UCOpen(v11, (uint64_t)v35, v33);
        if (!(_DWORD)v13)
        {
          v27 = v33[0];
          v28 = v34;
          v10[47027] = v34;
          v10[47028] = v27;
          v13 = 0;
          v10[47026] = AVE_DevID2Type(v28);
          v10[47029] = a1;
          *(_QWORD *)v10 = v11;
          *a3 = v10;
          goto LABEL_33;
        }
        if (AVE_Log_CheckLevel(0x28u, 4))
        {
          v24 = AVE_Log_CheckConsole(0x28u) == 0;
          v25 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(4);
          if (!v24)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to open client %d %d %d\n", v25, 40, v26, "AVE_USL_Drv_Create", 340, "ret == 0", a1, a2, v13);
            v25 = AVE_GetCurrTime();
            v26 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %d %d %d", v25, 40, v26, "AVE_USL_Drv_Create", 340, "ret == 0", a1, a2, v13);
        }
      }
    }
    AVE_DAL::UCDestroy(v11);
    AVE_DAL::~AVE_DAL(v11);
    MEMORY[0x1B5E4D1C0]();
    free(v10);
  }
  else
  {
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      v17 = AVE_Log_CheckConsole(0x28u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to allocate %d %d\n", v18, 40, v19, "AVE_USL_Drv_Create", 314, "pINS != __null", a1, a2);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to allocate %d %d", v18, 40, v19, "AVE_USL_Drv_Create", 314, "pINS != __null", a1, a2);
    }
    v13 = 4294966293;
  }
LABEL_33:
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    v29 = AVE_Log_CheckConsole(0x28u) == 0;
    v30 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(6);
    if (!v29)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %d\n", v30, 40, v31, "AVE_USL_Drv_Create", a1, a2, v13);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d %d", v30, 40, v31, "AVE_USL_Drv_Create", a1, a2, v13);
  }
  return v13;
}

void sub_1B55A0EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x10A0C40A49DBD8BLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_USL_Drv_GetDevID(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 188108);
  return result;
}

uint64_t AVE_USL_Drv_GetClientID(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 188112);
  return result;
}

uint64_t AVE_USL_Drv_Destroy(const void ***a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  memset(v30, 0, sizeof(v30));
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    v2 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 40, LevelStr, "AVE_USL_Drv_Destroy", a1);
      v5 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 40, v25, "AVE_USL_Drv_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 40, LevelStr, "AVE_USL_Drv_Destroy", a1);
    }
  }
  if (a1)
  {
    AppleAVEVA_CleanMem((uint64_t)a1);
    if (*a1)
    {
      *(_QWORD *)&v31 = *((unsigned int *)a1 + 47028);
      DWORD2(v32) = 118000;
      v33 = (uint64_t)AVE_GetCurrTime() / 1000;
      v6 = AVE_DAL::UCClose(*a1, &v31, v30);
      if ((_DWORD)v6)
      {
        v7 = v6;
        if (!AVE_Log_CheckLevel(0x28u, 4))
        {
LABEL_27:
          free(a1);
          goto LABEL_28;
        }
        v8 = AVE_Log_CheckConsole(0x28u);
        v9 = AVE_GetCurrTime();
        v10 = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %d\n", v9, 40, v10, "AVE_USL_Drv_Destroy", 453, "ret == 0", v7);
          v11 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %d", v11);
          goto LABEL_27;
        }
        v29 = v7;
        v28 = 453;
        v26 = v10;
        v19 = "%lld %d AVE %s: %s:%d %s | fail to close client %d";
LABEL_26:
        syslog(3, v19, v9, 40, v26, "AVE_USL_Drv_Destroy", v28, "ret == 0", v29);
        goto LABEL_27;
      }
      v15 = AVE_DAL::UCDestroy((AVE_DAL *)*a1);
      if ((_DWORD)v15)
      {
        v7 = v15;
        if (!AVE_Log_CheckLevel(0x28u, 4))
          goto LABEL_27;
        v16 = AVE_Log_CheckConsole(0x28u);
        v9 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %d\n", v9, 40, v17, "AVE_USL_Drv_Destroy", 457, "ret == 0", v7);
          v18 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %d", v18);
          goto LABEL_27;
        }
        v29 = v7;
        v28 = 457;
        v26 = v17;
        v19 = "%lld %d AVE %s: %s:%d %s | fail to close driver %d";
        goto LABEL_26;
      }
      if (*a1)
      {
        AVE_DAL::~AVE_DAL((AVE_DAL *)*a1);
        MEMORY[0x1B5E4D1C0]();
      }
    }
    v7 = 0;
    goto LABEL_27;
  }
  if (AVE_Log_CheckLevel(0x28u, 4))
  {
    v12 = AVE_Log_CheckConsole(0x28u);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v13, 40, v14, "AVE_USL_Drv_Destroy", 438, "pDrv != __null", 0);
      v13 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v13);
  }
  v7 = 4294966295;
LABEL_28:
  if (AVE_Log_CheckLevel(0x28u, 6))
  {
    v20 = AVE_Log_CheckConsole(0x28u);
    v21 = AVE_GetCurrTime();
    v22 = AVE_Log_GetLevelStr(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
      v23 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v23, 40, v27, "AVE_USL_Drv_Destroy", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v21, 40, v22, "AVE_USL_Drv_Destroy", a1, v7);
    }
  }
  return v7;
}

uint64_t AppleAVEVA_CleanMem(uint64_t a1)
{
  _QWORD *v2;
  H264VideoEncoderFrameReceiver *v3;
  Connection *v4;
  Connection *v5;

  v2 = (_QWORD *)(a1 + 188008);
  v3 = *(H264VideoEncoderFrameReceiver **)(a1 + 188008);
  if (v3)
  {
    DestroyH264VideoEncoderFrameReceiver(v3, (_opaque_pthread_attr_t *)(a1 + 188032), (_opaque_pthread_t **)(a1 + 188096));
    *v2 = 0;
    *(_BYTE *)(a1 + 18702) = 0;
  }
  v4 = (Connection *)v2[1];
  if (v4)
  {
    Connection::~Connection(v4);
    MEMORY[0x1B5E4D1C0]();
    v2[1] = 0;
  }
  v5 = (Connection *)v2[2];
  if (v5)
  {
    Connection::~Connection(v5);
    MEMORY[0x1B5E4D1C0]();
    v2[2] = 0;
  }
  AVE_USL_DestroyDataSurfaces(a1 + 72);
  return AVE_USL_DestroyInSurfaces(a1 + 64);
}

uint64_t AVE_USL_Drv_Prepare()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v11;
  int v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  void *v37;
  const void *v38;
  size_t v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  int v49;
  __uint64_t v50;
  const char *v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  int v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  int v61;
  __uint64_t v62;
  const char *v63;
  unint64_t v64;
  BOOL v65;
  __uint64_t v66;
  const char *v67;
  Connection *v68;
  Connection *v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  __uint64_t v73;
  const char *v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  BOOL v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  int v91;
  BOOL v92;
  __uint64_t v93;
  const char *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int H264VideoEncoderFrameReceiver;
  int v99;
  __uint64_t v100;
  const char *v101;
  BOOL v102;
  __uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  int PacketBlock;
  BOOL v113;
  __uint64_t v114;
  const char *v115;
  BOOL v116;
  __uint64_t v117;
  const char *v118;
  BOOL v119;
  __uint64_t v120;
  const char *v121;
  BOOL v123;
  __uint64_t v124;
  const char *v125;
  __int128 v126;
  __int128 v127;
  int v128;
  unint64_t v129[2];
  __int128 v130;
  _OWORD v131[3];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD v137[5];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  int v143;
  _BYTE v144[187888];
  int v145;
  uint64_t v146;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v146 = *MEMORY[0x1E0C80C00];
  v128 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v8 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.\n", CurrTime, 40, LevelStr);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Prepare.", CurrTime, 40, LevelStr);
  }
  if (!v7)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.\n", v17, 3, v18, "AVE_USL_Drv_Prepare", 487, "pDriverInstance");
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_Prepare, Null pointer for driver data.", v17, 3, v18, "AVE_USL_Drv_Prepare", 487, "pDriverInstance");
    }
    goto LABEL_43;
  }
  if (!v6)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v19 = AVE_Log_CheckConsole(3u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.\n", v20, 3, v21, "AVE_USL_Drv_Prepare", 488, "pInitSettings");
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for AppleAVEVA_InitSettings.", v20, 3, v21, "AVE_USL_Drv_Prepare", 488, "pInitSettings");
    }
LABEL_43:
    v31 = 4294966295;
    goto LABEL_44;
  }
  if (!*(_QWORD *)v6)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v22 = AVE_Log_CheckConsole(3u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.\n", v23, 3, v24, "AVE_USL_Drv_Prepare", 490, "pInitSettings->pClientParams");
        v23 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pClientParams.", v23, 3, v24, "AVE_USL_Drv_Prepare", 490, "pInitSettings->pClientParams");
    }
    goto LABEL_165;
  }
  if (!*(_QWORD *)(v6 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v25 = AVE_Log_CheckConsole(3u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.\n", v26, 3, v27, "AVE_USL_Drv_Prepare", 491, "pInitSettings->pVideoParams");
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParams.", v26, 3, v27, "AVE_USL_Drv_Prepare", 491, "pInitSettings->pVideoParams");
    }
    goto LABEL_165;
  }
  v11 = *(_QWORD *)(v6 + 16);
  if (!v11)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.\n", v29, 3, v30, "AVE_USL_Drv_Prepare", 492, "pInitSettings->pVideoParamsDriver");
        v29 = AVE_GetCurrTime();
        v30 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pVideoParamsDriver.", v29, 3, v30, "AVE_USL_Drv_Prepare", 492, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_165;
  }
  if (!*(_QWORD *)(v6 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v33 = AVE_Log_CheckConsole(3u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.\n", v34, 3, v35, "AVE_USL_Drv_Prepare", 493, "pInitSettings->pRCParams");
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for pRCParams.", v34, 3, v35, "AVE_USL_Drv_Prepare", 493, "pInitSettings->pRCParams");
    }
    goto LABEL_165;
  }
  v12 = *(_DWORD *)(v11 + 120);
  if (v12 == 1)
  {
    if (!*(_QWORD *)(v6 + 80))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v46 = AVE_Log_CheckConsole(3u);
        v47 = AVE_GetCurrTime();
        v48 = AVE_Log_GetLevelStr(4);
        if (v46)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.\n", v47, 3, v48, "AVE_USL_Drv_Prepare", 507, "pInitSettings->VPSHevcParams");
          v47 = AVE_GetCurrTime();
          v48 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for VPSHevcParams.", v47, 3, v48, "AVE_USL_Drv_Prepare", 507, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 88))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v52 = AVE_Log_CheckConsole(3u);
        v53 = AVE_GetCurrTime();
        v54 = AVE_Log_GetLevelStr(4);
        if (v52)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.\n", v53, 3, v54, "AVE_USL_Drv_Prepare", 508, "pInitSettings->psaHEVC_SPS[0]");
          v53 = AVE_GetCurrTime();
          v54 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSHevcParams.", v53, 3, v54, "AVE_USL_Drv_Prepare", 508, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 104))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v55 = AVE_Log_CheckConsole(3u);
        v56 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.\n", v56, 3, v57, "AVE_USL_Drv_Prepare", 509, "pInitSettings->psaHEVC_PPS[0]");
          v56 = AVE_GetCurrTime();
          v57 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSHevcParams.", v56, 3, v57, "AVE_USL_Drv_Prepare", 509, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 120))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v58 = AVE_Log_CheckConsole(3u);
        v59 = AVE_GetCurrTime();
        v60 = AVE_Log_GetLevelStr(4);
        if (v58)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.\n", v59, 3, v60, "AVE_USL_Drv_Prepare", 510, "pInitSettings->SHHevcParams");
          v59 = AVE_GetCurrTime();
          v60 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHHevcParams.", v59, 3, v60, "AVE_USL_Drv_Prepare", 510, "pInitSettings->SHHevcParams");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 128))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v61 = AVE_Log_CheckConsole(3u);
        v62 = AVE_GetCurrTime();
        v63 = AVE_Log_GetLevelStr(4);
        if (v61)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.\n", v62, 3, v63, "AVE_USL_Drv_Prepare", 511, "pInitSettings->RPSHevcParams");
          v62 = AVE_GetCurrTime();
          v63 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for RPSHevcParams.", v62, 3, v63, "AVE_USL_Drv_Prepare", 511, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_165;
    }
  }
  else
  {
    if (v12)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v40 = AVE_Log_CheckConsole(3u);
        v41 = AVE_GetCurrTime();
        v42 = AVE_Log_GetLevelStr(4);
        if (v40)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v41, 3, v42, "AVE_USL_Drv_Prepare", 516, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
          v41 = AVE_GetCurrTime();
          v42 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v41, 3, v42, "AVE_USL_Drv_Prepare", 516, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 56))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v43 = AVE_Log_CheckConsole(3u);
        v44 = AVE_GetCurrTime();
        v45 = AVE_Log_GetLevelStr(4);
        if (v43)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.\n", v44, 3, v45, "AVE_USL_Drv_Prepare", 499, "pInitSettings->SPSParams");
          v44 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SPSParams.", v44, 3, v45, "AVE_USL_Drv_Prepare", 499, "pInitSettings->SPSParams");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 64))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v49 = AVE_Log_CheckConsole(3u);
        v50 = AVE_GetCurrTime();
        v51 = AVE_Log_GetLevelStr(4);
        if (v49)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.\n", v50, 3, v51, "AVE_USL_Drv_Prepare", 500, "pInitSettings->PPSParams");
          v50 = AVE_GetCurrTime();
          v51 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for PPSParams.", v50, 3, v51, "AVE_USL_Drv_Prepare", 500, "pInitSettings->PPSParams");
      }
      goto LABEL_165;
    }
    if (!*(_QWORD *)(v6 + 72))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v13 = AVE_Log_CheckConsole(3u);
        v14 = AVE_GetCurrTime();
        v15 = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.\n", v14, 3, v15, "AVE_USL_Drv_Prepare", 501, "pInitSettings->SHParams");
          v14 = AVE_GetCurrTime();
          v15 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, Null pointer for SHParams.", v14, 3, v15, "AVE_USL_Drv_Prepare", 501, "pInitSettings->SHParams");
      }
LABEL_165:
      v31 = 4294966295;
      goto LABEL_166;
    }
  }
  *(_QWORD *)(v7 + 1800) = **(_QWORD **)v6;
  memcpy((void *)(v7 + 1808), *(const void **)(v6 + 8), 0x4178uLL);
  memcpy((void *)(v7 + 18568), *(const void **)(v6 + 16), 0x6A8uLL);
  memcpy((void *)(v7 + 120), *(const void **)(v6 + 24), 0x690uLL);
  if ((*(_DWORD *)(v7 + 188116) & 0xFFFFFFFE) != 2)
  {
    v36 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120);
    if (v36 == 1)
    {
      memcpy((void *)(v7 + 24972), *(const void **)(v6 + 80), 0x140DCuLL);
      memcpy((void *)(v7 + 107112), *(const void **)(v6 + 88), 0x1EF4uLL);
      memcpy((void *)(v7 + 122960), *(const void **)(v6 + 104), 0x25A4uLL);
      memcpy((void *)(v7 + 115036), *(const void **)(v6 + 96), 0x1EF4uLL);
      memcpy((void *)(v7 + 132596), *(const void **)(v6 + 112), 0x25A4uLL);
      memcpy((void *)(v7 + 142232), *(const void **)(v6 + 120), 0x54F8uLL);
      v37 = (void *)(v7 + 163984);
      v38 = *(const void **)(v6 + 128);
      v39 = 24024;
    }
    else
    {
      if (v36)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v75 = AVE_Log_CheckConsole(3u);
          v76 = AVE_GetCurrTime();
          v77 = AVE_Log_GetLevelStr(4);
          if (v75)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d\n", v76, 3, v77, "AVE_USL_Drv_Prepare", 554, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
            v76 = AVE_GetCurrTime();
            v77 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Prepare, codectype not recognized = %d", v76, 3, v77, "AVE_USL_Drv_Prepare", 554, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
        }
        goto LABEL_165;
      }
      memcpy((void *)(v7 + 20272), *(const void **)(v6 + 56), 0x6ACuLL);
      memcpy((void *)(v7 + 21980), *(const void **)(v6 + 64), 0x184uLL);
      v37 = (void *)(v7 + 22368);
      v38 = *(const void **)(v6 + 72);
      v39 = 2604;
    }
    memcpy(v37, v38, v39);
  }
  *(_QWORD *)(v7 + 188136) = *(_QWORD *)(v6 + 48);
  if (!*(_BYTE *)(v7 + 18702))
  {
    v138 = 0u;
    memset(v137, 0, sizeof(v137));
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v132 = 0u;
    memset(v131, 0, sizeof(v131));
    *(_OWORD *)v129 = 0u;
    v130 = 0u;
    v68 = (Connection *)operator new();
    Connection::Connection(v68, 32);
    *(_QWORD *)(v7 + 188024) = v68;
    v69 = (Connection *)operator new();
    Connection::Connection(v69, 32);
    *(_QWORD *)(v7 + 188016) = v69;
    v70 = *(_QWORD *)(v7 + 188024);
    v129[0] = *(_QWORD *)v7;
    v129[1] = v70;
    *(_QWORD *)&v130 = v69;
    *(_QWORD *)&v132 = v7 + 1800;
    *((_QWORD *)&v132 + 1) = v7 + 1808;
    *(_QWORD *)&v133 = v7 + 18568;
    *((_QWORD *)&v133 + 1) = v7 + 120;
    v134 = *(_OWORD *)(v6 + 32);
    v71 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120);
    if (v71)
    {
      if (v71 != 1)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v99 = AVE_Log_CheckConsole(3u);
          v100 = AVE_GetCurrTime();
          v101 = AVE_Log_GetLevelStr(4);
          if (v99)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v100, 3, v101, "AVE_USL_Drv_Prepare", 612, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
            v100 = AVE_GetCurrTime();
            v101 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v100, 3, v101, "AVE_USL_Drv_Prepare", 612, "false", *(_DWORD *)(*(_QWORD *)(v6 + 16) + 120));
        }
        goto LABEL_165;
      }
      v135 = 0uLL;
      *(_QWORD *)&v136 = 0;
      *((_QWORD *)&v136 + 1) = v7 + 24972;
      *(_QWORD *)&v137[0] = v7 + 107112;
      *((_QWORD *)&v137[0] + 1) = v7 + 115036;
      *(_QWORD *)&v137[1] = v7 + 122960;
      *((_QWORD *)&v137[1] + 1) = v7 + 132596;
      *(_QWORD *)&v137[2] = v7 + 142232;
      *((_QWORD *)&v137[2] + 1) = v7 + 163984;
    }
    else
    {
      *(_QWORD *)&v135 = v7 + 20272;
      *((_QWORD *)&v135 + 1) = v7 + 21980;
      *(_QWORD *)&v136 = v7 + 22368;
    }
    LOBYTE(v137[3]) = v4;
    v95 = *(_DWORD *)(v7 + 188104);
    v96 = *(_DWORD *)(v7 + 188116);
    HIDWORD(v137[3]) = *(_DWORD *)(v7 + 188112);
    *(_QWORD *)((char *)&v137[3] + 4) = __PAIR64__(v95, v96);
    v97 = voucher_copy();
    *(_QWORD *)&v137[4] = 0;
    BYTE8(v137[4]) = 1;
    *(_QWORD *)&v138 = *(_QWORD *)(v7 + 188136);
    *((_QWORD *)&v138 + 1) = v97;
    H264VideoEncoderFrameReceiver = CreateH264VideoEncoderFrameReceiver((_QWORD *)(v7 + 188008), (uint64_t)v129, (pthread_attr_t *)(v7 + 188032), (pthread_t *)(v7 + 188096));
    os_release(*((void **)&v138 + 1));
    if (!*(_QWORD *)(v7 + 188008) || H264VideoEncoderFrameReceiver)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v102 = AVE_Log_CheckConsole(3u) == 0;
        v103 = AVE_GetCurrTime();
        v104 = AVE_Log_GetLevelStr(4);
        if (!v102)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v103, 3, v104, "AVE_USL_Drv_Prepare", 629, "pDriverInstance->FrameReceiver && ret == 0");
          v103 = AVE_GetCurrTime();
          v104 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v103, 3, v104, "AVE_USL_Drv_Prepare", 629, "pDriverInstance->FrameReceiver && ret == 0");
      }
      goto LABEL_173;
    }
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 134) = 1;
    *(_BYTE *)(v7 + 18702) = 1;
  }
  v129[0] = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)v7, 67360, v129);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)v7, (const void *)v129[0], &v128);
  v64 = v129[0];
  if (!v129[0])
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v72 = AVE_Log_CheckConsole(3u) == 0;
      v73 = AVE_GetCurrTime();
      v74 = AVE_Log_GetLevelStr(4);
      if (!v72)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v73, 3, v74, "AVE_USL_Drv_Prepare", 643, "Frame");
        v73 = AVE_GetCurrTime();
        v74 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v73, 3, v74, "AVE_USL_Drv_Prepare", 643, "Frame");
    }
LABEL_173:
    v31 = 4294966293;
    goto LABEL_166;
  }
  bzero((void *)(v129[0] + 8), 0x10718uLL);
  *(_DWORD *)v64 = v128;
  *(_DWORD *)(v64 + 4) = 4;
  *(_DWORD *)(v64 + 160) = *(_DWORD *)(v7 + 12);
  *(_QWORD *)(v64 + 27672) = *(_QWORD *)(v6 + 136);
  *(_BYTE *)(v64 + 8) = *(_QWORD *)(v7 + 188120) != 0;
  *(_DWORD *)(v64 + 12) = *(_DWORD *)(v7 + 188128);
  LODWORD(v129[0]) = v128;
  if (!Connection::writePacketBlock(*(_QWORD *)(v7 + 188024), (__int128 *)v129))
  {
    bzero(&v129[1], 0x2DFB0uLL);
    v126 = 0u;
    v127 = 0u;
    v129[0] = *(unsigned int *)(v7 + 188112);
    v83 = "";
    if (v2)
      LOBYTE(v83) = v2;
    AVE_SNPrintf((char *)v131 + 8, 128, "%s", v78, v79, v80, v81, v82, (char)v83);
    v145 = v128;
    v84 = *(_BYTE *)(v7 + 18777) == 0;
    v85 = *(_OWORD *)(v7 + 20120);
    *(_OWORD *)((char *)&v137[1] + 12) = *(_OWORD *)(v7 + 20136);
    v86 = *(_OWORD *)(v7 + 20168);
    *(_OWORD *)((char *)&v137[2] + 12) = *(_OWORD *)(v7 + 20152);
    *(_OWORD *)((char *)&v137[3] + 12) = v86;
    *(_OWORD *)((char *)v137 + 12) = v85;
    v87 = *(_OWORD *)(v7 + 20188);
    v88 = *(_OWORD *)(v7 + 20204);
    v89 = *(_OWORD *)(v7 + 20236);
    v141 = *(_OWORD *)(v7 + 20220);
    v142 = v89;
    v139 = v87;
    v140 = v88;
    if (v84)
      v90 = 1;
    else
      v90 = 2;
    v91 = *(_DWORD *)(v7 + 20252);
    HIDWORD(v137[4]) = *(_DWORD *)(v7 + 20184);
    v143 = v91;
    DWORD2(v137[0]) = v90;
    DWORD2(v130) = 118000;
    *(_QWORD *)&v131[0] = (uint64_t)AVE_GetCurrTime() / 1000;
    memcpy(v144, (const void *)(v7 + 120), sizeof(v144));
    v126 = 0u;
    v127 = 0u;
    v31 = AVE_DAL::UCPrepare(*(const void ***)v7, v129, &v126);
    if ((_DWORD)v31)
    {
      Connection::dropLastPacketBlock(*(pthread_mutex_t **)(v7 + 188024));
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        v92 = AVE_Log_CheckConsole(0x28u) == 0;
        v93 = AVE_GetCurrTime();
        v94 = AVE_Log_GetLevelStr(4);
        if (!v92)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to prepare %d\n", v93, 40, v94, "AVE_USL_Drv_Prepare", 695, "ret == 0", v31);
          v93 = AVE_GetCurrTime();
          v94 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %d", v93, 40, v94, "AVE_USL_Drv_Prepare", 695, "ret == 0", v31);
      }
    }
    else
    {
      v105 = 0;
      v106 = *(_QWORD *)(v6 + 16) + 1552;
      v107 = 1;
      do
      {
        v108 = 0;
        v109 = 17 * v105;
        v110 = v107;
        v111 = v7 + 20120 + 68 * v105;
        do
        {
          *(_DWORD *)(v106 + 4 * v109 + v108) = *(_DWORD *)(v111 + v108);
          v108 += 4;
        }
        while (v108 != 68);
        v107 = 0;
        v105 = 1;
      }
      while ((v110 & 1) != 0);
      PacketBlock = Connection::readPacketBlock(*(_QWORD *)(v7 + 188016), (uint64_t)v129, 0x1D4C0u);
      if (LODWORD(v129[0]) != v128)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v116 = AVE_Log_CheckConsole(3u) == 0;
          v117 = AVE_GetCurrTime();
          v118 = AVE_Log_GetLevelStr(4);
          if (!v116)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v117, 3, v118, "AVE_USL_Drv_Prepare", 715, "status.counter == counter");
            v117 = AVE_GetCurrTime();
            v118 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v117, 3, v118, "AVE_USL_Drv_Prepare", 715, "status.counter == counter");
        }
        goto LABEL_146;
      }
      if (LODWORD(v131[0]))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v113 = AVE_Log_CheckConsole(3u) == 0;
          v114 = AVE_GetCurrTime();
          v115 = AVE_Log_GetLevelStr(4);
          if (!v113)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v114, 3, v115, "AVE_USL_Drv_Prepare", 716, "status.errorCode == 0", LODWORD(v131[0]));
            v114 = AVE_GetCurrTime();
            v115 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v114, 3, v115, "AVE_USL_Drv_Prepare", 716, "status.errorCode == 0", LODWORD(v131[0]));
        }
        goto LABEL_146;
      }
      if (PacketBlock)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v123 = AVE_Log_CheckConsole(3u) == 0;
          v124 = AVE_GetCurrTime();
          v125 = AVE_Log_GetLevelStr(4);
          if (!v123)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v124, 3, v125, "AVE_USL_Drv_Prepare", 717, "res == 0");
            v124 = AVE_GetCurrTime();
            v125 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v124, 3, v125, "AVE_USL_Drv_Prepare", 717, "res == 0");
        }
        goto LABEL_146;
      }
      *(_BYTE *)(v7 + 9) = 1;
    }
    if ((_DWORD)v31 == -1003 || !(_DWORD)v31)
      goto LABEL_166;
    goto LABEL_44;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v65 = AVE_Log_CheckConsole(3u) == 0;
    v66 = AVE_GetCurrTime();
    v67 = AVE_Log_GetLevelStr(4);
    if (!v65)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v66, 3, v67, "AVE_USL_Drv_Prepare", 665, "res == 0");
      v66 = AVE_GetCurrTime();
      v67 = AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v66, 3, v67, "AVE_USL_Drv_Prepare", 665, "res == 0");
  }
LABEL_146:
  v31 = 4294966296;
LABEL_44:
  v129[0] = *(_QWORD *)(v6 + 136);
  AVE_USL_Drv_Stop(v7, (uint64_t *)v129, 1);
  v32 = *(_QWORD *)(v6 + 16);
  if (v32)
    *(_BYTE *)(v32 + 134) = 0;
LABEL_166:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v119 = AVE_Log_CheckConsole(0x28u) == 0;
    v120 = AVE_GetCurrTime();
    v121 = AVE_Log_GetLevelStr(7);
    if (!v119)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d\n", v120, 40, v121, *(_DWORD *)(v7 + 12), v31);
      v120 = AVE_GetCurrTime();
      v121 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Prepare F %d %d", v120, 40, v121, *(_DWORD *)(v7 + 12), v31);
  }
  return v31;
}

void sub_1B55A2FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1020C40ADC61684);
  _Unwind_Resume(a1);
}

void Connection::Connection(Connection *this, int a2)
{
  int v4;

  pthread_mutex_init((pthread_mutex_t *)this, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  if ((a2 - 129) >= 0xFFFFFF80)
    v4 = a2;
  else
    v4 = 128;
  *((_DWORD *)this + 48) = v4;
  *((_DWORD *)this + 49) = v4;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 27) = operator new[]();
}

uint64_t Connection::dropLastPacketBlock(pthread_mutex_t *this)
{
  int v2;
  int sig_high;

  pthread_mutex_lock(this);
  v2 = *(_DWORD *)this[3].__opaque;
  if (v2)
  {
    *(_DWORD *)this[3].__opaque = v2 - 1;
    sig_high = *(_DWORD *)&this[3].__opaque[8];
    if (!sig_high)
      sig_high = HIDWORD(this[3].__sig);
    *(_DWORD *)&this[3].__opaque[8] = sig_high - 1;
  }
  pthread_mutex_unlock(this);
  return 0;
}

uint64_t Connection::readPacketBlock(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  while (!*(_DWORD *)(a1 + 200))
  {
    gettimeofday((timeval *)(a1 + 176), 0);
    v6 = 1000000 * (a3 % 0x3E8) + 1000 * *(_DWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 176) + a3 / 0x3E8uLL;
    *(_QWORD *)(a1 + 168) = v6;
    if (pthread_cond_timedwait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1, (const timespec *)(a1 + 160)) == 60)
    {
      v7 = 0xFFFFFFFFLL;
      goto LABEL_10;
    }
  }
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 216) + 40 * *(unsigned int *)(a1 + 204);
  v9 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v8 + 32);
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v10;
  v12 = *(_DWORD *)(a1 + 200);
  v11 = *(_DWORD *)(a1 + 204);
  v13 = *(_DWORD *)(a1 + 196);
  if (v11 + 1 < v13)
    v14 = v11 + 1;
  else
    v14 = 0;
  *(_DWORD *)(a1 + 200) = v12 - 1;
  *(_DWORD *)(a1 + 204) = v14;
  if (v12 == v13)
  {
    pthread_cond_signal((pthread_cond_t *)(a1 + 112));
    v7 = 0;
  }
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t AVE_USL_Drv_Stop(uint64_t a1, uint64_t *a2, int a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  unint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  int v33;
  int v34;
  int PacketBlock;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  __uint64_t v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  _OWORD v46[2];
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;

  v52 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v6 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.\n", CurrTime, 40, LevelStr);
      v9 = AVE_GetCurrTime();
      v43 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", v9, 40, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Stop.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    v51 = *a2;
    if (AVE_USL_Drv_Complete(a1, &v51) == -1004 && !*(_BYTE *)(a1 + 9))
    {
      v23 = 4294966292;
    }
    else
    {
      v47 = 0;
      AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v47);
      AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v47, &v52);
      v10 = v47;
      if (!v47)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v18 = AVE_Log_CheckConsole(3u);
          v19 = AVE_GetCurrTime();
          v20 = AVE_Log_GetLevelStr(4);
          if (v18)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Stop", 1170, "Frame");
            v21 = AVE_GetCurrTime();
            v45 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v45, "AVE_USL_Drv_Stop", 1170, "Frame");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Stop", 1170, "Frame");
          }
        }
        v23 = 4294966293;
        goto LABEL_34;
      }
      bzero((void *)(v47 + 8), 0x10718uLL);
      *(_DWORD *)v10 = v52;
      *(_DWORD *)(v10 + 4) = 6;
      *(_DWORD *)(v10 + 160) = *(_DWORD *)(a1 + 12);
      *(_QWORD *)(v10 + 27672) = *a2;
      *(_BYTE *)(v10 + 8) = *(_QWORD *)(a1 + 188120) != 0;
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(a1 + 188128);
      LODWORD(v47) = v52;
      if (Connection::writePacketBlock(*(_QWORD *)(a1 + 188024), (__int128 *)&v47))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v11 = AVE_Log_CheckConsole(3u);
          v12 = AVE_GetCurrTime();
          v13 = AVE_Log_GetLevelStr(4);
          if (v11)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v12, 3, v13, "AVE_USL_Drv_Stop", 1192, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
      }
      else
      {
        v50 = 0;
        v49 = 0u;
        v48 = 0u;
        memset(v46, 0, sizeof(v46));
        v47 = *(unsigned int *)(a1 + 188112);
        LODWORD(v50) = v52;
        LODWORD(v49) = 118000;
        *((_QWORD *)&v49 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
        v22 = AVE_DAL::UCStop(*(const void ***)a1, &v47, v46);
        if ((_DWORD)v22)
        {
          v23 = v22;
          v24 = *(_QWORD *)(a1 + 188024);
          pthread_mutex_lock((pthread_mutex_t *)v24);
          v25 = *(_DWORD *)(v24 + 200);
          if (v25)
          {
            *(_DWORD *)(v24 + 200) = v25 - 1;
            v26 = *(_DWORD *)(v24 + 208);
            if (!v26)
              v26 = *(_DWORD *)(v24 + 196);
            *(_DWORD *)(v24 + 208) = v26 - 1;
          }
          pthread_mutex_unlock((pthread_mutex_t *)v24);
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            v27 = AVE_Log_CheckConsole(0x28u);
            v28 = AVE_GetCurrTime();
            v29 = AVE_Log_GetLevelStr(4);
            if (v27)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v28, 40, v29, "AVE_USL_Drv_Stop", 1209, "ret == 0", v23);
              v28 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v28);
          }
          goto LABEL_34;
        }
        PacketBlock = Connection::readPacketBlock(*(_QWORD *)(a1 + 188016), (uint64_t)&v47, 0x1D4C0u);
        if ((_DWORD)v47 == v52)
        {
          if (!PacketBlock)
          {
            v23 = 0;
            goto LABEL_34;
          }
          if (AVE_Log_CheckLevel(3u, 4))
          {
            v37 = AVE_Log_CheckConsole(3u);
            v38 = AVE_GetCurrTime();
            v39 = AVE_Log_GetLevelStr(4);
            if (v37)
            {
              printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v38, 3, v39, "AVE_USL_Drv_Stop", 1221, "res == 0");
              AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
          }
        }
        else if (AVE_Log_CheckLevel(3u, 4))
        {
          v40 = AVE_Log_CheckConsole(3u);
          v41 = AVE_GetCurrTime();
          v42 = AVE_Log_GetLevelStr(4);
          if (v40)
          {
            printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v41, 3, v42, "AVE_USL_Drv_Stop", 1220, "status.counter == counter");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
        }
      }
      v23 = 4294966296;
    }
LABEL_34:
    if (a3)
      AppleAVEVA_CleanMem(a1);
    *(_WORD *)(a1 + 8) = 0;
    goto LABEL_37;
  }
  if (AVE_Log_CheckLevel(3u, 4))
  {
    v14 = AVE_Log_CheckConsole(3u);
    v15 = AVE_GetCurrTime();
    v16 = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Stop", 1147, "pDriverInstance");
      v17 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v17, 3, v44, "AVE_USL_Drv_Stop", 1147, "pDriverInstance");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Stop, Null pointer for driver data.", v15, 3, v16, "AVE_USL_Drv_Stop", 1147, "pDriverInstance");
    }
  }
  v23 = 4294966295;
LABEL_37:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v30 = AVE_Log_CheckConsole(0x28u);
    v31 = AVE_GetCurrTime();
    v32 = AVE_Log_GetLevelStr(7);
    if (v30)
    {
      if (a1)
        v33 = *(_DWORD *)(a1 + 12);
      else
        v33 = 0;
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d\n", v31, 40, v32, v33, v23);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(7);
      if (a1)
        goto LABEL_45;
    }
    else if (a1)
    {
LABEL_45:
      v34 = *(_DWORD *)(a1 + 12);
      goto LABEL_46;
    }
    v34 = 0;
LABEL_46:
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Stop F %d %d", v31, 40, v32, v34, v23);
  }
  return v23;
}

uint64_t AVE_USL_Drv_Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, void *a11)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __uint64_t CurrTime;
  const char *LevelStr;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  __uint64_t v46;
  const char *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  int v71;
  __uint64_t v72;
  const char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  const void *v79;
  const void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  __uint64_t v85;
  const char *v86;
  int v87;
  __uint64_t v88;
  const char *v89;
  int v90;
  __uint64_t v91;
  const char *v92;
  __int128 v93;
  const void *v94;
  int v95;
  int v96;
  __uint64_t v97;
  const char *v98;
  Connection *v99;
  Connection *v100;
  unint64_t v101;
  __int128 v102;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  BOOL v108;
  __uint64_t v109;
  const char *v110;
  int v111;
  __uint64_t v112;
  const char *v113;
  int v114;
  int v115;
  uint64_t v116;
  int H264VideoEncoderFrameReceiver;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  __uint64_t v125;
  const char *v126;
  int v127;
  __uint64_t v128;
  const char *v129;
  BOOL v130;
  __uint64_t v131;
  const char *v132;
  BOOL v133;
  __uint64_t v134;
  const char *v135;
  const char *v136;
  int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  int v143;
  int v144;
  BOOL v145;
  __uint64_t v146;
  const char *v147;
  BOOL v148;
  __uint64_t v149;
  const char *v150;
  int PacketBlock;
  BOOL v153;
  __uint64_t v154;
  const char *v155;
  BOOL v156;
  __uint64_t v157;
  const char *v158;
  BOOL v159;
  __uint64_t v160;
  const char *v161;
  BOOL v162;
  __uint64_t v163;
  const char *v164;
  BOOL v165;
  __uint64_t v166;
  const char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  unint64_t v174[33];
  _BYTE v175[32];
  unsigned int v176;
  _BYTE v177[680];
  int v178;
  _QWORD v179[3];
  int v180;
  uint64_t v181;
  char v182[128];
  int v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  int v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  int v193;
  _BYTE v194[187888];
  int v195;
  uint64_t v196;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = v11;
  v196 = *MEMORY[0x1E0C80C00];
  v178 = -1;
  bzero(v179, 0x2DFB8uLL);
  bzero(v175, 0x2D0uLL);
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v27 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v27)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Start.\n", CurrTime, 40, LevelStr);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Start.", CurrTime, 40, LevelStr);
  }
  if (!v26)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v36 = AVE_Log_CheckConsole(3u);
      v37 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(4);
      if (v36)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.\n", v37, 3, v38, "AVE_USL_Drv_Start", 777, "pDriverInstance");
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for driver data.", v37, 3, v38, "AVE_USL_Drv_Start", 777, "pDriverInstance");
    }
    goto LABEL_174;
  }
  if (!v25)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v39 = AVE_Log_CheckConsole(3u);
      v40 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(4);
      if (v39)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.\n", v40, 3, v41, "AVE_USL_Drv_Start", 778, "pInitSettings");
        v40 = AVE_GetCurrTime();
        v41 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for AppleAVEVA_InitSettings.", v40, 3, v41, "AVE_USL_Drv_Start", 778, "pInitSettings");
    }
    goto LABEL_174;
  }
  v30 = *(_QWORD **)v25;
  if (!*(_QWORD *)v25)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v42 = AVE_Log_CheckConsole(3u);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.\n", v43, 3, v44, "AVE_USL_Drv_Start", 780, "pInitSettings->pClientParams");
        v43 = AVE_GetCurrTime();
        v44 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pClientParams.", v43, 3, v44, "AVE_USL_Drv_Start", 780, "pInitSettings->pClientParams");
    }
    goto LABEL_174;
  }
  if (!*(_QWORD *)(v25 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v45 = AVE_Log_CheckConsole(3u);
      v46 = AVE_GetCurrTime();
      v47 = AVE_Log_GetLevelStr(4);
      if (v45)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.\n", v46, 3, v47, "AVE_USL_Drv_Start", 781, "pInitSettings->pVideoParams");
        v46 = AVE_GetCurrTime();
        v47 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParams.", v46, 3, v47, "AVE_USL_Drv_Start", 781, "pInitSettings->pVideoParams");
    }
    goto LABEL_174;
  }
  v31 = *(_QWORD *)(v25 + 16);
  if (!v31)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v48 = AVE_Log_CheckConsole(3u);
      v49 = AVE_GetCurrTime();
      v50 = AVE_Log_GetLevelStr(4);
      if (v48)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.\n", v49, 3, v50, "AVE_USL_Drv_Start", 782, "pInitSettings->pVideoParamsDriver");
        v49 = AVE_GetCurrTime();
        v50 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pVideoParamsDriver.", v49, 3, v50, "AVE_USL_Drv_Start", 782, "pInitSettings->pVideoParamsDriver");
    }
    goto LABEL_174;
  }
  if (!*(_QWORD *)(v25 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v51 = AVE_Log_CheckConsole(3u);
      v52 = AVE_GetCurrTime();
      v53 = AVE_Log_GetLevelStr(4);
      if (v51)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.\n", v52, 3, v53, "AVE_USL_Drv_Start", 783, "pInitSettings->pRCParams");
        v52 = AVE_GetCurrTime();
        v53 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for pRCParams.", v52, 3, v53, "AVE_USL_Drv_Start", 783, "pInitSettings->pRCParams");
    }
    goto LABEL_174;
  }
  v32 = *(_DWORD *)(v31 + 120);
  if (v32 == 1)
  {
    if (!*(_QWORD *)(v25 + 80))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v62 = AVE_Log_CheckConsole(3u);
        v63 = AVE_GetCurrTime();
        v64 = AVE_Log_GetLevelStr(4);
        if (v62)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.\n", v63, 3, v64, "AVE_USL_Drv_Start", 797, "pInitSettings->VPSHevcParams");
          v63 = AVE_GetCurrTime();
          v64 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for VPSHevcParams.", v63, 3, v64, "AVE_USL_Drv_Start", 797, "pInitSettings->VPSHevcParams");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 88))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v68 = AVE_Log_CheckConsole(3u);
        v69 = AVE_GetCurrTime();
        v70 = AVE_Log_GetLevelStr(4);
        if (v68)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.\n", v69, 3, v70, "AVE_USL_Drv_Start", 798, "pInitSettings->psaHEVC_SPS[0]");
          v69 = AVE_GetCurrTime();
          v70 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSHevcParams.", v69, 3, v70, "AVE_USL_Drv_Start", 798, "pInitSettings->psaHEVC_SPS[0]");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 104))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v71 = AVE_Log_CheckConsole(3u);
        v72 = AVE_GetCurrTime();
        v73 = AVE_Log_GetLevelStr(4);
        if (v71)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.\n", v72, 3, v73, "AVE_USL_Drv_Start", 799, "pInitSettings->psaHEVC_PPS[0]");
          v72 = AVE_GetCurrTime();
          v73 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSHevcParams.", v72, 3, v73, "AVE_USL_Drv_Start", 799, "pInitSettings->psaHEVC_PPS[0]");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 120))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v90 = AVE_Log_CheckConsole(3u);
        v91 = AVE_GetCurrTime();
        v92 = AVE_Log_GetLevelStr(4);
        if (v90)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.\n", v91, 3, v92, "AVE_USL_Drv_Start", 800, "pInitSettings->SHHevcParams");
          v91 = AVE_GetCurrTime();
          v92 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHHevcParams.", v91, 3, v92, "AVE_USL_Drv_Start", 800, "pInitSettings->SHHevcParams");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 128))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v96 = AVE_Log_CheckConsole(3u);
        v97 = AVE_GetCurrTime();
        v98 = AVE_Log_GetLevelStr(4);
        if (v96)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.\n", v97, 3, v98, "AVE_USL_Drv_Start", 801, "pInitSettings->RPSHevcParams");
          v97 = AVE_GetCurrTime();
          v98 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for RPSHevcParams.", v97, 3, v98, "AVE_USL_Drv_Start", 801, "pInitSettings->RPSHevcParams");
      }
      goto LABEL_174;
    }
  }
  else
  {
    if (v32)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v56 = AVE_Log_CheckConsole(3u);
        v57 = AVE_GetCurrTime();
        v58 = AVE_Log_GetLevelStr(4);
        if (v56)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v57, 3, v58, "AVE_USL_Drv_Start", 805, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
          v57 = AVE_GetCurrTime();
          v58 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v57, 3, v58, "AVE_USL_Drv_Start", 805, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 56))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v59 = AVE_Log_CheckConsole(3u);
        v60 = AVE_GetCurrTime();
        v61 = AVE_Log_GetLevelStr(4);
        if (v59)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.\n", v60, 3, v61, "AVE_USL_Drv_Start", 789, "pInitSettings->SPSParams");
          v60 = AVE_GetCurrTime();
          v61 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SPSParams.", v60, 3, v61, "AVE_USL_Drv_Start", 789, "pInitSettings->SPSParams");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 64))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v65 = AVE_Log_CheckConsole(3u);
        v66 = AVE_GetCurrTime();
        v67 = AVE_Log_GetLevelStr(4);
        if (v65)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.\n", v66, 3, v67, "AVE_USL_Drv_Start", 790, "pInitSettings->PPSParams");
          v66 = AVE_GetCurrTime();
          v67 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for PPSParams.", v66, 3, v67, "AVE_USL_Drv_Start", 790, "pInitSettings->PPSParams");
      }
      goto LABEL_174;
    }
    if (!*(_QWORD *)(v25 + 72))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v33 = AVE_Log_CheckConsole(3u);
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
        if (v33)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.\n", v34, 3, v35, "AVE_USL_Drv_Start", 791, "pInitSettings->SHParams");
          v34 = AVE_GetCurrTime();
          v35 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, Null pointer for SHParams.", v34, 3, v35, "AVE_USL_Drv_Start", 791, "pInitSettings->SHParams");
      }
LABEL_174:
      v83 = 4294966295;
      goto LABEL_175;
    }
  }
  v54 = v26 + 188008;
  *(_QWORD *)(v26 + 188120) = v13;
  *(_QWORD *)(v26 + 1800) = *v30;
  v171 = v26 + 1808;
  memcpy((void *)(v26 + 1808), *(const void **)(v25 + 8), 0x4178uLL);
  v170 = v26 + 18568;
  memcpy((void *)(v26 + 18568), *(const void **)(v25 + 16), 0x6A8uLL);
  memcpy((void *)(v26 + 120), *(const void **)(v25 + 24), 0x690uLL);
  v55 = *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120);
  if (v55 == 1)
  {
    v168 = v26 + 188008;
    v169 = v26 + 120;
    v172 = v25;
    memcpy((void *)(v26 + 24972), *(const void **)(v25 + 80), 0x140DCuLL);
    v74 = 0;
    v75 = 1;
    do
    {
      v76 = v26;
      v77 = v75;
      v78 = v172 + 8 * v74;
      v79 = *(const void **)(v78 + 88);
      if (v79)
        memcpy((void *)(v76 + 7924 * v74 + 107112), v79, 0x1EF4uLL);
      v80 = *(const void **)(v78 + 104);
      v26 = v76;
      if (v80)
        memcpy((void *)(v76 + 9636 * v74 + 122960), v80, 0x25A4uLL);
      v75 = 0;
      v74 = 1;
    }
    while ((v77 & 1) != 0);
    v81 = (void *)(v76 + 142232);
    v25 = v172;
    memcpy(v81, *(const void **)(v172 + 120), 0x54F8uLL);
    memcpy((void *)(v26 + 163984), *(const void **)(v172 + 128), 0x5DD8uLL);
    v54 = v168;
  }
  else
  {
    if (v55)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v87 = AVE_Log_CheckConsole(3u);
        v88 = AVE_GetCurrTime();
        v89 = AVE_Log_GetLevelStr(4);
        if (v87)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v88, 3, v89, "AVE_USL_Drv_Start", 850, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
          v88 = AVE_GetCurrTime();
          v89 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v88, 3, v89, "AVE_USL_Drv_Start", 850, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
      }
      goto LABEL_174;
    }
    v169 = v26 + 120;
    memcpy((void *)(v26 + 20272), *(const void **)(v25 + 56), 0x6ACuLL);
    memcpy((void *)(v26 + 21980), *(const void **)(v25 + 64), 0x184uLL);
    memcpy((void *)(v26 + 22368), *(const void **)(v25 + 72), 0xA2CuLL);
  }
  *(_QWORD *)(v54 + 128) = *(_QWORD *)(v25 + 48);
  v82 = AVE_USL_CreateInSurfaces((const void *)(v26 + 16), *(_DWORD *)(v54 + 104), (const void *)(v26 + 64));
  if ((_DWORD)v82)
  {
    v83 = v82;
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      v84 = AVE_Log_CheckConsole(0x28u);
      v85 = AVE_GetCurrTime();
      v86 = AVE_Log_GetLevelStr(4);
      if (v84)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v85, 40, v86, "AVE_USL_Drv_Start", 861, "ret == 0", *(_DWORD *)(v54 + 104), v83);
        v85 = AVE_GetCurrTime();
        v86 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v85, 40, v86, "AVE_USL_Drv_Start", 861, "ret == 0", *(_DWORD *)(v54 + 104), v83);
    }
    goto LABEL_175;
  }
  if (*(_BYTE *)(v26 + 18702))
  {
    memset(&v174[9], 0, 184);
    memset(&v174[5], 0, 32);
    v174[0] = *(_QWORD *)v26;
    *(int8x16_t *)&v174[1] = vextq_s8(*(int8x16_t *)(v54 + 8), *(int8x16_t *)(v54 + 8), 8uLL);
    v174[3] = v21;
    v174[4] = v19;
    v174[9] = v17;
    if (v23)
    {
      v93 = v23[1];
      *(_OWORD *)&v174[5] = *v23;
      *(_OWORD *)&v174[7] = v93;
    }
    v174[10] = v26 + 1800;
    v174[11] = v171;
    v94 = (const void *)v169;
    v174[12] = v170;
    v174[13] = v169;
    *(_OWORD *)&v174[14] = *(_OWORD *)(v25 + 32);
    v95 = *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120);
    if (v95 == 1)
    {
      v173 = (_BYTE *)(v26 + 18702);
      memset(&v174[16], 0, 24);
      v174[19] = v26 + 24972;
      v174[20] = v26 + 107112;
      v174[21] = v26 + 115036;
      v174[22] = v26 + 122960;
      v174[23] = v26 + 132596;
      v174[24] = v26 + 142232;
      v174[25] = v26 + 163984;
    }
    else
    {
      if (v95)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v111 = AVE_Log_CheckConsole(3u);
          v112 = AVE_GetCurrTime();
          v113 = AVE_Log_GetLevelStr(4);
          if (v111)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v112, 3, v113, "AVE_USL_Drv_Start", 1004, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
            v112 = AVE_GetCurrTime();
            v113 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v112, 3, v113, "AVE_USL_Drv_Start", 1004, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
        }
        goto LABEL_174;
      }
      v173 = (_BYTE *)(v26 + 18702);
      v174[16] = v26 + 20272;
      v174[17] = v26 + 21980;
      v174[18] = v26 + 22368;
    }
    LOBYTE(v174[26]) = v15;
    v104 = *(_DWORD *)(v54 + 96);
    v105 = *(_DWORD *)(v54 + 108);
    HIDWORD(v174[27]) = *(_DWORD *)(v54 + 104);
    LODWORD(v174[27]) = v104;
    HIDWORD(v174[26]) = v105;
    v106 = *(_QWORD *)(v54 + 128);
    v174[28] = v13;
    v174[30] = v106;
    v107 = v54;
    if (H264VideoEncoderFrameReceiver::UpdateSettings(*(_QWORD *)v54, (uint64_t)v174))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v108 = AVE_Log_CheckConsole(3u) == 0;
        v109 = AVE_GetCurrTime();
        v110 = AVE_Log_GetLevelStr(4);
        if (!v108)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v109, 3, v110, "AVE_USL_Drv_Start", 1017, "ret == 0");
          v109 = AVE_GetCurrTime();
          v110 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v109, 3, v110, "AVE_USL_Drv_Start", 1017, "ret == 0");
      }
LABEL_198:
      v83 = 4294966293;
      goto LABEL_175;
    }
  }
  else
  {
    v173 = (_BYTE *)(v26 + 18702);
    memset(v174, 0, 256);
    v99 = (Connection *)operator new();
    Connection::Connection(v99, 32);
    *(_QWORD *)(v54 + 16) = v99;
    v100 = (Connection *)operator new();
    Connection::Connection(v100, 32);
    *(_QWORD *)(v54 + 8) = v100;
    v101 = *(_QWORD *)(v54 + 16);
    v174[0] = *(_QWORD *)v26;
    v174[1] = v101;
    v174[2] = (unint64_t)v100;
    v174[3] = v21;
    v174[4] = v19;
    v174[9] = v17;
    if (v23)
    {
      v102 = v23[1];
      *(_OWORD *)&v174[5] = *v23;
      *(_OWORD *)&v174[7] = v102;
    }
    v174[10] = v26 + 1800;
    v94 = (const void *)v169;
    v174[11] = v171;
    v174[12] = v170;
    v174[13] = v169;
    *(_OWORD *)&v174[14] = *(_OWORD *)(v25 + 32);
    v103 = *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120);
    if (v103 == 1)
    {
      memset(&v174[16], 0, 24);
      v174[19] = v26 + 24972;
      v174[20] = v26 + 107112;
      v174[21] = v26 + 115036;
      v174[22] = v26 + 122960;
      v174[23] = v26 + 132596;
      v174[24] = v26 + 142232;
      v174[25] = v26 + 163984;
    }
    else
    {
      if (v103)
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v127 = AVE_Log_CheckConsole(3u);
          v128 = AVE_GetCurrTime();
          v129 = AVE_Log_GetLevelStr(4);
          if (v127)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d\n", v128, 3, v129, "AVE_USL_Drv_Start", 928, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
            v128 = AVE_GetCurrTime();
            v129 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Start, codec type not recognized = %d", v128, 3, v129, "AVE_USL_Drv_Start", 928, "false", *(_DWORD *)(*(_QWORD *)(v25 + 16) + 120));
        }
        goto LABEL_174;
      }
      v174[16] = v26 + 20272;
      v174[17] = v26 + 21980;
      v174[18] = v26 + 22368;
    }
    LOBYTE(v174[26]) = v15;
    v114 = *(_DWORD *)(v54 + 96);
    v115 = *(_DWORD *)(v54 + 108);
    HIDWORD(v174[27]) = *(_DWORD *)(v54 + 104);
    LODWORD(v174[27]) = v114;
    HIDWORD(v174[26]) = v115;
    v116 = voucher_copy();
    v174[28] = v13;
    LOBYTE(v174[29]) = 0;
    v174[30] = *(_QWORD *)(v54 + 128);
    v174[31] = v116;
    v107 = v54;
    H264VideoEncoderFrameReceiver = CreateH264VideoEncoderFrameReceiver((_QWORD *)v54, (uint64_t)v174, (pthread_attr_t *)(v26 + 188032), (pthread_t *)(v26 + 188096));
    os_release((void *)v174[31]);
    if (!*(_QWORD *)v107 || H264VideoEncoderFrameReceiver)
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v130 = AVE_Log_CheckConsole(3u) == 0;
        v131 = AVE_GetCurrTime();
        v132 = AVE_Log_GetLevelStr(4);
        if (!v130)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.\n", v131, 3, v132, "AVE_USL_Drv_Start", 945, "pDriverInstance->FrameReceiver && ret == 0");
          v131 = AVE_GetCurrTime();
          v132 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: CreateH264VideoEncoderFrameReceiver failed.", v131, 3, v132, "AVE_USL_Drv_Start", 945, "pDriverInstance->FrameReceiver && ret == 0");
      }
      goto LABEL_198;
    }
    *(_BYTE *)(*(_QWORD *)(v25 + 16) + 134) = 1;
    *v173 = 1;
  }
  v174[0] = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)v26, 67360, v174);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)v26, (const void *)v174[0], &v178);
  v118 = v174[0];
  if (!v174[0])
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v133 = AVE_Log_CheckConsole(3u) == 0;
      v134 = AVE_GetCurrTime();
      v135 = AVE_Log_GetLevelStr(4);
      if (!v133)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v134, 3, v135, "AVE_USL_Drv_Start", 1030, "Frame");
        v134 = AVE_GetCurrTime();
        v135 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v134, 3, v135, "AVE_USL_Drv_Start", 1030, "Frame");
    }
    goto LABEL_198;
  }
  bzero((void *)(v174[0] + 8), 0x10718uLL);
  *(_DWORD *)v118 = v178;
  *(_DWORD *)(v118 + 4) = 5;
  *(_DWORD *)(v118 + 160) = *(_DWORD *)(v26 + 12);
  *(_QWORD *)(v118 + 27672) = *(_QWORD *)(v25 + 136);
  *(_BYTE *)(v118 + 8) = *(_QWORD *)(v107 + 112) != 0;
  *(_DWORD *)(v118 + 12) = *(_DWORD *)(v107 + 120);
  LODWORD(v174[0]) = v178;
  if (Connection::writePacketBlock(*(_QWORD *)(v107 + 16), (__int128 *)v174))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v124 = AVE_Log_CheckConsole(3u) == 0;
      v125 = AVE_GetCurrTime();
      v126 = AVE_Log_GetLevelStr(4);
      if (!v124)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v125, 3, v126, "AVE_USL_Drv_Start", 1054, "res == 0");
        v125 = AVE_GetCurrTime();
        v126 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v125, 3, v126, "AVE_USL_Drv_Start", 1054, "res == 0");
    }
LABEL_183:
    v83 = 4294966296;
    goto LABEL_184;
  }
  LOBYTE(v136) = a9;
  v179[0] = *(unsigned int *)(v107 + 104);
  if (!a9)
    v136 = "";
  AVE_SNPrintf(v182, 128, "%s", v119, v120, v121, v122, v123, (char)v136);
  v195 = v178;
  if (v173[75])
    v137 = 2;
  else
    v137 = 1;
  v138 = *(_OWORD *)(v26 + 20188);
  v139 = *(_OWORD *)(v26 + 20204);
  v140 = *(_OWORD *)(v26 + 20236);
  v191 = *(_OWORD *)(v26 + 20220);
  v192 = v140;
  v189 = v138;
  v190 = v139;
  v141 = *(_OWORD *)(v26 + 20120);
  v185 = *(_OWORD *)(v26 + 20136);
  v142 = *(_OWORD *)(v26 + 20168);
  v186 = *(_OWORD *)(v26 + 20152);
  v187 = v142;
  v143 = *(_DWORD *)(v26 + 20184);
  v184 = v141;
  v144 = *(_DWORD *)(v26 + 20252);
  v188 = v143;
  v193 = v144;
  v183 = v137;
  v180 = 118000;
  v181 = (uint64_t)AVE_GetCurrTime() / 1000;
  memcpy(v194, v94, sizeof(v194));
  *(_QWORD *)(v118 + 27696) = AVE_GetCurrTime();
  v83 = AVE_DAL::UCStart(*(const void ***)v26, v179, v175);
  if ((_DWORD)v83)
  {
    Connection::dropLastPacketBlock(*(pthread_mutex_t **)(v107 + 16));
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      v145 = AVE_Log_CheckConsole(0x28u) == 0;
      v146 = AVE_GetCurrTime();
      v147 = AVE_Log_GetLevelStr(4);
      if (!v145)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to start %d\n", v146, 40, v147, "AVE_USL_Drv_Start", 1082, "ret == 0", v83);
        v146 = AVE_GetCurrTime();
        v147 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %d", v146, 40, v147, "AVE_USL_Drv_Start", 1082, "ret == 0", v83);
    }
    if ((_DWORD)v83 == -1003)
      goto LABEL_198;
LABEL_184:
    v174[0] = *(_QWORD *)(v25 + 136);
    AVE_USL_Drv_Stop(v26, (uint64_t *)v174, 0);
    goto LABEL_175;
  }
  PacketBlock = Connection::readPacketBlock(*(_QWORD *)(v107 + 8), (uint64_t)v174, 0x1D4C0u);
  if (LODWORD(v174[0]) != v178)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v156 = AVE_Log_CheckConsole(3u) == 0;
      v157 = AVE_GetCurrTime();
      v158 = AVE_Log_GetLevelStr(4);
      if (!v156)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.\n", v157, 3, v158, "AVE_USL_Drv_Start", 1093, "status.counter == counter");
        v157 = AVE_GetCurrTime();
        v158 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter != counter.", v157, 3, v158, "AVE_USL_Drv_Start", 1093, "status.counter == counter");
    }
    goto LABEL_183;
  }
  if (LODWORD(v174[4]))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v153 = AVE_Log_CheckConsole(3u) == 0;
      v154 = AVE_GetCurrTime();
      v155 = AVE_Log_GetLevelStr(4);
      if (!v153)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.\n", v154, 3, v155, "AVE_USL_Drv_Start", 1094, "status.errorCode == 0", LODWORD(v174[4]));
        v154 = AVE_GetCurrTime();
        v155 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: errorCode = 0x%08x.", v154, 3, v155, "AVE_USL_Drv_Start", 1094, "status.errorCode == 0", LODWORD(v174[4]));
    }
    goto LABEL_183;
  }
  if (PacketBlock)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v159 = AVE_Log_CheckConsole(3u) == 0;
      v160 = AVE_GetCurrTime();
      v161 = AVE_Log_GetLevelStr(4);
      if (!v159)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v160, 3, v161, "AVE_USL_Drv_Start", 1095, "res == 0");
        v160 = AVE_GetCurrTime();
        v161 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread", v160, 3, v161, "AVE_USL_Drv_Start", 1095, "res == 0");
    }
    goto LABEL_183;
  }
  if (Connection::connectionSize(*(pthread_mutex_t **)(v107 + 16), v176))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v162 = AVE_Log_CheckConsole(3u) == 0;
      v163 = AVE_GetCurrTime();
      v164 = AVE_Log_GetLevelStr(4);
      if (!v162)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d\n", v163, 3, v164, "AVE_USL_Drv_Start", 1100, "ret == 0", v176);
        v163 = AVE_GetCurrTime();
        v164 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverInput connection size fail %d", v163, 3, v164, "AVE_USL_Drv_Start", 1100, "ret == 0", v176);
      goto LABEL_183;
    }
LABEL_217:
    v83 = 4294966296;
    goto LABEL_184;
  }
  if (Connection::connectionSize(*(pthread_mutex_t **)(v107 + 8), v176))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v165 = AVE_Log_CheckConsole(3u) == 0;
      v166 = AVE_GetCurrTime();
      v167 = AVE_Log_GetLevelStr(4);
      if (!v165)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d\n", v166, 3, v167, "AVE_USL_Drv_Start", 1102, "ret == 0", v176);
        v166 = AVE_GetCurrTime();
        v167 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Set FrameReceiverOutput connection size fail %d", v166, 3, v167, "AVE_USL_Drv_Start", 1102, "ret == 0", v176);
      goto LABEL_183;
    }
    goto LABEL_217;
  }
  if (a10)
    *a10 = v176;
  if (a11)
    memcpy(a11, v177, 0x2A8uLL);
  v83 = 0;
  *(_BYTE *)(v26 + 8) = 1;
LABEL_175:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v148 = AVE_Log_CheckConsole(0x28u) == 0;
    v149 = AVE_GetCurrTime();
    v150 = AVE_Log_GetLevelStr(7);
    if (!v148)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.\n", v149, 40, v150, v83);
      v149 = AVE_GetCurrTime();
      v150 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverInit err %d.", v149, 40, v150, v83);
  }
  return v83;
}

void sub_1B55A5B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1020C40ADC61684);
  _Unwind_Resume(a1);
}

uint64_t Connection::connectionSize(pthread_mutex_t *this, unsigned int a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v7;

  pthread_mutex_lock(this);
  if (*(_DWORD *)this[3].__opaque || LODWORD(this[3].__sig) < a2)
  {
    if (AVE_Log_CheckLevel(0x2Au, 4))
    {
      v4 = AVE_Log_CheckConsole(0x2Au);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: configure connection size fail %d %d %d %d\n", CurrTime, 42, LevelStr, *(_DWORD *)this[3].__opaque, LODWORD(this[3].__sig), HIDWORD(this[3].__sig), a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: configure connection size fail %d %d %d %d", CurrTime);
    }
    v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0;
    HIDWORD(this[3].__sig) = a2;
    *(_DWORD *)&this[3].__opaque[4] = 0;
    *(_DWORD *)&this[3].__opaque[8] = 0;
  }
  pthread_mutex_unlock(this);
  return v7;
}

uint64_t AVE_USL_Drv_Complete(uint64_t a1, _QWORD *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  unint64_t v8;
  pthread_mutex_t **v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  pthread_mutex_t *v33;
  int v34;
  uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int sig_high;
  unsigned int v42;
  int v43;
  __uint64_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v55 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.\n", CurrTime, 40, LevelStr);
      v7 = AVE_GetCurrTime();
      v46 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", v7, 40, v46);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeCompleteFrames.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      v17 = 4294966292;
      goto LABEL_33;
    }
    v51 = 0;
    AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v51);
    AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v51, &v55);
    v8 = v51;
    if (v51)
    {
      v9 = (pthread_mutex_t **)(a1 + 188016);
      bzero((void *)(v51 + 8), 0x10718uLL);
      *(_DWORD *)v8 = v55;
      *(_DWORD *)(v8 + 4) = 8;
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a1 + 12);
      *(_QWORD *)(v8 + 27672) = *a2;
      *(_BYTE *)(v8 + 8) = *(_QWORD *)(a1 + 188120) != 0;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a1 + 188128);
      LODWORD(v51) = v55;
      if (Connection::writePacketBlock(*(_QWORD *)(a1 + 188024), (__int128 *)&v51))
      {
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v10 = AVE_Log_CheckConsole(3u);
          v11 = AVE_GetCurrTime();
          v12 = AVE_Log_GetLevelStr(4);
          if (v10)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v11, 3, v12, "AVE_USL_Drv_Complete", 1287, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
        }
LABEL_30:
        v17 = 4294966296;
        goto LABEL_33;
      }
      v54 = 0;
      v52 = 0u;
      v53 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = *(unsigned int *)(a1 + 188112);
      LODWORD(v54) = v55;
      LODWORD(v53) = 118000;
      *((_QWORD *)&v53 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
      v22 = AVE_DAL::UCComplete(*(const void ***)a1, &v51, &v49);
      if (!(_DWORD)v22)
      {
        v33 = *v9;
        pthread_mutex_lock(*v9);
        while (1)
        {
          v34 = *(_DWORD *)v33[3].__opaque;
          if (v34)
            break;
          gettimeofday((timeval *)&v33[2].__opaque[40], 0);
          v35 = (1000 * *(_DWORD *)&v33[2].__opaque[48]);
          *(_QWORD *)&v33[2].__opaque[24] = *(_QWORD *)&v33[2].__opaque[40] + 120;
          *(_QWORD *)&v33[2].__opaque[32] = v35;
          if (pthread_cond_timedwait((pthread_cond_t *)&v33[1], v33, (const timespec *)&v33[2].__opaque[24]) == 60)
          {
            pthread_mutex_unlock(v33);
            if (AVE_Log_CheckLevel(3u, 4))
            {
              v36 = AVE_Log_CheckConsole(3u);
              v37 = AVE_GetCurrTime();
              v38 = AVE_Log_GetLevelStr(4);
              if (v36)
              {
                printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v37, 3, v38, "AVE_USL_Drv_Complete", 1316, "res == 0");
                AVE_GetCurrTime();
                AVE_Log_GetLevelStr(4);
              }
              syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
            }
            goto LABEL_30;
          }
        }
        v39 = *(_DWORD *)&v33[3].__opaque[4];
        v40 = *(unsigned int *)(*(_QWORD *)&v33[3].__opaque[16] + 40 * v39);
        sig_high = HIDWORD(v33[3].__sig);
        if (v39 + 1 < sig_high)
          v42 = v39 + 1;
        else
          v42 = 0;
        *(_DWORD *)v33[3].__opaque = v34 - 1;
        *(_DWORD *)&v33[3].__opaque[4] = v42;
        if (v34 == sig_high)
          pthread_cond_signal((pthread_cond_t *)&v33[1].__opaque[40]);
        pthread_mutex_unlock(v33);
        if ((_DWORD)v40 == v55)
        {
          v17 = 0;
          goto LABEL_33;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v43 = AVE_Log_CheckConsole(3u);
          v44 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(4);
          if (v43)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).\n", v44, 3, v45, "AVE_USL_Drv_Complete", 1315, "status.counter == counter", v40, v55);
            v44 = AVE_GetCurrTime();
            v45 = AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: status.counter (%d) != counter (%d).", v44, 3, v45, "AVE_USL_Drv_Complete", 1315, "status.counter == counter", v40, v55, v49, v50);
        }
        goto LABEL_30;
      }
      v17 = v22;
      v23 = *(_QWORD *)(a1 + 188024);
      pthread_mutex_lock((pthread_mutex_t *)v23);
      v24 = *(_DWORD *)(v23 + 200);
      if (v24)
      {
        *(_DWORD *)(v23 + 200) = v24 - 1;
        v25 = *(_DWORD *)(v23 + 208);
        if (!v25)
          v25 = *(_DWORD *)(v23 + 196);
        *(_DWORD *)(v23 + 208) = v25 - 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)v23);
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        v26 = AVE_Log_CheckConsole(0x28u);
        v27 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        if (v26)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %d\n", v27, 40, v28, "AVE_USL_Drv_Complete", 1304, "ret == 0", v17);
          v27 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %d", v27);
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v18 = AVE_Log_CheckConsole(3u);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v19, 3, v20, "AVE_USL_Drv_Complete", 1265, "Frame");
          v21 = AVE_GetCurrTime();
          v48 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v21, 3, v48, "AVE_USL_Drv_Complete", 1265, "Frame");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v19, 3, v20, "AVE_USL_Drv_Complete", 1265, "Frame");
        }
      }
      v17 = 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v13 = AVE_Log_CheckConsole(3u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Complete", 1253, "pDriverInstance");
        v16 = AVE_GetCurrTime();
        v47 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v16, 3, v47, "AVE_USL_Drv_Complete", 1253, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames, Null pointer for driver data.", v14, 3, v15, "AVE_USL_Drv_Complete", 1253, "pDriverInstance");
      }
    }
    v17 = 4294966295;
  }
LABEL_33:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v29 = AVE_Log_CheckConsole(0x28u);
    v30 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(7);
    if (v29)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d\n", v30, 40, v31, *(_DWORD *)(a1 + 12), v17);
      v30 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeCompleteFrames F %d %d", v30, 40, v31, *(_DWORD *)(a1 + 12), v17);
  }
  return v17;
}

uint64_t AVE_USL_Drv_Process(uint64_t a1, uint64_t a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  const void *v12;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  unint64_t v31;
  __IOSurface *IOSurface;
  __IOSurface *v33;
  __CVBuffer *v34;
  __IOSurface *v35;
  __int128 v36;
  __IOSurface *v37;
  __CVBuffer *v38;
  __IOSurface *v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  const __CFDictionary *v50;
  __CFArray *Mutable;
  const __CFArray *v52;
  AVE_USL_Surface **v53;
  uint64_t DataSurfaces;
  int v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  __uint64_t v59;
  const char *v60;
  __uint64_t v61;
  AVE_USL_Surface *v62;
  int v63;
  __IOSurface *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  __uint64_t v74;
  const char *v75;
  __uint64_t v76;
  int v77;
  __uint64_t v78;
  const char *v79;
  __IOSurface *Addr;
  int v82;
  __uint64_t v83;
  const char *v84;
  int v85;
  __uint64_t v86;
  int v87;
  __uint64_t v88;
  const char *v89;
  __uint64_t v90;
  int v91;
  __uint64_t v92;
  const char *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 *v100;
  unint64_t *v101;
  unsigned int v102;
  int v103;
  __uint64_t v104;
  const char *v105;
  __uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  __uint64_t v113;
  const char *v114;
  __uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int16 *v122;
  unint64_t *v123;
  __int16 v124;
  int v125;
  __uint64_t v126;
  const char *v127;
  __uint64_t v128;
  int v129;
  __uint64_t v130;
  const char *v131;
  __uint64_t v132;
  uint64_t v133;
  int v134;
  __uint64_t v135;
  const char *v136;
  const void *v137;
  int v138;
  int v139;
  __uint64_t v140;
  const char *v141;
  __uint64_t v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  const char *v147;
  const char *v148;
  const char *v149;
  const char *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  const char *v154;
  const char *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  __IOSurface *v161;
  unsigned int v162;
  unsigned int v163;
  _OWORD v164[2];
  int v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v165 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame\n", CurrTime, 40, LevelStr);
      v7 = AVE_GetCurrTime();
      v143 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", v7, 40, v143);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER H264VideoEncoderVA_DriverEncodeFrame", CurrTime, 40, LevelStr);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v14 = AVE_Log_CheckConsole(3u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.\n", v15, 3, v16, "AVE_USL_Drv_Process", 1337, "pDriverInstance");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for driver data.");
    }
    goto LABEL_69;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v17 = AVE_Log_CheckConsole(3u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.\n", v18, 3, v19, "AVE_USL_Drv_Process", 1338, "pSettings");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, Null pointer for pSettings.");
    }
    goto LABEL_69;
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v20 = AVE_Log_CheckConsole(3u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.\n", v21, 3, v22, "AVE_USL_Drv_Process", 1339, "pDriverInstance->EncoderInited == true");
        v23 = AVE_GetCurrTime();
        v145 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v23, 3, v145, "AVE_USL_Drv_Process", 1339, "pDriverInstance->EncoderInited == true");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: H264VideoEncoderVA_DriverEncodeFrame, encoder has not been init-ed.", v21, 3, v22, "AVE_USL_Drv_Process", 1339, "pDriverInstance->EncoderInited == true");
      }
    }
    v27 = 4294966285;
    goto LABEL_70;
  }
  if (!*(_QWORD *)(a2 + 24))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v24 = AVE_Log_CheckConsole(3u);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL\n", v25, 3, v26, "AVE_USL_Drv_Process", 1340, "pSettings->CVImageBuffer");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBuffer == NULL");
    }
    goto LABEL_69;
  }
  v8 = a1 + 188024;
  if (*(_DWORD *)(a1 + 188116) != 3)
    goto LABEL_35;
  if (!*(_QWORD *)(a2 + 40))
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v28 = AVE_Log_CheckConsole(3u);
      v29 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      if (v28)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL\n", v29, 3, v30, "AVE_USL_Drv_Process", 1344, "pSettings->CVImageBufferOutput");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: pSettings->CVImageBufferOutput == NULL");
    }
LABEL_69:
    v27 = 4294966295;
    goto LABEL_70;
  }
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v9 = AVE_Log_CheckConsole(0x28u);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(7);
    v12 = *(const void **)(a2 + 40);
    if (v9)
    {
      printf("%lld %d AVE %s: pSettings->CVImageBufferOutput = %p\n", v10, 40, v11, v12);
      v13 = AVE_GetCurrTime();
      v144 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v13, 40, v144, *(const void **)(a2 + 40));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: pSettings->CVImageBufferOutput = %p", v10, 40, v11, v12);
    }
  }
LABEL_35:
  v166 = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v166);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v166, &v165);
  v31 = v166;
  if (v166)
  {
    bzero((void *)(v166 + 8), 0x10718uLL);
    *(_DWORD *)v31 = v165;
    *(_DWORD *)(v31 + 4) = 7;
    *(_DWORD *)(v31 + 160) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(v31 + 168) = *(_DWORD *)(a2 + 212);
    *(_BYTE *)(v31 + 8) = *(_QWORD *)(a1 + 188120) != 0;
    *(_DWORD *)(v31 + 12) = *(_DWORD *)(a1 + 188128);
    *(_OWORD *)(v31 + 296) = *(_OWORD *)a2;
    *(_QWORD *)(v31 + 312) = *(_QWORD *)(a2 + 16);
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 24));
    *(_DWORD *)(v31 + 272) = IOSurfaceGetID(IOSurface);
    v33 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 32));
    *(_DWORD *)(v31 + 276) = IOSurfaceGetID(v33);
    v34 = *(__CVBuffer **)(*(_QWORD *)(a2 + 152) + 19184);
    if (v34)
    {
      v35 = CVPixelBufferGetIOSurface(v34);
      *(_DWORD *)(v31 + 280) = IOSurfaceGetID(v35);
    }
    if (*(_DWORD *)(a1 + 188116) == 3)
    {
      v36 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v31 + 320) = v36;
      v37 = CVPixelBufferGetIOSurface((CVPixelBufferRef)v36);
      *(_DWORD *)(v31 + 284) = IOSurfaceGetID(v37);
      v38 = *(__CVBuffer **)(a2 + 48);
      if (v38)
      {
        v39 = CVPixelBufferGetIOSurface(v38);
        *(_DWORD *)(v31 + 288) = IOSurfaceGetID(v39);
      }
    }
    v40 = a1 + 18364;
    *(_QWORD *)(v31 + 336) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(v31 + 344) = *(_BYTE *)(a2 + 64);
    v41 = v31 + 2296;
    v42 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(v31 + 2312) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(v31 + 2296) = v42;
    v43 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(v31 + 2336) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(v31 + 2320) = v43;
    *(_OWORD *)(v31 + 2344) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(v31 + 27672) = *(_QWORD *)(a2 + 168);
    v44 = *(_QWORD *)(a2 + 144);
    v45 = *(_QWORD *)(v44 + 80);
    v46 = *(_OWORD *)(v44 + 64);
    v47 = *(_OWORD *)(v44 + 32);
    *(_OWORD *)(v31 + 2416) = *(_OWORD *)(v44 + 48);
    *(_OWORD *)(v31 + 2432) = v46;
    *(_QWORD *)(v31 + 2448) = v45;
    v48 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)(v31 + 2368) = *(_OWORD *)v44;
    *(_OWORD *)(v31 + 2384) = v48;
    *(_OWORD *)(v31 + 2400) = v47;
    *(_DWORD *)(v31 + 26924) = 0;
    v49 = *(unsigned int *)(a2 + 192);
    if ((int)v49 >= 1)
    {
      memcpy((void *)(v31 + 26928), *(const void **)(a2 + 184), v49 << 6);
      *(_DWORD *)(v31 + 26924) = *(_DWORD *)(a2 + 192);
    }
    memcpy((void *)(v31 + 2456), *(const void **)(a2 + 152), 0x4AF8uLL);
    if (*(_DWORD *)(a1 + 220) == 1)
    {
      if (*(_BYTE *)(a1 + 20115))
      {
        v50 = *(const __CFDictionary **)(a2 + 72);
        if (v50)
        {
          if (*(_DWORD *)(a1 + 20260))
          {
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            if (!Mutable)
            {
              if (AVE_Log_CheckLevel(0x28u, 4))
              {
                v87 = AVE_Log_CheckConsole(0x28u);
                v88 = AVE_GetCurrTime();
                v89 = AVE_Log_GetLevelStr(4);
                if (v87)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray\n", v88, 40, v89, "AVE_USL_Drv_Process", 1448, "refInfo != __null");
                  v90 = AVE_GetCurrTime();
                  v149 = AVE_Log_GetLevelStr(4);
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v90, 40, v149, "AVE_USL_Drv_Process", 1448, "refInfo != __null");
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray", v88, 40, v89, "AVE_USL_Drv_Process", 1448, "refInfo != __null");
                }
              }
              v27 = 4294966293;
              goto LABEL_141;
            }
            v52 = Mutable;
            AVE_VCP_Ref_MakeArray((char *)(v31 + 2688), *(unsigned __int8 *)(v31 + 2676), Mutable);
            AVE_VCP::ScaleRefFrames(*(AVE_VCP **)(a1 + 188136), *(const __CFDictionary **)(a2 + 72), v52);
            CFRelease(v52);
            v50 = *(const __CFDictionary **)(a2 + 72);
          }
          AVE_DPB_RetrieveSnapshot(v50, (char *)(v31 + 920));
        }
      }
    }
    AVE_USL_CalcDataSurfaceInfo(a1, a1 + 120, v31, (_DWORD *)(a1 + 16));
    v53 = (AVE_USL_Surface **)(a1 + 72);
    DataSurfaces = AVE_USL_CreateDataSurfaces((_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 188112), (AVE_USL_Surface **)(a1 + 72));
    if ((_DWORD)DataSurfaces)
    {
      v27 = DataSurfaces;
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        v55 = AVE_Log_CheckConsole(0x28u);
        v56 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(4);
        if (v55)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d\n", v56, 40, v57, "AVE_USL_Drv_Process", 1470, "ret == 0", *(_DWORD *)(a1 + 188112), *(_DWORD *)(v31 + 160));
          v56 = AVE_GetCurrTime();
          v57 = AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create surfaces %d %d", v56, 40, v57, "AVE_USL_Drv_Process", 1470, "ret == 0", *(unsigned int *)(a1 + 188112), *(unsigned int *)(v31 + 160));
      }
LABEL_141:
      v137 = *(const void **)(a2 + 56);
      if (v137)
      {
        CFRelease(v137);
        *(_QWORD *)(a2 + 56) = 0;
      }
      goto LABEL_70;
    }
    v62 = *v53;
    if (*v53 && *(_QWORD *)(v31 + 2648))
    {
      v63 = *(_DWORD *)(a1 + 18688);
      if (v63 == 1)
      {
        Addr = AVE_USL_Surface::GetAddr(v62, 0);
        memcpy(Addr, *(const void **)(v31 + 2648), 32 * ((*(_DWORD *)(a1 + 1812) + 31) >> 5) * ((*(_DWORD *)(a1 + 1808) + 31) >> 5));
      }
      else
      {
        if (v63)
        {
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            v82 = AVE_Log_CheckConsole(0x28u);
            v83 = AVE_GetCurrTime();
            v84 = AVE_Log_GetLevelStr(4);
            v85 = *(_DWORD *)(a1 + 18688);
            if (v82)
            {
              printf("%lld %d AVE %s: wrong codec type %d\n", v83, 40, v84, v85);
              v86 = AVE_GetCurrTime();
              v148 = AVE_Log_GetLevelStr(4);
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v86, 40, v148, *(_DWORD *)(a1 + 18688));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: wrong codec type %d", v83, 40, v84, v85);
            }
          }
          if (AVE_Log_CheckLevel(0x28u, 4))
          {
            v91 = AVE_Log_CheckConsole(0x28u);
            v92 = AVE_GetCurrTime();
            v93 = AVE_Log_GetLevelStr(4);
            if (v91)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d\n", v92, 40, v93, "AVE_USL_Drv_Process", 1475, "ret == 0", *(_DWORD *)(a1 + 188112), *(_DWORD *)(v31 + 160));
              v92 = AVE_GetCurrTime();
              AVE_Log_GetLevelStr(4);
            }
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare MB input control %d %d", v92);
          }
          v27 = 4294966295;
          goto LABEL_141;
        }
        v64 = AVE_USL_Surface::GetAddr(v62, 0);
        v162 = *(_DWORD *)(a1 + 1808) + 15;
        v65 = *(_DWORD *)(a1 + 1812) + 15;
        v66 = v65 >> 4;
        v163 = v162 >> 4;
        v161 = v64;
        memcpy(v64, *(const void **)(v31 + 2648), 16 * (v65 >> 4) * (v162 >> 4));
        if (AVE_Log_CheckLevel(0xBu, 7))
        {
          if (AVE_Log_CheckLevel(0xBu, 7))
          {
            v72 = v65;
            v73 = AVE_Log_CheckConsole(0xBu);
            v74 = AVE_GetCurrTime();
            v75 = AVE_Log_GetLevelStr(7);
            if (v73)
            {
              printf("%lld %d AVE %s: QPMap:\n", v74, 11, v75);
              v76 = AVE_GetCurrTime();
              v147 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: QPMap:", v76, 11, v147);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: QPMap:", v74, 11, v75);
            }
            v65 = v72;
          }
          v157 = v65;
          v158 = v66;
          if (v65 >= 0x10)
          {
            v94 = 0;
            v95 = 0;
            if (v163 <= 1)
              v96 = 1;
            else
              v96 = v163;
            if (v158 <= 1)
              v97 = 1;
            else
              v97 = v158;
            v159 = v97;
            v98 = v96 + 2 * v96;
            do
            {
              if (v162 >= 0x10)
              {
                v99 = 0;
                v100 = (unsigned __int16 *)((char *)v161 + 16 * v94);
                v101 = &v166;
                do
                {
                  v102 = *v100;
                  v100 += 8;
                  AVE_SNPrintf((char *)v101, v99 + 512, "%2d ", v67, v68, v69, v70, v71, v102 >> 10);
                  v99 -= 3;
                  v101 = (unint64_t *)((char *)v101 + 3);
                }
                while (v98 + v99);
              }
              if (AVE_Log_CheckLevel(0xBu, 7))
              {
                v103 = AVE_Log_CheckConsole(0xBu);
                v104 = AVE_GetCurrTime();
                v105 = AVE_Log_GetLevelStr(7);
                if (v103)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v104, 11, v105, v95, (const char *)&v166);
                  v106 = AVE_GetCurrTime();
                  v150 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v106, 11, v150, v95, (const char *)&v166);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v104, 11, v105, v95, (const char *)&v166);
                }
              }
              ++v95;
              v94 += v163;
            }
            while (v95 != v159);
          }
          if (AVE_Log_CheckLevel(0xBu, 7))
          {
            v112 = AVE_Log_CheckConsole(0xBu);
            v113 = AVE_GetCurrTime();
            v114 = AVE_Log_GetLevelStr(7);
            if (v112)
            {
              printf("%lld %d AVE %s: MDBias:\n", v113, 11, v114);
              v115 = AVE_GetCurrTime();
              v151 = AVE_Log_GetLevelStr(7);
              syslog(3, "%lld %d AVE %s: MDBias:", v115, 11, v151);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: MDBias:", v113, 11, v114);
            }
          }
          if (v157 >= 0x10)
          {
            v116 = 0;
            v117 = 0;
            if (v163 <= 1)
              v118 = 1;
            else
              v118 = v163;
            if (v158 <= 1)
              v119 = 1;
            else
              v119 = v158;
            v160 = v119;
            v120 = v118 + 2 * v118;
            do
            {
              if (v162 >= 0x10)
              {
                v121 = 0;
                v122 = (__int16 *)((char *)v161 + 16 * v116);
                v123 = &v166;
                do
                {
                  v124 = *v122;
                  v122 += 8;
                  AVE_SNPrintf((char *)v123, v121 + 512, "%2x ", v107, v108, v109, v110, v111, v124 & 3);
                  v121 -= 3;
                  v123 = (unint64_t *)((char *)v123 + 3);
                }
                while (v120 + v121);
              }
              if (AVE_Log_CheckLevel(0xBu, 7))
              {
                v125 = AVE_Log_CheckConsole(0xBu);
                v126 = AVE_GetCurrTime();
                v127 = AVE_Log_GetLevelStr(7);
                if (v125)
                {
                  printf("%lld %d AVE %s: mbrow %2d: %s\n", v126, 11, v127, v117, (const char *)&v166);
                  v128 = AVE_GetCurrTime();
                  v152 = AVE_Log_GetLevelStr(7);
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v128, 11, v152, v117, (const char *)&v166);
                }
                else
                {
                  syslog(3, "%lld %d AVE %s: mbrow %2d: %s", v126, 11, v127, v117, (const char *)&v166);
                }
              }
              ++v117;
              v116 += v163;
            }
            while (v117 != v160);
          }
          v40 = a1 + 18364;
          v8 = a1 + 188024;
          v53 = (AVE_USL_Surface **)(a1 + 72);
          v41 = v31 + 2296;
        }
      }
    }
    PrepareMultiPassStats(a1, v31);
    AVE_USL_RetrieveDataSurfaces(v53, (_DWORD *)(v31 + 264));
    LODWORD(v166) = v165;
    v167 = *(_OWORD *)v41;
    *(_QWORD *)&v168 = *(_QWORD *)(v41 + 16);
    if (Connection::writePacketBlock(*(_QWORD *)v8, (__int128 *)&v166))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v129 = AVE_Log_CheckConsole(3u);
        v130 = AVE_GetCurrTime();
        v131 = AVE_Log_GetLevelStr(4);
        if (v129)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v130, 3, v131, "AVE_USL_Drv_Process", 1495, "res == 0");
          v132 = AVE_GetCurrTime();
          v153 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v132, 3, v153, "AVE_USL_Drv_Process", 1495, "res == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread", v130, 3, v131, "AVE_USL_Drv_Process", 1495, "res == 0");
        }
      }
      v27 = 4294966296;
      goto LABEL_141;
    }
    v169 = 0;
    v168 = 0u;
    v167 = 0u;
    memset(v164, 0, sizeof(v164));
    v166 = *(unsigned int *)(v8 + 88);
    LODWORD(v169) = v165;
    *((_QWORD *)&v167 + 1) = *(unsigned int *)(v31 + 160);
    LODWORD(v168) = 58000;
    *((_QWORD *)&v168 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
    *(_QWORD *)(v31 + 27696) = AVE_GetCurrTime();
    v133 = AVE_DAL::UCProcess(*(const void ***)a1, &v166, v164);
    if ((_DWORD)v133)
    {
      v27 = v133;
      Connection::dropLastPacketBlock(*(pthread_mutex_t **)v8);
      if (AVE_Log_CheckLevel(0x28u, 4))
      {
        v134 = AVE_Log_CheckConsole(0x28u);
        v135 = AVE_GetCurrTime();
        v136 = AVE_Log_GetLevelStr(4);
        if (v134)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v135, 40, v136, "AVE_USL_Drv_Process", 1516, "ret == 0", v27);
          v135 = AVE_GetCurrTime();
          v156 = v27;
          v154 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          v156 = v27;
          v154 = v136;
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v135, 40, v154, "AVE_USL_Drv_Process", 1516, "ret == 0", v156);
      }
      goto LABEL_141;
    }
    v138 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v138;
    if (!*(_BYTE *)(a2 + 160) && v138 != *(_DWORD *)v40
      || *(_BYTE *)(v40 + 413)
      || (*(_BYTE *)(a1 + 1804) & 0xE0) != 0
      || (*(_DWORD *)(v8 + 92) & 0xFFFFFFFE) == 2)
    {
      v27 = 0;
    }
    else
    {
      v166 = AVE_GetCurrTime();
      v27 = AVE_USL_Drv_Complete(a1, &v166);
      if ((_DWORD)v27 && AVE_Log_CheckLevel(3u, 4))
      {
        v139 = AVE_Log_CheckConsole(3u);
        v140 = AVE_GetCurrTime();
        v141 = AVE_Log_GetLevelStr(4);
        if (v139)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.\n", v140, 3, v141, "AVE_USL_Drv_Process", 1544, "ret == 0");
          v142 = AVE_GetCurrTime();
          v155 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v142, 3, v155, "AVE_USL_Drv_Process", 1544, "ret == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Complete call FAILED.", v140, 3, v141, "AVE_USL_Drv_Process", 1544, "ret == 0");
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v58 = AVE_Log_CheckConsole(3u);
      v59 = AVE_GetCurrTime();
      v60 = AVE_Log_GetLevelStr(4);
      if (v58)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: info = NULL.\n", v59, 3, v60, "AVE_USL_Drv_Process", 1361, "Frame");
        v61 = AVE_GetCurrTime();
        v146 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: info = NULL.", v61, 3, v146, "AVE_USL_Drv_Process", 1361, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: info = NULL.", v59, 3, v60, "AVE_USL_Drv_Process", 1361, "Frame");
      }
    }
    v27 = 4294966293;
  }
LABEL_70:
  AVE_USL_DestroyDataSurfaces(a1 + 72);
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v77 = AVE_Log_CheckConsole(0x28u);
    v78 = AVE_GetCurrTime();
    v79 = AVE_Log_GetLevelStr(7);
    if (v77)
    {
      printf("%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d\n", v78, 40, v79, *(_DWORD *)(a1 + 12) - 1, v27);
      v78 = AVE_GetCurrTime();
      v79 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT H264VideoEncoderVA_DriverEncodeFrame frame number %d. %d", v78, 40, v79, *(_DWORD *)(a1 + 12) - 1, v27);
  }
  return v27;
}

void PrepareMultiPassStats(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _DWORD *v5;
  size_t v6;
  __IOSurface *Addr;
  __IOSurface *v8;
  const void *v9;
  _DWORD *v10;
  const void *v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  __uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  int v26;
  __uint64_t v27;
  const char *v28;
  uint64_t v29;
  __uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  int v34;
  __uint64_t v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  uint64_t v39;
  __uint64_t v40;
  int v41;
  __uint64_t v42;
  const char *v43;
  int v44;
  __uint64_t v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  uint64_t v49;
  __uint64_t v50;
  int v51;
  __uint64_t v52;
  const char *v53;
  int v54;
  __uint64_t v55;
  int v56;
  __uint64_t v57;
  const char *v58;
  uint64_t v59;
  __uint64_t v60;
  int v61;
  __uint64_t v62;
  const char *v63;
  int v64;
  __uint64_t v65;
  int i;
  int v67;
  __uint64_t v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  __uint64_t v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;

  v4 = (uint64_t *)(a1 + 188008);
  v5 = (_DWORD *)(a1 + 18328);
  if (*(_DWORD *)(a1 + 188128) || *v5 == 2)
  {
    *v5 = 2;
    *(_DWORD *)(a2 + 16) = 2;
    H264VideoEncoderFrameReceiver::SetMultiPassOptions(*v4, *(_DWORD *)(a1 + 18344));
    v6 = *(unsigned int *)(a1 + 60);
    Addr = AVE_USL_Surface::GetAddr(*(AVE_USL_Surface **)(a1 + 80), 0);
    v8 = Addr;
    v9 = *(const void **)(a2 + 21632);
    if (v9)
    {
      *(_BYTE *)(a2 + 8) = 1;
LABEL_7:
      memcpy(Addr, v9, v6);
      return;
    }
    v10 = (_DWORD *)(a2 + 21366);
    H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(*v4, (void *)(a2 + 21366));
    v11 = (const void *)(a2 + 4052);
    if (*(_DWORD *)(a1 + 12))
    {
      *(_BYTE *)(a2 + 2464) = 0;
      memcpy(v8, (const void *)(a2 + 21366), 0x108uLL);
      Addr = (__IOSurface *)((char *)v8 + 264);
      v9 = (const void *)(a2 + 4052);
      goto LABEL_7;
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v12 = AVE_Log_CheckConsole(0xD8u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
      if (v12)
      {
        printf("%lld %d AVE %s: ------ Sequence RC Info ------\n", CurrTime, 216, LevelStr);
        v15 = AVE_GetCurrTime();
        v80 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", v15, 216, v80);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: ------ Sequence RC Info ------", CurrTime, 216, LevelStr);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v16 = AVE_Log_CheckConsole(0xD8u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(6);
      v19 = *v10;
      if (v16)
      {
        printf("%lld %d AVE %s:  total_scenes %u\n", v17, 216, v18, v19);
        v20 = AVE_GetCurrTime();
        v81 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  total_scenes %u", v20, 216, v81, *v10);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  total_scenes %u", v17, 216, v18, v19);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v21 = AVE_Log_CheckConsole(0xD8u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(6);
      v24 = v10[1];
      if (v21)
      {
        printf("%lld %d AVE %s:  cnt_All %u\n", v22, 216, v23, v24);
        v25 = AVE_GetCurrTime();
        v82 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  cnt_All %u", v25, 216, v82, v10[1]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  cnt_All %u", v22, 216, v23, v24);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v26 = AVE_Log_CheckConsole(0xD8u);
      v27 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(6);
      v29 = *((_QWORD *)v10 + 1);
      if (v26)
      {
        printf("%lld %d AVE %s:  bits_All %llu\n", v27, 216, v28, v29);
        v30 = AVE_GetCurrTime();
        v83 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  bits_All %llu", v30, 216, v83, *((_QWORD *)v10 + 1));
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  bits_All %llu", v27, 216, v28, v29);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v31 = AVE_Log_CheckConsole(0xD8u);
      v32 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(6);
      v34 = v10[7];
      if (v31)
      {
        printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v32, 216, v33, v34);
        v35 = AVE_GetCurrTime();
        v84 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v35, 216, v84, v10[7]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v32, 216, v33, v34);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v36 = AVE_Log_CheckConsole(0xD8u);
      v37 = AVE_GetCurrTime();
      v38 = AVE_Log_GetLevelStr(6);
      v39 = *((_QWORD *)v10 + 4);
      if (v36)
      {
        printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v37, 216, v38, v39);
        v40 = AVE_GetCurrTime();
        v85 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v40, 216, v85, *((_QWORD *)v10 + 4));
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v37, 216, v38, v39);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v41 = AVE_Log_CheckConsole(0xD8u);
      v42 = AVE_GetCurrTime();
      v43 = AVE_Log_GetLevelStr(6);
      v44 = v10[10];
      if (v41)
      {
        printf("%lld %d AVE %s:  cnt_MIN %u\n", v42, 216, v43, v44);
        v45 = AVE_GetCurrTime();
        v86 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v45, 216, v86, v10[10]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v42, 216, v43, v44);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v46 = AVE_Log_CheckConsole(0xD8u);
      v47 = AVE_GetCurrTime();
      v48 = AVE_Log_GetLevelStr(6);
      v49 = *(_QWORD *)(v10 + 11);
      if (v46)
      {
        printf("%lld %d AVE %s:  bits_MIN %llu\n", v47, 216, v48, v49);
        v50 = AVE_GetCurrTime();
        v87 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v50, 216, v87, *(_QWORD *)(v10 + 11));
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v47, 216, v48, v49);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v51 = AVE_Log_CheckConsole(0xD8u);
      v52 = AVE_GetCurrTime();
      v53 = AVE_Log_GetLevelStr(6);
      v54 = v10[13];
      if (v51)
      {
        printf("%lld %d AVE %s:  cnt_MAX %u\n", v52, 216, v53, v54);
        v55 = AVE_GetCurrTime();
        v88 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v55, 216, v88, v10[13]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v52, 216, v53, v54);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v56 = AVE_Log_CheckConsole(0xD8u);
      v57 = AVE_GetCurrTime();
      v58 = AVE_Log_GetLevelStr(6);
      v59 = *((_QWORD *)v10 + 7);
      if (v56)
      {
        printf("%lld %d AVE %s:  bits_MAX %llu\n", v57, 216, v58, v59);
        v60 = AVE_GetCurrTime();
        v89 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v60, 216, v89, *((_QWORD *)v10 + 7));
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v57, 216, v58, v59);
      }
    }
    if (AVE_Log_CheckLevel(0xD8u, 6))
    {
      v61 = AVE_Log_CheckConsole(0xD8u);
      v62 = AVE_GetCurrTime();
      v63 = AVE_Log_GetLevelStr(6);
      v64 = v10[16];
      if (v61)
      {
        printf("%lld %d AVE %s:  cnt_BLANK %u\n", v62, 216, v63, v64);
        v65 = AVE_GetCurrTime();
        v90 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v65, 216, v90, v10[16]);
      }
      else
      {
        syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v62, 216, v63, v64);
      }
    }
    H264VideoEncoderFrameReceiver::GetMpGlobalRcInfo(*v4, v10);
    memcpy(v8, v10, 0x108uLL);
    memcpy((char *)v8 + 264, v11, v6);
    for (i = 0; i != 11; ++i)
    {
      if (AVE_Log_CheckLevel(0xD8u, 6))
      {
        v67 = AVE_Log_CheckConsole(0xD8u);
        v68 = AVE_GetCurrTime();
        v69 = AVE_Log_GetLevelStr(6);
        v70 = *((_DWORD *)v8 + 371);
        v71 = *(_QWORD *)((char *)v8 + 1492);
        v72 = *(_QWORD *)((char *)v8 + 1508);
        v73 = *(_QWORD *)((char *)v8 + 1516);
        v74 = *(_QWORD *)((char *)v8 + 1524);
        v75 = *(double *)((char *)v8 + 1532);
        v76 = *(double *)((char *)v8 + 1540);
        v77 = *((float *)v8 + 388);
        if (v67)
        {
          printf("%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f\n",
            v68,
            216,
            v69,
            i,
            v70,
            v71,
            v72,
            v73,
            v74,
            v75,
            v76,
            *((float *)v8 + 387),
            v77);
          v78 = AVE_GetCurrTime();
          v79 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
            v78,
            216,
            v79,
            i,
            *((_DWORD *)v8 + 371),
            *(_QWORD *)((char *)v8 + 1492),
            *(_QWORD *)((char *)v8 + 1508),
            *(_QWORD *)((char *)v8 + 1516),
            *(_QWORD *)((char *)v8 + 1524),
            *(double *)((char *)v8 + 1532),
            *(double *)((char *)v8 + 1540),
            *((float *)v8 + 387),
            *((float *)v8 + 388));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: frame %u: cnt %d, bits %llu, %llu, %llu, %llu; QScale: %f, %f, %f, %f",
            v68,
            216,
            v69,
            i,
            v70,
            v71,
            v72,
            v73,
            v74,
            v75,
            v76,
            *((float *)v8 + 387),
            v77);
        }
      }
      v8 = (__IOSurface *)((char *)v8 + 1574);
    }
  }
}

uint64_t AVE_USL_Drv_SetInternalThreadPriority(_QWORD *a1, int a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  uint64_t v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  const char *v17;
  const char *v18;

  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.\n", CurrTime, 40, LevelStr);
      v7 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", v7, 40, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_SetInternalThreadPriority.", CurrTime, 40, LevelStr);
    }
  }
  if (a1)
  {
    if (*((_BYTE *)a1 + 8))
      H264VideoEncoderFrameReceiver::ChangeBackgroundPolicy(a1[23501], a2);
    v8 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v9 = AVE_Log_CheckConsole(3u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.\n", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1576, "pDriverInstance");
        v12 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v12, 3, v18, "AVE_USL_Drv_SetInternalThreadPriority", 1576, "pDriverInstance");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder Error: AVE_USL_Drv_SetInternalThreadPriority, Null pointer for driver data.", v10, 3, v11, "AVE_USL_Drv_SetInternalThreadPriority", 1576, "pDriverInstance");
      }
    }
    v8 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v13 = AVE_Log_CheckConsole(0x28u);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(7);
    if (v13)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d\n", v14, 40, v15, *((_DWORD *)a1 + 3), v8);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_SetInternalThreadPriority frame number %d. %d", v14, 40, v15, *((_DWORD *)a1 + 3), v8);
  }
  return v8;
}

uint64_t AVE_USL_Drv_Reset(unsigned int *a1, unsigned int a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  unint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  int PacketBlock;
  int v39;
  __uint64_t v40;
  const char *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  _OWORD v50[2];
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __uint64_t v55;
  int v56;

  v56 = -1;
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x28u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.\n", CurrTime, 40, LevelStr);
      v7 = AVE_GetCurrTime();
      v45 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", v7, 40, v45);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: ENTER AVE_USL_Drv_Reset.", CurrTime, 40, LevelStr);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v13 = AVE_Log_CheckConsole(3u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.\n", v14, 3, v15, "AVE_USL_Drv_Reset", 1606, "pDriverInstance");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset, Null pointer for driver data.");
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v16 = AVE_Log_CheckConsole(3u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.\n", v17, 3, v18, "AVE_USL_Drv_Reset", 1607, "multiPassEndPassCounter > 0", 0);
        v17 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v46 = v18;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: AVE_USL_Drv_Reset multiPassEndPassCounter = %d.", v17, 3, v46, "AVE_USL_Drv_Reset", 1607, "multiPassEndPassCounter > 0", 0);
    }
LABEL_26:
    v9 = 4294966295;
    goto LABEL_27;
  }
  v55 = AVE_GetCurrTime();
  v8 = AVE_USL_Drv_Complete((uint64_t)a1, &v55);
  if ((_DWORD)v8)
  {
    v9 = v8;
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v10 = AVE_Log_CheckConsole(3u);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.\n", v11, 3, v12, "AVE_USL_Drv_Reset", 1616, "ret == 0");
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: H264VideoEncoderVA_DriverEncodeCompleteFrames failed.");
    }
    goto LABEL_27;
  }
  a1[3] = 0;
  a1[47032] = a2;
  v51 = 0;
  AVE_DAL::Alloc(*(AVE_DAL **)a1, 67360, &v51);
  AVE_DAL::Addr2Idx(*(AVE_DAL **)a1, (const void *)v51, &v56);
  v19 = v51;
  if (v51)
  {
    bzero((void *)(v51 + 8), 0x10718uLL);
    *(_DWORD *)v19 = v56;
    *(_DWORD *)(v19 + 4) = 10;
    *(_DWORD *)(v19 + 160) = a1[3];
    *(_BYTE *)(v19 + 8) = *((_QWORD *)a1 + 23515) != 0;
    *(_DWORD *)(v19 + 12) = a1[47032];
    LODWORD(v51) = v56;
    if (Connection::writePacketBlock(*((_QWORD *)a1 + 23503), (__int128 *)&v51))
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v20 = AVE_Log_CheckConsole(3u);
        v21 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        if (v20)
        {
          printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread\n", v21, 3, v22, "AVE_USL_Drv_Reset", 1653, "res == 0");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for space in Connection to FrameReceiver thread");
      }
      goto LABEL_45;
    }
    v54 = 0;
    v53 = 0u;
    v52 = 0u;
    memset(v50, 0, sizeof(v50));
    v51 = a1[47028];
    LODWORD(v54) = v56;
    LODWORD(v53) = 118000;
    *((_QWORD *)&v53 + 1) = (uint64_t)AVE_GetCurrTime() / 1000;
    v31 = AVE_DAL::UCReset(*(const void ***)a1, &v51, v50);
    if (!(_DWORD)v31)
    {
      PacketBlock = Connection::readPacketBlock(*((_QWORD *)a1 + 23502), (uint64_t)&v51, 0x1D4C0u);
      if ((_DWORD)v51 == v56)
      {
        if (!PacketBlock)
        {
          v9 = 0;
          goto LABEL_27;
        }
        if (AVE_Log_CheckLevel(3u, 4))
        {
          v39 = AVE_Log_CheckConsole(3u);
          v40 = AVE_GetCurrTime();
          v41 = AVE_Log_GetLevelStr(4);
          if (v39)
          {
            printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread\n", v40, 3, v41, "AVE_USL_Drv_Reset", 1684, "res == 0");
            AVE_GetCurrTime();
            AVE_Log_GetLevelStr(4);
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Timed Out waiting for packet from FrameReceiver thread");
        }
      }
      else if (AVE_Log_CheckLevel(3u, 4))
      {
        v42 = AVE_Log_CheckConsole(3u);
        v43 = AVE_GetCurrTime();
        v44 = AVE_Log_GetLevelStr(4);
        if (v42)
        {
          printf("%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.\n", v43, 3, v44, "AVE_USL_Drv_Reset", 1683, "status.counter == counter");
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | H264VideoEncoder ERROR: status.counter != counter.");
      }
LABEL_45:
      v9 = 4294966296;
      goto LABEL_27;
    }
    v9 = v31;
    v32 = *((_QWORD *)a1 + 23503);
    pthread_mutex_lock((pthread_mutex_t *)v32);
    v33 = *(_DWORD *)(v32 + 200);
    if (v33)
    {
      *(_DWORD *)(v32 + 200) = v33 - 1;
      v34 = *(_DWORD *)(v32 + 208);
      if (!v34)
        v34 = *(_DWORD *)(v32 + 196);
      *(_DWORD *)(v32 + 208) = v34 - 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)v32);
    if (AVE_Log_CheckLevel(0x28u, 4))
    {
      v35 = AVE_Log_CheckConsole(0x28u);
      v36 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to process %d\n", v36, 40, v37, "AVE_USL_Drv_Reset", 1670, "ret == 0", v9);
        v36 = AVE_GetCurrTime();
        v49 = v9;
        v48 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v49 = v9;
        v48 = v37;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %d", v36, 40, v48, "AVE_USL_Drv_Reset", 1670, "ret == 0", v49);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v27 = AVE_Log_CheckConsole(3u);
      v28 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(4);
      if (v27)
      {
        printf("%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.\n", v28, 3, v29, "AVE_USL_Drv_Reset", 1632, "Frame");
        v30 = AVE_GetCurrTime();
        v47 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v30, 3, v47, "AVE_USL_Drv_Reset", 1632, "Frame");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | AVE ERROR: Frame = NULL.", v28, 3, v29, "AVE_USL_Drv_Reset", 1632, "Frame");
      }
    }
    v9 = 4294966293;
  }
LABEL_27:
  if (AVE_Log_CheckLevel(0x28u, 7))
  {
    v23 = AVE_Log_CheckConsole(0x28u);
    v24 = AVE_GetCurrTime();
    v25 = AVE_Log_GetLevelStr(7);
    if (v23)
    {
      printf("%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x\n", v24, 40, v25, a1[3], v9);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: EXIT AVE_USL_Drv_Reset frame number %d. err 0x%08x", v24, 40, v25, a1[3], v9);
  }
  return v9;
}

void Connection::~Connection(Connection *this)
{
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v4;
  const char *v5;
  uint64_t v6;

  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((_DWORD *)this + 50) && AVE_Log_CheckLevel(0x2Au, 5))
  {
    if (AVE_Log_CheckConsole(0x2Au))
    {
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(5);
      printf("%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left\n", CurrTime, 42, LevelStr, this, *((_DWORD *)this + 50));
    }
    v4 = AVE_GetCurrTime();
    v5 = AVE_Log_GetLevelStr(5);
    syslog(3, "%lld %d AVE %s: H264 Connection: WARNING! deleting connection %p with %d packets left", v4, 42, v5, this, *((_DWORD *)this + 50));
  }
  v6 = *((_QWORD *)this + 27);
  if (v6)
  {
    MEMORY[0x1B5E4D1A8](v6, 0x1000C807607B2BCLL);
    *((_QWORD *)this + 27) = 0;
  }
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  pthread_mutex_unlock((pthread_mutex_t *)this);
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t AVE_DevCap_PixelFmt_FindList(_DWORD *a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;

  LODWORD(v4) = *a4;
  if (*a1 >= *a4)
    v4 = v4;
  else
    v4 = *a1;
  if ((int)v4 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a1 + 2;
    do
    {
      if ((a2 & ~*v6) == 0)
        *(_DWORD *)(a3 + 4 * v5++) = *(v6 - 1);
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  *a4 = v5;
  return 0;
}

_DWORD *AVE_DevCap_Perf_Find(unsigned int *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *i;

  v4 = *a1;
  if ((int)v4 < 1)
    return 0;
  for (i = a1 + 5; *(i - 1) != a2 || *i != a3 || *(i - 2) != a4; i += 6)
  {
    if (!--v4)
      return 0;
  }
  return i - 3;
}

uint64_t AVE_DRL_Print(double *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  AVE_ComposePosStr(a4, a5, (char *)v16, 32, a5, a6, a7, a8);
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v11 = AVE_Log_CheckConsole(a2);
    v12 = v11;
    if (a3 < 0)
    {
      if (v11 && (-a3 & 0x20) == 0)
        printf("DRL %s | %p %d | %f %f - %f %f\n", (const char *)v16, a1, *((_DWORD *)a1 + 8), *a1, a1[1], a1[2], a1[3]);
      syslog(3, "DRL %s | %p %d | %f %f - %f %f");
    }
    else
    {
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) != 0 || !v12)
      {
        syslog(3, "%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f");
      }
      else
      {
        printf("%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f\n", CurrTime, a2, LevelStr, (const char *)v16, a1, *((_DWORD *)a1 + 8), *a1, a1[1], a1[2], a1[3]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
        syslog(3, "%lld %d AVE %s: DRL %s | %p %d | %f %f - %f %f");
      }
    }
  }
  return 0;
}

uint64_t AVE_DRL_Retrieve(CFArrayRef theArray, _QWORD *a2)
{
  int Count;
  int v5;
  CFIndex v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  double v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v15;
  double v16;

  v15 = 0;
  v16 = 0.0;
  if (theArray && a2)
  {
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    Count = CFArrayGetCount(theArray);
    v5 = Count >> 1;
    if (Count >= 2)
    {
      v6 = 0;
      if (v5 <= 1)
        v7 = 1;
      else
        v7 = Count >> 1;
      v8 = 2 * v7;
      do
      {
        if (AVE_CFArray_GetFloat64(theArray, v6, &v16))
        {
          result = AVE_CFArray_GetSInt64(theArray, v6, &v15);
          if ((_DWORD)result)
            return result;
          v10 = (double)v15;
        }
        else
        {
          v10 = v16;
        }
        *(double *)&a2[v6] = v10;
        if (AVE_CFArray_GetFloat64(theArray, v6 + 1, &v16))
        {
          result = AVE_CFArray_GetSInt64(theArray, v6 + 1, &v15);
          if ((_DWORD)result)
            return result;
          v11 = (double)v15;
        }
        else
        {
          v11 = v16;
        }
        *(double *)&a2[v6 + 1] = v11;
        v6 += 2;
      }
      while (v8 != v6);
    }
    result = 0;
    *((_DWORD *)a2 + 8) = v5;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x35u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x35u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 53, LevelStr, "AVE_DRL_Retrieve", 52, "pArray != __null && pDRL != __null", theArray, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 53);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_DRL_Make(int *a1, __CFArray *a2)
{
  uint64_t v4;
  double *i;
  int v6;
  uint64_t result;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1 && a2)
  {
    if (a1[8] < 1)
    {
      return 0;
    }
    else
    {
      v4 = 0;
      for (i = (double *)(a1 + 2); ; i += 2)
      {
        v6 = AVE_CFArray_AddFloat64(*(i - 1), a2);
        result = AVE_CFArray_AddFloat64(*i, a2) + v6;
        if ((_DWORD)result)
          break;
        if (++v4 >= a1[8])
          return 0;
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x35u, 4))
    {
      v8 = AVE_Log_CheckConsole(0x35u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 53, LevelStr, "AVE_DRL_Make", 119, "pDRL != __null && pArray != __null", a1, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 53);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_SearchRange_Make(int *a1, __CFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v19;

  if (a1 && a2)
  {
    v4 = AVE_CFDict_AddSInt32(CFSTR("MotionEstimationModeID"), *a1, a2);
    if (!(_DWORD)v4)
    {
      v13 = AVE_CFDict_AddSInt32(CFSTR("MotionEstimationHorizontalSearchRange"), a1[1], a2);
      if ((_DWORD)v13)
      {
        v5 = v13;
        if (!AVE_Log_CheckLevel(0x36u, 4))
          return v5;
        v14 = AVE_Log_CheckConsole(0x36u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (!v14)
          goto LABEL_29;
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 82, "ret == 0", a1, a2, v5);
      }
      else
      {
        v15 = AVE_CFDict_AddSInt32(CFSTR("MotionEstimationVerticalSearchRange"), a1[2], a2);
        if ((_DWORD)v15)
        {
          v5 = v15;
          if (!AVE_Log_CheckLevel(0x36u, 4))
            return v5;
          v16 = AVE_Log_CheckConsole(0x36u);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
          if (!v16)
            goto LABEL_29;
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 87, "ret == 0", a1, a2, v5);
        }
        else
        {
          v5 = AVE_CFDict_AddSInt32(CFSTR("MotionEstimationCacheMode"), a1[3], a2);
          if (!(_DWORD)v5 || !AVE_Log_CheckLevel(0x36u, 4))
            return v5;
          v17 = AVE_Log_CheckConsole(0x36u);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
          if (!v17)
            goto LABEL_29;
          printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 92, "ret == 0", a1, a2, v5);
        }
      }
      v9 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      goto LABEL_28;
    }
    v5 = v4;
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      v6 = AVE_Log_CheckConsole(0x36u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v6)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_Make", 77, "ret == 0", a1, a2, v5);
        v9 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(4);
LABEL_28:
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", v9, 54, v19);
        return v5;
      }
LABEL_29:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to add data %p %p %d", CurrTime, 54, LevelStr);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      v10 = AVE_Log_CheckConsole(0x36u);
      v11 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v11, 54, v12, "AVE_SearchRange_Make", 72, "pEntry != __null && pDict != __null", a1, a2);
        v11 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v11, 54);
    }
    return 4294966295;
  }
  return v5;
}

uint64_t AVE_SearchRange_MakeArray(int *a1, int a2, __CFArray *a3)
{
  uint64_t v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  int *i;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v21;
  const char *v23;
  const char *v24;

  if (a1 && a2 >= 1 && a3)
  {
    v6 = 0;
    v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    for (i = a1; ; i += 4)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, v7, v8);
      if (!Mutable)
        break;
      v11 = Mutable;
      v12 = AVE_SearchRange_Make(i, Mutable);
      if ((_DWORD)v12)
      {
        v13 = v12;
        CFRelease(v11);
        return v13;
      }
      CFArrayAppendValue(a3, v11);
      CFRelease(v11);
      if (a2 == ++v6)
        return 0;
    }
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      v18 = AVE_Log_CheckConsole(0x36u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d\n", CurrTime, 54, LevelStr, "AVE_SearchRange_MakeArray", 168, "pDict != __null", a1, a2, a3, v6);
        v21 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", v21, 54, v24, "AVE_SearchRange_MakeArray");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p %d", CurrTime, 54, LevelStr, "AVE_SearchRange_MakeArray");
      }
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x36u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x36u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v15, 54, v16, "AVE_SearchRange_MakeArray", 160, "pEntry != __null && num > 0 && pArray != __null", a1, a2, a3);
        v17 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v17, 54, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v15, 54, v16);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_ANFD_Retrieve(CFDictionaryRef theDict, int *a2)
{
  uint64_t SInt32;
  uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  __uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  const __CFDictionary *Value;
  const __CFDictionary *v19;
  uint64_t Double;
  int v21;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t SInt64;
  int v38;
  int v39;
  const char *v40;
  const char *v41;
  double v42;

  v42 = 0.0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0x2Fu, 4))
    {
      v10 = AVE_Log_CheckConsole(0x2Fu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v10)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 47, LevelStr, "AVE_ANFD_Retrieve", 30, "pDict != __null && pInfo != __null", theDict, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 47);
    }
    return 4294966295;
  }
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  SInt32 = AVE_CFDict_GetSInt32(theDict, CFSTR("AnfdModality"), a2);
  if (!(_DWORD)SInt32)
  {
    v13 = AVE_CFDict_GetSInt32(theDict, CFSTR("FaceID"), a2 + 1);
    if ((_DWORD)v13)
    {
      v5 = v13;
      if (!AVE_Log_CheckLevel(0x2Fu, 4))
        return v5;
      v14 = AVE_Log_CheckConsole(0x2Fu);
      v7 = AVE_GetCurrTime();
      v8 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 42, "ret == 0", theDict, a2, v5);
        goto LABEL_15;
      }
    }
    else
    {
      v15 = AVE_CFDict_GetSInt32(theDict, CFSTR("ConfidenceLevel"), a2 + 2);
      if ((_DWORD)v15)
      {
        v5 = v15;
        if (AVE_Log_CheckLevel(0x2Fu, 4))
        {
          v16 = AVE_Log_CheckConsole(0x2Fu);
          v9 = AVE_GetCurrTime();
          v17 = AVE_Log_GetLevelStr(4);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v9, 47, v17, "AVE_ANFD_Retrieve", 47, "ret == 0", theDict, a2, v5);
            v9 = AVE_GetCurrTime();
            v40 = AVE_Log_GetLevelStr(4);
          }
          else
          {
            v40 = v17;
          }
          goto LABEL_30;
        }
        return v5;
      }
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Rect"));
      if (!Value)
      {
        if (AVE_Log_CheckLevel(0x2Fu, 4))
        {
          v23 = AVE_Log_CheckConsole(0x2Fu);
          v24 = AVE_GetCurrTime();
          v25 = AVE_Log_GetLevelStr(4);
          if (v23)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v24, 47, v25, "AVE_ANFD_Retrieve", 52, "pRect != __null", theDict, a2, 0);
            v26 = AVE_GetCurrTime();
            v41 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v26, 47, v41);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v24, 47, v25);
          }
        }
        return 4294966288;
      }
      v19 = Value;
      Double = AVE_CFDict_GetDouble(Value, CFSTR("X"), &v42);
      if ((_DWORD)Double)
      {
        v5 = Double;
        if (!AVE_Log_CheckLevel(0x2Fu, 4))
          return v5;
        v21 = AVE_Log_CheckConsole(0x2Fu);
        v7 = AVE_GetCurrTime();
        v8 = AVE_Log_GetLevelStr(4);
        if (!v21)
          goto LABEL_23;
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 56, "ret == 0", theDict, a2, v5);
LABEL_15:
        v9 = AVE_GetCurrTime();
        v40 = AVE_Log_GetLevelStr(4);
        goto LABEL_30;
      }
      a2[4] = vcvtd_n_s64_f64(v42, 0x13uLL);
      v27 = AVE_CFDict_GetDouble(v19, CFSTR("Y"), &v42);
      if ((_DWORD)v27)
      {
        v5 = v27;
        if (!AVE_Log_CheckLevel(0x2Fu, 4))
          return v5;
        v28 = AVE_Log_CheckConsole(0x2Fu);
        v7 = AVE_GetCurrTime();
        v8 = AVE_Log_GetLevelStr(4);
        if (v28)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 62, "ret == 0", theDict, a2, v5);
          goto LABEL_15;
        }
      }
      else
      {
        a2[5] = vcvtd_n_s64_f64(v42, 0x13uLL);
        v29 = AVE_CFDict_GetDouble(v19, CFSTR("Width"), &v42);
        if ((_DWORD)v29)
        {
          v5 = v29;
          if (!AVE_Log_CheckLevel(0x2Fu, 4))
            return v5;
          v30 = AVE_Log_CheckConsole(0x2Fu);
          v7 = AVE_GetCurrTime();
          v8 = AVE_Log_GetLevelStr(4);
          if (v30)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 68, "ret == 0", theDict, a2, v5);
            goto LABEL_15;
          }
        }
        else
        {
          a2[6] = vcvtd_n_s64_f64(v42, 0x13uLL);
          v31 = AVE_CFDict_GetDouble(v19, CFSTR("Height"), &v42);
          if ((_DWORD)v31)
          {
            v5 = v31;
            if (!AVE_Log_CheckLevel(0x2Fu, 4))
              return v5;
            v32 = AVE_Log_CheckConsole(0x2Fu);
            v7 = AVE_GetCurrTime();
            v8 = AVE_Log_GetLevelStr(4);
            if (v32)
            {
              printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 74, "ret == 0", theDict, a2, v5);
              goto LABEL_15;
            }
          }
          else
          {
            a2[7] = vcvtd_n_s64_f64(v42, 0x13uLL);
            a2[3] = 0x80000;
            v33 = AVE_CFDict_GetSInt32(theDict, CFSTR("AngleInfoRoll"), a2 + 8);
            if ((_DWORD)v33)
            {
              v5 = v33;
              if (!AVE_Log_CheckLevel(0x2Fu, 4))
                return v5;
              v34 = AVE_Log_CheckConsole(0x2Fu);
              v7 = AVE_GetCurrTime();
              v8 = AVE_Log_GetLevelStr(4);
              if (v34)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 84, "ret == 0", theDict, a2, v5);
                goto LABEL_15;
              }
            }
            else
            {
              v35 = AVE_CFDict_GetSInt32(theDict, CFSTR("AngleInfoYaw"), a2 + 9);
              if ((_DWORD)v35)
              {
                v5 = v35;
                if (!AVE_Log_CheckLevel(0x2Fu, 4))
                  return v5;
                v36 = AVE_Log_CheckConsole(0x2Fu);
                v7 = AVE_GetCurrTime();
                v8 = AVE_Log_GetLevelStr(4);
                if (v36)
                {
                  printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 89, "ret == 0", theDict, a2, v5);
                  goto LABEL_15;
                }
              }
              else
              {
                SInt64 = AVE_CFDict_GetSInt64(theDict, CFSTR("OriginalTimestamp"), (uint64_t *)a2 + 5);
                if ((_DWORD)SInt64)
                {
                  v5 = SInt64;
                  if (!AVE_Log_CheckLevel(0x2Fu, 4))
                    return v5;
                  v38 = AVE_Log_CheckConsole(0x2Fu);
                  v7 = AVE_GetCurrTime();
                  v8 = AVE_Log_GetLevelStr(4);
                  if (v38)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 94, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
                else
                {
                  v5 = AVE_CFDict_GetSInt64(theDict, CFSTR("Timestamp"), (uint64_t *)a2 + 6);
                  if (!(_DWORD)v5 || !AVE_Log_CheckLevel(0x2Fu, 4))
                    return v5;
                  v39 = AVE_Log_CheckConsole(0x2Fu);
                  v7 = AVE_GetCurrTime();
                  v8 = AVE_Log_GetLevelStr(4);
                  if (v39)
                  {
                    printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 98, "ret == 0", theDict, a2, v5);
                    goto LABEL_15;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_23:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v7, 47, v8);
    return v5;
  }
  v5 = SInt32;
  if (AVE_Log_CheckLevel(0x2Fu, 4))
  {
    v6 = AVE_Log_CheckConsole(0x2Fu);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(4);
    if (v6)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v7, 47, v8, "AVE_ANFD_Retrieve", 37, "ret == 0", theDict, a2, v5);
      v9 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(4);
LABEL_30:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v9, 47, v40);
      return v5;
    }
    goto LABEL_23;
  }
  return v5;
}

uint64_t AVE_ANFD_RetrieveArray(const __CFArray *a1, void *a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int Count;
  uint64_t v8;
  CFIndex v9;
  int *i;
  const __CFDictionary *ValueAtIndex;
  uint64_t result;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v20;
  const char *v21;
  const char *v22;

  if (a1 && a2 && a3 && (v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    Count = CFArrayGetCount(a1);
    if (*a3 >= (signed int)Count)
      v8 = Count;
    else
      v8 = *a3;
    *a3 = 0;
    if ((int)v8 < 1)
    {
      return 0;
    }
    else
    {
      v9 = 0;
      for (i = (int *)a2; ; i += 16)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v9);
        if (!ValueAtIndex)
          break;
        result = AVE_ANFD_Retrieve(ValueAtIndex, i);
        if ((_DWORD)result)
          return result;
        ++*a3;
        if (v8 == ++v9)
          return 0;
      }
      if (AVE_Log_CheckLevel(0x2Fu, 4))
      {
        v17 = AVE_Log_CheckConsole(0x2Fu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d\n", CurrTime, 47, LevelStr, "AVE_ANFD_RetrieveArray", 227, "pDict != __null", a1, a2, a3, a1, v8, v9);
          v20 = AVE_GetCurrTime();
          v22 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", v20, 47, v22, "AVE_ANFD_RetrieveArray", 227);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p %p %d %d", CurrTime, 47, LevelStr, "AVE_ANFD_RetrieveArray", 227);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Fu, 4))
    {
      v13 = AVE_Log_CheckConsole(0x2Fu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v14, 47, v15, "AVE_ANFD_RetrieveArray", 215, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, a2, a3);
        v16 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v16, 47, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 47, v15);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_ANFD_Print(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  _OWORD *v23;
  const char *v24;
  double v25;
  const char *v26;
  double v27;
  double v28;
  uint64_t v30;
  const char *v31;
  _OWORD *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(v45, 0, sizeof(v45));
  AVE_ComposePosStr(a4, a5, (char *)v45, 32, a5, a6, a7, a8);
  v11 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v12 = AVE_Log_CheckConsole(a2);
    v13 = v12;
    if (a3 < 0)
    {
      if (!v12 || (-a3 & 0x20) != 0)
      {
        syslog(3, "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", v45, *a1, a1[1]);
        return 0;
      }
      v27 = (double)(int)a1[3];
      v23 = v45;
      printf("ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", (const char *)v45, *a1, a1[1], a1[2], (double)(int)a1[4] / v27, (double)(int)a1[5] / v27, (double)(int)a1[6] / v27, (double)(int)a1[7] / v27, a1[8], a1[9], *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), a1[14]);
      v28 = (double)(int)a1[3];
      v40 = *((_QWORD *)a1 + 6);
      v41 = a1[14];
      *(_QWORD *)&v38 = a1[9];
      v39 = *((double *)a1 + 5);
      *(_QWORD *)&v37 = a1[8];
      v35 = (double)(int)a1[6] / v28;
      v36 = (double)(int)a1[7] / v28;
      v33 = (double)(int)a1[4] / v28;
      v34 = (double)(int)a1[5] / v28;
      v31 = (const char *)a1[1];
      v32 = (_OWORD *)a1[2];
      v26 = "ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
      v30 = *a1;
    }
    else
    {
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr((char)a3);
      v16 = (double)(int)a1[3];
      v17 = *a1;
      v18 = (double)(int)a1[4] / v16;
      v19 = (double)(int)a1[5] / v16;
      v20 = (double)(int)a1[6] / v16;
      v21 = (double)(int)a1[7] / v16;
      if ((a3 & 0x20) != 0 || !v13)
      {
        syslog(3, "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d", CurrTime, a2, LevelStr, v45, v17);
        return 0;
      }
      v22 = a2;
      printf("%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d\n", CurrTime, a2, LevelStr, (const char *)v45, v17, a1[1], a1[2], v18, v19, v20, v21, a1[8], a1[9], *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), a1[14]);
      v23 = (_OWORD *)AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(v11);
      v25 = (double)(int)a1[3];
      v43 = *((_QWORD *)a1 + 6);
      v44 = a1[14];
      v41 = a1[9];
      v42 = *((_QWORD *)a1 + 5);
      v40 = a1[8];
      v38 = (double)(int)a1[6] / v25;
      v39 = (double)(int)a1[7] / v25;
      v36 = (double)(int)a1[4] / v25;
      v37 = (double)(int)a1[5] / v25;
      *(_QWORD *)&v34 = a1[1];
      *(_QWORD *)&v35 = a1[2];
      v32 = v45;
      *(_QWORD *)&v33 = *a1;
      v30 = v22;
      v31 = v24;
      v26 = "%lld %d AVE %s: ANFD %s | %d %d | %d | %f %f %f %f | %d %d | %lld %lld %d";
    }
    syslog(3, v26, v23, v30, v31, v32, *(_QWORD *)&v33, *(_QWORD *)&v34, *(_QWORD *)&v35, *(_QWORD *)&v36, *(_QWORD *)&v37, *(_QWORD *)&v38, *(_QWORD *)&v39, v40, v41, v42, v43, v44);
  }
  return 0;
}

uint64_t AVE_ANFD_PrintInfo(unsigned int *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v12;
  uint64_t v13;

  if (!a1)
    return 4294966295;
  if (a2 < 1)
    return 0;
  v12 = a1;
  v13 = a2;
  do
  {
    AVE_ANFD_Print(v12, a3, a4, a5, a6, a6, a7, a8);
    v12 += 16;
    --v13;
  }
  while (v13);
  return 0;
}

uint64_t AVE_ANFD_GetInfo(const __CFDictionary *a1, void *a2, _DWORD *a3)
{
  uint64_t v6;
  const __CFArray *Value;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  const char *v13;

  if (a1 && a2 && a3 && (v6 = *a3, (int)v6 > 0))
  {
    bzero(a2, v6 << 6);
    Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("StabilizedDetectedFacesArray"));
    if (Value)
      return AVE_ANFD_RetrieveArray(Value, a2, a3);
    else
      return 4294966288;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x2Fu, 6))
    {
      v9 = AVE_Log_CheckConsole(0x2Fu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(6);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 47, LevelStr, "AVE_ANFD_GetInfo", 362, "pProperty != NULL && pInfo != NULL && pNum != NULL && *pNum > 0", a1, a2, a3);
        v12 = AVE_GetCurrTime();
        v13 = AVE_Log_GetLevelStr(6);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 47, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 47, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CalcBufNumOfMBInputCtrl(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 == 1)
    return a3;
  else
    return 0;
}

uint64_t AVE_CalcBufSizeOfMBInputCtrl(int a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = ((a2 + 31) & 0xFFFFFFE0) * ((a3 + 31) >> 5);
  v4 = ((a2 + 15) & 0xFFFFFFF0) * ((a3 + 15) >> 4);
  if (a1)
    v4 = 0;
  if (a1 != 1)
    v3 = v4;
  return (v3 + 4095) & 0xFFFFF000;
}

BOOL AVE_CalcBufNumOfMultiPassStats(int a1, int a2, int a3)
{
  return a2 > 1 && a3 > 0 && a1 == 1;
}

uint64_t AVE_CalcBufSizeOfMultiPassStats(int a1, int a2)
{
  unsigned int v2;

  if (a1)
    v2 = 17314;
  else
    v2 = 1574;
  if (a2)
    return v2 + 264;
  else
    return v2;
}

uint64_t AVE_CalcBufSizeOfParameterSet(int a1, int a2)
{
  unsigned int v2;

  v2 = a2 << 10;
  if (a1 != 1)
    v2 = 0;
  if (a1)
    return v2;
  else
    return 512;
}

uint64_t AVE_CFArray_AddSInt32(int a1, __CFArray *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  int valuePtr;

  valuePtr = a1;
  if (a2)
  {
    v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v10 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddSInt32", 88, "pNum != __null", valuePtr, a2);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %d %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xFu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v8, 15, v9, "AVE_CFArray_AddSInt32", 84, "pArray != __null", a1, 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddSInt64(uint64_t a1, __CFArray *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t valuePtr;

  valuePtr = a1;
  if (a2)
  {
    v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v10 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddSInt64", 115, "pNum != __null", valuePtr, a2);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lld %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xFu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p\n", v8, 15, v9, "AVE_CFArray_AddSInt64", 111, "pArray != __null", a1, 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lld %p", v8, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddFloat64(double a1, __CFArray *a2)
{
  CFNumberRef v4;
  CFNumberRef v5;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  double valuePtr;

  valuePtr = a1;
  if (a2)
  {
    v4 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
    if (v4)
    {
      v5 = v4;
      CFArrayAppendValue(a2, v4);
      CFRelease(v5);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v10 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddFloat64", 143, "pNum != __null", a1, a2);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", CurrTime);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xFu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddFloat64", 139, "pArray != __null", a1, 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_AddDouble(double a1, __CFArray *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  double valuePtr;

  valuePtr = a1;
  if (a2)
  {
    v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a2, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v10 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFArray_AddDouble", 170, "pNum != __null", valuePtr, a2);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %lf %p", CurrTime);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xFu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p\n", v8, 15, v9, "AVE_CFArray_AddDouble", 166, "pArray != __null", a1, 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %lf %p", v8);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFArray_GetChar(CFArrayRef theArray, CFIndex idx, char *a3)
{
  int v4;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberCharType, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex)
        v16 = CFGetTypeID(ValueAtIndex);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      v17 = -1;
      goto LABEL_24;
    }
    v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetChar", 203, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetChar", 196, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt16(CFArrayRef theArray, CFIndex idx, __int16 *a3)
{
  int v4;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex)
        v16 = CFGetTypeID(ValueAtIndex);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      v17 = -1;
      goto LABEL_24;
    }
    v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt16", 234, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt16", 227, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt32(CFArrayRef theArray, CFIndex idx, int *a3)
{
  int v4;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex)
        v16 = CFGetTypeID(ValueAtIndex);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      v17 = -1;
      goto LABEL_24;
    }
    v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt32", 265, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt32", 258, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetSInt64(CFArrayRef theArray, CFIndex idx, uint64_t *a3)
{
  int v4;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  v4 = idx;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex)
        v16 = CFGetTypeID(ValueAtIndex);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        v17 = -1;
        goto LABEL_24;
      }
    }
    else if (!ValueAtIndex)
    {
      v17 = -1;
      goto LABEL_24;
    }
    v17 = CFGetTypeID(ValueAtIndex);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetSInt64", 296, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetSInt64", 289, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFArray_GetFloat64(CFArrayRef theArray, CFIndex idx, double *a3)
{
  int v4;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  uint64_t result;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;
  uint64_t valuePtr;

  v4 = idx;
  valuePtr = 0;
  if (theArray && (idx & 0x80000000) == 0 && a3)
  {
    *a3 = 0.0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, idx);
    if (ValueAtIndex)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(ValueAtIndex))
      {
        if (CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &valuePtr))
          result = 0;
        else
          result = 4294966288;
        *(_QWORD *)a3 = valuePtr;
        return result;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (ValueAtIndex)
        v16 = CFGetTypeID(ValueAtIndex);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!ValueAtIndex)
      {
        v17 = -1;
        goto LABEL_25;
      }
    }
    else if (!ValueAtIndex)
    {
      v17 = -1;
      goto LABEL_25;
    }
    v17 = CFGetTypeID(ValueAtIndex);
LABEL_25:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %d %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFArray_GetFloat64", 328, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theArray, v4, a3, ValueAtIndex, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v10, 15, v11, "AVE_CFArray_GetFloat64", 321, "pArray != __null && idx >= 0 && pVal != __null", theArray, v4, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_AddBool(const __CFString *key, int a2, CFMutableDictionaryRef theDict)
{
  const void **v6;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  const char *v12;

  if (key && theDict)
  {
    v6 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a2)
      v6 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionaryAddValue(theDict, key, *v6);
    return 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v8 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddBool", 383, "pKey != __null && pDict != __null", key, a2, theDict);
        v11 = AVE_GetCurrTime();
        v12 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v11, 15, v12);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", CurrTime, 15, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddDouble(const __CFString *a1, double a2, __CFDictionary *a3)
{
  CFNumberRef v6;
  CFNumberRef v7;
  int v9;
  __uint64_t v10;
  const char *v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  double valuePtr;

  valuePtr = a2;
  if (a1 && a3)
  {
    v6 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v12 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddDouble", 470, "pNum != __null", a1, valuePtr, a3);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lf %p", CurrTime, 15);
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v9 = AVE_Log_CheckConsole(0xFu);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p\n", v10, 15, v11, "AVE_CFDict_AddDouble", 466, "pKey != __null && pDict != __null", a1, a2, a3);
        v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lf %p", v10, 15);
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_AddSInt64(const __CFString *a1, uint64_t a2, __CFDictionary *a3)
{
  CFNumberRef v6;
  CFNumberRef v7;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t valuePtr;

  valuePtr = a2;
  if (a1 && a3)
  {
    v6 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(a3, a1, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xFu, 4))
      {
        v13 = AVE_Log_CheckConsole(0xFu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p\n", CurrTime, 15, LevelStr, "AVE_CFDict_AddSInt64", 591, "pNum != __null", a1, valuePtr, a3);
          v16 = AVE_GetCurrTime();
          v18 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", v16, 15, v18);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFNumber %p %lld %p", CurrTime, 15, LevelStr);
        }
      }
      return 4294966293;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v9 = AVE_Log_CheckConsole(0xFu);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p\n", v10, 15, v11, "AVE_CFDict_AddSInt64", 587, "pKey != __null && pDict != __null", a1, a2, a3);
        v12 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v12, 15, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %lld %p", v10, 15, v11);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_CFDict_GetBool(CFDictionaryRef theDict, const __CFString *key, BOOL *a3)
{
  const __CFBoolean *Value;
  CFTypeID TypeID;
  int v8;
  uint64_t result;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v17;
  CFTypeID v18;
  const char *v19;

  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        v8 = CFBooleanGetValue(Value);
        result = 0;
        *a3 = v8 != 0;
        return result;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v14 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v14)
    {
      if (Value)
        v17 = CFGetTypeID(Value);
      else
        v17 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v17);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v18 = -1;
        goto LABEL_24;
      }
    }
    else if (!Value)
    {
      v18 = -1;
      goto LABEL_24;
    }
    v18 = CFGetTypeID(Value);
LABEL_24:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFBoolean %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetBool", 631, "pBool != __null && CFBooleanGetTypeID() == CFGetTypeID(pBool)", theDict, key, a3, Value, v18);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v10 = AVE_Log_CheckConsole(0xFu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v11, 15, v12, "AVE_CFDict_GetBool", 617, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v13 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 15, v19);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v11, 15, v12);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetChar(CFDictionaryRef theDict, const __CFString *key, char *a3)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberCharType, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value)
        v16 = CFGetTypeID(Value);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      v17 = -1;
      goto LABEL_26;
    }
    v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetChar", 667, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetChar", 653, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetDouble(CFDictionaryRef theDict, const __CFString *key, double *a3)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  if (theDict && key && a3)
  {
    *a3 = 0.0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberDoubleType, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value)
        v16 = CFGetTypeID(Value);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      v17 = -1;
      goto LABEL_26;
    }
    v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetDouble", 743, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetDouble", 729, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt16(CFDictionaryRef theDict, const __CFString *key, __int16 *a3)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt16Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value)
        v16 = CFGetTypeID(Value);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      v17 = -1;
      goto LABEL_26;
    }
    v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt16", 818, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt16", 804, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt32(CFDictionaryRef theDict, const __CFString *key, int *a3)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt32Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value)
        v16 = CFGetTypeID(Value);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      v17 = -1;
      goto LABEL_26;
    }
    v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt32", 856, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt32", 842, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

uint64_t AVE_CFDict_GetSInt64(CFDictionaryRef theDict, const __CFString *key, uint64_t *a3)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  int v9;
  __uint64_t v10;
  const char *v11;
  __uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  CFTypeID v16;
  CFTypeID v17;
  const char *v18;

  if (theDict && key && a3)
  {
    *a3 = 0;
    if (!CFDictionaryContainsKey(theDict, key))
      return 4294966288;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        if (CFNumberGetValue(Value, kCFNumberSInt64Type, a3))
          return 0;
        else
          return 4294966288;
      }
    }
    if (!AVE_Log_CheckLevel(0xFu, 4))
      return 4294966296;
    v13 = AVE_Log_CheckConsole(0xFu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      if (Value)
        v16 = CFGetTypeID(Value);
      else
        v16 = -1;
      printf("%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld\n", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v16);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!Value)
      {
        v17 = -1;
        goto LABEL_26;
      }
    }
    else if (!Value)
    {
      v17 = -1;
      goto LABEL_26;
    }
    v17 = CFGetTypeID(Value);
LABEL_26:
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get CFNumber %p %p %p %p %ld", CurrTime, 15, LevelStr, "AVE_CFDict_GetSInt64", 894, "pNum != __null && CFNumberGetTypeID() == CFGetTypeID(pNum)", theDict, key, a3, Value, v17);
    return 4294966296;
  }
  if (AVE_Log_CheckLevel(0xFu, 4))
  {
    v9 = AVE_Log_CheckConsole(0xFu);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(4);
    if (v9)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v10, 15, v11, "AVE_CFDict_GetSInt64", 880, "pDict != __null && pKey != __null && pVal != __null", theDict, key, a3);
      v12 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v12, 15, v18);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v10, 15, v11);
    }
  }
  return 4294966295;
}

const char *AVE_CFStr_GetStr(const __CFString *a1, char *a2, int a3)
{
  const char *result;
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v10;
  const char *v11;

  if (a1)
  {
    result = CFStringGetCStringPtr(a1, 0);
    if (a3 >= 1 && a2 && !result)
    {
      CFStringGetCString(a1, a2, a3, 0);
      return a2;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xFu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xFu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 15, LevelStr, "AVE_CFStr_GetStr", 916, "pStr != __null", 0, a2, a3);
        v10 = AVE_GetCurrTime();
        v11 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v10, 15, v11);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 15, LevelStr);
      }
    }
    return 0;
  }
  return result;
}

char **AVE_GetSurfaceCfg(int a1)
{
  if (a1 >= 40)
    return 0;
  else
    return &(&gs_saAVE_SurfaceCfg)[2 * a1];
}

char *AVE_DevID2Type(int a1)
{
  char *result;

  result = AVE_DevCap_Find(a1);
  if (result)
    return (char *)*((unsigned int *)result + 1);
  return result;
}

uint64_t AVE_TimeStats_Create(int a1, unsigned int a2, _QWORD *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v27;

  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v6 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %d %d %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Create", a1, a2, 0);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d %d %p", CurrTime);
  }
  if ((a2 & 0x80000000) != 0 || !a3)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v16 = AVE_Log_CheckConsole(0x3Cu);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p\n", v17, 60, v18, "AVE_TimeStats_Create", 29, "num >= 0 && ppTS != __null", a1, a2, a3);
        v17 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %d %p", v17, 60);
    }
    v10 = 0;
    v11 = 4294966295;
  }
  else
  {
    v9 = malloc_type_malloc(0xE8uLL, 0x1020040B8ADF5CEuLL);
    if (v9)
    {
      v10 = v9;
      v11 = AVE_TimeStats_Init(v9, a1, a2);
      if ((_DWORD)v11)
      {
        if (AVE_Log_CheckLevel(0x3Cu, 4))
        {
          v12 = AVE_Log_CheckConsole(0x3Cu);
          v13 = AVE_GetCurrTime();
          v14 = AVE_Log_GetLevelStr(4);
          if (v12)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d\n", v13, 60, v14, "AVE_TimeStats_Create", 37, "ret == 0", v10, a1, a2, v11);
            v15 = AVE_GetCurrTime();
            v27 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v15, 60, v27);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to initialize time stats %p %d %d %d", v13, 60, v14);
          }
        }
        AVE_TimeStats_Uninit(v10);
        free(v10);
      }
      else
      {
        *a3 = v10;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        v19 = AVE_Log_CheckConsole(0x3Cu);
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p\n", v20, 60, v21, "AVE_TimeStats_Create", 33, "pTS != __null", a1, a2, a3);
          v20 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create time stats %d %d %p", v20, 60);
      }
      v10 = 0;
      v11 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v22 = AVE_Log_CheckConsole(0x3Cu);
    v23 = AVE_GetCurrTime();
    v24 = AVE_Log_GetLevelStr(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s Exit %d %d %p %d\n", v23, 60, v24, "AVE_TimeStats_Create", a1, a2, v10, v11);
      v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v25, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d %d %p %d", v23, 60);
    }
  }
  return v11;
}

uint64_t AVE_TimeStats_Init(_OWORD *a1, int a2, unsigned int a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  void *v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;

  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v6 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %d\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Init", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %d", CurrTime);
  }
  if (!a1 || (a3 & 0x80000000) != 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v11 = AVE_Log_CheckConsole(0x3Cu);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d\n", v12, 60, v13, "AVE_TimeStats_Init", 103, "pTS != __null && num >= 0", a1, a2, a3);
        v12 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d", v12, 60);
    }
    v10 = 4294966295;
  }
  else
  {
    *((_QWORD *)a1 + 28) = 0;
    a1[12] = 0u;
    a1[13] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
    pthread_mutex_init((pthread_mutex_t *)((char *)a1 + 136), 0);
    if (!a3)
      a3 = 2;
    v9 = malloc_type_malloc(16 * a3, 0x1000040451B5BE8uLL);
    if (v9)
    {
      v10 = 0;
      *(_DWORD *)a1 = a2;
      *((_DWORD *)a1 + 1) = a3;
      *((_QWORD *)a1 + 1) = v9;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        v14 = AVE_Log_CheckConsole(0x3Cu);
        v15 = AVE_GetCurrTime();
        v16 = AVE_Log_GetLevelStr(4);
        if (v14)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d\n", v15, 60, v16, "AVE_TimeStats_Init", 116, "pTP != __null", a1, a2, a3);
          v15 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory of time pair %p %d %d", v15, 60);
      }
      pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
      v10 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v17 = AVE_Log_CheckConsole(0x3Cu);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(6);
    if (v17)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %d %d\n", v18, 60, v19, "AVE_TimeStats_Init", a1, a2, a3, v10);
      v20 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v20);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %d %d", v18);
    }
  }
  return v10;
}

uint64_t AVE_TimeStats_Uninit(_OWORD *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  const char *v16;
  const char *v17;

  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v2 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Uninit", a1);
      v5 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v16, "AVE_TimeStats_Uninit", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Uninit", a1);
    }
  }
  if (a1)
  {
    v6 = (void *)*((_QWORD *)a1 + 1);
    if (v6)
    {
      free(v6);
      *((_QWORD *)a1 + 1) = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1 + 136));
    v7 = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[13] = 0u;
    *((_QWORD *)a1 + 28) = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v8 = AVE_Log_CheckConsole(0x3Cu);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v9, 60, v10, "AVE_TimeStats_Uninit", 157, "pTS != __null", 0);
        v9 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v9);
    }
    v7 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v11 = AVE_Log_CheckConsole(0x3Cu);
    v12 = AVE_GetCurrTime();
    v13 = AVE_Log_GetLevelStr(6);
    if (v11)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
      v14 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v14, 60, v17, "AVE_TimeStats_Uninit", a1, v7);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v12, 60, v13, "AVE_TimeStats_Uninit", a1, v7);
    }
  }
  return v7;
}

uint64_t AVE_TimeStats_Destroy(_OWORD *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  const char *v15;
  const char *v16;

  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v2 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Destroy", a1);
      v5 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Destroy", a1);
    }
  }
  if (a1)
  {
    v6 = AVE_TimeStats_Uninit(a1);
    free(a1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v7 = AVE_Log_CheckConsole(0x3Cu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Destroy", 73, "pTS != __null", 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v10 = AVE_Log_CheckConsole(0x3Cu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
      v13 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Destroy", a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Destroy", a1, v6);
    }
  }
  return v6;
}

uint64_t AVE_TimeStats_Restart(uint64_t a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  const char *v15;
  const char *v16;

  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v2 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Restart", (const void *)a1);
      v5 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v15, "AVE_TimeStats_Restart", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Restart", (const void *)a1);
    }
  }
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    ++*(_DWORD *)(a1 + 16);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
    v6 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v7 = AVE_Log_CheckConsole(0x3Cu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v8, 60, v9, "AVE_TimeStats_Restart", 190, "pTS != __null", 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v8);
    }
    v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Cu, 6))
  {
    v10 = AVE_Log_CheckConsole(0x3Cu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
      v13 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 60, v16, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 60, v12, "AVE_TimeStats_Restart", (const void *)a1, v6);
    }
  }
  return v6;
}

uint64_t AVE_TimeStats_AddStartTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  const char *v25;
  const char *v26;

  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v6 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", CurrTime, 60, LevelStr, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", CurrTime);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v12 = AVE_Log_CheckConsole(0x3Cu);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v13, 60, v14, "AVE_TimeStats_AddStartTime", 222, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v15, 60, v25);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v13, 60, v14);
      }
    }
    v11 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      v10 = *(_DWORD *)(a1 + 16);
      if (a2 == 5)
        *(_QWORD *)(v9 + 16 * (v10 % *(_DWORD *)(a1 + 4))) = a3;
      v11 = 0;
      if (!v10)
        *(_QWORD *)(a1 + 16 * a2 + 24) = a3;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        v16 = AVE_Log_CheckConsole(0x3Cu);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v17, 60, v18, "AVE_TimeStats_AddStartTime", 227, "pTS->psTP != __null", (const void *)a1, a2, a3);
          v19 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v19, 60, v26);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v17, 60, v18);
        }
      }
      v11 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v20 = AVE_Log_CheckConsole(0x3Cu);
    v21 = AVE_GetCurrTime();
    v22 = AVE_Log_GetLevelStr(7);
    if (v20)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v21, 60, v22, "AVE_TimeStats_AddStartTime", (const void *)a1, a2, a3, v11);
      v23 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v23, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v21, 60);
    }
  }
  return v11;
}

uint64_t AVE_TimeStats_AddEndTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;

  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v6 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %d %lld\n", CurrTime, 60, LevelStr, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %d %lld", CurrTime);
  }
  if (!a1 || a2 > 6 || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v11 = AVE_Log_CheckConsole(0x3Cu);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld\n", v12, 60, v13, "AVE_TimeStats_AddEndTime", 269, "pTS != __null && 0 <= pos && pos < AVE_TimeStats_Pos_Max && ts >= 0", (const void *)a1, a2, a3);
        v14 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v14, 60, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %lld", v12, 60, v13);
      }
    }
    v10 = 4294966295;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      if (a2 == 5)
        *(_QWORD *)(v9 + 16 * (*(_DWORD *)(a1 + 16) % *(_DWORD *)(a1 + 4)) + 8) = a3;
      v10 = 0;
      *(_QWORD *)(a1 + 16 * a2 + 32) = a3;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x3Cu, 4))
      {
        v15 = AVE_Log_CheckConsole(0x3Cu);
        v16 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        if (v15)
        {
          printf("%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld\n", v16, 60, v17, "AVE_TimeStats_AddEndTime", 274, "pTS->psTP != __null", (const void *)a1, a2, a3);
          v18 = AVE_GetCurrTime();
          v25 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v18, 60, v25);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p %d %lld", v16, 60, v17);
        }
      }
      v10 = 4294966285;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
  }
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v19 = AVE_Log_CheckConsole(0x3Cu);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(7);
    if (v19)
    {
      printf("%lld %d AVE %s: %s Exit %p %d %lld %d\n", v20, 60, v21, "AVE_TimeStats_AddEndTime", (const void *)a1, a2, a3, v10);
      v22 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v22, 60);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d %lld %d", v20, 60);
    }
  }
  return v10;
}

uint64_t AVE_TimeStats_Calc(uint64_t a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  __uint64_t v27;
  const char *v29;
  const char *v30;

  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v2 = AVE_Log_CheckConsole(0x3Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 60, LevelStr, "AVE_TimeStats_Calc", (const void *)a1);
      v5 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 60, v29, "AVE_TimeStats_Calc", (const void *)a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 60, LevelStr, "AVE_TimeStats_Calc", (const void *)a1);
    }
  }
  if (!a1)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v18 = AVE_Log_CheckConsole(0x3Cu);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", v19, 60, v20, "AVE_TimeStats_Calc", 313, "pTS != __null", 0);
        v19 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", v19);
    }
    v17 = 4294966295;
    goto LABEL_38;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v21 = AVE_Log_CheckConsole(0x3Cu);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong state %p\n", v22, 60, v23, "AVE_TimeStats_Calc", 318, "pTS->psTP != __null", (const void *)a1);
        v22 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong state %p", v22);
    }
    v17 = 4294966285;
    goto LABEL_37;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v7 = (uint64_t *)(a1 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 4);
  if (v8 < (int)v9)
    v10 = (v8 + 1);
  else
    v10 = v9;
  if ((int)v10 < 1)
    goto LABEL_32;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = (_QWORD *)(v6 + 8);
  do
  {
    v16 = *v15 - *(v15 - 1);
    if (v16 < 1)
      goto LABEL_21;
    if (v13)
    {
      if (v16 < v12)
      {
        *v7 = v16;
        v12 = v16;
      }
      if (v16 <= v11)
        goto LABEL_20;
    }
    else
    {
      *v7 = v16;
      v12 = v16;
    }
    *(_QWORD *)(a1 + 216) = v16;
    v11 = v16;
LABEL_20:
    v14 += v16;
    ++v13;
LABEL_21:
    v15 += 2;
    --v10;
  }
  while (v10);
  if (v13)
  {
    v17 = 0;
    *(_QWORD *)(a1 + 208) = v14 / v13;
    *(_DWORD *)(a1 + 224) = v13;
    goto LABEL_37;
  }
LABEL_32:
  v17 = 0;
LABEL_37:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
LABEL_38:
  if (AVE_Log_CheckLevel(0x3Cu, 7))
  {
    v24 = AVE_Log_CheckConsole(0x3Cu);
    v25 = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(7);
    if (v24)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
      v27 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v27, 60, v30, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v25, 60, v26, "AVE_TimeStats_Calc", (const void *)a1, v17);
    }
  }
  return v17;
}

uint64_t AVE_TimeStats_Print(unsigned int *a1, uint64_t a2, int a3, const void *a4, int a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  int v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v28;
  int v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  __uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(v45, 0, sizeof(v45));
  if (a1)
  {
    v10 = (char)a3;
    result = AVE_Log_CheckLevel(a2, (char)a3);
    if ((_DWORD)result)
    {
      AVE_ComposePosStr((uint64_t)a4, a5, (char *)v45, 32, v12, v13, v14, v15);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 34));
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v16 = AVE_Log_CheckConsole(a2);
        v17 = v16;
        if (a3 < 0)
        {
          if (v16 && (-a3 & 0x20) == 0)
            printf("TimeStats ID: %d %s | Session: %lld Process: %lld\n", *a1, (const char *)v45, *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 13));
          syslog(3, "TimeStats ID: %d %s | Session: %lld Process: %lld");
        }
        else
        {
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) == 0 && v17)
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld\n", CurrTime, a2, LevelStr, *a1, (const char *)v45, *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 13));
            CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Session: %lld Process: %lld", CurrTime);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v24 = AVE_Log_CheckConsole(a2);
        v25 = v24;
        if (a3 < 0)
        {
          if (!v24 || (-a3 & 0x20) != 0)
          {
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
          else
          {
            printf("TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", *a1, (const char *)v45, *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7), *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9), *((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11), *((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15));
            syslog(3, "TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", *a1, v45);
          }
        }
        else
        {
          v26 = AVE_GetCurrTime();
          v27 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v25)
          {
            v43 = *((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11);
            v44 = *((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15);
            v41 = *((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7);
            v42 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
            v39 = *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3);
            v40 = *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 5);
            v38 = *a1;
            v34 = a2;
            v36 = v27;
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld\n", v26, a2, v27, *a1, (const char *)v45, *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7), *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9), *((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11), *((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15));
            v26 = AVE_GetCurrTime();
            v28 = AVE_Log_GetLevelStr((char)a3);
            v43 = *((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11);
            v44 = *((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15);
            v41 = *((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7);
            v42 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
            v39 = *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3);
            v40 = *((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 5);
            v38 = *a1;
            v34 = a2;
            v36 = v28;
          }
          syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Open: %lld Close: %lld Prepare: %lld Start: %lld Stop: %lld Complete: %lld", v26, v34, v36, v38, v45, v39, v40, v41, v42, v43, v44);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v29 = AVE_Log_CheckConsole(a2);
        v30 = v29;
        if (a3 < 0)
        {
          if (v29 && (-a3 & 0x20) == 0)
            printf("TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", *a1, (const char *)v45, *((_QWORD *)a1 + 25), *((_QWORD *)a1 + 26), *((_QWORD *)a1 + 27), a1[56]);
          syslog(3, "TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d");
        }
        else
        {
          v31 = AVE_GetCurrTime();
          v32 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v30)
          {
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v31, a2, v32);
          }
          else
          {
            printf("%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d\n", v31, a2, v32, *a1, (const char *)v45, *((_QWORD *)a1 + 25), *((_QWORD *)a1 + 26), *((_QWORD *)a1 + 27), a1[56]);
            v33 = AVE_GetCurrTime();
            v37 = AVE_Log_GetLevelStr(v10);
            syslog(3, "%lld %d AVE %s: TimeStats ID: %d %s | Process: %lld - %lld - %lld Count: %d", v33, a2, v37);
          }
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 34));
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Cu, 4))
    {
      v20 = AVE_Log_CheckConsole(0x3Cu);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d\n", v21, 60, v22, "AVE_TimeStats_Print", 391, "pTS != __null", 0, a2, a3, a4, a5);
        v23 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v23, 60, v35, "AVE_TimeStats_Print");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %d %p %d", v21, 60, v22, "AVE_TimeStats_Print");
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_DW_Default(uint64_t a1)
{
  uint64_t i;
  __int128 v3;

  bzero((void *)a1, 0x588uLL);
  for (i = 112; i != 784; i += 112)
    *(_QWORD *)(a1 + i) = -1;
  *(_BYTE *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 1104) = -1;
  *(_QWORD *)&v3 = 0xC0000000CLL;
  *((_QWORD *)&v3 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 1128) = v3;
  *(_QWORD *)(a1 + 1144) = 0xC0000000CLL;
  *(_DWORD *)(a1 + 1152) = -13;
  *(_DWORD *)(a1 + 1184) = -1;
  *(_QWORD *)(a1 + 1192) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1200) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1208) = -1;
  *(_QWORD *)(a1 + 1248) = -1;
  *(_DWORD *)(a1 + 1256) = -1;
  *(_QWORD *)(a1 + 1264) = -1;
  *(_DWORD *)(a1 + 1272) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1280) = _Q0;
  *(_QWORD *)(a1 + 1304) = -1;
  *(_QWORD *)(a1 + 1312) = -1;
  *(_DWORD *)(a1 + 1320) = -1;
  *(_QWORD *)(a1 + 1348) = -1;
  *(_QWORD *)(a1 + 1356) = -1;
  *(_QWORD *)(a1 + 1364) = -1;
  *(_QWORD *)(a1 + 1372) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_DWORD *)(a1 + 1392) = -1;
  return 0;
}

uint64_t AVE_DW_RetrievePerf(_DWORD *a1)
{
  unsigned int v3[2];

  *(_QWORD *)v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_PerfFeatureOn", &v3[1]))
    a1[14] = v3[1];
  if (!AVE_DW_GetUInt32(0, "AVE_PerfFeatureOff", &v3[1]))
    a1[15] = v3[1];
  if (!AVE_DW_GetInt32(0, "AVE_InputQueueMaxCount", (int *)v3))
    a1[16] = v3[0];
  if (!AVE_DW_GetInt32(0, "AVE_MaximumRealTimeFrameRate", (int *)v3))
    a1[17] = v3[0];
  AVE_DW_RetrieveDPM(a1 + 18);
  return AVE_DW_RetrieveDLB(a1 + 26);
}

uint64_t AVE_DW_RetrieveDump(uint64_t a1)
{
  uint64_t Str;
  unsigned int v4;
  char __src[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)__src = 0u;
  v6 = 0u;
  if (!AVE_DW_GetUInt32(0, "AVE_DumpFeature", &v4))
    *(_DWORD *)(a1 + 784) = v4;
  if (!AVE_DW_GetUInt32(0, "AVE_DumpMode", &v4))
    *(_DWORD *)(a1 + 788) = v4;
  Str = AVE_DW_GetStr(0, "AVE_OutputPath", __src, 128);
  if (!(_DWORD)Str)
    strncpy((char *)(a1 + 792), __src, 0x7FuLL);
  return Str;
}

uint64_t AVE_DW_RetrieveLog(uint64_t a1)
{
  uint64_t Str;
  int v4;
  unint64_t v5;
  char __src[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v4 = 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__src = 0u;
  v7 = 0u;
  if (!AVE_DW_GetUInt64(0, "AVE_Verbose", &v5))
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)a1 |= 0x100u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_KernelVerbose", &v5))
  {
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)a1 |= 0x200u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_FirmwareVerbose", &v5))
  {
    *(_QWORD *)(a1 + 24) = v5;
    *(_DWORD *)a1 |= 0x300u;
  }
  if (!AVE_DW_GetUInt64(0, "AVE_AlgVerbose", &v5))
  {
    *(_QWORD *)(a1 + 32) = v5;
    *(_DWORD *)a1 |= 0x400u;
  }
  if (!AVE_DW_GetInt32(0, "AVE_LogConsole", &v4))
    *(_DWORD *)(a1 + 40) = v4;
  Str = AVE_DW_GetStr(0, "AVE_LogPath", __src, 128);
  if (!(_DWORD)Str)
    strncpy((char *)(a1 + 44), __src, 0x7FuLL);
  return Str;
}

uint64_t AVE_DW_RetrieveQP(_DWORD *a1)
{
  uint64_t result;
  int v3;

  v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPI", &v3))
    a1[282] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPP", &v3))
    a1[283] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_InitialQPB", &v3))
    a1[284] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_SoftMinQP", &v3))
    a1[285] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_SoftMaxQP", &v3))
    a1[286] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_HardMinQP", &v3))
    a1[287] = v3;
  result = AVE_DW_GetInt32(0, "AVE_HardMaxQP", &v3);
  if (!(_DWORD)result)
    a1[288] = v3;
  return result;
}

uint64_t AVE_DW_RetrieveRC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v6 = 0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  if (!AVE_DW_GetUInt64(0, "AVE_RCFeatureOn", &v4))
    *(_QWORD *)(a1 + 1160) = v4;
  if (!AVE_DW_GetUInt64(0, "AVE_RCFeatureOff", &v4))
    *(_QWORD *)(a1 + 1168) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_RCMode", &v6))
    *(_DWORD *)(a1 + 1176) = v6;
  if (!AVE_DW_GetInt32(0, "AVE_Bitrate", &v6))
    *(_DWORD *)(a1 + 1180) = v6;
  if (!AVE_DW_GetInt32(0, "AVE_Quality", &v6))
    *(_DWORD *)(a1 + 1184) = v6;
  if (!AVE_DW_GetDouble(0, "AVE_VBVBufferSize", (double *)&v3))
    *(_QWORD *)(a1 + 1192) = v3;
  if (!AVE_DW_GetDouble(0, "AVE_VBVInitialDelay", (double *)&v3))
    *(_QWORD *)(a1 + 1200) = v3;
  if (!AVE_DW_GetInt32(0, "AVE_LookAheadFrameCount", &v6))
    *(_DWORD *)(a1 + 1208) = v6;
  if (!AVE_DW_GetInt32(0, "AVE_Parallel_Limit", &v6))
    *(_DWORD *)(a1 + 1212) = v6;
  if (!AVE_DW_GetInt64(0, "AVE_Parallel_MinFrameCnt", &v5))
    *(_QWORD *)(a1 + 1216) = v5;
  result = AVE_DW_GetInt64(0, "AVE_Parallel_MinDuration", &v5);
  if (!(_DWORD)result)
    *(_QWORD *)(a1 + 1224) = v5;
  return result;
}

uint64_t AVE_DW_RetrieveQPMod(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_QPModFeatureOn", &v3))
    *(_DWORD *)(a1 + 1232) = v3;
  result = AVE_DW_GetUInt32(0, "AVE_QPModFeatureOff", &v3);
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 1236) = v3;
  return result;
}

double AVE_DW_RetrieveGOP(uint64_t a1)
{
  double result;
  double v3;
  unsigned int v4[2];

  v3 = 0.0;
  *(_QWORD *)v4 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_GOPFeatureOn", &v4[1]))
    *(_DWORD *)(a1 + 1240) = v4[1];
  if (!AVE_DW_GetUInt32(0, "AVE_GOPFeatureOff", &v4[1]))
    *(_DWORD *)(a1 + 1244) = v4[1];
  if (!AVE_DW_GetInt32(0, "AVE_BFrameNum", (int *)v4))
    *(_DWORD *)(a1 + 1248) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_TemporalLayerNum", (int *)v4))
    *(_DWORD *)(a1 + 1252) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_FrameRateTargetForAverageBitrate", (int *)v4))
    *(_DWORD *)(a1 + 1256) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_ExpectedFrameRate", (int *)v4))
    *(_DWORD *)(a1 + 1260) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_BaseFrameRate", (int *)v4))
    *(_DWORD *)(a1 + 1264) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_MaxKeyFrameInterval", (int *)v4))
    *(_DWORD *)(a1 + 1268) = v4[0];
  if (!AVE_DW_GetInt32(0, "AVE_StrictKeyFrameInterval", (int *)v4))
    *(_DWORD *)(a1 + 1272) = v4[0];
  if (!AVE_DW_GetDouble(0, "AVE_MaxKeyFrameIntervalDuration", &v3))
    *(double *)(a1 + 1280) = v3;
  if (!AVE_DW_GetDouble(0, "AVE_StrictKeyFrameIntervalDuration", &v3))
  {
    result = v3;
    *(double *)(a1 + 1288) = v3;
  }
  return result;
}

uint64_t AVE_DW_RetrieveRef(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  v3 = 0;
  if (!AVE_DW_GetUInt32(0, "AVE_RefFeatureOn", &v3))
    *(_DWORD *)(a1 + 1296) = v3;
  result = AVE_DW_GetUInt32(0, "AVE_RefFeatureOff", &v3);
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 1300) = v3;
  return result;
}

uint64_t AVE_DW_RetrieveMultipass(_DWORD *a1)
{
  uint64_t result;
  int v3;

  v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassMaxQPModLevel", &v3))
    a1[326] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassQPModLevel", &v3))
    a1[327] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MultiPassConstantQp", &v3))
    a1[328] = v3;
  result = AVE_DW_GetInt32(0, "AVE_MultiPassOptions", &v3);
  if (!(_DWORD)result)
    a1[329] = v3;
  return result;
}

uint64_t AVE_DW_RetrieveMCTF(_DWORD *a1)
{
  uint64_t result;
  int v3;

  v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFStrengthLevel", &v3))
    a1[330] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFStrengthDelta", &v3))
    a1[331] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFTogglePeriod", &v3))
    a1[332] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFISPGainThreshold", &v3))
    a1[333] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MCTFOnToOffPerfThreshold", &v3))
    a1[334] = v3;
  result = AVE_DW_GetInt32(0, "AVE_MCTFOffToOnPerfThreshold", &v3);
  if (!(_DWORD)result)
    a1[335] = v3;
  return result;
}

uint64_t AVE_DW_RetrieveAlg(uint64_t a1)
{
  unint64_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_Profile", &v4))
    *(_DWORD *)(a1 + 1096) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_Level", &v4))
    *(_DWORD *)(a1 + 1100) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_Tier", &v4))
    *(_DWORD *)(a1 + 1104) = v4;
  if (!AVE_DW_GetInt32(0, "AVE_ScalingMatrix", &v4))
    *(_DWORD *)(a1 + 1108) = v4;
  if (!AVE_DW_GetUInt64(0, "AVE_SEIFeatureOn", &v3))
    *(_QWORD *)(a1 + 1112) = v3;
  if (!AVE_DW_GetUInt64(0, "AVE_SEIFeatureOff", &v3))
    *(_QWORD *)(a1 + 1120) = v3;
  AVE_DW_RetrieveQP((_DWORD *)a1);
  AVE_DW_RetrieveRC(a1);
  AVE_DW_RetrieveQPMod(a1);
  AVE_DW_RetrieveGOP(a1);
  AVE_DW_RetrieveRef(a1);
  return AVE_DW_RetrieveMultipass((_DWORD *)a1);
}

uint64_t AVE_DW_RetrieveHw(_DWORD *a1)
{
  uint64_t result;
  int v3;

  v3 = 0;
  if (!AVE_DW_GetInt32(0, "AVE_SliceNum", &v3))
    a1[336] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MotionSearchRangeMode", &v3))
    a1[337] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_ThroughputMode", &v3))
    a1[338] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_MergeCandidateNum", &v3))
    a1[339] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_DeblockMode", &v3))
    a1[340] = v3;
  if (!AVE_DW_GetInt32(0, "AVE_SAOMode", &v3))
    a1[341] = v3;
  result = AVE_DW_GetInt32(0, "AVE_EdgeReplication", &v3);
  if (!(_DWORD)result)
    a1[342] = v3;
  return result;
}

uint64_t AVE_DW_Uninit(void)
{
  int v0;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v3;
  int v4;
  __uint64_t v5;
  const char *v6;
  __uint64_t v7;
  const char *v9;
  const char *v10;

  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v0 = AVE_Log_CheckConsole(0x2Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v0)
    {
      printf("%lld %d AVE %s: %s Enter\n", CurrTime, 44, LevelStr, "AVE_DW_Uninit");
      v3 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Enter", v3, 44, v9, "AVE_DW_Uninit");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter", CurrTime, 44, LevelStr, "AVE_DW_Uninit");
    }
  }
  if (AVE_Log_CheckLevel(0x2Cu, 7))
  {
    v4 = AVE_Log_CheckConsole(0x2Cu);
    v5 = AVE_GetCurrTime();
    v6 = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s Exit %d\n", v5, 44, v6, "AVE_DW_Uninit", 0);
      v7 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %d", v7, 44, v10, "AVE_DW_Uninit", 0);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %d", v5, 44, v6, "AVE_DW_Uninit", 0);
    }
  }
  return 0;
}

uint64_t AVE_EdgeReplication_DetermineMode(CVPixelBufferRef pixelBuffer, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _DWORD *a8, int a9)
{
  const void *v15;
  uint64_t v16;
  int v17;
  int v18;
  CFTypeRef v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const char *LevelStr;
  __uint64_t v38;
  const char *v40;
  uint64_t v41;
  __uint64_t CurrTime;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight[2];

  extraRowsOnBottom = 0;
  extraColumnsOnRight[0] = 0;
  if ((int)a3 <= 10 && (a4 & 1) != 0 || !a8[1] && !a8[3])
  {
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_56;
  }
  if (a9 == -1)
  {
    if ((_DWORD)a5)
    {
      LODWORD(v15) = 1;
      if (a6 == 2 && !a7)
      {
        v19 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8FA8], 0);
        v15 = v19;
        if (v19)
        {
          v20 = CFEqual(v19, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
          if ((int)a3 <= 5 && v20)
          {
            LODWORD(v15) = 0;
            v17 = 0;
            v18 = 0;
            v16 = 16;
            goto LABEL_56;
          }
          CFRelease(v15);
          LODWORD(v15) = 0;
        }
      }
    }
    else
    {
      LODWORD(v15) = 2;
    }
  }
  else
  {
    LODWORD(v15) = a9 + 3;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
  v21 = a2[6];
  if (v21)
  {
    v17 = 0;
    v22 = 1;
    if (v21 != 1 || !extraRowsOnBottom)
      goto LABEL_23;
  }
  else if (!extraRowsOnBottom)
  {
    v17 = 0;
    v22 = 1;
    goto LABEL_23;
  }
  v23 = a8[3];
  v24 = v23 != 0;
  v22 = v23 == 0;
  v17 = v24 << 16;
LABEL_23:
  if ((int)a3 < 11)
  {
    if ((int)a3 < 3)
    {
      v18 = 0;
    }
    else
    {
      if (a8[1] == 8u >> (a2[4] >> 1))
        v32 = 3328;
      else
        v32 = 0;
      if (a8[3] == 8u >> (a2[5] >> 1))
        v18 = v32 | 0x50000;
      else
        v18 = v32;
    }
  }
  else
  {
    v25 = a8[1];
    v26 = a2[4] >> 1;
    if (v25 > (int)(0xEu >> v26) || v25 < (int)(2u >> v26))
      v28 = 0;
    else
      v28 = 3328;
    v29 = a8[3];
    v30 = a2[5] >> 1;
    if (v29 > (int)(0xEu >> v30) || v29 < (int)(2u >> v30))
      v18 = v28;
    else
      v18 = v28 | 0x50000;
  }
  v33 = 0;
  switch((int)v15)
  {
    case 0:
      if ((v18 & 0x70000) != 0)
        goto LABEL_45;
      if (v22)
        v34 = 0;
      else
        v34 = v17;
      v33 = v18 & 0xFF00 | v34;
      break;
    case 1:
    case 2:
    case 7:
LABEL_45:
      v33 = v18 & 0x7FF00;
      break;
    case 4:
      v33 = v18 & 0xFF00;
      break;
    case 5:
      v33 = v18 & 0x70000;
      break;
    case 6:
      v33 = v17 | 2;
      if (v22)
        v33 = 0;
      break;
    default:
      break;
  }
  v16 = v33 | ((v33 & 0x10100) != 0);
LABEL_56:
  if (AVE_Log_CheckLevel(0xAu, 7))
  {
    v35 = (int)v15;
    v36 = AVE_Log_CheckConsole(0xAu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v36)
    {
      v41 = a4;
      printf("%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n\n", CurrTime, 10, LevelStr, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5, a6, a7, a9, *a8, a8[1], a8[2], a8[3], LODWORD(extraColumnsOnRight[0]), extraRowsOnBottom, v35,
        v17,
        v18,
        v16);
      v38 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", v38, 10, v40, "AVE_EdgeReplication_DetermineMode", 232, a3, v41, a5);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d | %d | %d %d %d %d %d | (%d %d %d %d) (%d %d) | %d %x %x %x\n", CurrTime, 10, LevelStr, "AVE_EdgeReplication_DetermineMode", 232, a3, a4, a5);
    }
  }
  return v16;
}

uint64_t AVE_EdgeReplication_FillPlaneRight(__CVBuffer *a1, unsigned int a2)
{
  size_t v5;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v5 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  CVPixelBufferGetHeightOfPlane(a1, a2);
  CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v5);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 4294966296;
}

uint64_t AVE_EdgeReplication_FillPlaneBottom(__CVBuffer *a1, unsigned int a2, int a3, uint64_t a4)
{
  char *BaseAddressOfPlane;
  unsigned int HeightOfPlane;
  unsigned int BytesPerRowOfPlane;
  int v11;
  char *v12;
  char *v13;
  size_t i;
  size_t j;
  size_t v17;
  size_t extraRowsOnTop;

  v17 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  CVPixelBufferGetWidthOfPlane(a1, a2);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  CVPixelBufferGetExtendedPixels(a1, 0, 0, &extraRowsOnTop, &v17);
  if (a2)
  {
    if (*(_DWORD *)(a4 + 12))
    {
      v11 = *(int *)(a4 + 20) >> 1;
      v17 >>= v11;
      extraRowsOnTop >>= v11;
    }
    else
    {
      v17 = 0;
    }
  }
  v12 = &BaseAddressOfPlane[(extraRowsOnTop + HeightOfPlane - 1) * BytesPerRowOfPlane];
  v13 = &v12[BytesPerRowOfPlane];
  if (a3)
  {
    if (v17)
    {
      for (i = 0; i < v17; ++i)
      {
        memcpy(v13, v12, BytesPerRowOfPlane);
        v13 += BytesPerRowOfPlane;
        v12 -= BytesPerRowOfPlane;
      }
    }
  }
  else if (v17)
  {
    for (j = 0; j < v17; ++j)
    {
      memcpy(v13, v12, BytesPerRowOfPlane);
      v13 += BytesPerRowOfPlane;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t AVE_EdgeReplication_Fill(__CVBuffer *a1, unsigned int a2, uint64_t a3)
{
  __int16 v4;
  signed int v6;
  int v7;
  signed int v8;

  v4 = a2;
  if ((a2 & 0x50000) == 0x10000 && *(int *)(a3 + 8) >= 1)
  {
    v6 = 0;
    v7 = HIWORD(a2) & 8;
    do
      AVE_EdgeReplication_FillPlaneBottom(a1, v6++, v7, a3);
    while (v6 < *(_DWORD *)(a3 + 8));
  }
  if ((v4 & 0x500) == 0x100 && *(int *)(a3 + 8) >= 1)
  {
    v8 = 0;
    do
      AVE_EdgeReplication_FillPlaneRight(a1, v8++);
    while (v8 < *(_DWORD *)(a3 + 8));
  }
  return 0;
}

char *AVE_DevCap_Find(int a1)
{
  char *result;

  if (a1 >= 31)
    result = 0;
  else
    result = (char *)&gsc_saAVE_DevCap + 64 * (uint64_t)a1;
  if (!*((_QWORD *)result + 2))
    AVE_DevCap_Find_cold_1();
  return result;
}

char *AVE_DevCap_FindByType(int a1)
{
  uint64_t v1;
  char *v2;

  v1 = 0;
  while (1)
  {
    v2 = (char *)&gsc_saAVE_DevCap + v1;
    if (*(_DWORD *)((char *)&gsc_saAVE_DevCap + v1 + 4) == a1)
      break;
    v1 += 64;
    if (v1 == 1984)
    {
      v2 = 0;
      break;
    }
  }
  if (!*((_QWORD *)v2 + 2))
    AVE_DevCap_FindByType_cold_1();
  return v2;
}

uint64_t AVE_DevCap_Type2Idx(uint64_t result, int a2)
{
  switch((int)result)
  {
    case 1:
      if (!a2)
        return 3;
      if (a2 != 1)
LABEL_8:
        AVE_DevCap_Type2Idx();
      return 4;
    case 2:
      return result;
    case 3:
      return 1;
    case 4:
      return 0;
    default:
      goto LABEL_8;
  }
}

char *AVE_DevCap_FindResolution(int a1, uint64_t a2, int a3)
{
  char *result;

  result = AVE_DevCap_Find(a1);
  if (result)
    return *(char **)(*(_QWORD *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 16);
  return result;
}

char *AVE_DevCap_FindPixelFmt(int a1, uint64_t a2, int a3)
{
  char *result;

  result = AVE_DevCap_Find(a1);
  if (result)
    return *(char **)(*(_QWORD *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 24);
  return result;
}

char *AVE_DevCap_FindSearchRange(int a1, uint64_t a2, int a3)
{
  char *result;

  result = AVE_DevCap_Find(a1);
  if (result)
    return *(char **)(*(_QWORD *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 32);
  return result;
}

char *AVE_DevCap_FindPerf(int a1, uint64_t a2, int a3)
{
  char *result;

  result = AVE_DevCap_Find(a1);
  if (result)
    return *(char **)(*(_QWORD *)&result[8 * (int)AVE_DevCap_Type2Idx(a2, a3) + 24] + 40);
  return result;
}

uint64_t AVE_USL_Surface::CreateDict(AVE_USL_Surface *this, int a2, int a3, int a4, __CFDictionary **a5, __CFDictionary **a6)
{
  int v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v25;
  const char *v26;

  v10 = (int)this;
  *a5 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v12 = Mutable;
    v13 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBBF10], v10, Mutable);
    v14 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBC020], a2, v12) + v13;
    v15 = v14 + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBC070], a3, v12);
    v16 = *MEMORY[0x1E0C85AD8];
    if (*MEMORY[0x1E0C85AD8] <= 0x4000uLL)
      LODWORD(v16) = 0x4000;
    v17 = (a4 + v16 - 1) & -(int)v16;
    if (!(v15 + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CBBEE0], v17, v12)))
    {
      result = 0;
      *a5 = v12;
      return result;
    }
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v22 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "CreateDict", 49, "ret == 0", v10, a2, a3, v17, v12);
        v25 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", v25, 76, v26, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to add keys %d %d 0x%x %d %p", CurrTime, 76, LevelStr, "AVE_USL_Surface");
      }
    }
    CFRelease(v12);
  }
  else if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    v19 = AVE_Log_CheckConsole(0x4Cu);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(4);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary\n", v20, 76, v21, "AVE_USL_Surface", "CreateDict", 36, "pDict != __null");
      v20 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFDictionary", v20);
  }
  return 4294966293;
}

uint64_t AVE_USL_Surface::CreateIOSurface(AVE_USL_Surface *this, int a2, int a3, int a4, IOSurfaceRef *a5, __IOSurface **a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  __CFDictionary *v21;
  IOSurfaceRef v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  const char *v28;
  const char *v29;
  const char *v30;
  __CFDictionary *v31;

  v10 = (int)this;
  v31 = 0;
  if (a4 >= 1 && a5)
  {
    *a5 = 0;
    v11 = AVE_USL_Surface::CreateDict(this, a2, a3, a4, &v31, a6);
    if ((_DWORD)v11)
    {
      v12 = v11;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        v13 = AVE_Log_CheckConsole(0x4Cu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v13)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "CreateIOSurface", 94, "ret == 0", v10, a2, a3, a4, v12);
          v16 = AVE_GetCurrTime();
          v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", v16, 76, v28, "AVE_USL_Surface");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface dictionary %d %d %d %d %d", CurrTime, 76, LevelStr, "AVE_USL_Surface");
        }
      }
    }
    else
    {
      v21 = v31;
      v22 = IOSurfaceCreate(v31);
      if (v22)
      {
        v12 = 0;
        *a5 = v22;
        if (!v21)
          return v12;
        goto LABEL_22;
      }
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        v23 = AVE_Log_CheckConsole(0x4Cu);
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d\n", v24, 76, v25, "AVE_USL_Surface", "CreateIOSurface", 99, "pSurface != __null", v10, a2, a3, a4);
          v26 = AVE_GetCurrTime();
          v30 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v26, 76, v30);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %d %d %d %d", v24, 76, v25);
        }
      }
      v12 = 4294966296;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v17 = AVE_Log_CheckConsole(0x4Cu);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p\n", v18, 76, v19, "AVE_USL_Surface", "CreateIOSurface", 88, "size > 0 && ppSurface != __null", v10, a2, a3, a4, a5);
        v20 = AVE_GetCurrTime();
        v29 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v20, 76, v29, "AVE_USL_Surface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %d %d %d %d %p", v18, 76, v19, "AVE_USL_Surface");
      }
    }
    v12 = 4294966295;
  }
  v21 = v31;
  if (v31)
LABEL_22:
    CFRelease(v21);
  return v12;
}

void AVE_USL_Surface::AVE_USL_Surface(AVE_USL_Surface *this)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
}

uint64_t AVE_USL_Surface::Create(AVE_USL_Surface *this, __IOSurface *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v13;
  CFStringRef v14;
  const char *v15;
  int AllocSize;
  uint64_t result;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v25;
  char cStr[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)cStr = 0u;
  v27 = 0u;
  if (a2)
  {
    if ((a3 & 8) == 0)
    {
LABEL_5:
      if (a4)
        LOBYTE(v15) = (_BYTE)a4;
      else
        v15 = "";
      AVE_SNPrintf((char *)this, 64, "%s", (uint64_t)a4, a5, a6, a7, a8, (char)v15);
      AllocSize = IOSurfaceGetAllocSize(a2);
      result = 0;
      *((_DWORD *)this + 18) = AllocSize;
      *((_QWORD *)this + 8) = a2;
      *((_QWORD *)this + 10) = a5;
      return result;
    }
    AVE_SNPrintf(cStr, 64, "%s%s%s", (uint64_t)a4, a5, a6, a7, a8, (char)"AVE2");
    v13 = CFStringCreateWithCString(0, cStr, 0);
    if (v13)
    {
      v14 = v13;
      IOSurfaceSetValue(a2, (CFStringRef)*MEMORY[0x1E0CBC048], v13);
      CFRelease(v14);
      goto LABEL_5;
    }
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v22 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v22)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create", 169, "pNameStr != __null", cStr);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create CFString %s", CurrTime, 76);
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v18 = AVE_Log_CheckConsole(0x4Cu);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx\n", v19, 76, v20, "AVE_USL_Surface", "Create", 160, "pSurface != __null", this, 0, a3, a4, a5);
        v21 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v21, 76, v25, "AVE_USL_Surface", "Create", 160);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %p 0x%llx %p 0x%llx", v19, 76, v20, "AVE_USL_Surface", "Create", 160);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_USL_Surface::Create(AVE_USL_Surface *this, AVE_USL_Surface *a2, int a3, int a4, int a5, __IOSurface **a6, const char *a7, uint64_t a8)
{
  int v13;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  __uint64_t v31;
  const char *v33;
  IOSurfaceRef v34;

  v13 = (int)a2;
  v34 = 0;
  if (a5 > 0)
  {
    v16 = *MEMORY[0x1E0C85AD8];
    if (*MEMORY[0x1E0C85AD8] <= 0x4000uLL)
      LODWORD(v16) = 0x4000;
    v17 = (a5 + v16 - 1) & -(int)v16;
    v18 = AVE_USL_Surface::CreateIOSurface(a2, a3, a4, v17, &v34, a6);
    if ((_DWORD)v18)
    {
      v22 = v18;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        v23 = AVE_Log_CheckConsole(0x4Cu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create", 262, "ret == 0", this, v13, a3, a4, v17, v22);
          v26 = AVE_GetCurrTime();
          v27 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", v26, 76, v27, "AVE_USL_Surface", "Create");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to create surface %p %d %d %d %d %d", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Create");
        }
      }
    }
    else
    {
      v22 = AVE_USL_Surface::Create(this, v34, (uint64_t)a6, a7, a8, v19, v20, v21);
      *((_QWORD *)this + 10) |= 4uLL;
      if (!(_DWORD)v22)
        return v22;
    }
    goto LABEL_17;
  }
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    v28 = AVE_Log_CheckConsole(0x4Cu);
    v29 = AVE_GetCurrTime();
    v30 = AVE_Log_GetLevelStr(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx\n", v29, 76, v30, "AVE_USL_Surface", "Create", 249, "size > 0", this, v13, a3, a4, a5, a6, a8);
      v31 = AVE_GetCurrTime();
      v33 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v31, 76, v33, "AVE_USL_Surface", "Create", 249);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d %d 0x%llx 0x%llx", v29, 76, v30, "AVE_USL_Surface", "Create", 249);
    }
    v22 = 4294966295;
LABEL_17:
    if (v34)
      CFRelease(v34);
    goto LABEL_19;
  }
  v22 = 4294966295;
LABEL_19:
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 18) = 0;
  return v22;
}

uint64_t AVE_USL_Surface::Destroy(AVE_USL_Surface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  const void *v11;
  const char *v13;

  if (*((_QWORD *)this + 8))
  {
    v2 = AVE_USL_Surface::Unlock(this);
    if ((_DWORD)v2)
    {
      v3 = v2;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        v4 = AVE_Log_CheckConsole(0x4Cu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Destroy", 323, "ret == 0", this, v3);
          v7 = AVE_GetCurrTime();
          v13 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", v7, 76, v13);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to do unlock %p %d", CurrTime, 76, LevelStr);
        }
      }
    }
    else
    {
      v11 = (const void *)*((_QWORD *)this + 8);
      if (v11)
      {
        CFRelease(v11);
        *((_QWORD *)this + 8) = 0;
      }
      v3 = 0;
      *(_BYTE *)this = 0;
      *((_DWORD *)this + 18) = 0;
      *((_QWORD *)this + 10) = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v8 = AVE_Log_CheckConsole(0x4Cu);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p\n", v9, 76, v10, "AVE_USL_Surface", "Destroy", 297, "m_pcSurface != __null", this);
        v9 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p", v9, 76);
    }
    return 4294966285;
  }
  return v3;
}

uint64_t AVE_USL_Surface::Unlock(AVE_USL_Surface *this)
{
  __IOSurface *v2;
  uint64_t result;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  const char *v8;

  v2 = (__IOSurface *)*((_QWORD *)this + 8);
  if (v2)
  {
    if ((*((_BYTE *)this + 89) & 1) != 0)
    {
      IOSurfaceUnlock(v2, 0, 0);
      result = 0;
      *((_QWORD *)this + 11) &= ~0x100uLL;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v4 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Unlock", 415, "m_pcSurface != __null", this, (const char *)this);
        v7 = AVE_GetCurrTime();
        v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", CurrTime, 76, LevelStr);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_USL_Surface::Print(AVE_USL_Surface *this, uint64_t a2, int a3, const char *a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __IOSurface *v15;
  int v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  __IOSurface *v20;
  IOSurfaceID v21;
  uint64_t v22;
  __IOSurface *v23;
  int v24;
  int32_t v25;
  const void *v26;
  IOSurfaceID ID;
  uint64_t v28;
  __IOSurface *BaseAddress;
  int v30;
  int32_t UseCount;
  __IOSurface *v32;
  __IOSurface *v33;
  uint64_t v34;
  __IOSurface *v35;
  __IOSurface *v36;
  __uint64_t v37;
  const char *v38;
  __IOSurface *v39;
  __IOSurface *v40;
  __IOSurface *v41;
  __IOSurface *v42;
  IOSurfaceID v44;
  unsigned int v45;
  char v46;
  _OWORD v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  memset(v47, 0, sizeof(v47));
  v46 = 0;
  v45 = 0;
  v10 = (char)a3;
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    AVE_ComposePosStr((uint64_t)a4, a5, (char *)v47, 32, v11, v12, v13, v14);
    v15 = (__IOSurface *)*((_QWORD *)this + 8);
    if (v15)
    {
      v45 = bswap32(IOSurfaceGetPixelFormat(v15));
      v46 = 0;
    }
    if (AVE_Log_CheckLevel(a2, v10))
    {
      v16 = AVE_Log_CheckConsole(a2);
      v17 = v16;
      if (a3 < 0)
      {
        if (!v16 || (-a3 & 0x20) != 0)
        {
          v34 = *((_QWORD *)this + 8);
          if (v34)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            v35 = (__IOSurface *)*((_QWORD *)this + 8);
            if (v35)
            {
              IOSurfaceGetUseCount(v35);
              v36 = (__IOSurface *)*((_QWORD *)this + 8);
              if (v36)
                IOSurfaceGetBaseAddress(v36);
            }
          }
        }
        else
        {
          v26 = (const void *)*((_QWORD *)this + 8);
          if (v26)
          {
            ID = IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            v28 = *((_QWORD *)this + 11);
            BaseAddress = (__IOSurface *)*((_QWORD *)this + 8);
            v30 = *((_DWORD *)this + 18);
            if (BaseAddress)
            {
              UseCount = IOSurfaceGetUseCount(BaseAddress);
              BaseAddress = (__IOSurface *)*((_QWORD *)this + 8);
              if (BaseAddress)
                BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
            }
            else
            {
              UseCount = 0;
            }
          }
          else
          {
            UseCount = 0;
            ID = 0;
            BaseAddress = 0;
            v30 = *((_DWORD *)this + 18);
            v28 = *((_QWORD *)this + 11);
          }
          printf("Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", (const char *)v47, (const char *)this, this, v26, ID, v30, v28, UseCount, BaseAddress, (const char *)&v45);
          v34 = *((_QWORD *)this + 8);
          if (v34)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            v41 = (__IOSurface *)*((_QWORD *)this + 8);
            if (v41)
            {
              IOSurfaceGetUseCount(v41);
              v42 = (__IOSurface *)*((_QWORD *)this + 8);
              if (v42)
                IOSurfaceGetBaseAddress(v42);
            }
          }
        }
        syslog(3, "Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v47, this, this, v34);
      }
      else
      {
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(v10);
        v20 = (__IOSurface *)*((_QWORD *)this + 8);
        if ((a3 & 0x20) != 0 || !v17)
        {
          if (v20)
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            v32 = (__IOSurface *)*((_QWORD *)this + 8);
            if (v32)
            {
              IOSurfaceGetUseCount(v32);
              v33 = (__IOSurface *)*((_QWORD *)this + 8);
              if (v33)
                IOSurfaceGetBaseAddress(v33);
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", CurrTime, a2, LevelStr, v47, this, this);
        }
        else
        {
          if (v20)
          {
            v21 = IOSurfaceGetID(v20);
            v22 = *((_QWORD *)this + 11);
            v23 = (__IOSurface *)*((_QWORD *)this + 8);
            v24 = *((_DWORD *)this + 18);
            if (v23)
            {
              v44 = v21;
              v25 = IOSurfaceGetUseCount(v23);
              v23 = (__IOSurface *)*((_QWORD *)this + 8);
              if (v23)
                v23 = (__IOSurface *)IOSurfaceGetBaseAddress(v23);
              v21 = v44;
            }
            else
            {
              v25 = 0;
            }
          }
          else
          {
            v25 = 0;
            v21 = 0;
            v23 = 0;
            v24 = *((_DWORD *)this + 18);
            v22 = *((_QWORD *)this + 11);
          }
          printf("%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s \n", CurrTime, a2, LevelStr, (const char *)v47, (const char *)this, this, v20, v21, v24, v22, v25, v23, (const char *)&v45);
          v37 = AVE_GetCurrTime();
          v38 = AVE_Log_GetLevelStr(v10);
          if (*((_QWORD *)this + 8))
          {
            IOSurfaceGetID(*((IOSurfaceRef *)this + 8));
            v39 = (__IOSurface *)*((_QWORD *)this + 8);
            if (v39)
            {
              IOSurfaceGetUseCount(v39);
              v40 = (__IOSurface *)*((_QWORD *)this + 8);
              if (v40)
                IOSurfaceGetBaseAddress(v40);
            }
          }
          syslog(3, "%lld %d AVE %s: Surface %s | Name: %s %p Surf %p ID %d Size %d OpFlag 0x%llx Cnt %d Addr %p PixelFmt %s ", v37, a2, v38, v47, this, this);
        }
      }
    }
  }
  return 0;
}

__IOSurface *AVE_USL_Surface::GetID(AVE_USL_Surface *this)
{
  __IOSurface *result;

  result = (__IOSurface *)*((_QWORD *)this + 8);
  if (result)
    return (__IOSurface *)IOSurfaceGetID(result);
  return result;
}

__IOSurface *AVE_USL_Surface::GetAddr(AVE_USL_Surface *this, int a2)
{
  __IOSurface *result;

  result = (__IOSurface *)*((_QWORD *)this + 8);
  if (result)
    return (__IOSurface *)((char *)IOSurfaceGetBaseAddress(result) + a2);
  return result;
}

uint64_t AVE_USL_Surface::Lock(AVE_USL_Surface *this)
{
  __IOSurface *v2;
  uint64_t result;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v7;
  const char *v8;

  v2 = (__IOSurface *)*((_QWORD *)this + 8);
  if (v2)
  {
    if ((*((_BYTE *)this + 89) & 1) != 0)
    {
      return 0;
    }
    else
    {
      IOSurfaceLock(v2, 0, 0);
      result = 0;
      *((_QWORD *)this + 11) |= 0x100uLL;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v4 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s\n", CurrTime, 76, LevelStr, "AVE_USL_Surface", "Lock", 390, "m_pcSurface != __null", this, (const char *)this);
        v7 = AVE_GetCurrTime();
        v8 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", v7, 76, v8);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | surface is not created %p %s", CurrTime, 76, LevelStr);
      }
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_USL_Surface::GetSize(AVE_USL_Surface *this)
{
  if (*((_QWORD *)this + 8))
    return *((unsigned int *)this + 18);
  else
    return 0;
}

uint64_t AVE_FmtConv_PlaneHTPC2Linear(unsigned __int8 *a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, char a9, unsigned int a10, unsigned __int8 *a11)
{
  htpc_decompress_plane((uint64_t)a1, a2, a11, a3, a4, a5, a6 & a7, a10, a9, a8);
  return 0;
}

uint64_t AVE_FmtConv_PlaneInterchange2Linear(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, interchange_compression *a8, int a9, int a10, unsigned int a11, int a12, uint64_t a13, uint64_t a14)
{
  interchange_compression *v15;

  LODWORD(v15) = (_DWORD)a8;
  interchange_decompress_plane(a1, a2, a14, a3, a4, a5, a6 & a7, a9, a11, a12, a13, v15);
  return 0;
}

uint64_t AVE_FmtConv_PlaneChromaPacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, char a5, int a6, int a7, unsigned __int8 *a8)
{
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  __int16 v44;
  size_t v47;
  _WORD __src[3];

  v8 = a2;
  LODWORD(v10) = 2 * a2 / 3;
  v11 = 2 * a2 % 3;
  if ((a5 & 1) == 0)
  {
    if (a3 < 1)
      return 0;
    v27 = 0;
    v28 = a7 * a3;
    if ((int)v10 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v29 = a6;
    v30 = a1;
    v31 = a3;
    while (1)
    {
      v32 = &a8[v27 * a7];
      if (v8 < 2)
      {
        v42 = 0;
        v35 = 0;
        v34 = 0;
        if (!v11)
          goto LABEL_36;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        do
        {
          v36 = *(_DWORD *)&v30[4 * v33];
          v37 = v36 & 0x3FF;
          if ((v33 & 1) != 0)
          {
            v41 = v34 + v28;
            *(_WORD *)&v32[2 * v34 + 2 * v28] = v37;
            v39 = 2;
            v40 = 1;
            v38 = v35;
          }
          else
          {
            *(_WORD *)&v32[2 * v35] = v37;
            v38 = v34 + v28;
            v39 = 1;
            v40 = 2;
            v41 = v35;
          }
          *(_WORD *)&v32[2 * v38] = (v36 >> 10) & 0x3FF;
          *(_WORD *)&v32[2 * v41 + 2] = (v36 >> 20) & 0x3FF;
          v35 += v40;
          v34 += v39;
          ++v33;
        }
        while (v10 != v33);
        v42 = v10;
        if (!v11)
          goto LABEL_36;
      }
      v43 = *(_DWORD *)&a1[4 * v42 + v27 * v29];
      v44 = v43 & 0x3FF;
      if ((v42 & 1) != 0)
      {
        *(_WORD *)&v32[2 * v34 + 2 * v28] = v44;
        if (v11 == 2)
          goto LABEL_35;
      }
      else
      {
        *(_WORD *)&v32[2 * v35] = v44;
        if (v11 == 2)
        {
          v35 = v34 + v28;
LABEL_35:
          *(_WORD *)&v32[2 * v35] = (v43 >> 10) & 0x3FF;
        }
      }
LABEL_36:
      ++v27;
      v30 += v29;
      if (v27 == v31)
        return 0;
    }
  }
  if (a3 >= 1)
  {
    v12 = 0;
    if ((int)v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v47 = 2 * (2 * a2 % 3 - 1) + 2;
    v14 = a6;
    v15 = a7;
    v16 = a3;
    v17 = a8 + 4;
    v18 = a1;
    do
    {
      if (v8 < 2)
      {
        v23 = 0;
        if (v11)
          goto LABEL_13;
      }
      else
      {
        v19 = v13;
        v20 = v18;
        v21 = v17;
        do
        {
          v22 = *(_DWORD *)v20;
          v20 += 4;
          *((_WORD *)v21 - 2) = v22 & 0x3FF;
          *((_WORD *)v21 - 1) = (v22 >> 10) & 0x3FF;
          *(_WORD *)v21 = (v22 >> 20) & 0x3FF;
          v21 += 6;
          --v19;
        }
        while (v19);
        v23 = v13;
        if (v11)
        {
LABEL_13:
          v24 = *(_DWORD *)&a1[4 * v23 + v12 * v14];
          __src[0] = v24 & 0x3FF;
          __src[1] = (v24 >> 10) & 0x3FF;
          __src[2] = (v24 >> 20) & 0x3FF;
          if (v11 >= 1)
          {
            v25 = a8;
            v26 = v15;
            memcpy(&a8[6 * v23 + (int)v12 * a7], __src, v47);
            v15 = v26;
            a8 = v25;
            v8 = a2;
          }
        }
      }
      ++v12;
      v17 += v15;
      v18 += v14;
    }
    while (v12 != v16);
  }
  return 0;
}

uint64_t AVE_FmtConv_PlaneLumaPacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, int a5, int a6, unsigned __int8 *a7)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  size_t v23;
  _WORD __src[3];

  if (a3 >= 1)
  {
    v9 = 0;
    v10 = (a2 / 3);
    v11 = a2 % 3;
    v23 = 2 * (a2 % 3 - 1) + 2;
    v12 = a5;
    v13 = a3;
    v14 = a7 + 4;
    v15 = a1;
    do
    {
      if (a2 < 3)
      {
        v20 = 0;
        if (v11)
          goto LABEL_9;
      }
      else
      {
        v16 = v10;
        v17 = v15;
        v18 = v14;
        do
        {
          v19 = *(_DWORD *)v17;
          v17 += 4;
          *((_WORD *)v18 - 2) = v19 & 0x3FF;
          *((_WORD *)v18 - 1) = (v19 >> 10) & 0x3FF;
          *(_WORD *)v18 = (v19 >> 20) & 0x3FF;
          v18 += 6;
          --v16;
        }
        while (v16);
        v20 = v10;
        if (v11)
        {
LABEL_9:
          v21 = *(_DWORD *)&a1[4 * v20 + v9 * v12];
          __src[0] = v21 & 0x3FF;
          __src[1] = (v21 >> 10) & 0x3FF;
          __src[2] = (v21 >> 20) & 0x3FF;
          if (v11 >= 1)
            memcpy(&a7[6 * v20 + (int)v9 * a6], __src, v23);
        }
      }
      ++v9;
      v14 += a6;
      v15 += v12;
    }
    while (v9 != v13);
  }
  return 0;
}

uint64_t AVE_FmtConv_PlanePacked2Linear(unsigned __int8 *a1, int a2, int a3, int a4, int a5, char a6, int a7, int a8, unsigned __int8 *a9)
{
  if (a5)
    AVE_FmtConv_PlaneChromaPacked2Linear(a1, a2, a3, a4, a6, a7, a8, a9);
  else
    AVE_FmtConv_PlaneLumaPacked2Linear(a1, a2, a3, a4, a7, a8, a9);
  return 0;
}

void AVE_FPS::AVE_FPS(AVE_FPS *this)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

uint64_t AVE_FPS::Uninit(AVE_FPS *this)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  void *v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  const char *v11;

  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v2 = AVE_Log_CheckConsole(0x49u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Uninit", this);
      v5 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v11, "AVE_FPS", "Uninit", this);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", CurrTime, 73, LevelStr, "AVE_FPS", "Uninit", this);
    }
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 1) = 0;
  }
  *(_DWORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v7 = AVE_Log_CheckConsole(0x49u);
    v8 = AVE_GetCurrTime();
    v9 = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v8, 73, v9, "AVE_FPS", "Uninit", this, 0);
      v8 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v8);
  }
  return 0;
}

void AVE_FPS::~AVE_FPS(AVE_FPS *this)
{
  AVE_FPS::Uninit(this);
}

uint64_t AVE_FPS::Init(AVE_FPS *this, int a2, unsigned int a3, int a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v27;
  const char *v28;

  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v8 = AVE_Log_CheckConsole(0x49u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", CurrTime, 73, LevelStr, "AVE_FPS", "Init", this, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", CurrTime, 73);
  }
  if ((a2 - 1) > 0x1869E || (a3 & 0x80000000) != 0)
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x49u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v15, 73, v16, "AVE_FPS", "Init", 56, "0 < fps && fps < 100000 && num >= 0", this, a2, a3, a4);
        v17 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v27, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v15, 73, v16, "AVE_FPS");
      }
    }
    v13 = 4294966295;
  }
  else
  {
    v11 = 2 * a2;
    if (a3)
      v11 = a3;
    if (v11 <= 2)
      a3 = 2;
    else
      a3 = v11;
    v12 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
    *((_QWORD *)this + 1) = v12;
    if (v12)
    {
      v13 = 0;
      *(_DWORD *)this = a3;
      *((_DWORD *)this + 8) = a4;
      *((double *)this + 5) = (double)a2;
      *((double *)this + 6) = (double)a2;
      *((double *)this + 7) = (double)a2;
      *((double *)this + 8) = (double)a2;
    }
    else
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        v18 = AVE_Log_CheckConsole(0x49u);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d\n", v19, 73, v20, "AVE_FPS", "Init", 66, "m_psTime != __null", this, a2, a3, a4);
          v21 = AVE_GetCurrTime();
          v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v21, 73, v28, "AVE_FPS");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to allocate memory of timestamp %p %d %d %d", v19, 73, v20, "AVE_FPS");
        }
      }
      v13 = 4294966293;
    }
  }
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v22 = AVE_Log_CheckConsole(0x49u);
    v23 = AVE_GetCurrTime();
    v24 = AVE_Log_GetLevelStr(6);
    if (v22)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d %d\n", v23, 73, v24, "AVE_FPS", "Init", this, a2, a3, a4, v13);
      v25 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v25, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d %d", v23, 73);
    }
  }
  return v13;
}

uint64_t AVE_FPS::Update(AVE_FPS *this, int a2, int a3, int a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  const char *v32;

  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v8 = AVE_Log_CheckConsole(0x49u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %d %d %d\n", CurrTime, 73, LevelStr, "AVE_FPS", "Update", this, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %d %d %d", CurrTime, 73);
  }
  if ((a2 - 1) > 0x1869E || a3 < 0)
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v16 = AVE_Log_CheckConsole(0x49u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d\n", v17, 73, v18, "AVE_FPS", "Update", 136, "0 < fps && fps < 100000 && num >= 0", this, a2, a3, a4);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v19, 73, v20, "AVE_FPS");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %d %d %d", v17, 73, v18, "AVE_FPS");
      }
    }
    v21 = 4294966295;
  }
  else
  {
    v11 = 2 * a2;
    if (a3)
      v11 = a3;
    if (v11 <= 2)
      a3 = 2;
    else
      a3 = v11;
    if (a3 > *(_DWORD *)this)
    {
      if (AVE_Log_CheckLevel(0x49u, 6))
      {
        v12 = AVE_Log_CheckConsole(0x49u);
        v13 = AVE_GetCurrTime();
        v14 = AVE_Log_GetLevelStr(6);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d\n", v13, 73, v14, "AVE_FPS", "Update", 151, this, a2, a3, *(_DWORD *)this);
          v15 = AVE_GetCurrTime();
          v32 = AVE_Log_GetLevelStr(6);
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v15, 73, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d allocate bigger memory of timestamp %p %d %d <- %d", v13, 73, v14);
        }
      }
      *((_DWORD *)this + 9) = 0;
      v22 = (void *)*((_QWORD *)this + 1);
      v23 = malloc_type_malloc(16 * a3, 0x1000040D9A13B51uLL);
      *((_QWORD *)this + 1) = v23;
      if (v23)
      {
        *(_DWORD *)this = a3;
        free(v22);
      }
      else
      {
        *((_QWORD *)this + 1) = v22;
        if (AVE_Log_CheckLevel(0x49u, 5))
        {
          v24 = AVE_Log_CheckConsole(0x49u);
          v25 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(5);
          if (v24)
          {
            printf("%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d\n", v25, 73, v26, "AVE_FPS", "Update", 163, this, a3);
            v25 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(5);
          }
          syslog(3, "%lld %d AVE %s: %s::%s:%d failed to allocate memory of timestamp %p %d", v25, 73);
        }
      }
    }
    v21 = 0;
    *((_DWORD *)this + 8) = a4;
    *((double *)this + 5) = (double)a2;
    *((double *)this + 6) = (double)a2;
    *((double *)this + 7) = (double)a2;
    *((double *)this + 8) = (double)a2;
  }
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v27 = AVE_Log_CheckConsole(0x49u);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(6);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d %d %d\n", v28, 73, v29, "AVE_FPS", "Update", this, a2, a3, v21);
      v30 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v30, 73);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d %d %d", v28, 73);
    }
  }
  return v21;
}

uint64_t AVE_FPS::Reset(AVE_FPS *this)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  int v6;
  __uint64_t v7;
  const char *v8;
  const char *v10;

  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v2 = AVE_Log_CheckConsole(0x49u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Reset", this);
      v5 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", v5, 73, v10, "AVE_FPS", "Reset", this);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p", CurrTime, 73, LevelStr, "AVE_FPS", "Reset", this);
    }
  }
  *((_DWORD *)this + 9) = 0;
  if (AVE_Log_CheckLevel(0x49u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x49u);
    v7 = AVE_GetCurrTime();
    v8 = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %d\n", v7, 73, v8, "AVE_FPS", "Reset", this, 0);
      v7 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %d", v7);
  }
  return 0;
}

double AVE_FPS::Calc(uint64_t *a1, _QWORD *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v18;
  uint64_t v19;
  __uint64_t v20;
  const char *v21;

  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_DWORD *)a2 + 2);
  v8 = *a2;
  if (v6 == v7)
  {
    v9 = (double)(v8 - *a1);
    v10 = (double)a3;
    v11 = (double)v6;
  }
  else
  {
    v11 = (double)v6;
    v9 = (double)v8 * (double)v6 - (double)*a1 * (double)v7;
    v10 = (double)a3 * (double)v7;
  }
  v12 = v10 * v11;
  v13 = -1.0;
  if (v9 > 0.0)
  {
    v14 = v12 / v9;
    if (v12 / v9 <= 0.0 || v14 >= 100000.0)
    {
      if (AVE_Log_CheckLevel(0x49u, 5))
      {
        v15 = AVE_Log_CheckConsole(0x49u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(5);
        v18 = *a1;
        v19 = *((unsigned int *)a1 + 2);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld \n", CurrTime, 73, LevelStr, "AVE_FPS", "Calc", 245, v18, v19, *a2, *((_DWORD *)a2 + 2), a3, (uint64_t)v9, (uint64_t)(v9 * 1000.0) - 1000 * (uint64_t)v9, (uint64_t)v14, (uint64_t)(v14 * 1000.0) - 1000 * (uint64_t)v14);
          v20 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", v20, 73, v21, "AVE_FPS", "Calc", 245, *a1, *((unsigned int *)a1 + 2));
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %lld %d - %lld %d %d | %lld.%03lld %lld.%03lld ", CurrTime, 73, LevelStr, "AVE_FPS", "Calc", 245, v18, v19);
        }
      }
    }
    else
    {
      return v12 / v9;
    }
  }
  return v13;
}

uint64_t AVE_FPS::CalcRt(AVE_FPS *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  uint64_t result;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  __uint64_t v25;
  const char *v26;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)this + 9);
    if (v3 < 2)
      return 0;
    v4 = ((v3 - 2) % *(_DWORD *)this);
    v5 = ((v3 - 1) % *(_DWORD *)this);
    v6 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * v4), (_QWORD *)(v2 + 16 * v5), 1);
    v7 = v6;
    if (v6 >= 0.0)
    {
      *((double *)this + 5) = v6;
      v8 = 7;
    }
    else
    {
      v8 = 5;
    }
    result = AVE_Log_CheckLevel(0x49u, v8);
    if ((_DWORD)result)
    {
      v13 = AVE_Log_CheckConsole(0x49u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(v8);
      v16 = *((unsigned int *)this + 9);
      v17 = *(unsigned int *)this;
      v18 = *((_QWORD *)this + 1);
      v19 = (uint64_t *)(v18 + 16 * v4);
      v20 = *v19;
      v21 = *((_DWORD *)v19 + 2);
      v22 = (uint64_t *)(v18 + 16 * v5);
      v23 = *v22;
      v24 = *((_DWORD *)v22 + 2);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcRt", 298, this, v16, v17, v4, v20, v21, v5, v23, v24, (int)*((double *)this + 5), (int)(*((double *)this + 5) * 1000.0) - 1000 * (int)*((double *)this + 5), (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        v25 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", v25, 73, v26, "AVE_FPS", "CalcRt", 298, this, *((unsigned int *)this + 9), *(unsigned int *)this);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d | %d %lld %d - %d %lld %d | %d.%03d  %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcRt", 298, this, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v9 = AVE_Log_CheckConsole(0x49u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcRt", 272, "m_psTime != __null", this);
        v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcSlide(AVE_FPS *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  int v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)this + 9);
    if (v3 < 2)
      return 0;
    v4 = v3 - 1;
    v5 = *((_DWORD *)this + 8);
    v6 = __OFSUB__(v3, v5);
    v7 = v3 - v5;
    if (v7 < 0 != v6)
      v7 = 0;
    v8 = v4 - v7;
    v9 = (v4 % *(_DWORD *)this);
    v10 = v7 % *(_DWORD *)this;
    v11 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * v10), (_QWORD *)(v2 + 16 * v9), v4 - v7);
    v12 = v11;
    if (v11 <= 0.0)
    {
      v13 = 5;
    }
    else
    {
      *((double *)this + 6) = v11;
      v13 = 7;
    }
    result = AVE_Log_CheckLevel(0x49u, v13);
    if ((_DWORD)result)
    {
      v18 = v10;
      v19 = AVE_Log_CheckConsole(0x49u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(v13);
      v22 = *(unsigned int *)this;
      v23 = *((unsigned int *)this + 9);
      v24 = *((_QWORD *)this + 1);
      v25 = (uint64_t *)(v24 + 16 * v18);
      v26 = *v25;
      v27 = *((_DWORD *)v25 + 2);
      v28 = (uint64_t *)(v24 + 16 * v9);
      v29 = *v28;
      v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcSlide", 353, this, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)this + 7), (int)(*((double *)this + 7) * 1000.0) - 1000 * (int)*((double *)this + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        v31 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcSlide", 353, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcSlide", 353, this, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x49u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcSlide", 323, "m_psTime != __null", this);
        v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcAvg(AVE_FPS *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  int v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  __uint64_t v31;
  const char *v32;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)this + 9);
    if (v3 < 2)
      return 0;
    v4 = v3 - 1;
    v5 = *(_DWORD *)this;
    v6 = __OFSUB__(v3, *(_DWORD *)this);
    v7 = v3 - *(_DWORD *)this;
    if (v7 < 0 != v6)
      v7 = 0;
    v8 = v4 - v7;
    v9 = (v4 % v5);
    v10 = v7 % v5;
    v11 = AVE_FPS::Calc((uint64_t *)(v2 + 16 * (v7 % v5)), (_QWORD *)(v2 + 16 * v9), v4 - v7);
    v12 = v11;
    if (v11 <= 0.0)
    {
      v13 = 5;
    }
    else
    {
      *((double *)this + 7) = v11;
      v13 = 7;
    }
    result = AVE_Log_CheckLevel(0x49u, v13);
    if ((_DWORD)result)
    {
      v18 = v10;
      v19 = AVE_Log_CheckConsole(0x49u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(v13);
      v22 = *(unsigned int *)this;
      v23 = *((unsigned int *)this + 9);
      v24 = *((_QWORD *)this + 1);
      v25 = (uint64_t *)(v24 + 16 * v18);
      v26 = *v25;
      v27 = *((_DWORD *)v25 + 2);
      v28 = (uint64_t *)(v24 + 16 * v9);
      v29 = *v28;
      v30 = *((_DWORD *)v28 + 2);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcAvg", 407, this, v22, v23, v8, v18, v26, v27, v9, v29, v30, (int)*((double *)this + 7), (int)(*((double *)this + 7) * 1000.0) - 1000 * (int)*((double *)this + 7),
          (int)v12,
          (int)(v12 * 1000.0) - 1000 * (int)v12);
        v31 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(v13);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v31, 73, v32, "AVE_FPS", "CalcAvg", 407, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcAvg", 407, this, v22, v23);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x49u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v15, 73, v16, "AVE_FPS", "CalcAvg", 377, "m_psTime != __null", this);
        v15 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v15, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::CalcOverall(AVE_FPS *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  uint64_t result;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)this + 9);
    if (v3 < 2)
      return 0;
    v4 = v3 - 1;
    v5 = ((v3 - 1) % *(_DWORD *)this);
    v6 = AVE_FPS::Calc((uint64_t *)this + 2, (_QWORD *)(v2 + 16 * v5), v3 - 1);
    v7 = v6;
    if (v6 <= 0.0)
    {
      v8 = 5;
    }
    else
    {
      *((double *)this + 8) = v6;
      v8 = 7;
    }
    result = AVE_Log_CheckLevel(0x49u, v8);
    if ((_DWORD)result)
    {
      v13 = AVE_Log_CheckConsole(0x49u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(v8);
      v16 = *(unsigned int *)this;
      v17 = *((unsigned int *)this + 9);
      v18 = *((_QWORD *)this + 1) + 16 * v5;
      v19 = *(_QWORD *)v18;
      v20 = *(_DWORD *)(v18 + 8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d\n", CurrTime, 73, LevelStr, "AVE_FPS", "CalcOverall", 457, this, v16, v17, v4, 0, *((_QWORD *)this + 2), *((_DWORD *)this + 6), v5, v19, v20, (int)*((double *)this + 8), (int)(*((double *)this + 8) * 1000.0) - 1000 * (int)*((double *)this + 8),
          (int)v7,
          (int)(v7 * 1000.0) - 1000 * (int)v7);
        v21 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(v8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", v21, 73, v22, "AVE_FPS", "CalcOverall", 457, this, *(unsigned int *)this, *((unsigned int *)this + 9));
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %d %d %d | %d %lld %d - %d %lld %d | %d.%03d %d.%03d", CurrTime, 73, LevelStr, "AVE_FPS", "CalcOverall", 457, this, v16, v17);
      }
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x49u, 4))
    {
      v9 = AVE_Log_CheckConsole(0x49u);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p\n", v10, 73, v11, "AVE_FPS", "CalcOverall", 429, "m_psTime != __null", this);
        v10 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p", v10, 73);
    }
    return 4294966285;
  }
  return result;
}

uint64_t AVE_FPS::Add(_DWORD *a1, int *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v7;
  int v8;
  int v9;
  __uint64_t v10;
  const char *v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;

  if (AVE_Log_CheckLevel(0x49u, 7))
  {
    v4 = AVE_Log_CheckConsole(0x49u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %p\n", CurrTime, 73, LevelStr, "AVE_FPS", "Add", a1, a2);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %p", CurrTime);
  }
  if (!a2 || (*(_QWORD *)a2 & 0x8000000000000000) != 0 || a2[2] < 1)
    goto LABEL_42;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    *(_OWORD *)(v7 + 16 * (a1[9] % *a1)) = *(_OWORD *)a2;
    v8 = a1[9];
    if (!v8)
      *((_OWORD *)a1 + 1) = *(_OWORD *)a2;
    a1[9] = v8 + 1;
    if (AVE_FPS::CalcRt((AVE_FPS *)a1))
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        v9 = AVE_Log_CheckConsole(0x49u);
        v10 = AVE_GetCurrTime();
        v11 = AVE_Log_GetLevelStr(4);
        if (v9)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p\n", v10, 73, v11, "AVE_FPS", "Add", 501, "ret == 0", a1, a2);
          v10 = AVE_GetCurrTime();
          v29 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          v29 = v11;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate realtime FPS %p %p", v10, 73, v29);
      }
      goto LABEL_42;
    }
    if ((int)a1[8] >= 1 && AVE_FPS::CalcSlide((AVE_FPS *)a1))
    {
      if (AVE_Log_CheckLevel(0x49u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x49u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p\n", v17, 73, v18, "AVE_FPS", "Add", 507, "ret == 0", a1, a2);
          v17 = AVE_GetCurrTime();
          v31 = AVE_Log_GetLevelStr(4);
        }
        else
        {
          v31 = v18;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate sliding average FPS %p %p", v17, 73, v31);
      }
      goto LABEL_42;
    }
    if (AVE_FPS::CalcAvg((AVE_FPS *)a1))
    {
      if (!AVE_Log_CheckLevel(0x49u, 4))
      {
LABEL_42:
        v22 = 4294966295;
        goto LABEL_43;
      }
      v19 = AVE_Log_CheckConsole(0x49u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v19)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 512, "ret == 0", a1, a2);
LABEL_37:
        v24 = AVE_GetCurrTime();
        v32 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v24, 73, v32);
        goto LABEL_42;
      }
    }
    else
    {
      if (!AVE_FPS::CalcOverall((AVE_FPS *)a1))
      {
        v22 = 0;
        goto LABEL_43;
      }
      if (!AVE_Log_CheckLevel(0x49u, 4))
        goto LABEL_42;
      v23 = AVE_Log_CheckConsole(0x49u);
      v20 = AVE_GetCurrTime();
      v21 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p\n", v20, 73, v21, "AVE_FPS", "Add", 516, "ret == 0", a1, a2);
        goto LABEL_37;
      }
    }
    syslog(3, "%lld %d AVE %s: %s::%s:%d %s | failed to calculate average FPS %p %p", v20, 73, v21);
    goto LABEL_42;
  }
  if (AVE_Log_CheckLevel(0x49u, 4))
  {
    v12 = AVE_Log_CheckConsole(0x49u);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(4);
    if (v12)
    {
      printf("%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p\n", v13, 73, v14, "AVE_FPS", "Add", 488, "m_psTime != __null", a1, a2);
      v15 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v15, 73, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong state %p %p", v13, 73, v14);
    }
  }
  v22 = 4294966285;
LABEL_43:
  if (AVE_Log_CheckLevel(0x49u, 7))
  {
    v25 = AVE_Log_CheckConsole(0x49u);
    v26 = AVE_GetCurrTime();
    v27 = AVE_Log_GetLevelStr(7);
    if (v25)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %p %d\n", v26, 73, v27, "AVE_FPS", "Add", a1, a2, v22);
      v26 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %p %d", v26, 73);
  }
  return v22;
}

double AVE_FPS::GetRt(AVE_FPS *this)
{
  return *((double *)this + 5);
}

double AVE_FPS::GetSlide(AVE_FPS *this)
{
  uint64_t v1;

  v1 = 56;
  if (*((int *)this + 8) > 0)
    v1 = 48;
  return *(double *)((char *)this + v1);
}

uint64_t AVE_FPS::GetTotalCnt(AVE_FPS *this)
{
  return *((unsigned int *)this + 9);
}

void AVE_BlkPool::AVE_BlkPool(AVE_BlkPool *this)
{
  *(_QWORD *)((char *)this + 12) = 0;
  *(_QWORD *)((char *)this + 4) = 0;
  AVE_DLList_Init((_QWORD *)this + 4);
  *((_DWORD *)this + 12) = 0;
}

uint64_t AVE_BlkPool::Destroy(AVE_BlkPool *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)((char *)this + 32);
  do
  {
    result = AVE_DLList_Back(v2);
    if (!result)
      break;
    v4 = result;
    AVE_DLList_PopBack((uint64_t)v2);
    result = AVE_BlkBuf_Destroy(v4);
  }
  while (!(_DWORD)result);
  if (*((_QWORD *)this + 3))
  {
    result = AVE_Mutex_Destroy(*((pthread_mutex_t **)this + 3));
    *((_QWORD *)this + 3) = 0;
  }
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *(_QWORD *)((char *)this + 4) = 0;
  return result;
}

void AVE_BlkPool::~AVE_BlkPool(AVE_BlkPool *this)
{
  AVE_BlkPool::Destroy(this);
}

uint64_t AVE_BlkPool::CreateWithMem(AVE_BlkPool *this, int a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, int8x8_t a8)
{
  uint64_t v8;
  uint8x8_t v16;
  pthread_mutex_t *v17;
  pthread_mutex_t *v18;
  uint64_t v19;
  _QWORD *v21;

  v21 = 0;
  v8 = 4294966295;
  if (a4 >= 1 && a5 >= 1 && a6 >= 1 && a7 <= 0x40)
  {
    if (!a7 || (a8.i32[0] = a7, v16 = (uint8x8_t)vcnt_s8(a8), v16.i16[0] = vaddlv_u8(v16), v16.i32[0] <= 1u))
    {
      if ((a2 & 1) != 0)
      {
        v18 = AVE_Mutex_Create();
        if (!v18)
          return 4294966293;
        v17 = v18;
        v19 = AVE_BlkBuf_CreateWithMem(a3, a4, a5, a6, a7, &v21);
        if (!(_DWORD)v19)
          goto LABEL_13;
        v8 = v19;
        AVE_Mutex_Destroy(v17);
      }
      else
      {
        v8 = AVE_BlkBuf_CreateWithMem(a3, a4, a5, a6, a7, &v21);
        if (!(_DWORD)v8)
        {
          v17 = 0;
LABEL_13:
          *(_DWORD *)this = a2;
          *((_DWORD *)this + 1) = a5;
          *((_DWORD *)this + 2) = a6;
          *((_DWORD *)this + 3) = a7;
          *((_DWORD *)this + 4) = 0;
          *((_QWORD *)this + 3) = v17;
          AVE_DLList_PushBack((_QWORD *)this + 4, v21);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t AVE_BlkPool::SearchAllocBuf(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;

  *a2 = 0;
  v3 = a1 + 32;
  for (i = AVE_DLList_Begin(a1 + 32); ; i = AVE_DLList_Next(v5))
  {
    v5 = i;
    if (i == AVE_DLList_End(v3))
      return 4294966289;
    if (AVE_BlkBuf_Avail(v5))
      break;
  }
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t AVE_BlkPool::Alloc(AVE_BlkPool *this, unint64_t *a2, int *a3)
{
  uint64_t v6;
  int8x8_t v7;
  uint64_t v8;
  _QWORD *v10;

  v10 = 0;
  if (!a2)
    return 4294966295;
  *a2 = 0;
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 3));
  v6 = AVE_BlkPool::SearchAllocBuf((uint64_t)this, (uint64_t *)&v10);
  if (!(_DWORD)v6)
    goto LABEL_8;
  v8 = v6;
  if (*((_DWORD *)this + 12) < *((_DWORD *)this + 4))
  {
    v8 = AVE_BlkBuf_Create(*((_DWORD *)this + 1), *((_DWORD *)this + 2), *((_DWORD *)this + 3), (uint64_t *)&v10, v7);
    if (!(_DWORD)v8)
    {
      AVE_DLList_PushBack((_QWORD *)this + 4, v10);
      ++*((_DWORD *)this + 12);
LABEL_8:
      v8 = AVE_BlkBuf_Alloc((uint64_t)v10, a2, a3);
    }
  }
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 3));
  return v8;
}

uint64_t AVE_BlkPool::SearchFreeBuf(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t result;

  *a3 = 0;
  v5 = a1 + 32;
  for (i = AVE_DLList_Begin(a1 + 32); ; i = AVE_DLList_Next(v7))
  {
    v7 = i;
    if (i == AVE_DLList_End(v5))
      return 4294966295;
    if (AVE_BlkBuf_CheckAddr(v7, a2))
      break;
  }
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t AVE_BlkPool::Free(pthread_mutex_t **this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Lock(this[3]);
  v4 = AVE_BlkPool::SearchFreeBuf((uint64_t)this, a2, &v9);
  if (!(_DWORD)v4)
  {
    v4 = AVE_BlkBuf_Free(v9, a2);
    if (!(_DWORD)v4)
    {
      v5 = AVE_DLList_RBegin((uint64_t)(this + 4));
      if (*((_DWORD *)this + 12))
      {
        v6 = (uint64_t *)v5;
        while (v6 != (uint64_t *)AVE_DLList_REnd((uint64_t)(this + 4)))
        {
          v7 = AVE_DLList_Prev((uint64_t)v6);
          if (AVE_BlkBuf_Empty((uint64_t)v6))
          {
            AVE_DLList_Erase(v6);
            AVE_BlkBuf_Destroy((uint64_t)v6);
            v4 = 0;
            --*((_DWORD *)this + 12);
            goto LABEL_13;
          }
          v4 = 0;
          v6 = (uint64_t *)v7;
          if (!*((_DWORD *)this + 12))
            goto LABEL_13;
        }
      }
      v4 = 0;
    }
  }
LABEL_13:
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Unlock(this[3]);
  return v4;
}

uint64_t AVE_BlkPool::Idx2Addr(pthread_mutex_t **this, int a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Lock(this[3]);
  if (*((_DWORD *)this + 12))
  {
    v6 = 4294966295;
  }
  else
  {
    v7 = AVE_DLList_Front(this + 4);
    v6 = AVE_BlkBuf_Idx2Addr(v7, a2, a3);
  }
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Unlock(this[3]);
  return v6;
}

uint64_t AVE_BlkPool::Addr2Idx(pthread_mutex_t **this, unint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Lock(this[3]);
  if (*((_DWORD *)this + 12))
  {
    v6 = 4294966295;
  }
  else
  {
    v7 = AVE_DLList_Front(this + 4);
    v6 = AVE_BlkBuf_Addr2Idx(v7, a2, a3);
  }
  if ((*(_DWORD *)this & 1) != 0)
    AVE_Mutex_Unlock(this[3]);
  return v6;
}

_BYTE *AVE_FwStats_PrintDiff(_BYTE *result, char *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (result && a2)
  {
    if (a3)
    {
      v10 = a4;
      v11 = result;
      v12 = *a3;
      LODWORD(v12) = AVE_SNPrintf(&a2[v12], (int)a4 - (int)v12, "%lld,", a4, a5, a6, a7, a8, v11[8] - *v11) + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v13, v14, v15, v16, v17, v11[520] - v11[16])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v18, v19, v20, v21, v22, v11[24] - v11[16])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v23, v24, v25, v26, v27, v11[40] - v11[24])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v28, v29, v30, v31, v32, v11[240] - v11[32])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v33, v34, v35, v36, v37, v11[464] - v11[248])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v38, v39, v40, v41, v42, v11[208] - v11[192])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v43, v44, v45, v46, v47, v11[408] - v11[200])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v48, v49, v50, v51, v52, v11[496] - v11[416])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v53, v54, v55, v56, v57, v11[232] - v11[216])
                   + v12;
      LODWORD(v12) = AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v58, v59, v60, v61, v62, v11[432] - v11[224])
                   + v12;
      result = (_BYTE *)AVE_SNPrintf(&a2[(int)v12], v10 - (int)v12, "%lld,", v63, v64, v65, v66, v67, v11[512] - v11[440]);
      *a3 = (_DWORD)result + v12;
    }
  }
  return result;
}

uint64_t AVE_FwStats_PrintSet(uint64_t result, char *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (result && a2 && a3)
  {
    v10 = a4;
    v11 = result;
    v12 = 0;
    v13 = *a3;
    do
    {
      result = AVE_SNPrintf(&a2[v13], v10 - v13, "%lld,", a4, a5, a6, a7, a8, *(_QWORD *)(v11 + v12));
      v13 = *a3 + result;
      *a3 = v13;
      v12 += 8;
    }
    while (v12 != 544);
  }
  return result;
}

uint64_t AVE_FwStats_PrintAll(char *a1, int *a2, FILE *a3, int a4, int a5)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int *v32;
  char *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  const char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t i;
  int v81;
  int v82;
  __uint64_t v83;
  const char *v84;
  __uint64_t v85;
  int v86;
  __uint64_t v87;
  const char *v88;
  __uint64_t v89;
  const char *v91;
  const char *v92;
  const char *v93;
  char *v94;
  uint64_t v95;
  int *v96;
  int v97;
  char *v98;
  __uint64_t v99;
  uint64_t v100;
  int *v101;
  _DWORD *v102;
  int v105[3];

  v105[0] = 0;
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    v8 = AVE_Log_CheckConsole(0x3Au);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %p %d %d\n", CurrTime, 58, LevelStr, "AVE_FwStats_PrintAll", a1, a2, a3, a4, a5);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %p %d %d", CurrTime, 58);
  }
  v97 = a5;
  if (a1 && a2)
  {
    if (a3)
    {
      v11 = (char *)operator new[]();
      if (AVE_Log_CheckLevel(0x3Au, 8))
      {
        v17 = AVE_Log_CheckConsole(0x3Au);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(8);
        v20 = *a2;
        if (v17)
        {
          printf("%lld %d AVE %s: %s:%d coresUsed %d\n", v18, 58, v19, "AVE_FwStats_PrintAll", 211, v20);
          v21 = AVE_GetCurrTime();
          v22 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: %s:%d coresUsed %d", v21, 58, v22, "AVE_FwStats_PrintAll", 211, *a2);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d coresUsed %d", v18, 58, v19, "AVE_FwStats_PrintAll", 211, v20);
        }
      }
      if (!a4)
        fwrite("FrameNum, SliceNum, CoreID, CoreMode, IBTimeDiff, FrameDiff, InQueueTime, Fn_StartEventLRMEFS_Diff, Hw_LrmeFS_Diff, LrmeFSDone_Diff, Fn_StartEventPipe_Diff, Hw_Pipe_Diff, PipeDone_Diff, Fn_StartEventTranscode_Diff, Hw_Transcode_Diff, TranscodeDone_Diff, IBTimeS, IBTimeE, FrameIn, Fn_StartEventLRMEFS_Start, Hw_LRMEFS_Start, Fn_StartEventLRMEFS_End, Fn_StartEventLRMERC_StartP0, Hw_LRMERC_StartP0, Fn_StartEventLRMERC_EndP0, Fn_StartEventLRMERC_StartP1, Hw_LRMERC_StartP1, Fn_StartEventLRMERC_EndP1, Fn_StartEventLRMERC_StartP2, Hw_LRMERC_StartP2, Fn_StartEventLRMERC_EndP2, Fn_StartEventLRMERC_StartP3, Hw_LRMERC_StartP3, Fn_StartEventLRMERC_EndP3, Fn_StartEventLRMERC_StartP4, Hw_LRMERC_StartP4, Fn_StartEventLRMERC_EndP4, Fn_StartEventLRMERC_StartP5, Hw_LRMERC_StartP5, Fn_StartEventLRMERC_EndP5, Fn_StartEventPipe_Start, Hw_Pipe_Start, Fn_StartEventPipe_End, Fn_StartEventTranscode_Start, Hw_Transcode_Start, Fn_StartEventTranscode_End, Hw_LRMEFS_End, Fn_DoneEventLRMEFS_Start, Fn_DoneEventLRMEFS_End, Hw_LRMERC_EndP0, Fn_DoneEventLRMERC_StartP0, Fn_DoneEventLRMERC_EndP0, Hw_LRMERC_EndP1, Fn_DoneEventLRMERC_StartP1, Fn_DoneEventLRMERC_EndP1, Hw_LRMERC_EndP2, Fn_DoneEventLRMERC_StartP2, Fn_DoneEventLRMERC_EndP2, Hw_LRMERC_EndP3, Fn_DoneEventLRMERC_StartP3, Fn_DoneEventLRMERC_EndP3, Hw_LRMERC_EndP4, Fn_DoneEventLRMERC_StartP4, Fn_DoneEventLRMERC_EndP4, Hw_LRMERC_EndP5, Fn_DoneEventLRMERC_StartP5, Fn_DoneEventLRMERC_EndP5, Hw_Pipe_End, Fn_DoneEventPipe_Start, Fn_DoneEventPipe_End, Hw_Transcode_End, Fn_DoneEventTranscode_Start, Fn_DoneEventTranscode_End, Fn_GetStatsEventLRMEFS_Start, Fn_GetStatsEventLRMEFS_End, Fn_GetStatsEventLRMERC_Start, Fn_GetStatsEventLRMERC_End, Fn_GetStatsEventPipe_Start, Fn_GetStatsEventPipe_End, Fn_GetStatsEventTranscode_Start, Fn_GetStatsEventTranscode_End, FrameOut, FnPostXCODEProcess_StartTime, FnPostXCODEProcess_EndTime,CPMU0, CPMU1, CPMU2, CPMU5, CPMU6, CPMU7\n", 0x773uLL,
          1uLL,
          a3);
      v28 = *a2;
      if (*a2 < 1)
      {
LABEL_46:
        v27 = 0;
      }
      else
      {
        v29 = 0;
        v100 = (a5 + 1);
        v30 = a1 + 544;
        v98 = a1;
        v96 = a2;
        v94 = a1 + 544;
        while (a5 < 0)
        {
LABEL_45:
          if (++v29 >= v28)
            goto LABEL_46;
        }
        v31 = 0;
        v95 = v29;
        v32 = &a2[3 * v29];
        v101 = v32 + 1;
        v102 = v32 + 2;
        v33 = a1;
        while (1)
        {
          v34 = *v101;
          v35 = (uint64_t)&a1[9472 * *v101 + 592 * v31];
          *v11 = 0;
          v105[0] = 0;
          v36 = AVE_SNPrintf(v11, 2000, "%6d,", v12, v13, v14, v15, v16, a4);
          v37 = v105[0] + (uint64_t)v36;
          v105[0] += v36;
          v43 = AVE_SNPrintf(&v11[v37], 2000 - (int)v37, "%6d,", v38, v39, v40, v41, v42, v31);
          v44 = v105[0] + (uint64_t)v43;
          v105[0] += v43;
          v50 = AVE_SNPrintf(&v11[v44], 2000 - (int)v44, "%d,", v45, v46, v47, v48, v49, v34);
          v56 = v105[0] + (uint64_t)v50;
          v105[0] += v50;
          v57 = &v11[v56];
          v58 = 2000 - v56;
          v59 = "Secondo";
          if (!*v102)
            v59 = "Primo";
          v60 = AVE_SNPrintf(v57, v58, "%s,", v51, v52, v53, v54, v55, (char)v59);
          v105[0] += v60;
          if ((!*(_QWORD *)(v35 + 16) || !*(_QWORD *)(v35 + 520)) && AVE_Log_CheckLevel(0x3Au, 5))
          {
            v65 = AVE_Log_CheckConsole(0x3Au);
            v66 = AVE_GetCurrTime();
            v67 = AVE_Log_GetLevelStr(5);
            v68 = "Secondo";
            if (!*v102)
              v68 = "Primo";
            v69 = *(_QWORD *)(v35 + 520);
            if (v65)
            {
              printf("%lld %d AVE %s: %s:%d ZERO FW TIME!!! Frame %5d Slice %d Core %d CoreMode %s, Start %11lld, End %11lld\n", v66, 58, v67, "AVE_FwStats_PrintAll", 238, a4, v31, v34, v68, *(_QWORD *)(v35 + 16), v69);
              v99 = AVE_GetCurrTime();
              v70 = AVE_Log_GetLevelStr(5);
              v71 = "Secondo";
              if (!*v102)
                v71 = "Primo";
              syslog(3, "%lld %d AVE %s: %s:%d ZERO FW TIME!!! Frame %5d Slice %d Core %d CoreMode %s, Start %11lld, End %11lld", v99, 58, v70, "AVE_FwStats_PrintAll", 238, a4, v31, v34, v71, *(_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 520));
            }
            else
            {
              syslog(3, "%lld %d AVE %s: %s:%d ZERO FW TIME!!! Frame %5d Slice %d Core %d CoreMode %s, Start %11lld, End %11lld", v66, 58, v67, "AVE_FwStats_PrintAll", 238, a4, v31, v34, v68, *(_QWORD *)(v35 + 16), v69);
            }
            a1 = v98;
          }
          AVE_FwStats_PrintDiff((_BYTE *)v35, v11, v105, 2000, v61, v62, v63, v64);
          v77 = 0;
          v78 = v105[0];
          do
          {
            v79 = AVE_SNPrintf(&v11[v78], 2000 - v78, "%lld,", v72, v73, v74, v75, v76, *(_QWORD *)&v33[9472 * v34 + v77]);
            v78 = v105[0] + v79;
            v105[0] += v79;
            v77 += 8;
          }
          while (v77 != 544);
          for (i = 0; i != 48; i += 8)
          {
            v81 = AVE_SNPrintf(&v11[v78], 2000 - v78, "%lld,", v72, v73, v74, v75, v76, *(_QWORD *)&v30[9472 * v34 + i]);
            v78 = v105[0] + v81;
            v105[0] += v81;
          }
          if (v78 >= 2000)
            break;
          fprintf(a3, "%s\n", v11);
          ++v31;
          v33 += 592;
          v30 += 592;
          if (v31 == v100)
          {
            v29 = v95;
            a2 = v96;
            v28 = *v96;
            a5 = v97;
            v30 = v94;
            goto LABEL_45;
          }
        }
        a2 = v96;
        if (AVE_Log_CheckLevel(0x3Au, 4))
        {
          v82 = AVE_Log_CheckConsole(0x3Au);
          v83 = AVE_GetCurrTime();
          v84 = AVE_Log_GetLevelStr(4);
          if (v82)
          {
            printf("%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p %d %d %d %d\n", v83, 58, v84, "AVE_FwStats_PrintAll", 252, "offset < maxSizeStr", v11, v105[0], a1, v96, a3, a4, v97, v34, v31);
            v85 = AVE_GetCurrTime();
            a2 = v96;
            v92 = AVE_Log_GetLevelStr(4);
            a1 = v98;
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p %d %d %d %d", v85, 58, v92, "AVE_FwStats_PrintAll", 252, "offset < maxSizeStr", v11);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %p %d %d %d %d", v83, 58, v84, "AVE_FwStats_PrintAll", 252, "offset < maxSizeStr", v11);
          }
        }
        v27 = 4294966290;
      }
      MEMORY[0x1B5E4D1A8](v11, 0x1000C8077774924);
    }
    else
    {
      v27 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Au, 4))
    {
      v23 = AVE_Log_CheckConsole(0x3Au);
      v24 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(4);
      if (v23)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d\n", v24, 58, v25, "AVE_FwStats_PrintAll", 198, "(psFwStats != __null) && (pEUMap != __null)", a1, a2, a3, a4, a5);
        v26 = AVE_GetCurrTime();
        v91 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v26, 58, v91, "AVE_FwStats_PrintAll");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %d %d", v24, 58, v25, "AVE_FwStats_PrintAll");
      }
    }
    v27 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    v86 = AVE_Log_CheckConsole(0x3Au);
    v87 = AVE_GetCurrTime();
    v88 = AVE_Log_GetLevelStr(7);
    if (v86)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %p %d %d %d\n", v87, 58, v88, "AVE_FwStats_PrintAll", a1, a2, a3, a4, v97, v27);
      v89 = AVE_GetCurrTime();
      v93 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v89, 58, v93);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %p %d %d %d", v87, 58, v88);
    }
  }
  return v27;
}

uint64_t AVE_MCTFStats_PrintAll(_BYTE *a1, FILE *a2, int a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  __uint64_t v67;
  const char *v68;
  __uint64_t v69;
  int v70;
  __uint64_t v71;
  const char *v72;
  __uint64_t v73;
  int v74;
  __uint64_t v75;
  const char *v76;
  __uint64_t v77;
  const char *v79;
  const char *v80;

  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    v6 = AVE_Log_CheckConsole(0x3Au);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: %s Enter %p %p %d\n", CurrTime, 58, LevelStr, "AVE_MCTFStats_PrintAll", a1, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %p %p %d", CurrTime);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3)
        fwrite("Frame#, FrameDiff, Fn_SetLrmeDiff, HW_LrmeDiff, Fn_SetLrrcDiff, HW_LrrcDiff, Fn_SetPipeDiff, HW_PipeDiff, Fn_PipeDoneDiff, FrameQIn, Fn_SetLrmeStart, HW_LrmeStart, Fn_SetLRMEDone, Fn_SetLrrcStart, HW_LrrcStart, Fn_SetLRRCDone, Fn_SetPipeStart, HW_PipeStart, Fn_SetPipeDone, HW_LrmeDone, HW_LrrcDone, HW_PipeDone, Fn_PipeDoneStart, Fn_PipeDoneEnd, LrmeStatsDone, LrrcStatsDone, PipeStatsDone, FrameOut\n", 0x191uLL, 1uLL, a2);
      v9 = (char *)operator new[]();
      v15 = AVE_SNPrintf(v9, 1000, "%6d,", v10, v11, v12, v13, v14, a3);
      v21 = (int)AVE_SNPrintf(&v9[v15], 1000 - v15, "%lld,", v16, v17, v18, v19, v20, a1[144] - *a1) + (uint64_t)v15;
      LODWORD(v21) = AVE_SNPrintf(&v9[v21], 1000 - (int)v21, "%lld,", v22, v23, v24, v25, v26, a1[24] - a1[8]) + v21;
      LODWORD(v21) = AVE_SNPrintf(&v9[(int)v21], 1000 - (int)v21, "%lld,", v27, v28, v29, v30, v31, a1[80] - a1[16])
                   + v21;
      LODWORD(v21) = AVE_SNPrintf(&v9[(int)v21], 1000 - (int)v21, "%lld,", v32, v33, v34, v35, v36, a1[48] - a1[32])
                   + v21;
      LODWORD(v21) = AVE_SNPrintf(&v9[(int)v21], 1000 - (int)v21, "%lld,", v37, v38, v39, v40, v41, a1[88] - a1[40])
                   + v21;
      LODWORD(v21) = AVE_SNPrintf(&v9[(int)v21], 1000 - (int)v21, "%lld,", v42, v43, v44, v45, v46, a1[72] - a1[56])
                   + v21;
      v52 = AVE_SNPrintf(&v9[(int)v21], 1000 - (int)v21, "%lld,", v47, v48, v49, v50, v51, a1[96] - a1[64]) + v21;
      v58 = 0;
      v64 = AVE_SNPrintf(&v9[v52], 1000 - v52, "%lld,", v53, v54, v55, v56, v57, a1[112] - a1[104]) + v52;
      do
      {
        v64 += AVE_SNPrintf(&v9[v64], 1000 - v64, "%lld,", v59, v60, v61, v62, v63, *(_QWORD *)&a1[v58]);
        v58 += 8;
      }
      while (v58 != 152);
      if (v64 >= 1000)
      {
        if (AVE_Log_CheckLevel(0x3Au, 4))
        {
          v70 = AVE_Log_CheckConsole(0x3Au);
          v71 = AVE_GetCurrTime();
          v72 = AVE_Log_GetLevelStr(4);
          if (v70)
          {
            printf("%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %d\n", v71, 58, v72, "AVE_MCTFStats_PrintAll", 407, "offset < maxSizeStr", v9, v64, a1, a2, a3);
            v73 = AVE_GetCurrTime();
            v80 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %d", v73, 58, v80, "AVE_MCTFStats_PrintAll", 407);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | tmpStr has overflowed %p %d %p %p %d", v71, 58, v72, "AVE_MCTFStats_PrintAll", 407);
          }
        }
        v65 = 4294966290;
      }
      else
      {
        fprintf(a2, "%s\n", v9);
        v65 = 0;
      }
      MEMORY[0x1B5E4D1A8](v9, 0x1000C8077774924);
    }
    else
    {
      v65 = 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x3Au, 4))
    {
      v66 = AVE_Log_CheckConsole(0x3Au);
      v67 = AVE_GetCurrTime();
      v68 = AVE_Log_GetLevelStr(4);
      if (v66)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v67, 58, v68, "AVE_MCTFStats_PrintAll", 384, "pMctfStats != __null", 0, a2, a3);
        v69 = AVE_GetCurrTime();
        v79 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v69, 58, v79);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v67, 58, v68);
      }
    }
    v65 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x3Au, 7))
  {
    v74 = AVE_Log_CheckConsole(0x3Au);
    v75 = AVE_GetCurrTime();
    v76 = AVE_Log_GetLevelStr(7);
    if (v74)
    {
      printf("%lld %d AVE %s: %s Exit %p %p %d %d\n", v75, 58, v76, "AVE_MCTFStats_PrintAll", a1, a2, a3, v65);
      v77 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v77);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %p %d %d", v75);
    }
  }
  return v65;
}

uint64_t AVE_HEVC_ST_RPS_Retrieve(CFDictionaryRef theDict, _OWORD *a2)
{
  int8x16_t v4;
  int8x16_t v5;
  uint64_t result;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  _BOOL4 v12;
  const __CFArray *v13;
  const __CFArray *v14;
  int v15;
  CFIndex v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  const __CFArray *Value;
  const __CFArray *v21;
  int Count;
  CFIndex v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  __int16 v27;
  BOOL v28[2];

  *(_WORD *)v28 = 0;
  v27 = 0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      v9 = AVE_Log_CheckConsole(0xCCu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_ST_RPS_Retrieve", 28, "pDict != __null && pInfo != __null", theDict, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 204);
    }
    return 4294966295;
  }
  *((_DWORD *)a2 + 88) = 0;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (AVE_CFDict_GetBool(theDict, CFSTR("InterRefPicSetPredictionFlag"), &v28[1]))
  {
    if (*(_BYTE *)a2)
    {
LABEL_5:
      AVE_CFDict_GetSInt32(theDict, CFSTR("DeltaIdxMinus1"), (int *)a2 + 1);
      if (!AVE_CFDict_GetChar(theDict, CFSTR("DeltaRPSSign"), (char *)v28))
        *((_BYTE *)a2 + 8) = v28[0];
      AVE_CFDict_GetSInt32(theDict, CFSTR("AbsDeltaRPSMinus1"), (int *)a2 + 3);
      if (!AVE_CFDict_GetSInt16(theDict, CFSTR("UsedByCurrPicFlag"), &v27))
      {
        v4 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
        v5.i64[0] = 0x101010101010101;
        v5.i64[1] = 0x101010101010101;
        a2[1] = vbicq_s8(v5, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1B5632180)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1B5632190))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1B56321A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_1B56321B0)))));
      }
      result = AVE_CFDict_GetSInt16(theDict, CFSTR("UsedDeltaFlag"), &v27);
      if (!(_DWORD)result)
      {
        v7 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
        v8.i64[0] = 0x101010101010101;
        v8.i64[1] = 0x101010101010101;
        a2[2] = vbicq_s8(v8, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1B5632180)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1B5632190))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1B56321A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v7, (int8x16_t)xmmword_1B56321B0)))));
      }
      return result;
    }
  }
  else
  {
    v12 = v28[1];
    *(_BYTE *)a2 = v28[1];
    if (v12)
      goto LABEL_5;
  }
  AVE_CFDict_GetSInt32(theDict, CFSTR("NumNegativePics"), (int *)a2 + 12);
  result = AVE_CFDict_GetSInt32(theDict, CFSTR("NumPositivePics"), (int *)a2 + 13);
  if (!*((_DWORD *)a2 + 12))
  {
LABEL_24:
    if (!*((_DWORD *)a2 + 13))
      return result;
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("DeltaPOCS1Minus1"));
    if (Value)
    {
      v21 = Value;
      Count = CFArrayGetCount(Value);
      if (Count < 1)
      {
LABEL_30:
        result = AVE_CFDict_GetSInt16(theDict, CFSTR("UsedByCurrPicS1Flag"), &v27);
        if (!(_DWORD)result)
        {
          v25 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
          v26.i64[0] = 0x101010101010101;
          v26.i64[1] = 0x101010101010101;
          *(int8x16_t *)((char *)a2 + 168) = vbicq_s8(v26, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1B5632180)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1B5632190))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1B56321A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, (int8x16_t)xmmword_1B56321B0)))));
        }
      }
      else
      {
        v23 = 0;
        v24 = Count;
        while (1)
        {
          result = AVE_CFArray_GetSInt16(v21, v23, &v27);
          if ((_DWORD)result)
            break;
          *((_DWORD *)a2 + v23++ + 26) = v27;
          if (v24 == v23)
            goto LABEL_30;
        }
      }
      return result;
    }
    return 4294966288;
  }
  v13 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("DeltaPOCS0Minus1"));
  if (!v13)
    return 4294966288;
  v14 = v13;
  v15 = CFArrayGetCount(v13);
  if (v15 < 1)
  {
LABEL_22:
    result = AVE_CFDict_GetSInt16(theDict, CFSTR("UsedByCurrPicS0Flag"), &v27);
    if (!(_DWORD)result)
    {
      v18 = (int8x16_t)vdupq_n_s32((unsigned __int16)v27);
      v19.i64[0] = 0x101010101010101;
      v19.i64[1] = 0x101010101010101;
      *(int8x16_t *)((char *)a2 + 88) = vbicq_s8(v19, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1B5632180)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1B5632190))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1B56321A0)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)xmmword_1B56321B0)))));
    }
    goto LABEL_24;
  }
  v16 = 0;
  v17 = v15;
  while (1)
  {
    result = AVE_CFArray_GetSInt16(v14, v16, &v27);
    if ((_DWORD)result)
      return result;
    *((_WORD *)a2 + v16++ + 28) = v27;
    if (v17 == v16)
      goto LABEL_22;
  }
}

uint64_t AVE_HEVC_ST_RPS_RetrieveArray(const __CFArray *a1, _OWORD *a2, int *a3)
{
  _OWORD *v4;
  int Count;
  uint64_t v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  uint64_t result;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v14;
  const char *v15;

  v4 = a2;
  if (a1 && a2 && a3 && *a3 > 0)
  {
    bzero(a2, 356 * *a3);
    Count = CFArrayGetCount(a1);
    if (*a3 >= Count)
      v7 = Count;
    else
      v7 = *a3;
    *a3 = 0;
    if ((int)v7 < 1)
    {
      return 0;
    }
    else
    {
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex)
          break;
        result = AVE_HEVC_ST_RPS_Retrieve(ValueAtIndex, v4);
        if ((_DWORD)result)
          return result;
        ++*a3;
        ++v8;
        v4 = (_OWORD *)((char *)v4 + 356);
        if (v7 == v8)
          return 0;
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      v11 = AVE_Log_CheckConsole(0xCCu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_ST_RPS_RetrieveArray", 326, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", a1, v4, a3);
        v14 = AVE_GetCurrTime();
        v15 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v14, 204, v15);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", CurrTime, 204, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_HEVC_Slice_ST_RPS_Retrieve(CFDictionaryRef theDict, BOOL *a2)
{
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  const __CFDictionary *Value;

  if (theDict && a2)
  {
    *((_OWORD *)a2 + 20) = 0u;
    *((_OWORD *)a2 + 21) = 0u;
    *((_OWORD *)a2 + 18) = 0u;
    *((_OWORD *)a2 + 19) = 0u;
    *((_OWORD *)a2 + 16) = 0u;
    *((_OWORD *)a2 + 17) = 0u;
    *((_OWORD *)a2 + 14) = 0u;
    *((_OWORD *)a2 + 15) = 0u;
    *((_OWORD *)a2 + 12) = 0u;
    *((_OWORD *)a2 + 13) = 0u;
    *((_OWORD *)a2 + 10) = 0u;
    *((_OWORD *)a2 + 11) = 0u;
    *((_OWORD *)a2 + 8) = 0u;
    *((_OWORD *)a2 + 9) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)(a2 + 348) = 0u;
    AVE_CFDict_GetBool(theDict, CFSTR("ShortTermRefPicSetSPSFlag"), a2);
    if (*a2)
    {
      return AVE_CFDict_GetSInt32(theDict, CFSTR("ShortTermRefPicSetIdx"), (int *)a2 + 1);
    }
    else
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("RPSData"));
      if (Value)
        return AVE_HEVC_ST_RPS_Retrieve(Value, a2 + 8);
      else
        return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xCCu, 4))
    {
      v5 = AVE_Log_CheckConsole(0xCCu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 204, LevelStr, "AVE_HEVC_Slice_ST_RPS_Retrieve", 492, "pDict != __null && pInfo != __null", theDict, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 204);
    }
    return 4294966295;
  }
}

uint64_t AVE_BlkBuf_CalcSize(int a1, int a2, unsigned int a3, int8x8_t a4)
{
  uint64_t v4;
  uint8x8_t v5;
  int v6;

  v4 = 0;
  if (a1 >= 1 && a2 >= 1 && a3 <= 0x40)
  {
    if (a3 && (a4.i32[0] = a3, v5 = (uint8x8_t)vcnt_s8(a4), v5.i16[0] = vaddlv_u8(v5), v5.i32[0] > 1u))
    {
      return 0;
    }
    else
    {
      if (a3)
        v6 = a3;
      else
        v6 = 64;
      return ((v6 + 16 * a1 + 103) & -v6) + ((a2 + v6 - 1) & -v6) * a1;
    }
  }
  return v4;
}

uint64_t AVE_BlkBuf_Make(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;

  bzero((void *)a1, a2);
  AVE_DLList_Init((_QWORD *)a1);
  *(_QWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 40) = a5 * a4;
  *(_DWORD *)(a1 + 44) = a4;
  *(_DWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a1 + 104;
  AVE_DLList_Init((_QWORD *)(a1 + 64));
  AVE_DLList_Init((_QWORD *)(a1 + 80));
  if (a4 >= 1)
  {
    v9 = 0;
    do
    {
      AVE_DLList_PushBack((_QWORD *)(a1 + 64), (_QWORD *)(*(_QWORD *)(a1 + 56) + v9));
      v9 += 16;
    }
    while (16 * a4 != v9);
  }
  *(_DWORD *)(a1 + 100) = a4;
  return 0;
}

uint64_t AVE_BlkBuf_Create(int a1, int a2, unsigned int a3, uint64_t *a4, int8x8_t a5)
{
  uint64_t result;
  unsigned int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;

  result = 4294966295;
  if (a1 >= 1 && a2 >= 1)
  {
    v7 = a3;
    if (a3 <= 0x40)
    {
      if (a3)
      {
        if ((a3 & (a3 - 1)) != 0 || !a4)
          return result;
      }
      else
      {
        if (!a4)
          return result;
        v7 = 64;
      }
      v9 = (a2 + v7 - 1) & -v7;
      v10 = (v7 + 16 * a1 + 103) & -v7;
      v11 = AVE_BlkBuf_CalcSize(a1, v9, v7, a5);
      result = 4294966281;
      if (v10 && v11)
      {
        v12 = v7 + v11 - 1;
        v13 = malloc_type_malloc(v12, 0x100004077774924uLL);
        if (v13)
        {
          v14 = v13;
          v15 = ((unint64_t)v13 + v7 - 1) & -(uint64_t)v7;
          AVE_BlkBuf_Make(v15, v10, v15 + v10, a1, v9);
          result = 0;
          *(_QWORD *)(v15 + 16) = v14;
          *(_DWORD *)(v15 + 24) = v12;
          *a4 = v15;
        }
        else
        {
          return 4294966293;
        }
      }
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_CreateWithMem(uint64_t a1, int a2, int a3, int a4, unsigned int a5, _QWORD *a6)
{
  uint64_t result;
  int v8;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  result = 4294966295;
  if (a2 >= 1 && a3 >= 1 && a4 >= 1)
  {
    v8 = a5;
    if (a5 <= 0x40)
    {
      if (a5)
      {
        if ((a5 & (a5 - 1)) != 0 || !a6)
          return result;
      }
      else
      {
        if (!a6)
          return result;
        v8 = 64;
      }
      *a6 = 0;
      v10 = (a4 + v8 - 1) & -v8;
      AVE_AlignMem(&v16, &v15, v8, v8);
      if (v15 / v10 >= a3)
        v11 = a3;
      else
        v11 = v15 / v10;
      v12 = (v8 + 16 * v11 + 103) & -v8;
      if (v12)
      {
        v13 = malloc_type_malloc(v12, 0x100004077774924uLL);
        if (v13)
        {
          v14 = v13;
          AVE_BlkBuf_Make((uint64_t)v13, v12, v16, v11, v10);
          result = 0;
          v14[2] = v14;
          *((_DWORD *)v14 + 6) = v12;
          *a6 = v14;
        }
        else
        {
          return 4294966293;
        }
      }
      else
      {
        return 4294966281;
      }
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Destroy(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294966295;
  if (!AVE_DLList_Empty((_QWORD *)(a1 + 80)))
    return 4294966280;
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

BOOL AVE_BlkBuf_CheckAddr(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2 <= a2 && v2 + *(int *)(a1 + 40) > a2)
      return 1;
  }
  return result;
}

uint64_t AVE_BlkBuf_Alloc(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  int v9;

  result = 4294966295;
  if (a1 && a2)
  {
    *a2 = 0;
    v7 = AVE_DLList_Front((_QWORD *)(a1 + 64));
    if (v7)
    {
      v8 = (_QWORD *)v7;
      AVE_DLList_PopFront((_QWORD *)(a1 + 64));
      AVE_DLList_PushBack((_QWORD *)(a1 + 80), v8);
      v9 = *(_DWORD *)(a1 + 48);
      *a2 = *(_QWORD *)(a1 + 32) + (int)(v9 * (((unint64_t)v8 - *(_QWORD *)(a1 + 56)) >> 4));
      if (a3)
        *a3 = v9;
      result = 0;
      --*(_DWORD *)(a1 + 100);
    }
    else
    {
      return 4294966289;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Free(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t result;

  if (!a1)
    return 4294966295;
  v3 = *(_QWORD *)(a1 + 32);
  if (a2 < v3 || v3 + *(int *)(a1 + 40) <= a2)
    return 4294966295;
  v4 = (uint64_t *)(*(_QWORD *)(a1 + 56) + ((uint64_t)(((a2 - v3) / *(int *)(a1 + 48)) << 32) >> 28));
  AVE_DLList_Erase(v4);
  AVE_DLList_PushBack((_QWORD *)(a1 + 64), v4);
  result = 0;
  ++*(_DWORD *)(a1 + 100);
  return result;
}

BOOL AVE_BlkBuf_Empty(uint64_t a1)
{
  return !a1 || AVE_DLList_Empty((_QWORD *)(a1 + 80));
}

BOOL AVE_BlkBuf_Avail(_BOOL8 result)
{
  if (result)
    return !AVE_DLList_Empty((_QWORD *)(result + 64));
  return result;
}

uint64_t AVE_BlkBuf_Idx2Addr(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  if (!a1)
    return 4294966295;
  result = 4294966295;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 44) > a2)
    {
      result = 0;
      *a3 = *(_QWORD *)(a1 + 32) + *(int *)(a1 + 48) * (uint64_t)a2;
    }
  }
  return result;
}

uint64_t AVE_BlkBuf_Addr2Idx(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v5;

  result = 4294966295;
  if (a1)
  {
    if (a3)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (a2 >= v5 && v5 + *(int *)(a1 + 40) > a2)
      {
        result = 0;
        *a3 = (a2 - v5) / *(int *)(a1 + 48);
      }
    }
  }
  return result;
}

uint64_t AVE_PixelBuf_DumpLinear(__CVBuffer *a1, _DWORD *a2, FILE *a3)
{
  int WidthOfPlane;
  int v7;
  int HeightOfPlane;
  int v9;
  char *BaseAddressOfPlane;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  BOOL v19;
  int v21;
  int v22;
  int BytesPerRowOfPlane;
  int v24;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;

  extraRowsOnBottom = 0;
  extraColumnsOnRight = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  v24 = a2[1];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  v7 = extraColumnsOnRight;
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v9 = extraRowsOnBottom + HeightOfPlane;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v21 = WidthOfPlane;
    v12 = v7;
    v13 = ((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v11;
    v14 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    v15 = ((int)extraRowsOnBottom >> ((int)a2[5] >> 1)) + v14;
    LODWORD(v17) = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    v22 = 2 * v13;
    v7 = v12;
    WidthOfPlane = v21;
    v17 = (int)v17;
  }
  else
  {
    v22 = 0;
    v15 = 0;
    v17 = 0;
    v16 = 0;
  }
  if (v9 >= 1)
  {
    v18 = (v7 + WidthOfPlane) << (v24 == 10);
    do
    {
      fwrite(BaseAddressOfPlane, 1uLL, v18, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      --v9;
    }
    while (v9);
  }
  if (a2[3])
    v19 = v15 < 1;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      fwrite(v16, 1uLL, v22 << (v24 == 10), a3);
      v16 += v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t AVE_PixelBuf_DumpPacked(__CVBuffer *a1, int *a2, FILE *a3)
{
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int WidthOfPlane;
  int v12;
  int HeightOfPlane;
  int v14;
  int BytesPerRowOfPlane;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v32;
  const char *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  FILE *__stream;
  int v39;
  unsigned __int8 *BaseAddressOfPlane;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;

  extraColumnsOnRight = 0;
  extraRowsOnBottom = 0;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  v6 = a2[1];
  v8 = v6 + 7;
  v7 = v6 < -7;
  v9 = v6 + 14;
  if (!v7)
    v9 = v8;
  v10 = v9 >> 3;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  v12 = extraColumnsOnRight + WidthOfPlane;
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  v14 = extraRowsOnBottom + HeightOfPlane;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a2[3])
  {
    v16 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v17 = ((int)extraColumnsOnRight >> (a2[4] >> 1)) + v16;
    v18 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    v19 = ((int)extraRowsOnBottom >> (a2[5] >> 1)) + v18;
    v39 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    v20 = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    v21 = v19;
  }
  else
  {
    v17 = 0;
    v21 = 0;
    v39 = 0;
    v20 = 0;
  }
  v22 = v12 * v10;
  v23 = v12 * v10 * v14;
  v24 = 2 * v10 * v17;
  v25 = v23 + v24 * v21;
  if (v25)
  {
    v35 = v20;
    v36 = v21;
    v37 = v17;
    __stream = a3;
    v26 = v25;
    v27 = (unsigned __int8 *)operator new[]();
    AVE_FmtConv_PlanePacked2Linear(BaseAddressOfPlane, v12, v14, a2[1], 0, 0, BytesPerRowOfPlane, v22, v27);
    if (a2[3])
      AVE_FmtConv_PlanePacked2Linear(v35, v37, v36, a2[1], 1, 1, v39, v24, &v27[v23]);
    fwrite(v27, 1uLL, v26, __stream);
    MEMORY[0x1B5E4D1A8](v27, 0x1000C8077774924);
    v28 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v29 = AVE_Log_CheckConsole(3u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v29)
      {
        printf("%lld %d AVE %s: %s:%d %s | frame size can not be zero\n", CurrTime, 3, LevelStr, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
        v32 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", v32, 3, v34, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | frame size can not be zero", CurrTime, 3, LevelStr, "AVE_PixelBuf_DumpPacked", 147, "frameSize != 0");
      }
    }
    v28 = 4294966295;
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v28;
}

uint64_t AVE_PixelBuf_DumpHTPC(__CVBuffer *a1, int *a2, FILE *a3)
{
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int WidthOfPlane;
  int HeightOfPlane;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  size_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char v23;
  unsigned int v24;
  unsigned __int8 *BaseAddressOfCompressedTileDataRegionOfPlane;
  unsigned __int8 *BaseAddressOfCompressedTileHeaderRegionOfPlane;
  char HTPCVerticalHeaderGroupingModeOfPlane;
  unsigned int BytesPerRowOfCompressedTileHeaderGroupsOfPlane;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;

  extraRowsOnBottom = 0;
  extraColumnsOnRight = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
  v5 = a2[1];
  v7 = v5 + 7;
  v6 = v5 < -7;
  v8 = v5 + 14;
  if (!v6)
    v8 = v7;
  v9 = v8 >> 3;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfCompressedTileHeaderGroupsOfPlane = IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
  HTPCVerticalHeaderGroupingModeOfPlane = IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
  BaseAddressOfCompressedTileHeaderRegionOfPlane = (unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  BaseAddressOfCompressedTileDataRegionOfPlane = (unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v12 = extraColumnsOnRight + WidthOfPlane;
  v13 = (extraColumnsOnRight + WidthOfPlane) * v9;
  if (a2[3])
  {
    v14 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v15 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    v24 = IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
    v23 = IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane();
    v22 = (unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    v21 = (unsigned __int8 *)IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    v16 = (int)extraColumnsOnRight >> (a2[4] >> 1);
    v17 = 2 * v9 * (v16 + v14);
    v12 = extraColumnsOnRight + WidthOfPlane;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v17 = 0;
    v24 = 0;
    v23 = 0;
    v21 = 0;
    v22 = 0;
    v16 = (int)extraColumnsOnRight >> (a2[4] >> 1);
  }
  v18 = (((int)extraRowsOnBottom + HeightOfPlane) * v12
       + 2 * (v16 + v14) * (((int)extraRowsOnBottom >> (a2[5] >> 1)) + v15))
      * v9;
  v19 = (unsigned __int8 *)operator new[]();
  AVE_FmtConv_PlaneHTPC2Linear(BaseAddressOfCompressedTileHeaderRegionOfPlane, BaseAddressOfCompressedTileDataRegionOfPlane, WidthOfPlane, HeightOfPlane, a2[1], 0, 0, BytesPerRowOfCompressedTileHeaderGroupsOfPlane, HTPCVerticalHeaderGroupingModeOfPlane, v13, v19);
  if (a2[3])
    AVE_FmtConv_PlaneHTPC2Linear(v22, v21, v14, v15, a2[1], 1, 1, v24, v23, v17, &v19[(extraColumnsOnRight + WidthOfPlane) * v9 * (extraRowsOnBottom + HeightOfPlane)]);
  fwrite(v19, 1uLL, v18, a3);
  MEMORY[0x1B5E4D1A8](v19, 0x1000C8077774924);
  return 0;
}

uint64_t AVE_PixelBuf_DumpInterchange(__CVBuffer *a1, _DWORD *a2, FILE *a3)
{
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int WidthOfPlane;
  int HeightOfPlane;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  unsigned int VerticalPixelOffsetWithinCompressedTileArrayOfPlane;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  int v23;
  int v25;
  int v26;
  unsigned int v27[3];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int HorizontalPixelOffsetWithinCompressedTileArrayOfPlane;
  int v33;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  uint64_t v35;
  FILE *__stream;
  size_t extraColumnsOnLeft;
  size_t extraRowsOnTop;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;

  extraRowsOnBottom = 0;
  extraColumnsOnRight = 0;
  extraRowsOnTop = 0;
  extraColumnsOnLeft = 0;
  CVPixelBufferGetIOSurface(a1);
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  v6 = a2[1];
  v8 = v6 + 7;
  v7 = v6 < -7;
  v9 = v6 + 14;
  if (!v7)
    v9 = v8;
  v10 = v9 >> 3;
  v11 = a2[8];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  v33 = (extraColumnsOnRight + WidthOfPlane + extraColumnsOnLeft) * v10;
  HorizontalPixelOffsetWithinCompressedTileArrayOfPlane = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
  VerticalPixelOffsetWithinCompressedTileArrayOfPlane = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
  v35 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  __stream = a3;
  if (a2[3])
  {
    v16 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v17 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    v31 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    v30 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    v18 = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
    v29 = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
    v19 = 2 * v10;
    v28 = 2
        * v10
        * (((int)extraColumnsOnRight >> ((int)a2[4] >> 1)) + v16 + ((int)extraColumnsOnLeft >> ((int)a2[4] >> 1)));
    *(_QWORD *)v27 = v18;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v28 = 0;
    v30 = 0;
    v31 = 0;
    *(_QWORD *)v27 = 0;
    v29 = 0;
    v19 = 2 * v10;
  }
  v20 = v10 * WidthOfPlane * HeightOfPlane;
  v21 = v20 + v19 * v16 * v17;
  v22 = (const void *)operator new[]();
  AVE_FmtConv_PlaneInterchange2Linear(v35, BaseAddressOfCompressedTileDataRegionOfPlane, WidthOfPlane, HeightOfPlane, a2[1], 0, 0, (interchange_compression *)v11, v33, v25, HorizontalPixelOffsetWithinCompressedTileArrayOfPlane, 0, VerticalPixelOffsetWithinCompressedTileArrayOfPlane, (uint64_t)v22);
  if (a2[3])
  {
    v23 = a2[1];
    if (v23 == 8 && (_DWORD)v11 == 2 || v23 == 10 && (_DWORD)v11 == 3)
      v11 = (v11 - 1);
    AVE_FmtConv_PlaneInterchange2Linear(v31, v30, v16, v17, v23, 1, 1, (interchange_compression *)v11, v28, v26, v27[0], v27[1], v29, (uint64_t)v22 + v20);
  }
  fwrite(v22, 1uLL, v21, __stream);
  MEMORY[0x1B5E4D1A8](v22, 0x1000C8077774924);
  return 0;
}

uint64_t AVE_PixelBuf_Dump(CVPixelBufferRef pixelBuffer, int a2, __sFILE *a3)
{
  OSType PixelFormatType;
  char *v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v15;
  uint64_t result;
  const char *v17;
  const char *v18;

  if (pixelBuffer && a3)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v7 = AVE_PixelFmt_FindByType(PixelFormatType);
    if (v7)
    {
      switch(*((_DWORD *)v7 + 6))
      {
        case 0:
          AVE_PixelBuf_DumpLinear(pixelBuffer, v7, a3);
          goto LABEL_17;
        case 1:
          return AVE_PixelBuf_DumpPacked(pixelBuffer, (int *)v7, a3);
        case 2:
          AVE_PixelBuf_DumpHTPC(pixelBuffer, (int *)v7, a3);
          goto LABEL_17;
        case 3:
          AVE_PixelBuf_DumpInterchange(pixelBuffer, v7, a3);
LABEL_17:
          result = 0;
          break;
        default:
          return 4294966295;
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(3u, 4))
      {
        v12 = AVE_Log_CheckConsole(3u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x\n", CurrTime, 3, LevelStr, "AVE_PixelBuf_Dump", 391, "pPixelFmt != __null", pixelBuffer, a2, a3, PixelFormatType);
          v15 = AVE_GetCurrTime();
          v18 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", v15, 3, v18, "AVE_PixelBuf_Dump");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get pixel format details %p %d %p 0x%x", CurrTime, 3, LevelStr, "AVE_PixelBuf_Dump");
        }
      }
      return 4294966296;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(3u, 4))
    {
      v8 = AVE_Log_CheckConsole(3u);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", v9, 3, v10, "AVE_PixelBuf_Dump", 384, "pPixelBuf != __null && pFile != __null", pixelBuffer, a2, a3);
        v11 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v11, 3, v17);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v9, 3, v10);
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_WtPred_RetrieveArray(CFDictionaryRef theDict, int a2, int *a3)
{
  const __CFArray *Value;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  int v15;
  CFIndex v16;
  uint64_t v17;
  int *v18;
  _DWORD *v19;
  _DWORD *v20;
  CFIndex v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  int *v29;
  _DWORD *v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  __uint64_t v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  __uint64_t v42;
  int v43;
  __uint64_t CurrTime;
  const char *LevelStr;
  const char *v46;
  const char *v47;
  const char *v48;
  CFIndex v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex v54;
  CFIndex v55;
  uint64_t v56;
  int *v57;
  _DWORD *v58;
  int *v59;
  CFIndex v60;
  _DWORD *v61;
  CFIndex v62;
  uint64_t v63;
  int v64;
  char v65[9];

  if (a2 <= 4 && theDict && a3)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("WeightData_WeightFlagArray"));
    v7 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("WeightData_Weight"));
    v8 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("WeightData_Weight"));
    v9 = v8;
    if (Value && v7 && v8)
    {
      Count = CFArrayGetCount(Value);
      v11 = CFArrayGetCount(v7);
      v12 = CFArrayGetCount(v9);
      if (a2 < 1)
      {
        return 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v54 = v11;
        v55 = Count;
        if ((int)Count >= (int)v11)
          v15 = v11;
        else
          v15 = Count;
        v53 = v12;
        if (v15 >= (int)v12)
          v15 = v12;
        v16 = v15;
        v56 = a2;
        v60 = v15;
        while (2)
        {
          v17 = 0;
          v63 = v14;
          v18 = &a3[v14];
          v19 = v18 + 11;
          v20 = v18 + 3;
          v58 = v18 + 67;
          v59 = v18 + 19;
          v57 = v18 + 27;
          v61 = v18 + 3;
          v62 = v13;
          do
          {
            v65[0] = 0;
            v64 = 0;
            v21 = v13 + v17;
            if (v13 + v17 >= v16)
            {
              if (AVE_Log_CheckLevel(0xD7u, 4))
              {
                v43 = AVE_Log_CheckConsole(0xD7u);
                CurrTime = AVE_GetCurrTime();
                LevelStr = AVE_Log_GetLevelStr(4);
                if (v43)
                {
                  printf("%lld %d AVE %s: %s:%d %s | Wrong WP array size %d %d %d %d\n", CurrTime, 215, LevelStr, "AVE_WtPred_RetrieveArray", 56, "arrayIdx < iFlagCnt && arrayIdx < iWeightCnt && arrayIdx < iOffsetCnt", v55, v54, v53, v13 + v17);
                  CurrTime = AVE_GetCurrTime();
                  v51 = v53;
                  v52 = v13 + v17;
                  v49 = v55;
                  v50 = v54;
                  v48 = AVE_Log_GetLevelStr(4);
                }
                else
                {
                  v51 = v53;
                  v52 = v13 + v17;
                  v49 = v55;
                  v50 = v54;
                  v48 = LevelStr;
                }
                syslog(3, "%lld %d AVE %s: %s:%d %s | Wrong WP array size %d %d %d %d", CurrTime, 215, v48, "AVE_WtPred_RetrieveArray", 56, "arrayIdx < iFlagCnt && arrayIdx < iWeightCnt && arrayIdx < iOffsetCnt", v49, v50, v51, v52);
              }
              return 4294966295;
            }
            result = AVE_CFArray_GetChar(Value, v13 + v17, v65);
            if ((_DWORD)result)
              return result;
            if (v17)
            {
              *v19 = v65[0];
              result = AVE_CFArray_GetSInt32(v7, v13 + v17, &v64);
              if ((_DWORD)result)
                return result;
              if (*v19)
              {
                v23 = v64;
                v24 = a3[1];
              }
              else
              {
                v24 = a3[1];
                v23 = 1 << v24;
              }
              v27 = (v17 - 1);
              v28 = &a3[2 * v63];
              v29 = &v28[v27];
              v29[35] = v23;
              v30 = v29 + 35;
              v30[40] = (-1 << v24) + v23;
              result = AVE_CFArray_GetSInt32(v9, v21, &v64);
              if ((_DWORD)result)
                return result;
              if (*v19)
                v31 = v64;
              else
                v31 = 0;
              v32 = &v28[v27];
              v32[51] = v31;
              v33 = v31 + ((int)(*v30 << 7) >> a3[1]) - 128;
              if (v33 >= 511)
                v33 = 511;
              if (v33 <= -512)
                v33 = -512;
              v32[91] = v33;
              v20 = v61;
              v13 = v62;
              v16 = v60;
            }
            else
            {
              *v20 = v65[0];
              result = AVE_CFArray_GetSInt32(v7, v21, &v64);
              if ((_DWORD)result)
                return result;
              if (*v20)
              {
                v25 = v64;
                v26 = *a3;
              }
              else
              {
                v26 = *a3;
                v25 = 1 << *a3;
              }
              *v59 = v25;
              *v58 = (-1 << v26) + v25;
              result = AVE_CFArray_GetSInt32(v9, v13, &v64);
              if ((_DWORD)result)
                return result;
              if (*v20)
                v34 = v64;
              else
                v34 = 0;
              *v57 = v34;
            }
            ++v17;
          }
          while (v17 != 3);
          result = 0;
          v14 = v63 + 1;
          v13 += 3;
          if (v63 + 1 != v56)
            continue;
          break;
        }
      }
    }
    else
    {
      if (AVE_Log_CheckLevel(0xD7u, 4))
      {
        v39 = AVE_Log_CheckConsole(0xD7u);
        v40 = AVE_GetCurrTime();
        v41 = AVE_Log_GetLevelStr(4);
        if (v39)
        {
          printf("%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p\n", v40, 215, v41, "AVE_WtPred_RetrieveArray", 39, "pFlagArray != __null && pWeightArray != __null && pOffsetArray != __null", Value, v7, v9);
          v42 = AVE_GetCurrTime();
          v47 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p", v42, 215, v47);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | CFArray not existing %p %p %p", v40, 215, v41);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      v35 = AVE_Log_CheckConsole(0xD7u);
      v36 = AVE_GetCurrTime();
      v37 = AVE_Log_GetLevelStr(4);
      if (v35)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v36, 215, v37, "AVE_WtPred_RetrieveArray", 30, "pDict != __null && pInfo != __null && iFrameCount <= 4", theDict, a3, a2);
        v38 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v38, 215, v46);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v36, 215, v37);
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_WtPred_GetInfo(CFDictionaryRef theDict, int a2, _OWORD *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v15;
  __uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t SInt32;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v27;
  const char *v28;

  if (!theDict || !a3)
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      v12 = AVE_Log_CheckConsole(0xD7u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 215, LevelStr, "AVE_WtPred_GetInfo", 246, "pDict != __null && pInfo != __null", theDict, a3);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 215);
    }
    return 4294966295;
  }
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  *(_OWORD *)((char *)a3 + 412) = 0u;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("WeightedPredictionInfo"));
  if (!Value)
  {
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      v15 = AVE_Log_CheckConsole(0xD7u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get dictionary %p %p\n", v16, 215, v17, "AVE_WtPred_GetInfo", 254, "pWPInfoDict != __null", theDict, 0);
        v16 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get dictionary %p %p", v16, 215);
    }
    return 4294966288;
  }
  v7 = Value;
  if (AVE_Log_CheckLevel(0x1Du, 6))
  {
    v8 = AVE_Log_CheckConsole(0x1Du);
    v9 = AVE_GetCurrTime();
    v10 = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found \n", v9, 29, v10);
      v11 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found ", v11, 29, v27);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: FIG: AVE_KEY_WP_INFO found ", v9, 29, v10);
    }
  }
  SInt32 = AVE_CFDict_GetSInt32(v7, CFSTR("WeightData_LumaLog2WeightDenom"), (int *)a3);
  if ((_DWORD)SInt32)
  {
    v18 = SInt32;
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      v20 = AVE_Log_CheckConsole(0xD7u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v20)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v21, 215, v22, "AVE_WtPred_GetInfo", 261, "ret == 0", v7, a3, v18);
        v23 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
LABEL_26:
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v23, 215, v28);
        return v18;
      }
      goto LABEL_31;
    }
  }
  else
  {
    v24 = AVE_CFDict_GetSInt32(v7, CFSTR("WeightData_ChromaLog2WeightDenom"), (int *)a3 + 1);
    if (!(_DWORD)v24)
      return AVE_WtPred_RetrieveArray(v7, a2, (int *)a3);
    v18 = v24;
    if (AVE_Log_CheckLevel(0xD7u, 4))
    {
      v25 = AVE_Log_CheckConsole(0xD7u);
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d\n", v21, 215, v22, "AVE_WtPred_GetInfo", 266, "ret == 0", v7, a3, v18);
        v23 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        goto LABEL_26;
      }
LABEL_31:
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %d", v21, 215, v22);
    }
  }
  return v18;
}

uint64_t AVE_WtPred_PrintInfo(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  int v29;
  __uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  int v41;
  __uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  __uint64_t v51;
  int v52;
  int v53;
  __uint64_t v54;
  const char *v55;
  __uint64_t v56;
  const char *v57;
  int v58;
  int v59;
  __uint64_t v60;
  const char *v61;
  __uint64_t v62;
  int v63;
  int v64;
  __uint64_t v65;
  const char *v66;
  __uint64_t v67;
  __uint64_t v68;
  __uint64_t v69;
  __uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  _OWORD v76[2];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  memset(v76, 0, sizeof(v76));
  if (!a1)
    return 4294966295;
  v9 = a1;
  AVE_ComposePosStr(a4, a5, (char *)v76, 32, a5, a6, a7, a8);
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v10 = AVE_Log_CheckConsole(a2);
    v11 = v10;
    if (a3 < 0)
    {
      if (v10 && (-a3 & 0x20) == 0)
        printf("WP %s luma_log2_weight_denom = %d\n", (const char *)v76, *v9);
      syslog(3, "WP %s luma_log2_weight_denom = %d");
    }
    else
    {
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v11)
      {
        printf("%lld %d AVE %s: WP %s luma_log2_weight_denom = %d\n", CurrTime, a2, LevelStr, (const char *)v76, *v9);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s luma_log2_weight_denom = %d");
    }
  }
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v15 = AVE_Log_CheckConsole(a2);
    v16 = v15;
    if (a3 < 0)
    {
      if (v15 && (-a3 & 0x20) == 0)
        printf("WP %s chroma_log2_weight_denom = %d\n", (const char *)v76, v9[1]);
      syslog(3, "WP %s chroma_log2_weight_denom = %d");
    }
    else
    {
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v16)
      {
        printf("%lld %d AVE %s: WP %s chroma_log2_weight_denom = %d\n", v17, a2, v18, (const char *)v76, v9[1]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s chroma_log2_weight_denom = %d");
    }
  }
  if (AVE_Log_CheckLevel(a2, (char)a3))
  {
    v19 = AVE_Log_CheckConsole(a2);
    v20 = v19;
    if (a3 < 0)
    {
      if (v19 && (-a3 & 0x20) == 0)
        printf("WP %s delta_chroma_log2_weight_denom = %d\n", (const char *)v76, v9[2]);
      syslog(3, "WP %s delta_chroma_log2_weight_denom = %d");
    }
    else
    {
      v21 = AVE_GetCurrTime();
      v22 = AVE_Log_GetLevelStr((char)a3);
      if ((a3 & 0x20) == 0 && v20)
      {
        printf("%lld %d AVE %s: WP %s delta_chroma_log2_weight_denom = %d\n", v21, a2, v22, (const char *)v76, v9[2]);
        AVE_GetCurrTime();
        AVE_Log_GetLevelStr((char)a3);
      }
      syslog(3, "%lld %d AVE %s: WP %s delta_chroma_log2_weight_denom = %d");
    }
  }
  v23 = 0;
  v74 = -a3;
  v73 = v9 + 51;
  v71 = v9;
  do
  {
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      v24 = AVE_Log_CheckConsole(a2);
      v25 = v24;
      if (a3 < 0)
      {
        if (v24 && (v74 & 0x20) == 0)
          printf("WP %s luma_weight_l0_flag[%d] = %d\n", (const char *)v76, v23, v9[v23 + 3]);
        syslog(3, "WP %s luma_weight_l0_flag[%d] = %d");
      }
      else
      {
        v26 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v25)
        {
          printf("%lld %d AVE %s: WP %s luma_weight_l0_flag[%d] = %d\n", v26, a2, v27, (const char *)v76, v23, v9[v23 + 3]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_weight_l0_flag[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      v28 = AVE_Log_CheckConsole(a2);
      v29 = v28;
      if (a3 < 0)
      {
        if (v28 && (v74 & 0x20) == 0)
          printf("WP %s luma_weight_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 19]);
        syslog(3, "WP %s luma_weight_l0[%d] = %d");
      }
      else
      {
        v30 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v29)
        {
          printf("%lld %d AVE %s: WP %s luma_weight_l0[%d] = %d\n", v30, a2, v31, (const char *)v76, v23, v9[v23 + 19]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_weight_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      v32 = AVE_Log_CheckConsole(a2);
      v33 = v32;
      if (a3 < 0)
      {
        if (v32 && (v74 & 0x20) == 0)
          printf("WP %s luma_offset_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 27]);
        syslog(3, "WP %s luma_offset_l0[%d] = %d");
      }
      else
      {
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v33)
        {
          printf("%lld %d AVE %s: WP %s luma_offset_l0[%d] = %d\n", v34, a2, v35, (const char *)v76, v23, v9[v23 + 27]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s luma_offset_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      v36 = AVE_Log_CheckConsole(a2);
      v37 = v36;
      if (a3 < 0)
      {
        if (v36 && (v74 & 0x20) == 0)
          printf("WP %s delta_luma_weight_l0[%d] = %d\n", (const char *)v76, v23, v9[v23 + 67]);
        syslog(3, "WP %s delta_luma_weight_l0[%d] = %d");
      }
      else
      {
        v38 = AVE_GetCurrTime();
        v39 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v37)
        {
          printf("%lld %d AVE %s: WP %s delta_luma_weight_l0[%d] = %d\n", v38, a2, v39, (const char *)v76, v23, v9[v23 + 67]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s delta_luma_weight_l0[%d] = %d");
      }
    }
    if (AVE_Log_CheckLevel(a2, (char)a3))
    {
      v40 = AVE_Log_CheckConsole(a2);
      v41 = v40;
      if (a3 < 0)
      {
        if (v40 && (v74 & 0x20) == 0)
          printf("WP %s chroma_weight_l0_flag[%d] = %d\n", (const char *)v76, v23, v9[v23 + 11]);
        syslog(3, "WP %s chroma_weight_l0_flag[%d] = %d");
      }
      else
      {
        v42 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr((char)a3);
        if ((a3 & 0x20) == 0 && v41)
        {
          printf("%lld %d AVE %s: WP %s chroma_weight_l0_flag[%d] = %d\n", v42, a2, v43, (const char *)v76, v23, v9[v23 + 11]);
          AVE_GetCurrTime();
          AVE_Log_GetLevelStr((char)a3);
        }
        syslog(3, "%lld %d AVE %s: WP %s chroma_weight_l0_flag[%d] = %d");
      }
    }
    v44 = v23;
    v45 = 0;
    v72 = v44;
    v46 = v73;
    do
    {
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v47 = AVE_Log_CheckConsole(a2);
        v48 = v47;
        if (a3 < 0)
        {
          if (v47 && (v74 & 0x20) == 0)
            printf("WP %s chroma_weight_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, *(v46 - 16));
          syslog(3, "WP %s chroma_weight_l0[%d][%d] = %d");
        }
        else
        {
          v49 = AVE_GetCurrTime();
          v50 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v48)
          {
            v68 = v49;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s chroma_weight_l0[%d][%d] = %d\n", v49, a2, v50, (const char *)v76, v44, v45, *(v46 - 16));
            v51 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            v68 = v51;
          }
          syslog(3, "%lld %d AVE %s: WP %s chroma_weight_l0[%d][%d] = %d", v68);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v52 = AVE_Log_CheckConsole(a2);
        v53 = v52;
        if (a3 < 0)
        {
          if (v52 && (v74 & 0x20) == 0)
            printf("WP %s chroma_offset_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, *v46);
          syslog(3, "WP %s chroma_offset_l0[%d][%d] = %d");
        }
        else
        {
          v54 = AVE_GetCurrTime();
          v55 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v53)
          {
            syslog(3, "%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d", v54, a2, v55);
          }
          else
          {
            printf("%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d\n", v54, a2, v55, (const char *)v76, v44, v45, *v46);
            v56 = AVE_GetCurrTime();
            v57 = AVE_Log_GetLevelStr((char)a3);
            syslog(3, "%lld %d AVE %s: WP %s chroma_offset_l0[%d][%d] = %d", v56, a2, v57);
          }
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v58 = AVE_Log_CheckConsole(a2);
        v59 = v58;
        if (a3 < 0)
        {
          if (v58 && (v74 & 0x20) == 0)
            printf("WP %s delta_chroma_weight_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, v46[24]);
          syslog(3, "WP %s delta_chroma_weight_l0[%d][%d] = %d");
        }
        else
        {
          v60 = AVE_GetCurrTime();
          v61 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v59)
          {
            v69 = v60;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s delta_chroma_weight_l0[%d][%d] = %d\n", v60, a2, v61, (const char *)v76, v44, v45, v46[24]);
            v62 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            v69 = v62;
          }
          syslog(3, "%lld %d AVE %s: WP %s delta_chroma_weight_l0[%d][%d] = %d", v69);
        }
      }
      if (AVE_Log_CheckLevel(a2, (char)a3))
      {
        v63 = AVE_Log_CheckConsole(a2);
        v64 = v63;
        if (a3 < 0)
        {
          if (v63 && (v74 & 0x20) == 0)
            printf("WP %s delta_chroma_offset_l0[%d][%d] = %d\n", (const char *)v76, v44, v45, v46[40]);
          syslog(3, "WP %s delta_chroma_offset_l0[%d][%d] = %d");
        }
        else
        {
          v65 = AVE_GetCurrTime();
          v66 = AVE_Log_GetLevelStr((char)a3);
          if ((a3 & 0x20) != 0 || !v64)
          {
            v70 = v65;
          }
          else
          {
            printf("%lld %d AVE %s: WP %s delta_chroma_offset_l0[%d][%d] = %d\n", v65, a2, v66, (const char *)v76, v44, v45, v46[40]);
            v67 = AVE_GetCurrTime();
            AVE_Log_GetLevelStr((char)a3);
            v70 = v67;
          }
          syslog(3, "%lld %d AVE %s: WP %s delta_chroma_offset_l0[%d][%d] = %d", v70);
        }
      }
      ++v45;
      ++v46;
    }
    while (v45 != 2);
    v23 = v44 + 1;
    v73 += 2;
    v9 = v71;
  }
  while (v72 != 3);
  return 0;
}

uint64_t AVE_ParseDLBCfg(char *a1, int *a2)
{
  char *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;

  if (!a1)
    return 4294966288;
  v3 = a1;
  v4 = 0;
  v5 = a2 + 2;
  v6 = -1;
  v7 = a2 + 2;
LABEL_3:
  v8 = 0;
  result = *v3;
  if (*v3 <= 0x63u)
  {
    switch(*v3)
    {
      case 'D':
        goto LABEL_33;
      case 'E':
      case 'F':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'O':
      case 'Q':
      case 'R':
        goto LABEL_14;
      case 'G':
        goto LABEL_6;
      case 'M':
        goto LABEL_7;
      case 'N':
        goto LABEL_8;
      case 'P':
        goto LABEL_9;
      case 'S':
        goto LABEL_10;
      case 'T':
        goto LABEL_11;
      default:
        if ((_DWORD)result == 32)
          goto LABEL_32;
        if (*v3)
          goto LABEL_14;
        goto LABEL_40;
    }
  }
  switch(*v3)
  {
    case 'd':
      goto LABEL_33;
    case 'g':
LABEL_6:
      v8 = 4;
      goto LABEL_33;
    case 'm':
LABEL_7:
      v8 = 2;
      goto LABEL_33;
    case 'n':
LABEL_8:
      v8 = 3;
      goto LABEL_33;
    case 'p':
LABEL_9:
      v8 = 5;
      goto LABEL_33;
    case 's':
LABEL_10:
      v8 = 6;
      goto LABEL_33;
    case 't':
LABEL_11:
      v8 = 1;
      goto LABEL_33;
    default:
LABEL_14:
      if ((result - 48) > 9)
      {
        result = 4294966296;
        if ((v6 & 0x80000000) == 0)
          goto LABEL_41;
        return 4294966288;
      }
      break;
  }
  switch((int)v4)
  {
    case 0:
      v10 = atoi(v3);
      if (v10 <= 5)
      {
        v7 = &v5[28 * v10];
        v6 = v10;
        goto LABEL_30;
      }
      result = 4294966290;
      if (v6 < 0)
        return 4294966288;
      goto LABEL_41;
    case 1:
      v6 &= ~(v6 >> 31);
      *v7 = atoi(v3) != 0;
      goto LABEL_30;
    case 2:
      v6 &= ~(v6 >> 31);
      v7[1] = atoi(v3) != 0;
      goto LABEL_30;
    case 3:
      v15 = atoi(v3);
      if ((v15 - 9) < 0xFFFFFFF8)
        goto LABEL_39;
      v6 &= ~(v6 >> 31);
      v7[2] = v15;
      goto LABEL_30;
    case 4:
      v16 = atoi(v3);
      if (v16 > 7)
      {
LABEL_39:
        result = 4294966278;
LABEL_40:
        if (v6 < 0)
          return 4294966288;
        goto LABEL_41;
      }
      v17 = v7[3];
      v6 &= ~(v6 >> 31);
      v18 = (uint64_t)&v7[3 * v17 + 3];
      *(_DWORD *)(v18 + 4) = v16;
      *(_DWORD *)(v18 + 8) = 1;
      v7[3] = v17 + 1;
      goto LABEL_30;
    default:
      v11 = atoi(v3);
      v12 = v7[3];
      if ((int)v12 < 1)
        goto LABEL_35;
      v13 = 0;
      v14 = 12 * v12;
      break;
  }
  do
  {
    if (v7[v13 / 4 + 4] == v11)
    {
      v7[v13 / 4 + 5] = v4 != 5;
LABEL_30:
      result = (uint64_t)strchr(v3, 32);
      if (!result)
        goto LABEL_40;
      v3 = (char *)result;
LABEL_32:
      v8 = v4;
LABEL_33:
      ++v3;
      v4 = v8;
      goto LABEL_3;
    }
    v13 += 12;
  }
  while (v14 != v13);
LABEL_35:
  result = 4294966274;
  if (v6 < 0)
    return 4294966288;
LABEL_41:
  v19 = *a2;
  if (*a2 <= v6 + 1)
    v19 = v6 + 1;
  *a2 = v19;
  return result;
}

uint64_t AVE_ISP_RetrieveMetadata(CFDictionaryRef theDict, double *a2)
{
  double *v4;
  uint64_t Bool;
  int v6;
  const __CFString *Value;
  const char *Str;
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v16;
  __uint64_t CurrTime;
  const char *LevelStr;
  BOOL v19;
  char v20[16];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  if (theDict && a2)
  {
    a2[10] = 0.0;
    *(_OWORD *)a2 = 0uLL;
    *((_OWORD *)a2 + 4) = 0uLL;
    *((_OWORD *)a2 + 3) = 0uLL;
    *((_OWORD *)a2 + 2) = 0uLL;
    *((_OWORD *)a2 + 1) = 0uLL;
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06D98], a2);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06CD0], a2 + 1);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06A20], a2 + 2);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D067E0], a2 + 3);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06F60], a2 + 4);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06F78], a2 + 5);
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06F68], a2 + 6);
    v4 = a2 + 7;
    AVE_CFDict_GetDouble(theDict, (const __CFString *)*MEMORY[0x1E0D06DA0], a2 + 7);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0D06DE8], (int *)a2 + 16);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0D06C40], (int *)a2 + 17);
    if (AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0D06EF0], (int *)a2 + 18) == -1008)
      *((_DWORD *)a2 + 18) = -1;
    Bool = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E0D06EF8], &v19);
    v6 = v19;
    if ((_DWORD)Bool == -1008)
      v6 = -1;
    *((_DWORD *)a2 + 19) = v6;
    Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06D00]);
    if (Value)
    {
      Str = AVE_CFStr_GetStr(Value, v20, 32);
      if (Str)
      {
        v9 = Str;
        v10 = 0;
        while (strcmp(v9, *(const char **)((char *)&gs_saAVE_CamPortMap + v10)))
        {
          v10 += 16;
          if (v10 == 80)
          {
            v11 = 0;
            goto LABEL_21;
          }
        }
        v11 = *(_DWORD *)((char *)&gs_saAVE_CamPortMap + v10 + 8);
LABEL_21:
        *((_DWORD *)a2 + 20) = v11;
        if (AVE_Log_CheckLevel(0x37u, 6))
        {
          v16 = AVE_Log_CheckConsole(0x37u);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(6);
          if (v16)
          {
            printf("%lld %d AVE %s: %s:%d SF: %f Port: %s %d\n", CurrTime, 55, LevelStr, "AVE_ISP_RetrieveMetadata", 123, *v4, v9, v11);
            CurrTime = AVE_GetCurrTime();
            AVE_Log_GetLevelStr(6);
          }
          syslog(3, "%lld %d AVE %s: %s:%d SF: %f Port: %s %d", CurrTime);
        }
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x37u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", v13, 55, v14, "AVE_ISP_RetrieveMetadata", 75, "pDict != __null && pData != __null", theDict, a2);
        v13 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", v13, 55);
    }
    return 4294966295;
  }
  return Bool;
}

uint64_t AVE_ISP_CheckMetadata(__CVBuffer *a1)
{
  const __CFDictionary *v1;
  uint64_t v2;
  const __CFDictionary *v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
  {
    v1 = (const __CFDictionary *)AVE_ISP_CopyCFMetadata(a1);
    v2 = 4294966288;
    if (v1)
    {
      v3 = v1;
      if (CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E0D06DE8]))
        v2 = 0;
      else
        v2 = 4294966288;
      CFRelease(v3);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      v4 = AVE_Log_CheckConsole(0x37u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", CurrTime, 55, LevelStr, "AVE_ISP_CheckMetadata", 216, "pImgBuf != __null", 0);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", CurrTime);
    }
    return 4294966295;
  }
  return v2;
}

const void *AVE_ISP_CopyCFMetadata(__CVBuffer *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const void *Value;
  const void *v4;

  v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (!v1)
    return 0;
  v2 = v1;
  Value = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0D05CB0]);
  v4 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v2);
  return v4;
}

uint64_t AVE_ISP_GetMetadata(__CVBuffer *a1, double *a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  uint64_t Metadata;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1 && a2)
  {
    v4 = (const __CFDictionary *)AVE_ISP_CopyCFMetadata(a1);
    if (v4)
    {
      v5 = v4;
      Metadata = AVE_ISP_RetrieveMetadata(v4, a2);
      CFRelease(v5);
      return Metadata;
    }
    else
    {
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x37u, 4))
    {
      v8 = AVE_Log_CheckConsole(0x37u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p\n", CurrTime, 55, LevelStr, "AVE_ISP_GetMetadata", 252, "pImgBuf != __null && pData != __null", a1, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p", CurrTime, 55);
    }
    return 4294966295;
  }
}

uint64_t AVE_Log_UpdateConf(unsigned int a1, int a2)
{
  char v5;
  char v6;
  __uint64_t CurrTime;

  if (a1 > 0xFF)
    return 4294966295;
  v5 = a2;
  if (!a2)
    v5 = *((_BYTE *)&gs_sAVE_Log_Default + a1);
  gs_sAVE_Log[a1] = v5;
  if ((byte_1ED52D250 & 0xFu) >= 7)
  {
    v6 = byte_1ED52D250;
    CurrTime = AVE_GetCurrTime();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %d 0x%x\n", CurrTime, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
      CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %d 0x%x", CurrTime, 64, "VERB", "AVE_Log_UpdateConf", 116, a1, a2);
  }
  return 0;
}

BOOL AVE_Log_CheckLevel(unsigned int a1, int a2)
{
  int v2;

  if (a2 >= 0)
    LOBYTE(v2) = a2;
  else
    v2 = -a2;
  return a1 < 5 || a1 <= 0xFF && (v2 & 0xFu) <= (gs_sAVE_Log[a1] & 0xFu);
}

uint64_t AVE_Log_CheckConsole(unsigned int a1)
{
  if (a1 < 2)
    return 1;
  if (a1 <= 0xFF)
    return gs_sAVE_Log[a1] & 0x10;
  return 0;
}

const char *AVE_Log_GetLevelStr(int a1)
{
  int v1;
  unsigned int v2;

  if (a1 >= 0)
    LOBYTE(v1) = a1;
  else
    v1 = -a1;
  v2 = v1 & 0xF;
  if (v2 > 8)
    return "";
  else
    return (const char *)*((_QWORD *)&gsc_piaAVE_Log_LevelStr + v2);
}

uint64_t AVE_Log_Init(void)
{
  __int128 v0;

  if (!gs_iAVE_Timestamp)
  {
    *(_QWORD *)&v0 = 0x505050505050505;
    *((_QWORD *)&v0 + 1) = 0x505050505050505;
    xmmword_1ED52D128 = v0;
    unk_1ED52D138 = v0;
    xmmword_1ED52D1E8 = v0;
    unk_1ED52D1F8 = v0;
    xmmword_1ED52D1C8 = v0;
    unk_1ED52D1D8 = v0;
    xmmword_1ED52D1A8 = v0;
    unk_1ED52D1B8 = v0;
    xmmword_1ED52D188 = v0;
    unk_1ED52D198 = v0;
    xmmword_1ED52D168 = v0;
    unk_1ED52D178 = v0;
    xmmword_1ED52D148 = v0;
    unk_1ED52D158 = v0;
    gs_sAVE_Log_Default = v0;
    unk_1ED52D118 = v0;
    BYTE4(gs_sAVE_Log_Default) = 6;
    BYTE12(xmmword_1ED52D128) = 6;
    byte_1ED52D145 = 6;
    byte_1ED52D11C = 6;
    BYTE5(xmmword_1ED52D168) = 6;
    BYTE1(xmmword_1ED52D148) = 6;
    dword_1ED52D20C = 20;
    dword_1ED52D208 = 25;
    byte_1ED52D120 = 6;
    AVE_MemCpyV2V(gs_sAVE_Log, (char *)&gs_sAVE_Log_Default, 256);
    dword_1ED52D314 = dword_1ED52D20C;
    dword_1ED52D310 = dword_1ED52D208;
    gs_iAVE_Timestamp = 1;
  }
  return 0;
}

uint64_t AVE_Log_UpdateConsole(int a1)
{
  char v2;
  __uint64_t CurrTime;
  uint64_t i;
  char v5;
  __uint64_t v6;

  if ((byte_1ED52D250 & 0xEu) > 5)
  {
    v2 = byte_1ED52D250;
    CurrTime = AVE_GetCurrTime();
    if ((v2 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter %d\n", CurrTime, 64, "INFO", "AVE_Log_UpdateConsole", a1);
      CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Enter %d", CurrTime, 64, "INFO", "AVE_Log_UpdateConsole", a1);
  }
  for (i = 0; i != 256; ++i)
    gs_sAVE_Log[i] = gs_sAVE_Log[i] & 0xEF | (16 * ((gs_sAVE_Log[i] & 0xF) <= a1));
  gs_iAVE_Timestamp = AVE_GetAbsTime();
  AVE_Log_Print();
  if ((byte_1ED52D250 & 0xEu) >= 6)
  {
    v5 = byte_1ED52D250;
    v6 = AVE_GetCurrTime();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit %d %d\n", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
      v6 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Exit %d %d", v6, 64, "INFO", "AVE_Log_UpdateConsole", a1, 0);
  }
  return 0;
}

void AVE_Log_Print()
{
  char v0;
  __uint64_t CurrTime;
  uint64_t i;
  char v3;
  __uint64_t v4;
  int v5;
  char v6;
  __uint64_t v7;

  if ((byte_1ED52D250 & 0xFu) >= 7)
  {
    v0 = byte_1ED52D250;
    CurrTime = AVE_GetCurrTime();
    if ((v0 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s:%d %llu\n", CurrTime, 64, "VERB", "AVE_Log_Print", 85, gs_iAVE_Timestamp);
      CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s:%d %llu", CurrTime, 64, "VERB", "AVE_Log_Print", 85, gs_iAVE_Timestamp);
  }
  for (i = 0; i != 256; ++i)
  {
    if ((byte_1ED52D250 & 0xFu) >= 7)
    {
      v3 = byte_1ED52D250;
      v4 = AVE_GetCurrTime();
      v5 = gs_sAVE_Log[i];
      if ((v3 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: Log Cfg: %3d = 0x%02x\n", v4, 64, "VERB", i, v5);
        v4 = AVE_GetCurrTime();
        v5 = gs_sAVE_Log[i];
      }
      syslog(3, "%lld %d AVE %s: Log Cfg: %3d = 0x%02x", v4, 64, "VERB", i, v5);
    }
  }
  if ((byte_1ED52D250 & 0xFu) >= 7)
  {
    v6 = byte_1ED52D250;
    v7 = AVE_GetCurrTime();
    if ((v6 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: Log Cfg: %d %d\n", v7, 64, "VERB", dword_1ED52D314, dword_1ED52D310);
      v7 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: Log Cfg: %d %d", v7, 64, "VERB", dword_1ED52D314, dword_1ED52D310);
  }
}

uint64_t AVE_Log_Load(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = 4294966295;
  if (a1)
  {
    if (a2)
    {
      *a1 = gs_iAVE_Timestamp;
      AVE_MemCpyV2V((_BYTE *)a2, gs_sAVE_Log, 256);
      result = 0;
      *(_DWORD *)(a2 + 256) = dword_1ED52D310;
      *(_DWORD *)(a2 + 260) = dword_1ED52D314;
    }
  }
  return result;
}

uint64_t AVE_Log_PresetConf(unsigned __int8 *a1, int a2, int a3)
{
  unsigned int i;
  unint64_t v7;

  for (i = 5; i != 256; ++i)
  {
    v7 = (unint64_t)i >> 3;
    if ((int)v7 >= a2)
      break;
    if (((a1[v7] >> (i & 7)) & 1) != 0)
      AVE_Log_UpdateConf(i, a3);
  }
  return 0;
}

uint64_t AVE_Log_PresetCfg(unsigned int a1, unint64_t a2)
{
  char v2;
  char v5;
  __uint64_t CurrTime;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  __uint64_t v15;
  unsigned __int8 v17[16];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  if ((byte_1ED52D250 & 0xEu) >= 6)
  {
    v5 = byte_1ED52D250;
    CurrTime = AVE_GetCurrTime();
    if ((v5 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Enter 0x%x 0x%llx\n", CurrTime, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
      CurrTime = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Enter 0x%x 0x%llx", CurrTime, 64, "INFO", "AVE_Log_PresetCfg", a1, a2);
  }
  v7 = a1 >> 2;
  if (a2)
  {
    v8 = 0;
    v9 = (v7 & 0x3FFFFFC0) - 64;
    do
    {
      if (v9 + (int)v8 > 255)
        break;
      v17[(v9 + (int)v8) / 8] |= ((a2 >> v8) & 1) << (v9 + v8 - (v2 & 0xF8));
      ++v8;
    }
    while (v8 != 64);
    AVE_Log_PresetConf(v17, 32, a1);
  }
  else
  {
    v10 = v7 & 0x3FFFFFC0;
    v11 = (v7 & 0x3FFFFFC0) - 64;
    v12 = 320 - v10;
    if ((unint64_t)(v11 - 192) >= 0xFFFFFFFFFFFFFF00)
      v13 = 64;
    else
      v13 = v12;
    AVE_MemCpyV2V(&gs_sAVE_Log[v11], (char *)&gs_sAVE_Log_Default + v11, v13);
  }
  if ((a1 & 0xFFFFFEFF) != 0)
    gs_iAVE_Timestamp = AVE_GetAbsTime();
  AVE_Log_Print();
  if ((byte_1ED52D250 & 0xEu) >= 6)
  {
    v14 = byte_1ED52D250;
    v15 = AVE_GetCurrTime();
    if ((v14 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: %s Exit 0x%x 0x%llx %d\n", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
      v15 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: %s Exit 0x%x 0x%llx %d", v15, 64, "INFO", "AVE_Log_PresetCfg", a1, a2, 0);
  }
  return 0;
}

uint64_t AVE_Log_ReadCfg(const char *a1)
{
  int TemporayPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char v9;
  __uint64_t v10;
  char v11;
  __uint64_t v12;
  uint64_t v13;
  char v14;
  __uint64_t v15;
  FILE *v16;
  char v17;
  __uint64_t v18;
  int *v19;
  char *v20;
  int *v21;
  char v22;
  __uint64_t CurrTime;
  uint64_t v24;
  FILE *v26;
  char *v27;
  char *v28;
  char v29;
  __uint64_t v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  char v39;
  int *v40;
  char v41;
  __uint64_t v42;
  int *v43;
  char v44;
  __uint64_t v45;
  uint64_t i;
  char *v47;
  char v48;
  __uint64_t v49;
  size_t v50;
  char v51;
  uint64_t v52;
  stat v53;
  char v54[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  memset(&v53, 0, sizeof(v53));
  v52 = 0;
  v51 = 0;
  v50 = 0;
  gsc_piaAVE_Log_DefaultCfgFilePath[0] = 0;
  qword_1ED52D0F0 = 0;
  if (a1)
    gsc_piaAVE_Log_DefaultCfgFilePath[0] = (uint64_t)a1;
  TemporayPath = AVE_GetTemporayPath(v54, 192);
  if (TemporayPath >= 1)
  {
    AVE_SNPrintf(&v54[TemporayPath], 192 - TemporayPath, "%s", v2, v3, v4, v5, v6, (char)"ave_log.cfg");
    qword_1ED52D0F0 = (uint64_t)v54;
  }
  v7 = 0;
  while (1)
  {
    v8 = (const char *)gsc_piaAVE_Log_DefaultCfgFilePath[v7];
    if (v8)
      break;
LABEL_27:
    if (++v7 == 4)
    {
      if ((byte_1ED52D250 & 8) != 0)
      {
        v22 = byte_1ED52D250;
        CurrTime = AVE_GetCurrTime();
        if ((v22 & 0x10) != 0)
        {
          printf("%lld %d AVE %s: cannot find available config file\n", CurrTime, 64, "DBG");
          CurrTime = AVE_GetCurrTime();
        }
        syslog(3, "%lld %d AVE %s: cannot find available config file", CurrTime, 64, "DBG");
      }
      return 4294966288;
    }
  }
  if (stat((const char *)gsc_piaAVE_Log_DefaultCfgFilePath[v7], &v53))
  {
    if ((byte_1ED52D250 & 8) != 0)
    {
      v9 = byte_1ED52D250;
      v10 = AVE_GetCurrTime();
      if ((v9 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file doesn't exist at %s\n", v10, 64, "DBG", v8);
        AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: log config file doesn't exist at %s");
    }
    goto LABEL_27;
  }
  if ((byte_1ED52D250 & 8) != 0)
  {
    v11 = byte_1ED52D250;
    v12 = AVE_GetCurrTime();
    if ((v11 & 0x10) != 0)
    {
      printf("%lld %d AVE %s: log config file is at %s\n", v12, 64, "DBG", v8);
      v12 = AVE_GetCurrTime();
    }
    syslog(3, "%lld %d AVE %s: log config file is at %s", v12, 64, "DBG", v8);
  }
  v13 = v53.st_mtimespec.tv_nsec / 1000 + 1000000 * v53.st_mtimespec.tv_sec;
  if (v13 == gs_iAVE_Timestamp && gs_iAVE_Timestamp)
  {
    if ((byte_1ED52D250 & 8) != 0)
    {
      v14 = byte_1ED52D250;
      v15 = AVE_GetCurrTime();
      if ((v14 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file has been updated %s %llu\n", v15, 64, "DBG", v8, gs_iAVE_Timestamp);
        AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: log config file has been updated %s %llu");
    }
    goto LABEL_27;
  }
  v16 = fopen(v8, "r");
  if (!v16)
  {
    if ((byte_1ED52D250 & 8) != 0)
    {
      v17 = byte_1ED52D250;
      v18 = AVE_GetCurrTime();
      v19 = __error();
      v20 = strerror(*v19);
      if ((v17 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: log config file cannot be opened %s : %s\n", v18, 64, "DBG", v8, v20);
        AVE_GetCurrTime();
        v21 = __error();
        strerror(*v21);
      }
      syslog(3, "%lld %d AVE %s: log config file cannot be opened %s : %s");
    }
    goto LABEL_27;
  }
  v26 = v16;
  v27 = (char *)malloc_type_malloc(0x108uLL, 0x10000400BDB4DB4uLL);
  if (v27)
  {
    v28 = v27;
    if ((byte_1ED52D250 & 0xFu) >= 5)
    {
      v29 = byte_1ED52D250;
      v30 = AVE_GetCurrTime();
      if ((v29 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: used log config file is at %s %llu\n", v30, 64, "WARN", v8, v13);
        v30 = AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: used log config file is at %s %llu", v30, 64, "WARN", v8, v13);
    }
    gs_iAVE_Timestamp = v13;
    v50 = 0;
    v31 = fgetln(v26, &v50);
    if (v31)
    {
      v32 = v31;
      v33 = v28 + 256;
      v34 = v28 + 260;
      do
      {
        v35 = *v32;
        v36 = v35 > 0x23;
        v37 = (1 << v35) & 0x800002400;
        if (v36 || v37 == 0)
        {
          LODWORD(v52) = 15;
          v51 = 0;
          if (sscanf(v32, "LOG_ID_%d=%d%c", (char *)&v52 + 4, &v52, &v51) == 3)
          {
            v39 = v52;
            if ((v51 & 0xDF) == 0x43)
              v39 = v52 | 0x10;
            v28[SHIDWORD(v52)] = v39;
          }
          else if (sscanf(v32, "THRESHOLD=%d", v28 + 256) == 1)
          {
            v40 = &dword_1ED52D208;
            if (*v33)
              v40 = (int *)(v28 + 256);
            dword_1ED52D310 = *v40;
            if ((byte_1ED52D250 & 0xFu) >= 7)
            {
              v41 = byte_1ED52D250;
              v42 = AVE_GetCurrTime();
              if ((v41 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read threshold %d\n", v42, 64, "VERB", "AVE_Log_ReadCfg", 717, *v33);
                AVE_GetCurrTime();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read threshold %d");
            }
          }
          else if (sscanf(v32, "INTERVAL=%d", v28 + 260) == 1)
          {
            v43 = &dword_1ED52D20C;
            if (*v34)
              v43 = (int *)(v28 + 260);
            dword_1ED52D314 = *v43;
            if ((byte_1ED52D250 & 0xFu) >= 7)
            {
              v44 = byte_1ED52D250;
              v45 = AVE_GetCurrTime();
              if ((v44 & 0x10) != 0)
              {
                printf("%lld %d AVE %s: %s:%d Read interval %d\n", v45, 64, "VERB", "AVE_Log_ReadCfg", 724, *v34);
                AVE_GetCurrTime();
              }
              syslog(3, "%lld %d AVE %s: %s:%d Read interval %d");
            }
          }
        }
        v50 = 0;
        v32 = fgetln(v26, &v50);
      }
      while (v32);
    }
    for (i = 0; i != 256; ++i)
    {
      v47 = &v28[i];
      if (!v28[i])
        v47 = v28;
      AVE_Log_UpdateConf(i, *v47);
    }
    AVE_Log_Print();
    free(v28);
    v24 = 0;
  }
  else
  {
    if ((byte_1ED52D250 & 8) != 0)
    {
      v48 = byte_1ED52D250;
      v49 = AVE_GetCurrTime();
      if ((v48 & 0x10) != 0)
      {
        printf("%lld %d AVE %s: cannot allocate memory for log config\n", v49, 64, "DBG");
        v49 = AVE_GetCurrTime();
      }
      syslog(3, "%lld %d AVE %s: cannot allocate memory for log config", v49, 64, "DBG");
    }
    v24 = 4294966293;
  }
  fclose(v26);
  return v24;
}

uint64_t AVE_Log_Config(uint64_t result)
{
  _DWORD *v1;
  const char *v2;
  int v3;
  uint64_t i;
  int v5;

  if (result)
  {
    v1 = (_DWORD *)result;
    if (*(_BYTE *)(result + 44))
      v2 = (const char *)(result + 44);
    else
      v2 = 0;
    result = AVE_Log_ReadCfg(v2);
    v3 = 256;
    for (i = 2; i != 10; i += 2)
    {
      if ((*v1 & v3) != 0)
      {
        AVE_Log_PresetCfg(v3 + 7, *(_QWORD *)&v1[i]);
        result = 0;
      }
      v3 += 256;
    }
    v5 = v1[10];
    if (v5)
    {
      AVE_Log_UpdateConsole((char)v5);
      return 0;
    }
  }
  return result;
}

unsigned int *AVE_DevCap_SearchRange_Find(unsigned int *a1, int a2)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *a1;
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = a1 + 1;
  v6 = a1 + 1;
  do
  {
    v7 = *v6;
    v6 += 4;
    if (v7 == a2)
      result = v5;
    v5 = v6;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t AVE_USL_CreateSurface(const char *a1, int a2, __IOSurface **a3, AVE_USL_Surface **a4)
{
  AVE_USL_Surface *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  const char *v24;
  const char *v25;
  const char *v26;
  AVE_USL_Surface *v27;
  uint64_t v28;

  if (a2 >= 1 && a4)
  {
    *a4 = 0;
    v8 = (AVE_USL_Surface *)operator new();
    AVE_USL_Surface::AVE_USL_Surface(v8);
    v9 = AVE_USL_Surface::Create(v8, 0, 2, 1096172850, a2, a3, a1, 0);
    if ((_DWORD)v9)
    {
      v10 = v9;
      if (AVE_Log_CheckLevel(0x4Cu, 4))
      {
        v11 = AVE_Log_CheckConsole(0x4Cu);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v11)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create surface %p %d 0x%llx %p 0x%llx %d\n", CurrTime, 76, LevelStr, "AVE_USL_CreateSurface", 130, "ret == 0", v8, a2, a3, a1, 0, v10);
          v14 = AVE_GetCurrTime();
          v24 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %p %d 0x%llx %p 0x%llx %d", v14, 76, v24, "AVE_USL_CreateSurface", 130, "ret == 0");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %p %d 0x%llx %p 0x%llx %d", CurrTime, 76, LevelStr, "AVE_USL_CreateSurface", 130, "ret == 0");
        }
      }
LABEL_21:
      AVE_USL_Surface::Destroy(v8);
      AVE_USL_Surface::~AVE_USL_Surface(v8);
      MEMORY[0x1B5E4D1C0]();
      return v10;
    }
    if (((unsigned __int16)a3 & 0x100) != 0)
    {
      v19 = AVE_USL_Surface::Lock(v8);
      if ((_DWORD)v19)
      {
        v10 = v19;
        if (AVE_Log_CheckLevel(0x4Cu, 4))
        {
          v20 = AVE_Log_CheckConsole(0x4Cu);
          v21 = AVE_GetCurrTime();
          v22 = AVE_Log_GetLevelStr(4);
          if (v20)
          {
            printf("%lld %d AVE %s: %s:%d %s | failed to lock surface %p %d\n", v21, 76, v22, "AVE_USL_CreateSurface", 136, "ret == 0", v8, v10);
            v21 = AVE_GetCurrTime();
            v27 = v8;
            v28 = v10;
            v26 = AVE_Log_GetLevelStr(4);
          }
          else
          {
            v27 = v8;
            v28 = v10;
            v26 = v22;
          }
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to lock surface %p %d", v21, 76, v26, "AVE_USL_CreateSurface", 136, "ret == 0", v27, v28);
        }
        goto LABEL_21;
      }
    }
    AVE_USL_Surface::Print(v8, 76, 6, "AVE_USL_CreateSurface", 139);
    v10 = 0;
    *a4 = v8;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v15 = AVE_Log_CheckConsole(0x4Cu);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p\n", v16, 76, v17, "AVE_USL_CreateSurface", 119, "size > 0 && ppSurface != __null", a1, a2, a3, a4);
        v18 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v18, 76, v25, "AVE_USL_CreateSurface");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d 0x%llx %p", v16, 76, v17, "AVE_USL_CreateSurface");
      }
    }
    return 4294966295;
  }
  return v10;
}

void sub_1B55BB730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x1020C40EBA818EDLL);
  _Unwind_Resume(a1);
}

uint64_t AVE_USL_DestroySurface(AVE_USL_Surface *a1)
{
  uint64_t v2;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
  {
    v2 = AVE_USL_Surface::Destroy(a1);
    AVE_USL_Surface::~AVE_USL_Surface(a1);
    MEMORY[0x1B5E4D1C0]();
    return v2;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v4 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v4)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroySurface", 170, "pSurface != __null", 0);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
    }
    return 4294966295;
  }
}

uint64_t AVE_USL_CreateInSurfaces(const void *a1, int a2, const void *a3)
{
  int v7;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v10;
  const char *v11;

  if (a1 && a3)
    return 0;
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    v7 = AVE_Log_CheckConsole(0x4Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v7)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", CurrTime, 76, LevelStr, "AVE_USL_CreateInSurfaces", 215, "pSInfoSet != __null && pSet != __null", a1, a2, a3);
      v10 = AVE_GetCurrTime();
      v11 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v10, 76, v11);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", CurrTime, 76, LevelStr);
    }
  }
  AVE_USL_DestroyInSurfaces((uint64_t)a3);
  return 4294966295;
}

uint64_t AVE_USL_DestroyInSurfaces(uint64_t a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
    return 0;
  if (AVE_Log_CheckLevel(0x4Cu, 4))
  {
    v2 = AVE_Log_CheckConsole(0x4Cu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v2)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroyInSurfaces", 241, "pSet != __null", 0);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
  }
  return 4294966295;
}

uint64_t AVE_USL_RetrieveDataSurfaces(AVE_USL_Surface **a1, _DWORD *a2)
{
  AVE_USL_Surface *v4;
  AVE_USL_Surface *v5;
  AVE_USL_Surface *v6;
  AVE_USL_Surface *v7;
  AVE_USL_Surface *v8;
  AVE_USL_Surface *v9;

  v4 = *a1;
  if (v4)
    *a2 = AVE_USL_Surface::GetID(v4);
  v5 = a1[1];
  if (v5)
    a2[1] = AVE_USL_Surface::GetID(v5);
  v6 = a1[2];
  if (v6)
    a2[2] = AVE_USL_Surface::GetID(v6);
  v7 = a1[3];
  if (v7)
    a2[3] = AVE_USL_Surface::GetID(v7);
  v8 = a1[4];
  if (v8)
    a2[5] = AVE_USL_Surface::GetID(v8);
  v9 = a1[5];
  if (v9)
    a2[6] = AVE_USL_Surface::GetID(v9);
  return 0;
}

uint64_t AVE_USL_CreateDataSurfaces(_DWORD *a1, int a2, AVE_USL_Surface **a3)
{
  char **SurfaceCfg;
  int v7;
  int v8;
  __IOSurface **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int Size;
  AVE_USL_Surface *v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v20;
  uint64_t v21;
  uint64_t Surface;
  int v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  char **v27;
  int v28;
  int v29;
  __IOSurface **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  AVE_USL_Surface *v36;
  AVE_USL_Surface **v37;
  int v38;
  AVE_USL_Surface *v39;
  int v40;
  const char *v41;
  __uint64_t v42;
  const char *v44;
  char v45[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  if (!a1 || !a3)
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v17 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p\n", CurrTime, 76, LevelStr, "AVE_USL_CreateDataSurfaces", 313, "pSInfoSet != __null && pSet != __null", a1, a2, a3);
        v20 = AVE_GetCurrTime();
        v44 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", v20, 76, v44);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d %p", CurrTime, 76, LevelStr);
      }
    }
    v21 = 4294966295;
    goto LABEL_28;
  }
  SurfaceCfg = AVE_GetSurfaceCfg(5);
  v8 = a1[4];
  v7 = a1[5];
  v9 = (__IOSurface **)SurfaceCfg[1];
  AVE_SNPrintf(v45, 64, "%s-%d", v10, v11, v12, v13, v14, (char)*SurfaceCfg);
  if (v8 >= 1)
  {
    if (!*a3)
      goto LABEL_13;
    Size = AVE_USL_Surface::GetSize(*a3);
    v16 = *a3;
    if (Size < v7)
    {
      AVE_USL_DestroySurface(v16);
      *a3 = 0;
      goto LABEL_13;
    }
    if (!v16)
    {
LABEL_13:
      Surface = AVE_USL_CreateSurface(v45, v7, v9, a3);
      if ((_DWORD)Surface)
      {
        v21 = Surface;
        if (!AVE_Log_CheckLevel(0x4Cu, 4))
        {
LABEL_28:
          AVE_USL_DestroyDataSurfaces((uint64_t)a3);
          return v21;
        }
        v23 = AVE_Log_CheckConsole(0x4Cu);
        v24 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        if (v23)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v24, 76, v25, "AVE_USL_CreateDataSurfaces", 333, "ret == 0", v45, v21);
          v26 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v26, 76);
          goto LABEL_28;
        }
LABEL_27:
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v24, 76);
        goto LABEL_28;
      }
    }
  }
  v27 = AVE_GetSurfaceCfg(4);
  v29 = a1[10];
  v28 = a1[11];
  v30 = (__IOSurface **)v27[1];
  AVE_SNPrintf(v45, 64, "%s-%d", v31, v32, v33, v34, v35, (char)*v27);
  if (v29 < 1)
    return 0;
  v37 = a3 + 1;
  v36 = a3[1];
  if (!v36)
    goto LABEL_23;
  v38 = AVE_USL_Surface::GetSize(v36);
  v39 = *v37;
  if (v38 < v28)
  {
    AVE_USL_DestroySurface(v39);
    *v37 = 0;
    goto LABEL_23;
  }
  if (v39)
    return 0;
LABEL_23:
  v21 = AVE_USL_CreateSurface(v45, v28, v30, a3 + 1);
  if ((_DWORD)v21)
  {
    if (!AVE_Log_CheckLevel(0x4Cu, 4))
      goto LABEL_28;
    v40 = AVE_Log_CheckConsole(0x4Cu);
    v24 = AVE_GetCurrTime();
    v41 = AVE_Log_GetLevelStr(4);
    if (v40)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to create surface %s %d\n", v24, 76, v41, "AVE_USL_CreateDataSurfaces", 355, "ret == 0", v45, v21);
      v42 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create surface %s %d", v42, 76);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  return v21;
}

uint64_t AVE_USL_DestroyDataSurfaces(uint64_t a1)
{
  uint64_t result;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
  {
    result = *(_QWORD *)a1;
    if (result)
    {
      result = AVE_USL_DestroySurface((AVE_USL_Surface *)result);
      *(_QWORD *)a1 = 0;
    }
    if (*(_QWORD *)(a1 + 8))
    {
      result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)(a1 + 16))
    {
      result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 16));
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (*(_QWORD *)(a1 + 24))
    {
      result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (*(_QWORD *)(a1 + 32))
    {
      result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      result = AVE_USL_DestroySurface(*(AVE_USL_Surface **)(a1 + 40));
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x4Cu, 4))
    {
      v3 = AVE_Log_CheckConsole(0x4Cu);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p\n", CurrTime, 76, LevelStr, "AVE_USL_DestroyDataSurfaces", 381, "pSet != __null", 0);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p", CurrTime);
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_UC_Verify(void)
{
  const __CFDictionary *v0;
  io_service_t MatchingService;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  const char *v7;

  v0 = IOServiceMatching("AppleAVE2Driver");
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v0);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    return 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v3 = AVE_Log_CheckConsole(0x23u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v3)
      {
        printf("%lld %d AVE %s: %s:%d %s | can not find matched driver\n", CurrTime, 35, LevelStr, "AVE_UC_Verify", 23, "pService != 0");
        v6 = AVE_GetCurrTime();
        v7 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver", v6, 35, v7, "AVE_UC_Verify", 23, "pService != 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver", CurrTime, 35, LevelStr, "AVE_UC_Verify", 23, "pService != 0");
      }
    }
    return 4294966291;
  }
}

uint64_t AVE_UC_Create(uint32_t a1, _QWORD *a2)
{
  const __CFDictionary *v4;
  io_service_t MatchingService;
  io_service_t v6;
  kern_return_t v7;
  uint64_t v8;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  BOOL v20;
  const char *v22;
  io_connect_t connect;

  connect = 0;
  if (a2)
  {
    v4 = IOServiceMatching("AppleAVE2Driver");
    MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v4);
    if (MatchingService)
    {
      v6 = MatchingService;
      kdebug_trace();
      v7 = IOServiceOpen(v6, *MEMORY[0x1E0C83DA0], a1, &connect);
      v8 = AVE_IOReturn2RetCode(v7);
      kdebug_trace();
      if ((_DWORD)v8)
      {
        if (AVE_Log_CheckLevel(0x23u, 4))
        {
          v9 = AVE_Log_CheckConsole(0x23u);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
          if (v9)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Create", 67, "ret == 0", a1, a2, v7, v8);
            v12 = AVE_GetCurrTime();
            v22 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", v12, 35, v22);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open driver %d %p 0x%x %d", CurrTime, 35, LevelStr);
          }
        }
      }
      else
      {
        *a2 = connect;
      }
      IOObjectRelease(v6);
      if ((_DWORD)v8)
        v20 = connect == 0;
      else
        v20 = 1;
      if (!v20)
        IOServiceClose(connect);
    }
    else
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p\n", v17, 35, v18, "AVE_UC_Create", 57, "pService != 0", a1, a2);
          v19 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v19, 35);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | can not find matched driver %d %p", v17, 35);
        }
      }
      return 4294966291;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v13 = AVE_Log_CheckConsole(0x23u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %d %p\n", v14, 35, v15, "AVE_UC_Create", 51, "ppUC != __null", a1, 0);
        v14 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %d %p", v14, 35);
    }
    return 4294966295;
  }
  return v8;
}

uint64_t AVE_UC_Destroy(void *a1)
{
  kern_return_t v2;
  uint64_t v3;
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v7;
  __uint64_t v8;
  const char *v9;

  if (a1)
  {
    kdebug_trace();
    v2 = IOServiceClose((io_connect_t)a1);
    v3 = AVE_IOReturn2RetCode(v2);
    if ((_DWORD)v3)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v4 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v4)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Destroy", 113, "ret == 0", a1, v2, v3);
          CurrTime = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close driver %p 0x%x %d", CurrTime, 35);
      }
    }
    else
    {
      kdebug_trace();
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v7 = AVE_Log_CheckConsole(0x23u);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v8, 35, v9, "AVE_UC_Destroy", 105, "pUC != __null", 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v8);
    }
    return 4294966295;
  }
  return v3;
}

uint64_t AVE_UC_Open(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 40;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 1u, a2, 0x6E0uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x\n", CurrTime, 35, LevelStr, "AVE_UC_Open", 155, "ret == 0", a1, a2, a3, v6);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", v11, 35, v21, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to open client %p %p %p 0x%x", CurrTime, 35, LevelStr, "AVE_UC_Open");
        }
      }
    }
    else if (outputStructCnt <= 0x27)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Open", 159, "outSize >= sizeof(S_AVE_UCOutParam_Open)", a1, a2, a3, outputStructCnt, 40);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Open");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Open");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Open", 142, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Close(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 2u, a2, 0x28uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Close", 197, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to close client %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Close");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Close", 201, "outSize >= sizeof(S_AVE_UCOutParam_Close)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Close");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Close");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Close", 184, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Config(const void *a1, const void *a2, const void *a3, void *a4)
{
  kern_return_t v8;
  uint64_t v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  const char *v23;
  const char *v24;
  const char *v25;
  size_t v26;
  uint64_t reference[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)reference = 0u;
  v28 = 0u;
  v26 = 32;
  if (a1 && a2 && a3 && a4)
  {
    kdebug_trace();
    v8 = IOConnectCallAsyncMethod((mach_port_t)a1, 3u, (mach_port_t)a2, reference, 8u, 0, 0, a3, 0x38uLL, 0, 0, a4, &v26);
    v9 = AVE_IOReturn2RetCode(v8);
    kdebug_trace();
    if ((_DWORD)v9)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v10 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v10)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Config", 243, "ret == 0", a1, a3, a4, v8, v9);
          v13 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", v13, 35, v23, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to config %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Config");
        }
      }
    }
    else if (v26 <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v18 = AVE_Log_CheckConsole(0x23u);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
        if (v18)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v19, 35, v20, "AVE_UC_Config", 247, "outSize >= sizeof(S_AVE_UCOutParam_Config)", a1, a3, a4, v26, 32);
          v21 = AVE_GetCurrTime();
          v25 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v21, 35, v25, "AVE_UC_Config");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v20, "AVE_UC_Config");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x23u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p\n", v15, 35, v16, "AVE_UC_Config", 229, "pUC != __null && pRecvPort != __null && pIn != __null && pOut != __null", a1, a2, a3, a4);
        v17 = AVE_GetCurrTime();
        v24 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v17, 35, v24, "AVE_UC_Config");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p %p", v15, 35, v16, "AVE_UC_Config");
      }
    }
    return 4294966295;
  }
  return v9;
}

uint64_t AVE_UC_Prepare(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 4u, a2, 0x2DFB8uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Prepare", 285, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Prepare");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to prepare %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Prepare");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Prepare", 289, "outSize >= sizeof(S_AVE_UCOutParam_Prepare)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Prepare");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Prepare");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Prepare", 272, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Start(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 720;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 5u, a2, 0x2DFB8uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Start", 327, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to start %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Start");
        }
      }
    }
    else if (outputStructCnt <= 0x2CF)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Start", 331, "outSize >= sizeof(S_AVE_UCOutParam_Start)", a1, a2, a3, outputStructCnt, 720);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Start");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Start");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Start", 314, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Stop(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 6u, a2, 0x30uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Stop", 369, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to stop %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Stop");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Stop", 373, "outSize >= sizeof(S_AVE_UCOutParam_Stop)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Stop");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Stop");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Stop", 356, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Process(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 7u, a2, 0x30uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Process", 411, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to process %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Process");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Process", 415, "outSize >= sizeof(S_AVE_UCOutParam_Process)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Process");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Process");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Process", 398, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Complete(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 8u, a2, 0x30uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Complete", 453, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to complete %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Complete");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Complete", 457, "outSize >= sizeof(S_AVE_UCOutParam_Complete)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Complete");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Complete");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Complete", 440, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

uint64_t AVE_UC_Reset(const void *a1, const void *a2, void *a3)
{
  kern_return_t v6;
  uint64_t v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t outputStructCnt;

  outputStructCnt = 32;
  if (a1 && a2 && a3)
  {
    kdebug_trace();
    v6 = IOConnectCallStructMethod((mach_port_t)a1, 0xAu, a2, 0x30uLL, a3, &outputStructCnt);
    v7 = AVE_IOReturn2RetCode(v6);
    kdebug_trace();
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x23u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d\n", CurrTime, 35, LevelStr, "AVE_UC_Reset", 537, "ret == 0", a1, a2, a3, v6, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d", v11, 35, v21, "AVE_UC_Reset");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to reset %p %p %p 0x%x %d", CurrTime, 35, LevelStr, "AVE_UC_Reset");
        }
      }
    }
    else if (outputStructCnt <= 0x1F)
    {
      if (AVE_Log_CheckLevel(0x23u, 4))
      {
        v16 = AVE_Log_CheckConsole(0x23u);
        v17 = AVE_GetCurrTime();
        v18 = AVE_Log_GetLevelStr(4);
        if (v16)
        {
          printf("%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d\n", v17, 35, v18, "AVE_UC_Reset", 541, "outSize >= sizeof(S_AVE_UCOutParam_Reset)", a1, a2, a3, outputStructCnt, 32);
          v19 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v19, 35, v23, "AVE_UC_Reset");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | invalid out parameter %p %p %p %d %d", v17, 35, v18, "AVE_UC_Reset");
        }
      }
      return 4294966281;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x23u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x23u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v13, 35, v14, "AVE_UC_Reset", 524, "pUC != __null && pIn != __null && pOut != __null", a1, a2, a3);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v15, 35, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v13, 35, v14);
      }
    }
    return 4294966295;
  }
  return v7;
}

float AVE_MultiPass::histogram_diff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  double v5;
  double v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  const char *v15;

  v3 = 0;
  v4 = 0;
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = *(_DWORD *)(a2 + 16 + v3);
    *(double *)&v8 = (double)v7;
    v4 += v7;
    LODWORD(v8) = *(_DWORD *)(a3 + 16 + v3);
    v6 = v6 + (double)v7 - (double)v8;
    v9 = -v6;
    if (v6 >= 0.0)
      v9 = v6;
    v5 = v5 + v9;
    v3 += 4;
  }
  while (v3 != 1024);
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v10 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v10)
    {
      printf("%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d\n", CurrTime, 216, LevelStr, v5, v4);
      v13 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", v13, 216, v15, v5, v4);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: histogram_diff() hdiff %lf sum_a %d", CurrTime, 216, LevelStr, v5, v4);
    }
  }
  return v5 / (double)v4;
}

BOOL AVE_MultiPass::scene_change_detect(AVE_MultiPass *this, float a2, float a3, float a4, float a5)
{
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  _BOOL8 v10;
  int v11;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v14;
  const char *v16;

  v5 = a3;
  v6 = a4;
  if (v5 <= 0.00272072)
  {
    v10 = a5 <= 0.96605313 && v6 > 1.34009841;
  }
  else
  {
    v7 = a2;
    if (v7 <= 71.5876885)
    {
      v8 = v7 > 26.7539587;
      v9 = 23.2484817;
    }
    else
    {
      v8 = v5 <= 0.03005953;
      v9 = 4.51769352;
    }
    v10 = v6 > v9 && v8;
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v11 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v11)
    {
      printf("%lld %d AVE %s: MP: scene_change_detect() returns %d\n", CurrTime, 216, LevelStr, v10);
      v14 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", v14, 216, v16, v10);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_detect() returns %d", CurrTime, 216, LevelStr, v10);
    }
  }
  return v10;
}

void AVE_MultiPass::accumulate_scene_info(uint64_t a1, uint64_t a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v7;
  __uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  int32x2_t *v12;
  double v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int32x2_t v22;
  uint64_t v23;
  float v24;
  float v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  const char *v30;

  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v4 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    v7 = *(_DWORD *)(a2 + 44);
    if (v4)
    {
      printf("%lld %d AVE %s: MP: accumulate_scene_info() display_order %d\n", CurrTime, 216, LevelStr, v7);
      v8 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", v8, 216, v30, *(_DWORD *)(a2 + 44));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: accumulate_scene_info() display_order %d", CurrTime, 216, LevelStr, v7);
    }
  }
  if (*(_DWORD *)(a2 + 44) != -1)
  {
    v9 = *(_DWORD *)(a1 + 25500) + 1;
    *(_DWORD *)(a1 + 25500) = v9;
    if (*(_DWORD *)(a2 + 1200))
      ++*(_DWORD *)(a1 + 25496);
    v10 = *(unsigned int *)(a2 + 64);
    *(_QWORD *)(a1 + 25504) += v10;
    if (*(_DWORD *)(a2 + 52) == 2)
    {
      *(_QWORD *)(a1 + 25516) += v10;
      ++*(_DWORD *)(a1 + 25512);
      v11 = *(float *)(a2 + 1556);
      *(double *)(a1 + 25576) = *(double *)(a1 + 25576) + v11;
    }
    else
    {
      v11 = *(float *)(a2 + 1556);
    }
    v12 = (int32x2_t *)(a2 + 1220);
    v13 = *(double *)(a1 + 25760) + v11;
    *(double *)(a1 + 25760) = v13;
    *(float *)&v13 = v13 / (double)v9;
    *(_DWORD *)(a1 + 25572) = LODWORD(v13);
    *(float64x2_t *)(a1 + 25584) = vaddq_f64(*(float64x2_t *)(a1 + 25584), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
    v14 = (float *)(a2 + 1460);
    v15 = (float *)(a1 + 25664);
    v16 = 16;
    do
    {
      *((_DWORD *)v15 - 16) += *((_DWORD *)v14 - 16);
      v17 = *v14++;
      *v15 = v17 + *v15;
      ++v15;
      --v16;
    }
    while (v16);
    switch(*(_WORD *)(a2 + 1572))
    {
      case 0:
        *(_QWORD *)(a1 + 25528) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25524);
        break;
      case 1:
        *(_QWORD *)(a1 + 25540) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25536);
        break;
      case 2:
        *(_QWORD *)(a1 + 25552) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25548);
        break;
      case 3:
        *(_QWORD *)(a1 + 25564) += *(unsigned int *)(a2 + 64);
        ++*(_DWORD *)(a1 + 25560);
        break;
      default:
        break;
    }
    if (!*(_DWORD *)(a2 + 1200))
    {
      v18 = 0;
      v19 = *(_QWORD *)(a1 + 25488);
      v20 = (float)*(_QWORD *)(v19 + 1220);
      v21 = (float)v12->u32[0];
      v22 = vadd_s32(*(int32x2_t *)(v19 + 1220), *v12);
      *(int32x2_t *)(v19 + 1220) = v22;
      *(int64x2_t *)(v19 + 1228) = vaddq_s64(*(int64x2_t *)(v19 + 1228), *(int64x2_t *)(a2 + 1228));
      *(int64x2_t *)(v19 + 1244) = vaddq_s64(*(int64x2_t *)(v19 + 1244), *(int64x2_t *)(a2 + 1244));
      *(_QWORD *)(v19 + 1260) += *(_QWORD *)(a2 + 1260);
      v23 = *(_QWORD *)(v19 + 1292) + *(_QWORD *)(a2 + 1292);
      *(float *)(v19 + 1216) = (float)((float)(*(float *)(a2 + 1216) * v21) + (float)(*(float *)(v19 + 1216) * v20))
                             / (float)v22.u32[0];
      *(float64x2_t *)(v19 + 1268) = vaddq_f64(*(float64x2_t *)(a2 + 1268), *(float64x2_t *)(v19 + 1268));
      v24 = *(float *)(a2 + 1284);
      if (v24 >= *(float *)(v19 + 1284))
        v24 = *(float *)(v19 + 1284);
      *(float *)(v19 + 1284) = v24;
      v25 = *(float *)(v19 + 1288);
      if (v25 < *(float *)(a2 + 1288))
        v25 = *(float *)(a2 + 1288);
      *(float *)(v19 + 1288) = v25;
      *(_QWORD *)(v19 + 1292) = v23;
      v26 = vaddq_s64(*(int64x2_t *)(v19 + 1316), *(int64x2_t *)(a2 + 1316));
      *(int32x4_t *)(v19 + 1300) = vaddq_s32(*(int32x4_t *)(v19 + 1300), *(int32x4_t *)(a2 + 1300));
      *(int64x2_t *)(v19 + 1316) = v26;
      v27 = vaddq_f64(*(float64x2_t *)(a2 + 1348), *(float64x2_t *)(v19 + 1348));
      *(int64x2_t *)(v19 + 1332) = vaddq_s64(*(int64x2_t *)(v19 + 1332), *(int64x2_t *)(a2 + 1332));
      *(float64x2_t *)(v19 + 1348) = v27;
      v28 = vaddq_f64(*(float64x2_t *)(v19 + 1380), vcvtq_f64_f32(*(float32x2_t *)(a2 + 1560)));
      *(float64x2_t *)(v19 + 1364) = vaddq_f64(*(float64x2_t *)(a2 + 1364), *(float64x2_t *)(v19 + 1364));
      *(float64x2_t *)(v19 + 1380) = v28;
      do
      {
        v29 = v19 + v18;
        *(_DWORD *)(v29 + 1396) = *(_DWORD *)(v19 + v18 + 1396) + *(_DWORD *)(a2 + v18 + 1396);
        *(float *)(v29 + 1460) = *(float *)(a2 + v18 + 1460) + *(float *)(v19 + v18 + 1460);
        v18 += 4;
      }
      while (v18 != 64);
    }
    AVE_MultiPass::print_sc_info((AVE_MultiPass *)a1);
  }
}

void AVE_MultiPass::print_sc_info(AVE_MultiPass *this)
{
  char *v2;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  uint64_t v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  __uint64_t v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  uint64_t v30;
  __uint64_t v31;
  int v32;
  __uint64_t v33;
  const char *v34;
  int v35;
  __uint64_t v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  uint64_t v40;
  __uint64_t v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  __uint64_t v46;
  int v47;
  __uint64_t v48;
  const char *v49;
  uint64_t v50;
  __uint64_t v51;
  int v52;
  __uint64_t v53;
  const char *v54;
  int v55;
  __uint64_t v56;
  int v57;
  __uint64_t v58;
  const char *v59;
  uint64_t v60;
  __uint64_t v61;
  int v62;
  __uint64_t v63;
  const char *v64;
  int v65;
  __uint64_t v66;
  const char *v67;
  int v68;
  __uint64_t v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;

  v2 = (char *)this + 25496;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v3 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: seq_rc_info()\n", CurrTime, 216, LevelStr);
      v6 = AVE_GetCurrTime();
      v71 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", v6, 216, v71);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: seq_rc_info()", CurrTime, 216, LevelStr);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v7 = AVE_Log_CheckConsole(0xD8u);
    v8 = AVE_GetCurrTime();
    v9 = AVE_Log_GetLevelStr(7);
    v10 = *(_DWORD *)v2;
    if (v7)
    {
      printf("%lld %d AVE %s:  total_scenes %u\n", v8, 216, v9, v10);
      v11 = AVE_GetCurrTime();
      v72 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v11, 216, v72, *(_DWORD *)v2);
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  total_scenes %u", v8, 216, v9, v10);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v12 = AVE_Log_CheckConsole(0xD8u);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(7);
    v15 = *((_DWORD *)v2 + 1);
    if (v12)
    {
      printf("%lld %d AVE %s:  cnt_All %u\n", v13, 216, v14, v15);
      v16 = AVE_GetCurrTime();
      v73 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v16, 216, v73, *((_DWORD *)v2 + 1));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_All %u", v13, 216, v14, v15);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v17 = AVE_Log_CheckConsole(0xD8u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(7);
    v20 = *((_QWORD *)this + 3188);
    if (v17)
    {
      printf("%lld %d AVE %s:  bits_All %llu\n", v18, 216, v19, v20);
      v21 = AVE_GetCurrTime();
      v74 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v21, 216, v74, *((_QWORD *)this + 3188));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_All %llu", v18, 216, v19, v20);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v22 = AVE_Log_CheckConsole(0xD8u);
    v23 = AVE_GetCurrTime();
    v24 = AVE_Log_GetLevelStr(7);
    v25 = *((_DWORD *)v2 + 7);
    if (v22)
    {
      printf("%lld %d AVE %s:  cnt_NORMAL %u\n", v23, 216, v24, v25);
      v26 = AVE_GetCurrTime();
      v75 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v26, 216, v75, *((_DWORD *)v2 + 7));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_NORMAL %u", v23, 216, v24, v25);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v27 = AVE_Log_CheckConsole(0xD8u);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(7);
    v30 = *((_QWORD *)this + 3191);
    if (v27)
    {
      printf("%lld %d AVE %s:  bits_NORMAL %llu\n", v28, 216, v29, v30);
      v31 = AVE_GetCurrTime();
      v76 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v31, 216, v76, *((_QWORD *)this + 3191));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_NORMAL %llu", v28, 216, v29, v30);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v32 = AVE_Log_CheckConsole(0xD8u);
    v33 = AVE_GetCurrTime();
    v34 = AVE_Log_GetLevelStr(7);
    v35 = *((_DWORD *)v2 + 10);
    if (v32)
    {
      printf("%lld %d AVE %s:  cnt_MIN %u\n", v33, 216, v34, v35);
      v36 = AVE_GetCurrTime();
      v77 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v36, 216, v77, *((_DWORD *)v2 + 10));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MIN %u", v33, 216, v34, v35);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v37 = AVE_Log_CheckConsole(0xD8u);
    v38 = AVE_GetCurrTime();
    v39 = AVE_Log_GetLevelStr(7);
    v40 = *(_QWORD *)(v2 + 44);
    if (v37)
    {
      printf("%lld %d AVE %s:  bits_MIN %llu\n", v38, 216, v39, v40);
      v41 = AVE_GetCurrTime();
      v78 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v41, 216, v78, *(_QWORD *)(v2 + 44));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MIN %llu", v38, 216, v39, v40);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v42 = AVE_Log_CheckConsole(0xD8u);
    v43 = AVE_GetCurrTime();
    v44 = AVE_Log_GetLevelStr(7);
    v45 = *((_DWORD *)v2 + 13);
    if (v42)
    {
      printf("%lld %d AVE %s:  cnt_MAX %u\n", v43, 216, v44, v45);
      v46 = AVE_GetCurrTime();
      v79 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v46, 216, v79, *((_DWORD *)v2 + 13));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_MAX %u", v43, 216, v44, v45);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v47 = AVE_Log_CheckConsole(0xD8u);
    v48 = AVE_GetCurrTime();
    v49 = AVE_Log_GetLevelStr(7);
    v50 = *((_QWORD *)this + 3194);
    if (v47)
    {
      printf("%lld %d AVE %s:  bits_MAX %llu\n", v48, 216, v49, v50);
      v51 = AVE_GetCurrTime();
      v80 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v51, 216, v80, *((_QWORD *)this + 3194));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_MAX %llu", v48, 216, v49, v50);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v52 = AVE_Log_CheckConsole(0xD8u);
    v53 = AVE_GetCurrTime();
    v54 = AVE_Log_GetLevelStr(7);
    v55 = *((_DWORD *)v2 + 16);
    if (v52)
    {
      printf("%lld %d AVE %s:  cnt_BLANK %u\n", v53, 216, v54, v55);
      v56 = AVE_GetCurrTime();
      v81 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v56, 216, v81, *((_DWORD *)v2 + 16));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  cnt_BLANK %u", v53, 216, v54, v55);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v57 = AVE_Log_CheckConsole(0xD8u);
    v58 = AVE_GetCurrTime();
    v59 = AVE_Log_GetLevelStr(7);
    v60 = *(_QWORD *)(v2 + 68);
    if (v57)
    {
      printf("%lld %d AVE %s:  bits_BLANK %llu\n", v58, 216, v59, v60);
      v61 = AVE_GetCurrTime();
      v82 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v61, 216, v82, *(_QWORD *)(v2 + 68));
    }
    else
    {
      syslog(3, "%lld %d AVE %s:  bits_BLANK %llu", v58, 216, v59, v60);
    }
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v62 = AVE_Log_CheckConsole(0xD8u);
    v63 = AVE_GetCurrTime();
    v64 = AVE_Log_GetLevelStr(7);
    if (v62)
    {
      printf("%lld %d AVE %s:  avg_qscale %f\n", v63, 216, v64, *((float *)v2 + 19));
      v63 = AVE_GetCurrTime();
      v64 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  avg_qscale %f", v63, 216, v64, *((float *)v2 + 19));
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v65 = AVE_Log_CheckConsole(0xD8u);
    v66 = AVE_GetCurrTime();
    v67 = AVE_Log_GetLevelStr(7);
    if (v65)
    {
      printf("%lld %d AVE %s:  current_complexity %lf\n", v66, 216, v67, *((double *)this + 3198));
      v66 = AVE_GetCurrTime();
      v67 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  current_complexity %lf", v66, 216, v67, *((double *)this + 3198));
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v68 = AVE_Log_CheckConsole(0xD8u);
    v69 = AVE_GetCurrTime();
    v70 = AVE_Log_GetLevelStr(7);
    if (v68)
    {
      printf("%lld %d AVE %s:  totalcplxsum %lf\n", v69, 216, v70, *((double *)this + 3199));
      v69 = AVE_GetCurrTime();
      v70 = AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s:  totalcplxsum %lf", v69, 216, v70, *((double *)this + 3199));
  }
}

_DWORD *AVE_MultiPass::scene_change_pipeline(_QWORD *a1, _DWORD *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v7;
  int v8;
  _DWORD *v9;
  AVE_MultiPass *v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  int v35;
  __uint64_t v36;
  const char *v37;
  __uint64_t v38;
  int v40;
  __uint64_t v41;
  const char *v42;
  int v43;
  int v44;
  __uint64_t v45;
  const char *v46;
  int64x2_t *v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int64x2_t v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  _DWORD *v61;

  v61 = a2;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v4 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v4)
    {
      if (a2)
        v7 = a2[11];
      else
        v7 = -1;
      printf("%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d\n", CurrTime, 216, LevelStr, a2, v7);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (a2)
        goto LABEL_9;
    }
    else if (a2)
    {
LABEL_9:
      v8 = a2[11];
      goto LABEL_10;
    }
    v8 = -1;
LABEL_10:
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() Entry stats %p display_order %d", CurrTime, 216, LevelStr, a2, v8);
  }
  if (!a1[3186])
  {
    v9 = v61;
    v61[300] = 1;
    a1[3186] = v9;
    std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3179, a1 + 3186);
  }
  std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3173, &v61);
  v11 = a1[3178];
  v12 = (float *)v61;
  if (v11 <= 1)
  {
    *((_QWORD *)v61 + 151) = 0;
LABEL_33:
    v61 = 0;
    goto LABEL_34;
  }
  v13 = v11 - 2;
  v14 = a1[3177];
  v15 = v14 + v11 - 2;
  v16 = a1[3174];
  v17 = v15 >> 9;
  v18 = *(_QWORD *)(v16 + 8 * (v15 >> 9));
  v19 = v15 & 0x1FF;
  v20 = *(_QWORD *)(v18 + 8 * v19);
  if (v61[11] == -1)
  {
    v23 = *(float *)(v20 + 1208);
  }
  else
  {
    v21 = *((float *)v61 + 304) + *(float *)(v20 + 1216);
    if (v21 >= 1.0)
      v22 = v21 * 0.0019531;
    else
      v22 = 0.0019531;
    v23 = fmaxf(AVE_MultiPass::histogram_diff((uint64_t)v10, (uint64_t)(v61 + 40), v20 + 160) / v22, 0.01);
    v14 = a1[3177];
    v16 = a1[3174];
    v12 = (float *)v61;
    v17 = (v14 + v13) >> 9;
    v19 = (v14 + v13) & 0x1FF;
  }
  v24 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + 8 * v17) + 8 * v19) + 1208);
  if (v23 >= v24)
    v24 = v23;
  v12[302] = v23;
  v12[303] = v24;
  if (v11 < 4)
  {
    if (v11 == 2)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v16 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v14 & 0x1FF));
      *(_QWORD *)(v34 + 1208) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + (((v14 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                      + 8 * ((v14 + 1) & 0x1FF))
                                          + 1208);
      AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v34);
    }
    goto LABEL_33;
  }
  v25 = v11 + v14;
  v26 = *(_QWORD *)(*(_QWORD *)(v16 + (((v25 - 3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 3) & 0x1FF));
  v60 = v26;
  v27 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + (((v25 - 4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 4) & 0x1FF))
                 + 1212);
  v28 = *(float *)(v26 + 1208);
  v29 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + (((v25 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v25 - 1) & 0x1FF))
                 + 1212);
  v30 = v28 / v27;
  v31 = v29 / v28;
  v32 = (float)(v29 / v28) / (float)(v28 / v27);
  if (*((_DWORD *)v12 + 11) == -1 || *(_DWORD *)(v26 + 44) < 3u)
  {
    *(_DWORD *)(v26 + 1200) = *(_DWORD *)(v26 + 80) & 1;
    AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v26);
    *(_DWORD *)(v26 + 1200) |= *(_DWORD *)(v26 + 44) == -1;
  }
  else
  {
    v33 = *(float *)(v26 + 36);
    *(_DWORD *)(v26 + 1200) = 0;
    if ((*(_BYTE *)(v26 + 80) & 1) != 0
      || AVE_MultiPass::scene_change_detect(v10, v28, (float)(v29 / v28) / (float)(v28 / v27), v28 / v27, v29 / v28)
      || *(_DWORD *)(a1[3186] + 1220) >= ((float)(v33 * 6.0) + 0.5))
    {
      *(_DWORD *)(v26 + 1200) = 1;
    }
    AVE_MultiPass::accumulate_scene_info((uint64_t)a1, v26);
  }
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v40 = AVE_Log_CheckConsole(0xD8u);
    v41 = AVE_GetCurrTime();
    v42 = AVE_Log_GetLevelStr(7);
    v43 = *(_DWORD *)(v26 + 44);
    v44 = *(_DWORD *)(v26 + 1200);
    if (v40)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d\n", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
      v45 = AVE_GetCurrTime();
      v46 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v45, 216, v46, *(_DWORD *)(v26 + 44), *(_DWORD *)(v26 + 80) & 1, *(_DWORD *)(v26 + 1200));
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() display_order %d forceKeyFrame %d scene_change %d", v41, 216, v42, v43, *(_DWORD *)(v26 + 80) & 1, v44);
    }
  }
  v47 = (int64x2_t *)(a1 + 3177);
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v48 = AVE_Log_CheckConsole(0xD8u);
    v49 = AVE_GetCurrTime();
    v50 = AVE_Log_GetLevelStr(7);
    v51 = v27;
    v52 = v28;
    v53 = v29;
    v54 = v32;
    v55 = v30;
    v56 = v31;
    if (v48)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f\n", v49, 216, v50, v51, v52, v53, v54, v55, v56);
      AVE_GetCurrTime();
      AVE_Log_GetLevelStr(7);
    }
    syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() m0 %f m1 %f m2 %f m0m2 %f mdpa_ratio_p %f mdpa_ratio_n %f");
  }
  if (*(_DWORD *)(v26 + 1200))
  {
    std::deque<_S_AVE_MultiPassStats *>::push_back(a1 + 3179, &v60);
    a1[3186] = v60;
  }
  v57 = vaddq_s64(*v47, (int64x2_t)xmmword_1B56352D0);
  v61 = *(_DWORD **)(*(_QWORD *)(a1[3174] + (((unint64_t)v47->i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v47->i64[0] & 0x1FF));
  *v47 = v57;
  std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 3173), 1);
  if (v61[300])
  {
    v61 = 0;
    v58 = a1[3183];
    if (*(_QWORD *)(*(_QWORD *)(a1[3180] + ((v58 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v58 & 0x1FF)) != a1[3186])
    {
      v61 = *(_DWORD **)(*(_QWORD *)(a1[3180] + ((a1[3183] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a1[3183] & 0x1FFLL));
      --a1[3184];
      a1[3183] = v58 + 1;
      std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(a1 + 3179), 1);
    }
  }
LABEL_34:
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v35 = AVE_Log_CheckConsole(0xD8u);
    v36 = AVE_GetCurrTime();
    v37 = AVE_Log_GetLevelStr(7);
    if (v35)
    {
      printf("%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p\n", v36, 216, v37, v61);
      v38 = AVE_GetCurrTime();
      v59 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v38, 216, v59, v61);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: scene_change_pipeline() returns stats %p", v36, 216, v37, v61);
    }
  }
  return v61;
}

void std::deque<_S_AVE_MultiPassStats *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<_S_AVE_MultiPassStats *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void AVE_MultiPass::fixup_frame_bits(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v8;
  __uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    if (AVE_Log_CheckLevel(0xD8u, 7))
    {
      v5 = AVE_Log_CheckConsole(0xD8u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      v8 = *(_DWORD *)(a2 + 44);
      if (v5)
      {
        printf("%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d\n", CurrTime, 216, LevelStr, v8, *(_DWORD *)(a2 + 64), a3);
        v9 = AVE_GetCurrTime();
        v10 = AVE_Log_GetLevelStr(7);
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", v9, 216, v10, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 64), a3);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: MP: F %d frame_bits %u correction_bits %d", CurrTime, 216, LevelStr, v8, *(_DWORD *)(a2 + 64), a3);
      }
    }
    if (a3)
    {
      v11 = *(int *)(a2 + 64);
      if ((int)v11 + a3 >= 1)
      {
        v12 = *(unsigned int *)(a2 + 68) * (uint64_t)a3 / v11;
        if (AVE_Log_CheckLevel(0xD8u, 7))
        {
          v13 = AVE_Log_CheckConsole(0xD8u);
          v14 = AVE_GetCurrTime();
          v15 = AVE_Log_GetLevelStr(7);
          v16 = *(_DWORD *)(a2 + 44);
          if (v13)
          {
            printf("%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d\n", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
            v17 = AVE_GetCurrTime();
            v18 = AVE_Log_GetLevelStr(7);
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v17, 216, v18, *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 68), v12);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: F %d hdr_bits %u hdr_correction %d", v14, 216, v15, v16, *(_DWORD *)(a2 + 68), v12);
          }
        }
        v19 = *(_DWORD *)(a2 + 68);
        v20 = *(_DWORD *)(a2 + 64) + a3;
        *(_QWORD *)(a2 + 1228) += a3;
        *(_QWORD *)(a2 + 1244) += (int)v12;
        *(_DWORD *)(a2 + 64) = v20;
        *(_DWORD *)(a2 + 68) = v19 + v12;
        v21 = *(_DWORD *)(a2 + 52);
        if (v21)
        {
          if (v21 != 2)
          {
LABEL_17:
            v23 = *(_QWORD *)(a2 + 1316);
            if (v23)
              *(_QWORD *)(a2 + 1316) = v23 + a3;
            v24 = *(_QWORD *)(a2 + 1324);
            if (v24)
              *(_QWORD *)(a2 + 1324) = v24 + a3;
            v25 = *(_QWORD *)(a2 + 1332);
            if (v25)
              *(_QWORD *)(a2 + 1332) = v25 + a3;
            v26 = *(_QWORD *)(a2 + 1340);
            if (v26)
              *(_QWORD *)(a2 + 1340) = v26 + a3;
            return;
          }
          v22 = (_QWORD *)(a2 + 1252);
        }
        else
        {
          v22 = (_QWORD *)(a2 + 1260);
        }
        *v22 += (int)v12;
        goto LABEL_17;
      }
    }
  }
}

const void *AVE_MultiPass::enqueue_first_pass(_QWORD *a1, uint64_t a2, int a3)
{
  int *v6;
  _BOOL8 v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _BOOL4 v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _DWORD *v65;
  int v66;
  unsigned int v67;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  int v74;
  int v75;
  __uint64_t v76;
  const char *v77;
  __uint64_t v78;
  const char *v80;
  char v81;
  char v82;
  char v83;
  char v84;

  v6 = (int *)(a1 + 3165);
  v7 = AVE_Log_CheckLevel(0xD8u, 7);
  if (v7)
  {
    v8 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v8)
    {
      if (a2)
        v11 = *(_DWORD *)(a2 + 44);
      else
        v11 = -1;
      printf("%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d\n", CurrTime, 216, LevelStr, v11, a3, v6[6]);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(7);
      if (a2)
        v12 = *(_DWORD *)(a2 + 44);
      else
        v12 = -1;
    }
    else if (a2)
    {
      v12 = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = -1;
    }
    syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() display_order %d flush %d fixup_fifo_len %d", CurrTime, 216, LevelStr, v12, a3, v6[6]);
  }
  v13 = v6[6];
  if ((a3 & 1) == 0)
  {
    if (v13 != 2)
    {
      if (v13 == 1)
      {
        v17 = 0;
        a1[(v6[7] == 0) + 3166] = a2;
        v18 = 2;
      }
      else
      {
        if (v13)
          goto LABEL_81;
        v17 = 0;
        a1[v6[7] + 3166] = a2;
        v18 = 1;
      }
      v6[6] = v18;
      goto LABEL_95;
    }
LABEL_23:
    AVE_MultiPass::fixup_frame_bits(v7, a1[v6[7] + 3166], *(_DWORD *)(a2 + 72));
    v19 = &a1[v6[7] + 3166];
    v20 = (_QWORD *)a1[3170];
    v21 = a1[3171];
    if ((unint64_t)v20 >= v21)
    {
      v27 = a1[3169];
      v28 = ((uint64_t)v20 - v27) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
      v29 = v21 - v27;
      v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1))
        v30 = v28 + 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v31);
      else
        v32 = 0;
      v45 = &v32[8 * v28];
      v46 = &v32[8 * v31];
      *(_QWORD *)v45 = *v19;
      v22 = (uint64_t)(v45 + 8);
      v47 = (char *)a1[3170];
      v48 = (char *)a1[3169];
      if (v47 != v48)
      {
        do
        {
          v49 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v45 - 1) = v49;
          v45 -= 8;
        }
        while (v47 != v48);
        v47 = (char *)a1[3169];
      }
      a1[3169] = v45;
      a1[3170] = v22;
      a1[3171] = v46;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v20 = *v19;
      v22 = (uint64_t)(v20 + 1);
    }
    a1[3170] = v22;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v22, (uint64_t)&v83, (v22 - a1[3169]) >> 3);
    v50 = v6[7] == 0;
    if (a3)
      --v6[6];
    else
      a1[v6[7] + 3166] = a2;
    v6[7] = v50;
    goto LABEL_81;
  }
  if (v13 == 2)
    goto LABEL_23;
  if (v13 == 1)
  {
    v23 = &a1[v6[7] + 3166];
    v24 = (_QWORD *)a1[3170];
    v25 = a1[3171];
    if ((unint64_t)v24 >= v25)
    {
      v33 = a1[3169];
      v34 = ((uint64_t)v24 - v33) >> 3;
      if ((unint64_t)(v34 + 1) >> 61)
        goto LABEL_101;
      v35 = v25 - v33;
      v36 = v35 >> 2;
      if (v35 >> 2 <= (unint64_t)(v34 + 1))
        v36 = v34 + 1;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v37);
      else
        v38 = 0;
      v51 = &v38[8 * v34];
      v52 = &v38[8 * v37];
      *(_QWORD *)v51 = *v23;
      v26 = (uint64_t)(v51 + 8);
      v53 = (char *)a1[3170];
      v54 = (char *)a1[3169];
      if (v53 != v54)
      {
        do
        {
          v55 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v51 - 1) = v55;
          v51 -= 8;
        }
        while (v53 != v54);
        v53 = (char *)a1[3169];
      }
      a1[3169] = v51;
      a1[3170] = v26;
      a1[3171] = v52;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v24 = *v23;
      v26 = (uint64_t)(v24 + 1);
    }
    a1[3170] = v26;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v26, (uint64_t)&v82, (v26 - a1[3169]) >> 3);
    v56 = v6[7] == 0;
    --v6[6];
    v6[7] = v56;
    if (a2)
    {
      v57 = *v6;
      a1[v57 + 3149] = a2;
      if (v57 < 0x10)
        v58 = v57 + 1;
      else
        v58 = 16;
      *v6 = v58;
    }
    goto LABEL_81;
  }
  if (v13)
    goto LABEL_81;
  v14 = (_QWORD *)a1[3170];
  v15 = a1[3171];
  if ((unint64_t)v14 >= v15)
  {
    v39 = a1[3169];
    v40 = ((uint64_t)v14 - v39) >> 3;
    if (!((unint64_t)(v40 + 1) >> 61))
    {
      v41 = v15 - v39;
      v42 = v41 >> 2;
      if (v41 >> 2 <= (unint64_t)(v40 + 1))
        v42 = v40 + 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v42;
      if (v43)
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3171), v43);
      else
        v44 = 0;
      v59 = &v44[8 * v40];
      v60 = &v44[8 * v43];
      *(_QWORD *)v59 = a2;
      v16 = (uint64_t)(v59 + 8);
      v61 = (char *)a1[3170];
      v62 = (char *)a1[3169];
      if (v61 != v62)
      {
        do
        {
          v63 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v59 - 1) = v63;
          v59 -= 8;
        }
        while (v61 != v62);
        v61 = (char *)a1[3169];
      }
      a1[3169] = v59;
      a1[3170] = v16;
      a1[3171] = v60;
      if (v61)
        operator delete(v61);
      goto LABEL_80;
    }
LABEL_101:
    std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
  }
  *v14 = a2;
  v16 = (uint64_t)(v14 + 1);
LABEL_80:
  a1[3170] = v16;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(a1[3169], v16, (uint64_t)&v81, (v16 - a1[3169]) >> 3);
LABEL_81:
  v64 = (_QWORD *)a1[3169];
  v65 = (_DWORD *)*v64;
  v66 = *(_DWORD *)(*v64 + 44);
  v67 = v6[40];
  if (v66 == -1 || v66 == v67)
  {
    v6[40] = v67 + 1;
    v69 = a1[3170];
    if (v69 - (uint64_t)v64 >= 9)
    {
      v70 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(v64, (uint64_t)&v84, (unint64_t)(v69 - (_QWORD)v64) >> 3);
      v71 = (_QWORD *)(v69 - 8);
      if ((_QWORD *)(v69 - 8) == v70)
      {
        *v70 = v65;
      }
      else
      {
        *v70 = *v71;
        *v71 = v65;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>((uint64_t)v64, (uint64_t)(v70 + 1), (uint64_t)&v84, v70 + 1 - v64);
      }
    }
    a1[3170] -= 8;
    v72 = AVE_MultiPass::scene_change_pipeline(a1, v65);
    v17 = v72;
    if (v72)
    {
      v73 = *v6;
      a1[v73 + 3149] = v72;
      if (v73 < 0x10)
        v74 = v73 + 1;
      else
        v74 = 16;
      *v6 = v74;
    }
  }
  else
  {
    v17 = 0;
  }
LABEL_95:
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v75 = AVE_Log_CheckConsole(0xD8u);
    v76 = AVE_GetCurrTime();
    v77 = AVE_Log_GetLevelStr(7);
    if (v75)
    {
      printf("%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p\n", v76, 216, v77, v17);
      v78 = AVE_GetCurrTime();
      v80 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v78, 216, v80, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: enqueue_first_pass() returns stats %p", v76, 216, v77, v17);
    }
  }
  return v17;
}

void AVE_MultiPass::FinalizeSeqRcInfo(AVE_MultiPass *this)
{
  char *v2;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  float v9;
  float v10;
  char *v11;
  unsigned int v12;
  float v13;
  __n128 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned __int32 v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  __n128 *v46;
  float *v47;
  __n128 *v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  __uint64_t v58;
  const char *v59;
  __uint64_t v60;
  const char *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  _DWORD *v67;
  __uint64_t v68;
  const char *v69;
  __uint64_t v70;
  const char *v71;
  const char *v72;
  _DWORD *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *__p;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  float *v86;
  __n128 *v87;
  _QWORD v88[2];

  v2 = (char *)this + 25728;
  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v3 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v3)
    {
      printf("%lld %d AVE %s: MP: FinalizeSeqRcInfo()\n", CurrTime, 216, LevelStr);
      v6 = AVE_GetCurrTime();
      v72 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", v6, 216, v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: FinalizeSeqRcInfo()", CurrTime, 216, LevelStr);
    }
  }
  v73 = v2;
  v7 = 0;
  v8 = 0;
  v86 = 0;
  v87 = 0;
  v88[0] = 0;
  v9 = 0.0;
  v10 = 0.1875;
  do
  {
    v11 = (char *)this + 4 * v8;
    v12 = *((_DWORD *)v11 + 6400);
    if (v12)
    {
      v13 = *((float *)v11 + 6416) / (float)v12;
      if ((unint64_t)v7 >= v88[0])
      {
        v14 = (__n128 *)v86;
        v15 = ((char *)v7 - (char *)v86) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
        v17 = v88[0] - (_QWORD)v86;
        if ((uint64_t)(v88[0] - (_QWORD)v86) >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v18);
          v14 = (__n128 *)v86;
          v7 = v87;
        }
        else
        {
          v19 = 0;
        }
        v20 = (__n128 *)&v19[16 * v15];
        v20->n128_u32[0] = v12;
        v20->n128_f32[1] = v13;
        v20->n128_f32[2] = v9;
        v20->n128_f32[3] = v10;
        v21 = v20;
        if (v7 != v14)
        {
          do
          {
            v21[-1] = v7[-1];
            --v21;
            --v7;
          }
          while (v7 != v14);
          v14 = (__n128 *)v86;
        }
        v7 = v20 + 1;
        v86 = (float *)v21;
        v87 = v20 + 1;
        v88[0] = &v19[16 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v7->n128_u32[0] = v12;
        v7->n128_f32[1] = v13;
        v7->n128_f32[2] = v9;
        v7->n128_f32[3] = v10;
        ++v7;
      }
      v87 = v7;
    }
    v9 = v10;
    v10 = v10 + 0.1875;
    ++v8;
  }
  while (v8 != 16);
  v22 = (__n128 *)v86;
  if (v86 == (float *)v7)
  {
    v23 = v73;
    if ((unint64_t)v7 >= v88[0])
    {
      v24 = (uint64_t)(v88[0] - (_QWORD)v7) >> 3;
      if (v24 <= 1)
        v24 = 1;
      if (v88[0] - (_QWORD)v7 >= 0x7FFFFFFFFFFFFFF0uLL)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v25);
      v27 = v86;
      v28 = (float *)v87;
      v30 = &v26[16 * v29];
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 4) = 1069547520;
      *((_DWORD *)v26 + 3) = 1077936128;
      v7 = (__n128 *)(v26 + 16);
      if (v28 != v27)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
          v26 -= 16;
          v28 -= 4;
        }
        while (v28 != v27);
        v27 = v86;
      }
      v86 = (float *)v26;
      v87 = v7;
      v88[0] = v30;
      if (v27)
        operator delete(v27);
    }
    else
    {
      v7->n128_u32[0] = 1;
      *(unint64_t *)((char *)v7->n128_u64 + 4) = 1069547520;
      v7->n128_u32[3] = 1077936128;
      ++v7;
    }
    v87 = v7;
    v22 = (__n128 *)v86;
  }
  else
  {
    v23 = v73;
  }
  v31 = v7 - v22;
  if ((unint64_t)((char *)v7 - (char *)v22) <= 0x3F)
  {
    do
    {
      v32 = 126 - 2 * __clz(v31);
      if (v7 == v22)
        v33 = 0;
      else
        v33 = v32;
      std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>((unsigned int *)v22, (__int128 *)v7, (uint64_t)&v83, v33, 1);
      v34 = v86;
      v35 = v86[1];
      v36 = v86[2];
      v37 = (float)(v36 + v35) * 0.5;
      v38 = *v86;
      v39 = *(_DWORD *)v86 >> 1;
      v86[1] = (float)(v35 + v86[3]) * 0.5;
      v34[2] = v35;
      *(_DWORD *)v34 = LODWORD(v38) - (LODWORD(v38) >> 1);
      v40 = (float *)v87;
      if ((unint64_t)v87 >= v88[0])
      {
        v41 = ((char *)v87 - (char *)v34) >> 4;
        if ((unint64_t)(v41 + 1) >> 60)
          std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
        v42 = v88[0] - (_QWORD)v34;
        v43 = v42 >> 3;
        if (v42 >> 3 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)v88, v44);
          v40 = (float *)v87;
        }
        else
        {
          v45 = 0;
        }
        v46 = (__n128 *)&v45[16 * v41];
        v46->n128_u32[0] = v39;
        v46->n128_f32[1] = v37;
        v46->n128_f32[2] = v36;
        v46->n128_f32[3] = v35;
        v47 = v86;
        v48 = v46;
        if (v40 != v86)
        {
          do
          {
            v48[-1] = *(__n128 *)(v40 - 4);
            --v48;
            v40 -= 4;
          }
          while (v40 != v47);
          v40 = v86;
        }
        v7 = v46 + 1;
        v86 = (float *)v48;
        v87 = v46 + 1;
        v88[0] = &v45[16 * v44];
        if (v40)
          operator delete(v40);
      }
      else
      {
        v87->n128_u32[0] = v39;
        v40[1] = v37;
        v40[2] = v36;
        v7 = (__n128 *)(v40 + 4);
        v40[3] = v35;
      }
      v87 = v7;
      v22 = (__n128 *)v86;
      v31 = ((char *)v7 - (char *)v86) >> 4;
    }
    while ((unint64_t)((char *)v7 - (char *)v86) < 0x40);
  }
  v49 = 126 - 2 * __clz(v31);
  if (v7 == v22)
    v50 = 0;
  else
    v50 = v49;
  std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(v22, v7, (uint64_t)&v83, v50, 1);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v51 = v87[-1].n128_f32[3];
  v52 = v86[2];
  std::vector<AVE_MultiPass::_S_AVE_MPCluster>::resize((uint64_t)&v83, 4uLL);
  v53 = 0;
  v54 = (float)(v51 - v52) * 0.25;
  v55 = v52 + v54;
  v56 = (float)(v52 + (float)(v52 + v54)) * 0.5;
  do
  {
    v57 = (float *)((char *)v83 + v53);
    v57[1] = v56;
    v57[2] = v52;
    v57[3] = v55;
    *v57 = 0.0;
    if (AVE_Log_CheckLevel(0x2Eu, 8))
    {
      if (AVE_Log_CheckConsole(0x2Eu))
      {
        v58 = AVE_GetCurrTime();
        v59 = AVE_Log_GetLevelStr(8);
        printf("%lld %d AVE %s: center %f left %f right %f count %u\n", v58, 46, v59, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
      }
      v60 = AVE_GetCurrTime();
      v61 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: center %f left %f right %f count %u", v60, 46, v61, *(float *)((char *)v83 + v53 + 4), *(float *)((char *)v83 + v53 + 8), *(float *)((char *)v83 + v53 + 12), *(_DWORD *)((char *)v83 + v53));
    }
    v56 = v54 + v56;
    v52 = v54 + v52;
    v55 = v54 + v55;
    v53 += 16;
  }
  while (v53 != 64);
  __p = 0;
  v81 = 0;
  v82 = 0;
  v62 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&__p, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v62, (unint64_t *)&__p, (unint64_t *)&v83);
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v63 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&v77, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v63, (unint64_t *)&v77, (unint64_t *)&v83);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v64 = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(&v74, v86, (uint64_t)v87, ((char *)v87 - (char *)v86) >> 4);
  AVE_MultiPass::QuantizeData((uint64_t)v64, (unint64_t *)&v74, (unint64_t *)&v83);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  v65 = 0;
  v66 = (char *)v83;
  v67 = v23 + 4;
  do
  {
    *(v67 - 4) = *(_DWORD *)&v66[v65];
    *v67++ = *(_DWORD *)&v66[v65 + 4];
    v65 += 16;
  }
  while (v65 != 64);
  if (AVE_Log_CheckLevel(0x2Eu, 8))
  {
    if (AVE_Log_CheckConsole(0x2Eu))
    {
      v68 = AVE_GetCurrTime();
      v69 = AVE_Log_GetLevelStr(8);
      printf("%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u\n", v68, 46, v69, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
    }
    v70 = AVE_GetCurrTime();
    v71 = AVE_Log_GetLevelStr(8);
    syslog(3, "%lld %d AVE %s: log10_cplx quantized histogram : values %f %f %f %f counts %u %u %u %u", v70, 46, v71, *((float *)v23 + 4), *((float *)v23 + 5), *((float *)v23 + 6), *((float *)v23 + 7), *v23, v23[1], v23[2], v23[3]);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = (__n128 *)v86;
    operator delete(v86);
  }
}

void sub_1B55C0D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(_QWORD *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AVE_MultiPass::_S_AVE_MPCluster>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__append((char **)a1, a2 - v2);
  }
}

void AVE_MultiPass::QuantizeData(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unsigned int v40;
  unint64_t v41;
  float v42;
  const char *v43;

  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v5 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v5)
    {
      printf("%lld %d AVE %s: MP: QuantizeData()\n", CurrTime, 216, LevelStr);
      v8 = AVE_GetCurrTime();
      v43 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", v8, 216, v43);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: QuantizeData()", CurrTime, 216, LevelStr);
    }
  }
  v10 = *a3;
  v9 = a3[1];
  if (*a3 < v9)
  {
    v11 = a2[1];
    v12 = 0.0;
    do
    {
      v13 = *a2;
      if (*a2 >= v11)
      {
        v15 = 0.0;
        v40 = (float)((float)(v12 + 0.0) + 0.5);
        *(_DWORD *)v10 = v40;
      }
      else
      {
        v14 = 0.0;
        v15 = 0.0;
        do
        {
          if (AVE_Log_CheckLevel(0x2Eu, 8))
          {
            v16 = AVE_Log_CheckConsole(0x2Eu);
            v17 = AVE_GetCurrTime();
            v18 = AVE_Log_GetLevelStr(8);
            v19 = *(float *)(v13 + 8);
            v20 = *(float *)(v13 + 4);
            v21 = *(float *)(v13 + 12);
            v22 = *(float *)(v10 + 8);
            v23 = *(float *)(v10 + 4);
            v24 = *(float *)(v10 + 12);
            if (v16)
            {
              printf("%lld %d AVE %s: it %f %f %f q_it %f %f %f\n", v17, 46, v18, v19, v20, v21, v22, *(float *)(v10 + 4), v24);
              v17 = AVE_GetCurrTime();
              v18 = AVE_Log_GetLevelStr(8);
              v19 = *(float *)(v13 + 8);
              v20 = *(float *)(v13 + 4);
              v21 = *(float *)(v13 + 12);
              v22 = *(float *)(v10 + 8);
              v23 = *(float *)(v10 + 4);
              v24 = *(float *)(v10 + 12);
            }
            syslog(3, "%lld %d AVE %s: it %f %f %f q_it %f %f %f", v17, 46, v18, v19, v20, v21, v22, v23, v24);
          }
          v25 = *(float *)(v13 + 12);
          v26 = *(float *)(v10 + 8);
          if (v25 > v26)
          {
            v27 = *(float *)(v13 + 8);
            v28 = *(float *)(v10 + 12);
            if (v27 < v28)
            {
              v29 = v27 >= v26 ? *(float *)(v13 + 8) : *(float *)(v10 + 8);
              v30 = v28 >= v25 ? *(float *)(v13 + 12) : *(float *)(v10 + 12);
              v31 = (float)((float)(v30 - v29) * (float)*(unsigned int *)v13) / (float)(v25 - v27);
              v32 = (float)(v29 + v30) * 0.5;
              v15 = v15 + v31;
              v14 = v14 + (float)(v31 * v32);
              if (AVE_Log_CheckLevel(0x2Eu, 8))
              {
                v33 = AVE_Log_CheckConsole(0x2Eu);
                v34 = AVE_GetCurrTime();
                v35 = AVE_Log_GetLevelStr(8);
                v36 = v29;
                v37 = v30;
                v38 = v31;
                v39 = v32;
                if (v33)
                {
                  printf("%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f\n", v34, 46, v35, v36, v37, v38, v39);
                  v34 = AVE_GetCurrTime();
                  v35 = AVE_Log_GetLevelStr(8);
                }
                syslog(3, "%lld %d AVE %s: left_overlap %f right_overlap %f l_count %f center %f", v34, 46, v35, v36, v37, v38, v39);
              }
            }
          }
          v13 += 16;
          v11 = a2[1];
        }
        while (v13 < v11);
        v40 = (float)((float)(v12 + v15) + 0.5);
        *(_DWORD *)v10 = v40;
        if (v15 > 0.0)
          *(float *)(v10 + 4) = v14 / v15;
      }
      v12 = v15 - (float)v40;
      v10 += 16;
      v9 = a3[1];
    }
    while (v10 < v9);
    v10 = *a3;
  }
  if (v10 < v9)
  {
    do
    {
      v41 = v10 + 16;
      if (v10 + 16 != v9)
      {
        v42 = (float)(*(float *)(v10 + 4) + *(float *)(v10 + 20)) * 0.5;
        *(float *)(v10 + 12) = v42;
        *(float *)(v10 + 24) = v42;
      }
      v10 += 16;
    }
    while (v41 < v9);
  }
}

void AVE_MultiPass::FlushStats(AVE_MultiPass *this, OpaqueVTMultiPassStorage *a2, __sFILE *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  const UInt8 *pass;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  __CFData *Mutable;
  int v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v23;
  const char *v24;
  const __CFAllocator *allocator;

  if (AVE_Log_CheckLevel(0xD8u, 7))
  {
    v6 = AVE_Log_CheckConsole(0xD8u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(7);
    if (v6)
    {
      printf("%lld %d AVE %s: MP: %s\n", CurrTime, 216, LevelStr, "FlushStats");
      v9 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(7);
      syslog(3, "%lld %d AVE %s: MP: %s", v9, 216, v23, "FlushStats");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: MP: %s", CurrTime, 216, LevelStr, "FlushStats");
    }
  }
  pass = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (!pass || *((_DWORD *)pass + 11) != -1)
  {
    v11 = AVE_MultiPass::new_stats(this);
    if (!v11)
      break;
    *(_DWORD *)(v11 + 44) = -1;
    pass = (const UInt8 *)AVE_MultiPass::enqueue_first_pass(this, v11, 0);
    if (!AVE_Log_CheckLevel(0xD8u, 7))
      goto LABEL_19;
    v12 = AVE_Log_CheckConsole(0xD8u);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(7);
    if (v12)
    {
      if (pass)
        v15 = *((_DWORD *)pass + 11);
      else
        v15 = -1;
      printf("%lld %d AVE %s: MP: %s flushes stats %p display_order %d\n", v13, 216, v14, "FlushStats", pass, v15);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(7);
      if (pass)
      {
LABEL_17:
        v16 = *((_DWORD *)pass + 11);
        goto LABEL_18;
      }
    }
    else if (pass)
    {
      goto LABEL_17;
    }
    v16 = -1;
LABEL_18:
    syslog(3, "%lld %d AVE %s: MP: %s flushes stats %p display_order %d", v13, 216, v14, "FlushStats", pass, v16);
LABEL_19:
    if (pass && *((_DWORD *)pass + 11) != -1)
    {
      if (a2)
      {
        Mutable = CFDataCreateMutable(allocator, 0);
        CFDataAppendBytes(Mutable, pass, 1574);
        v18 = VTMultiPassStorageSetDataAtTimeStamp();
        if (Mutable)
          CFRelease(Mutable);
        if (v18 && AVE_Log_CheckLevel(0x2Eu, 4))
        {
          v19 = AVE_Log_CheckConsole(0x2Eu);
          v20 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          if (v19)
          {
            printf("%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...\n", v20, 46, v21, "FlushStats");
            v22 = AVE_GetCurrTime();
            v24 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v22, 46, v24, "FlushStats");
          }
          else
          {
            syslog(3, "%lld %d AVE %s: MP: %s ERROR: VTMultiPassStorageSetDataAtTimeStamp failed ...", v20, 46, v21, "FlushStats");
          }
        }
      }
      if (a3)
      {
        fseeko(a3, 1574 * *((unsigned int *)pass + 11) + 264, 0);
        fwrite(pass, 1uLL, 0x626uLL, a3);
      }
    }
  }
  AVE_MultiPass::empty_queues(this);
  AVE_MultiPass::FinalizeSeqRcInfo(this);
  if (a3)
  {
    fseek(a3, 0, 0);
    fwrite((char *)this + 25496, 1uLL, 0x108uLL, a3);
  }
}

void std::deque<_S_AVE_MultiPassStats *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<_S_AVE_MultiPassStats **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<_S_AVE_MultiPassStats **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B55C1740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<_S_AVE_MultiPassStats **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<_S_AVE_MultiPassStats **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_S_AVE_MultiPassStats **>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::deque<_S_AVE_MultiPassStats *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E692AC38, MEMORY[0x1E0DE42D0]);
}

void sub_1B55C1CF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(_DWORD *)(v9 + 44);
    if (*(_DWORD *)(*v5 + 44) > v10)
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v11;
      }
      while (*(_DWORD *)(*v5 + 44) > v10);
      *v11 = v8;
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPStatsSort &,std::__wrap_iter<_S_AVE_MultiPassStats **>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3];
    v9 = v6[1];
    v7 = v6 + 1;
    v8 = v9;
    v10 = (2 * v3) | 1;
    v11 = 2 * v3 + 2;
    if (v11 < a3 && *(_DWORD *)(v8 + 44) > *(_DWORD *)(v7[1] + 44))
    {
      v8 = v7[1];
      ++v7;
      v10 = v11;
    }
    *a1 = v8;
    a1 = v7;
    v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>(unsigned int *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unsigned int v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_DWORD *)a2 - 4);
        v19 = a2 - 1;
        if (v20 > *v9)
        {
          v28 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9, v9 + 4, (unsigned int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9, v9 + 4, v9 + 8, a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9, v9 + 4, v9 + 8, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (unsigned int *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)&v9[4 * (v13 >> 1)], v9, (unsigned int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9, &v9[4 * (v13 >> 1)], (unsigned int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9 + 1, v15 - 4, (unsigned int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v9 + 2, &v9[4 * v14 + 4], (unsigned int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)v15 - 1, v15, &v9[4 * v14 + 4]);
            v27 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 4) <= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(v9, (unsigned int *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v9, (__n128 *)v16);
          v9 = (unsigned int *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)(v16 + 1), (__n128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (unsigned int *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(v9, a2);
        }
        else if (v9 != (unsigned int *)a2)
        {
          v21 = (__int128 *)(v9 + 4);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *((_QWORD *)a1 + 2);
            if (v23 > *a1)
            {
              v24 = *((_QWORD *)a1 + 3);
              v25 = v22;
              do
              {
                *v25 = *(v25 - 1);
                v26 = *((_DWORD *)v25-- - 8);
              }
              while (v23 > v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 1;
            a1 = (unsigned int *)v22;
          }
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (a2[-1].n128_f32[1] < v10->n128_f32[1])
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v10, (float *)&v10[1], (float *)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v10, (uint64_t)&v10[1], (uint64_t)&v10[2], (uint64_t)&a2[-1]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v10, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v10, (uint64_t)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (float *)&v10[v14 >> 1];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v10[v14 >> 1], (float *)v10, (float *)&a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)v10, (float *)&v10[v14 >> 1], (float *)&a2[-1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v10[1], v16 - 4, (float *)&a2[-2]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)&v10[2], (float *)&v10[v15 + 1], (float *)&a2[-3]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v16 - 4, v16, (float *)&v10[v15 + 1]);
            v20 = *v10;
            *v10 = *(__n128 *)v16;
            *(__n128 *)v16 = v20;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (v10[-1].n128_f32[1] >= v10->n128_f32[1])
          {
            v10 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>((float *)v10, (float *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (__n128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>((__int128 *)v10, (float *)a2);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v10, v17);
          v10 = v17 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(v17 + 1, a2))
          {
            v11 = v12 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(a1, v17, a3, -v12, a5 & 1);
            v10 = v17 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (v6 > *(_DWORD *)v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(_DWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 <= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(__int128 *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 > *(_DWORD *)a1)
  {
    if (v4 > v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 <= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 > v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 <= *(_DWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(unsigned int *a1, unsigned int *a2)
{
  __int128 v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v11;

  v2 = *(_OWORD *)a1;
  v3 = *(_OWORD *)a1;
  if (v3 <= *(a2 - 4))
  {
    v6 = a1 + 4;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 4;
    }
    while (v3 <= *v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[4];
      v4 += 4;
    }
    while (v3 <= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v7);
  }
  while (v4 < a2)
  {
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      v8 = v4[4];
      v4 += 4;
    }
    while (v3 <= v8);
    do
    {
      v9 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 > v9);
  }
  if (v4 - 4 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCount &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int v4;
  unsigned int v5;
  __int128 *v6;
  __int128 *v7;
  unsigned int v8;
  unsigned int v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;

  v2 = 0;
  v3 = *a1;
  v4 = *a1;
  do
    v5 = a1[++v2];
  while (v4 < v5);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *((_DWORD *)a2-- - 4);
    }
    while (v4 >= v9);
  }
  else
  {
    do
      v8 = *((_DWORD *)a2-- - 4);
    while (v4 >= v8);
  }
  if (v6 < a2)
  {
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        v13 = *((_DWORD *)v10++ + 4);
      while (v4 < v13);
      do
        v14 = *((_DWORD *)v11-- - 4);
      while (v4 >= v14);
    }
    while (v10 < v11);
    v7 = v10 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _OWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      if (a2[-1].n128_u32[0] > *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      v8 = (unsigned int *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((__int128 *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v9 = (unsigned int *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_OWORD *)v9;
    v13 = *(_OWORD *)v9;
    if (v13 > *v8)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 <= v15)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_12:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 4 == (unsigned int *)a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 4;
    if (v9 == (unsigned int *)a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(__int128 *a1, unsigned int *a2, unsigned int *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a2, a3);
  if (*(_DWORD *)a4 > *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 > *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 > *(_DWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(__int128 *a1, unsigned int *a2, unsigned int *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u32[0] > a4->n128_u32[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] > *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 > *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 > *(_DWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 > *(_DWORD *)a1)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *a1;
        v18 = a1;
        do
        {
          v19 = (uint64_t)&v18[v17 + 1];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_DWORD *)v19 > *(_DWORD *)(v19 + 16))
          {
            v19 += 16;
            v20 = v21;
          }
          *v18 = *(_OWORD *)v19;
          v18 = (_OWORD *)v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((__int128 *)v19 == --v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *v6;
          *v6 = v30;
          v22 = v19 - (_QWORD)a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[v23];
            v25 = *(_QWORD *)v19;
            if (*(_DWORD *)v24 > *(_QWORD *)v19)
            {
              v26 = *(_QWORD *)(v19 + 8);
              do
              {
                v27 = v24;
                *(_OWORD *)v19 = *v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[v23];
                v19 = (uint64_t)v27;
              }
              while (*(_DWORD *)v24 > v25);
              *(_QWORD *)v27 = v25;
              *((_QWORD *)v27 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCount &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (__int128 *)(result + 16 * v7);
      v9 = v6 + 2;
      v10 = *(_QWORD *)v8;
      if (v9 < a3 && v10 > *((_QWORD *)v8 + 2))
      {
        v10 = *((_QWORD *)v8++ + 2);
        v7 = v9;
      }
      v11 = *a4;
      v12 = *a4;
      if (v12 >= v10)
      {
        do
        {
          v13 = v8;
          *a4 = *v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (__int128 *)(result + 16 * v14);
          v15 = 2 * v7 + 2;
          v16 = *(_QWORD *)v8;
          if (v15 < a3 && v16 > *((_QWORD *)v8 + 2))
          {
            v16 = *((_QWORD *)v8++ + 2);
            v14 = v15;
          }
          a4 = v13;
          v7 = v14;
        }
        while (v12 >= v16);
        *v13 = v11;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  __n128 *v17;
  char v18;
  BOOL v19;
  __n128 v20;
  __n128 v21;

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  float *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = (float *)result;
      do
      {
        v5 = v2;
        v6 = *((_QWORD *)v4 + 2);
        if (*((float *)&v6 + 1) < v4[1])
        {
          v7 = *((_QWORD *)v4 + 3);
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(float *)((char *)result + v8 - 12);
            v8 -= 16;
            if (*((float *)&v6 + 1) >= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = (float *)v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_QWORD *)(result + 16);
      if (*((float *)&v4 + 1) < *(float *)(result + 4))
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(float *)(v6 - 28);
          v6 -= 16;
        }
        while (*((float *)&v4 + 1) < v7);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 < a1[1])
  {
    if (v4 < v3)
    {
      v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (a3[1] >= a2[1])
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (a2[1] >= a1[1])
      return 1;
    v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>(float *a1, float *a2)
{
  __int128 v2;
  float v3;
  float *v4;
  unint64_t v5;
  float v6;
  float *v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  __int128 v14;

  v2 = *(_OWORD *)a1;
  LODWORD(v3) = HIDWORD(*(_QWORD *)a1);
  if (v3 >= *(a2 - 3))
  {
    v7 = a1 + 4;
    do
    {
      v5 = (unint64_t)v7;
      if (v7 >= a2)
        break;
      v8 = v7[1];
      v7 += 4;
    }
    while (v3 >= v8);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = (unint64_t)(v4 + 4);
      v6 = v4[5];
      v4 += 4;
    }
    while (v3 >= v6);
  }
  if (v5 >= (unint64_t)a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 4;
      v10 = *(a2 - 3);
      a2 -= 4;
    }
    while (v3 < v10);
  }
  while (v5 < (unint64_t)v9)
  {
    v14 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)v9;
    *(_OWORD *)v9 = v14;
    do
    {
      v11 = *(float *)(v5 + 20);
      v5 += 16;
    }
    while (v3 >= v11);
    do
    {
      v12 = *(v9 - 3);
      v9 -= 4;
    }
    while (v3 < v12);
  }
  if ((float *)(v5 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v5 - 16);
  *(_OWORD *)(v5 - 16) = v2;
  return v5;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPClusterSortCenter &>(__int128 *a1, float *a2)
{
  uint64_t v2;
  __int128 v3;
  float v4;
  float v5;
  float *v6;
  __int128 *v7;
  float *v8;
  float v9;
  float v10;
  unint64_t v11;
  float *v12;
  __int128 v13;
  float v14;
  float v15;

  v2 = 0;
  v3 = *a1;
  LODWORD(v4) = HIDWORD(*(_QWORD *)a1);
  do
    v5 = *((float *)&a1[++v2] + 1);
  while (v5 < v4);
  v6 = (float *)&a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      v8 = a2 - 4;
      v10 = *(a2 - 3);
      a2 -= 4;
      if (v10 < v4)
        goto LABEL_9;
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 4;
      v9 = *(a2 - 3);
      a2 -= 4;
    }
    while (v9 >= v4);
  }
LABEL_9:
  if (v6 < v8)
  {
    v11 = (unint64_t)v6;
    v12 = v8;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      do
      {
        v14 = *(float *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
      {
        v15 = *(v12 - 3);
        v12 -= 4;
      }
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
    v7 = (__int128 *)(v11 - 16);
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  int v10;
  __n128 v11;
  float v12;
  uint64_t v13;
  float v14;
  __n128 *v15;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f32[1] < a1->n128_f32[1])
      {
        v6 = *a1;
        *a1 = a2[-1];
        a2[-1] = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (float *)&a1[1], (float *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a2[-1]);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>((float *)a1, (float *)&a1[1], (float *)&a1[2]);
      v8 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *v8;
    LODWORD(v12) = HIDWORD(v8->n128_u64[0]);
    if (v12 < v7->n128_f32[1])
    {
      v13 = v9;
      while (1)
      {
        *(__n128 *)((char *)a1 + v13 + 48) = *(__n128 *)((char *)a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(float *)((char *)&a1[1].n128_f32[1] + v13);
        v13 -= 16;
        if (v12 >= v14)
        {
          v15 = (__n128 *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *v15 = v11;
      if (++v10 == 8)
        return &v8[1] == a2;
    }
    v7 = v8;
    v9 += 16;
    if (++v8 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  if (result.n128_f32[0] < *(float *)(a3 + 4))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    if (result.n128_f32[0] < *(float *)(a2 + 4))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 4);
      if (result.n128_f32[0] < a1[1])
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(float *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[1];
  if (result.n128_f32[0] < a4->n128_f32[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    result.n128_u32[0] = a4->n128_u32[1];
    if (result.n128_f32[0] < a3->n128_f32[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      result.n128_u32[0] = a3->n128_u32[1];
      if (result.n128_f32[0] < a2->n128_f32[1])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        result.n128_u32[0] = a2->n128_u32[1];
        if (result.n128_f32[0] < a1[1])
        {
          result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if ((__int128 *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*((float *)v14 + 1) < *(float *)(a1 + 4))
        {
          v15 = *v14;
          *v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, a4, v9, (__int128 *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = (_OWORD *)v18;
          v18 += 16 * v17 + 16;
          v20 = 2 * v17;
          v17 = (2 * v17) | 1;
          v21 = v20 + 2;
          if (v21 < v16 && *(float *)(v18 + 4) < *(float *)(v18 + 20))
          {
            v18 += 16;
            v17 = v21;
          }
          *v19 = *(_OWORD *)v18;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((__int128 *)v18 == --v6)
        {
          *(_OWORD *)v18 = v24;
        }
        else
        {
          *(_OWORD *)v18 = *v6;
          *v6 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(a1, v18 + 16, a4, (v18 + 16 - a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  float v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
      {
        v8 += 16;
        v7 = v9;
      }
      v10 = *a4;
      LODWORD(v11) = HIDWORD(*(_QWORD *)a4);
      if (*(float *)(v8 + 4) >= v11)
      {
        do
        {
          v12 = (__int128 *)v8;
          *a4 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = result + 16 * v7;
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v8 + 4) < *(float *)(v8 + 20))
          {
            v8 += 16;
            v7 = v14;
          }
          a4 = v12;
        }
        while (*(float *)(v8 + 4) >= v11);
        *v12 = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,AVE_MultiPass::_S_AVE_MPClusterSortCenter &,AVE_MultiPass::_S_AVE_MPCluster *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = result + 16 * v4;
    v7 = (_OWORD *)(a2 - 16);
    v6 = *(_QWORD *)(a2 - 16);
    if (*(float *)(v5 + 4) < *((float *)&v6 + 1))
    {
      v8 = *(_QWORD *)(a2 - 8);
      do
      {
        v9 = (_QWORD *)v5;
        *v7 = *(_OWORD *)v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = result + 16 * v4;
        v7 = v9;
      }
      while (*(float *)(v5 + 4) < *((float *)&v6 + 1));
      *v9 = v6;
      v9[1] = v8;
    }
  }
  return result;
}

void std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - v7;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__init_with_size[abi:ne180100]<AVE_MultiPass::_S_AVE_MPCluster*,AVE_MultiPass::_S_AVE_MPCluster*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B55C3820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AVE_MultiPass::_S_AVE_MPCluster>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<_S_AVE_MultiPassStats *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AVE_MultiPass::_S_AVE_MPCluster>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

char *AVE_PixelFmt_FindByType(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(_DWORD *)&gs_sAVE_PixelFormatConversion[v1] != a1)
  {
    v1 += 44;
    if (v1 == 3740)
      return 0;
  }
  return &gs_sAVE_PixelFormatConversion[v1];
}

uint64_t AVE_PixelFmt_GetNumberOfTypes(void)
{
  return 85;
}

uint64_t AVE_PixelFmt_FindType(_DWORD *a1)
{
  uint64_t v1;
  int v2;

  v1 = 0;
  v2 = a1[8];
  while (v2 != -1 && v2 != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 32]
       || a1[6] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 24]
       || a1[3] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 12]
       || a1[1] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 4]
       || a1[2] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 8]
       || a1[4] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 16]
       || a1[5] != *(_DWORD *)&gs_sAVE_PixelFormatConversion[v1 + 20])
  {
    v1 += 44;
    if (v1 == 3740)
      return 0;
  }
  return *(unsigned int *)&gs_sAVE_PixelFormatConversion[v1];
}

uint64_t AVE_PS_CalcSizeOfhvcC(int a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;

  v12 = 0;
  v4 = *a2;
  if ((int)v4 < 1)
  {
    v6 = 23;
  }
  else
  {
    v5 = a2 + 2;
    v6 = 23;
    do
    {
      v7 = v5[2];
      if (v7)
      {
        if (*v5 == a1)
        {
          v8 = *(v5 - 1);
          if ((v8 - 1) <= 2)
          {
            if (!*((_BYTE *)&v12 + v8))
            {
              v6 += 3;
              *((_BYTE *)&v12 + v8) = 1;
            }
            v6 = v6 + (v7 >> 3) - 2;
          }
        }
      }
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  if (a3)
    v9 = a3 + 1;
  else
    v9 = 0;
  v10 = a4 + 5;
  if (!a4)
    v10 = 0;
  return (v10 + v9 + v6);
}

uint64_t AVE_PS_ComposeNALUArray(int a1, int a2, uint64_t a3, int *a4, uint64_t a5)
{
  int v6;
  uint64_t v9;
  int v10;
  uint64_t result;
  const char *v12;
  int *v13;
  unsigned int v14;
  int *v15;
  const char *v16;
  _DWORD *v17;
  int *v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  const char *LevelStr;
  int v23;
  __uint64_t v24;
  const char *v25;
  unint64_t i;
  int v27;
  __uint64_t v28;
  const char *v29;
  int v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  __uint64_t v34;
  const char *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  __uint64_t CurrTime;
  uint64_t v41;
  unsigned __int16 v42;
  int v43;

  if ((a2 - 1) > 2)
    return 4294966295;
  *(_BYTE *)a5 = a2 - 97;
  v6 = *a4;
  if (*a4 < 1)
    return 4294966295;
  v9 = 0;
  v10 = 0;
  v36 = a3 + 4;
  result = 3;
  v12 = "%lld %d AVE %s: %p: 0x%x";
  v39 = a5;
  v37 = a1;
  v38 = a2;
  do
  {
    v13 = &a4[4 * v9];
    v14 = v13[4];
    if (v14)
    {
      v15 = v13 + 2;
      if (v13[2] == a1)
      {
        v16 = v12;
        v17 = v13 + 1;
        if (v13[1] == a2)
        {
          v43 = v10;
          v18 = v13 + 3;
          v19 = (v14 >> 3) - 4;
          *(_WORD *)(a5 + (int)result) = bswap32(v19) >> 16;
          v41 = (int)result + 2;
          v42 = v19;
          v20 = (unsigned __int16)v19;
          memcpy((void *)(a5 + v41), (const void *)(v36 + (v13[3] >> 3)), (unsigned __int16)v19);
          if (AVE_Log_CheckLevel(0xD4u, 8))
          {
            v21 = AVE_Log_CheckConsole(0xD4u);
            CurrTime = AVE_GetCurrTime();
            LevelStr = AVE_Log_GetLevelStr(8);
            v23 = *v15;
            if (v21)
            {
              printf("%lld %d AVE %s: type %d layer id %d\n", CurrTime, 212, LevelStr, *v17, v23);
              v24 = AVE_GetCurrTime();
              v25 = AVE_Log_GetLevelStr(8);
              syslog(3, "%lld %d AVE %s: type %d layer id %d", v24, 212, v25, *v17, *v15);
            }
            else
            {
              syslog(3, "%lld %d AVE %s: type %d layer id %d", CurrTime, 212, LevelStr, *v17, v23);
            }
          }
          v12 = v16;
          if ((_DWORD)v20)
          {
            for (i = 0; i < v20; i += 2)
            {
              if (AVE_Log_CheckLevel(0xD4u, 8))
              {
                v27 = AVE_Log_CheckConsole(0xD4u);
                v28 = AVE_GetCurrTime();
                v29 = AVE_Log_GetLevelStr(8);
                v30 = *v18 >> 3;
                v31 = a3 + v30;
                v32 = (const void *)(a3 + i + v30);
                v33 = *(unsigned __int16 *)(v31 + i);
                if (v27)
                {
                  printf("%lld %d AVE %s: %p: 0x%x\n", v28, 212, v29, v32, v33);
                  v34 = AVE_GetCurrTime();
                  v35 = AVE_Log_GetLevelStr(8);
                  syslog(3, v12, v34, 212, v35, a3 + i + (*v18 >> 3), *(unsigned __int16 *)(a3 + (*v18 >> 3) + i));
                }
                else
                {
                  syslog(3, v12, v28, 212, v29, v32, v33);
                }
              }
            }
          }
          result = v41 + v42;
          v10 = v43 + 1;
          v6 = *a4;
          a5 = v39;
          a1 = v37;
          a2 = v38;
        }
        else
        {
          v12 = v16;
        }
      }
    }
    ++v9;
  }
  while (v9 < v6);
  if (!v10)
    return 4294966295;
  *(_WORD *)(a5 + 1) = BYTE1(v10) | (unsigned __int16)((_WORD)v10 << 8);
  return result;
}

uint64_t AVE_PS_Compose_hvcC(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, const void *a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __uint64_t CurrTime;
  const char *LevelStr;

  *(_BYTE *)a9 = 1;
  *(_BYTE *)(a9 + 1) = (*(_BYTE *)(a8 + 24) << 6) | (32 * (*(_DWORD *)(a8 + 28) != 0)) | *(_DWORD *)(a8 + 32);
  AVE_PS_Compose_general_profile_compatibility_flag(a8, a9 + 2, 4);
  AVE_PS_Compose_general_constraint_indicator_flags(a8, (_BYTE *)(a9 + 6), 6);
  *(_BYTE *)(a9 + 12) = *(_DWORD *)(a8 + 84);
  *(_WORD *)(a9 + 13) = 240;
  *(_BYTE *)(a9 + 15) = -4;
  *(_BYTE *)(a9 + 16) = *(_BYTE *)(a8 + 572) | 0xFC;
  *(_BYTE *)(a9 + 17) = *(_BYTE *)(a8 + 616) | 0xF8;
  *(_BYTE *)(a9 + 18) = *(_BYTE *)(a8 + 620) | 0xF8;
  *(_WORD *)(a9 + 19) = 0;
  *(_BYTE *)(a9 + 21) = 11;
  v18 = AVE_PS_CalcNumOfNALU(a3, a1);
  v19 = a4 != 0;
  if (a6)
    ++v19;
  *(_BYTE *)(a9 + 22) = v19 + v18;
  v20 = AVE_PS_ComposeNALUArray(a1, 1, a2, (int *)a3, a9 + 23);
  if (v20 < 1)
    return 4294966296;
  v21 = (v20 + 23);
  v22 = AVE_PS_ComposeNALUArray(a1, 2, a2, (int *)a3, a9 + v21);
  if (v22 < 1)
    return 4294966296;
  v23 = (v22 + v21);
  v24 = AVE_PS_ComposeNALUArray(a1, 3, a2, (int *)a3, a9 + v23);
  if (v24 < 1)
    return 4294966296;
  v25 = v24 + (unint64_t)v23;
  if (a4)
  {
    *(_BYTE *)(a9 + v25) = -89;
    v26 = a9 + v25;
    *(_WORD *)(v26 + 1) = 256;
    v27 = a5 - 4;
    *(_WORD *)(v26 + 3) = BYTE1(v27) | (unsigned __int16)((_WORD)v27 << 8);
    v25 = (v25 + 5);
    memcpy((void *)(a9 + v25), (const void *)(a4 + 4), v27);
    LODWORD(v25) = v25 + v27;
  }
  if (a6)
  {
    v28 = a9 + (int)v25;
    *(_BYTE *)v28 = -89;
    *(_WORD *)(v28 + 1) = 256;
    *(_WORD *)(v28 + 3) = BYTE1(a7) | (unsigned __int16)((_WORD)a7 << 8);
    v29 = (int)v25 + 5;
    memcpy((void *)(a9 + v29), a6, a7);
    LODWORD(v25) = v29 + a7;
  }
  if ((int)v25 <= a10)
    return 0;
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    v30 = AVE_Log_CheckConsole(0xD4u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(4);
    if (v30)
    {
      printf("%lld %d AVE %s: %s:%d offset > num %d > %d\n", CurrTime, 212, LevelStr, "AVE_PS_Compose_hvcC", 634, v25, a10);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d offset > num %d > %d", CurrTime);
  }
  return 4294966277;
}

uint64_t AVE_PS_CalcNumOfNALU(unsigned int *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  int *v6;
  int v7;
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
  {
    v4 = *a1;
    if ((int)v4 < 1)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = 0;
      v6 = (int *)(a1 + 2);
      do
      {
        v7 = *v6;
        v6 += 4;
        if (v7 == a2)
          result = (result + 1);
        else
          result = result;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v8 = AVE_Log_CheckConsole(0xD4u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %p %d\n", CurrTime, 212, LevelStr, "AVE_PS_CalcNumOfNALU", 369, "pInfo != __null", 0, a2);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %p %d", CurrTime, 212);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t AVE_PS_CalcSizeOflhvC(int a1, unsigned int *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;

  v8 = 0;
  v2 = *a2;
  if ((int)v2 < 1)
    return 6;
  v3 = a2 + 2;
  v4 = 6;
  do
  {
    v5 = v3[2];
    if (v5)
    {
      if (*v3 == a1)
      {
        v6 = *(v3 - 1);
        if ((v6 & 0xFFFFFFFE) == 2)
        {
          if (!*((_BYTE *)&v8 + v6))
          {
            LODWORD(v4) = v4 + 3;
            *((_BYTE *)&v8 + v6) = 1;
          }
          v4 = (v4 + (v5 >> 3) - 2);
        }
      }
    }
    v3 += 4;
    --v2;
  }
  while (v2);
  return v4;
}

uint64_t AVE_PS_Compose_lhvC(int a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11;
  uint64_t v12;
  int v13;

  *(_DWORD *)a5 = -67047423;
  *(_BYTE *)(a5 + 4) = -53;
  *(_BYTE *)(a5 + 5) = AVE_PS_CalcNumOfNALU(a3, a1);
  v11 = AVE_PS_ComposeNALUArray(a1, 2, a2, (int *)a3, a5 + 6);
  if (v11 < 1)
    return 4294966296;
  v12 = (v11 + 6);
  v13 = AVE_PS_ComposeNALUArray(a1, 3, a2, (int *)a3, a5 + v12);
  if (v13 < 1)
    return 4294966296;
  if (v13 + (int)v12 <= a6)
    return 0;
  return 4294966277;
}

uint64_t AVE_PS_Make_hvcC(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFData **a9)
{
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  __CFData *Mutable;
  __CFData *v24;
  UInt8 *MutableBytePtr;
  UInt8 *v26;
  uint64_t v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  __uint64_t v31;
  uint64_t v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  __uint64_t v40;
  const char *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  __uint64_t v45;
  const char *v46;
  uint64_t v47;
  int v48;
  __uint64_t v49;
  const char *v50;
  int v51;
  __CFData *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  const void *v59;
  unsigned int *v60;
  unsigned int *v61;
  const void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  const void *v67;
  __CFData **v68;
  uint64_t v69;
  int v70;
  __CFData *v71;
  uint64_t v72;

  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != ((_DWORD)a5 == 0))
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v15 = AVE_Log_CheckConsole(0xD4u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, a5, a8, a9);
        CurrTime = AVE_GetCurrTime();
        v66 = a8;
        v68 = a9;
        v62 = a4;
        v64 = a5;
        v58 = a2;
        v60 = a3;
        v56 = a1;
        v53 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v66 = a8;
        v68 = a9;
        v62 = a4;
        v64 = a5;
        v58 = a2;
        v60 = a3;
        v56 = a1;
        v53 = LevelStr;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", CurrTime, 212, v53, "AVE_PS_Make_hvcC", 961, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null && !((pSEIData == __null) ^ (SEISize == 0))", v56, v58, v60, v62, v64, v66, v68);
    }
    return 4294966296;
  }
  *a9 = 0;
  v20 = AVE_PS_CalcSizeOfhvcC(a1, a3, a5, a7);
  v21 = v20;
  if ((int)v20 <= 0)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v33 = a1;
      v34 = AVE_Log_CheckConsole(0xD4u);
      v35 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(4);
      if (v34)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d\n", v35, 212, v36, "AVE_PS_Make_hvcC", 968, "size > 0", v33, a2, a3, a4, a5, a8, v21);
        v35 = AVE_GetCurrTime();
        v67 = a8;
        v69 = v21;
        v63 = a4;
        v65 = a5;
        v59 = a2;
        v61 = a3;
        v57 = v33;
        v55 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v67 = a8;
        v69 = v21;
        v63 = a4;
        v65 = a5;
        v59 = a2;
        v61 = a3;
        v57 = v33;
        v55 = v36;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d %p %d", v35, 212, v55, "AVE_PS_Make_hvcC", 968, "size > 0", v57, v59, v61, v63, v65, v67, v69);
    }
    return 4294966296;
  }
  v72 = a1;
  v22 = v20;
  Mutable = CFDataCreateMutable(0, v20);
  if (Mutable)
  {
    v70 = v21;
    v24 = Mutable;
    CFDataSetLength(Mutable, v22);
    v71 = v24;
    MutableBytePtr = CFDataGetMutableBytePtr(v24);
    if (MutableBytePtr)
    {
      v26 = MutableBytePtr;
      v27 = AVE_PS_Compose_hvcC(v72, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8, (uint64_t)MutableBytePtr, v70);
      if (AVE_Log_CheckLevel(0xD4u, 8))
      {
        v28 = AVE_Log_CheckConsole(0xD4u);
        v29 = AVE_GetCurrTime();
        v30 = AVE_Log_GetLevelStr(8);
        if (v28)
        {
          printf("%lld %d AVE %s: hvcC data:\n", v29, 212, v30);
          v31 = AVE_GetCurrTime();
          v54 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: hvcC data:", v31, 212, v54);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: hvcC data:", v29, 212, v30);
        }
      }
      v47 = 0;
      do
      {
        if (AVE_Log_CheckLevel(0xD4u, 8))
        {
          v48 = AVE_Log_CheckConsole(0xD4u);
          v49 = AVE_GetCurrTime();
          v50 = AVE_Log_GetLevelStr(8);
          v51 = *(unsigned __int16 *)&v26[v47];
          if (v48)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v49, 212, v50, &v26[v47], v51);
            v49 = AVE_GetCurrTime();
            v50 = AVE_Log_GetLevelStr(8);
            v51 = *(unsigned __int16 *)&v26[v47];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v49, 212, v50, &v26[v47], v51);
        }
        v47 += 2;
      }
      while (v70 > (int)v47);
      v52 = v24;
      *a9 = v24;
      if (!(_DWORD)v27)
        return v27;
    }
    else if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v42 = AVE_Log_CheckConsole(0xD4u);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      if (v42)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d\n", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
        v45 = AVE_GetCurrTime();
        v46 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v45, 212, v46, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v71, v70);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %d %p %p %d", v43, 212, v44, "AVE_PS_Make_hvcC", 980, "pData != __null", v72, a2, a3, a4, a5, a8, v24, v70);
      }
      v52 = v71;
      v27 = 4294966293;
    }
    else
    {
      v27 = 4294966293;
      v52 = v24;
    }
    CFRelease(v52);
    return v27;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    v37 = AVE_Log_CheckConsole(0xD4u);
    v38 = AVE_GetCurrTime();
    v39 = AVE_Log_GetLevelStr(4);
    if (v37)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d\n", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72, a2, a3, a4, a5, a8, v21);
      v40 = AVE_GetCurrTime();
      v41 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v40, 212, v41, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d %p %d", v38, 212, v39, "AVE_PS_Make_hvcC", 973, "pCFData != __null", v72);
    }
  }
  return 4294966293;
}

uint64_t AVE_PS_Make_hvcC_Dict(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, uint64_t a5, const void *a6, int a7, const void *a8, __CFDictionary **a9)
{
  int v10;
  int v15;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v18;
  int hvcC;
  int v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  const void *v24;
  __uint64_t v25;
  __CFDictionary *v26;
  __CFDictionary *v27;
  uint64_t v28;
  const __CFAllocator *v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  char v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  int v36;
  __uint64_t v37;
  const char *v38;
  __uint64_t v39;
  char v40;
  const char *v42;
  const char *v43;
  const char *v44;
  __CFData *v45;

  v10 = a5;
  v45 = 0;
  if (!a2 || !a3 || !a8 || !a9 || (a4 == 0) != ((_DWORD)a5 == 0))
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v15 = AVE_Log_CheckConsole(0xD4u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1, a2, a3, a4, v10, a8, a9);
        v18 = AVE_GetCurrTime();
        v42 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", v18, 212, v42, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %d %p %p", CurrTime, 212, LevelStr, "AVE_PS_Make_hvcC_Dict", 1039, "pInData != __null && pInfo != __null && pSPS != __null && ppCFDict != __null && !((pSEIData == __null) ^ (SEISize == 0))", a1);
      }
    }
    v26 = 0;
    v27 = 0;
    v28 = 4294966296;
    goto LABEL_29;
  }
  *a9 = 0;
  hvcC = AVE_PS_Make_hvcC(a1, a2, a3, a4, a5, a6, a7, a8, &v45);
  if (hvcC)
  {
    v20 = hvcC;
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v21 = AVE_Log_CheckConsole(0xD4u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d\n", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2, a3, a4, v10, a8, a9, v20);
        v24 = a2;
        v25 = AVE_GetCurrTime();
        v43 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v25, 212, v43, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, v24);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %d %p %p %d", v22, 212, v23, "AVE_PS_Make_hvcC_Dict", 1047, "ret == 0", a1, a2);
      }
    }
  }
  else
  {
    v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v26 = Mutable;
      CFDictionaryAddValue(Mutable, CFSTR("hvcC"), v45);
      v31 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v31)
      {
        v27 = v31;
        CFDictionaryAddValue(v31, (const void *)*MEMORY[0x1E0CA2240], v26);
        CFDictionaryAddValue(v27, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("HEVC"));
        v32 = 0;
        v28 = 0;
        *a9 = v27;
        goto LABEL_30;
      }
      if (AVE_Log_CheckLevel(0xD4u, 4))
      {
        v36 = AVE_Log_CheckConsole(0xD4u);
        v37 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        if (v36)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p\n", v37, 212, v38, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1, a2, a3, a4, v10, a8, v26);
          v39 = AVE_GetCurrTime();
          v44 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v39, 212, v44, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create dictionary %d %p %p %p %d %p %p", v37, 212, v38, "AVE_PS_Make_hvcC_Dict", 1061, "pDict != __null", a1);
        }
      }
      goto LABEL_28;
    }
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v33 = AVE_Log_CheckConsole(0xD4u);
      v34 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      if (v33)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p\n", v34, 212, v35, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1, a2, a3, a4, v10, a8, v45);
        v34 = AVE_GetCurrTime();
        v35 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to create data dictionary %d %p %p %p %d %p %p", v34, 212, v35, "AVE_PS_Make_hvcC_Dict", 1053, "pDataDict != __null", a1);
    }
  }
  v26 = 0;
LABEL_28:
  v27 = 0;
  v28 = 4294966293;
LABEL_29:
  v32 = 1;
LABEL_30:
  if (v45)
  {
    CFRelease(v45);
    v45 = 0;
  }
  if (v26)
    CFRelease(v26);
  v40 = v32 ^ 1;
  if (!v27)
    v40 = 1;
  if ((v40 & 1) == 0)
    CFRelease(v27);
  return v28;
}

uint64_t AVE_PS_Make_lhvC(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData **a5)
{
  uint64_t v10;
  __CFData *Mutable;
  __CFData *v12;
  UInt8 *MutableBytePtr;
  uint64_t v14;
  UInt8 *v15;
  uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  int v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  int v31;
  __uint64_t v32;
  const char *v33;
  __uint64_t v34;
  uint64_t v36;
  int v37;
  __uint64_t v38;
  const char *v39;
  int v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  const void *v49;
  unsigned int *v50;
  unsigned int *v51;
  const void *v52;
  const void *v53;
  __CFData **v54;
  uint64_t v55;
  __CFData *v56;

  if (!a2 || !a3 || !a4 || !a5)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v21 = AVE_Log_CheckConsole(0xD4u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", CurrTime, 212, LevelStr, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", a1, a2, a3, a4, a5);
        CurrTime = AVE_GetCurrTime();
        v52 = a4;
        v54 = a5;
        v48 = a2;
        v50 = a3;
        v46 = a1;
        v42 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v52 = a4;
        v54 = a5;
        v48 = a2;
        v50 = a3;
        v46 = a1;
        v42 = LevelStr;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", CurrTime, 212, v42, "AVE_PS_Make_lhvC", 1118, "pInData != __null && pInfo != __null && pSPS != __null && ppCFData != __null", v46, v48, v50, v52, v54);
    }
    return 4294966296;
  }
  *a5 = 0;
  v10 = AVE_PS_CalcSizeOflhvC(a1, a3);
  if ((int)v10 <= 0)
  {
    if (AVE_Log_CheckLevel(0xD4u, 4))
    {
      v24 = AVE_Log_CheckConsole(0xD4u);
      v25 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(4);
      if (v24)
      {
        printf("%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d\n", v25, 212, v26, "AVE_PS_Make_lhvC", 1125, "size > 0", a1, a2, a3, a4, v10);
        v25 = AVE_GetCurrTime();
        v53 = a4;
        v55 = v10;
        v49 = a2;
        v51 = a3;
        v47 = a1;
        v43 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v53 = a4;
        v55 = v10;
        v49 = a2;
        v51 = a3;
        v47 = a1;
        v43 = v26;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to calculate the size %d %p %p %p %d", v25, 212, v43, "AVE_PS_Make_lhvC", 1125, "size > 0", v47, v49, v51, v53, v55);
    }
    return 4294966296;
  }
  Mutable = CFDataCreateMutable(0, v10);
  if (Mutable)
  {
    v12 = Mutable;
    CFDataSetLength(Mutable, v10);
    MutableBytePtr = CFDataGetMutableBytePtr(v12);
    if (MutableBytePtr)
    {
      v15 = MutableBytePtr;
      v56 = v12;
      v16 = AVE_PS_Compose_lhvC(a1, (uint64_t)a2, a3, v14, (uint64_t)MutableBytePtr, v10);
      if (AVE_Log_CheckLevel(0xD4u, 8))
      {
        v17 = AVE_Log_CheckConsole(0xD4u);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(8);
        if (v17)
        {
          printf("%lld %d AVE %s: lhvC data:\n", v18, 212, v19);
          v20 = AVE_GetCurrTime();
          v41 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: lhvC data:", v20, 212, v41);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: lhvC data:", v18, 212, v19);
        }
      }
      v36 = 0;
      do
      {
        if (AVE_Log_CheckLevel(0xD4u, 8))
        {
          v37 = AVE_Log_CheckConsole(0xD4u);
          v38 = AVE_GetCurrTime();
          v39 = AVE_Log_GetLevelStr(8);
          v40 = *(unsigned __int16 *)&v15[v36];
          if (v37)
          {
            printf("%lld %d AVE %s: %p: 0x%x\n", v38, 212, v39, &v15[v36], v40);
            v38 = AVE_GetCurrTime();
            v39 = AVE_Log_GetLevelStr(8);
            v40 = *(unsigned __int16 *)&v15[v36];
          }
          syslog(3, "%lld %d AVE %s: %p: 0x%x", v38, 212, v39, &v15[v36], v40);
        }
        v36 += 2;
      }
      while ((int)v10 > (int)v36);
      v12 = v56;
      *a5 = v56;
      if (!(_DWORD)v16)
        return v16;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xD4u, 4))
      {
        v31 = AVE_Log_CheckConsole(0xD4u);
        v32 = AVE_GetCurrTime();
        v33 = AVE_Log_GetLevelStr(4);
        if (v31)
        {
          printf("%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d\n", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null", a1, a2, a3, a4, v12, v10);
          v34 = AVE_GetCurrTime();
          v45 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v34, 212, v45, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get memory address %d %p %p %p %p %d", v32, 212, v33, "AVE_PS_Make_lhvC", 1137, "pData != __null");
        }
      }
      v16 = 4294966293;
    }
    CFRelease(v12);
    return v16;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    v27 = AVE_Log_CheckConsole(0xD4u);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(4);
    if (v27)
    {
      printf("%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d\n", v28, 212, v29, "AVE_PS_Make_lhvC", 1130, "pCFData != __null", a1, a2, a3, a4, v10);
      v30 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v30, 212, v44, "AVE_PS_Make_lhvC", 1130);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | failed to allocate memory %d %p %p %p %d", v28, 212, v29, "AVE_PS_Make_lhvC", 1130);
    }
  }
  return 4294966293;
}

uint64_t AVE_PS_Add_lhvC_Dict(uint64_t a1, const void *a2, unsigned int *a3, const void *a4, __CFData *a5)
{
  uint64_t lhvC;
  uint64_t v11;
  int v12;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v15;
  __uint64_t v16;
  const char *v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  __CFDictionary *Value;
  uint64_t v23;
  int v25;
  __uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const void *v35;
  unsigned int *v36;
  const void *v37;
  __CFData *v38;
  uint64_t v39;
  __CFData *v40;

  v40 = 0;
  if (a2 && a3 && a4 && a5)
  {
    lhvC = AVE_PS_Make_lhvC(a1, a2, a3, a4, &v40);
    if ((_DWORD)lhvC)
    {
      v11 = lhvC;
      if (!AVE_Log_CheckLevel(0xD4u, 4))
      {
LABEL_18:
        v23 = 4294966293;
        goto LABEL_19;
      }
      v12 = AVE_Log_CheckConsole(0xD4u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (!v12)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d", CurrTime, 212, LevelStr, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0");
        goto LABEL_18;
      }
      v15 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d\n", CurrTime, 212, LevelStr, "AVE_PS_Add_lhvC_Dict", 1270, "ret == 0", a1, a2, a3, a4, a5, v11);
      v16 = AVE_GetCurrTime();
      v38 = a5;
      v39 = v11;
      v36 = a3;
      v37 = a4;
      v34 = v15;
      v35 = a2;
      v32 = 1270;
      v33 = "ret == 0";
      v30 = AVE_Log_GetLevelStr(4);
      v17 = "%lld %d AVE %s: %s:%d %s | failed to compose %d %p %p %p %p %d";
    }
    else
    {
      Value = (__CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2240]);
      if (Value)
      {
        CFDictionaryAddValue(Value, CFSTR("lhvC"), v40);
        v23 = 0;
        goto LABEL_19;
      }
      if (!AVE_Log_CheckLevel(0xD4u, 4))
        goto LABEL_18;
      v25 = AVE_Log_CheckConsole(0xD4u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (!v25)
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276);
        goto LABEL_18;
      }
      v28 = a1;
      printf("%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p\n", v26, 212, v27, "AVE_PS_Add_lhvC_Dict", 1276, "pDataDict != __null", a1, a2, a3, a4, v40);
      v16 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(4);
      v37 = a4;
      v38 = v40;
      v35 = a2;
      v36 = a3;
      v33 = "pDataDict != __null";
      v34 = v28;
      v32 = 1276;
      v30 = v29;
      v17 = "%lld %d AVE %s: %s:%d %s | failed to get data dictionary %d %p %p %p %p";
    }
    syslog(3, v17, v16, 212, v30, "AVE_PS_Add_lhvC_Dict", v32, v33, v34, v35, v36, v37, v38, v39);
    goto LABEL_18;
  }
  if (AVE_Log_CheckLevel(0xD4u, 4))
  {
    v18 = AVE_Log_CheckConsole(0xD4u);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p\n", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265, "pInData != __null && pInfo != __null && pSPS != __null && pCFDict != __null", a1, a2, a3, a4, a5);
      v21 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v21, 212, v31, "AVE_PS_Add_lhvC_Dict", 1265);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameters %d %p %p %p %p", v19, 212, v20, "AVE_PS_Add_lhvC_Dict", 1265);
    }
  }
  v23 = 4294966296;
LABEL_19:
  if (v40)
    CFRelease(v40);
  return v23;
}

uint64_t AVE_PS_Compose_general_profile_compatibility_flag(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned int v5;

  if (a3 < 4)
    return 4294966277;
  v4 = 0;
  v5 = 0;
  do
  {
    *(_BYTE *)(a2 + v5) |= *(_BYTE *)(a1 + 36 + v4) << (v4 & 7 ^ 7);
    if ((v4 & 7) == 7)
      ++v5;
    ++v4;
  }
  while (v4 != 32);
  return 4;
}

uint64_t AVE_PS_Compose_general_constraint_indicator_flags(uint64_t a1, _BYTE *a2, int a3)
{
  uint8x8_t v6;
  char v7;
  int v8;
  uint16x4_t v9;
  int v10;

  if (a3 < 6)
    return 4294966277;
  bzero(a2, a3);
  v7 = (*(_BYTE *)(a1 + 69) << 6) | (*(_BYTE *)(a1 + 68) << 7) | (32 * *(_BYTE *)(a1 + 70)) | (16 * *(_BYTE *)(a1 + 71));
  *a2 = v7;
  v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 4
    || v8 == 5
    || *(_BYTE *)(a1 + 40)
    || v8 == 6
    || *(_BYTE *)(a1 + 41)
    || v8 == 7
    || *(_BYTE *)(a1 + 42)
    || v8 == 8
    || *(_BYTE *)(a1 + 43)
    || v8 == 9
    || *(_BYTE *)(a1 + 44)
    || v8 == 10
    || *(_BYTE *)(a1 + 45)
    || v8 == 11
    || *(_BYTE *)(a1 + 46)
    || *(_BYTE *)(a1 + 47))
  {
    *a2 = (8 * *(_BYTE *)(a1 + 72)) | (4 * *(_BYTE *)(a1 + 73)) | (2 * *(_BYTE *)(a1 + 74)) | *(_BYTE *)(a1 + 75) | v7;
    v6.i32[0] = *(_DWORD *)(a1 + 76);
    v9 = vshl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v6), (uint16x4_t)0x4000500060007);
    v10 = v9.i32[0] | v9.i32[1] | ((*(_QWORD *)&v9 | HIDWORD(*(_QWORD *)&v9)) >> 16) | (8 * *(unsigned __int8 *)(a1 + 80));
  }
  else
  {
    if (v8 != 2 && !*(_BYTE *)(a1 + 38))
      return 5;
    LOBYTE(v10) = 16 * *(_BYTE *)(a1 + 79);
  }
  a2[1] = v10;
  return 5;
}

uint64_t AVE_PS_ParseAVC(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;

  if (a2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = -3;
    v7 = a2;
    do
    {
      v8 = *a1++;
      v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4 < a3)
          v9 = 2;
        else
          v9 = 3;
        v10 = &a4[4 * v4];
        v10[1] = v9;
        v10[2] = v4 % a3;
        v10[3] = v6;
        if (v4 >= 1)
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1)
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
  }
  *a4 = v4;
  return 0;
}

uint64_t AVE_PS_ParseHEVC(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int *v11;

  if (a2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = -3;
    v7 = a2;
    do
    {
      v8 = *a1++;
      v5 = v8 | (v5 << 8);
      if (v5 == 1)
      {
        if (v4)
        {
          if (v4 <= a3)
            v9 = 2;
          else
            v9 = 3;
          v10 = (v4 - 1) % a3;
        }
        else
        {
          v10 = 0;
          v9 = 1;
        }
        v11 = &a4[4 * v4];
        v11[1] = v9;
        v11[2] = v10;
        v11[3] = v6;
        if (v4 >= 1)
          a4[4 * (v4 - 1) + 4] = v6 - a4[4 * (v4 - 1) + 3];
        ++v4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    if (v4 >= 1)
      a4[4 * v4 + 4] = a2 - a4[4 * v4 + 3];
  }
  *a4 = v4;
  return 0;
}

uint64_t AVE_PS_Parse(unsigned __int8 *a1, int a2, int a3, int a4, int *a5)
{
  if (a3 == 1)
  {
    AVE_PS_ParseHEVC(a1, a2, a4, a5);
    return 0;
  }
  if (!a3)
  {
    AVE_PS_ParseAVC(a1, a2, a4, a5);
    return 0;
  }
  return 4294966295;
}

uint64_t AVE_PixelFmt_GetSupportedList(int a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result;
  int *v13;
  char *PixelFmt;

  result = 4294966295;
  if (!a5 || !a6)
  {
LABEL_8:
    if (!a6)
      return result;
    goto LABEL_9;
  }
  v13 = (int *)AVE_DevCap_FindByType(a1);
  if (!v13)
  {
    result = 4294966294;
    goto LABEL_8;
  }
  PixelFmt = AVE_DevCap_FindPixelFmt(*v13, a2, a4);
  if (PixelFmt)
  {
    result = AVE_DevCap_PixelFmt_FindList(PixelFmt, a3, a5, a6);
    if (!a6)
      return result;
  }
  else
  {
    result = 4294966288;
    if (!a6)
      return result;
  }
LABEL_9:
  if ((_DWORD)result)
    *a6 = 0;
  return result;
}

uint64_t AVE_PixelFmt_GetSupportedListByProfile(int a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, int *a8)
{
  int v9;
  uint64_t v10;
  int NumberOfTypes;
  uint64_t v19;
  int *v20;
  int v21;
  int *v22;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t i;
  int v30;
  int v31;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v34;
  uint64_t j;
  int v36;
  __uint64_t v37;
  const char *v38;
  int v39;
  __uint64_t v40;
  const char *v41;
  const char *v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;

  v9 = 1;
  v10 = 4294966295;
  if (a7 && a8)
  {
    NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
    v44 = malloc_type_malloc(4 * NumberOfTypes, 0x100004052888210uLL);
    if (v44)
    {
      if (a4 == 1)
      {
        v19 = 0;
        v20 = gs_sAVE_ProfileMap_HEVC;
        while (gs_sAVE_ProfileMap_HEVC[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72)
            goto LABEL_15;
        }
      }
      else
      {
        v19 = 0;
        v20 = gs_sAVE_ProfileMap_AVC;
        while (gs_sAVE_ProfileMap_AVC[v19] != a5)
        {
          v19 += 8;
          if (v19 == 72)
            goto LABEL_15;
        }
      }
      v21 = a4;
      v22 = &v20[v19];
      v46 = NumberOfTypes;
      if (AVE_PixelFmt_GetSupportedList(a1, a2, a3, v21, (uint64_t)v44, &v46))
      {
LABEL_15:
        v10 = 4294966288;
        v9 = 1;
      }
      else
      {
        if (v46 < 1)
        {
          v25 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v43 = a6;
          do
          {
            v45 = v24;
            v26 = AVE_PixelFmt_FindByType(v44[v24]);
            v27 = 40;
            if (v21 == 1)
              v27 = 36;
            v28 = *(_DWORD *)&v26[v27];
            for (i = 2; i != 8; ++i)
            {
              v30 = v22[i];
              if (!v30)
                break;
              if (v30 == v28 && (!*((_BYTE *)v22 + 4) || *((_DWORD *)v26 + 1) == a6))
                *(_DWORD *)(a7 + 4 * v25++) = *(_DWORD *)v26;
            }
            if (AVE_Log_CheckLevel(0x4Bu, 8))
            {
              v31 = AVE_Log_CheckConsole(0x4Bu);
              CurrTime = AVE_GetCurrTime();
              LevelStr = AVE_Log_GetLevelStr(8);
              if (v31)
              {
                printf("%lld %d AVE %s: %s:%d number of supported pixel format: %d\n", CurrTime, 75, LevelStr, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
                v34 = AVE_GetCurrTime();
                v42 = AVE_Log_GetLevelStr(8);
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", v34, 75, v42, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d number of supported pixel format: %d", CurrTime, 75, LevelStr, "AVE_PixelFmt_GetSupportedListByProfile", 255, v25);
              }
            }
            if (v25 >= 1)
            {
              for (j = 0; j != v25; ++j)
              {
                if (AVE_Log_CheckLevel(0x4Bu, 8))
                {
                  v36 = AVE_Log_CheckConsole(0x4Bu);
                  v37 = AVE_GetCurrTime();
                  v38 = AVE_Log_GetLevelStr(8);
                  v39 = *(_DWORD *)(a7 + 4 * j);
                  if (v36)
                  {
                    printf("%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x\n", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                    v40 = AVE_GetCurrTime();
                    v41 = AVE_Log_GetLevelStr(8);
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v40, 75, v41, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, *(_DWORD *)(a7 + 4 * j));
                  }
                  else
                  {
                    syslog(3, "%lld %d AVE %s: %s:%d list of supported pixel format[%d] 0x%x", v37, 75, v38, "AVE_PixelFmt_GetSupportedListByProfile", 260, j, v39);
                  }
                }
              }
            }
            v24 = v45 + 1;
            a6 = v43;
          }
          while (v45 + 1 < v46);
        }
        v9 = 0;
        v10 = 0;
        *a8 = v25;
      }
      free(v44);
    }
    else
    {
      v10 = 4294966293;
    }
  }
  if (a8 && v9)
    *a8 = 0;
  return v10;
}

uint64_t AVE_PixelFmt_CheckSupportedType(int a1, uint64_t a2, int a3, int a4, int a5)
{
  int NumberOfTypes;
  int *v11;
  int *v12;
  uint64_t SupportedList;
  uint64_t v14;
  int *v15;
  int v16;
  int v18;

  NumberOfTypes = AVE_PixelFmt_GetNumberOfTypes();
  v11 = (int *)malloc_type_malloc(4 * NumberOfTypes, 0x100004052888210uLL);
  if (!v11)
    return 4294966293;
  v12 = v11;
  v18 = NumberOfTypes;
  SupportedList = AVE_PixelFmt_GetSupportedList(a1, a2, a3, a4, (uint64_t)v11, &v18);
  if (!(_DWORD)SupportedList)
  {
    v14 = v18;
    if (v18 < 1)
    {
LABEL_7:
      SupportedList = 4294966295;
    }
    else
    {
      v15 = v12;
      while (1)
      {
        v16 = *v15++;
        if (v16 == a5)
          break;
        if (!--v14)
          goto LABEL_7;
      }
      SupportedList = 0;
    }
  }
  free(v12);
  return SupportedList;
}

uint64_t AVE_PixelFmt_Check(const unsigned int *a1, int a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a2 < 1)
    return 4294966295;
  v3 = a2;
  while (1)
  {
    v4 = *a1++;
    if (v4 == a3)
      break;
    if (!--v3)
      return 4294966295;
  }
  return 0;
}

uint64_t AVE_VCP_Ref_RetrieveArray(CFArrayRef theArray, int *a2, int *a3)
{
  int Count;
  int v7;
  int v8;
  CFIndex v9;
  uint64_t v10;
  int *v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  uint64_t result;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v22;
  const char *v23;
  const char *v24;

  if (theArray && a2 && a3 && *a3 > 0)
  {
    Count = CFArrayGetCount(theArray);
    v7 = *a3;
    if (Count < *a3)
      v7 = Count;
    if (v7 >= 4)
      v8 = 4;
    else
      v8 = v7;
    if (v7 < 1)
    {
LABEL_17:
      result = 0;
      *a3 = v8;
    }
    else
    {
      v9 = 0;
      if (v8 <= 1)
        v10 = 1;
      else
        v10 = v8;
      v11 = a2;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
        if (!ValueAtIndex)
          break;
        v13 = ValueAtIndex;
        AVE_CFDict_GetSInt32(ValueAtIndex, CFSTR("ReferenceFrameNumDriver"), v11);
        AVE_CFDict_GetSInt32(v13, CFSTR("ReferenceRVRAIndex"), v11 + 1);
        ++v9;
        v11 += 2;
        if (v10 == v9)
          goto LABEL_17;
      }
      if (AVE_Log_CheckLevel(0xE1u, 4))
      {
        v19 = AVE_Log_CheckConsole(0xE1u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p\n", CurrTime, 225, LevelStr, "AVE_VCP_Ref_RetrieveArray", 36, "pDict != __null", theArray, a2, a3);
          v22 = AVE_GetCurrTime();
          v24 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p", v22, 225, v24);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get data %p %p %p", CurrTime, 225, LevelStr);
        }
      }
      return 4294966288;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      v15 = AVE_Log_CheckConsole(0xE1u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p\n", v16, 225, v17, "AVE_VCP_Ref_RetrieveArray", 25, "pArray != __null && pInfo != __null && pNum != __null && *pNum > 0", theArray, a2, a3);
        v18 = AVE_GetCurrTime();
        v23 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v18, 225, v23);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %p", v16, 225, v17);
      }
    }
    return 4294966295;
  }
  return result;
}

uint64_t AVE_VCP_Ref_MakeArray(char *a1, int a2, __CFArray *a3)
{
  uint64_t v6;
  uint64_t v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v20;
  const char *v21;
  const char *v22;

  if (a1 && a2 >= 1 && a3)
  {
    v6 = 0;
    v7 = 8 * a2;
    v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    while (1)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, v8, v9);
      if (!Mutable)
        break;
      v11 = Mutable;
      AVE_CFDict_AddSInt32(CFSTR("ReferenceFrameNumDriver"), *(_DWORD *)&a1[v6], Mutable);
      AVE_CFDict_AddSInt32(CFSTR("ReferenceRVRAIndex"), *(_DWORD *)&a1[v6 + 4], v11);
      CFArrayAppendValue(a3, v11);
      CFRelease(v11);
      v6 += 8;
      if (v7 == v6)
        return 0;
    }
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      v17 = AVE_Log_CheckConsole(0xE1u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p\n", CurrTime, 225, LevelStr, "AVE_VCP_Ref_MakeArray", 73, "pDict != __null", a1, a2, a3);
        v20 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", v20, 225, v22);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %d %p", CurrTime, 225, LevelStr);
      }
    }
    return 4294966293;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE1u, 4))
    {
      v13 = AVE_Log_CheckConsole(0xE1u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p\n", v14, 225, v15, "AVE_VCP_Ref_MakeArray", 65, "pInfo != __null && iNum > 0 && pArray != __null", a1, a2, a3);
        v16 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v16, 225, v21);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %d %p", v14, 225, v15);
      }
    }
    return 4294966295;
  }
}

pthread_mutex_t *AVE_Mutex_Create(void)
{
  pthread_mutex_t *v0;
  pthread_mutex_t *v1;

  v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->__opaque[24] = 0u;
    *(_OWORD *)&v0->__opaque[40] = 0u;
    *(_OWORD *)&v0->__sig = 0u;
    *(_OWORD *)&v0->__opaque[8] = 0u;
    if (pthread_mutex_init(v0, 0))
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t AVE_Mutex_Destroy(pthread_mutex_t *a1)
{
  uint64_t v2;

  if (!a1)
    return 4294966295;
  if (pthread_mutex_destroy(a1))
    v2 = 4294966296;
  else
    v2 = 0;
  free(a1);
  return v2;
}

uint64_t AVE_Mutex_Lock(pthread_mutex_t *a1)
{
  if (!a1)
    return 4294966295;
  if (pthread_mutex_lock(a1))
    return 4294966296;
  return 0;
}

uint64_t AVE_Mutex_Unlock(pthread_mutex_t *a1)
{
  if (!a1)
    return 4294966295;
  if (pthread_mutex_unlock(a1))
    return 4294966296;
  return 0;
}

uint64_t AVE_SNPrintf(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  result = vsnprintf(a1, a2, a3, &a9);
  if (a1)
  {
    if ((int)result >= a2)
    {
      result = a2 - 1;
      a1[result] = 0;
    }
  }
  return result;
}

char *AVE_StrNCpy(char *a1, const char *a2, int a3)
{
  char *result;

  result = strncpy(a1, a2, a3);
  result[a3 - 1] = 0;
  return result;
}

void AVE_SyntaxWriter::AVE_SyntaxWriter(AVE_SyntaxWriter *this)
{
  *(_QWORD *)this = &off_1E692E320;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_BYTE *)this + 4136) = 1;
  *(_OWORD *)((char *)this + 8) = xmmword_1B56363D0;
  *((_DWORD *)this + 6) = 0xFFFF;
}

void AVE_SyntaxWriter::~AVE_SyntaxWriter(AVE_SyntaxWriter *this)
{
  JUMPOUT(0x1B5E4D1C0);
}

uint64_t AVE_SyntaxWriter::WriteBit(AVE_SyntaxWriter *this, char a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 6);
  v3 = a2 & 1 | (2 * v2);
  *((_DWORD *)this + 6) = v3;
  v4 = *((_DWORD *)this + 2) + 1;
  *((_DWORD *)this + 2) = v4;
  if (v4 != 8)
    return 0;
  v5 = v2 & 0x7FFFFE;
  if (*((_BYTE *)this + 4136))
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *((int *)this + 3);
    if ((int)v7 >= *((_DWORD *)this + 5))
      return 4294966277;
    v8 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 3) = v7 + 1;
    *(_BYTE *)(v8 + v7) = 3;
    v3 = *((_DWORD *)this + 6) | 0x300;
    *((_DWORD *)this + 6) = v3;
    *((_DWORD *)this + 4) += 8;
  }
  v9 = *((int *)this + 3);
  if ((int)v9 >= *((_DWORD *)this + 5))
    return 4294966277;
  v10 = 0;
  v11 = *((_QWORD *)this + 4);
  *((_DWORD *)this + 3) = v9 + 1;
  *(_BYTE *)(v11 + v9) = v3;
  *((_DWORD *)this + 2) = 0;
  return v10;
}

uint64_t AVE_SyntaxWriter::WriteBits(AVE_SyntaxWriter *this, unsigned int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v3 = *((_DWORD *)this + 2);
  while (1)
  {
    v4 = 8 - v3;
    if (a3 < 8 - v3)
      v4 = a3;
    v3 += v4;
    *((_DWORD *)this + 2) = v3;
    a3 -= v4;
    v5 = (a2 >> a3) & ~(-1 << v4) | (*((_DWORD *)this + 6) << v4);
    *((_DWORD *)this + 6) = v5;
    if (v3 != 8)
      goto LABEL_12;
    if (*((_BYTE *)this + 4136) && (v5 & 0xFFFFFC) == 0)
    {
      v6 = *((int *)this + 3);
      if ((int)v6 >= *((_DWORD *)this + 5))
        return 4294966277;
      v7 = *((_QWORD *)this + 4);
      *((_DWORD *)this + 3) = v6 + 1;
      *(_BYTE *)(v7 + v6) = 3;
      v5 = *((_DWORD *)this + 6) | 0x300;
      *((_DWORD *)this + 6) = v5;
      *((_DWORD *)this + 4) += 8;
    }
    v8 = *((int *)this + 3);
    if ((int)v8 >= *((_DWORD *)this + 5))
      return 4294966277;
    v3 = 0;
    v9 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 3) = v8 + 1;
    *(_BYTE *)(v9 + v8) = v5;
    *((_DWORD *)this + 2) = 0;
LABEL_12:
    if (!a3)
      return 0;
  }
}

uint64_t AVE_SyntaxWriter::WriteI(AVE_SyntaxWriter *this, int a2, int a3)
{
  if (a2 < 0)
    a2 = -a2 | 0x80000000;
  return AVE_SyntaxWriter::WriteBits(this, a2, a3);
}

uint64_t AVE_SyntaxWriter::WriteUE(AVE_SyntaxWriter *this, int a2)
{
  unsigned int v2;

  v2 = __clz(a2 + 1);
  return AVE_SyntaxWriter::WriteBits(this, (a2 + 1 - (0x80000000 >> v2)) | (0x80000000 >> v2), 63 - 2 * v2);
}

uint64_t AVE_SyntaxWriter::AlignToByte(AVE_SyntaxWriter *this)
{
  uint64_t result;
  int v3;

  result = AVE_SyntaxWriter::WriteBit(this, 1);
  if (!(_DWORD)result)
  {
    v3 = *((_DWORD *)this + 2);
    if (v3)
      return AVE_SyntaxWriter::WriteBits(this, 0, 8 - v3);
    else
      return 0;
  }
  return result;
}

double AVE_Time_Conv(int a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  v2 = a1;
  if ((a1 & 0x80000000) == 0)
  {
    if (a2)
    {
      v3 = *(_DWORD *)(a2 + 8);
      if (v3 >= 1)
      {
        if (!a1)
          v2 = 14400000;
        result = (double)v2 * (double)*(uint64_t *)a2 / (double)v3;
        *(_QWORD *)a2 = (uint64_t)result;
        *(_DWORD *)(a2 + 8) = v2;
      }
    }
  }
  return result;
}

uint64_t AVE_Time_Gen(int a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = 4294966296;
  if (a1 && a2)
  {
    if (14400000 % a1)
      v3 = a1;
    else
      v3 = 14400000;
    v4 = *(_DWORD *)(a2 + 8);
    if (v4)
      v5 = (uint64_t)((double)v3 * (double)(*(_QWORD *)a2 + v4 / a1) / (double)v4);
    else
      v5 = 0;
    v2 = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v3;
  }
  return v2;
}

uint64_t AVE_ComposeFilePath(const char *a1, const char *a2, const char *a3, char *a4, int a5)
{
  tm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  time_t v16;
  char v17[16];
  _BYTE v18[29];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v16 = 0;
  if (!a4)
    return 4294966295;
  *a4 = 0;
  setlocale(0, "");
  time(&v16);
  v8 = localtime(&v16);
  strftime(v17, 0x2DuLL, "%Y-%m-%d_%H-%M-%S", v8);
  v14 = "/var/mobile/Media/DCIM/";
  if (a1)
    LOBYTE(v14) = (_BYTE)a1;
  AVE_SNPrintf(a4, a5, "%s%s%s%s%s", v9, v10, v11, v12, v13, (char)v14);
  return 0;
}

uint64_t AVE_RetCode2OSStatus(uint64_t result)
{
  switch(result)
  {
    case 0xFFFFFC01:
    case 0xFFFFFC02:
    case 0xFFFFFC03:
    case 0xFFFFFC04:
    case 0xFFFFFC05:
    case 0xFFFFFC06:
    case 0xFFFFFC07:
    case 0xFFFFFC08:
    case 0xFFFFFC09:
    case 0xFFFFFC0A:
    case 0xFFFFFC0B:
    case 0xFFFFFC0C:
    case 0xFFFFFC0D:
    case 0xFFFFFC0E:
    case 0xFFFFFC0F:
    case 0xFFFFFC10:
    case 0xFFFFFC11:
    case 0xFFFFFC12:
    case 0xFFFFFC13:
    case 0xFFFFFC14:
    case 0xFFFFFC16:
    case 0xFFFFFC18:
      goto LABEL_2;
    case 0xFFFFFC15:
      result = 4294954392;
      break;
    case 0xFFFFFC17:
      result = 4294954394;
      break;
    default:
      if ((_DWORD)result == -2001)
      {
        result = 4294947942;
      }
      else if ((_DWORD)result)
      {
LABEL_2:
        result = 4294949605;
      }
      break;
  }
  return result;
}

uint64_t AVE_GetTemporayPath(char *a1, int a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (char)-[NSString UTF8String](NSTemporaryDirectory(), "UTF8String");
  return AVE_SNPrintf(a1, a2, "%s", v5, v6, v7, v8, v9, v4);
}

void AVE_DAL::AVE_DAL(AVE_DAL *this)
{
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
}

uint64_t AVE_DAL::Uninit(AVE_DAL *this)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  AVE_BlkPool *v5;
  AVE_USL_Surface *v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  int v9;
  __uint64_t v10;
  const char *v11;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v2 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", CurrTime, 36, LevelStr, "AVE_DAL", "Uninit", this, *(_QWORD *)this);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", CurrTime);
  }
  v5 = (AVE_BlkPool *)*((_QWORD *)this + 4);
  if (v5)
  {
    AVE_BlkPool::~AVE_BlkPool(v5);
    MEMORY[0x1B5E4D1C0]();
    *((_QWORD *)this + 4) = 0;
  }
  v6 = (AVE_USL_Surface *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = AVE_USL_DestroySurface(v6);
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = (pthread_mutex_t *)*((_QWORD *)this + 1);
  if (v8)
  {
    v7 = AVE_Mutex_Destroy(v8);
    *((_QWORD *)this + 1) = 0;
  }
  *((_QWORD *)this + 2) = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v9 = AVE_Log_CheckConsole(0x24u);
    v10 = AVE_GetCurrTime();
    v11 = AVE_Log_GetLevelStr(6);
    if (v9)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v10, 36, v11, "AVE_DAL", "Uninit", this, *(_QWORD *)this, v7);
      v10 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v10, 36);
  }
  return v7;
}

void AVE_DAL::~AVE_DAL(AVE_DAL *this)
{
  AVE_DAL::Uninit(this);
}

uint64_t AVE_DAL::Init(AVE_DAL *this, int a2, int a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  pthread_mutex_t *v9;
  pthread_mutex_t *v10;
  char **SurfaceCfg;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __uint64_t v15;
  const char *v16;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  AVE_BlkPool *v25;
  __IOSurface *Addr;
  int Size;
  int8x8_t v28;
  int v29;
  const char *v30;
  __IOSurface *v31;
  int v32;
  int v33;
  __uint64_t v34;
  const char *v35;
  __uint64_t v36;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  __uint64_t v43;
  AVE_USL_Surface *v44;

  v44 = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d\n", CurrTime, 36, LevelStr, "AVE_DAL", "Init", this, *(_QWORD *)this, a2, a3);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d", CurrTime, 36);
  }
  if (a2 < 1 || a3 <= 0)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v18 = AVE_Log_CheckConsole(0x24u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d\n", v19, 36, v20, "AVE_DAL", "Init", 87, "num > 0 && size > 0", this, *(_QWORD *)this, a2, a3);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d", v19, 36, v20, "AVE_DAL");
    }
    goto LABEL_28;
  }
  v9 = AVE_Mutex_Create();
  if (!v9)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v21 = AVE_Log_CheckConsole(0x24u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d\n", v22, 36, v23, "AVE_DAL", "Init", 92, "pMutex != __null", this, *(_QWORD *)this, a2, a3);
        v24 = AVE_GetCurrTime();
        v39 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v24, 36, v39, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create mutex %p %lld %d %d", v22, 36, v23, "AVE_DAL");
      }
    }
LABEL_28:
    v10 = 0;
    v13 = 4294966295;
    goto LABEL_29;
  }
  v10 = v9;
  SurfaceCfg = AVE_GetSurfaceCfg(3);
  v12 = AVE_USL_CreateSurface(0, a3 * a2, (__IOSurface **)SurfaceCfg[1], &v44);
  if ((_DWORD)v12)
  {
    v13 = v12;
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v14 = AVE_Log_CheckConsole(0x24u);
      v15 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d\n", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0", this, *(_QWORD *)this, *SurfaceCfg, SurfaceCfg[1], a2, a3, v13);
        v17 = AVE_GetCurrTime();
        v38 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v17, 36, v38, "AVE_DAL", "Init", 99, "ret == 0");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create surface %p %lld %s %llx %d %d %d", v15, 36, v16, "AVE_DAL", "Init", 99, "ret == 0");
      }
    }
  }
  else
  {
    v25 = (AVE_BlkPool *)operator new();
    AVE_BlkPool::AVE_BlkPool(v25);
    Addr = AVE_USL_Surface::GetAddr(v44, 0);
    Size = AVE_USL_Surface::GetSize(v44);
    v13 = AVE_BlkPool::CreateWithMem(v25, 1, (uint64_t)Addr, Size, a2, a3, 0, v28);
    if (!(_DWORD)v13)
    {
      *((_QWORD *)this + 1) = v10;
      *((_DWORD *)this + 4) = a2;
      *((_DWORD *)this + 5) = a3;
      *((_QWORD *)this + 3) = v44;
      *((_QWORD *)this + 4) = v25;
      goto LABEL_33;
    }
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v29 = AVE_Log_CheckConsole(0x24u);
      v43 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      v41 = *(_QWORD *)this;
      v42 = v30;
      v31 = AVE_USL_Surface::GetAddr(v44, 0);
      v32 = AVE_USL_Surface::GetSize(v44);
      if (v29)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to create UC info pool %p %lld %p %d %d %d %d\n", v43, 36, v42, "AVE_DAL", "Init", 110, "ret == 0", this, v41, v31, v32, a2, a3, v13);
        v43 = AVE_GetCurrTime();
        v42 = AVE_Log_GetLevelStr(4);
        AVE_USL_Surface::GetAddr(v44, 0);
        AVE_USL_Surface::GetSize(v44);
      }
      syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC info pool %p %lld %p %d %d %d %d", v43, 36, v42, "AVE_DAL", "Init", 110);
    }
    AVE_BlkPool::~AVE_BlkPool(v25);
    MEMORY[0x1B5E4D1C0]();
  }
LABEL_29:
  if (v44)
  {
    AVE_USL_DestroySurface(v44);
    v44 = 0;
  }
  if (v10)
    AVE_Mutex_Destroy(v10);
LABEL_33:
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v33 = AVE_Log_CheckConsole(0x24u);
    v34 = AVE_GetCurrTime();
    v35 = AVE_Log_GetLevelStr(6);
    if (v33)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d\n", v34, 36, v35, "AVE_DAL", "Init", this, *(_QWORD *)this, a2, a3, v13);
      v36 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v36, 36, v40);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d", v34, 36, v35);
    }
  }
  return v13;
}

void sub_1B55C75DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E4D1C0](v1, 0x10A0C40FF6A6CB6);
  _Unwind_Resume(a1);
}

uint64_t AVE_DAL::Alloc(AVE_DAL *this, int a2, unint64_t *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  int v28;

  v28 = a2;
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Alloc", this, *(_QWORD *)this, a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", CurrTime, 36, LevelStr);
    }
  }
  if (a2 >= 1 && a3 && *((_DWORD *)this + 5) >= a2)
  {
    *a3 = 0;
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    v10 = AVE_BlkPool::Alloc(*((AVE_BlkPool **)this + 4), a3, &v28);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d\n", v12, 36, v13, "AVE_DAL", "Alloc", 210, "ret == 0", this, *(_QWORD *)this, a3, v28, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v14, 36, v25, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to allocate memory from UC info pool %p %lld %p %d %d", v12, 36, v13, "AVE_DAL", "Alloc");
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p\n", v16, 36, v17, "AVE_DAL", "Alloc", 202, "0 < size && size <= m_iSize && pAddr != __null", this, *(_QWORD *)this, *((_DWORD *)this + 5), a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v18, 36, v26, "AVE_DAL", "Alloc");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %d %p", v16, 36, v17, "AVE_DAL", "Alloc");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x5Du, 8))
  {
    v19 = AVE_Log_CheckConsole(0x5Du);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 93, v21, "AVE_DAL", "Alloc", this, *(_QWORD *)this, v28, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 93, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 93, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::Free(AVE_DAL *this, const void *a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;

  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v4 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Free", this, *(_QWORD *)this, a2);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(8);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", CurrTime, 36);
  }
  if (a2)
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    v7 = AVE_BlkPool::Free(*((pthread_mutex_t ***)this + 4), (unint64_t)a2);
    if ((_DWORD)v7 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v8 = AVE_Log_CheckConsole(0x24u);
      v9 = AVE_GetCurrTime();
      v10 = AVE_Log_GetLevelStr(4);
      if (v8)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d\n", v9, 36, v10, "AVE_DAL", "Free", 245, "ret == 0", this, *(_QWORD *)this, a2, v7);
        v11 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v11, 36, v21, "AVE_DAL", "Free");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to free memory to UC info pool %p %lld %p %d", v9, 36, v10, "AVE_DAL", "Free");
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x24u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p\n", v13, 36, v14, "AVE_DAL", "Free", 238, "addr != 0", this, *(_QWORD *)this, 0);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p", v13, 36, v14, "AVE_DAL");
      }
    }
    v7 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v16 = AVE_Log_CheckConsole(0x24u);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(8);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v17, 36, v18, "AVE_DAL", "Free", this, *(_QWORD *)this, a2, v7);
      v19 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v19, 36, v23);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v17, 36, v18);
    }
  }
  return v7;
}

uint64_t AVE_DAL::Idx2Addr(AVE_DAL *this, int a2, unint64_t *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Idx2Addr", this, *(_QWORD *)this, a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %p", CurrTime, 36, LevelStr);
    }
  }
  if (a2 < 0 || !a3)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p\n", v16, 36, v17, "AVE_DAL", "Idx2Addr", 277, "idx >= 0 && pAddr != __null", this, *(_QWORD *)this, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v18, 36, v26, "AVE_DAL", "Idx2Addr");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %d %p", v16, 36, v17, "AVE_DAL", "Idx2Addr");
      }
    }
    v10 = 4294966295;
  }
  else
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    v10 = AVE_BlkPool::Idx2Addr(*((pthread_mutex_t ***)this + 4), a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d\n", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284, "ret == 0", this, *(_QWORD *)this, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v14, 36, v25, "AVE_DAL", "Idx2Addr", 284);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert index in UC info pool %p %lld %d %p %d", v12, 36, v13, "AVE_DAL", "Idx2Addr", 284);
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v20, 36, v21, "AVE_DAL", "Idx2Addr", this, *(_QWORD *)this, a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::Addr2Idx(AVE_DAL *this, const void *a2, int *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "Addr2Idx", this, *(_QWORD *)this, a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 36, v24);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", CurrTime, 36, LevelStr);
    }
  }
  if (a3)
  {
    AVE_Mutex_Lock(*((pthread_mutex_t **)this + 1));
    v10 = AVE_BlkPool::Addr2Idx(*((pthread_mutex_t ***)this + 4), (unint64_t)a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323, "ret == 0", this, *(_QWORD *)this, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "Addr2Idx", 323);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to convert address in UC info pool %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "Addr2Idx", 323);
      }
    }
    AVE_Mutex_Unlock(*((pthread_mutex_t **)this + 1));
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "Addr2Idx", 316, "pIdx != __null", this, *(_QWORD *)this, a2, 0);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v18, 36, v26, "AVE_DAL", "Addr2Idx");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameters %p %lld %p %p", v16, 36, v17, "AVE_DAL", "Addr2Idx");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v20, 36, v21, "AVE_DAL", "Addr2Idx", this, *(_QWORD *)this, a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 36, v27, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v20, 36, v21, "AVE_DAL");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCCreate(_QWORD *a1, uint32_t a2)
{
  int v4;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v7;
  int v8;
  __uint64_t v9;
  const char *v10;
  __uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  const char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;

  v24 = 0;
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v4 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v4)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCCreate", a1, *a1, a2);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d", CurrTime, 36);
  }
  if (a2 - 1 >= 4)
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v12 = AVE_Log_CheckConsole(0x24u);
      v13 = AVE_GetCurrTime();
      v14 = AVE_Log_GetLevelStr(4);
      if (v12)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d\n", v13, 36, v14, "AVE_DAL", "UCCreate", 388, "AVE_ClientType_None < type && type < AVE_ClientType_Max", a1, *a1, a2);
        v15 = AVE_GetCurrTime();
        v22 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v15, 36, v22, "AVE_DAL");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %d", v13, 36, v14, "AVE_DAL");
      }
    }
    v7 = 4294966295;
  }
  else
  {
    v7 = AVE_UC_Create(a2, &v24);
    if ((_DWORD)v7)
    {
      if (AVE_Log_CheckLevel(0x24u, 4))
      {
        v8 = AVE_Log_CheckConsole(0x24u);
        v9 = AVE_GetCurrTime();
        v10 = AVE_Log_GetLevelStr(4);
        if (v8)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d\n", v9, 36, v10, "AVE_DAL", "UCCreate", 392, "ret == 0", a1, *a1, a2, v7);
          v11 = AVE_GetCurrTime();
          v21 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v11, 36, v21, "AVE_DAL");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create UC %p %lld %d %d", v9, 36, v10, "AVE_DAL");
        }
      }
    }
    else
    {
      a1[5] = v24;
    }
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v16 = AVE_Log_CheckConsole(0x24u);
    v17 = AVE_GetCurrTime();
    v18 = AVE_Log_GetLevelStr(6);
    if (v16)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d\n", v17, 36, v18, "AVE_DAL", "UCCreate", a1, *a1, a2, (const void *)a1[5], v7);
      v19 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v19, 36, v23, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %p %d", v17, 36, v18, "AVE_DAL");
    }
  }
  return v7;
}

uint64_t AVE_DAL::UCDestroy(AVE_DAL *this)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  void *v5;
  uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  __uint64_t v10;
  const char *v12;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v2 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCDestroy", this, *(_QWORD *)this, *((const void **)this + 5));
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p", CurrTime, 36);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = AVE_UC_Destroy(v5);
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    v6 = 0;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v7 = AVE_Log_CheckConsole(0x24u);
    v8 = AVE_GetCurrTime();
    v9 = AVE_Log_GetLevelStr(6);
    if (v7)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d\n", v8, 36, v9, "AVE_DAL", "UCDestroy", this, *(_QWORD *)this, *((const void **)this + 5), v6);
      v10 = AVE_GetCurrTime();
      v12 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v10, 36, v12);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d", v8, 36, v9);
    }
  }
  return v6;
}

uint64_t AVE_DAL::UCOpen(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  int v16;
  __uint64_t v17;
  const char *v18;
  __uint64_t v19;
  int v20;
  __uint64_t v21;
  const char *v22;
  __uint64_t v23;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3);
      v9 = AVE_GetCurrTime();
      v25 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v25, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    AVE_StrNCpy((char *)(a2 + 40), "803.16.2", 16);
    *(_DWORD *)(a2 + 56) = AVE_USL_Surface::GetID((AVE_USL_Surface *)a1[3]);
    v10 = AVE_DW_Get();
    memcpy((void *)(a2 + 64), v10, 0x588uLL);
    *(_QWORD *)(a2 + 1480) = 0;
    AVE_Log_Load((_QWORD *)(a2 + 1480), a2 + 1488);
    v11 = AVE_UC_Open((const void *)a1[5], (const void *)a2, a3);
    if ((_DWORD)v11)
    {
      if (AVE_Log_CheckLevel(0x24u, 4))
      {
        v12 = AVE_Log_CheckConsole(0x24u);
        v13 = AVE_GetCurrTime();
        v14 = AVE_Log_GetLevelStr(4);
        if (v12)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d\n", v13, 36, v14, "AVE_DAL", "UCOpen", 455, "ret == 0", a1, *a1, (const void *)a2, a3, v11);
          v15 = AVE_GetCurrTime();
          v26 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v15, 36, v26, "AVE_DAL", "UCOpen", 455);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to open client %p %lld %p %p %d", v13, 36, v14, "AVE_DAL", "UCOpen", 455);
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 56) = 0;
      *a1 = *a3;
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v16 = AVE_Log_CheckConsole(0x24u);
      v17 = AVE_GetCurrTime();
      v18 = AVE_Log_GetLevelStr(4);
      if (v16)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v17, 36, v18, "AVE_DAL", "UCOpen", 443, "pIn != __null && pOut != __null", a1, *a1, (const void *)a2, a3);
        v19 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v19, 36, v27, "AVE_DAL", "UCOpen");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v17, 36, v18, "AVE_DAL", "UCOpen");
      }
    }
    v11 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v20 = AVE_Log_CheckConsole(0x24u);
    v21 = AVE_GetCurrTime();
    v22 = AVE_Log_GetLevelStr(6);
    if (v20)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v21, 36, v22, "AVE_DAL", "UCOpen", a1, *a1, (const void *)a1[5], (const void *)a2, a3, v11);
      v23 = AVE_GetCurrTime();
      v28 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v23, 36, v28, "AVE_DAL", "UCOpen");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v21, 36, v22, "AVE_DAL", "UCOpen");
    }
  }
  return v11;
}

uint64_t AVE_DAL::UCClose(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Close(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCClose", 490, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCClose", 490);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to close client %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCClose", 490);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCClose", 486, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCClose");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCClose");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCClose", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCClose");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCClose");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCConfig(const void **a1, const void *a2, const void *a3, void *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v8 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4);
      v11 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", v11, 36, v26, "AVE_DAL", "UCConfig");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL", "UCConfig");
    }
  }
  if (a2 && a3 && a4)
  {
    v12 = AVE_UC_Config(a1[5], a2, a3, a4);
    if ((_DWORD)v12 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v13 = AVE_Log_CheckConsole(0x24u);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(4);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d\n", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1, *a1, a1[5], a2, a3, a4, v12);
        v16 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v16, 36, v27, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to config %p %lld %p %p %p %p %d", v14, 36, v15, "AVE_DAL", "UCConfig", 525, "ret == 0", a1);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v17 = AVE_Log_CheckConsole(0x24u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p\n", v18, 36, v19, "AVE_DAL", "UCConfig", 520, "pRecvPort != __null && pIn != __null && pOut != __null", a1, *a1, a2, a3, a4);
        v20 = AVE_GetCurrTime();
        v28 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v20, 36, v28, "AVE_DAL", "UCConfig", 520);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p %p", v18, 36, v19, "AVE_DAL", "UCConfig", 520);
      }
    }
    v12 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v21 = AVE_Log_CheckConsole(0x24u);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(6);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d\n", v22, 36, v23, "AVE_DAL", "UCConfig", a1, *a1, a1[5], a2, a3, a4, v12);
      v24 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v24, 36, v29, "AVE_DAL", "UCConfig", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %p %d", v22, 36, v23, "AVE_DAL", "UCConfig", a1);
    }
  }
  return v12;
}

uint64_t AVE_DAL::UCPrepare(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Prepare(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCPrepare", 557, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCPrepare", 557);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to prepare %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCPrepare", 557);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCPrepare", 553, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCPrepare");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCPrepare");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCPrepare", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCPrepare");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCPrepare");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCStart(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Start(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStart", 588, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStart", 588);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to start %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStart", 588);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStart", 584, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStart");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStart");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStart", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStart");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStart");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCStop(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Stop(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCStop", 619, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCStop", 619);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to stop %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCStop", 619);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCStop", 615, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCStop");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCStop");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCStop", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCStop");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCStop");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCProcess(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Process(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCProcess", 650, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCProcess", 650);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to process %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCProcess", 650);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCProcess", 646, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCProcess");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCProcess");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 8))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCProcess", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCProcess");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCProcess");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCComplete(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Complete(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCComplete", 681, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCComplete", 681);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to complete %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCComplete", 681);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCComplete", 677, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCComplete");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCComplete");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCComplete", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCComplete");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCComplete");
    }
  }
  return v10;
}

uint64_t AVE_DAL::UCReset(const void **a1, const void *a2, void *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t v10;
  int v11;
  __uint64_t v12;
  const char *v13;
  __uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;

  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v6 = AVE_Log_CheckConsole(0x24u);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p\n", CurrTime, 36, LevelStr, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3);
      v9 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", v9, 36, v24, "AVE_DAL");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p %p", CurrTime, 36, LevelStr, "AVE_DAL");
    }
  }
  if (a2 && a3)
  {
    v10 = AVE_UC_Reset(a1[5], a2, a3);
    if ((_DWORD)v10 && AVE_Log_CheckLevel(0x24u, 4))
    {
      v11 = AVE_Log_CheckConsole(0x24u);
      v12 = AVE_GetCurrTime();
      v13 = AVE_Log_GetLevelStr(4);
      if (v11)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d\n", v12, 36, v13, "AVE_DAL", "UCReset", 743, "ret == 0", a1, *a1, a2, a3, v10);
        v14 = AVE_GetCurrTime();
        v25 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v14, 36, v25, "AVE_DAL", "UCReset", 743);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to reset %p %lld %p %p %d", v12, 36, v13, "AVE_DAL", "UCReset", 743);
      }
    }
  }
  else
  {
    if (AVE_Log_CheckLevel(0x24u, 4))
    {
      v15 = AVE_Log_CheckConsole(0x24u);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(4);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p\n", v16, 36, v17, "AVE_DAL", "UCReset", 739, "pIn != __null && pOut != __null", a1, *a1, a2, a3);
        v18 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v18, 36, v26, "AVE_DAL", "UCReset");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | wrong parameter %p %lld %p %p", v16, 36, v17, "AVE_DAL", "UCReset");
      }
    }
    v10 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0x24u, 6))
  {
    v19 = AVE_Log_CheckConsole(0x24u);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(6);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d\n", v20, 36, v21, "AVE_DAL", "UCReset", a1, *a1, a1[5], a2, a3, v10);
      v22 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v22, 36, v27, "AVE_DAL", "UCReset");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %p %d", v20, 36, v21, "AVE_DAL", "UCReset");
    }
  }
  return v10;
}

__uint64_t AVE_GetCurrTime(void)
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) / 0x3E8;
}

uint64_t AVE_GetAbsTime(void)
{
  timespec v1;

  v1.tv_sec = 0;
  v1.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return (v1.tv_nsec + 1000000000 * v1.tv_sec) / 1000;
}

uint64_t AVE_RetCode2IOReturn(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (gsc_saAVE_CodeMap[v1] != a1)
  {
    v1 += 2;
    if (v1 == 52)
      return 3758097084;
  }
  return gsc_saAVE_CodeMap[v1 + 1];
}

uint64_t AVE_IOReturn2RetCode(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (gsc_saAVE_CodeMap[v1 + 1] != a1)
  {
    v1 += 2;
    if (v1 == 52)
      return 4294966296;
  }
  return gsc_saAVE_CodeMap[v1];
}

uint64_t AVE_VUI_AddAllTransCharToCFArray(CFMutableArrayRef theArray)
{
  uint64_t i;

  for (i = 0; i != 8; ++i)
    CFArrayAppendValue(theArray, (const void *)gsc_psaAVE_TransferCharacteristics_Supported[i]);
  CFArrayAppendValue(theArray, (const void *)*MEMORY[0x1E0CA8ED8]);
  return 0;
}

uint64_t AVE_VUI_AddAllColorPrimToCFDict(__CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v3;
  __CFArray *v4;
  BOOL v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  uint64_t i;
  uint64_t v14;
  const char *v16;

  if (a1)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = v3;
    if (Mutable)
      v5 = v3 == 0;
    else
      v5 = 1;
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        v6 = AVE_Log_CheckConsole(0xD2u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllColorPrimToCFDict", 161, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          v9 = AVE_GetCurrTime();
          v16 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v16);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      v14 = 4294966293;
      if (!Mutable)
        goto LABEL_22;
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDA08], (const void *)*MEMORY[0x1E0CEDA18]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9C8], (const void *)*MEMORY[0x1E0CED9D8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9E0], (const void *)*MEMORY[0x1E0C9AE40]);
      for (i = 0; i != 6; ++i)
        CFArrayAppendValue(v4, (const void *)gsc_psaAVE_ColorPrimaries_Supported[i]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9F0], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E0CECF48], Mutable);
      v14 = 0;
      if (!Mutable)
      {
LABEL_22:
        if (v4)
          CFRelease(v4);
        return v14;
      }
    }
    CFRelease(Mutable);
    goto LABEL_22;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    v10 = AVE_Log_CheckConsole(0xD2u);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllColorPrimToCFDict", 154, "pDict != __null", 0);
      v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllTransCharToCFDict(__CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v3;
  __CFArray *v4;
  BOOL v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v15;

  if (a1)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = v3;
    if (Mutable)
      v5 = v3 == 0;
    else
      v5 = 1;
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        v6 = AVE_Log_CheckConsole(0xD2u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllTransCharToCFDict", 209, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          v9 = AVE_GetCurrTime();
          v15 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v15);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      v13 = 4294966293;
      if (!Mutable)
        goto LABEL_19;
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDA08], (const void *)*MEMORY[0x1E0CEDA18]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9C8], (const void *)*MEMORY[0x1E0CED9D8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9E0], (const void *)*MEMORY[0x1E0C9AE40]);
      AVE_VUI_AddAllTransCharToCFArray(v4);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9F0], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E0CED238], Mutable);
      v13 = 0;
    }
    CFRelease(Mutable);
LABEL_19:
    if (v4)
      CFRelease(v4);
    return v13;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    v10 = AVE_Log_CheckConsole(0xD2u);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllTransCharToCFDict", 202, "pDict != __null", 0);
      v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllMatrixCoeffToCFDict(__CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v3;
  __CFArray *v4;
  BOOL v5;
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  uint64_t i;
  uint64_t v14;
  const char *v16;

  if (a1)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = v3;
    if (Mutable)
      v5 = v3 == 0;
    else
      v5 = 1;
    if (v5)
    {
      if (AVE_Log_CheckLevel(0xD2u, 4))
      {
        v6 = AVE_Log_CheckConsole(0xD2u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v6)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllMatrixCoeffToCFDict", 256, "pTmpDict != __null && pTmpArray != __null", a1, Mutable, v4);
          v9 = AVE_GetCurrTime();
          v16 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", v9, 210, v16);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CF %p %p %p", CurrTime, 210, LevelStr);
        }
      }
      v14 = 4294966293;
      if (!Mutable)
        goto LABEL_22;
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDA08], (const void *)*MEMORY[0x1E0CEDA18]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9C8], (const void *)*MEMORY[0x1E0CED9D8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9E0], (const void *)*MEMORY[0x1E0C9AE40]);
      for (i = 0; i != 6; ++i)
        CFArrayAppendValue(v4, (const void *)gsc_psaAVE_MatrixCoefficients_Supported[i]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED9F0], v4);
      CFDictionarySetValue(a1, (const void *)*MEMORY[0x1E0CED290], Mutable);
      v14 = 0;
      if (!Mutable)
      {
LABEL_22:
        if (v4)
          CFRelease(v4);
        return v14;
      }
    }
    CFRelease(Mutable);
    goto LABEL_22;
  }
  if (AVE_Log_CheckLevel(0xD2u, 4))
  {
    v10 = AVE_Log_CheckConsole(0xD2u);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(4);
    if (v10)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v11, 210, v12, "AVE_VUI_AddAllMatrixCoeffToCFDict", 249, "pDict != __null", 0);
      v11 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(4);
    }
    syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v11);
  }
  return 4294966295;
}

uint64_t AVE_VUI_AddAllToCFDict(__CFDictionary *a1)
{
  int v2;
  int v3;
  int v5;
  __uint64_t CurrTime;
  const char *LevelStr;

  if (a1)
  {
    v2 = AVE_VUI_AddAllColorPrimToCFDict(a1);
    v3 = AVE_VUI_AddAllTransCharToCFDict(a1) + v2;
    return v3 + AVE_VUI_AddAllMatrixCoeffToCFDict(a1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xD2u, 4))
    {
      v5 = AVE_Log_CheckConsole(0xD2u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v5)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", CurrTime, 210, LevelStr, "AVE_VUI_AddAllToCFDict", 294, "pDict != __null", 0);
        CurrTime = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", CurrTime);
    }
    return 4294966295;
  }
}

void _GLOBAL__sub_I_AVE_USL_VUI_Helper_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = *MEMORY[0x1E0CA8D78];
  gsc_psaAVE_ColorPrimaries_Supported = *MEMORY[0x1E0CA8D88];
  unk_1ED52D930 = v0;
  v1 = *MEMORY[0x1E0CA8D80];
  qword_1ED52D938 = *MEMORY[0x1E0CA8DA0];
  unk_1ED52D940 = v1;
  v2 = *MEMORY[0x1E0CA8D70];
  qword_1ED52D948 = *MEMORY[0x1E0CA8D98];
  unk_1ED52D950 = v2;
  v3 = *MEMORY[0x1E0CA8EC0];
  gsc_psaAVE_TransferCharacteristics_Supported = *MEMORY[0x1E0CA8EB0];
  unk_1ED52D990 = v3;
  v4 = *MEMORY[0x1E0CA8EE0];
  qword_1ED52D998 = *MEMORY[0x1E0CA8EB8];
  unk_1ED52D9A0 = v4;
  v5 = *MEMORY[0x1E0CA8EC8];
  qword_1ED52D9A8 = *MEMORY[0x1E0CA8EA0];
  unk_1ED52D9B0 = v5;
  v6 = *MEMORY[0x1E0CA8EA8];
  qword_1ED52D9B8 = *MEMORY[0x1E0CA8ED0];
  unk_1ED52D9C0 = v6;
  v7 = *MEMORY[0x1E0CA8F18];
  gsc_psaAVE_MatrixCoefficients_Supported = *MEMORY[0x1E0CA8F20];
  unk_1ED52D960 = v7;
  v8 = *MEMORY[0x1E0CA8F30];
  qword_1ED52D968 = *MEMORY[0x1E0CA8F10];
  unk_1ED52D970 = v8;
  v9 = *MEMORY[0x1E0CA8F08];
  qword_1ED52D978 = *MEMORY[0x1E0CA8F00];
  unk_1ED52D980 = v9;
}

unsigned int *AVE_DevCap_FindSearchRangeMode(int a1, uint64_t a2, int a3, int a4)
{
  unsigned int *result;

  result = (unsigned int *)AVE_DevCap_FindSearchRange(a1, a2, a3);
  if (result)
    return AVE_DevCap_SearchRange_Find(result, a4);
  return result;
}

unsigned int *AVE_DevCap_FindPixelPerf(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unsigned int *result;

  result = (unsigned int *)AVE_DevCap_FindPerf(a1, a2, a3);
  if (result)
  {
    result = AVE_DevCap_Perf_Find(result, a4, a5, a6);
    if (result)
      return (unsigned int *)*((_QWORD *)result + 2);
  }
  return result;
}

uint64_t AVE_DRC_RetrieveMetaData(CFDictionaryRef theDict, BOOL *a2)
{
  int Bool;
  int v5;
  int SInt32;
  int v7;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  const char *v13;
  int v14;

  v14 = 0;
  if (theDict && a2)
  {
    Bool = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E0CED560], a2);
    v5 = AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E0CED580], a2 + 1) + Bool;
    SInt32 = AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED570], &v14);
    a2[2] = v14;
    v7 = v5 + SInt32 + AVE_CFDict_GetBool(theDict, (const __CFString *)*MEMORY[0x1E0CED568], a2 + 3);
    return v7 + AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED578], (int *)a2 + 1);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v9 = AVE_Log_CheckConsole(0xE2u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DRC_RetrieveMetaData", 25, "pDict != __null && pMetaData != __null", theDict, a2, 0);
        v12 = AVE_GetCurrTime();
        v13 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DRC_MakeMetaData(unsigned __int8 *a1, CFMutableDictionaryRef theDict)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v12;
  const char *v13;

  if (a1 && theDict)
  {
    v4 = AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E0CED560], *a1, theDict);
    v5 = AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E0CED580], a1[1], theDict) + v4;
    v6 = AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED570], (char)a1[2], theDict);
    v7 = v5 + v6 + AVE_CFDict_AddBool((const __CFString *)*MEMORY[0x1E0CED568], a1[3], theDict);
    return v7
         + AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED578], *((_DWORD *)a1 + 1), theDict);
  }
  else
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v9 = AVE_Log_CheckConsole(0xE2u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v9)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DRC_MakeMetaData", 60, "pMetaData != __null && pDict != __null", a1, theDict, 0);
        v12 = AVE_GetCurrTime();
        v13 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v12, 226, v13);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
}

uint64_t AVE_DPB_RetrieveSnapshotEntry(CFDictionaryRef theDict, void *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  uint64_t MetaData;
  int v13;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  __uint64_t v27;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  int v33;

  v33 = 0;
  if (theDict && a2)
  {
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED550], &v33);
    *(_DWORD *)a2 = v33;
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED520], &v33);
    *((_DWORD *)a2 + 1) = v33;
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED528], &v33);
    *((_DWORD *)a2 + 2) = v33;
    AVE_CFDict_GetSInt64(theDict, (const __CFString *)*MEMORY[0x1E0CED540], (uint64_t *)a2 + 2);
    AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED538], &v33);
    *((_DWORD *)a2 + 6) = v33;
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED530]);
    if (Value)
    {
      v5 = Value;
      v6 = (const __CFString *)*MEMORY[0x1E0CED518];
      AVE_CFDict_GetSInt32(Value, (const __CFString *)*MEMORY[0x1E0CED518], &v33);
      *((_DWORD *)a2 + 12) = v33;
      v7 = (const __CFString *)*MEMORY[0x1E0CED500];
      AVE_CFDict_GetSInt32(v5, (const __CFString *)*MEMORY[0x1E0CED500], &v33);
      *((_DWORD *)a2 + 14) = v33;
      v8 = (const __CFString *)*MEMORY[0x1E0CED508];
      AVE_CFDict_GetSInt32(v5, (const __CFString *)*MEMORY[0x1E0CED508], &v33);
      *((_DWORD *)a2 + 16) = v33;
      v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED548]);
      if (v9)
      {
        v10 = v9;
        AVE_CFDict_GetSInt32(v9, v6, &v33);
        *((_DWORD *)a2 + 13) = v33;
        AVE_CFDict_GetSInt32(v10, v7, &v33);
        *((_DWORD *)a2 + 15) = v33;
        AVE_CFDict_GetSInt32(v10, v8, &v33);
        *((_DWORD *)a2 + 17) = v33;
        v11 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED558]);
        MetaData = AVE_DRC_RetrieveMetaData(v11, (BOOL *)a2 + 72);
        if ((_DWORD)MetaData && AVE_Log_CheckLevel(0xE2u, 4))
        {
          v13 = AVE_Log_CheckConsole(0xE2u);
          CurrTime = AVE_GetCurrTime();
          LevelStr = AVE_Log_GetLevelStr(4);
          if (v13)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_RetrieveSnapshotEntry", 150, "ret == 0", theDict, a2, MetaData);
            v16 = AVE_GetCurrTime();
            v29 = AVE_Log_GetLevelStr(4);
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", v16, 226, v29);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve RC metadata %p %p %d", CurrTime, 226, LevelStr);
          }
        }
        return MetaData;
      }
      if (AVE_Log_CheckLevel(0xE2u, 4))
      {
        v24 = AVE_Log_CheckConsole(0xE2u);
        v25 = AVE_GetCurrTime();
        v26 = AVE_Log_GetLevelStr(4);
        if (v24)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d\n", v25, 226, v26, "AVE_DPB_RetrieveSnapshotEntry", 131, "pTmpDict != __null", theDict, a2, 0);
          v27 = AVE_GetCurrTime();
          v32 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v27, 226, v32);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get VRA reference buffer %p %p %d", v25, 226, v26);
        }
      }
    }
    else if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v21 = AVE_Log_CheckConsole(0xE2u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshotEntry", 113, "pTmpDict != __null", theDict, a2, 0);
        v22 = AVE_GetCurrTime();
        v31 = AVE_Log_GetLevelStr(4);
      }
      else
      {
        v31 = v23;
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get original reference buffer %p %p %d", v22, 226, v31);
    }
    return 4294966288;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    v17 = AVE_Log_CheckConsole(0xE2u);
    v18 = AVE_GetCurrTime();
    v19 = AVE_Log_GetLevelStr(4);
    if (v17)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v18, 226, v19, "AVE_DPB_RetrieveSnapshotEntry", 92, "pDict != __null && pEntry != __null", theDict, a2, 0);
      v20 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v20, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v18, 226, v19);
    }
  }
  return 4294966295;
}

uint64_t AVE_DPB_MakeSnapshotEntry(uint64_t a1, __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  uint64_t MetaData;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  __uint64_t v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  __uint64_t v27;
  const char *v29;
  const char *v30;
  const char *v31;

  if (a1 && a2)
  {
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED550], *(_DWORD *)a1, a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED520], *(_DWORD *)(a1 + 4), a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED528], *(_DWORD *)(a1 + 8), a2);
    AVE_CFDict_AddSInt64((const __CFString *)*MEMORY[0x1E0CED540], *(_QWORD *)(a1 + 16), a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED538], *(_DWORD *)(a1 + 24), a2);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      v6 = (const __CFString *)*MEMORY[0x1E0CED518];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED518], *(_DWORD *)(a1 + 48), Mutable);
      v7 = (const __CFString *)*MEMORY[0x1E0CED500];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED500], *(_DWORD *)(a1 + 56), v5);
      v8 = (const __CFString *)*MEMORY[0x1E0CED508];
      AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED508], *(_DWORD *)(a1 + 64), v5);
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CED530], v5);
      CFRelease(v5);
      v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v9)
      {
        v10 = v9;
        AVE_CFDict_AddSInt32(v6, *(_DWORD *)(a1 + 52), v9);
        AVE_CFDict_AddSInt32(v7, *(_DWORD *)(a1 + 60), v10);
        AVE_CFDict_AddSInt32(v8, *(_DWORD *)(a1 + 68), v10);
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CED548], v10);
        CFRelease(v10);
        v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v11)
        {
          v12 = v11;
          MetaData = AVE_DRC_MakeMetaData((unsigned __int8 *)(a1 + 72), v11);
          if ((_DWORD)MetaData)
          {
            if (AVE_Log_CheckLevel(0xE2u, 4))
            {
              v14 = AVE_Log_CheckConsole(0xE2u);
              CurrTime = AVE_GetCurrTime();
              LevelStr = AVE_Log_GetLevelStr(4);
              if (v14)
              {
                printf("%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshotEntry", 227, "ret == 0", (const void *)a1, a2, MetaData);
                v17 = AVE_GetCurrTime();
                v29 = AVE_Log_GetLevelStr(4);
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", v17, 226, v29);
              }
              else
              {
                syslog(3, "%lld %d AVE %s: %s:%d %s | fail to make DRC metadata %p %p %d", CurrTime, 226, LevelStr);
              }
            }
          }
          else
          {
            CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CED558], v12);
          }
          CFRelease(v12);
          return MetaData;
        }
        if (AVE_Log_CheckLevel(0xE2u, 4))
        {
          v26 = AVE_Log_CheckConsole(0xE2u);
          v23 = AVE_GetCurrTime();
          v24 = AVE_Log_GetLevelStr(4);
          if (v26)
          {
            printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 223, "pTmpDict != __null", (const void *)a1, a2, 0);
            goto LABEL_24;
          }
LABEL_30:
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v23, 226, v24);
        }
        return 4294966293;
      }
      if (!AVE_Log_CheckLevel(0xE2u, 4))
        return 4294966293;
      v25 = AVE_Log_CheckConsole(0xE2u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (!v25)
        goto LABEL_30;
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 206, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
    else
    {
      if (!AVE_Log_CheckLevel(0xE2u, 4))
        return 4294966293;
      v22 = AVE_Log_CheckConsole(0xE2u);
      v23 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(4);
      if (!v22)
        goto LABEL_30;
      printf("%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d\n", v23, 226, v24, "AVE_DPB_MakeSnapshotEntry", 189, "pTmpDict != __null", (const void *)a1, a2, 0);
    }
LABEL_24:
    v27 = AVE_GetCurrTime();
    v31 = AVE_Log_GetLevelStr(4);
    syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDict %p %p %d", v27, 226, v31);
    return 4294966293;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    v18 = AVE_Log_CheckConsole(0xE2u);
    v19 = AVE_GetCurrTime();
    v20 = AVE_Log_GetLevelStr(4);
    if (v18)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v19, 226, v20, "AVE_DPB_MakeSnapshotEntry", 170, "pEntry != __null && pDict != __null", (const void *)a1, a2, 0);
      v21 = AVE_GetCurrTime();
      v30 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v21, 226, v30);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v19, 226, v20);
    }
  }
  return 4294966295;
}

uint64_t AVE_DPB_RetrieveSnapshot(CFDictionaryRef theDict, char *a2)
{
  int v4;
  const __CFArray *Value;
  const __CFArray *v6;
  int Count;
  int v8;
  CFIndex v9;
  uint64_t v10;
  char *i;
  const __CFDictionary *ValueAtIndex;
  uint64_t SnapshotEntry;
  int v14;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  __uint64_t v29;
  const char *v30;
  __uint64_t v31;
  const char *v33;
  const char *v34;
  const char *v35;
  int v36;

  v36 = 0;
  if (!theDict || !a2)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v14 = AVE_Log_CheckConsole(0xE2u);
      CurrTime = AVE_GetCurrTime();
      LevelStr = AVE_Log_GetLevelStr(4);
      if (v14)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", CurrTime, 226, LevelStr, "AVE_DPB_RetrieveSnapshot", 261, "pDict != __null && pSnapshot != __null", theDict, a2, 0);
        v17 = AVE_GetCurrTime();
        v33 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v17, 226, v33);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", CurrTime, 226, LevelStr);
      }
    }
    return 4294966295;
  }
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED4D8], &v36);
  *((_DWORD *)a2 + 340) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED4E8], &v36);
  *((_DWORD *)a2 + 341) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED4E0], &v36);
  *((_DWORD *)a2 + 342) = v36;
  AVE_CFDict_GetSInt32(theDict, (const __CFString *)*MEMORY[0x1E0CED4F0], &v36);
  v4 = v36;
  *((_DWORD *)a2 + 343) = v36;
  if (v4 >= 17)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v18 = AVE_Log_CheckConsole(0xE2u);
      v19 = AVE_GetCurrTime();
      v20 = AVE_Log_GetLevelStr(4);
      if (v18)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d\n", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", *((_DWORD *)a2 + 343), 16);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference is out of range %d %d", v19, 226, v20, "AVE_DPB_RetrieveSnapshot", 274, "pSnapshot->num_ref_frame <= ((16) > (16) ? (16) : (16))", *((unsigned int *)a2 + 343), 16);
    }
    return 4294966296;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4F8]);
  if (!Value)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v21 = AVE_Log_CheckConsole(0xE2u);
      v22 = AVE_GetCurrTime();
      v23 = AVE_Log_GetLevelStr(4);
      if (v21)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d\n", v22, 226, v23, "AVE_DPB_RetrieveSnapshot", 278, "pTmpArray != __null", theDict, a2, 0);
        v24 = AVE_GetCurrTime();
        v34 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v24, 226, v34);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to get reference buffers %p %p %d", v22, 226, v23);
      }
    }
    return 4294966288;
  }
  v6 = Value;
  Count = CFArrayGetCount(Value);
  v8 = Count;
  if (Count > 17)
  {
    if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v25 = AVE_Log_CheckConsole(0xE2u);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(4);
      if (v25)
      {
        printf("%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d\n", v26, 226, v27, "AVE_DPB_RetrieveSnapshot", 284, "num <= (((16) > (16) ? (16) : (16)) + 1)", v8, 17);
        v26 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | number of reference buffer is out of range %d %d", v26);
    }
    return 4294966296;
  }
  if (Count < 1)
    return 0;
  v9 = 0;
  v10 = Count;
  for (i = a2; ; i += 80)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    SnapshotEntry = AVE_DPB_RetrieveSnapshotEntry(ValueAtIndex, i);
    if ((_DWORD)SnapshotEntry)
      break;
    if (v10 == ++v9)
      return SnapshotEntry;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    v28 = AVE_Log_CheckConsole(0xE2u);
    v29 = AVE_GetCurrTime();
    v30 = AVE_Log_GetLevelStr(4);
    if (v28)
    {
      printf("%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d\n", v29, 226, v30, "AVE_DPB_RetrieveSnapshot", 293, "ret == 0", theDict, a2, ValueAtIndex, v9, SnapshotEntry);
      v31 = AVE_GetCurrTime();
      v35 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v31, 226, v35, "AVE_DPB_RetrieveSnapshot");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | fail to retrieve one entry %p %p %p %d %d", v29, 226, v30, "AVE_DPB_RetrieveSnapshot");
    }
  }
  return SnapshotEntry;
}

uint64_t AVE_DPB_MakeSnapshot(int *a1, __CFDictionary *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  uint64_t v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  int *v11;
  uint64_t SnapshotEntry;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v24;
  const char *v26;
  const char *v27;
  const char *v28;

  if (a1 && a2)
  {
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED4D8], a1[340], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED4E8], a1[341], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED4E0], a1[342], a2);
    AVE_CFDict_AddSInt32((const __CFString *)*MEMORY[0x1E0CED4F0], a1[343], a2);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v5 = Mutable;
      if (a1[343] < 0)
      {
        SnapshotEntry = 0;
LABEL_17:
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E0CED4F8], v5);
        CFRelease(v5);
        return SnapshotEntry;
      }
      v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v6)
      {
        v7 = v6;
        v8 = 0;
        v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        v11 = a1;
        while (1)
        {
          SnapshotEntry = AVE_DPB_MakeSnapshotEntry((uint64_t)v11, v7);
          CFArrayAppendValue(v5, v7);
          CFRelease(v7);
          if (v8 >= a1[343])
            goto LABEL_17;
          ++v8;
          v7 = CFDictionaryCreateMutable(0, 0, v9, v10);
          v11 += 20;
          if (!v7)
            goto LABEL_21;
        }
      }
      LODWORD(v8) = 0;
      LODWORD(SnapshotEntry) = 0;
      v11 = a1;
LABEL_21:
      if (AVE_Log_CheckLevel(0xE2u, 4))
      {
        v21 = AVE_Log_CheckConsole(0xE2u);
        CurrTime = AVE_GetCurrTime();
        LevelStr = AVE_Log_GetLevelStr(4);
        if (v21)
        {
          printf("%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d\n", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshot", 339, "pTmpDict != __null", a1, a2, v11, v8, SnapshotEntry);
          v24 = AVE_GetCurrTime();
          v28 = AVE_Log_GetLevelStr(4);
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", v24, 226, v28, "AVE_DPB_MakeSnapshot");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFDictionary %p %p %p %d %d", CurrTime, 226, LevelStr, "AVE_DPB_MakeSnapshot");
        }
      }
      CFRelease(v5);
    }
    else if (AVE_Log_CheckLevel(0xE2u, 4))
    {
      v17 = AVE_Log_CheckConsole(0xE2u);
      v18 = AVE_GetCurrTime();
      v19 = AVE_Log_GetLevelStr(4);
      if (v17)
      {
        printf("%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d\n", v18, 226, v19, "AVE_DPB_MakeSnapshot", 329, "pTmpArray != __null", a1, a2, 0);
        v20 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(4);
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v20, 226, v27);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s:%d %s | fail to create CFArray %p %p %d", v18, 226, v19);
      }
    }
    return 4294966293;
  }
  if (AVE_Log_CheckLevel(0xE2u, 4))
  {
    v13 = AVE_Log_CheckConsole(0xE2u);
    v14 = AVE_GetCurrTime();
    v15 = AVE_Log_GetLevelStr(4);
    if (v13)
    {
      printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d\n", v14, 226, v15, "AVE_DPB_MakeSnapshot", 316, "pDict != __null && pSnapshot != __null", a2, a1, 0);
      v16 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(4);
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v16, 226, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p %p %d", v14, 226, v15);
    }
  }
  return 4294966295;
}

uint64_t AVE_CheckQPValue(int a1, int a2)
{
  if (-6 * a2 + 48 <= a1 && a1 <= 51)
    return 0;
  else
    return 4294966295;
}

uint64_t AVE_CheckQPRange(int *a1, int a2)
{
  int v2;
  int v3;
  int v5;
  int v7;

  v2 = -6 * a2 + 48;
  v3 = a1[1];
  if (v2 <= *a1 && *a1 <= 51)
    v5 = 0;
  else
    v5 = -1001;
  if (v2 <= v3 && v3 <= 51)
    v7 = 0;
  else
    v7 = -1001;
  return (v7 + v5);
}

uint64_t AVE_CheckQuality(double a1, int a2)
{
  if (a1 >= 0.0 && (double)(6 * a2 + 3) >= a1)
    return 0;
  else
    return 4294966295;
}

int *HEVC_FindProfile(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (gsc_sHEVC_Profiles[v1] != a1)
  {
    v1 += 3;
    if (v1 == 24)
      return 0;
  }
  return &gsc_sHEVC_Profiles[v1];
}

uint64_t htpc_decompress_plane(uint64_t result, const unsigned __int8 *a2, _BYTE *a3, int a4, int a5, int a6, int a7, unsigned int a8, char a9, unsigned int a10)
{
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  const unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  const unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  _DWORD v56[67];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  _DWORD v60[67];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _DWORD v64[130];
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  const unsigned __int8 *v70;
  uint64_t v71;
  int v72[128];
  uint64_t v73;

  v42 = result;
  v73 = *MEMORY[0x1E0C80C00];
  v64[128] = 4;
  v64[129] = a6;
  v65 = 1 << (a6 - 1);
  v66 = 0x1000000001;
  v67 = 0u;
  v68 = 0u;
  v60[64] = 4;
  v60[65] = a6;
  v60[66] = v65;
  v61 = 0x1000000001;
  if (a6 <= 8)
    v10 = 3;
  else
    v10 = 4;
  v39 = v10;
  v62 = 0uLL;
  v63 = 0uLL;
  v56[64] = 4;
  v56[65] = a6;
  v56[66] = 1 << (a6 - 1);
  v57 = 0x1000000001;
  v58 = 0uLL;
  v59 = 0uLL;
  if (a5 >= 1)
  {
    v37 = 0;
    v36 = 0;
    v48 = 0;
    if (a6 == 8)
      v11 = 1;
    else
      v11 = 2;
    if (a7)
      v12 = 8;
    else
      v12 = 16;
    v13 = -1 << a6;
    if (!a7)
      v11 = a6 != 8;
    v14 = a8 >> v11;
    if (a7)
      v15 = 3;
    else
      v15 = 4;
    v35 = 16 * v14;
    v41 = v15;
    if (a7)
      v16 = 8;
    else
      v16 = 4;
    v38 = v16;
    v17 = ~v13;
    v46 = 2 * v14;
    v47 = v14;
    v34 = 8 * v14;
    v40 = ~v13;
    do
    {
      if (a4 < 1)
        goto LABEL_59;
      v18 = 0;
      v19 = v37;
      v20 = v36;
      do
      {
        v21 = *(_DWORD *)(v42
                        + (v48 >> 3 >> a9) * a10
                        + 4 * ((v18 >> v41 << a9) + (~(-1 << a9) & (v48 >> 3))));
        v22 = &a2[v21 & 0xFFFFFFF];
        v70 = v22;
        v71 = 0;
        v69 = 0;
        if (v21 >> 28)
        {
          result = htpc_entropy::dec_symbols((htpc_entropy *)&v69, v39, v38, v72, 128, 16);
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v24 -= a6;
            HIDWORD(v69) = v24;
            if (v24 < 0)
            {
              do
              {
                v26 = v22 + 1;
                v70 = v22 + 1;
                v25 = *v22 | (v25 << 8);
                v24 += 8;
                v69 = __PAIR64__(v24, v25);
                ++v22;
              }
              while (v24 >= 8);
            }
            else
            {
              v26 = v22;
            }
            v72[v23++] = (v25 >> v24) & v17;
            v22 = v26;
          }
          while (v23 != 128);
        }
        LODWORD(v27) = 0;
        v28 = 0;
        v45 = v19;
        v50 = v19;
        v44 = v20;
        do
        {
          v29 = 0;
          v49 = v20;
          do
          {
            v31 = (int)(v28 + v48) < a5 && v18 + (int)v29 < a4;
            v32 = v72[(int)v27];
            if (a7)
            {
              if (v21 >> 28)
              {
                result = htpc_codec<8,8>::dec_sample(v60, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                if (a6 == 8)
                  a3[v20] = v32;
                else
                  *(_WORD *)&a3[2 * v20] = v32;
              }
              v27 = (int)v27 + 1;
              v32 = v72[v27];
              if (v21 >> 28)
              {
                result = htpc_codec<8,8>::dec_sample(v56, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                v33 = (v20 + 1);
LABEL_53:
                if (a6 == 8)
                  a3[v33] = v32;
                else
                  *(_WORD *)&a3[2 * v33] = v32;
              }
            }
            else
            {
              if (v21 >> 28)
              {
                result = htpc_codec<16,8>::dec_sample(v64, v28, v29, v32);
                LOWORD(v32) = result;
              }
              if (v31)
              {
                v33 = (v50 + v29);
                goto LABEL_53;
              }
            }
            LODWORD(v27) = v27 + 1;
            ++v29;
            v20 += 2;
          }
          while (v12 != v29);
          ++v28;
          v20 = v49 + v46;
          v50 += v47;
        }
        while (v28 != 8);
        v18 += v12;
        v17 = v40;
        v20 = v44 + 2 * v12;
        v19 = v45 + v12;
      }
      while (v18 < a4);
LABEL_59:
      v36 += v35;
      v37 += v34;
      v48 += 8;
    }
    while ((int)v48 < a5);
  }
  return result;
}

uint64_t htpc_entropy::get_bits(htpc_entropy *this, int a2)
{
  unsigned int v2;
  int v3;
  char v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  v2 = *(_DWORD *)this;
  v3 = *((_DWORD *)this + 1) - a2;
  *((_DWORD *)this + 1) = v3;
  if (v3 < 0)
  {
    v6 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 2);
    do
    {
      v7 = v6 + 1;
      *((_QWORD *)this + 1) = v6 + 1;
      if (v5 && (unint64_t)v6 >= v5)
        v8 = 0;
      else
        v8 = *v6;
      v2 = v8 | (v2 << 8);
      v4 = v3 + 8;
      *(_DWORD *)this = v2;
      *((_DWORD *)this + 1) = v3 + 8;
      v6 = v7;
      v9 = v3 < -8;
      v3 += 8;
    }
    while (v9);
  }
  else
  {
    v4 = v3;
  }
  return (v2 >> v4) & ~(-1 << a2);
}

uint64_t htpc_entropy::dec_symbols(htpc_entropy *this, int a2, unsigned int a3, int *a4, int a5, int a6)
{
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  int v31;
  int v33;
  int v35;
  uint64_t v36;

  if (*((_DWORD *)this + 1))
    htpc_entropy::dec_symbols();
  v8 = *((_QWORD *)this + 1);
  v33 = a5 - 1;
  if (a5 >= 1)
  {
    v10 = a3;
    v30 = *((_QWORD *)this + 1);
    v11 = 0;
    v12 = 0;
    v13 = a6 + 1;
    v35 = -a3;
    v36 = a3;
    v31 = a6 + 1;
    do
    {
      v14 = htpc_entropy::get_bits(this, a2) + 2;
      if (v14 >= v13)
        v15 = v13;
      else
        v15 = v14;
      if (v10 >= 1)
      {
        v16 = 0;
        v17 = v14 > v13;
        if (v12 <= a5)
          v18 = a5;
        else
          v18 = v12;
        v19 = (v18 - v12);
        v20 = &a4[v12];
        do
        {
          if (v19 == v16)
            break;
          *v20 = htpc_entropy::get_bits(this, v15);
          if ((~(_BYTE)v16 & 3) == 0)
          {
            if (v17 || (v21 = *((_QWORD *)this + 2)) != 0 && *((_QWORD *)this + 1) > v21)
            {
              v17 = 0;
              *v20 = 0;
              *((_QWORD *)v20 - 1) = 0;
              *(v20 - 3) = 0;
            }
            else
            {
              v17 = 0;
            }
          }
          ++v16;
          ++v20;
        }
        while (v36 != v16);
        v22 = 0;
        v10 = a3;
        v23 = v33;
        v13 = v31;
        v24 = v35;
        do
        {
          v25 = v22 + v12;
          if ((int)v22 + v12 >= a5)
            break;
          if (v11)
          {
            v26 = v22 + v12;
            if ((int)(v22 + v12 + a3 + a3 * (a4[v26] & 0x1F)) >= a5)
              v27 = v23 - v12;
            else
              v27 = a3 + a3 * (a4[v26] & 0x1F);
            a4[v26] = 0;
            if (v27)
            {
              bzero(&a4[(int)v22 + 1 + v12], 4 * v27);
              v12 += v27;
              v25 = v22 + v12;
            }
            v24 = v35;
          }
          if (a4[v25] == 1)
          {
            v11 = 0;
            v28 = v24 + (_DWORD)v22 == -2 || a3 == 1;
            if (v28 && v25 + 2 < a5)
            {
              a4[v25] = 0;
              v11 = 1;
            }
          }
          else
          {
            v11 = 0;
          }
          ++v22;
          --v23;
        }
        while (v24 + (_DWORD)v22);
      }
      v12 += v10;
    }
    while (v12 < a5);
    LODWORD(v8) = v30;
    if (*((int *)this + 1) >= 8)
      htpc_entropy::dec_symbols();
  }
  *((_DWORD *)this + 1) = 0;
  return (*((_DWORD *)this + 2) - v8);
}

uint64_t htpc_codec<16,8>::dec_sample(_DWORD *a1, int a2, int a3, int a4)
{
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t result;

  if (a1[131])
  {
    v8 = htpc_codec<16,8>::pred_mmap(a1, a2, a3);
  }
  else
  {
    v9 = a1 + 130;
    if (a2 >= 1)
      v9 = &a1[16 * (unint64_t)(a2 - 1) + a3];
    if (a3 >= 1)
      v9 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
    v8 = *v9;
    a1[133] = *v9;
  }
  v10 = a4 >> 1;
  if ((a4 & 1) != 0)
    v10 = -v10;
  a1[139] = v10;
  v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[129])
    a1[140] = 1;
  result = v11 & ~(-1 << a1[132]);
  a1[16 * (uint64_t)a2 + a3] = result;
  return result;
}

uint64_t htpc_codec<8,8>::dec_sample(_DWORD *a1, int a2, int a3, int a4)
{
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t result;

  if (a1[67])
  {
    v8 = htpc_codec<8,8>::pred_mmap(a1, a2, a3);
  }
  else
  {
    v9 = a1 + 66;
    if (a2 >= 1)
      v9 = &a1[8 * (a2 - 1) + a3];
    if (a3 >= 1)
      v9 = &a1[8 * a2 + a3 - 1];
    v8 = *v9;
    a1[69] = *v9;
  }
  v10 = a4 >> 1;
  if ((a4 & 1) != 0)
    v10 = -v10;
  a1[75] = v10;
  v11 = v8 + v10;
  if (v11 < 0 || v11 >> a1[65])
    a1[76] = 1;
  result = v11 & ~(-1 << a1[68]);
  a1[8 * a2 + a3] = result;
  return result;
}

uint64_t htpc_codec<16,8>::pred_mmap(_DWORD *a1, int a2, int a3)
{
  int v3;
  signed int v4;
  signed int v5;
  unsigned int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (a2)
  {
    if (a3 % a1[128])
    {
      v3 = a1[138] + a1[139];
      a1[138] = v3;
      v4 = a1[136];
      v5 = a1[137];
    }
    else
    {
      if (a3 <= 0)
      {
        v9 = (a2 - 2);
        v10 = (a2 - 1);
        if (a2 <= 1)
        {
          v10 = (int)v10;
          v9 = (int)v10;
        }
        v5 = a1[16 * v9 + a3];
        a1[134] = v5;
        v8 = &a1[16 * v10 + a3];
      }
      else
      {
        v8 = &a1[16 * (uint64_t)a2 + (a3 - 1)];
        v5 = *(v8 - 16);
        a1[134] = v5;
      }
      v11 = *v8;
      a1[133] = *v8;
      v3 = v11 - v5;
      if (v11 >= v5)
        v4 = v5;
      else
        v4 = v11;
      a1[136] = v4;
      if (v11 > v5)
        v5 = v11;
      a1[137] = v5;
      a1[138] = v3;
    }
    v12 = a1[16 * (uint64_t)a2 - 16 + a3];
    a1[135] = v12;
    if (v12 < v4)
      v4 = v12;
    a1[136] = v4;
    if (v12 > v5)
      v5 = v12;
    a1[137] = v5;
    v13 = v3 + v12;
    if (v13 < v5)
      v5 = v13;
    if (v13 >= v4)
      return v5;
    else
      return v4;
  }
  else
  {
    v6 = &a1[a3 - 1];
    if (a3 <= 0)
      v6 = a1 + 130;
    v7 = *v6;
    a1[133] = v7;
  }
  return v7;
}

uint64_t htpc_codec<8,8>::pred_mmap(_DWORD *a1, int a2, int a3)
{
  int v3;
  signed int v4;
  signed int v5;
  unsigned int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (a2)
  {
    if (a3 % a1[64])
    {
      v3 = a1[74] + a1[75];
      a1[74] = v3;
      v4 = a1[72];
      v5 = a1[73];
    }
    else
    {
      if (a3 <= 0)
      {
        v9 = (a2 - 2);
        v10 = (a2 - 1);
        if (a2 <= 1)
        {
          v10 = (int)v10;
          v9 = (int)v10;
        }
        v5 = a1[8 * v9 + a3];
        a1[70] = v5;
        v8 = &a1[8 * v10 + a3];
      }
      else
      {
        v8 = &a1[8 * a2 + a3 - 1];
        v5 = *(v8 - 8);
        a1[70] = v5;
      }
      v11 = *v8;
      a1[69] = *v8;
      v3 = v11 - v5;
      if (v11 >= v5)
        v4 = v5;
      else
        v4 = v11;
      a1[72] = v4;
      if (v11 > v5)
        v5 = v11;
      a1[73] = v5;
      a1[74] = v3;
    }
    v12 = a1[8 * a2 - 8 + a3];
    a1[71] = v12;
    if (v12 < v4)
      v4 = v12;
    a1[72] = v4;
    if (v12 > v5)
      v5 = v12;
    a1[73] = v5;
    v13 = v3 + v12;
    if (v13 < v5)
      v5 = v13;
    if (v13 >= v4)
      return v5;
    else
      return v4;
  }
  else
  {
    v6 = &a1[a3 - 1];
    if (a3 <= 0)
      v6 = a1 + 66;
    v7 = *v6;
    a1[69] = v7;
  }
  return v7;
}

uint64_t AVE_VCP::Init(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  __uint64_t v19;
  const char *v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  __uint64_t v28;
  void *v29;
  int v30;
  __uint64_t v31;
  const char *v32;
  void *v33;
  int v34;
  __uint64_t v35;
  const char *v36;
  void *v37;
  int v38;
  __uint64_t v39;
  const char *v40;
  void *v41;
  int v42;
  __uint64_t v43;
  const char *v44;
  int v45;
  __uint64_t v46;
  const char *v47;
  __uint64_t v48;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  __uint64_t v59;
  __uint64_t v60;
  __uint64_t v61;
  __uint64_t v62;

  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v10 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP", "Init", a1, a2, a3, a4, a5);
      v13 = AVE_GetCurrTime();
      v50 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", v13, 13, v50);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %d %d %d", CurrTime, 13, LevelStr);
    }
  }
  v14 = *(unsigned int *)&AVE_VCP::Init(unsigned long long,_E_AVE_CodecType,int,int)::sc_iaEncType[4 * a3];
  v15 = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 1);
  a1[3] = (uint64_t)v15;
  if (v15)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))dlsym(v15, "VCPAVEContextCreate");
    if (v16)
    {
      v17 = v16(v14, a4, a5);
      a1[4] = v17;
      if (!v17 && AVE_Log_CheckLevel(0xDu, 5))
      {
        v18 = AVE_Log_CheckConsole(0xDu);
        v19 = AVE_GetCurrTime();
        v20 = AVE_Log_GetLevelStr(5);
        if (v18)
        {
          printf("%lld %d AVE %s: %s::%s:%d VCP context create fail %p %d %d %d %lld\n", v19, 13, v20, "AVE_VCP", "Init", 74, a1, a3, a4, a5, a2);
          v19 = AVE_GetCurrTime();
          v51 = AVE_Log_GetLevelStr(5);
        }
        else
        {
          v51 = v20;
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d VCP context create fail %p %d %d %d %lld", v19, 13, v51, "AVE_VCP");
      }
    }
    else if (AVE_Log_CheckLevel(0xDu, 5))
    {
      v25 = AVE_Log_CheckConsole(0xDu);
      v26 = AVE_GetCurrTime();
      v27 = AVE_Log_GetLevelStr(5);
      if (v25)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d\n", v26, 13, v27, "AVE_VCP", "Init", 66, a1, a2, a3, a4, a5);
        v28 = AVE_GetCurrTime();
        v53 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v28, 13, v53, "AVE_VCP");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v26, 13, v27, "AVE_VCP");
      }
    }
    v29 = dlsym((void *)a1[3], "VCPCompressionAllocateDPB");
    a1[5] = (uint64_t)v29;
    if (!v29 && AVE_Log_CheckLevel(0xDu, 5))
    {
      v30 = AVE_Log_CheckConsole(0xDu);
      v31 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(5);
      if (v30)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d\n", v31, 13, v32, "AVE_VCP", "Init", 83, a1, a2, a3, a4, a5);
        v59 = AVE_GetCurrTime();
        v54 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v59, 13, v54, "AVE_VCP");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v31, 13, v32, "AVE_VCP");
      }
    }
    v33 = dlsym((void *)a1[3], "VCPAVEScaleReferenceFrames");
    a1[6] = (uint64_t)v33;
    if (!v33 && AVE_Log_CheckLevel(0xDu, 5))
    {
      v34 = AVE_Log_CheckConsole(0xDu);
      v35 = AVE_GetCurrTime();
      v36 = AVE_Log_GetLevelStr(5);
      if (v34)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d\n", v35, 13, v36, "AVE_VCP", "Init", 91, a1, a2, a3, a4, a5);
        v60 = AVE_GetCurrTime();
        v55 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v60, 13, v55, "AVE_VCP");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v35, 13, v36, "AVE_VCP");
      }
    }
    v37 = dlsym((void *)a1[3], "VCPAVEExtraInloopChromaFilter");
    a1[7] = (uint64_t)v37;
    if (!v37 && AVE_Log_CheckLevel(0xDu, 5))
    {
      v38 = AVE_Log_CheckConsole(0xDu);
      v39 = AVE_GetCurrTime();
      v40 = AVE_Log_GetLevelStr(5);
      if (v38)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d\n", v39, 13, v40, "AVE_VCP", "Init", 99, a1, a2, a3, a4, a5);
        v61 = AVE_GetCurrTime();
        v56 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v61, 13, v56, "AVE_VCP");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v39, 13, v40, "AVE_VCP");
      }
    }
    v41 = dlsym((void *)a1[3], "VCPAVECalculateFrameChecksum");
    a1[8] = (uint64_t)v41;
    if (!v41 && AVE_Log_CheckLevel(0xDu, 5))
    {
      v42 = AVE_Log_CheckConsole(0xDu);
      v43 = AVE_GetCurrTime();
      v44 = AVE_Log_GetLevelStr(5);
      if (v42)
      {
        printf("%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d\n", v43, 13, v44, "AVE_VCP", "Init", 107, a1, a2, a3, a4, a5);
        v62 = AVE_GetCurrTime();
        v57 = AVE_Log_GetLevelStr(5);
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v62, 13, v57, "AVE_VCP");
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to find VCP function %p %lld %d %d %d", v43, 13, v44, "AVE_VCP");
      }
    }
    *a1 = a2;
    *((_DWORD *)a1 + 2) = a3;
    *((_DWORD *)a1 + 3) = a4;
    *((_DWORD *)a1 + 4) = a5;
    *((_DWORD *)a1 + 5) = v14;
  }
  else if (AVE_Log_CheckLevel(0xDu, 5))
  {
    v21 = AVE_Log_CheckConsole(0xDu);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(5);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d\n", v22, 13, v23, "AVE_VCP", "Init", 57, a1, a2, a3, a4, a5);
      v24 = AVE_GetCurrTime();
      v52 = AVE_Log_GetLevelStr(5);
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d", v24, 13, v52, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s:%d Unable to open VCP lib %p %lld %d %d %d", v22, 13, v23, "AVE_VCP");
    }
  }
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v45 = AVE_Log_CheckConsole(0xDu);
    v46 = AVE_GetCurrTime();
    v47 = AVE_Log_GetLevelStr(6);
    if (v45)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d\n", v46, 13, v47, "AVE_VCP", "Init", a1, a2, a3, a4, a5, 0);
      v48 = AVE_GetCurrTime();
      v58 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v48, 13, v58);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d %d %d %d", v46, 13, v47);
    }
  }
  return 0;
}

uint64_t AVE_VCP::Uninit(AVE_VCP *this)
{
  uint64_t v2;
  int v3;
  __uint64_t CurrTime;
  const char *LevelStr;
  void *v6;
  void (*v7)(void);
  int v8;
  __uint64_t v9;
  const char *v10;

  v2 = *(_QWORD *)this;
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v3 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v3)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld\n", CurrTime, 13, LevelStr, "AVE_VCP", "Uninit", this, v2);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld", CurrTime);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = (void (*)(void))dlsym(v6, "VCPAVEContextRelease");
    if (v7)
    {
      if (*((_QWORD *)this + 4))
        v7();
    }
  }
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v8 = AVE_Log_CheckConsole(0xDu);
    v9 = AVE_GetCurrTime();
    v10 = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %d\n", v9, 13, v10, "AVE_VCP", "Uninit", this, v2, 0);
      v9 = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %d", v9, 13);
  }
  return 0;
}

uint64_t AVE_VCP::AllocDPB(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, const __CFArray **a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  uint64_t (*v12)(const __CFDictionary *, _QWORD, _QWORD, _QWORD, uint64_t);
  const __CFArray *v13;
  uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v24;
  const char *v25;
  const char *v26;

  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v8 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "AllocDPB", this, *(_QWORD *)this, a2, a3, a4);
      v11 = AVE_GetCurrTime();
      v24 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", v11, 13, v24, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p 0x%x %p", CurrTime, 13, LevelStr, "AVE_VCP");
    }
  }
  v12 = (uint64_t (*)(const __CFDictionary *, _QWORD, _QWORD, _QWORD, uint64_t))*((_QWORD *)this + 5);
  if (v12)
  {
    v13 = (const __CFArray *)v12(a2, *((unsigned int *)this + 5), *((unsigned int *)this + 3), *((unsigned int *)this + 4), a3);
    if (v13)
    {
      v14 = 0;
    }
    else
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        v15 = AVE_Log_CheckConsole(0xDu);
        v16 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(5);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x\n", v16, 13, v17, "AVE_VCP", "AllocDPB", 181, this, *(_QWORD *)this, a2, *((_DWORD *)this + 5), *((_DWORD *)this + 3), *((_DWORD *)this + 4), a3);
          v18 = AVE_GetCurrTime();
          v25 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v18, 13, v25, "AVE_VCP", "AllocDPB");
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to allocate DPB %p %lld %p %d %d %d 0x%x", v16, 13, v17, "AVE_VCP", "AllocDPB");
        }
      }
      v13 = 0;
      v14 = 4294966293;
    }
  }
  else
  {
    v13 = 0;
    v14 = 4294966294;
  }
  *a4 = v13;
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v19 = AVE_Log_CheckConsole(0xDu);
    v20 = AVE_GetCurrTime();
    v21 = AVE_Log_GetLevelStr(8);
    if (v19)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d\n", v20, 13, v21, "AVE_VCP", "AllocDPB", this, *(_QWORD *)this, a2, a3, a4, v14);
      v22 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v22, 13, v26, "AVE_VCP", "AllocDPB");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p 0x%x %p %d", v20, 13, v21, "AVE_VCP", "AllocDPB");
    }
  }
  return v14;
}

uint64_t AVE_VCP::ScaleRefFrames(AVE_VCP *this, const __CFDictionary *a2, const __CFArray *a3)
{
  int v6;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFDictionary *, const __CFArray *);
  uint64_t v11;
  uint64_t v12;
  int v13;
  __uint64_t v14;
  const char *v15;
  __uint64_t v16;
  int v17;
  __uint64_t v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  __uint64_t v22;
  const char *v23;
  __uint64_t v24;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;

  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v6 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v6)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "ScaleRefFrames", this, *(_QWORD *)this, a2, a3);
      v9 = AVE_GetCurrTime();
      v26 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", v9, 13, v26);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %p", CurrTime, 13, LevelStr);
    }
  }
  v10 = (uint64_t (*)(uint64_t, const __CFDictionary *, const __CFArray *))*((_QWORD *)this + 6);
  if (v10 && (v11 = *((_QWORD *)this + 4)) != 0)
  {
    v12 = v10(v11, a2, a3);
    if (AVE_Log_CheckLevel(0xDu, 8))
    {
      v13 = AVE_Log_CheckConsole(0xDu);
      v14 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(8);
      if (v13)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d\n", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 216, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, v12);
        v16 = AVE_GetCurrTime();
        v27 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v16, 13, v27, "AVE_VCP", "ScaleRefFrames", 216);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %p %d", v14, 13, v15, "AVE_VCP", "ScaleRefFrames", 216);
      }
    }
    if ((_DWORD)v12)
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        v17 = AVE_Log_CheckConsole(0xDu);
        v18 = AVE_GetCurrTime();
        v19 = AVE_Log_GetLevelStr(5);
        if (v17)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d\n", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 222, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, v12);
          v20 = AVE_GetCurrTime();
          v28 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v20, 13, v28, "AVE_VCP", "ScaleRefFrames", 222);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to scale ref frame %p %lld %p %p %p %d", v18, 13, v19, "AVE_VCP", "ScaleRefFrames", 222);
        }
      }
      v12 = 4294966296;
    }
  }
  else
  {
    v12 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v21 = AVE_Log_CheckConsole(0xDu);
    v22 = AVE_GetCurrTime();
    v23 = AVE_Log_GetLevelStr(8);
    if (v21)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d\n", v22, 13, v23, "AVE_VCP", "ScaleRefFrames", this, *(_QWORD *)this, a2, a3, v12);
      v24 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v24, 13, v29, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %p %d", v22, 13, v23, "AVE_VCP");
    }
  }
  return v12;
}

uint64_t AVE_VCP::ChromaFilter(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFDictionary *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  __uint64_t v22;
  const char *v23;
  int v24;
  __uint64_t v25;
  const char *v26;
  __uint64_t v27;
  const char *v29;
  const char *v30;
  const char *v31;

  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v8 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP", "ChromaFilter", this, *(_QWORD *)this, a2, a3, a4);
      v11 = AVE_GetCurrTime();
      v29 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", v11, 13, v29);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %d", CurrTime, 13, LevelStr);
    }
  }
  v12 = (uint64_t (*)(uint64_t, const __CFDictionary *, uint64_t, uint64_t))*((_QWORD *)this + 7);
  if (v12 && (v13 = *((_QWORD *)this + 4)) != 0)
  {
    v14 = v12(v13, a2, a3, a4);
    if (AVE_Log_CheckLevel(0xDu, 8))
    {
      v15 = AVE_Log_CheckConsole(0xDu);
      v16 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(8);
      if (v15)
      {
        printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d\n", v16, 13, v17, "AVE_VCP", "ChromaFilter", 256, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, a4, v14);
        v18 = AVE_GetCurrTime();
        v30 = AVE_Log_GetLevelStr(8);
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v18, 13, v30, "AVE_VCP", "ChromaFilter", 256);
      }
      else
      {
        syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %d %d", v16, 13, v17, "AVE_VCP", "ChromaFilter", 256);
      }
    }
    if ((_DWORD)v14)
    {
      if (AVE_Log_CheckLevel(0xDu, 5))
      {
        v19 = AVE_Log_CheckConsole(0xDu);
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(5);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d\n", v20, 13, v21, "AVE_VCP", "ChromaFilter", 262, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, a4, v14);
          v22 = AVE_GetCurrTime();
          v23 = AVE_Log_GetLevelStr(5);
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v22, 13, v23, "AVE_VCP", "ChromaFilter", 262);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d fail to filter chroma %p %lld %p %p %d %d %d", v20, 13, v21, "AVE_VCP", "ChromaFilter", 262);
        }
      }
      v14 = 4294966296;
    }
  }
  else
  {
    v14 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v24 = AVE_Log_CheckConsole(0xDu);
    v25 = AVE_GetCurrTime();
    v26 = AVE_Log_GetLevelStr(8);
    if (v24)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d\n", v25, 13, v26, "AVE_VCP", "ChromaFilter", this, *(_QWORD *)this, a2, a3, a4);
      v27 = AVE_GetCurrTime();
      v31 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v27, 13, v31);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %d", v25, 13, v26);
    }
  }
  return v14;
}

uint64_t AVE_VCP::CalcChecksum(AVE_VCP *this, const __CFDictionary *a2, uint64_t a3, __CFDictionary *a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v11;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v13;
  uint64_t v14;
  int v15;
  __uint64_t v16;
  const char *v17;
  __uint64_t v18;
  int v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  const char *v29;
  __uint64_t v30;
  const char *v32;
  const char *v33;
  const char *v34;

  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v8 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(8);
    if (v8)
    {
      printf("%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p\n", CurrTime, 13, LevelStr, "AVE_VCP", "CalcChecksum", this, *(_QWORD *)this, a2, a3, a4);
      v11 = AVE_GetCurrTime();
      v32 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", v11, 13, v32, "AVE_VCP");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Enter %p %lld %p %d %p", CurrTime, 13, LevelStr, "AVE_VCP");
    }
  }
  if (*((_QWORD *)this + 8) && *((_QWORD *)this + 4))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v13 = Mutable;
      v14 = (*((uint64_t (**)(_QWORD, const __CFDictionary *, uint64_t, uint64_t, CFMutableDictionaryRef))this
             + 8))(*((_QWORD *)this + 4), a2, a3, 1, Mutable);
      if (AVE_Log_CheckLevel(0xDu, 8))
      {
        v15 = AVE_Log_CheckConsole(0xDu);
        v16 = AVE_GetCurrTime();
        v17 = AVE_Log_GetLevelStr(8);
        if (v15)
        {
          printf("%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d\n", v16, 13, v17, "AVE_VCP", "CalcChecksum", 303, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, v13, v14);
          v18 = AVE_GetCurrTime();
          v33 = AVE_Log_GetLevelStr(8);
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v18, 13, v33, "AVE_VCP", "CalcChecksum", 303, this);
        }
        else
        {
          syslog(3, "%lld %d AVE %s: %s::%s:%d %p %lld %p %p %d %p %d", v16, 13, v17, "AVE_VCP", "CalcChecksum", 303, this);
        }
      }
      if ((_DWORD)v14)
      {
        if (AVE_Log_CheckLevel(0xDu, 5))
        {
          v22 = AVE_Log_CheckConsole(0xDu);
          v23 = AVE_GetCurrTime();
          v24 = AVE_Log_GetLevelStr(5);
          if (v22)
          {
            printf("%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d\n", v23, 13, v24, "AVE_VCP", "CalcChecksum", 310, this, *(_QWORD *)this, *((const void **)this + 4), a2, a3, v13, v14);
            v25 = AVE_GetCurrTime();
            v26 = AVE_Log_GetLevelStr(5);
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v25, 13, v26, "AVE_VCP", "CalcChecksum", 310, this);
          }
          else
          {
            syslog(3, "%lld %d AVE %s: %s::%s:%d fail to calculate checksum %p %lld %p %p %d %p %d", v23, 13, v24, "AVE_VCP", "CalcChecksum", 310, this);
          }
        }
        v14 = 4294966296;
      }
      else
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)AVE_VCP::CalcChecksum(__CFDictionary const*,unsigned int,__CFDictionary*)::$_0::__invoke, a4);
      }
      CFRelease(v13);
    }
    else
    {
      if (AVE_Log_CheckLevel(0xDu, 4))
      {
        v19 = AVE_Log_CheckConsole(0xDu);
        v20 = AVE_GetCurrTime();
        v21 = AVE_Log_GetLevelStr(4);
        if (v19)
        {
          printf("%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary\n", v20, 13, v21, "AVE_VCP", "CalcChecksum", 299, "pDict != __null");
          v20 = AVE_GetCurrTime();
          AVE_Log_GetLevelStr(4);
        }
        syslog(3, "%lld %d AVE %s: %s::%s:%d %s | fail to create dictionary", v20);
      }
      v14 = 4294966293;
    }
  }
  else
  {
    v14 = 4294966294;
  }
  if (AVE_Log_CheckLevel(0xDu, 8))
  {
    v27 = AVE_Log_CheckConsole(0xDu);
    v28 = AVE_GetCurrTime();
    v29 = AVE_Log_GetLevelStr(8);
    if (v27)
    {
      printf("%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d\n", v28, 13, v29, "AVE_VCP", "CalcChecksum", this, *(_QWORD *)this, a2, a3, a4, v14);
      v30 = AVE_GetCurrTime();
      v34 = AVE_Log_GetLevelStr(8);
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v30, 13, v34, "AVE_VCP", "CalcChecksum");
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s::%s Exit %p %lld %p %d %p %d", v28, 13, v29, "AVE_VCP", "CalcChecksum");
    }
  }
  return v14;
}

uint64_t AVE_VCP_Create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  __uint64_t CurrTime;
  const char *LevelStr;
  uint64_t v11;
  int v12;
  __uint64_t v13;
  const char *v14;
  __uint64_t v15;
  const char *v17;

  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v8 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v8)
    {
      printf("%lld %d AVE %s: %s Enter %lld %d %d %d\n", CurrTime, 13, LevelStr, "AVE_VCP_Create", a1, a2, a3, a4);
      CurrTime = AVE_GetCurrTime();
      AVE_Log_GetLevelStr(6);
    }
    syslog(3, "%lld %d AVE %s: %s Enter %lld %d %d %d", CurrTime);
  }
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_QWORD *)(v11 + 64) = 0;
  AVE_VCP::Init((uint64_t *)v11, a1, a2, a3, a4);
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v12 = AVE_Log_CheckConsole(0xDu);
    v13 = AVE_GetCurrTime();
    v14 = AVE_Log_GetLevelStr(6);
    if (v12)
    {
      printf("%lld %d AVE %s: %s Exit %lld %d %d %d %p %d\n", v13, 13, v14, "AVE_VCP_Create", a1, a2, a3, a4, (const void *)v11, 0);
      v15 = AVE_GetCurrTime();
      v17 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %lld %d %d %d %p %d", v15, 13, v17);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %lld %d %d %d %p %d", v13, 13, v14);
    }
  }
  return v11;
}

uint64_t AVE_VCP_Destroy(AVE_VCP *a1)
{
  int v2;
  __uint64_t CurrTime;
  const char *LevelStr;
  __uint64_t v5;
  uint64_t v6;
  int v7;
  __uint64_t v8;
  const char *v9;
  int v10;
  __uint64_t v11;
  const char *v12;
  __uint64_t v13;
  const char *v15;
  const char *v16;

  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v2 = AVE_Log_CheckConsole(0xDu);
    CurrTime = AVE_GetCurrTime();
    LevelStr = AVE_Log_GetLevelStr(6);
    if (v2)
    {
      printf("%lld %d AVE %s: %s Enter %p\n", CurrTime, 13, LevelStr, "AVE_VCP_Destroy", a1);
      v5 = AVE_GetCurrTime();
      v15 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Enter %p", v5, 13, v15, "AVE_VCP_Destroy", a1);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Enter %p", CurrTime, 13, LevelStr, "AVE_VCP_Destroy", a1);
    }
  }
  if (a1)
  {
    AVE_VCP::Uninit(a1);
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_QWORD *)a1 + 8) = 0;
    MEMORY[0x1B5E4D1C0](a1, 0x1080C4079F274C8);
    v6 = 0;
  }
  else
  {
    if (AVE_Log_CheckLevel(0xDu, 4))
    {
      v7 = AVE_Log_CheckConsole(0xDu);
      v8 = AVE_GetCurrTime();
      v9 = AVE_Log_GetLevelStr(4);
      if (v7)
      {
        printf("%lld %d AVE %s: %s:%d %s | wrong parameter %p\n", v8, 13, v9, "AVE_VCP_Destroy", 390, "pcVCP != __null", 0);
        v8 = AVE_GetCurrTime();
        AVE_Log_GetLevelStr(4);
      }
      syslog(3, "%lld %d AVE %s: %s:%d %s | wrong parameter %p", v8);
    }
    v6 = 4294966295;
  }
  if (AVE_Log_CheckLevel(0xDu, 6))
  {
    v10 = AVE_Log_CheckConsole(0xDu);
    v11 = AVE_GetCurrTime();
    v12 = AVE_Log_GetLevelStr(6);
    if (v10)
    {
      printf("%lld %d AVE %s: %s Exit %p %d\n", v11, 13, v12, "AVE_VCP_Destroy", 0, v6);
      v13 = AVE_GetCurrTime();
      v16 = AVE_Log_GetLevelStr(6);
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v13, 13, v16, "AVE_VCP_Destroy", 0, v6);
    }
    else
    {
      syslog(3, "%lld %d AVE %s: %s Exit %p %d", v11, 13, v12, "AVE_VCP_Destroy", 0, v6);
    }
  }
  return v6;
}

void AVE_VCP::CalcChecksum(__CFDictionary const*,unsigned int,__CFDictionary*)::$_0::__invoke(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

BOOL interchange_compression::check_valid_lossy_level(interchange_compression *this, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  _BOOL8 result;

  v2 = (_DWORD)this - 1;
  result = 0;
  if (a2 || v2 >= 2)
  {
    v3 = a2 == 6 || a2 == 8;
    v4 = v3;
    if ((_DWORD)this != 2 || !v4)
    {
      v5 = a2 != 25 && a2 - 9 >= 2;
      v6 = !v5;
      if (((_DWORD)this != 3 || !v6) && (a2 > 0x1A || ((1 << a2) & 0x4C00000) == 0 || v2 >= 2))
        return 1;
    }
  }
  return result;
}

uint64_t interchange_decompress_plane(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, interchange_compression *a12)
{
  uint64_t v12;
  int v18;
  int v19;
  char v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int8x16_t v32;
  int64x2_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64x2_t v42;
  int8x16_t v43;
  uint64_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int64x2_t v47;
  uint64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x8_t v51;
  int v52;
  const unsigned __int8 *v53;
  _BYTE *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int *v63;
  uint64_t v64;
  _BOOL4 v66;
  unsigned int v67;
  unsigned int *v68;
  _BOOL4 v69;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64x2_t v81;
  uint64_t v82;
  int64x2_t v83;
  int8x16_t v84;
  char v85;
  char v86;
  int v87;
  unsigned int v88;
  uint64x2_t v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  _BYTE *v111;
  const unsigned __int8 *v112;
  _BYTE v113[356];
  unsigned int v114[4][8][4];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (a7)
    v12 = 16;
  else
    v12 = 32;
  v106 = v12;
  if ((a6 | 2) != 0xA)
    interchange_decompress_plane();
  if (a7)
    v18 = 8;
  else
    v18 = 1;
  if (a7)
    v19 = 10;
  else
    v19 = 3;
  if (a7)
    v20 = 4;
  else
    v20 = 5;
  v93 = v20;
  if (a6 == 8)
    v21 = v18;
  else
    v21 = v19;
  v88 = interchange_compression::lossy_parameters[28 * v21 + 4 + a12];
  result = (uint64_t)interchange_compression::decompressor::decompressor((interchange_compression::decompressor *)v113, v21, (interchange_compression *)a12, 0);
  memset(v114, 0, sizeof(v114));
  v23 = a11 + a5;
  if (a11 + a5)
  {
    v98 = 0;
    v24 = (v106 - 1 + a4) >> v93;
    v25 = (v106 - 1 + a5) >> v93;
    v26 = 32 - __clz(v25 - 1);
    if (v25 >= 2)
      v27 = v26;
    else
      v27 = 0;
    v28 = 32 - __clz(v24 - 1);
    v77 = (v106 - 1 + a4) >> v93;
    if (v24 < 2)
      v28 = 0;
    v29 = a9 + a4;
    if (v28 >= v27)
      v30 = v27;
    else
      v30 = v28;
    v31 = 5;
    if (a7)
      v31 = 3;
    v85 = v31;
    v86 = 2 * v30;
    v75 = &interchange_compression::lossy_parameters[28 * v21 + 8 + a12];
    v76 = &interchange_compression::memory_parameters[11 * v21 + 7];
    v82 = (v30 + 1) & 0x1FFFFFFFELL;
    v81 = (uint64x2_t)vdupq_n_s64(v30 - 1);
    v97 = (4 * a4);
    v78 = (v106 * a4);
    v32 = (int8x16_t)vdupq_n_s64(1uLL);
    v33 = vdupq_n_s64(2uLL);
    v80 = -a9 - a4 * a11;
    v79 = -(2 * a4 * a11 + 2 * a9);
    v96 = 8 * a4;
    v34 = 2 * a4;
    v35 = a4;
    v83 = v33;
    v84 = v32;
    v87 = v30;
    v103 = v23;
    do
    {
      if (!v29)
        goto LABEL_74;
      v36 = 0;
      v37 = v98 >> v93;
      v92 = v37 * v77;
      v105 = ~(-1 << *v76);
      v104 = *v75;
      v38 = (uint64x2_t)vdupq_n_s64(v37);
      v39 = v79;
      v40 = v80;
      v91 = v38;
      do
      {
        v41 = v36 >> v93;
        if ((_DWORD)v30)
        {
          v42 = (uint64x2_t)vdupq_n_s64(v41);
          v43 = 0uLL;
          v44 = v82;
          v45 = (int64x2_t)xmmword_1B5625EF0;
          do
          {
            v46 = v43;
            v47 = v45;
            v48 = (uint64x2_t)vnegq_s64(v45);
            v49 = (int8x16_t)vaddq_s64(v47, v47);
            v43 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v42, v48), v32), (uint64x2_t)v49), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v38, v48), v32), (uint64x2_t)vorrq_s8(v49, v32))), v46);
            v45 = vaddq_s64(v45, v33);
            v44 -= 2;
          }
          while (v44);
          v50 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v47, v81), v46, v43);
          v51 = vorr_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
        }
        else
        {
          v51 = 0;
        }
        v52 = 0;
        v53 = (const unsigned __int8 *)(a2 + ((_DWORD)v41 + v92) * v88);
        v54 = (_BYTE *)(a1 + ((*(_QWORD *)&v51 | ((v41 | (v98 >> v93)) >> v30 << v86)) << v85));
        v95 = v39;
        v94 = v40;
        v99 = v36;
        do
        {
          v55 = 0;
          v102 = v52;
          v56 = v52 + v98;
          v101 = v39;
          v57 = v39;
          v100 = v40;
          do
          {
            v109 = v57;
            v110 = v55;
            v111 = v54;
            v112 = v53;
            v58 = *v54;
            v108 = v58 & 0xF0;
            if (*v54)
              v59 = (v58 & v105) + 1;
            else
              v59 = 0;
            v107 = v59;
            result = interchange_compression::decompressor::decompress((interchange_compression::decompressor *)v113, v53, v58, (unsigned int (*)[4][8][4])v114);
            v23 = v103;
            v60 = 0;
            v61 = v109;
            v62 = v40;
            v63 = &v114[0][0][1];
            do
            {
              v64 = 0;
              v66 = v56 + (int)v60 >= a11 && v56 + (int)v60 < v103;
              v67 = v61;
              v68 = v63;
              do
              {
                v69 = (int)v36 + (int)v64 >= a9 && v66;
                if ((int)v36 + (int)v64 < v29 && v69)
                {
                  v71 = *(v68 - 1);
                  if (a7)
                  {
                    result = v67;
                    v72 = v67 + 1;
                    if (a6 == 8)
                    {
                      *(_BYTE *)(a3 + v67) = v71;
                      v71 = *v68;
LABEL_60:
                      *(_BYTE *)(a3 + v72) = v71;
                      goto LABEL_63;
                    }
                    *(_WORD *)(a3 + 2 * v67) = v71;
                    v71 = *v68;
                  }
                  else
                  {
                    v72 = (v62 + v64);
                    if (a6 == 8)
                      goto LABEL_60;
                  }
                  *(_WORD *)(a3 + 2 * v72) = v71;
                }
LABEL_63:
                ++v64;
                v68 += 4;
                v67 += 2;
              }
              while (v64 != 8);
              ++v60;
              v63 += 32;
              v62 += v35;
              v61 += v34;
            }
            while (v60 != 4);
            if (v108 != 240 || (_DWORD)a12 == 0)
              v74 = v107;
            else
              v74 = v104;
            v53 = &v112[v74];
            v54 = v111 + 1;
            v55 = v110 + 8;
            LODWORD(v40) = v40 + 8;
            v57 = v109 + 16;
            LODWORD(v36) = v36 + 8;
          }
          while (v110 + 8 < v106);
          v52 = v102 + 4;
          LODWORD(v36) = v99;
          v40 = v100 + v97;
          v39 = v101 + v96;
        }
        while (v102 + 4 < v106);
        v36 = v99 + v106;
        v40 = v94 + v106;
        v39 = v95 + 2 * v106;
        LODWORD(v30) = v87;
        v33 = v83;
        v32 = v84;
        v38 = v91;
      }
      while ((int)v99 + (int)v106 < v29);
LABEL_74:
      v80 += v78;
      v79 += 2 * v78;
      v98 += v106;
    }
    while (v98 < v23);
  }
  return result;
}

uint64_t interchange_compression::decompressor::decompress(interchange_compression::decompressor *this, const unsigned __int8 *a2, uint64_t a3, unsigned int (*a4)[4][8][4])
{
  interchange_compression::decompressor *v7;
  unsigned int v8;
  unsigned int subblock_size;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v14;
  uint64_t v15;
  const unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  interchange_compression *v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _BOOL4 v36;
  int v37;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  int (*v44)[4];
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  _DWORD *v50;
  unsigned int *v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  int *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  int v63;
  unsigned int *v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  char v71;
  unsigned int *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t id;
  int v78;
  _DWORD *v79;
  int v80;
  int v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int *v108;
  _DWORD *v109;
  interchange_compression *v110;
  unsigned int v111;
  unsigned int v112;
  interchange_compression *v113;
  _BYTE *v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _DWORD *v132;
  unint64_t v133;
  _BOOL4 v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  int v139;
  int v140;
  uint64_t v141;
  _BYTE *v142;
  unint64_t v143;
  uint32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  unsigned int *v148;
  uint64_t v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unint64_t v154;
  uint32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  unsigned int *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t i;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int j;
  uint32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  interchange_compression::decompressor *v176;
  unsigned int (*v177)[4][8][4];
  const unsigned __int8 *v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  interchange_compression *v183;
  unsigned int v184;
  interchange_compression *v185;
  uint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  unsigned int *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned __int32 v198;
  _BYTE v199[128];
  _OWORD v200[7];
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD v209[4];
  int v210[4];
  unsigned int v211[2];
  uint64_t v212;
  _BYTE v213[16];
  _BYTE v214[512];
  int v215;
  const unsigned __int8 *v216;
  unsigned int v217;
  unsigned int v218;
  char v219;
  unsigned int v220[4];
  unsigned int v221[4];
  uint64_t v222;

  v7 = this;
  v222 = *MEMORY[0x1E0C80C00];
  v8 = interchange_compression::memory_parameters[11 * *((unsigned int *)this + 85) + 7];
  if ((*((_DWORD *)this + 87) - 1) <= 2)
  {
    subblock_size = interchange_compression::decompressor::get_subblock_size(this, a3);
    v10 = *((_DWORD *)v7 + 85);
    if (subblock_size > interchange_compression::lossy_parameters[28 * v10 + 8 + *((unsigned int *)v7 + 87)]
      || subblock_size < interchange_compression::decompressor::get_subblock_size(v7, LOBYTE(interchange_compression::memory_parameters[11 * v10 + 8])))
    {
      goto LABEL_233;
    }
    if ((~(_DWORD)a3 & 0xF0) == 0)
    {
      v11 = *((unsigned int *)v7 + 87);
      if ((v11 - 1) <= 2)
      {
        v12 = 0;
        v13 = *((unsigned int *)v7 + 85);
        v179 = (unint64_t)interchange_compression::lossy_parameters[28 * v13 + 8 + v11] >> 2;
        v14 = (int16x8_t)vtstq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_1B5632180);
        *(int8x8_t *)v14.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v14), (int8x8_t)0x1000100010001);
        v198 = vmovn_s16(v14).u32[0];
        v177 = a4;
        v178 = a2;
        v176 = v7;
        while (1)
        {
          v15 = *((unsigned int *)v7 + 87);
          v180 = v12;
          v16 = &a2[v12 * v179];
          v17 = *((_DWORD *)v7 + 88);
          v189 = v13;
          v197 = v17;
          if (!v199[v12 - 4])
            break;
          v18 = 0;
          v19 = interchange_compression::lossy_parameters[28 * v13 + 8 + v15] >> 2;
          v216 = v16;
          v215 = v19;
          v219 = 1;
          v218 = 0;
          v217 = 8 * v19;
          v20 = &interchange_compression::format_table[13 * v13];
          LODWORD(v21) = v20[2];
          v22 = v17 & 0xFFFFFFFE;
          if (v21 <= 1)
            v21 = 1;
          else
            v21 = v21;
          v183 = (interchange_compression *)(v20 + 3);
          v186 = v21;
          v181 = &interchange_compression::lossy_parameters[28 * v13 + 12 + 4 * v15];
          v23 = (unsigned int *)v199;
          do
          {
            v194 = v18;
            v25 = v181;
            v24 = v183;
            v190 = v23;
            v26 = v186;
            if (v13 != 27)
            {
              do
              {
                v28 = *v25++;
                v27 = v28;
                v30 = *(_DWORD *)v24;
                v24 = (interchange_compression *)((char *)v24 + 4);
                v29 = v30;
                v31 = -1 << v30;
                if (v30 == 32)
                  v32 = -1;
                else
                  v32 = ~v31;
                v33 = 1 << (v29 - 1);
                v34 = (bit_pack::unpack((bit_pack *)v214, v29 - v27) << v27) & v32;
                v36 = v22 != 2 || v34 != v33;
                if (v34 >> v27 == v32 >> v27)
                  v37 = v32;
                else
                  v37 = ((1 << (v27 - 1)) - ((v34 >> v27) & 1)) | v34;
                if (!v36 || v34 == 0)
                  v39 = v34;
                else
                  v39 = v37;
                if (!v27)
                  v39 = v34;
                if (v197 != 1)
                  v34 = v39;
                if (v22 == 2)
                  v40 = v33;
                else
                  v40 = 0;
                *v23++ = v34 ^ v40;
                --v26;
              }
              while (v26);
            }
            v18 = v194 + 1;
            v13 = v189;
            v23 = v190 + 4;
          }
          while (v194 != 7);
          a4 = v177;
          a2 = v178;
          v7 = v176;
LABEL_193:
          v141 = 0;
          v142 = v199;
          do
          {
            if (*((_DWORD *)v7 + 85) == 27)
            {
              v13 = 27;
            }
            else
            {
              v143 = 0;
              v144 = (uint32x4_t)vdupq_n_s32((int)v141 + 8 * (int)v180);
              v145.i64[0] = 0x100000001;
              v145.i64[1] = 0x100000001;
              v146 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v144, (uint32x4_t)xmmword_1B5636570), v145), (uint32x4_t)xmmword_1B5636580);
              v147 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v144, (uint32x4_t)xmmword_1B5636590), v145), (uint32x4_t)xmmword_1B5636580);
              v148 = (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v146.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)).u32[0] | v146.i32[1])][vorr_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)).u32[0] | v147.i32[1]];
              do
              {
                v148[v143] = *(_DWORD *)&v142[4 * v143];
                ++v143;
                v13 = *((unsigned int *)v7 + 85);
              }
              while (v143 < interchange_compression::format_table[13 * v13 + 2]);
            }
            ++v141;
            v142 += 16;
          }
          while (v141 != 8);
          v12 = v180 + 1;
          if (v180 == 3)
            return 1;
        }
        v195 = 0;
        v187 = &interchange_compression::format_table[13 * v13];
        v184 = v187[2];
        v174 = *((_DWORD *)v7 + 87);
        v41 = interchange_compression::lossy_parameters[28 * v13 + 8 + v15];
        v216 = &a2[v12 * v179];
        v41 *= 2;
        v215 = (v41 >> 3) & 0x7FFFFFF;
        v219 = 1;
        v218 = 0;
        v182 = v41;
        v217 = v41 & 0x3FFFFFF8;
        if (v13 == 27)
        {
LABEL_42:
          *(_QWORD *)v211 = 0;
          v212 = 0;
          memset(v210, 0, sizeof(v210));
          v209[0] = interchange_compression::get_id((interchange_compression *)v187[3]);
          v42 = &interchange_compression::format_table[13 * v189];
          v209[1] = interchange_compression::get_id((interchange_compression *)v42[4]);
          v209[2] = interchange_compression::get_id((interchange_compression *)v42[5]);
          v209[3] = interchange_compression::get_id((interchange_compression *)v42[6]);
          v43 = v184;
          interchange_compression::derive_sharing(v184, (uint64_t)v209, v221, v211, (int (*)[4])v210, v44);
          v207 = 0;
          v208 = 0;
          v205 = 0;
          v206 = 0;
          if (v189 == 27)
          {
            v203 = 0;
            v204 = 0;
            v201 = 0;
            v202 = 0;
            v45 = v197;
            v46 = v195;
          }
          else
          {
            v74 = 0;
            v193 = (v174 - 1);
            if (v184 <= 1)
              v75 = 1;
            else
              v75 = v184;
            v175 = v75;
            v188 = 4 * v75;
            do
            {
              v76 = interchange_compression::format_table[13 * v189 + 3 + v74 / 4];
              id = interchange_compression::get_id((interchange_compression *)v76);
              v78 = v221[v74 / 4];
              v79 = &interchange_compression::dq_consts[160 * id + 10 * v78];
              v80 = interchange_compression::dq_lossy_level[3 * id + v193];
              v81 = v79[5];
              *(_DWORD *)((char *)&v207 + v74) = v80 + v79[4];
              v82 = (unsigned int *)((char *)&v205 + v74);
              *(_DWORD *)((char *)&v205 + v74) = v81 + v80;
              interchange_compression::adjust_level(id, v78, v211[v74 / 4], v210[v74 / 4], (uint64_t *)((char *)&v207 + v74), (unsigned int *)((char *)&v205 + v74), v83);
              v84 = *(_DWORD *)((char *)&v207 + v74);
              if (v76 < v84)
                v84 = v76;
              *(_DWORD *)((char *)&v207 + v74) = v84;
              if (v81)
                v85 = v76;
              else
                v85 = 0;
              if (v85 >= *v82)
                v85 = *v82;
              *v82 = v85;
              v74 += 4;
            }
            while (v188 != v74);
            if (v189 == 19 && v221[3] == 1 && v210[3] - HIDWORD(v212) <= 1)
            {
              v207 = 0;
              v208 = 0;
              v205 = 0;
              v206 = 0;
            }
            v86 = v175;
            v87 = &interchange_compression::format_table[13 * v189 + 3];
            v88 = (unsigned int *)&v203;
            v203 = 0;
            v204 = 0;
            v89 = v220;
            v90 = (unsigned int *)&v207;
            v91 = v221;
            do
            {
              v92 = *v91++;
              if (v92 || *v87 - 8 > 4)
              {
                v93 = *v90;
                *v88 = bit_pack::unpack((bit_pack *)v214, *v90) << (*v87 - v93);
                v195 += v93;
              }
              else
              {
                *v88 = *v89;
              }
              ++v88;
              ++v89;
              ++v87;
              ++v90;
              --v86;
            }
            while (v86);
            v201 = 0;
            v202 = 0;
            v94 = &v201;
            v95 = &v205;
            v45 = v197;
            v46 = v195;
            v43 = v184;
            v96 = v175;
            do
            {
              v97 = *(_DWORD *)v95;
              v95 = (uint64_t *)((char *)v95 + 4);
              if (v97)
              {
                v98 = bit_pack::get((bit_pack *)v214, v218, 3u);
                v218 += 3;
                *(_DWORD *)v94 = v98;
                v46 += 3;
              }
              v94 = (uint64_t *)((char *)v94 + 4);
              --v96;
            }
            while (v96);
          }
          v99 = (v182 & 0x3FFFFFFE) - v46;
          v100 = v99 / 7;
          v101 = v218 + v99 - 7 * (v99 / 7);
          v218 = v101;
          v102 = v217;
          if (v101 > v217)
            interchange_compression::decompressor::decompress();
          LODWORD(v103) = v43;
          v104 = 0;
          v196 = v45 & 0xFFFFFFFE;
          memset(&v200[1], 0, 96);
          if (v103 <= 1)
            v103 = 1;
          else
            v103 = v103;
          v185 = (interchange_compression *)v103;
          v105 = v200;
          v200[0] = 0uLL;
          v106 = v189;
          do
          {
            if (v106 == 27)
            {
              v107 = 0;
            }
            else
            {
              v107 = 0;
              v108 = (unsigned int *)&v205;
              v109 = v105;
              v110 = v185;
              do
              {
                v112 = *v108++;
                v111 = v112;
                if (v112)
                {
                  *v109 = bit_pack::unpack((bit_pack *)v214, v111);
                  v107 += v111;
                }
                v109 += 7;
                v110 = (interchange_compression *)((char *)v110 - 1);
              }
              while (v110);
              if (v107 > v100)
                interchange_compression::decompressor::decompress();
              v101 = v218;
              v102 = v217;
              v106 = v189;
            }
            v101 += v100 - v107;
            v218 = v101;
            if (v101 > v102)
              interchange_compression::decompressor::decompress();
            ++v104;
            v105 = (_OWORD *)((char *)v105 + 4);
          }
          while (v104 != 7);
          if (v106 != 27)
          {
            v113 = 0;
            v114 = v199;
            do
            {
              v115 = interchange_compression::format_table[13 * v106 + 3 + (_QWORD)v113];
              v116 = interchange_compression::get_id((interchange_compression *)v115);
              v117 = 0;
              v118 = 0;
              v119 = *(_QWORD *)&interchange_compression::dq_consts[160 * v116 + 2 + 10 * v221[(_QWORD)v113]];
              v120 = *((_DWORD *)&v205 + (_QWORD)v113);
              v121 = v119 >> v120;
              if (v119 >> v120 <= 1)
                v121 = 1;
              if (v121 >> 1 >= (unint64_t)(1 << (v115
                                                         - *((_DWORD *)&v207 + (_QWORD)v113))) >> 1)
                v122 = (unint64_t)(1 << (v115
                                                - *((_DWORD *)&v207 + (_QWORD)v113))) >> 1;
              else
                v122 = v121 >> 1;
              v123 = (1 << (v115 - 1));
              v124 = *((unsigned int *)&v203 + (_QWORD)v113);
              v125 = ~(-1 << v120);
              v126 = v119 + v124;
              v127 = 1 << v115;
              if (!(_DWORD)v124)
                v122 = 0;
              if (v115 == 16)
                v128 = 31744;
              else
                v128 = 2139095040;
              if (v115 == 16)
                v129 = 64512;
              else
                v129 = 4286578688;
              if (v115 == 16)
                v130 = 32256;
              else
                v130 = 2143289344;
              v131 = 4290772992;
              if (v115 == 16)
                v131 = 65024;
              v132 = v114;
              do
              {
                if (v120)
                {
                  if (v117 == *((_DWORD *)&v201 + (_QWORD)v113))
                  {
                    v133 = v122;
                    v134 = v124 == v123;
                  }
                  else
                  {
                    v135 = *((unsigned int *)v200 + 7 * (_QWORD)v113 + v118);
                    v134 = (v123 - v124) / v121 == v135;
                    if (v135 > v125)
                      interchange_compression::decompressor::decompress();
                    if (v135 | v124)
                    {
                      if (v126 < v127 || (v133 = v127 - 1, v135 != v125))
                        v133 = (v121 >> 1) + v121 * v135;
                    }
                    else
                    {
                      v133 = 0;
                    }
                    ++v118;
                  }
                }
                else
                {
                  v133 = 0;
                  v134 = v121 > v123 - v124;
                }
                v136 = v133 + v124;
                v137 = v136;
                if (v197 == 1)
                {
                  if (v136 < v128 || (v137 = (v128 - 1), v136 >= v130))
                  {
                    if (v136 < v130 || (v137 = v123, v136 >= v123))
                    {
                      v138 = v136 < v131 && v136 >= v129;
                      v137 = (v129 - 1);
                      if (!v138)
                        v137 = v136;
                    }
                  }
                }
                if (v137 >= v127)
                  v139 = v127 - 1;
                else
                  v139 = v137;
                if (v134)
                  v140 = 0;
                else
                  v140 = v139 ^ v123;
                if (v196 != 2)
                  v140 = v139;
                *v132 = v140;
                v132 += 4;
                ++v117;
              }
              while (v117 != 8);
              v113 = (interchange_compression *)((char *)v113 + 1);
              v114 += 4;
              v106 = v189;
            }
            while (v113 != v185);
          }
          a2 = v178;
          goto LABEL_193;
        }
        v47 = 0;
        if (v184 <= 1)
          v48 = 1;
        else
          v48 = v184;
        v49 = &interchange_compression::format_table[13 * v13 + 3];
        v50 = v213;
        v51 = v49;
        v191 = v48;
        do
        {
          v53 = *v51++;
          v52 = v53;
          if (v53 == 2)
          {
            v54 = 1;
          }
          else if ((v52 - 8) >= 5)
          {
            v54 = 4;
            if (v52 != 16 && v52 != 32)
              interchange_compression::decompressor::decompress();
          }
          else
          {
            v54 = 3;
          }
          *v50++ = bit_pack::unpack((bit_pack *)v214, v54);
          v47 += v54;
          --v48;
        }
        while (v48);
        v195 = v47;
        v55 = 0;
        v56 = v221;
        v57 = v220;
        v58 = (int *)v213;
        v59 = v191;
        while (1)
        {
          v61 = *v49++;
          v60 = v61;
          if (v61 == 2)
          {
            v62 = *v58;
            *v57 = 0;
            v63 = v62 & 1;
            v64 = v56;
LABEL_95:
            *v64 = v63;
            goto LABEL_96;
          }
          v192 = v49;
          v65 = v59;
          v66 = v60 - 8 < 5 || v60 == 16;
          if (!v66 && v60 != 32)
            interchange_compression::decompressor::decompress();
          v67 = *v58;
          v68 = v60 & 0xFFFFFFFD;
          if (((v60 & 0xFFFFFFFD) == 8 || v60 == 12) && v67 == 0)
          {
            v71 = bit_pack::get((bit_pack *)v214, v218, 2u);
            v218 += 2;
            v195 += 2;
            v64 = &v221[v55];
            *v57 = 0;
            *v56 = 0;
            v63 = v71 & 3;
            if (v68 == 8)
            {
              v59 = v65;
              if (v63 != 2)
              {
                v49 = v192;
                if (v63 == 1)
                {
                  v63 = 0;
                  *v57 = ~(-1 << v60);
                  goto LABEL_95;
                }
                if ((v71 & 3) != 0)
                {
                  v63 = 2;
                  goto LABEL_95;
                }
                v64 = v56;
                v72 = v57;
                goto LABEL_94;
              }
              v63 = 1;
LABEL_90:
              v49 = v192;
              goto LABEL_95;
            }
            v59 = v65;
            if (v60 == 12)
            {
              v49 = v192;
              if (v63 == 2 || v63 == 1)
                goto LABEL_95;
              if ((v71 & 3) != 0)
              {
                v63 = 3;
                goto LABEL_95;
              }
              v72 = v57;
              v64 = v56;
              goto LABEL_94;
            }
          }
          else
          {
            v64 = &v221[v55];
            *v57 = 0;
            if (v60 > 0xF)
            {
              v63 = v67 & 0xF;
              goto LABEL_90;
            }
            v72 = &v220[v55];
            v73 = v67 & 7;
            *v56 = v73;
            if (v68 == 8)
            {
              if (!v73)
              {
                v49 = v192;
                goto LABEL_94;
              }
              v63 = v73 + 2;
              goto LABEL_90;
            }
            if (v60 == 12)
            {
              v49 = v192;
              if (v73)
              {
                v63 = v73 + 3;
                goto LABEL_95;
              }
LABEL_94:
              v63 = 0;
              *v72 = 0;
              goto LABEL_95;
            }
          }
          v49 = v192;
LABEL_96:
          ++v55;
          ++v56;
          ++v57;
          ++v58;
          if (!--v59)
            goto LABEL_42;
        }
      }
    }
  }
  v149 = *((unsigned int *)v7 + 85);
  if (interchange_compression::memory_parameters[11 * v149 + 8] == (_DWORD)a3)
  {
    v150 = (a3 & ~(-1 << interchange_compression::memory_parameters[11 * v149 + 7])) + 1;
    v216 = a2;
    v215 = v150 << (v149 == 26);
    v219 = 1;
    v218 = 0;
    v217 = 8 * v215;
    if (v149 == 27)
    {
      v151 = 27;
    }
    else
    {
      v160 = 0;
      do
      {
        (*a4)[0][0][v160] = bit_pack::unpack((bit_pack *)v214, interchange_compression::format_table[13 * v149 + 3 + v160]);
        ++v160;
        v149 = *((unsigned int *)v7 + 85);
      }
      while (v160 < interchange_compression::format_table[13 * v149 + 2]);
      v151 = *((_DWORD *)v7 + 85);
    }
    v161 = 0;
    for (i = 0; i != 4; ++i)
    {
      v163 = 0;
      v164 = v161;
      do
      {
        if (v151 == 27)
        {
          v151 = 27;
        }
        else
        {
          v165 = 0;
          do
          {
            *(unsigned int *)((char *)&(*a4)[0][0][v165] + v164) = (*a4)[0][0][v165];
            ++v165;
            v151 = *((_DWORD *)v7 + 85);
          }
          while (v165 < interchange_compression::format_table[13 * v151 + 2]);
        }
        ++v163;
        v164 += 16;
      }
      while (v163 != 8);
      v161 += 128;
    }
    return 1;
  }
  if (interchange_compression::memory_parameters[11 * v149 + 9] == (_DWORD)a3)
  {
    v152 = 0;
    v153 = interchange_compression::memory_parameters[11 * v149 + 5];
    v216 = a2;
    v215 = v153;
    v219 = 1;
    v218 = 0;
    v217 = 8 * v153;
    do
    {
      if (v149 != 27)
      {
        v154 = 0;
        v155 = (uint32x4_t)vdupq_n_s32(v152);
        v156.i64[0] = 0x100000001;
        v156.i64[1] = 0x100000001;
        v157 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_1B5636590), v156), (uint32x4_t)xmmword_1B5636580);
        v158 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v155, (uint32x4_t)xmmword_1B5636570), v156), (uint32x4_t)xmmword_1B5636580);
        v159 = (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v158.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)).u32[0] | v158.i32[1])][vorr_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)).u32[0] | v157.i32[1]];
        do
        {
          v159[v154] = bit_pack::unpack((bit_pack *)v214, interchange_compression::format_table[13 * v149 + 3 + v154]);
          ++v154;
          v149 = *((unsigned int *)v7 + 85);
        }
        while (v154 < interchange_compression::format_table[13 * v149 + 2]);
      }
      ++v152;
    }
    while (v152 != 32);
    if (*((_DWORD *)v7 + 87))
      interchange_compression::decompressor::decompress();
    return 1;
  }
  if (interchange_compression::memory_parameters[11 * v149 + 10] == (_DWORD)a3)
  {
    for (j = 0; j != 32; ++j)
    {
      v168 = (uint32x4_t)vdupq_n_s32(j);
      v169.i64[0] = 0x100000001;
      v169.i64[1] = 0x100000001;
      v170 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v168, (uint32x4_t)xmmword_1B5636590), v169), (uint32x4_t)xmmword_1B5636580);
      v171 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v168, (uint32x4_t)xmmword_1B5636570), v169), (uint32x4_t)xmmword_1B5636580);
      interchange_compression::format_info::unpack_pixel((interchange_compression::format_info *)&interchange_compression::format_table[13 * v149], a2, (*a4)[(unint64_t)(vorr_s8(*(int8x8_t *)v171.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL)).u32[0] | v171.i32[1])][vorr_s8(*(int8x8_t *)v170.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)).u32[0] | v170.i32[1]]);
      v149 = *((unsigned int *)v7 + 85);
      a2 += interchange_compression::format_table[13 * v149 + 1];
    }
    if (*((_DWORD *)v7 + 87))
      interchange_compression::decompressor::decompress();
    return 1;
  }
  v172 = ((a3 & ~(-1 << v8)) + 1) << (v149 == 26);
  v173 = interchange_compression::memory_parameters[11 * v149 + 5];
  v216 = a2;
  if (v173 >= v172)
    v173 = v172;
  v215 = v173;
  v219 = 1;
  v218 = 0;
  v217 = 8 * v173;
  if (interchange_compression::decompressor::unpack_header(v7, a2, a3, (bit_pack *)v214))
  {
    interchange_compression::decompressor::decompress_pixels(v7, a2, a3, (bit_pack *)v214, a4);
    interchange_compression::decompressor::decorrelate(v7, a4);
    return 1;
  }
LABEL_233:
  interchange_compression::decompressor::fill_subblock_error_color((uint64_t)v7, a4);
  return 0;
}

uint64_t interchange_compression::header::set(interchange_compression::header *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v6;
  uint64_t result;
  char *v8;

  v6 = a3 + 4 * a2;
  result = interchange_compression::header::get_size(this, a2, a3);
  *((_DWORD *)this + 3 * v6 + 1) = result;
  if ((unint64_t)a4 >> result)
    interchange_compression::header::set();
  v8 = (char *)this + 12 * v6;
  *((_DWORD *)v8 + 2) = a4;
  *((_DWORD *)v8 + 3) = 1;
  return result;
}

uint64_t interchange_compression::header::get_size(interchange_compression::header *this)
{
  int v2;
  uint64_t v3;
  unsigned int i;
  unsigned int v5;

  v2 = *(_DWORD *)this;
  v3 = interchange_compression::header::header_layout_table[15 * *(unsigned int *)this + 14];
  for (i = 3; i != 7; ++i)
  {
    if (v2 == 27)
    {
      v2 = 27;
    }
    else
    {
      v5 = 0;
      do
      {
        v3 = interchange_compression::header::get_size(this, i, v5++) + v3;
        v2 = *(_DWORD *)this;
      }
      while (v5 < interchange_compression::format_table[13 * *(unsigned int *)this + 2]);
    }
  }
  return v3;
}

uint64_t interchange_compression::header::get_size(interchange_compression::header *this, unsigned int a2, unsigned int a3)
{
  if (a2 <= 1)
    return interchange_compression::header::header_layout_table[15 * *(unsigned int *)this + 1 + 4 * a2 + a3];
  if (a2 == 4)
  {
    if (!*((_DWORD *)this + 3 * a3 + 3))
      interchange_compression::header::get_size();
    if (!*((_DWORD *)this + 3 * a3 + 15))
      interchange_compression::header::get_size();
    if ((*((_BYTE *)this + 12 * a3 + 8) & 8) != 0)
      return (*((_DWORD *)this + 3 * a3 + 14) + 1);
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 == 2)
      return interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3];
    if (a2 - 5 > 1)
      interchange_compression::header::get_size();
    if (!*((_DWORD *)this + 3 * a3 + 3))
      interchange_compression::header::get_size();
    if ((*((_DWORD *)this + 3 * a3 + 2) & 3) == 2)
      return interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3] >> 1;
    return 0;
  }
  if (!*((_DWORD *)this + 3 * a3 + 3))
    interchange_compression::header::get_size();
  if ((*((_BYTE *)this + 12 * a3 + 8) & 4) == 0)
    return 0;
  if (interchange_compression::format_table[13 * *(unsigned int *)this + 3 + a3] == 32)
    return 16;
  else
    return 8;
}

uint64_t interchange_compression::get_id(interchange_compression *this)
{
  int v1;
  int v2;
  uint64_t result;

  v1 = (int)this;
  v2 = (_DWORD)this - 8;
  result = 0;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 2:
      result = 1;
      break;
    case 4:
      result = 2;
      break;
    case 8:
      result = 3;
      break;
    default:
      if (v1 == 32)
      {
        result = 4;
      }
      else
      {
LABEL_5:
        if (v1 == 2)
          result = 5;
        else
          result = 6;
        if ((v1 | 2) != 2)
          interchange_compression::get_id(v1);
      }
      break;
  }
  return result;
}

uint64_t interchange_compression::derive_sharing(uint64_t this, uint64_t a2, unsigned int *a3, unsigned int *a4, int (*a5)[4], int (*a6)[4])
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  signed int v20;
  signed int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v33;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;

  v6 = *(_DWORD *)(a2 + 12);
  if (v6 == 5)
  {
    v7 = a3[3];
    if (v7 >= 2)
      interchange_compression::derive_sharing();
    if (v7)
      v8 = 8;
    else
      v8 = 5;
    a3[3] = v8;
    *(_DWORD *)(a2 + 12) = 1;
  }
  if (!(_DWORD)this)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_19;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = -1;
  do
  {
    v14 = a3[v9];
    if (v14 > v12 || v9 == 1 && v14 == v12)
    {
      v12 = a3[v9];
      v11 = v9;
    }
    if (v14 < v13)
    {
      v13 = a3[v9];
      v10 = v9;
    }
    v15 = interchange_compression::dq_consts[160 * *(unsigned int *)(a2 + 4 * v9) + 6 + 10 * v14];
    (*a5)[v9] = v15;
    a4[v9++] = v15;
  }
  while (this != v9);
  if ((_DWORD)this != 1)
  {
LABEL_19:
    v16 = (v11 + 1) % 3;
    if (v16 == v10)
      v16 = (v11 + 2) % 3;
    v17 = a3[v16];
    v18 = a3[6 - (v11 + v10) - v16];
    v19 = v17 > v18;
    if (v17 <= v18)
      v20 = v16;
    else
      v20 = 6 - (v11 + v10) - v16;
    if (v19)
      v21 = v16;
    else
      v21 = 6 - (v11 + v10) - v16;
    v22 = v11;
    v23 = a3[v11];
    v24 = v10;
    v25 = a3[v10];
    if ((_DWORD)this == 2)
    {
      if (v23 == v25 || (int)a4[v10] < 1)
      {
LABEL_52:
        if (v6 == 5)
        {
          *(_DWORD *)(a2 + 12) = 5;
          a3[3] = a3[3] != 5;
          if ((int)a4[3] >= 1)
            interchange_compression::derive_sharing();
        }
        return this;
      }
      (*a5)[v10] = 0;
      v26 = a4[v10];
      v27 = (*a5)[v22];
      goto LABEL_31;
    }
    v29 = v20;
    v30 = a3[v20];
    v31 = v21;
    if (v23 - v30 <= 1 && v25 <= 1)
    {
      (*a5)[v24] = 0;
      v36 = 1431655766 * (int)a4[v24];
      (*a5)[v29] += HIDWORD(v36) + (v36 >> 63);
      v37 = 1431655766 * (int)(a4[v24] + 1);
      (*a5)[v21] += HIDWORD(v37) + (v37 >> 63);
      v38 = 1431655766 * (int)(a4[v24] + 2);
      v39 = HIDWORD(v38) + (v38 >> 63);
      v40 = (*a5)[v22];
LABEL_46:
      v28 = v39 + v40;
      goto LABEL_51;
    }
    v33 = a3[v21];
    if (v23 - v33 <= 1 && v25 <= 1)
    {
      (*a5)[v24] = 0;
      v41 = a4[v29] & ((int)a4[v29] >> 31);
      (*a5)[v29] = v41;
      (*a5)[v31] += (int)(a4[v24] - v41 + a4[v29]) / 2;
      v42 = a4[v24] + a4[v29] - (*a5)[v29];
      if ((int)(v42 + 1) >= 0)
        v43 = v42 + 1;
      else
        v43 = v42 + 2;
      v28 = (*a5)[v22] + (v43 >> 1);
      goto LABEL_51;
    }
    if (v33 - v25 > 1)
    {
      if (v33 - v25 != 2)
        goto LABEL_62;
      v35 = a4[v22];
    }
    else
    {
      v35 = a4[v22];
      if ((v35 & 0x80000000) == 0)
        goto LABEL_62;
      this = a4[v31];
      if ((int)this > 0)
      {
LABEL_59:
        v44 = 0;
        (*a5)[v24] = 0;
        (*a5)[v29] = 0;
        if ((int)(a4[v29] + a4[v24]) >= 6)
          v44 = a4[v31];
        (*a5)[v31] = v44;
        v39 = a4[v24] - v44 + a4[v29];
        v40 = a4[v31] + (*a5)[v22];
        goto LABEL_46;
      }
    }
    if (v35 <= -2 && (int)a4[v31] >= 1)
      goto LABEL_59;
LABEL_62:
    if (!v25 || (int)a4[v24] < 1 || (int)a4[v29] < 1 || (a4[v31] & 0x80000000) != 0 || (int)a4[v22] > -2)
    {
      if (v23 != v25 && (int)a4[v24] >= 1)
      {
        (*a5)[v24] = 0;
        (*a5)[v22] += a4[v24];
      }
      if (v33 != v30 && (int)a4[v29] >= 1)
      {
        (*a5)[v29] = 0;
        (*a5)[v31] += a4[v29];
      }
      goto LABEL_52;
    }
    (*a5)[v24] = 0;
    (*a5)[v29] = 0;
    (*a5)[v31] = a4[v31];
    v27 = a4[v29];
    v26 = a4[v24] + (*a5)[v22];
LABEL_31:
    v28 = v27 + v26;
LABEL_51:
    (*a5)[v22] = v28;
    goto LABEL_52;
  }
  return this;
}

uint64_t interchange_compression::adjust_level(uint64_t this, int a2, int a3, int a4, _DWORD *a5, unsigned int *a6, unsigned int *a7)
{
  int v7;

  v7 = a4 - a3;
  if (a4 - a3 < 0)
  {
    if (interchange_compression::dq_consts[160 * this + 7 + 10 * a2] < a3 - a4)
    {
      --*a6;
      if (!interchange_compression::dq_consts[160 * this + 8 + 10 * a2])
      {
        v7 = -1;
        goto LABEL_4;
      }
    }
  }
  else if (a4 != a3)
  {
    *a6 += v7;
LABEL_4:
    *a5 += v7;
  }
  return this;
}

interchange_compression::decompressor *interchange_compression::decompressor::decompressor(interchange_compression::decompressor *this, unsigned int a2, interchange_compression *a3, unsigned int a4)
{
  int v5;

  *(_DWORD *)this = a2;
  if (interchange_compression::header::header_layout_table[15 * a2] != a2)
    interchange_compression::decompressor::decompressor();
  v5 = (int)a3;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_DWORD *)this + 85) = a2;
  *((_DWORD *)this + 87) = (_DWORD)a3;
  *((_DWORD *)this + 88) = a4;
  if (!interchange_compression::check_valid_lossy_level(a3, a2))
    interchange_compression::decompressor::decompressor();
  if (v5 && a4 >= 4)
    interchange_compression::decompressor::decompressor();
  *((_DWORD *)this + 86) = LOBYTE(interchange_compression::format_table[13 * a2 + 12]);
  return this;
}

uint64_t interchange_compression::decompressor::get_subblock_size(interchange_compression::decompressor *this, unsigned int a2)
{
  uint64_t v2;
  int v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;

  if (a2 >= 0xF0)
  {
    v2 = *((unsigned int *)this + 87);
    if ((v2 - 1) <= 2)
      return interchange_compression::lossy_parameters[28 * *((unsigned int *)this + 85) + 8 + v2];
  }
  v4 = *((_DWORD *)this + 85);
  if (interchange_compression::memory_parameters[11 * v4 + 8] == a2)
    return ((a2 & ~(-1 << interchange_compression::memory_parameters[11 * v4 + 7])) + 1) << (v4 == 26);
  if (interchange_compression::memory_parameters[11 * v4 + 9] == a2)
    return interchange_compression::memory_parameters[11 * v4 + 5];
  if (!a2)
    return 0;
  v5 = (char *)&interchange_compression::memory_parameters[11 * v4];
  v6 = ((a2 & ~(-1 << *((_DWORD *)v5 + 7))) + 1) << (v4 == 26);
  v7 = *((_DWORD *)v5 + 5);
  if (v7 >= v6)
    return v6;
  else
    return v7;
}

uint64_t interchange_compression::decompressor::fill_subblock_error_color(uint64_t this, unsigned int (*a2)[4][8][4])
{
  unsigned int v2;
  int8x16_t v3;
  uint64_t v4;
  unint64_t v5;
  uint32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int *v9;
  int v10;

  v2 = 0;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  do
  {
    v4 = *(unsigned int *)(this + 340);
    if ((_DWORD)v4 != 27)
    {
      v5 = 0;
      v6 = (uint32x4_t)vdupq_n_s32(v2);
      v7 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B5636590), v3), (uint32x4_t)xmmword_1B5636580);
      v8 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B5636570), v3), (uint32x4_t)xmmword_1B5636580);
      v9 = (*a2)[(unint64_t)(vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0] | v8.i32[1])][vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).u32[0] | v7.i32[1]];
      do
      {
        if (v5 == 1)
          v10 = 0;
        else
          v10 = ~(-1 << interchange_compression::format_table[13 * v4 + 3 + v5]);
        v9[v5++] = v10;
        v4 = *(unsigned int *)(this + 340);
      }
      while (v5 < interchange_compression::format_table[13 * v4 + 2]);
    }
    ++v2;
  }
  while (v2 != 32);
  return this;
}

uint64_t bit_pack::unpack(bit_pack *this, unsigned int a2)
{
  uint64_t result;

  if (a2 >= 0x21)
    bit_pack::unpack();
  result = bit_pack::get(this, *((_DWORD *)this + 135), a2);
  *((_DWORD *)this + 135) += a2;
  return result;
}

void *interchange_compression::format_info::unpack_pixel(interchange_compression::format_info *this, const unsigned __int8 *a2, unsigned int *a3)
{
  size_t v6;
  size_t v7;
  void *result;
  unint64_t v9;
  _BYTE __dst[16];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 1);
  if (v6 <= 0xF)
    v7 = 16 - v6;
  else
    v7 = 0;
  bzero(&__dst[v6], v7);
  result = memcpy(__dst, a2, v6);
  if (*((_DWORD *)this + 2))
  {
    v9 = 0;
    do
    {
      a3[v9] = (*(_QWORD *)&__dst[((unint64_t)*((unsigned int *)this + v9 + 7) >> 3) & 0x1FFFFFF8] >> *((_DWORD *)this + v9 + 7)) & ~(-1 << *((_DWORD *)this + v9 + 3));
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 2));
  }
  return result;
}

BOOL interchange_compression::decompressor::unpack_header(interchange_compression::decompressor *this, const unsigned __int8 *a2, unsigned int a3, bit_pack *a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  unsigned int v11;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int i;
  unsigned int v19;
  unsigned int size;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  char *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  int v44;
  int v45;

  v4 = *((_DWORD *)this + 85);
  v5 = interchange_compression::memory_parameters[11 * v4 + 7];
  v6 = 8 - v5;
  v7 = interchange_compression::header::header_layout_table[15 * v4 + 1];
  v8 = v7 - (8 - v5);
  if (v7 <= 8 - v5)
    interchange_compression::decompressor::unpack_header();
  v10 = *((_DWORD *)a4 + 128);
  v11 = v6 + 8 * v10;
  if (v11 < interchange_compression::header::header_layout_table[15 * v4 + 14])
    return 0;
  v14 = v5 - 8;
  v15 = (a3 >> v5) & ~(-1 << v6);
  v16 = 8 * v10;
  v17 = bit_pack::unpack(a4, v8);
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  interchange_compression::header::set(this, 0, 0, (v17 << v6) | v15);
  for (i = 1; i != 28; ++i)
  {
    if (i == 12)
    {
      if (v11 < interchange_compression::header::get_size(this))
        return 0;
    }
    else
    {
      if (i != 8)
      {
        v19 = i >> 2;
        if (i >> 2 == 6)
          continue;
        goto LABEL_11;
      }
      bit_pack::unpack(a4, interchange_compression::header::header_layout_table[15 * *((unsigned int *)this + 85) + 13]+ v14- *((_DWORD *)a4 + 135));
    }
    v19 = i >> 2;
LABEL_11:
    size = interchange_compression::header::get_size(this, v19, i & 3);
    v21 = bit_pack::unpack(a4, size);
    interchange_compression::header::set(this, v19, i & 3, v21);
    if (v19 == 5)
    {
      v22 = interchange_compression::header::get_size(this, 6u, i & 3);
      v23 = bit_pack::unpack(a4, v22);
      interchange_compression::header::set(this, 6u, i & 3, v23);
    }
  }
  v24 = interchange_compression::header::get_size(this);
  v25 = bit_pack::unpack(a4, v24 + v14 - *((_DWORD *)a4 + 135));
  v28 = *((_DWORD *)this + 85);
  if (v28 == 21)
  {
    if (!*((_DWORD *)this + 6))
      interchange_compression::decompressor::unpack_header(v25, v26, (uint64_t)v27);
    if (!*((_DWORD *)this + 9))
      interchange_compression::decompressor::unpack_header(v25, v26, (uint64_t)v27);
    v29 = *((_DWORD *)this + 5);
    if ((v29 & 0x10) != 0)
    {
      v30 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 86) = 2;
      interchange_compression::header::set(this, 0, 1u, v29 & 0xFFFFFFEF | (16 * ((v30 >> 4) & 1)));
      interchange_compression::header::set(this, 0, 2u, v30 & 0xFFFFFFEF);
      v28 = *((_DWORD *)this + 85);
    }
    else
    {
      v28 = 21;
    }
  }
  v31 = 0;
  v32 = 0;
  v33 = &interchange_compression::format_table[13 * v28];
  LODWORD(v34) = v33[2];
  if (v34 <= 1)
    v34 = 1;
  else
    v34 = v34;
  v35 = v33 + 3;
  do
  {
    if (v28 != 27)
    {
      v26 = 0;
      v36 = (char *)this + 12;
      v27 = (char *)this + 12;
      do
      {
        v37 = *(_DWORD *)v27;
        v27 += 12;
        if (!v37)
          interchange_compression::decompressor::unpack_header(15, v26, (uint64_t)v27);
        v38 = *(v36 - 4);
        if ((v38 & 4) != 0)
        {
          if (!*((_DWORD *)this + 3 * (v26 + 12) + 3))
            interchange_compression::decompressor::unpack_header(15, v26, (uint64_t)v27);
          v39 = *((_DWORD *)this + 3 * (v26 + 12) + 2);
        }
        else
        {
          v39 = 0;
        }
        if ((~v38 & 3) != 0)
        {
          if (!*((_DWORD *)this + 3 * (v26 + 4) + 3))
            interchange_compression::decompressor::unpack_header(15, v26, (uint64_t)v27);
          v41 = v35[v26];
          if (v41 == 32)
            v42 = 2;
          else
            v42 = 1;
          v43 = v39 >> ((_DWORD)v31 << v42);
          if (v41 == 32)
            v44 = 15;
          else
            v44 = 3;
          v40 = *((_DWORD *)this + 3 * (v26 + 4) + 2) - (v43 & v44) + 1;
          if (v40 > v41)
            return 0;
        }
        else
        {
          v40 = 0;
        }
        v32 += interchange_compression::NUM_PIXELS_REGION[v31] * v40;
        ++v26;
        v36 = v27;
      }
      while (v34 != v26);
    }
    ++v31;
  }
  while (v31 != 4);
  if (v28 == 26)
    v45 = 15;
  else
    v45 = 7;
  if (((*((_DWORD *)a4 + 135) + v32 + v45) & ~v45) != v16)
    return 0;
  return interchange_compression::header::error_check(this, v26, (uint64_t)v27) == 0;
}

_DWORD *interchange_compression::decompressor::decompress_pixels(_DWORD *this, const unsigned __int8 *a2, uint64_t a3, bit_pack *a4, unsigned int (*a5)[4][8][4])
{
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  char v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  int v65;
  _BYTE *v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  _DWORD *v75;
  _BYTE *v76;
  unsigned int *v77;
  char v78;
  int v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  int v84;
  unsigned int (*v85)[4][8][4];
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[128];
  uint64_t v91;

  v6 = this;
  v7 = 0;
  v8 = 0;
  v91 = *MEMORY[0x1E0C80C00];
  v75 = this + 3;
  v85 = a5;
  do
  {
    v9 = 0;
    v74 = v7;
    v10 = v7 >> 2;
    v89 = v10 << 6;
    v77 = (*a5)[2 * (unint64_t)(v8 & 1)][4 * v10];
    v84 = 4 * v10;
    if (interchange_compression::NUM_PIXELS_REGION[v8] <= 1u)
      v11 = 1;
    else
      v11 = interchange_compression::NUM_PIXELS_REGION[v8];
    v12 = v6[85];
    v13 = v12;
    v87 = v11;
    do
    {
      if (v13 == 27)
      {
        v14 = v9 + 1;
      }
      else
      {
        v15 = 0;
        v14 = v9 + 1;
        v16 = v75;
        v17 = v75;
        do
        {
          v18 = *v17;
          v17 += 3;
          if (!v18)
            interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
          v19 = *((_BYTE *)v16 - 4);
          if ((v19 & 4) != 0)
          {
            if (!v6[3 * (v15 + 12) + 3])
              interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
            v20 = v6[3 * (v15 + 12) + 2];
          }
          else
          {
            v20 = 0;
          }
          v21 = v19 & 3;
          if (v21 == 3)
          {
            v22 = 0;
          }
          else
          {
            if (!v6[3 * (v15 + 4) + 3])
              interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
            v23 = interchange_compression::format_table[13 * v13 + 3 + v15] == 32;
            if (interchange_compression::format_table[13 * v13 + 3 + v15] == 32)
              v24 = 2;
            else
              v24 = 1;
            v25 = v20 >> ((_DWORD)v8 << v24);
            if (v23)
              v26 = 15;
            else
              v26 = 3;
            v22 = v6[3 * (v15 + 4) + 2] - (v25 & v26) + 1;
          }
          this = (_DWORD *)bit_pack::unpack(a4, v22);
          if (v22 >= 0x21)
            interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
          if (v21 == 1)
            v27 = 0;
          else
            v27 = 7;
          if (v9 != 6)
            v27 = v9 + 1;
          if (v8)
            v27 = v9;
          v28 = (uint32x4_t)vdupq_n_s32(v27);
          v29.i64[0] = 0x100000001;
          v29.i64[1] = 0x100000001;
          v30 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B5636590), v29), (uint32x4_t)xmmword_1B5636580);
          v31 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B5636570), v29), (uint32x4_t)xmmword_1B5636580);
          *(_DWORD *)&v90[64
                        * (unint64_t)(vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).u32[0] | v31.i32[1])+ 16* (vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0] | v30.i32[1])+ 4 * v15] = (int)((_DWORD)this << -(char)v22) >> -(char)v22;
          v13 = v6[85];
          ++v15;
          v16 = v17;
        }
        while (v15 < interchange_compression::format_table[13 * v13 + 2]);
        v12 = v6[85];
        a5 = v85;
        v11 = v87;
      }
      v9 = v14;
    }
    while (v14 != v11);
    if (v12 != 27)
    {
      v32 = 0;
      v33 = (2 * (_DWORD)v8) & 2;
      v76 = v90;
      do
      {
        if (!v6[3 * v32 + 3])
          interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
        v34 = v32;
        v35 = v6[3 * v32 + 2];
        if ((v35 & 4) != 0)
        {
          if (!v6[3 * v32 + 39])
            interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
          v36 = v6[3 * v32 + 38];
        }
        else
        {
          v36 = 0;
        }
        v37 = v6[3 * v32 + 2];
        v38 = interchange_compression::format_table[13 * v12 + 3 + v34] == 32;
        if (interchange_compression::format_table[13 * v12 + 3 + v34] == 32)
          v39 = 2;
        else
          v39 = 1;
        v40 = v36 >> ((_DWORD)v8 << v39);
        if (v38)
          v41 = 15;
        else
          v41 = 3;
        v42 = v40 & v41;
        v43 = v35 & 3;
        if (v43 == 3)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
        }
        else
        {
          if (!v6[3 * (v34 + 4) + 3])
            interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
          v44 = v6[3 * (v34 + 4) + 2] - v42 + 1;
          v23 = (v35 & 1 | 2) == 2;
          v45 = 3;
          if (v23)
          {
            v45 = 0;
            v46 = 0;
          }
          else
          {
            v46 = 1;
          }
        }
        v47 = &v6[3 * (v34 + 8)];
        v50 = v47[3];
        v49 = v47 + 3;
        v48 = v50;
        if (!v50)
          interchange_compression::decompressor::unpack_header(v48, (uint64_t)a2, a3);
        v51 = 0;
        v52 = (uint64_t)&v6[3 * (v34 + 8) + 1];
        v54 = *(_DWORD *)(v52 + 4);
        v53 = (_DWORD *)(v52 + 4);
        (*a5)[v46][v45][v34] = v54;
        v55 = (v42 == 0) & (v37 >> 3);
        v56 = (uint64_t)&v6[3 * (v34 + 16) + 1];
        this = (_DWORD *)(v56 + 8);
        a2 = (const unsigned __int8 *)(v56 + 4);
        a3 = -v44 & 0x1F;
        v57 = (uint64_t)&v6[3 * (v34 + 20) + 1];
        v83 = (_DWORD *)(v57 + 8);
        v58 = (uint64_t)&v6[3 * (v34 + 24) + 1];
        v81 = (_DWORD *)(v58 + 4);
        v82 = (_DWORD *)(v58 + 8);
        v80 = (_DWORD *)(v57 + 4);
        v59 = 1;
        do
        {
          v60 = 0;
          v61 = 0;
          v78 = v59;
          v62 = -v51;
          v88 = v8 & 1 ^ v51 ^ 1;
          v86 = v51 | v33;
          v64 = &v77[32 * v51];
          v65 = 3;
          v66 = &v76[64 * v51];
          do
          {
            if (v62 != v33 || v89 + v60 * 4)
            {
              if (v55)
              {
                if (!*this)
                  interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
                v67 = *(_DWORD *)a2;
              }
              else
              {
                v67 = 0;
              }
              if (v44 >= 0x21)
                interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
              v68 = v67 << (-(char)v44 & 0x1F) >> (-(char)v44 & 0x1F);
              if (v43 == 2)
              {
                if (!*v83)
                  interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
                v72 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v72 >= 0x42)
                  interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
                if (!*v82)
                  interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
                if (!*v49)
                  interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
                if (v72 >= 0x21)
                  interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
                a5 = v85;
                v73 = (int)(((*v53
                            - v68
                            + *(_DWORD *)&v66[v60 * 4]
                            + ((int)(*v81 << -(v72 >> 1)) >> -(v72 >> 1)) * v86
                            + ((int)(*v80 << -(v72 >> 1)) >> -(v72 >> 1)) * (v84 + v61)) & ~(-1 << v72)) << -(char)v72) >> -(char)v72;
                goto LABEL_84;
              }
              if (v43 == 1)
              {
                v70 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v70 >= 0x21)
                  interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
                if ((v8 & 2) != 0)
                  v71 = v61;
                else
                  v71 = v65;
                v63 = v88 | v33;
                v79 = (2 * v8) & 0x3FFFFFFC;
                (*a5)[v63][v79][4 * v71 + v34] = (int)((((*a5)[(unint64_t)dword_1B56382FC[16 * v63
                                                                                               + 1
                                                                                               + 2 * v71
                                                                                               + 2 * v79]][dword_1B56382FC[16 * v63 + 2 * v71 + 2 * v79]][v34]
                                                       - v68
                                                       + *(_DWORD *)&v90[64 * v88 + 16 * v71 + 4 * v34]) & ~(-1 << v70)) << -(char)v70) >> -(char)v70;
              }
              else
              {
                if (v43)
                {
                  v73 = (*a5)[0][0][v34];
LABEL_84:
                  v64[v60] = v73;
                  goto LABEL_85;
                }
                if (!*v49)
                  interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, a3);
                v69 = interchange_compression::format_table[13 * v6[85] + 3 + v34];
                if (v69 >= 0x21)
                  interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, a3);
                v64[v60] = (int)(((*v53 - v68 + *(_DWORD *)&v66[v60 * 4]) & ~(-1 << v69)) << -(char)v69) >> -(char)v69;
              }
            }
LABEL_85:
            ++v61;
            --v65;
            v60 += 4;
          }
          while (v60 != 16);
          v59 = 0;
          v51 = 1;
        }
        while ((v78 & 1) != 0);
        v32 = v34 + 1;
        v12 = v6[85];
        v76 += 4;
        ++v77;
      }
      while ((int)v34 + 1 < interchange_compression::format_table[13 * v12 + 2]);
    }
    ++v8;
    v7 = v74 + 2;
  }
  while (v8 != 4);
  return this;
}

_DWORD *interchange_compression::decompressor::decorrelate(_DWORD *this, unsigned int (*a2)[4][8][4])
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)[4][8][4];
  uint64_t v5;
  unsigned int (*v6)[4][8][4];
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;

  v2 = 0;
  v3 = this[85];
  v4 = a2;
  do
  {
    v5 = 0;
    v6 = v4;
    v7 = v3;
    do
    {
      if (v7 != 27)
      {
        v8 = 0;
        v9 = this + 3;
        do
        {
          if (!*v9)
            interchange_compression::decompressor::unpack_header((uint64_t)this, (uint64_t)a2, (uint64_t)v9);
          if ((*(_BYTE *)(v9 - 1) & 0x10) != 0)
          {
            v10 = this[86];
            if ((_DWORD)v8 != (_DWORD)v10)
            {
              v11 = interchange_compression::format_table[13 * v7 + 3 + v8];
              if (v11 >= 0x21)
                interchange_compression::decompressor::decompress_pixels((uint64_t)this, (uint64_t)a2, (uint64_t)v9);
              (*v6)[0][0][v8] = (int)(((((*a2)[v2][v5][v10] >> (interchange_compression::format_table[13 * v7 + 3 + v10]
                                                              - v11))
                                      + (*v6)[0][0][v8]) & ~(-1 << v11)) << -(char)v11) >> -(char)v11;
              v3 = this[85];
            }
          }
          (*v6)[0][0][v8] &= ~(-1 << interchange_compression::format_table[13 * v3 + 3 + v8]);
          v3 = this[85];
          ++v8;
          v9 += 3;
          v7 = v3;
        }
        while (v8 < interchange_compression::format_table[13 * v3 + 2]);
      }
      ++v5;
      v6 = (unsigned int (*)[4][8][4])((char *)v6 + 16);
    }
    while (v5 != 8);
    ++v2;
    v4 = (unsigned int (*)[4][8][4])((char *)v4 + 128);
  }
  while (v2 != 4);
  return this;
}

uint64_t bit_pack::get(bit_pack *this, unsigned int a2, unsigned int a3)
{
  char v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t __dst;

  if (a3 >= 0x21)
    bit_pack::get();
  v3 = a2;
  v4 = *((_DWORD *)this + 134);
  if (a3 + a2 > v4)
  {
    printf("read overflow:  read bit=%d size=%d, total=%d\n", a2, a3, v4);
    __assert_rtn("get", "interchange_bit_pack.h", 85, "0");
  }
  v5 = *((_DWORD *)this + 128);
  __dst = 0;
  v6 = 528;
  if (!*((_BYTE *)this + 544))
    v6 = 520;
  v7 = *(_QWORD *)((char *)this + v6);
  LODWORD(v8) = v5 - (a2 >> 3);
  if (v8 >= 8)
    v8 = 8;
  else
    v8 = v8;
  v9 = -1 << a3;
  memcpy(&__dst, (const void *)(v7 + (a2 >> 3)), v8);
  return (__dst >> (v3 & 7)) & ~(_DWORD)v9;
}

uint64_t interchange_compression::header::error_check(interchange_compression::header *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)this;
  if (!*((_DWORD *)this + 3 * LOBYTE(interchange_compression::format_table[13 * *(unsigned int *)this + 12]) + 3))
    interchange_compression::decompressor::unpack_header((uint64_t)this, a2, a3);
  LODWORD(v4) = (*((unsigned __int8 *)this
                 + 12 * LOBYTE(interchange_compression::format_table[13 * *(unsigned int *)this + 12])
                 + 8) >> 4) & 1;
  if (v3 == 21)
    v4 = 0;
  else
    v4 = v4;
  if (v3 != 27)
  {
    v6 = 0;
    v7 = &interchange_compression::format_table[13 * v3];
    LODWORD(v8) = v7[2];
    if (v8 <= 1)
      v8 = 1;
    else
      v8 = v8;
    v9 = (char *)this + 12;
    v10 = v7 + 3;
    v11 = (char *)this + 12;
    do
    {
      v13 = *(_DWORD *)v11;
      v11 += 12;
      v12 = v13;
      if (!v13)
        interchange_compression::decompressor::unpack_header((uint64_t)this, v12, a3);
      v14 = *(v9 - 4);
      if ((v14 & 3u) - 1 >= 2)
        v15 = v4;
      else
        v15 = v4 | 2;
      if ((v14 & 0x10) != 0)
        LODWORD(v4) = v15;
      if (v3 > 0x16 || (v16 = (1 << v3), (v16 & 0x4000C3) == 0))
      {
        v16 = v4 | 4;
        if ((v14 & 3) == 2)
          LODWORD(v4) = v4 | 4;
      }
      v17 = v14 & 3;
      if (v17 == 3)
      {
        v19 = (v6 + 4);
        v16 = *((unsigned int *)this + 3 * v19 + 3);
        if (!(_DWORD)v16)
          interchange_compression::decompressor::unpack_header((uint64_t)this, v19, v16);
        if (v14 & 4 | *((_DWORD *)this + 3 * v19 + 2))
          LODWORD(v4) = v4 | 0x10;
      }
      else
      {
        v18 = v4 | 8;
        if (v3 != 26)
          v18 = v4;
        if (v17 == 1)
          LODWORD(v4) = v18;
      }
      v20 = *((unsigned int *)this + 3 * (v6 + 4) + 3);
      if (!(_DWORD)v20)
        interchange_compression::decompressor::unpack_header((uint64_t)this, v20, v16);
      a3 = v4 | 0x20;
      if (*((_DWORD *)this + 3 * (v6 + 4) + 2) + 1 <= v10[v6])
        v4 = v4;
      else
        v4 = a3;
      ++v6;
      v9 = v11;
    }
    while (v8 != v6);
  }
  return v4;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 104, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 85, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 90, a4);
}

_QWORD *AVE_DLList_Init(_QWORD *result)
{
  if (!result)
    AVE_DLList_Init_cold_1();
  *result = result;
  result[1] = result;
  return result;
}

BOOL AVE_DLList_Empty(_QWORD *a1)
{
  _QWORD *v1;

  if (!a1)
    AVE_DLList_Empty_cold_1();
  if (!*a1)
    AVE_DLList_Empty_cold_2();
  v1 = (_QWORD *)a1[1];
  if (!v1)
    AVE_DLList_Empty_cold_3();
  return (_QWORD *)*a1 == a1 || v1 == a1;
}

_QWORD *AVE_DLList_PopFront(_QWORD *result)
{
  _QWORD *v1;

  if (!result)
    AVE_DLList_PopFront_cold_1();
  if (!*result)
    AVE_DLList_PopFront_cold_2();
  v1 = (_QWORD *)result[1];
  if (!v1)
    AVE_DLList_PopFront_cold_3();
  result[1] = v1[1];
  *(_QWORD *)v1[1] = result;
  *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t AVE_DLList_Prev(uint64_t a1)
{
  if (!a1)
    AVE_DLList_Prev_cold_1();
  return *(_QWORD *)a1;
}

uint64_t AVE_DLList_Next(uint64_t a1)
{
  if (!a1)
    AVE_DLList_Next_cold_1();
  return *(_QWORD *)(a1 + 8);
}

uint64_t *AVE_DLList_Erase(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  if (!result)
    AVE_DLList_Erase_cold_1();
  v1 = *result;
  if (!*result)
    AVE_DLList_Erase_cold_2();
  v2 = result[1];
  if (!v2)
    AVE_DLList_Erase_cold_3();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)result[1] = v1;
  *result = (uint64_t)result;
  result[1] = (uint64_t)result;
  return result;
}

uint64_t AVE_DLList_Front(_QWORD *a1)
{
  if (!a1)
    AVE_DLList_Front_cold_1();
  if (AVE_DLList_Empty(a1))
    return 0;
  else
    return a1[1];
}

uint64_t AVE_DLList_Back(_QWORD *a1)
{
  if (!a1)
    AVE_DLList_Back_cold_1();
  if (AVE_DLList_Empty(a1))
    return 0;
  else
    return *a1;
}

_QWORD *AVE_DLList_PushBack(_QWORD *result, _QWORD *a2)
{
  if (!result)
    AVE_DLList_PushBack_cold_1();
  if (!a2)
    AVE_DLList_PushBack_cold_2();
  if (!*result)
    AVE_DLList_PushBack_cold_3();
  if (!result[1])
    AVE_DLList_PushBack_cold_4();
  *a2 = *result;
  a2[1] = result;
  *(_QWORD *)(*result + 8) = a2;
  *result = a2;
  return result;
}

uint64_t AVE_DLList_PopBack(uint64_t result)
{
  _QWORD *v1;

  if (!result)
    AVE_DLList_PopBack_cold_1();
  v1 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
    AVE_DLList_PopBack_cold_2();
  if (!*(_QWORD *)(result + 8))
    AVE_DLList_PopBack_cold_3();
  *(_QWORD *)result = *v1;
  *(_QWORD *)(*v1 + 8) = result;
  *v1 = v1;
  v1[1] = v1;
  return result;
}

uint64_t AVE_DLList_Begin(uint64_t a1)
{
  if (!a1)
    AVE_DLList_Begin_cold_1();
  return *(_QWORD *)(a1 + 8);
}

uint64_t AVE_DLList_End(uint64_t result)
{
  if (!result)
    AVE_DLList_End_cold_1();
  return result;
}

uint64_t AVE_DLList_RBegin(uint64_t a1)
{
  if (!a1)
    AVE_DLList_RBegin_cold_1();
  return *(_QWORD *)a1;
}

uint64_t AVE_DLList_REnd(uint64_t result)
{
  if (!result)
    AVE_DLList_REnd_cold_1();
  return result;
}

void AVE_DevCap_Find_cold_1()
{
  __assert_rtn("AVE_DevCap_Find", "AVE_DevCap.cpp", 1758, "pDevCap->psCEntry != __null");
}

void AVE_DevCap_FindByType_cold_1()
{
  __assert_rtn("AVE_DevCap_FindByType", "AVE_DevCap.cpp", 1788, "pDevCap->psCEntry != __null");
}

void AVE_DevCap_Type2Idx()
{
  __assert_rtn("AVE_DevCap_Type2Idx", "AVE_DevCap.cpp", 1853, "idx >= 0");
}

void htpc_entropy::dec_symbols()
{
  __assert_rtn("dec_symbols", "htpc_entropy.h", 190, "bb_avail < 8");
}

{
  __assert_rtn("dec_symbols", "htpc_entropy.h", 155, "bb_avail == 0");
}

void interchange_decompress_plane()
{
  __assert_rtn("interchange_decompress_plane", "interchange.cpp", 99, "depth == 8 || depth == 10");
}

void interchange_compression::decompressor::decompress()
{
  __assert_rtn("skip", "interchange_bit_pack.h", 103, "read_ptr <= size_bits()");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1063, "delta_quant <= ((1ull << delta_bits[c]) - 1)");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 1013, "pixel_unpacked <= legal_pixel_size");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 911, "mode_sz != 0");
}

{
  __assert_rtn("lossy_decompress_dquad", "interchange_lossy.h", 901, "mode_sz != 0");
}

{
  __assert_rtn("decompress", "interchange_decompressor.h", 203, "lossy_level == 0");
}

{
  __assert_rtn("decompress", "interchange_decompressor.h", 212, "lossy_level == 0");
}

void interchange_compression::header::set()
{
  __assert_rtn("set", "interchange_header.h", 86, "_value < (1ull<<size)");
}

void interchange_compression::header::get_size()
{
  __assert_rtn("get_size", "interchange_header.h", 138, "fields[field_id(MODE, comp)].init");
}

{
  __assert_rtn("get_size", "interchange_header.h", 142, "0");
}

{
  __assert_rtn("get_size", "interchange_header.h", 127, "fields[field_id(MODE, comp)].init");
}

{
  __assert_rtn("get_size", "interchange_header.h", 132, "fields[field_id(MODE, comp)].init");
}

{
  __assert_rtn("get_size", "interchange_header.h", 133, "fields[field_id(BITS, comp)].init");
}

void interchange_compression::get_id(int a1)
{
  printf("comp_width = %d\n", a1);
  __assert_rtn("get_id", "interchange_lossy.h", 195, "fmt_id != 6");
}

void interchange_compression::derive_sharing()
{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 357, "start_level[3] <= 0");
}

{
  __assert_rtn("derive_sharing", "interchange_lossy.h", 270, "mode[3] == 0 || mode[3] == 1");
}

void interchange_compression::decompressor::decompressor()
{
  __assert_rtn("decompressor", "interchange_decompressor.h", 41, "lossy_level == 0 || comp_type < COMP_TYPE_INVALID");
}

{
  __assert_rtn("decompressor", "interchange_decompressor.h", 40, "check_valid_lossy_level(lossy_level, format)");
}

{
  __assert_rtn("set_format", "interchange_header.h", 205, "header_layout_table[id].format == id");
}

void bit_pack::unpack()
{
  __assert_rtn("unpack", "interchange_bit_pack.h", 96, "size <= 32");
}

void interchange_compression::decompressor::unpack_header(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("get", "interchange_header.h", a3, "fields[field_id(s, comp)].init");
}

void interchange_compression::decompressor::unpack_header()
{
  __assert_rtn("unpack_header", "interchange_decompressor.h", 238, "header::header_layout_table[format].field_size[0] > shift");
}

void interchange_compression::decompressor::decompress_pixels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2("sign_extend", "interchange_constants.h", a3, "width <= 32");
}

{
  OUTLINED_FUNCTION_1("wrap_to_range", "interchange_constants.h", a3, "width <= 32");
}

void bit_pack::get()
{
  __assert_rtn("get", "interchange_bit_pack.h", 82, "size <= 32");
}

void AVE_DLList_Init_cold_1()
{
  __assert_rtn("AVE_DLList_Init", "AVE_DLList.c", 70, "psNode != ((void *)0)");
}

void AVE_DLList_Empty_cold_1()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 85, "psNode != ((void *)0)");
}

void AVE_DLList_Empty_cold_2()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 86, "psNode->psPrev != ((void *)0)");
}

void AVE_DLList_Empty_cold_3()
{
  __assert_rtn("AVE_DLList_Empty", "AVE_DLList.c", 87, "psNode->psNext != ((void *)0)");
}

void AVE_DLList_PopFront_cold_1()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 344, "psList != ((void *)0)");
}

void AVE_DLList_PopFront_cold_2()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 346, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PopFront_cold_3()
{
  __assert_rtn("AVE_DLList_PopFront", "AVE_DLList.c", 347, "psList->psNext != ((void *)0)");
}

void AVE_DLList_Prev_cold_1()
{
  __assert_rtn("AVE_DLList_Prev", "AVE_DLList.c", 159, "psNode != ((void *)0)");
}

void AVE_DLList_Next_cold_1()
{
  __assert_rtn("AVE_DLList_Next", "AVE_DLList.c", 171, "psNode != ((void *)0)");
}

void AVE_DLList_Erase_cold_1()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 222, "psNode != ((void *)0)");
}

void AVE_DLList_Erase_cold_2()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 224, "psNode->psPrev != ((void *)0)");
}

void AVE_DLList_Erase_cold_3()
{
  __assert_rtn("AVE_DLList_Erase", "AVE_DLList.c", 225, "psNode->psNext != ((void *)0)");
}

void AVE_DLList_Front_cold_1()
{
  __assert_rtn("AVE_DLList_Front", "AVE_DLList.c", 271, "psList != ((void *)0)");
}

void AVE_DLList_Back_cold_1()
{
  __assert_rtn("AVE_DLList_Back", "AVE_DLList.c", 287, "psList != ((void *)0)");
}

void AVE_DLList_PushBack_cold_1()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 323, "psList != ((void *)0)");
}

void AVE_DLList_PushBack_cold_2()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 324, "psNewNode != ((void *)0)");
}

void AVE_DLList_PushBack_cold_3()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 326, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PushBack_cold_4()
{
  __assert_rtn("AVE_DLList_PushBack", "AVE_DLList.c", 327, "psList->psNext != ((void *)0)");
}

void AVE_DLList_PopBack_cold_1()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 365, "psList != ((void *)0)");
}

void AVE_DLList_PopBack_cold_2()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 367, "psList->psPrev != ((void *)0)");
}

void AVE_DLList_PopBack_cold_3()
{
  __assert_rtn("AVE_DLList_PopBack", "AVE_DLList.c", 368, "psList->psNext != ((void *)0)");
}

void AVE_DLList_Begin_cold_1()
{
  __assert_rtn("AVE_DLList_Begin", "AVE_DLList.c", 449, "psList != ((void *)0)");
}

void AVE_DLList_End_cold_1()
{
  __assert_rtn("AVE_DLList_End", "AVE_DLList.c", 461, "psList != ((void *)0)");
}

void AVE_DLList_RBegin_cold_1()
{
  __assert_rtn("AVE_DLList_RBegin", "AVE_DLList.c", 473, "psList != ((void *)0)");
}

void AVE_DLList_REnd_cold_1()
{
  __assert_rtn("AVE_DLList_REnd", "AVE_DLList.c", 485, "psList != ((void *)0)");
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98818](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1E0C98820](allocator, *(_QWORD *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
  MEMORY[0x1E0C98840](port);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

void CFRunLoopRun(void)
{
  MEMORY[0x1E0C98CA8]();
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x1E0C9EE00](target, key, attachmentModeOut);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF40](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x1E0C9F010](sbuf, createIfNecessary);
}

OSStatus CMTagCollectionGetTagsWithCategory(CMTagCollectionRef tagCollection, CMTagCategory category, CMTag *tagBuffer, CMItemCount tagBufferCount, CMItemCount *numberOfTagsCopied)
{
  return MEMORY[0x1E0C9F1A0](tagCollection, *(_QWORD *)&category, tagBuffer, tagBufferCount, numberOfTagsCopied);
}

uint64_t CMTagGetFlagsValue(CMTag tag)
{
  return MEMORY[0x1E0C9F1D0](*(_QWORD *)&tag.category, tag.value);
}

int64_t CMTagGetSInt64Value(CMTag tag)
{
  return MEMORY[0x1E0C9F1E8](*(_QWORD *)&tag.category, tag.value);
}

CVPixelBufferRef CMTaggedBufferGroupGetCVPixelBufferForTag(CMTaggedBufferGroupRef group, CMTag tag, CFIndex *indexOut)
{
  return (CVPixelBufferRef)MEMORY[0x1E0C9F240](group, *(_QWORD *)&tag.category, tag.value, indexOut);
}

CMItemCount CMTaggedBufferGroupGetCount(CMTaggedBufferGroupRef group)
{
  return MEMORY[0x1E0C9F248](group);
}

CMTagCollectionRef CMTaggedBufferGroupGetTagCollectionAtIndex(CMTaggedBufferGroupRef group, CFIndex index)
{
  return (CMTagCollectionRef)MEMORY[0x1E0C9F250](group, index);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F3B0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3C8](retstr, start, end);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3F0](retstr, dictionaryRepresentation);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8908](buffer, *(_QWORD *)&attachmentMode);
}

int CVColorPrimariesGetIntegerCodePointForString(CFStringRef colorPrimariesString)
{
  return MEMORY[0x1E0CA8960](colorPrimariesString);
}

CFStringRef CVColorPrimariesGetStringForIntegerCodePoint(int colorPrimariesCodePoint)
{
  return (CFStringRef)MEMORY[0x1E0CA8968](*(_QWORD *)&colorPrimariesCodePoint);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x1E0CA8B10](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x1E0CA8B78](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

int CVTransferFunctionGetIntegerCodePointForString(CFStringRef transferFunctionString)
{
  return MEMORY[0x1E0CA8C30](transferFunctionString);
}

CFStringRef CVTransferFunctionGetStringForIntegerCodePoint(int transferFunctionCodePoint)
{
  return (CFStringRef)MEMORY[0x1E0CA8C38](*(_QWORD *)&transferFunctionCodePoint);
}

int CVYCbCrMatrixGetIntegerCodePointForString(CFStringRef yCbCrMatrixString)
{
  return MEMORY[0x1E0CA8C40](yCbCrMatrixString);
}

CFStringRef CVYCbCrMatrixGetStringForIntegerCodePoint(int yCbCrMatrixCodePoint)
{
  return (CFStringRef)MEMORY[0x1E0CA8C48](*(_QWORD *)&yCbCrMatrixCodePoint);
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x1E0CA0918]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD68](*(_QWORD *)&connection, *(_QWORD *)&selector, *(_QWORD *)&wake_port, reference, *(_QWORD *)&referenceCnt, input, *(_QWORD *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD90](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOCreateReceivePort(uint32_t msgType, mach_port_t *recvPort)
{
  return MEMORY[0x1E0CBAE18](*(_QWORD *)&msgType, recvPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane()
{
  return MEMORY[0x1E0CBBB48]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x1E0CBBB58]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CBBB68](buffer, planeIndex);
}

uint64_t IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()
{
  return MEMORY[0x1E0CBBB78]();
}

uint64_t IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane()
{
  return MEMORY[0x1E0CBBB98]();
}

uint64_t IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane()
{
  return MEMORY[0x1E0CBBC20]();
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBC30]();
}

uint64_t IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return MEMORY[0x1E0CBBC40]();
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x1E0CBBC90]();
}

int32_t IOSurfaceGetUseCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCD0](buffer);
}

uint64_t IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane()
{
  return MEMORY[0x1E0CBBCD8]();
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBCE8]();
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD38](*(_QWORD *)&csid);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t VTEncoderSessionCreateCMBlockBuffer()
{
  return MEMORY[0x1E0CECAA0]();
}

uint64_t VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults()
{
  return MEMORY[0x1E0CECAA8]();
}

uint64_t VTEncoderSessionCreateVideoFormatDescription()
{
  return MEMORY[0x1E0CECAB0]();
}

uint64_t VTEncoderSessionEmitEncodedFrame()
{
  return MEMORY[0x1E0CECAC0]();
}

uint64_t VTEncoderSessionEmitEncodedTile()
{
  return MEMORY[0x1E0CECAC8]();
}

uint64_t VTEncoderSessionSetPixelBufferAttributes()
{
  return MEMORY[0x1E0CECAD8]();
}

uint64_t VTEncoderSessionSetTimeRangesForNextPass()
{
  return MEMORY[0x1E0CECAE0]();
}

uint64_t VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer()
{
  return MEMORY[0x1E0CECBF0]();
}

uint64_t VTMultiPassStorageCopyDataAtTimeStamp()
{
  return MEMORY[0x1E0CECC08]();
}

uint64_t VTMultiPassStorageGetTimeStamp()
{
  return MEMORY[0x1E0CECC18]();
}

uint64_t VTMultiPassStorageGetTimeStampAndDuration()
{
  return MEMORY[0x1E0CECC20]();
}

CFTypeID VTMultiPassStorageGetTypeID(void)
{
  return MEMORY[0x1E0CECC28]();
}

uint64_t VTMultiPassStorageSetDataAtTimeStamp()
{
  return MEMORY[0x1E0CECC30]();
}

uint64_t VTMultiPassStorageSetIdentifier()
{
  return MEMORY[0x1E0CECC38]();
}

uint64_t VTRegisterVideoEncoderWithInfo()
{
  return MEMORY[0x1E0CECD48]();
}

uint64_t VTTileEncoderSessionCreateVideoFormatDescription()
{
  return MEMORY[0x1E0CECE10]();
}

uint64_t VTTileEncoderSessionSetTileAttributes()
{
  return MEMORY[0x1E0CECE18]();
}

uint64_t VTTileEncoderSessionSetTileEncodeRequirements()
{
  return MEMORY[0x1E0CECE20]();
}

uint64_t VTVideoEncoderGetClassID()
{
  return MEMORY[0x1E0CECE60]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E692AC50();
}

void operator delete(void *__p)
{
  off_1E692AC58(__p);
}

uint64_t operator delete()
{
  return off_1E692AC60();
}

uint64_t operator new[]()
{
  return off_1E692AC68();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E692AC70(__sz);
}

uint64_t operator new()
{
  return off_1E692AC78();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  return (char *)MEMORY[0x1E0C83390](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x1E0C83538](__stream, a2, *(_QWORD *)&__whence);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1E0C83D58](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1E0C84918](object);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1E0C84CB8](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D38](a1, a2, a3);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1E0C85358](*(_QWORD *)&a1, a2);
}

int setpriority(int a1, id_t a2, int a3)
{
  return MEMORY[0x1E0C85360](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

uintmax_t strtoumax(const char *__nptr, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856B8](__nptr, __endptr, *(_QWORD *)&__base);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

