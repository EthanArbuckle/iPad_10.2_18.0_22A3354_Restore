uint64_t Artwork.backgroundColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BCECE9C(v1, a1, &qword_256AA0FE0);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242610FDC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t Artwork.templateURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork();
  return sub_23BCECE9C(v1 + *(int *)(v3 + 20), a1, &qword_256AA0FE8);
}

uint64_t type metadata accessor for Artwork()
{
  uint64_t result;

  result = qword_256AA10B0;
  if (!qword_256AA10B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BCECE9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t Artwork.init(backgroundColor:templateURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_23BCECF30(a1, a3, &qword_256AA0FE0);
  v5 = type metadata accessor for Artwork();
  return sub_23BCECF30(a2, a3 + *(int *)(v5 + 20), &qword_256AA0FE8);
}

uint64_t sub_23BCECF30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BCECF74(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6574616C706D6574;
  else
    return 0x756F72676B636162;
}

BOOL sub_23BCECFC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BCECFD8()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCED01C()
{
  return sub_23BD45B94();
}

uint64_t sub_23BCED044()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCED084()
{
  char *v0;

  return sub_23BCECF74(*v0);
}

uint64_t sub_23BCED08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BCEDA2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCED0B0()
{
  return 0;
}

void sub_23BCED0BC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23BCED0C8()
{
  sub_23BCED30C();
  return sub_23BD45C0C();
}

uint64_t sub_23BCED0F0()
{
  sub_23BCED30C();
  return sub_23BD45C18();
}

uint64_t sub_23BCED118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BCECE9C(v1, a1, &qword_256AA0FE0);
}

uint64_t sub_23BCED13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BCECE9C(v2 + *(int *)(a1 + 20), a2, &qword_256AA0FE8);
}

uint64_t Artwork.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FF0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BCED30C();
  sub_23BD45BF4();
  v8[15] = 0;
  sub_23BD451F8();
  sub_23BCEEF14(&qword_256AA1000, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB0]);
  sub_23BD45AD4();
  if (!v1)
  {
    type metadata accessor for Artwork();
    v8[14] = 1;
    sub_23BD4515C();
    sub_23BCEEF14(&qword_256AA1008, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BD45AD4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23BCED30C()
{
  unint64_t result;

  result = qword_256AA0FF8;
  if (!qword_256AA0FF8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4634C, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA0FF8);
  }
  return result;
}

uint64_t Artwork.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  char v25;

  v20 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8]();
  v21 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8]();
  v22 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1010);
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork();
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BCED30C();
  sub_23BD45BE8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = a1;
  v12 = v6;
  v13 = (uint64_t)v11;
  v14 = (uint64_t)v21;
  sub_23BD451F8();
  v25 = 0;
  sub_23BCEEF14(&qword_256AA1018, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC8]);
  v16 = (uint64_t)v22;
  v15 = v23;
  sub_23BD45A80();
  sub_23BCECF30(v16, v13, &qword_256AA0FE0);
  sub_23BD4515C();
  v24 = 1;
  sub_23BCEEF14(&qword_256AA1020, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_23BD45A80();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v15);
  sub_23BCECF30(v14, v13 + *(int *)(v9 + 20), &qword_256AA0FE8);
  sub_23BCED64C(v13, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return sub_23BCED690(v13);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23BCED64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BCED690(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BCED6CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Artwork.init(from:)(a1, a2);
}

uint64_t sub_23BCED6E0(_QWORD *a1)
{
  return Artwork.encode(to:)(a1);
}

uint64_t Artwork.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  char *v17;

  v1 = v0;
  v2 = sub_23BD4515C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BD451F8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8]();
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v1, (uint64_t)v12, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v13 = type metadata accessor for Artwork();
  sub_23BCECE9C(v1 + *(int *)(v13 + 20), (uint64_t)v6, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2) == 1)
    return sub_23BD45BA0();
  v15 = v17;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v17, v6, v2);
  sub_23BD45BA0();
  sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BD45714();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v15, v2);
}

uint64_t Artwork.hashValue.getter()
{
  sub_23BD45B88();
  Artwork.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BCED9B0()
{
  sub_23BD45B88();
  Artwork.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BCED9F0()
{
  sub_23BD45B88();
  Artwork.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEDA2C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL _s12FitnessAsset7ArtworkV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = sub_23BD4515C();
  v55 = *(_QWORD *)(v57 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1118);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v56 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v48 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v52 = (uint64_t)&v46 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v54 = (uint64_t)&v46 - v10;
  v11 = sub_23BD451F8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v49 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1120);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v46 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v46 - v24;
  v51 = a1;
  sub_23BCECE9C(a1, (uint64_t)&v46 - v24, &qword_256AA0FE0);
  v53 = a2;
  sub_23BCECE9C(a2, (uint64_t)v23, &qword_256AA0FE0);
  v26 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_23BCECE9C((uint64_t)v25, (uint64_t)v16, &qword_256AA0FE0);
  sub_23BCECE9C((uint64_t)v23, v26, &qword_256AA0FE0);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v27((uint64_t)v16, 1, v11) != 1)
  {
    sub_23BCECE9C((uint64_t)v16, (uint64_t)v20, &qword_256AA0FE0);
    if (v27(v26, 1, v11) != 1)
    {
      v30 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v49, v26, v11);
      sub_23BCEEF14(&qword_256AA1130, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC0]);
      v31 = sub_23BD45750();
      v32 = *(void (**)(char *, uint64_t))(v12 + 8);
      v32(v30, v11);
      sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
      sub_23BCEEED8((uint64_t)v25, &qword_256AA0FE0);
      v32(v20, v11);
      sub_23BCEEED8((uint64_t)v16, &qword_256AA0FE0);
      if ((v31 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
    sub_23BCEEED8((uint64_t)v25, &qword_256AA0FE0);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
LABEL_6:
    v28 = &qword_256AA1120;
    v29 = (uint64_t)v16;
LABEL_14:
    sub_23BCEEED8(v29, v28);
    return 0;
  }
  sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
  sub_23BCEEED8((uint64_t)v25, &qword_256AA0FE0);
  if (v27(v26, 1, v11) != 1)
    goto LABEL_6;
  sub_23BCEEED8((uint64_t)v16, &qword_256AA0FE0);
LABEL_8:
  v33 = type metadata accessor for Artwork();
  v34 = v54;
  sub_23BCECE9C(v51 + *(int *)(v33 + 20), v54, &qword_256AA0FE8);
  v35 = v52;
  sub_23BCECE9C(v53 + *(int *)(v33 + 20), v52, &qword_256AA0FE8);
  v36 = v56;
  v37 = v56 + *(int *)(v50 + 48);
  sub_23BCECE9C(v34, v56, &qword_256AA0FE8);
  sub_23BCECE9C(v35, v37, &qword_256AA0FE8);
  v38 = v55;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  v40 = v57;
  if (v39(v36, 1, v57) == 1)
  {
    sub_23BCEEED8(v35, &qword_256AA0FE8);
    sub_23BCEEED8(v34, &qword_256AA0FE8);
    if (v39(v37, 1, v40) == 1)
    {
      sub_23BCEEED8(v36, &qword_256AA0FE8);
      return 1;
    }
    goto LABEL_13;
  }
  v41 = v48;
  sub_23BCECE9C(v36, v48, &qword_256AA0FE8);
  if (v39(v37, 1, v40) == 1)
  {
    sub_23BCEEED8(v35, &qword_256AA0FE8);
    sub_23BCEEED8(v34, &qword_256AA0FE8);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v40);
LABEL_13:
    v28 = &qword_256AA1118;
    v29 = v36;
    goto LABEL_14;
  }
  v43 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v47, v37, v40);
  sub_23BCEEF14(&qword_256AA1128, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v44 = sub_23BD45750();
  v45 = *(void (**)(char *, uint64_t))(v38 + 8);
  v45(v43, v40);
  sub_23BCEEED8(v35, &qword_256AA0FE8);
  sub_23BCEEED8(v34, &qword_256AA0FE8);
  v45((char *)v41, v40);
  sub_23BCEEED8(v36, &qword_256AA0FE8);
  return (v44 & 1) != 0;
}

uint64_t sub_23BCEE120()
{
  return sub_23BCEEF14(&qword_256AA1038, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23BCEE14C()
{
  return sub_23BCEEF14(&qword_256AA1040, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23BCEE178()
{
  return sub_23BCEEF14(&qword_256AA1048, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23BCEE1A4()
{
  return sub_23BCEEF14(&qword_256AA1050, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t *initializeBufferWithCopyOfBuffer for Artwork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23BD4515C();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_23BD451F8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = sub_23BD4515C();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23BD4515C();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23BD4515C();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23BD4515C();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23BD4515C();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BCEE9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Artwork()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BCEEA60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23BCEEAE4()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BCEEB88(319, &qword_256AA10C0, (void (*)(uint64_t))MEMORY[0x24BE34FA0]);
  if (v0 <= 0x3F)
  {
    sub_23BCEEB88(319, qword_256AA10C8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23BCEEB88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23BD4590C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23BCEEBE4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23BCEEC04(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_256AA10F8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_256AA10F8);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BCEED68 + 4 * byte_23BD4614D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BCEED9C + 4 * byte_23BD46148[v4]))();
}

uint64_t sub_23BCEED9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCEEDA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BCEEDACLL);
  return result;
}

uint64_t sub_23BCEEDB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BCEEDC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BCEEDC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCEEDCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCEEDD8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23BCEEDE4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.CodingKeys()
{
  return &type metadata for Artwork.CodingKeys;
}

unint64_t sub_23BCEEE04()
{
  unint64_t result;

  result = qword_256AA1100;
  if (!qword_256AA1100)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46324, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1100);
  }
  return result;
}

unint64_t sub_23BCEEE4C()
{
  unint64_t result;

  result = qword_256AA1108;
  if (!qword_256AA1108)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46294, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1108);
  }
  return result;
}

unint64_t sub_23BCEEE94()
{
  unint64_t result;

  result = qword_256AA1110;
  if (!qword_256AA1110)
  {
    result = MEMORY[0x242610FF4](&unk_23BD462BC, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1110);
  }
  return result;
}

uint64_t sub_23BCEEED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BCEEF14(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242610FF4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_23BCEEF54(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BCEEF64()
{
  return sub_23BD45B94();
}

uint64_t sub_23BCEEF88(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x64656863746566 && a2 == 0xE700000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696863746566 && a2 == 0xE800000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BCEF0BC()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF100(char a1)
{
  return *(_QWORD *)&aFetched_1[8 * a1];
}

BOOL sub_23BCEF120(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BCEF130()
{
  return sub_23BD45B94();
}

uint64_t sub_23BCEF154(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x637465467473616CLL && a2 == 0xE900000000000068)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BCEF22C()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF270(char a1)
{
  if ((a1 & 1) != 0)
    return 0x637465467473616CLL;
  else
    return 12383;
}

uint64_t sub_23BCEF2A0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65636E6174736E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL sub_23BCEF324(char *a1, char *a2)
{
  return sub_23BCEEF54(*a1, *a2);
}

uint64_t sub_23BCEF36C()
{
  return sub_23BCEF0BC();
}

uint64_t sub_23BCEF3A4()
{
  return sub_23BCEEF64();
}

uint64_t sub_23BCEF3E0()
{
  sub_23BD45B88();
  sub_23BCEEF64();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF43C()
{
  char *v0;

  return sub_23BCEF100(*v0);
}

uint64_t sub_23BCEF474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BCEF65C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BCEEF88, a4);
}

uint64_t sub_23BCEF480@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BCEF6B8(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BCF2E14, a2);
}

uint64_t sub_23BCEF48C(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46830, a1);
  return sub_23BD45C0C();
}

uint64_t sub_23BCEF4C0(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46830, a1);
  return sub_23BD45C18();
}

BOOL sub_23BCEF4F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23BCEF120(*a1, *a2);
}

uint64_t sub_23BCEF53C()
{
  return sub_23BCEF22C();
}

uint64_t sub_23BCEF578()
{
  return sub_23BCEF130();
}

uint64_t sub_23BCEF5B8()
{
  sub_23BD45B88();
  sub_23BCEF130();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF614()
{
  char *v0;

  return sub_23BCEF270(*v0);
}

uint64_t sub_23BCEF650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BCEF65C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BCEF154, a4);
}

uint64_t sub_23BCEF65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10]);
  *a5 = result;
  return result;
}

uint64_t sub_23BCEF6AC@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BCEF6B8(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BCF2E1C, a2);
}

uint64_t sub_23BCEF6B8@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *a3 = result;
  return result;
}

uint64_t sub_23BCEF704(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46880, a1);
  return sub_23BD45C0C();
}

uint64_t sub_23BCEF738(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46880, a1);
  return sub_23BD45C18();
}

uint64_t sub_23BCEF76C()
{
  return 1;
}

uint64_t sub_23BCEF774()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF7B4()
{
  return sub_23BD45B94();
}

uint64_t sub_23BCEF7D8()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t sub_23BCEF818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BCEF2A0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BCEF868@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BCEF94C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BCF2E3C, a2);
}

uint64_t sub_23BCEF874(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD468D0, a1);
  return sub_23BD45C0C();
}

uint64_t sub_23BCEF8A8(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD468D0, a1);
  return sub_23BD45C18();
}

uint64_t sub_23BCEF8DC()
{
  return 0;
}

uint64_t sub_23BCEF8E8@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  v2 = sub_23BCEF76C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_23BCEF94C@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BCEF99C(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46920, a1);
  return sub_23BD45C0C();
}

uint64_t sub_23BCEF9D0(uint64_t a1)
{
  MEMORY[0x242610FF4](&unk_23BD46920, a1);
  return sub_23BD45C18();
}

void AssetLoadState.encode(to:)()
{
  type metadata accessor for AssetLoadState.IdleCodingKeys();
}

void sub_23BCEFA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = MEMORY[0x242610FF4](&unk_23BD46920, a1);
  *(_QWORD *)(v16 - 320) = a1;
  *(_QWORD *)(v16 - 336) = v18;
  v19 = sub_23BD45B04();
  *(_QWORD *)(v16 - 344) = v19;
  *(_QWORD *)(v16 - 360) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 392) = (char *)&a9 - v20;
  *(_QWORD *)(v16 - 160) = v13;
  *(_QWORD *)(v16 - 152) = v11;
  *(_QWORD *)(v16 - 200) = v14;
  *(_QWORD *)(v16 - 144) = v14;
  *(_QWORD *)(v16 - 136) = v12;
  *(_QWORD *)(v16 - 232) = v15;
  v21 = *(_QWORD *)(v16 - 208);
  *(_QWORD *)(v16 - 128) = v15;
  *(_QWORD *)(v16 - 120) = v21;
  *(_QWORD *)(v16 - 112) = v10;
  *(_QWORD *)(v16 - 104) = v9;
  *(_QWORD *)(v16 - 96) = *(_QWORD *)(v16 - 272);
  type metadata accessor for AssetLoadState.FetchingCodingKeys();
}

void sub_23BCEFB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = MEMORY[0x242610FF4](&unk_23BD468D0, a1);
  *(_QWORD *)(v14 - 424) = a1;
  *(_QWORD *)(v14 - 432) = v16;
  v17 = sub_23BD45B04();
  *(_QWORD *)(v14 - 352) = v17;
  *(_QWORD *)(v14 - 384) = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v14 - 400) = (char *)&a9 - v18;
  v19 = sub_23BD451C8();
  *(_QWORD *)(v14 - 376) = v19;
  *(_QWORD *)(v14 - 408) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v14 - 416) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v14 - 256);
  *(_QWORD *)(v14 - 160) = *(_QWORD *)(v14 - 264);
  *(_QWORD *)(v14 - 152) = v21;
  v22 = *(_QWORD *)(v14 - 72);
  *(_QWORD *)(v14 - 144) = v13;
  *(_QWORD *)(v14 - 136) = v22;
  *(_QWORD *)(v14 - 128) = v11;
  *(_QWORD *)(v14 - 120) = v12;
  *(_QWORD *)(v14 - 112) = v10;
  *(_QWORD *)(v14 - 104) = *(_QWORD *)(v14 - 248);
  *(_QWORD *)(v14 - 96) = v9;
  type metadata accessor for AssetLoadState.FetchedCodingKeys();
}

void sub_23BCEFC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v18 = MEMORY[0x242610FF4](&unk_23BD46880, a1);
  *(_QWORD *)(v16 - 448) = a1;
  *(_QWORD *)(v16 - 456) = v18;
  v19 = sub_23BD45B04();
  *(_QWORD *)(v16 - 328) = v19;
  *(_QWORD *)(v16 - 368) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 296) = (char *)&a9 - v20;
  v21 = sub_23BD451A4();
  *(_QWORD *)(v16 - 304) = v21;
  *(_QWORD *)(v16 - 440) = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v16 - 288) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23BD45BC4();
  *(_QWORD *)(v16 - 464) = v23;
  *(_QWORD *)(v16 - 472) = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v16 - 312) = (char *)&a9 - v25;
  *(_QWORD *)(v16 - 240) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v16 - 160) = v12;
  *(_QWORD *)(v16 - 152) = v15;
  v26 = *(_QWORD *)(v16 - 72);
  *(_QWORD *)(v16 - 144) = *(_QWORD *)(v16 - 200);
  *(_QWORD *)(v16 - 136) = v26;
  *(_QWORD *)(v16 - 128) = *(_QWORD *)(v16 - 232);
  *(_QWORD *)(v16 - 120) = v14;
  *(_QWORD *)(v16 - 256) = v11;
  *(_QWORD *)(v16 - 112) = v11;
  *(_QWORD *)(v16 - 104) = v10;
  *(_QWORD *)(v16 - 96) = v9;
  type metadata accessor for AssetLoadState.CodingKeys();
}

uint64_t sub_23BCEFDA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  MEMORY[0x242610FF4](&unk_23BD46830, a1);
  v4 = sub_23BD45B04();
  *(_QWORD *)(v3 - 232) = v4;
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - v5;
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v3 - 224), *(_QWORD *)(*(_QWORD *)(v3 - 224) + 24));
  *(_QWORD *)(v3 - 224) = v6;
  sub_23BD45BF4();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 240) + 16))(v2, *(_QWORD *)(v3 - 216), v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *(_QWORD *)(v3 - 408);
      v9 = *(_QWORD *)(v3 - 416);
      v10 = *(_QWORD *)(v3 - 376);
      (*(void (**)(void))(v8 + 32))();
      *(_BYTE *)(v3 - 160) = 1;
      v11 = *(_QWORD *)(v3 - 400);
      v12 = *(_QWORD *)(v3 - 232);
      v13 = *(_QWORD *)(v3 - 224);
      sub_23BD45AC8();
      sub_23BCEEF14(&qword_256AA1138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
      v14 = *(_QWORD *)(v3 - 352);
      sub_23BD45AF8();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 384) + 8))(v11, v14);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v13, v12);
    }
    else
    {
      *(_BYTE *)(v3 - 160) = 2;
      v29 = *(_QWORD *)(v3 - 392);
      v30 = *(_QWORD *)(v3 - 232);
      v31 = *(_QWORD *)(v3 - 224);
      sub_23BD45AC8();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 360) + 8))(v29, *(_QWORD *)(v3 - 344));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v31, v30);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v3 - 464);
    v17 = *(_QWORD *)(v3 - 304);
    v18 = v2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    v19 = *(_QWORD *)(v3 - 472);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v19 + 32))(*(_QWORD *)(v3 - 312), v2, v16);
    v20 = *(_QWORD *)(v3 - 440);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v20 + 32))(*(_QWORD *)(v3 - 288), v18, v17);
    *(_BYTE *)(v3 - 160) = 0;
    v22 = *(_QWORD *)(v3 - 232);
    v21 = *(_QWORD *)(v3 - 224);
    sub_23BD45AC8();
    *(_BYTE *)(v3 - 160) = 0;
    v23 = *(_QWORD *)(v3 - 72);
    *(_QWORD *)(v3 - 192) = *(_QWORD *)(v3 - 200);
    *(_QWORD *)(v3 - 184) = v23;
    v24 = *(_QWORD *)(v3 - 256);
    *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 208);
    *(_QWORD *)(v3 - 168) = v24;
    MEMORY[0x242610FF4](MEMORY[0x24BE37C50], v16, v3 - 192);
    v25 = *(_QWORD *)(v3 - 328);
    v26 = *(_QWORD *)(v3 - 280);
    sub_23BD45AF8();
    v27 = v16;
    v28 = v19;
    if (v26)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 368) + 8))(*(_QWORD *)(v3 - 296), v25);
      (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v3 - 288), *(_QWORD *)(v3 - 304));
    }
    else
    {
      *(_BYTE *)(v3 - 160) = 1;
      sub_23BCEEF14(&qword_256AA1140, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
      v32 = *(_QWORD *)(v3 - 304);
      sub_23BD45AF8();
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 368) + 8))(*(_QWORD *)(v3 - 296), v25);
      (*(void (**)(_QWORD, uint64_t))(v20 + 8))(*(_QWORD *)(v3 - 288), v32);
    }
    (*(void (**)(_QWORD, uint64_t))(v28 + 8))(*(_QWORD *)(v3 - 312), v27);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v21, v22);
  }
}

void type metadata accessor for AssetLoadState.IdleCodingKeys()
{
  JUMPOUT(0x242610F64);
}

void type metadata accessor for AssetLoadState.FetchingCodingKeys()
{
  JUMPOUT(0x242610F64);
}

void type metadata accessor for AssetLoadState.FetchedCodingKeys()
{
  JUMPOUT(0x242610F64);
}

void type metadata accessor for AssetLoadState.CodingKeys()
{
  JUMPOUT(0x242610F64);
}

void AssetLoadState.init(from:)()
{
  type metadata accessor for AssetLoadState.IdleCodingKeys();
}

void sub_23BCF028C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = MEMORY[0x242610FF4](&unk_23BD46920, a1);
  *(_QWORD *)(v17 - 304) = a1;
  *(_QWORD *)(v17 - 312) = v19;
  v20 = sub_23BD45ABC();
  *(_QWORD *)(v17 - 432) = v20;
  *(_QWORD *)(v17 - 448) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v17 - 320) = (char *)&a9 - v21;
  *(_QWORD *)(v17 - 160) = v10;
  *(_QWORD *)(v17 - 152) = v15;
  *(_QWORD *)(v17 - 144) = v14;
  *(_QWORD *)(v17 - 136) = v13;
  *(_QWORD *)(v17 - 128) = v16;
  *(_QWORD *)(v17 - 120) = v12;
  *(_QWORD *)(v17 - 112) = *(_QWORD *)(v17 - 72);
  *(_QWORD *)(v17 - 104) = v11;
  *(_QWORD *)(v17 - 96) = v9;
  type metadata accessor for AssetLoadState.FetchingCodingKeys();
}

void sub_23BCF0324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = MEMORY[0x242610FF4](&unk_23BD468D0, a1);
  *(_QWORD *)(v16 - 336) = a1;
  *(_QWORD *)(v16 - 344) = v18;
  v19 = sub_23BD45ABC();
  *(_QWORD *)(v16 - 440) = v19;
  *(_QWORD *)(v16 - 456) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 328) = (char *)&a9 - v20;
  *(_QWORD *)(v16 - 160) = v9;
  *(_QWORD *)(v16 - 152) = v14;
  *(_QWORD *)(v16 - 144) = v13;
  *(_QWORD *)(v16 - 136) = v12;
  *(_QWORD *)(v16 - 128) = v15;
  *(_QWORD *)(v16 - 272) = v15;
  *(_QWORD *)(v16 - 120) = *(_QWORD *)(v16 - 248);
  *(_QWORD *)(v16 - 112) = v11;
  v21 = *(_QWORD *)(v16 - 232);
  *(_QWORD *)(v16 - 104) = v10;
  *(_QWORD *)(v16 - 96) = v21;
  type metadata accessor for AssetLoadState.FetchedCodingKeys();
}

void sub_23BCF03CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = MEMORY[0x242610FF4](&unk_23BD46880, a1);
  *(_QWORD *)(v17 - 352) = a1;
  *(_QWORD *)(v17 - 360) = v19;
  v20 = sub_23BD45ABC();
  *(_QWORD *)(v17 - 416) = v20;
  *(_QWORD *)(v17 - 424) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v17 - 296) = (char *)&a9 - v21;
  *(_QWORD *)(v17 - 160) = v10;
  *(_QWORD *)(v17 - 152) = v15;
  *(_QWORD *)(v17 - 144) = v14;
  *(_QWORD *)(v17 - 136) = v12;
  *(_QWORD *)(v17 - 128) = v9;
  *(_QWORD *)(v17 - 120) = v16;
  *(_QWORD *)(v17 - 112) = *(_QWORD *)(v17 - 72);
  *(_QWORD *)(v17 - 104) = v11;
  *(_QWORD *)(v17 - 96) = v13;
  type metadata accessor for AssetLoadState.CodingKeys();
}

void sub_23BCF0468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 - 264) = MEMORY[0x242610FF4](&unk_23BD46830, a1);
  v9 = sub_23BD45ABC();
  *(_QWORD *)(v8 - 280) = v9;
  *(_QWORD *)(v8 - 288) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v8 - 400) = v2;
  *(_QWORD *)(v8 - 160) = v2;
  *(_QWORD *)(v8 - 152) = v6;
  *(_QWORD *)(v8 - 392) = v6;
  *(_QWORD *)(v8 - 384) = v5;
  *(_QWORD *)(v8 - 144) = v5;
  *(_QWORD *)(v8 - 136) = v4;
  *(_QWORD *)(v8 - 376) = v4;
  *(_QWORD *)(v8 - 128) = *(_QWORD *)(v8 - 272);
  *(_QWORD *)(v8 - 120) = v1;
  *(_QWORD *)(v8 - 112) = v7;
  *(_QWORD *)(v8 - 104) = v3;
  *(_QWORD *)(v8 - 408) = v3;
  *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 232);
  type metadata accessor for AssetLoadState();
}

uint64_t sub_23BCF0520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[96];

  *(_QWORD *)(v2 - 272) = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = &v46[-v8];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v46[-v10];
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v2 - 240), *(_QWORD *)(*(_QWORD *)(v2 - 240) + 24));
  *(_QWORD *)(v2 - 232) = v1;
  v12 = *(_QWORD *)(v2 - 256);
  sub_23BD45BE8();
  if (v12)
    goto LABEL_8;
  *(_QWORD *)(v2 - 472) = v6;
  *(_QWORD *)(v2 - 464) = v9;
  *(_QWORD *)(v2 - 264) = v3;
  *(_QWORD *)(v2 - 256) = v11;
  v13 = *(_QWORD *)(v2 - 280);
  v14 = *(_QWORD *)(v2 - 232);
  *(_QWORD *)(v2 - 192) = sub_23BD45AB0();
  v15 = sub_23BD45804();
  MEMORY[0x242610FF4](MEMORY[0x24BEE12C8], v15);
  *(_QWORD *)(v2 - 160) = sub_23BD45954();
  *(_QWORD *)(v2 - 152) = v16;
  *(_QWORD *)(v2 - 144) = v17;
  *(_QWORD *)(v2 - 136) = v18;
  v19 = sub_23BD45948();
  MEMORY[0x242610FF4](MEMORY[0x24BEE2190], v19);
  sub_23BD458A0();
  v20 = *(unsigned __int8 *)(v2 - 192);
  if (v20 == 3
    || (v22 = *(_OWORD *)(v2 - 160),
        v21 = *(_OWORD *)(v2 - 144),
        *(_OWORD *)(v2 - 496) = v22,
        *(_OWORD *)(v2 - 192) = v22,
        *(_OWORD *)(v2 - 176) = v21,
        (sub_23BD458AC() & 1) == 0))
  {
    v25 = sub_23BD459C0();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v27 = *(_QWORD *)(v2 - 272);
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v14, v13);
LABEL_8:
    v28 = *(_QWORD *)(v2 - 240);
    return __swift_destroy_boxed_opaque_existential_1(v28);
  }
  if (v20)
  {
    if (v20 == 1)
    {
      *(_BYTE *)(v2 - 192) = 1;
      v23 = *(_QWORD *)(v2 - 328);
      v24 = v13;
      sub_23BD45A68();
      sub_23BD451C8();
      sub_23BCEEF14(&qword_256AA1150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
      v33 = *(_QWORD *)(v2 - 472);
      v34 = *(_QWORD *)(v2 - 440);
      sub_23BD45AA4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 456) + 8))(v23, v34);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v14, v24);
      v39 = *(_QWORD *)(v2 - 272);
      swift_storeEnumTagMultiPayload();
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 32);
      v41 = *(_QWORD *)(v2 - 256);
      v40(v41, v33, v39);
    }
    else
    {
      *(_BYTE *)(v2 - 192) = 2;
      v32 = *(_QWORD *)(v2 - 320);
      sub_23BD45A68();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 448) + 8))(v32, *(_QWORD *)(v2 - 432));
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v14, v13);
      v41 = *(_QWORD *)(v2 - 256);
      v39 = *(_QWORD *)(v2 - 272);
      swift_storeEnumTagMultiPayload();
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 32);
    }
  }
  else
  {
    *(_BYTE *)(v2 - 192) = 0;
    v30 = *(_QWORD *)(v2 - 296);
    v31 = v13;
    sub_23BD45A68();
    v35 = sub_23BD45BC4();
    *(_BYTE *)(v2 - 192) = 0;
    v36 = *(_QWORD *)(v2 - 376);
    *(_QWORD *)(v2 - 224) = *(_QWORD *)(v2 - 384);
    *(_QWORD *)(v2 - 216) = v36;
    v37 = *(_QWORD *)(v2 - 72);
    *(_QWORD *)(v2 - 208) = *(_QWORD *)(v2 - 248);
    *(_QWORD *)(v2 - 200) = v37;
    MEMORY[0x242610FF4](MEMORY[0x24BE37C58], v35, v2 - 224);
    v38 = *(_QWORD *)(v2 - 416);
    sub_23BD45AA4();
    sub_23BD451A4();
    v42 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    swift_getTupleTypeMetadata2();
    *(_BYTE *)(v2 - 192) = 1;
    sub_23BCEEF14(&qword_256AA1158, v42, MEMORY[0x24BDCE960]);
    sub_23BD45AA4();
    v43 = *(_QWORD *)(v2 - 288);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 424) + 8))(v30, v38);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v14, v31);
    v44 = *(_QWORD *)(v2 - 464);
    v39 = *(_QWORD *)(v2 - 272);
    swift_storeEnumTagMultiPayload();
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 32);
    v41 = *(_QWORD *)(v2 - 256);
    v40(v41, v44, v39);
  }
  v45 = *(_QWORD *)(v2 - 240);
  v40(*(_QWORD *)(v2 - 368), v41, v39);
  v28 = v45;
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

void type metadata accessor for AssetLoadState()
{
  JUMPOUT(0x242610F64);
}

void sub_23BCF0C44()
{
  AssetLoadState.init(from:)();
}

void sub_23BCF0C7C()
{
  AssetLoadState.encode(to:)();
}

uint64_t AssetLoadState.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v4 = sub_23BD451C8();
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BD451A4();
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BD45BC4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v2, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v19 = v24;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v6, v16, v4);
      sub_23BD45B94();
      sub_23BCEEF14(&qword_256AA1160, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_23BD45714();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v4);
    }
    else
    {
      return sub_23BD45B94();
    }
  }
  else
  {
    v21 = &v16[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v16, v10);
    v22 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v9, v21, v7);
    sub_23BD45B94();
    sub_23BD45BD0();
    sub_23BCEEF14(qword_256AA1168, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
}

void static AssetLoadState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[13];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = a1;
  v26 = a2;
  v17 = sub_23BD451C8();
  v23[9] = *(_QWORD *)(v17 - 8);
  v23[10] = v17;
  MEMORY[0x24BDAC7A8](v17);
  v23[5] = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23BD451A4();
  v23[7] = *(_QWORD *)(v19 - 8);
  v23[8] = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v23[1] = (char *)v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23[6] = (char *)v23 - v22;
  v24 = sub_23BD45BC4();
  v23[11] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[2] = a3;
  v27 = a3;
  v28 = a4;
  v23[4] = a4;
  v29 = a5;
  v30 = a6;
  v23[3] = a7;
  v31 = a7;
  v32 = a8;
  v33 = a9;
  v34 = a10;
  v23[0] = a11;
  v35 = a11;
  type metadata accessor for AssetLoadState();
}

uint64_t sub_23BCF1084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v29;
  void (*v30)(uint64_t, _BYTE *, _QWORD);
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _BYTE *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  void (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t, uint64_t);
  _BYTE v43[96];

  v4 = a1;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v43[-v9];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = &v43[-v14];
  v16 = &v43[*(int *)(v13 + 48) - v14];
  *(_QWORD *)(v3 - 192) = v5;
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v17(&v43[-v14], *(_BYTE **)(v3 - 176), v4);
  v17(v16, *(_BYTE **)(v3 - 168), v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17(v8, v15, v4);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v19 = *(_QWORD *)(v3 - 216);
        v20 = *(_QWORD *)(v3 - 208);
        v21 = *(_QWORD *)(v3 - 248);
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(v21, v16, v20);
        v22 = sub_23BD451B0();
        v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v23(v21, v20);
        v23((uint64_t)v8, v20);
        v12 = *(_QWORD *)(v3 - 192);
        goto LABEL_11;
      }
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v3 - 216) + 8))(v8, *(_QWORD *)(v3 - 208));
    }
    else if (swift_getEnumCaseMultiPayload() == 2)
    {
      v22 = 1;
      v12 = *(_QWORD *)(v3 - 192);
      goto LABEL_11;
    }
LABEL_10:
    v22 = 0;
    v4 = TupleTypeMetadata2;
    goto LABEL_11;
  }
  *(_QWORD *)(v3 - 176) = v1;
  *(_QWORD *)(v3 - 168) = v12;
  v24 = *(_QWORD *)(v3 - 200);
  *(_QWORD *)(v3 - 208) = v2;
  v17(v10, v15, v4);
  v25 = *(_QWORD *)(v3 - 224);
  v26 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v27 = &v10[v26];
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 232) + 8))(&v10[v26], v25);
    (*(void (**)(_BYTE *, _QWORD))(v24 + 8))(v10, *(_QWORD *)(v3 - 184));
    v12 = *(_QWORD *)(v3 - 168);
    goto LABEL_10;
  }
  v29 = &v16[v26];
  v30 = *(void (**)(uint64_t, _BYTE *, _QWORD))(v24 + 32);
  v31 = *(_BYTE **)(v3 - 208);
  v30((uint64_t)v31, v16, *(_QWORD *)(v3 - 184));
  v32 = *(_QWORD *)(v3 - 240);
  v33 = *(_QWORD *)(v3 - 232);
  v34 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v33 + 32);
  v34(v32, v27, v25);
  v35 = *(_QWORD *)(v3 - 280);
  v34(v35, v29, v25);
  v36 = v32;
  LOBYTE(v29) = sub_23BD45BDC();
  v37 = *(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v3 - 200) + 8);
  v38 = v10;
  v39 = v35;
  v40 = v31;
  v37(v38, *(_QWORD *)(v3 - 184));
  v12 = *(_QWORD *)(v3 - 192);
  if ((v29 & 1) != 0)
  {
    v22 = sub_23BD4518C();
    v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v41(v39, v25);
    v41(*(_QWORD *)(v3 - 240), v25);
    v37(v40, *(_QWORD *)(v3 - 184));
  }
  else
  {
    v42 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v42(v39, v25);
    v42(v36, v25);
    v37(v40, *(_QWORD *)(v3 - 184));
    v22 = 0;
  }
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v4);
  return v22 & 1;
}

uint64_t AssetLoadState.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_23BD45B88();
  AssetLoadState.hash(into:)((uint64_t)v3, a1);
  return sub_23BD45BB8();
}

uint64_t sub_23BCF1420(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23BD45B88();
  AssetLoadState.hash(into:)((uint64_t)v4, a2);
  return sub_23BD45BB8();
}

void sub_23BCF1460()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF1470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static AssetLoadState.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10]);
}

uint64_t sub_23BCF14A0(char a1)
{
  return a1 & 1;
}

uint64_t sub_23BCF14B0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BCF14B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[6];

  v0 = sub_23BD45BC4();
  if (v1 <= 0x3F)
  {
    v2 = sub_23BD451A4();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v7[4] = v7;
      v4 = sub_23BD451C8();
      v0 = v4;
      if (v5 <= 0x3F)
      {
        v7[5] = *(_QWORD *)(v4 - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *sub_23BCF157C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a3 + 24);
  v32 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v32 - 8);
  v5 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23BD451A4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = v6 + v9 + 1;
  v12 = (v11 & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  v13 = sub_23BD451C8();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_QWORD *)(v14 + 64) > v12)
    v12 = *(_QWORD *)(v14 + 64);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = (*(_BYTE *)(v4 + 80) | *(_BYTE *)(v5 + 80) | v15 | v9);
  if (v16 <= 7
    && v12 + 1 <= 0x18
    && ((*(_DWORD *)(v4 + 80) | *(_DWORD *)(v5 + 80) | v15 | v9) & 0x100000) == 0)
  {
    v31 = v7;
    v21 = *((unsigned __int8 *)a2 + v12);
    if (v21 >= 2)
    {
      if (v12 <= 3)
        v22 = v12;
      else
        v22 = 4;
      __asm { BR              X14 }
    }
    v23 = v6;
    v24 = v8;
    v20 = a1;
    if (v21 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, _QWORD))(v14 + 16))(a1, a2, v13, v9);
      *((_BYTE *)a1 + v12) = 1;
    }
    else
    {
      v25 = *((unsigned __int8 *)a2 + v23);
      if (v25 >= 2)
      {
        if (v23 <= 3)
          v26 = v23;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      v27 = v25 == 1;
      if (v25 == 1)
        v28 = v5;
      else
        v28 = v4;
      if (v25 == 1)
        v29 = v3;
      else
        v29 = v32;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v28 + 16))(a1, a2, v29);
      *((_BYTE *)a1 + v23) = v27;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16))(((unint64_t)a1 + v11) & ~v10, ((unint64_t)a2 + v11) & ~v10, v31);
      *((_BYTE *)a1 + v12) = 0;
    }
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return v20;
}

uint64_t sub_23BCF1828(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v23 - 8);
  v5 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23BD451A4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9 + 1;
  v11 = (v10 & ~v9) + *(_QWORD *)(v8 + 64);
  v12 = sub_23BD451C8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v11)
    v14 = v11;
  v15 = *(unsigned __int8 *)(a1 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  v17 = ~v9;
  v18 = *(unsigned __int8 *)(a1 + v6);
  if (v18 >= 2)
  {
    if (v6 <= 3)
      v19 = v6;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  if (v18 == 1)
    v21 = v5;
  else
    v21 = v4;
  if (v18 == 1)
    v22 = v3;
  else
    v22 = v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))((v10 + a1) & v17, v7);
}

uint64_t sub_23BCF1A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v24 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v25 = sub_23BD451A4();
  v9 = *(_QWORD *)(v25 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10 + 1;
  v12 = (v11 & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = sub_23BD451C8();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_QWORD *)(v14 + 64) > v12)
    v12 = *(_QWORD *)(v14 + 64);
  v15 = *(unsigned __int8 *)(a2 + v12);
  if (v15 >= 2)
  {
    if (v12 <= 3)
      v16 = v12;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, a2, v13);
    *(_BYTE *)(a1 + v12) = 1;
  }
  else
  {
    v23 = ~v10;
    v17 = *(unsigned __int8 *)(a2 + v8);
    if (v17 >= 2)
    {
      if (v8 <= 3)
        v18 = v8;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v17 == 1;
    if (v17 == 1)
      v20 = v7;
    else
      v20 = v6;
    if (v17 == 1)
      v21 = v5;
    else
      v21 = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, a2, v21);
    *(_BYTE *)(a1 + v8) = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v11 + a1) & v23, (v11 + a2) & v23, v25);
    *(_BYTE *)(a1 + v12) = 0;
  }
  return a1;
}

uint64_t sub_23BCF1C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    v29 = *(_QWORD *)(a3 + 24);
    v30 = *(_QWORD *)(a3 + 16);
    v28 = *(_QWORD *)(v30 - 8);
    v5 = *(_QWORD *)(v29 - 8);
    if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v28 + 64))
      v6 = *(_QWORD *)(v28 + 64);
    else
      v6 = *(_QWORD *)(v5 + 64);
    v31 = sub_23BD451A4();
    v7 = *(_QWORD *)(v31 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = v6 + v8 + 1;
    v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
    v11 = sub_23BD451C8();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = *(unsigned __int8 *)(a1 + v10);
    if (v13 >= 2)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v8;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + v6);
      if (v16 >= 2)
      {
        if (v6 <= 3)
          v17 = v6;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      v18 = v28;
      if (v16 == 1)
      {
        v18 = v5;
        v19 = v29;
      }
      else
      {
        v19 = v30;
      }
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v19);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v9 + a1) & v15, v31);
    }
    v20 = *(unsigned __int8 *)(a2 + v10);
    if (v20 >= 2)
    {
      if (v10 <= 3)
        v21 = v10;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, a2, v11);
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a2 + v6);
      if (v22 >= 2)
      {
        if (v6 <= 3)
          v23 = v6;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      v24 = v22 == 1;
      v25 = v28;
      if (v22 == 1)
      {
        v25 = v5;
        v26 = v29;
      }
      else
      {
        v26 = v30;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a1, a2, v26);
      *(_BYTE *)(a1 + v6) = v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v9 + a1) & v15, (v9 + a2) & v15, v31);
      *(_BYTE *)(a1 + v10) = 0;
    }
  }
  return a1;
}

uint64_t sub_23BCF1F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v24 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v25 = sub_23BD451A4();
  v9 = *(_QWORD *)(v25 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10 + 1;
  v12 = (v11 & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = sub_23BD451C8();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_QWORD *)(v14 + 64) > v12)
    v12 = *(_QWORD *)(v14 + 64);
  v15 = *(unsigned __int8 *)(a2 + v12);
  if (v15 >= 2)
  {
    if (v12 <= 3)
      v16 = v12;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(a1, a2, v13);
    *(_BYTE *)(a1 + v12) = 1;
  }
  else
  {
    v23 = ~v10;
    v17 = *(unsigned __int8 *)(a2 + v8);
    if (v17 >= 2)
    {
      if (v8 <= 3)
        v18 = v8;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v17 == 1;
    if (v17 == 1)
      v20 = v7;
    else
      v20 = v6;
    if (v17 == 1)
      v21 = v5;
    else
      v21 = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(a1, a2, v21);
    *(_BYTE *)(a1 + v8) = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((v11 + a1) & v23, (v11 + a2) & v23, v25);
    *(_BYTE *)(a1 + v12) = 0;
  }
  return a1;
}

uint64_t sub_23BCF21B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    v29 = *(_QWORD *)(a3 + 24);
    v30 = *(_QWORD *)(a3 + 16);
    v28 = *(_QWORD *)(v30 - 8);
    v5 = *(_QWORD *)(v29 - 8);
    if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v28 + 64))
      v6 = *(_QWORD *)(v28 + 64);
    else
      v6 = *(_QWORD *)(v5 + 64);
    v31 = sub_23BD451A4();
    v7 = *(_QWORD *)(v31 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = v6 + v8 + 1;
    v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
    v11 = sub_23BD451C8();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = *(unsigned __int8 *)(a1 + v10);
    if (v13 >= 2)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v8;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + v6);
      if (v16 >= 2)
      {
        if (v6 <= 3)
          v17 = v6;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      v18 = v28;
      if (v16 == 1)
      {
        v18 = v5;
        v19 = v29;
      }
      else
      {
        v19 = v30;
      }
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v19);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v9 + a1) & v15, v31);
    }
    v20 = *(unsigned __int8 *)(a2 + v10);
    if (v20 >= 2)
    {
      if (v10 <= 3)
        v21 = v10;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a2, v11);
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a2 + v6);
      if (v22 >= 2)
      {
        if (v6 <= 3)
          v23 = v6;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      v24 = v22 == 1;
      v25 = v28;
      if (v22 == 1)
      {
        v25 = v5;
        v26 = v29;
      }
      else
      {
        v26 = v30;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a1, a2, v26);
      *(_BYTE *)(a1 + v6) = v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((v9 + a1) & v15, (v9 + a2) & v15, v31);
      *(_BYTE *)(a1 + v10) = 0;
    }
  }
  return a1;
}

uint64_t sub_23BCF2510(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8)
                                                                                + 64))
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  v6 = sub_23BD451A4();
  v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = sub_23BD451C8();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= v7)
    v9 = v7;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_25;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 253) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_25:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 3)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_25;
LABEL_18:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  return (v15 + 254);
}

void sub_23BCF2684(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8)
                                                                                + 64))
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  else
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v8 = sub_23BD451A4();
  v9 = ((v7 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(sub_23BD451C8() - 8) + 64);
  if (v10 <= v9)
    v10 = v9;
  v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v13 = a2 - 254;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BCF2874(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8)
                                                                                + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  else
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  v4 = sub_23BD451A4();
  v5 = ((v3 + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(sub_23BD451C8() - 8) + 64);
  if (v6 <= v5)
    v6 = v5;
  result = *(unsigned __int8 *)(a1 + v6);
  if (result >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_23BCF2958(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8)
                                                                                + 64))
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  v6 = sub_23BD451A4();
  v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = sub_23BD451C8();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v7)
    v7 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (a2 > 1)
  {
    v9 = a2 - 2;
    if (v7 < 4)
    {
      v10 = v9 >> (8 * v7);
      v11 = v9 & ~(-1 << (8 * v7));
      a1[v7] = v10 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t sub_23BCF2A64()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for ImageAssetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BCF2AFC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BCF2B48 + 4 * byte_23BD46408[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BCF2B7C + 4 * byte_23BD46403[v4]))();
}

uint64_t sub_23BCF2B7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF2B84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BCF2B8CLL);
  return result;
}

uint64_t sub_23BCF2B98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BCF2BA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BCF2BA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF2BAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23BCF2BB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_23BCF2BC0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BCF2C0C + 4 * byte_23BD46412[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BCF2C40 + 4 * byte_23BD4640D[v4]))();
}

uint64_t sub_23BCF2C40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF2C48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BCF2C50);
  return result;
}

uint64_t sub_23BCF2C5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BCF2C64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BCF2C68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF2C70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetAction.ViewSizeChangedCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_23BCF2CD0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BCF2D10 + 4 * byte_23BD46417[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BCF2D30 + 4 * byte_23BD4641C[v4]))();
}

_BYTE *sub_23BCF2D10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BCF2D30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BCF2D38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BCF2D40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BCF2D48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BCF2D50(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23BCF2D5C()
{
  return 0;
}

void sub_23BCF2D64()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2D74()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2D84()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2D94()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DA4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DB4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DC4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DD4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DE4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2DF4()
{
  JUMPOUT(0x242610FF4);
}

void sub_23BCF2E04()
{
  JUMPOUT(0x242610FF4);
}

uint64_t sub_23BCF2E14()
{
  return 3;
}

uint64_t sub_23BCF2E1C()
{
  return 2;
}

uint64_t sub_23BCF2E24()
{
  return 0x65636E6174736E69;
}

uint64_t sub_23BCF2E3C()
{
  return sub_23BCEF76C();
}

unint64_t DynamicPredicateBooleanValue.makePredicateExpression<A>(using:)@<X0>(uint64_t a1@<X8>)
{
  char v2;
  unint64_t result;

  v2 = sub_23BD4530C();
  *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA13F0);
  result = sub_23BCF2E9C();
  *(_QWORD *)(a1 + 32) = result;
  *(_BYTE *)a1 = v2 & 1;
  return result;
}

unint64_t sub_23BCF2E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA13F8;
  if (!qword_256AA13F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA13F0);
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateValue<A>, v1);
    atomic_store(result, (unint64_t *)&qword_256AA13F8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242610FE8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_23BCF2F2C@<X0>(uint64_t a1@<X8>)
{
  return DynamicPredicateBooleanValue.makePredicateExpression<A>(using:)(a1);
}

uint64_t ImageAssetState.loadStateBySize.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImageAssetState.loadStateBySize.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ImageAssetState.loadStateBySize.modify())()
{
  return nullsub_1;
}

uint64_t ImageAssetState.init(displayScale:imageAsset:loadStateBySize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = a3 + *(int *)(type metadata accessor for ImageAssetState() + 24);
  v9 = type metadata accessor for ImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(double *)(a3 + 8) = a4;
  result = sub_23BCF303C(a1, v8);
  *(_QWORD *)a3 = a2;
  return result;
}

uint64_t type metadata accessor for ImageAssetState()
{
  uint64_t result;

  result = qword_256AA14E0;
  if (!qword_256AA14E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BCF303C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BCF3084(char a1)
{
  return qword_23BD46BB0[a1];
}

BOOL sub_23BCF30A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BCF30B8()
{
  char *v0;

  return sub_23BCF3084(*v0);
}

uint64_t sub_23BCF30C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BCF601C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BCF30E4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23BCF30F0()
{
  sub_23BCF32F8();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF3118()
{
  sub_23BCF32F8();
  return sub_23BD45C18();
}

uint64_t ImageAssetState.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1408);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BCF32F8();
  sub_23BD45BF4();
  v11 = *v3;
  HIBYTE(v10) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1418);
  sub_23BCF333C();
  sub_23BD45AF8();
  if (!v2)
  {
    v11 = v3[1];
    HIBYTE(v10) = 1;
    sub_23BCF33D0();
    sub_23BD45AF8();
    type metadata accessor for ImageAssetState();
    LOBYTE(v11) = 2;
    type metadata accessor for ImageAsset();
    sub_23BCEEF14(&qword_256AA1448, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    sub_23BD45AD4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BCF32F8()
{
  unint64_t result;

  result = qword_256AA1410;
  if (!qword_256AA1410)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46B5C, &type metadata for ImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1410);
  }
  return result;
}

unint64_t sub_23BCF333C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1420;
  if (!qword_256AA1420)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1418);
    v2[0] = sub_23BCEEF14(&qword_256AA1428, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    v2[1] = sub_23BCF37A8(&qword_256AA1430, (uint64_t)&protocol conformance descriptor for AssetLoadState<A, B>);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1420);
  }
  return result;
}

unint64_t sub_23BCF33D0()
{
  unint64_t result;

  result = qword_256AA1440;
  if (!qword_256AA1440)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AA1440);
  }
  return result;
}

uint64_t ImageAssetState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v22 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1450);
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageAssetState();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (uint64_t)v12 + *(int *)(v10 + 24);
  v14 = type metadata accessor for ImageAsset();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v25 = v13;
  v15(v13, 1, 1, v14);
  v16 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BCF32F8();
  v17 = v26;
  sub_23BD45BE8();
  if (v17)
  {
    v20 = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return sub_23BCEEED8(v20, &qword_256AA1400);
  }
  else
  {
    v18 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1418);
    v27 = 0;
    sub_23BCF3714();
    v19 = v23;
    sub_23BD45AA4();
    *v12 = v28;
    v27 = 1;
    sub_23BCF37EC();
    sub_23BD45AA4();
    v12[1] = v28;
    LOBYTE(v28) = 2;
    sub_23BCEEF14(&qword_256AA1478, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    sub_23BD45A80();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v19);
    sub_23BCF303C(v18, v25);
    sub_23BCF6190((uint64_t)v12, v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetState);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return sub_23BCF56E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetState);
  }
}

unint64_t sub_23BCF3714()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1458;
  if (!qword_256AA1458)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1418);
    v2[0] = sub_23BCEEF14(&qword_256AA1460, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    v2[1] = sub_23BCF37A8(&qword_256AA1468, (uint64_t)&protocol conformance descriptor for AssetLoadState<A, B>);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1458);
  }
  return result;
}

uint64_t sub_23BCF37A8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1438);
    result = MEMORY[0x242610FF4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BCF37EC()
{
  unint64_t result;

  result = qword_256AA1470;
  if (!qword_256AA1470)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AA1470);
  }
  return result;
}

uint64_t sub_23BCF3830@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImageAssetState.init(from:)(a1, a2);
}

uint64_t sub_23BCF3844(_QWORD *a1)
{
  return ImageAssetState.encode(to:)(a1);
}

uint64_t ImageAssetState.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23BCF3DF4(a1, v3);
  swift_bridgeObjectRelease();
  sub_23BD45BAC();
  type metadata accessor for ImageAssetState();
  return sub_23BCF3A58((uint64_t)a1);
}

uint64_t ImageAssetState.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  sub_23BD45B88();
  v1 = *v0;
  swift_bridgeObjectRetain();
  sub_23BCF3DF4(v3, v1);
  swift_bridgeObjectRelease();
  sub_23BD45BAC();
  type metadata accessor for ImageAssetState();
  sub_23BCF3A58((uint64_t)v3);
  return sub_23BD45BB8();
}

uint64_t sub_23BCF3958(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_23BCF3DF4(a1, v3);
  swift_bridgeObjectRelease();
  sub_23BD45BAC();
  return sub_23BCF3A58((uint64_t)a1);
}

uint64_t sub_23BCF39D0()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  sub_23BD45B88();
  v1 = *v0;
  swift_bridgeObjectRetain();
  sub_23BCF3DF4(v3, v1);
  swift_bridgeObjectRelease();
  sub_23BD45BAC();
  sub_23BCF3A58((uint64_t)v3);
  return sub_23BD45BB8();
}

uint64_t sub_23BCF3A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v2 = sub_23BD4515C();
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v4);
  v27 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ImageAsset();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v1, (uint64_t)v19, &qword_256AA1400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13) == 1)
    return sub_23BD45BA0();
  sub_23BCF61D4((uint64_t)v19, (uint64_t)v16);
  sub_23BD45BA0();
  sub_23BCECE9C((uint64_t)v16, (uint64_t)v12, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v22 = v28;
  v21 = v29;
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  v23 = v27;
  sub_23BCECE9C((uint64_t)&v16[*(int *)(v13 + 28)], v27, &qword_256AA0FE8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v24 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v26, v23, v21);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  return sub_23BCF56E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
}

uint64_t sub_23BCF3DF4(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v4 = sub_23BD451C8();
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v64 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_23BD451A4();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v61 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1558);
  MEMORY[0x24BDAC7A8](v60);
  v59 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v69 = *(_QWORD *)(v71 - 8);
  v8 = MEMORY[0x24BDAC7A8](v71);
  v73 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v56 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1560);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v56 - v16;
  v18 = *(_QWORD *)(a2 + 64);
  v58 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v67 = (unint64_t)(v19 + 63) >> 6;
  v57 = v67 - 1;
  v70 = a2;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v72 = 0;
  v68 = v11;
  while (1)
  {
    if (v21)
    {
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v72 << 6);
      goto LABEL_8;
    }
    v31 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v31 < v67)
    {
      v32 = *(_QWORD *)(v58 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v72 + 2;
      ++v72;
      if (v31 + 1 < v67)
      {
        v32 = *(_QWORD *)(v58 + 8 * v33);
        if (v32)
        {
          ++v31;
          goto LABEL_12;
        }
        v34 = v31 + 2;
        v72 = v31 + 1;
        if (v31 + 2 < v67)
          break;
      }
    }
LABEL_24:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v15, 1, 1, v35);
    v21 = 0;
LABEL_25:
    sub_23BCECF30((uint64_t)v15, (uint64_t)v17, &qword_256AA1560);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v17, 1, v36) == 1)
    {
      swift_release();
      return sub_23BD45B94();
    }
    sub_23BCECF30((uint64_t)&v17[*(int *)(v36 + 48)], (uint64_t)v11, &qword_256AA1438);
    v37 = *((_QWORD *)a1 + 8);
    v38 = a1[1];
    v74 = *a1;
    v75 = v38;
    v39 = a1[3];
    v76 = a1[2];
    v77 = v39;
    v78 = v37;
    sub_23BD45BAC();
    sub_23BD45BAC();
    sub_23BCECE9C((uint64_t)v11, v73, &qword_256AA1438);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v41 = v65;
        v42 = v66;
        v43 = v23;
        v44 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v64, v73, v66);
        sub_23BD45B94();
        sub_23BCEEF14(&qword_256AA1160, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_23BD45714();
        v45 = *(void (**)(char *, uint64_t))(v41 + 8);
        v11 = v68;
        v46 = v44;
        v23 = v43;
        v45(v46, v42);
      }
      else
      {
        sub_23BD45B94();
      }
    }
    else
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1570);
      v48 = v73 + *(int *)(v47 + 48);
      v49 = v59;
      sub_23BCECF30(v73, v59, &qword_256AA1558);
      v50 = v62;
      v51 = v23;
      v52 = v61;
      v53 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v61, v48, v63);
      sub_23BD45B94();
      sub_23BCEEF14(&qword_256AA1578, (uint64_t (*)(uint64_t))type metadata accessor for FetchedImageAsset, (uint64_t)&protocol conformance descriptor for FetchedImageAsset);
      sub_23BCF6218();
      sub_23BD45BD0();
      sub_23BCEEF14(qword_256AA1168, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      sub_23BD45714();
      v54 = v52;
      v23 = v51;
      v55 = v53;
      v11 = v68;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v55);
      sub_23BCEEED8(v49, &qword_256AA1558);
    }
    sub_23BCEEED8((uint64_t)v11, &qword_256AA1438);
    result = sub_23BD45BB8();
    v23 ^= result;
  }
  v32 = *(_QWORD *)(v58 + 8 * v34);
  if (v32)
  {
    v31 += 2;
LABEL_12:
    v21 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    v72 = v31;
LABEL_8:
    v26 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * v25);
    v27 = *v26;
    v28 = v26[1];
    v29 = *(_QWORD *)(v70 + 56) + *(_QWORD *)(v69 + 72) * v25;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
    sub_23BCECE9C(v29, (uint64_t)v15 + *(int *)(v30 + 48), &qword_256AA1438);
    *v15 = v27;
    v15[1] = v28;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
    goto LABEL_25;
  }
  while (1)
  {
    v31 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v31 >= v67)
    {
      v72 = v57;
      goto LABEL_24;
    }
    v32 = *(_QWORD *)(v58 + 8 * v31);
    ++v34;
    if (v32)
      goto LABEL_12;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23BCF4440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71[4];
  uint64_t v72;

  v63 = sub_23BD4515C();
  v68 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v57 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BD451F8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v56 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &qword_256AA0FE0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v12);
  v62 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for ImageAsset();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1540);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v53 - v20;
  v22 = *(_QWORD *)(a2 + 64);
  v55 = a2 + 64;
  v23 = 1 << *(_BYTE *)(a2 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v70 = v24 & v22;
  v58 = (unint64_t)(v23 + 63) >> 6;
  v54 = v58 - 1;
  v60 = a2;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  v64 = v15;
  v65 = 0;
  v66 = v21;
  v67 = v18;
  while (1)
  {
    v69 = v26;
    if (v70)
    {
      v32 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      v33 = v32 | (v65 << 6);
      goto LABEL_8;
    }
    v37 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v37 < v58)
    {
      v38 = *(_QWORD *)(v55 + 8 * v37);
      if (v38)
        goto LABEL_12;
      v39 = v65 + 2;
      ++v65;
      if (v37 + 1 < v58)
      {
        v38 = *(_QWORD *)(v55 + 8 * v39);
        if (v38)
        {
          ++v37;
          goto LABEL_12;
        }
        v40 = v37 + 2;
        v65 = v37 + 1;
        if (v37 + 2 < v58)
          break;
      }
    }
LABEL_24:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v18, 1, 1, v41);
    v70 = 0;
LABEL_25:
    sub_23BCECF30((uint64_t)v18, (uint64_t)v21, &qword_256AA1540);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v21, 1, v42) == 1)
    {
      swift_release();
      return sub_23BD45B94();
    }
    v43 = *(int *)(v42 + 48);
    sub_23BCF61D4((uint64_t)v21, (uint64_t)v15);
    v44 = *(_QWORD *)&v21[v43];
    v45 = *(_QWORD *)(a1 + 64);
    v46 = *(_OWORD *)(a1 + 16);
    v71[0] = *(_OWORD *)a1;
    v71[1] = v46;
    v47 = *(_OWORD *)(a1 + 48);
    v71[2] = *(_OWORD *)(a1 + 32);
    v71[3] = v47;
    v72 = v45;
    v48 = v62;
    sub_23BCECE9C((uint64_t)v15, v62, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v48, 1, v8) == 1)
    {
      sub_23BD45BA0();
    }
    else
    {
      v49 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v56, v48, v8);
      sub_23BD45BA0();
      sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
      sub_23BD45714();
      v50 = v49;
      v15 = v64;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v50, v8);
    }
    v51 = v61;
    sub_23BD45780();
    sub_23BD45780();
    swift_bridgeObjectRelease();
    sub_23BCECE9C((uint64_t)&v15[*(int *)(v51 + 28)], (uint64_t)v7, &qword_256AA0FE8);
    v52 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v7, 1, v63) == 1)
    {
      sub_23BD45BA0();
    }
    else
    {
      v27 = v68;
      v28 = v11;
      v29 = v57;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v57, v7, v52);
      sub_23BD45BA0();
      sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_23BD45714();
      v30 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31 = v29;
      v11 = v28;
      v21 = v66;
      v18 = v67;
      v15 = v64;
      v30(v31, v52);
    }
    sub_23BCF56E0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    sub_23BCF3DF4(v71, v44);
    swift_bridgeObjectRelease();
    result = sub_23BD45BB8();
    v26 = result ^ v69;
  }
  v38 = *(_QWORD *)(v55 + 8 * v40);
  if (v38)
  {
    v37 += 2;
LABEL_12:
    v70 = (v38 - 1) & v38;
    v33 = __clz(__rbit64(v38)) + (v37 << 6);
    v65 = v37;
LABEL_8:
    v34 = v60;
    v18 = v67;
    sub_23BCF6190(*(_QWORD *)(v60 + 48) + *(_QWORD *)(v59 + 72) * v33, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v33);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
    *(_QWORD *)&v18[*(int *)(v36 + 48)] = v35;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v18, 0, 1, v36);
    swift_bridgeObjectRetain();
    v21 = v66;
    goto LABEL_25;
  }
  while (1)
  {
    v37 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v37 >= v58)
    {
      v65 = v54;
      goto LABEL_24;
    }
    v38 = *(_QWORD *)(v55 + 8 * v37);
    ++v40;
    if (v38)
      goto LABEL_12;
  }
LABEL_33:
  __break(1u);
  return result;
}

BOOL _s12FitnessAsset05ImageB5StateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v26;
  char *v27;

  v4 = type metadata accessor for ImageAsset();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1550);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v26 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v26 - v18;
  if ((sub_23BD0B954(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v27 = v7;
  v20 = type metadata accessor for ImageAssetState();
  sub_23BCECE9C(a1 + *(int *)(v20 + 24), (uint64_t)v19, &qword_256AA1400);
  sub_23BCECE9C(a2 + *(int *)(v20 + 24), (uint64_t)v17, &qword_256AA1400);
  v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_23BCECE9C((uint64_t)v19, (uint64_t)v10, &qword_256AA1400);
  sub_23BCECE9C((uint64_t)v17, v21, &qword_256AA1400);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_23BCEEED8((uint64_t)v17, &qword_256AA1400);
    sub_23BCEEED8((uint64_t)v19, &qword_256AA1400);
    if (v22(v21, 1, v4) == 1)
    {
      sub_23BCEEED8((uint64_t)v10, &qword_256AA1400);
      return 1;
    }
    goto LABEL_8;
  }
  sub_23BCECE9C((uint64_t)v10, (uint64_t)v14, &qword_256AA1400);
  if (v22(v21, 1, v4) == 1)
  {
    sub_23BCEEED8((uint64_t)v17, &qword_256AA1400);
    sub_23BCEEED8((uint64_t)v19, &qword_256AA1400);
    sub_23BCF56E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
LABEL_8:
    sub_23BCEEED8((uint64_t)v10, &qword_256AA1550);
    return 0;
  }
  v23 = (uint64_t)v27;
  sub_23BCF61D4(v21, (uint64_t)v27);
  v24 = static ImageAsset.== infix(_:_:)(v14, v23);
  sub_23BCF56E0(v23, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCEEED8((uint64_t)v17, &qword_256AA1400);
  sub_23BCEEED8((uint64_t)v19, &qword_256AA1400);
  sub_23BCF56E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCEEED8((uint64_t)v10, &qword_256AA1400);
  return (v24 & 1) != 0;
}

uint64_t sub_23BCF4DE0()
{
  return sub_23BCEEF14(&qword_256AA1480, (uint64_t (*)(uint64_t))type metadata accessor for ImageAssetState, (uint64_t)&protocol conformance descriptor for ImageAssetState);
}

uint64_t *initializeBufferWithCopyOfBuffer for ImageAssetState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = (int *)type metadata accessor for ImageAsset();
    v10 = *((_QWORD *)v9 - 1);
    v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = sub_23BD451F8();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v7, v8, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
      }
      v16 = v9[5];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v19;
      v7[v9[6]] = v8[v9[6]];
      v20 = v9[7];
      v21 = &v7[v20];
      v22 = &v8[v20];
      v23 = sub_23BD4515C();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      if (v25(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for ImageAssetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ImageAsset();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v7);
    swift_bridgeObjectRelease();
    v9 = v4 + *(int *)(v5 + 28);
    v10 = sub_23BD4515C();
    v11 = *(_QWORD *)(v10 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  return result;
}

_QWORD *initializeWithCopy for ImageAssetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = (int *)type metadata accessor for ImageAsset();
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(unsigned int (**)(char *, uint64_t, int *))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23BD451F8();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v6, v7, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
    }
    v15 = v8[5];
    v16 = &v6[v15];
    v17 = &v7[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v6[v8[6]] = v7[v8[6]];
    v19 = v8[7];
    v20 = &v6[v19];
    v21 = &v7[v19];
    v22 = sub_23BD4515C();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for ImageAssetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_BYTE *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for ImageAsset();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_23BCF56E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      goto LABEL_7;
    }
    v20 = sub_23BD451F8();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    v23 = v22(v7, 1, v20);
    v24 = v22(v8, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 16))(v7, v8, v20);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v7, 0, 1, v20);
LABEL_21:
        v37 = v9[5];
        v38 = &v7[v37];
        v39 = &v8[v37];
        *v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v7[v9[6]] = v8[v9[6]];
        v40 = v9[7];
        v41 = &v7[v40];
        v42 = &v8[v40];
        v43 = sub_23BD4515C();
        v44 = *(_QWORD *)(v43 - 8);
        v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
        v46 = v45(v41, 1, v43);
        v47 = v45(v42, 1, v43);
        if (v46)
        {
          if (!v47)
          {
            (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
            return a1;
          }
        }
        else
        {
          if (!v47)
          {
            (*(void (**)(char *, char *, uint64_t))(v44 + 24))(v41, v42, v43);
            return a1;
          }
          (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
        }
        v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8) - 8) + 64);
        v18 = v41;
        v19 = v42;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 24))(v7, v8, v20);
        goto LABEL_21;
      }
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v7, v20);
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_21;
  }
  if (v13)
  {
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400) - 8) + 64);
    v18 = v7;
    v19 = v8;
LABEL_8:
    memcpy(v18, v19, v17);
    return a1;
  }
  v14 = sub_23BD451F8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v7, v8, v14);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  }
  v25 = v9[5];
  v26 = &v7[v25];
  v27 = &v8[v25];
  *v26 = *v27;
  v26[1] = v27[1];
  v7[v9[6]] = v8[v9[6]];
  v28 = v9[7];
  v29 = &v7[v28];
  v30 = &v8[v28];
  v31 = sub_23BD4515C();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  swift_bridgeObjectRetain();
  if (v33(v30, 1, v31))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_23BCF56E0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for ImageAssetState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for ImageAsset();
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_23BD451F8();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v5, v6, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
    }
    *(_OWORD *)&v5[v7[5]] = *(_OWORD *)&v6[v7[5]];
    v5[v7[6]] = v6[v7[6]];
    v13 = v7[7];
    v14 = &v5[v13];
    v15 = &v6[v13];
    v16 = sub_23BD4515C();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for ImageAssetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_BYTE *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for ImageAsset();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_23BCF56E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      goto LABEL_7;
    }
    v20 = sub_23BD451F8();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    v23 = v22(v7, 1, v20);
    v24 = v22(v8, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v7, v8, v20);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v7, 0, 1, v20);
LABEL_21:
        v33 = v9[5];
        v34 = &v7[v33];
        v35 = (uint64_t *)&v8[v33];
        v37 = *v35;
        v36 = v35[1];
        *v34 = v37;
        v34[1] = v36;
        swift_bridgeObjectRelease();
        v7[v9[6]] = v8[v9[6]];
        v38 = v9[7];
        v39 = &v7[v38];
        v40 = &v8[v38];
        v41 = sub_23BD4515C();
        v42 = *(_QWORD *)(v41 - 8);
        v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
        v44 = v43(v39, 1, v41);
        v45 = v43(v40, 1, v41);
        if (v44)
        {
          if (!v45)
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
            return a1;
          }
        }
        else
        {
          if (!v45)
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v39, v40, v41);
            return a1;
          }
          (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
        }
        v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8) - 8) + 64);
        v18 = v39;
        v19 = v40;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 40))(v7, v8, v20);
        goto LABEL_21;
      }
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v7, v20);
    }
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_21;
  }
  if (v13)
  {
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400) - 8) + 64);
    v18 = v7;
    v19 = v8;
LABEL_8:
    memcpy(v18, v19, v17);
    return a1;
  }
  v14 = sub_23BD451F8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v7, v8, v14);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  }
  *(_OWORD *)&v7[v9[5]] = *(_OWORD *)&v8[v9[5]];
  v7[v9[6]] = v8[v9[6]];
  v25 = v9[7];
  v26 = &v7[v25];
  v27 = &v8[v25];
  v28 = sub_23BD4515C();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageAssetState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BCF5C9C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ImageAssetState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BCF5D28(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_23BCF5DA0()
{
  unint64_t v0;

  sub_23BCF5E24();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_23BCF5E24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AA14F0)
  {
    type metadata accessor for ImageAsset();
    v0 = sub_23BD4590C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AA14F0);
  }
}

uint64_t storeEnumTagSinglePayload for ImageAssetState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BCF5EC4 + 4 * byte_23BD469BD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BCF5EF8 + 4 * byte_23BD469B8[v4]))();
}

uint64_t sub_23BCF5EF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF5F00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BCF5F08);
  return result;
}

uint64_t sub_23BCF5F14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BCF5F1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BCF5F20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BCF5F28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetState.CodingKeys()
{
  return &type metadata for ImageAssetState.CodingKeys;
}

unint64_t sub_23BCF5F48()
{
  unint64_t result;

  result = qword_256AA1528;
  if (!qword_256AA1528)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46B34, &type metadata for ImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1528);
  }
  return result;
}

unint64_t sub_23BCF5F90()
{
  unint64_t result;

  result = qword_256AA1530;
  if (!qword_256AA1530)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46AA4, &type metadata for ImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1530);
  }
  return result;
}

unint64_t sub_23BCF5FD8()
{
  unint64_t result;

  result = qword_256AA1538;
  if (!qword_256AA1538)
  {
    result = MEMORY[0x242610FF4](&unk_23BD46ACC, &type metadata for ImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1538);
  }
  return result;
}

uint64_t sub_23BCF601C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7461745364616F6CLL && a2 == 0xEF657A6953794265;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C6163 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373416567616D69 && a2 == 0xEA00000000007465)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BCF6190(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BCF61D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BCF6218()
{
  unint64_t result;

  result = qword_256AA1580;
  if (!qword_256AA1580)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageAssetLoadError, &type metadata for ImageAssetLoadError);
    atomic_store(result, (unint64_t *)&qword_256AA1580);
  }
  return result;
}

uint64_t sub_23BCF625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23BCF6F84;
  return MonogramFetching.fetchAccountMonogram(_:for:)(a1, a2, a3, a4, a5);
}

uint64_t sub_23BCF62DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = sub_23BD4512C();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23BCF6340()
{
  uint64_t v0;
  id v1;
  void *v2;
  _QWORD *v3;
  _BYTE *v5;

  v1 = objc_msgSend(*(id *)(v0 + 48), sel_userFullName);
  if (v1)
  {
    v2 = v1;
    sub_23BD45768();

    sub_23BD45138();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_23BCF6440;
    return MonogramFetcher.fetchAccountProfileImage(_:for:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else
  {
    sub_23BCF6C74();
    swift_allocError();
    *v5 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23BCF6440(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v2 + 88) = a1;
  swift_task_dealloc();
  if (v1)

  return swift_task_switch();
}

id sub_23BCF64B4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id result;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = qword_256AA0FC0;
  v2 = *(id *)(v0 + 88);
  if (v1 != -1)
    swift_once();
  v3 = *(void **)(v0 + 48);
  v4 = (id)qword_256AACDC0;
  result = objc_msgSend(v3, sel_aa_altDSID);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(v0 + 88);
    v8 = sub_23BD45768();
    v10 = v9;

    *(_QWORD *)(v0 + 16) = v8;
    *(_QWORD *)(v0 + 24) = v10;
    v11 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1590));
    swift_bridgeObjectRetain();
    v12 = (void *)sub_23BD452E8();
    objc_msgSend(v4, sel_setObject_forKey_, v7, v12);

    swift_bridgeObjectRelease();
    v13 = *(void **)(v0 + 88);
    result = objc_msgSend(*(id *)(v0 + 48), sel_aa_altDSID);
    if (result)
    {
      v14 = result;
      v16 = *(_QWORD *)(v0 + 64);
      v15 = *(_QWORD *)(v0 + 72);
      v17 = *(_QWORD *)(v0 + 56);
      v18 = *(uint64_t **)(v0 + 32);
      v19 = sub_23BD45768();
      v21 = v20;

      v22 = type metadata accessor for Monogram();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))((char *)v18 + *(int *)(v22 + 20), v15, v17);
      *v18 = v19;
      v18[1] = v21;
      swift_task_dealloc();
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_23BCF6640()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = objc_msgSend(*(id *)(v0 + 48), sel_aa_altDSID);
  if (result)
  {
    v2 = result;
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = *(uint64_t **)(v0 + 32);
    v7 = sub_23BD45768();
    v9 = v8;

    v10 = type metadata accessor for Monogram();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))((char *)v6 + *(int *)(v10 + 20), v3, v5);
    *v6 = v7;
    v6[1] = v9;
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MonogramFetching.fetchAccountMonogram(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v10 = sub_23BD4512C();
  v6[10] = v10;
  v6[11] = *(_QWORD *)(v10 - 8);
  v11 = swift_task_alloc();
  v6[12] = v11;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 24) + *(_QWORD *)(a5 + 24));
  v12 = (_QWORD *)swift_task_alloc();
  v6[13] = v12;
  *v12 = v6;
  v12[1] = sub_23BCF67AC;
  return v14(v11, a3, a4, a5);
}

uint64_t sub_23BCF67AC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD);

  v2 = (_QWORD *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v5 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v2[8] + 16) + *(_QWORD *)(v2[8] + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v2[15] = v4;
  *v4 = v2;
  v4[1] = sub_23BCF6860;
  return v5(v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_23BCF6860(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v2 + 128) = a1;
  swift_task_dealloc();
  if (v1)

  return swift_task_switch();
}

id sub_23BCF68D4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id result;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = qword_256AA0FC0;
  v2 = *(id *)(v0 + 128);
  if (v1 != -1)
    swift_once();
  v3 = *(void **)(v0 + 48);
  v4 = (id)qword_256AACDC0;
  result = objc_msgSend(v3, sel_aa_altDSID);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(v0 + 128);
    v8 = sub_23BD45768();
    v10 = v9;

    *(_QWORD *)(v0 + 16) = v8;
    *(_QWORD *)(v0 + 24) = v10;
    v11 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1590));
    swift_bridgeObjectRetain();
    v12 = (void *)sub_23BD452E8();
    objc_msgSend(v4, sel_setObject_forKey_, v7, v12);

    swift_bridgeObjectRelease();
    v13 = *(void **)(v0 + 128);
    result = objc_msgSend(*(id *)(v0 + 48), sel_aa_altDSID);
    if (result)
    {
      v14 = result;
      v16 = *(_QWORD *)(v0 + 88);
      v15 = *(_QWORD *)(v0 + 96);
      v17 = *(_QWORD *)(v0 + 80);
      v18 = *(uint64_t **)(v0 + 32);
      v19 = sub_23BD45768();
      v21 = v20;

      v22 = type metadata accessor for Monogram();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))((char *)v18 + *(int *)(v22 + 20), v15, v17);
      *v18 = v19;
      v18[1] = v21;
      swift_task_dealloc();
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23BCF6A60()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_23BCF6A94()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = objc_msgSend(*(id *)(v0 + 48), sel_aa_altDSID);
  if (result)
  {
    v2 = result;
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(uint64_t **)(v0 + 32);
    v7 = sub_23BD45768();
    v9 = v8;

    v10 = type metadata accessor for Monogram();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))((char *)v6 + *(int *)(v10 + 20), v3, v5);
    *v6 = v7;
    v6[1] = v9;
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BCF6B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23BCF6F84;
  v5[2] = a1;
  v5[3] = a2;
  return swift_task_switch();
}

uint64_t MonogramFetching.fetchAccountProfileNameComponents(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_23BCF6BC0()
{
  uint64_t v0;
  id v1;
  void *v2;
  _BYTE *v3;

  v1 = objc_msgSend(*(id *)(v0 + 24), sel_userFullName);
  if (v1)
  {
    v2 = v1;
    sub_23BD45768();

    sub_23BD45138();
  }
  else
  {
    sub_23BCF6C74();
    swift_allocError();
    *v3 = 0;
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23BCF6C74()
{
  unint64_t result;

  result = qword_256AA15A0;
  if (!qword_256AA15A0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for MonogramError, &type metadata for MonogramError);
    atomic_store(result, (unint64_t *)&qword_256AA15A0);
  }
  return result;
}

uint64_t dispatch thunk of MonogramFetching.fetchAccountMonogram(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23BCF6D4C;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_23BCF6D4C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of MonogramFetching.fetchAccountProfileImage(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23BCF6E18;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_23BCF6E18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of MonogramFetching.fetchAccountProfileNameComponents(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23BCF6F84;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_23BCF6EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256AA15E0 + dword_256AA15E0);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23BCF6D4C;
  return v9(a1, a2, a3);
}

uint64_t sub_23BCF6F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t ArtworkAssetView.init(store:placeholderImage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a4 = sub_23BCF7008;
  *(_QWORD *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t sub_23BCF6FE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BCF7008()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_23BCF7028(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD45684();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + 24);
  if (!v13)
  {
    sub_23BCF7984();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
    sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    sub_23BCF7978();
    swift_getKeyPath();
    sub_23BD456CC();
    swift_release();
    swift_release();
    v16 = type metadata accessor for ImageAsset();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v5, 1, v16) == 1)
    {
      v17 = &qword_256AA1400;
      v18 = (uint64_t)v5;
    }
    else
    {
      sub_23BCECE9C((uint64_t)v5, (uint64_t)v8, &qword_256AA0FE0);
      sub_23BCF56E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v19 = sub_23BD451F8();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) != 1)
      {
        v21 = (id)sub_23BD451EC();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
        goto LABEL_9;
      }
      v17 = &qword_256AA0FE0;
      v18 = (uint64_t)v8;
    }
    sub_23BCEEED8(v18, v17);
    v21 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemFillColor);
LABEL_9:
    v23 = MEMORY[0x242610670](v21);
    v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1668);
    sub_23BCF8FA4();
    sub_23BD455D0();
    goto LABEL_10;
  }
  v14 = v13;
  sub_23BD4566C();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDF3FD0], v9);
  v15 = sub_23BD45690();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = v15;
  v24 = 0;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1668);
  sub_23BCF8FA4();
  sub_23BD455D0();
  swift_release();

LABEL_10:
  v22 = v26;
  *(_QWORD *)a1 = v25;
  *(_BYTE *)(a1 + 8) = v22;
}

uint64_t sub_23BCF73B0()
{
  return sub_23BD45648();
}

id sub_23BCF73C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_BYTE *)v1 + 16);
  v8 = (id)v1[3];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = v8;
  *a1 = sub_23BCF7980;
  a1[1] = v6;
  sub_23BCF7984();
  return v8;
}

id ArtworkAssetView.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_BYTE *)v1 + 16);
  v8 = (id)v1[3];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = v8;
  *a1 = sub_23BCF7980;
  a1[1] = v6;
  sub_23BCF7984();
  return v8;
}

uint64_t sub_23BCF74D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  char v74;

  v56 = a5;
  v8 = a3 & 1;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v54);
  v64 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1600);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1608);
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45468();
  sub_23BD458F4();
  v16 = v15;
  v18 = v17;
  sub_23BCF7C3C(a1, a2, v8, a4, &v67, v15, v17);
  sub_23BD45468();
  v65 = v19;
  v66 = v20;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  *(_BYTE *)(v21 + 32) = v8;
  *(_QWORD *)(v21 + 40) = a4;
  sub_23BCF7984();
  v57 = a4;
  v22 = a4;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1610);
  type metadata accessor for CGSize();
  v25 = v24;
  v26 = sub_23BCF8E04();
  v27 = sub_23BCF919C();
  v61 = v12;
  v55 = v23;
  v28 = v25;
  v29 = v27;
  sub_23BD45654();
  swift_release();
  sub_23BCF91E4(v67, v68, v69, v70, v71, v72, v73, v74);
  sub_23BCF7984();
  v30 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
  sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  sub_23BCF7978();

  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  v31 = v65;
  if (*(_QWORD *)(v65 + 16) && (v32 = sub_23BD203EC(v16, v18), (v33 & 1) != 0))
  {
    v34 = v32;
    v52 = v30;
    v35 = v28;
    v36 = *(_QWORD *)(v31 + 56);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    v53 = v29;
    v38 = v26;
    v39 = *(_QWORD *)(v37 - 8);
    v40 = v36 + *(_QWORD *)(v39 + 72) * v34;
    v28 = v35;
    v41 = v64;
    sub_23BCECE9C(v40, v64, &qword_256AA1438);
    v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56);
    v26 = v38;
    v29 = v53;
    v43 = v41;
    v30 = v52;
    v42(v43, 0, 1, v37);
  }
  else
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v64, 1, 1, v44);
  }
  swift_bridgeObjectRelease();
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = a1;
  *(_QWORD *)(v45 + 24) = a2;
  *(_BYTE *)(v45 + 32) = v8 != 0;
  *(_QWORD *)(v45 + 40) = v57;
  *(double *)(v45 + 48) = v16;
  *(double *)(v45 + 56) = v18;
  sub_23BCF7984();
  v46 = v30;
  v67 = v55;
  v68 = v28;
  v69 = v26;
  v70 = v29;
  swift_getOpaqueTypeConformance2();
  sub_23BCF94EC();
  v47 = v58;
  v49 = v63;
  v48 = v64;
  v50 = v61;
  sub_23BD45654();
  swift_release();
  sub_23BCEEED8(v48, &qword_256AA15F8);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v49);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v59 + 32))(v56, v47, v60);
}

uint64_t sub_23BCF7970()
{
  return objectdestroy_2Tm();
}

uint64_t sub_23BCF7978()
{
  return swift_release();
}

uint64_t sub_23BCF7984()
{
  return swift_retain();
}

uint64_t sub_23BCF798C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for ArtworkAssetView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for ArtworkAssetView(uint64_t a1)
{
  sub_23BCF7978();

}

uint64_t initializeWithCopy for ArtworkAssetView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BCF7984();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = v7;
  return a1;
}

uint64_t assignWithCopy for ArtworkAssetView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BCF7984();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BCF7978();
  v7 = *(void **)(a1 + 24);
  v8 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for ArtworkAssetView(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BCF7978();
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for ArtworkAssetView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtworkAssetView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtworkAssetView()
{
  return &type metadata for ArtworkAssetView;
}

uint64_t sub_23BCF7BF0()
{
  return sub_23BCF9568(&qword_256AA15E8, &qword_256AA15F0, MEMORY[0x24BDEC6F8]);
}

uint64_t sub_23BCF7C1C()
{
  return objectdestroy_2Tm();
}

uint64_t sub_23BCF7C24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BCF74D8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(void **)(v1 + 40), a1);
}

uint64_t sub_23BCF7C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  __int128 v99;
  _QWORD *v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  __int128 v104;
  __int16 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int16 v110;
  char v111;

  v100 = a5;
  v12 = a3 & 1;
  v13 = type metadata accessor for FetchedImageAsset();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v91 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v92 = (uint64_t)&v91 - v16;
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1558);
  v17 = MEMORY[0x24BDAC7A8](v96);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v98 = (uint64_t)&v91 - v20;
  v95 = sub_23BD45684();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v93 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)&v102 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)&v101 = (char *)&v91 - v29;
  sub_23BCF7984();
  *(_QWORD *)&v99 = a4;
  v30 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
  sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  sub_23BCF7978();
  v97 = v30;

  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  v31 = v107;
  if (*(_QWORD *)(v107 + 16) && (v32 = sub_23BD203EC(a6, a7), (v33 & 1) != 0))
  {
    sub_23BCECE9C(*(_QWORD *)(v31 + 56) + *(_QWORD *)(v26 + 72) * v32, (uint64_t)v24, &qword_256AA1438);
    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  v35 = v102;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, v34, 1, v25);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    v36 = v101;
    swift_storeEnumTagMultiPayload();
    sub_23BCEEED8((uint64_t)v24, &qword_256AA15F8);
  }
  else
  {
    v36 = v101;
    sub_23BCECF30((uint64_t)v24, v101, &qword_256AA1438);
  }
  sub_23BCECE9C(v36, v35, &qword_256AA1438);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      if ((_QWORD)v99)
      {
        v38 = v97;
        sub_23BD4566C();
        v39 = v94;
        v40 = v93;
        v41 = v95;
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, *MEMORY[0x24BDF3FD0], v95);
        v42 = sub_23BD45690();
        swift_release();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        *(_QWORD *)v103 = v42;
        *(_WORD *)&v103[8] = 0;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
        sub_23BCF8F88();
        sub_23BD455D0();
        swift_release();

      }
      else
      {
        *(_QWORD *)&v107 = a1;
        *((_QWORD *)&v107 + 1) = a2;
        LOBYTE(v108) = v12 != 0;
        *((_QWORD *)&v108 + 1) = 0;
        sub_23BCF7028((uint64_t)v103);
        v103[9] = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
        sub_23BCF8F88();
        sub_23BD455D0();
      }
      LODWORD(v99) = BYTE8(v107);
      v73 = 256;
      if (!BYTE9(v107))
        v73 = 0;
      *(_QWORD *)v103 = v107;
      *(_QWORD *)&v103[8] = v73 | BYTE8(v107);
      *(_OWORD *)&v103[16] = 0u;
      v104 = 0u;
      LOBYTE(v105) = 1;
      v98 = v107;
      LODWORD(v97) = BYTE9(v107);
      sub_23BCF9690(v107, BYTE8(v107), SBYTE9(v107));
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1690);
      sub_23BCF8F1C();
      sub_23BCF906C();
      sub_23BD455D0();
      v75 = *((_QWORD *)&v107 + 1);
      v74 = v107;
      v77 = *((_QWORD *)&v108 + 1);
      v76 = v108;
      v79 = *((_QWORD *)&v109 + 1);
      v78 = v109;
      v80 = v110;
      *(_OWORD *)v103 = v107;
      *(_OWORD *)&v103[16] = v108;
      v104 = v109;
      v105 = v110;
      v106 = 0;
      sub_23BCF96A4(v107, *((unint64_t *)&v107 + 1), v108, *((uint64_t *)&v108 + 1), v109, *((uint64_t *)&v109 + 1), v110, (void (*)(uint64_t, unint64_t))j__swift_retain, (void (*)(uint64_t, uint64_t))sub_23BCF9728, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_23BCF9690);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
      sub_23BCF8E88();
      sub_23BCF90F4();
      sub_23BD455D0();
      sub_23BCF9240(v98, v99, (char)v97);
      sub_23BCF96A4(v74, v75, v76, v77, v78, v79, v80, (void (*)(uint64_t, unint64_t))j__swift_release, (void (*)(uint64_t, uint64_t))sub_23BCF9230, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_23BCF9240);
      v52 = *((_QWORD *)&v107 + 1);
      v51 = v107;
      v54 = *((_QWORD *)&v108 + 1);
      v53 = v108;
      v56 = *((_QWORD *)&v109 + 1);
      v55 = v109;
      v57 = v110;
      v58 = v111;
      sub_23BCEEED8(v101, &qword_256AA1438);
      v81 = sub_23BD451C8();
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(v102, v81);
    }
    else
    {
      *(_QWORD *)&v107 = a1;
      *((_QWORD *)&v107 + 1) = a2;
      LOBYTE(v108) = v12 != 0;
      v46 = v99;
      *((_QWORD *)&v108 + 1) = v99;
      sub_23BCF7028((uint64_t)v103);
      v47 = *(_QWORD *)v103;
      v48 = v103[8];
      v49 = swift_allocObject();
      *(double *)(v49 + 16) = a6;
      *(double *)(v49 + 24) = a7;
      *(_QWORD *)(v49 + 32) = a1;
      *(_QWORD *)(v49 + 40) = a2;
      *(_BYTE *)(v49 + 48) = v12 != 0;
      *(_QWORD *)(v49 + 56) = v46;
      *(_QWORD *)v103 = v47;
      *(_QWORD *)&v103[8] = v48;
      *(_QWORD *)&v103[16] = sub_23BCF9768;
      *(_QWORD *)&v103[24] = v49;
      v104 = 0uLL;
      LOBYTE(v105) = 0;
      sub_23BCF7984();
      v50 = v97;
      j__swift_retain();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1690);
      sub_23BCF8F1C();
      sub_23BCF906C();
      sub_23BD455D0();
      *(_OWORD *)v103 = v107;
      *(_OWORD *)&v103[16] = v108;
      v104 = v109;
      v105 = v110;
      v106 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
      sub_23BCF8E88();
      sub_23BCF90F4();
      sub_23BD455D0();
      j__swift_release();
      swift_release();
      v52 = *((_QWORD *)&v107 + 1);
      v51 = v107;
      v54 = *((_QWORD *)&v108 + 1);
      v53 = v108;
      v56 = *((_QWORD *)&v109 + 1);
      v55 = v109;
      v57 = v110;
      v58 = v111;
      result = sub_23BCEEED8(v36, &qword_256AA1438);
    }
  }
  else
  {
    v43 = v98;
    sub_23BCECF30(v35, v98, &qword_256AA1558);
    sub_23BCECE9C(v43, (uint64_t)v19, &qword_256AA1558);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)&v107 = a1;
      *((_QWORD *)&v107 + 1) = a2;
      LOBYTE(v108) = v12 != 0;
      *((_QWORD *)&v108 + 1) = v99;
      sub_23BCF7028((uint64_t)v103);
      *(_QWORD *)&v103[8] = v103[8];
      *(_OWORD *)&v103[16] = 0u;
      v104 = 0u;
      v105 = 256;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16B0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
      sub_23BCF9118();
      sub_23BCF8F88();
      sub_23BD455D0();
      v101 = v108;
      v102 = v107;
      v99 = v109;
      v44 = v110;
      v45 = HIBYTE(v110);
    }
    else
    {
      v60 = (uint64_t)v19;
      v61 = v92;
      sub_23BCF95A8(v60, v92);
      if (qword_256AA0FD8 != -1)
        swift_once();
      v62 = (void *)qword_256AACDE8;
      sub_23BCF95EC(v61, v91);
      v63 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
      v64 = v62;
      v65 = (void *)sub_23BD452E8();
      v66 = objc_msgSend(v64, sel_objectForKey_, v65);

      if (v66)
      {
        v67 = sub_23BD4551C();
        v68 = v66;
        sub_23BD4566C();
        v69 = v94;
        v70 = v93;
        v71 = v95;
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, *MEMORY[0x24BDF3FD0], v95);
        v72 = sub_23BD45690();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
        *(_QWORD *)v103 = v67;
        *(_OWORD *)&v103[8] = xmmword_23BD46C00;
        v104 = 0uLL;
        *(_QWORD *)&v103[24] = v72;
        LOBYTE(v105) = 0;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16C0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
        sub_23BCF9568(&qword_256AA16B8, &qword_256AA16C0, MEMORY[0x24BDF4700]);
        sub_23BCF8F1C();
        v35 = v102;
        sub_23BD455D0();
        swift_release();

      }
      else
      {
        *(_QWORD *)&v107 = a1;
        *((_QWORD *)&v107 + 1) = a2;
        LOBYTE(v108) = v12 != 0;
        v82 = v99;
        *((_QWORD *)&v108 + 1) = v99;
        sub_23BCF7028((uint64_t)v103);
        v83 = *(_QWORD *)v103;
        v84 = v103[8];
        v85 = swift_allocObject();
        *(_QWORD *)(v85 + 16) = a1;
        *(_QWORD *)(v85 + 24) = a2;
        *(_BYTE *)(v85 + 32) = v12 != 0;
        *(_QWORD *)(v85 + 40) = v82;
        *(double *)(v85 + 48) = a6;
        *(double *)(v85 + 56) = a7;
        *(_QWORD *)v103 = v83;
        *(_QWORD *)&v103[8] = v84;
        *(_QWORD *)&v103[16] = sub_23BCF9674;
        *(_QWORD *)&v103[24] = v85;
        v104 = 0uLL;
        LOBYTE(v105) = 1;
        sub_23BCF7984();
        v86 = v97;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16C0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
        sub_23BCF9568(&qword_256AA16B8, &qword_256AA16C0, MEMORY[0x24BDF4700]);
        sub_23BCF8F1C();
        sub_23BD455D0();
      }
      *(_OWORD *)v103 = v107;
      *(_OWORD *)&v103[16] = v108;
      v104 = v109;
      v105 = v110;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16B0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
      sub_23BCF9118();
      sub_23BCF8F88();
      sub_23BD455D0();
      v101 = v108;
      v102 = v107;
      v99 = v109;
      v44 = v110;
      v45 = HIBYTE(v110);
      sub_23BCF56E0(v61, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    }
    v87 = v35 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1570) + 48);
    if (v45)
      v88 = 256;
    else
      v88 = 0;
    *(_OWORD *)v103 = v102;
    *(_OWORD *)&v103[16] = v101;
    v104 = v99;
    v105 = v88 | v44;
    v106 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
    sub_23BCF8E88();
    sub_23BCF90F4();
    sub_23BD455D0();
    v52 = *((_QWORD *)&v107 + 1);
    v51 = v107;
    v54 = *((_QWORD *)&v108 + 1);
    v53 = v108;
    v56 = *((_QWORD *)&v109 + 1);
    v55 = v109;
    v57 = v110;
    v58 = v111;
    sub_23BCEEED8(v98, &qword_256AA1558);
    sub_23BCEEED8(v36, &qword_256AA1438);
    v89 = sub_23BD451A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v87, v89);
  }
  v90 = v100;
  *v100 = v51;
  v90[1] = v52;
  v90[2] = v53;
  v90[3] = v54;
  v90[4] = v55;
  v90[5] = v56;
  *((_WORD *)v90 + 24) = v57;
  *((_BYTE *)v90 + 50) = v58;
  return result;
}

uint64_t sub_23BCF89F8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  double *v12;
  id v13;
  uint64_t v14;

  v9 = type metadata accessor for ImageAssetAction();
  result = MEMORY[0x24BDAC7A8](v9);
  v12 = (double *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 != 0.0 || a2 != 0.0)
  {
    sub_23BCF7984();
    v13 = a6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
    sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    sub_23BCF7978();

    *v12 = a1;
    v12[1] = a2;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  }
  return result;
}

uint64_t sub_23BCF8B44(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  double *v11;
  id v12;
  uint64_t v14;

  v9 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (double *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BCF7984();
  v12 = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
  sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  sub_23BCF7978();

  *v11 = a1;
  v11[1] = a2;
  swift_storeEnumTagMultiPayload();
  sub_23BD456D8();
  swift_release();
  return sub_23BCF56E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
}

uint64_t sub_23BCF8C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_23BD45900();
  if ((result & 1) != 0)
  {
    sub_23BCF7984();
    v11 = a6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
    sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    sub_23BCF7978();

    sub_23BD458F4();
    *v9 = v12;
    v9[1] = v13;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  }
  return result;
}

uint64_t sub_23BCF8DE4()
{
  return objectdestroy_2Tm();
}

uint64_t sub_23BCF8DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23BCF8C8C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void **)(v2 + 40));
}

unint64_t sub_23BCF8E04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AA1618;
  if (!qword_256AA1618)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1610);
    v2 = sub_23BCF8EAC(&qword_256AA1620, &qword_256AA1628, sub_23BCF8E88, sub_23BCF90F4);
    result = MEMORY[0x242610FF4](MEMORY[0x24BDF3F50], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AA1618);
  }
  return result;
}

uint64_t sub_23BCF8E88()
{
  return sub_23BCF8EAC(&qword_256AA1630, &qword_256AA1638, (uint64_t (*)(void))sub_23BCF8F1C, sub_23BCF906C);
}

uint64_t sub_23BCF8EAC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x242610FF4](MEMORY[0x24BDEF3E0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BCF8F1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1640;
  if (!qword_256AA1640)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1648);
    v2[0] = sub_23BCF8F88();
    v2[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1640);
  }
  return result;
}

uint64_t sub_23BCF8F88()
{
  return sub_23BCF9088(&qword_256AA1650, &qword_256AA1658, (uint64_t (*)(void))sub_23BCF8FA4);
}

unint64_t sub_23BCF8FA4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1660;
  if (!qword_256AA1660)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1668);
    v2[0] = sub_23BCF9028();
    v2[1] = sub_23BCF9568(&qword_256AA1678, &qword_256AA1680, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1660);
  }
  return result;
}

unint64_t sub_23BCF9028()
{
  unint64_t result;

  result = qword_256AA1670;
  if (!qword_256AA1670)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BDF52D0], MEMORY[0x24BDF52F8]);
    atomic_store(result, (unint64_t *)&qword_256AA1670);
  }
  return result;
}

uint64_t sub_23BCF906C()
{
  return sub_23BCF9088(&qword_256AA1688, &qword_256AA1690, sub_23BCF8F88);
}

uint64_t sub_23BCF9088(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    v8[0] = MEMORY[0x24BDF40E8];
    v8[1] = v7;
    result = MEMORY[0x242610FF4](MEMORY[0x24BDEF3E0], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BCF90F4()
{
  return sub_23BCF8EAC(&qword_256AA1698, &qword_256AA16A0, (uint64_t (*)(void))sub_23BCF9118, sub_23BCF8F88);
}

unint64_t sub_23BCF9118()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA16A8;
  if (!qword_256AA16A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA16B0);
    v2[0] = sub_23BCF9568(&qword_256AA16B8, &qword_256AA16C0, MEMORY[0x24BDF4700]);
    v2[1] = sub_23BCF8F1C();
    result = MEMORY[0x242610FF4](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA16A8);
  }
  return result;
}

unint64_t sub_23BCF919C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA16C8;
  if (!qword_256AA16C8)
  {
    type metadata accessor for CGSize();
    result = MEMORY[0x242610FF4](MEMORY[0x24BDBD858], v1);
    atomic_store(result, (unint64_t *)&qword_256AA16C8);
  }
  return result;
}

uint64_t sub_23BCF91E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, char a8)
{
  if ((a8 & 1) != 0)
    return sub_23BCF9250(a1, a2, a3, a4, a5, a6, a7, HIBYTE(a7) & 1);
  else
    return sub_23BCF96A4(a1, a2, a3, a4, a5, a6, a7 & 1, (void (*)(uint64_t, unint64_t))j__swift_release, (void (*)(uint64_t, uint64_t))sub_23BCF9230, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_23BCF9240);
}

uint64_t sub_23BCF9230(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23BCF9240(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return j__swift_release();
  else
    return swift_release();
}

uint64_t sub_23BCF9250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  if ((a8 & 1) != 0)
    return j__swift_release();
  else
    return sub_23BCF9264(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t sub_23BCF9264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    return swift_release();
  j__swift_release();
  sub_23BCF9230(a3);
  return sub_23BCF9230(a5);
}

uint64_t sub_23BCF92C8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  int EnumCaseMultiPayload;
  id v21;
  uint64_t v22;

  v12 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (double *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(a4, (uint64_t)v17, &qword_256AA15F8);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18) == 1)
    return sub_23BCEEED8((uint64_t)v17, &qword_256AA15F8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = sub_23BCEEED8((uint64_t)v17, &qword_256AA1438);
  if (EnumCaseMultiPayload == 2)
  {
    sub_23BCF7984();
    v21 = a8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16D0);
    sub_23BCF9568(&qword_256AA16D8, &qword_256AA16D0, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    sub_23BCF7978();

    *v14 = a1;
    v14[1] = a2;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  }
  return result;
}

uint64_t sub_23BCF94C8()
{
  return objectdestroy_2Tm();
}

uint64_t sub_23BCF94D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23BCF92C8(*(double *)(v2 + 48), *(double *)(v2 + 56), a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void **)(v2 + 40));
}

unint64_t sub_23BCF94EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AA16E0;
  if (!qword_256AA16E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA15F8);
    v2 = sub_23BCF9568(&qword_256AA16E8, &qword_256AA1438, (uint64_t)&protocol conformance descriptor for AssetLoadState<A, B>);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AA16E0);
  }
  return result;
}

uint64_t sub_23BCF9568(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242610FF4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BCF95A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FetchedImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BCF95EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FetchedImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BCF9630()
{
  return objectdestroy_2Tm();
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  sub_23BCF7978();

  return swift_deallocObject();
}

uint64_t sub_23BCF9674()
{
  uint64_t v0;

  return sub_23BCF8B44(*(double *)(v0 + 48), *(double *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_23BCF9690(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return j__swift_retain();
  else
    return swift_retain();
}

uint64_t sub_23BCF96A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(uint64_t, unint64_t), void (*a9)(uint64_t, uint64_t), uint64_t (*a10)(uint64_t, unint64_t, uint64_t))
{
  if ((a7 & 1) != 0)
    return a10(a1, a2, (a2 >> 8) & 1);
  a8(a1, a2 & 1);
  a9(a3, a4);
  return ((uint64_t (*)(uint64_t, uint64_t))a9)(a5, a6);
}

uint64_t sub_23BCF9728(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_23BCF9738()
{
  uint64_t v0;

  sub_23BCF7978();

  return swift_deallocObject();
}

uint64_t sub_23BCF9768()
{
  uint64_t v0;

  return sub_23BCF89F8(*(double *)(v0 + 16), *(double *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t DynamicArtworkLayoutEnvironment.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;

  BYTE8(v3) = 0;
  sub_23BD45990();
  sub_23BD4578C();
  sub_23BD45A08();
  sub_23BD4578C();
  v1 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  sub_23BD452AC();
  sub_23BD45A08();
  sub_23BD4578C();
  *(_QWORD *)&v3 = *(unsigned __int8 *)(v0 + *(int *)(v1 + 28));
  sub_23BD45A08();
  sub_23BD4578C();
  sub_23BD45A08();
  sub_23BD4578C();
  return *(_QWORD *)((char *)&v3 + 1);
}

uint64_t sub_23BCF9920(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 0x7373416567616D69;
}

uint64_t sub_23BCF9954(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BCF9990 + 4 * byte_23BD46D00[a1]))(0xD00000000000001ALL, 0x800000023BD4BB60);
}

uint64_t sub_23BCF9990()
{
  return 0x616D496863746566;
}

unint64_t sub_23BCF99B4()
{
  return 0xD000000000000014;
}

uint64_t sub_23BCF99D0()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_23BCF9A0C()
{
  return 0x6570704177656976;
}

uint64_t sub_23BCF9A2C()
{
  return 0x657A695377656976;
}

uint64_t sub_23BCF9A50(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 12383;
}

uint64_t sub_23BCF9A74(char a1)
{
  return *(_QWORD *)&aImageasserror[8 * a1];
}

uint64_t sub_23BCF9A94(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 0x4164656863746566;
}

uint64_t sub_23BCF9ACC(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 0xD000000000000011;
}

uint64_t sub_23BCF9B08()
{
  char *v0;

  return sub_23BCF9920(*v0);
}

uint64_t sub_23BCF9B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD0108C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCF9B34()
{
  sub_23BCFB044();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9B5C()
{
  sub_23BCFB044();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9B84()
{
  unsigned __int8 *v0;

  return sub_23BCF9954(*v0);
}

uint64_t sub_23BCF9B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD0116C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BCF9BB0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_23BCF9BBC()
{
  sub_23BCFAD9C();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9BE4()
{
  sub_23BCFAD9C();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9C0C()
{
  char *v0;

  return sub_23BCF9A50(*v0);
}

uint64_t sub_23BCF9C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD014B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCF9C38()
{
  sub_23BCFB000();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9C60()
{
  sub_23BCFB000();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9C88()
{
  char *v0;

  return sub_23BCF9A74(*v0);
}

uint64_t sub_23BCF9C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD01574(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCF9CB4()
{
  sub_23BCFAF78();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9CDC()
{
  sub_23BCFAF78();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9D04()
{
  sub_23BCFAF34();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9D2C()
{
  sub_23BCFAF34();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9D54()
{
  char *v0;

  return sub_23BCF9A94(*v0);
}

uint64_t sub_23BCF9D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD016A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCF9D80()
{
  sub_23BCFAEF0();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9DA8()
{
  sub_23BCFAEF0();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9DD0()
{
  sub_23BCFAEAC();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9DF8()
{
  sub_23BCFAEAC();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9E20()
{
  char *v0;

  return sub_23BCF9ACC(*v0);
}

uint64_t sub_23BCF9E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD01790(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BCF9E4C()
{
  sub_23BCFAE68();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9E74()
{
  sub_23BCFAE68();
  return sub_23BD45C18();
}

uint64_t sub_23BCF9EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD0186C(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_23BCF9EC8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23BCF9ED4()
{
  sub_23BCFAE24();
  return sub_23BD45C0C();
}

uint64_t sub_23BCF9EFC()
{
  sub_23BCFAE24();
  return sub_23BD45C18();
}

void DynamicImageAssetAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD v24[9];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F8);
  v24[5] = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v39 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1700);
  v24[7] = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1708);
  v24[6] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v41 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1710);
  v24[4] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v38 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v29);
  v37 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1718);
  v24[3] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v47);
  v34 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)v24 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v31 = (char *)v24 - v12;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1720);
  v24[8] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v30 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1728);
  v24[2] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v26 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1730);
  v24[1] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v46 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v46);
  v28 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v18 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1738);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BCFAD9C();
  v49 = v22;
  sub_23BD45BF4();
  sub_23BCFADE0(v51, (uint64_t)v20);
  v23 = (char *)sub_23BCFA3D0 + 4 * word_23BD46D08[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BCFA3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)(v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8) + 48));
  v5 = *v4;
  v6 = v4[1];
  sub_23BCFC424(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *(_BYTE *)(v3 - 120) = 0;
  sub_23BCFB044();
  v8 = *(_QWORD *)(v3 - 144);
  v7 = *(_QWORD *)(v3 - 136);
  sub_23BD45AC8();
  *(_BYTE *)(v3 - 120) = 0;
  sub_23BCEEF14(&qword_256AA1448, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
  v9 = *(_QWORD *)(v3 - 344);
  v10 = *(_QWORD *)(v3 - 152);
  sub_23BD45AF8();
  if (!v10)
  {
    *(_QWORD *)(v3 - 120) = v5;
    *(_QWORD *)(v3 - 112) = v6;
    *(_BYTE *)(v3 - 65) = 1;
    type metadata accessor for CGSize();
    sub_23BCEEF14(&qword_256AA1428, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    sub_23BD45AF8();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 408) + 8))(v0, v9);
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v8, v7);
}

void sub_23BCFACB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v0;
  v3 = v0[1];
  *(_BYTE *)(v1 - 120) = 7;
  sub_23BCFAE24();
  v4 = *(_QWORD *)(v1 - 232);
  sub_23BD45AC8();
  *(_QWORD *)(v1 - 120) = v2;
  *(_QWORD *)(v1 - 112) = v3;
  type metadata accessor for CGSize();
  sub_23BCEEF14(&qword_256AA1428, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  v5 = *(_QWORD *)(v1 - 208);
  sub_23BD45AF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 376) + 8))(v4, v5);
  JUMPOUT(0x23BCFAC7CLL);
}

uint64_t type metadata accessor for DynamicImageAssetAction()
{
  uint64_t result;

  result = qword_256AA18A0;
  if (!qword_256AA18A0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BCFAD9C()
{
  unint64_t result;

  result = qword_256AA1740;
  if (!qword_256AA1740)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47904, &type metadata for DynamicImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1740);
  }
  return result;
}

uint64_t sub_23BCFADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DynamicImageAssetAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BCFAE24()
{
  unint64_t result;

  result = qword_256AA1748;
  if (!qword_256AA1748)
  {
    result = MEMORY[0x242610FF4](&unk_23BD478B4, &type metadata for DynamicImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1748);
  }
  return result;
}

unint64_t sub_23BCFAE68()
{
  unint64_t result;

  result = qword_256AA1758;
  if (!qword_256AA1758)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47864, &type metadata for DynamicImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1758);
  }
  return result;
}

unint64_t sub_23BCFAEAC()
{
  unint64_t result;

  result = qword_256AA1768;
  if (!qword_256AA1768)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47814, &type metadata for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1768);
  }
  return result;
}

unint64_t sub_23BCFAEF0()
{
  unint64_t result;

  result = qword_256AA1778;
  if (!qword_256AA1778)
  {
    result = MEMORY[0x242610FF4](&unk_23BD477C4, &type metadata for DynamicImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1778);
  }
  return result;
}

unint64_t sub_23BCFAF34()
{
  unint64_t result;

  result = qword_256AA1788;
  if (!qword_256AA1788)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47774, &type metadata for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1788);
  }
  return result;
}

unint64_t sub_23BCFAF78()
{
  unint64_t result;

  result = qword_256AA1798;
  if (!qword_256AA1798)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47724, &type metadata for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1798);
  }
  return result;
}

unint64_t sub_23BCFAFBC()
{
  unint64_t result;

  result = qword_256AA17A0;
  if (!qword_256AA17A0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageAssetLoadError, &type metadata for ImageAssetLoadError);
    atomic_store(result, (unint64_t *)&qword_256AA17A0);
  }
  return result;
}

unint64_t sub_23BCFB000()
{
  unint64_t result;

  result = qword_256AA17B0;
  if (!qword_256AA17B0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD476D4, &type metadata for DynamicImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA17B0);
  }
  return result;
}

unint64_t sub_23BCFB044()
{
  unint64_t result;

  result = qword_256AA17C0;
  if (!qword_256AA17C0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47684, &type metadata for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA17C0);
  }
  return result;
}

uint64_t DynamicImageAssetAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD v42[15];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;

  v50 = a2;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17C8);
  v42[11] = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v56 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17D0);
  v42[13] = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v62 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17D8);
  v42[12] = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v58 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17E0);
  v42[10] = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v61 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17E8);
  v42[9] = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v60 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17F0);
  v42[6] = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v57 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17F8);
  v42[8] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v55 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1800);
  v42[7] = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v54 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1808);
  v63 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v64);
  v42[5] = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v42[14] = (char *)v42 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v52 = (char *)v42 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v51 = (char *)v42 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v42 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v42 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v42 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v42 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v33 = a1[3];
  v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  sub_23BCFAD9C();
  v34 = v66;
  sub_23BD45BE8();
  if (!v34)
  {
    v42[2] = v31;
    v42[3] = v28;
    v42[1] = v22;
    v42[4] = v25;
    v66 = 0;
    v35 = v59;
    v36 = sub_23BD45AB0();
    if (*(_QWORD *)(v36 + 16) == 1)
      __asm { BR              X10 }
    v37 = sub_23BD459C0();
    swift_allocError();
    v38 = v12;
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v40 = v64;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v40, *MEMORY[0x24BEE26D0], v37);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v35);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
}

uint64_t sub_23BCFC424(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_23BCFC468()
{
  unint64_t result;

  result = qword_256AA1820;
  if (!qword_256AA1820)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageAssetLoadError, &type metadata for ImageAssetLoadError);
    atomic_store(result, (unint64_t *)&qword_256AA1820);
  }
  return result;
}

uint64_t sub_23BCFC4AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicImageAssetAction.init(from:)(a1, a2);
}

void sub_23BCFC4C0(_QWORD *a1)
{
  DynamicImageAssetAction.encode(to:)(a1);
}

void DynamicImageAssetAction.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v24[5];
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v25 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v25);
  v26 = (char *)v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23BD4515C();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v24[4] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v24[3] = (char *)v24 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v24[2] = (char *)v24 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v24[1] = (char *)v24 - v12;
  v13 = sub_23BD451F8();
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v27 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v31 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v31);
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  v21 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v21);
  sub_23BCFADE0(v35, (uint64_t)v24 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = (char *)sub_23BCFC7E4 + 4 * byte_23BD46D28[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BCFC7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
  sub_23BCFC424(v0, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BD45B94();
  sub_23BCECE9C(v1, v2, &qword_256AA0FE0);
  v5 = *(_QWORD *)(v3 - 136);
  v4 = *(_QWORD *)(v3 - 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v6 = *(_QWORD *)(v3 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v2, v4);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  }
  v7 = *(_QWORD *)(v3 - 120);
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  v8 = v1 + *(int *)(v7 + 28);
  v9 = *(_QWORD *)(v3 - 200);
  sub_23BCECE9C(v8, v9, &qword_256AA0FE8);
  v11 = *(_QWORD *)(v3 - 112);
  v10 = *(_QWORD *)(v3 - 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v12 = *(_QWORD *)(v3 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v12, v9, v10);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v10);
  }
  sub_23BD45BAC();
  sub_23BD45BAC();
  return sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
}

uint64_t DynamicImageAssetAction.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BCFD1AC()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BCFD1EC()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BCFD228()
{
  sub_23BD45780();
  return swift_bridgeObjectRelease();
}

void sub_23BCFD258(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23BCFD29C()
{
  sub_23BD45780();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BCFD2FC()
{
  sub_23BD45BAC();
  return sub_23BD45BAC();
}

void _s12FitnessAsset012DynamicImageB6ActionO2eeoiySbAC_ACtFZ_0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;

  v40 = a1;
  v41 = a2;
  v31 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v31);
  v38 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v30 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v30 - v8;
  v9 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v9);
  v34 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v33 = (char *)&v30 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v32 = (char *)&v30 - v14;
  v15 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v39 = (char *)&v30 - v19;
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  MEMORY[0x24BDAC7A8](v23);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19B0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v30 + *(int *)(v26 + 48) - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCFADE0(v40, (uint64_t)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = (uint64_t)v41;
  v41 = v27;
  sub_23BCFADE0(v28, (uint64_t)v27);
  v29 = (char *)sub_23BCFD624 + 4 * word_23BD46D34[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_23BCFD624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  _BOOL8 v12;

  v3 = v0;
  sub_23BCFADE0(v0, v1);
  v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8) + 48);
  v6 = *(double *)(v1 + v4);
  v5 = *(double *)(v1 + v4 + 8);
  v7 = *(_QWORD *)(v2 - 120);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    sub_23BD018F0(v3);
    return 0;
  }
  v9 = *(double *)(v7 + v4);
  v8 = *(double *)(v7 + v4 + 8);
  v10 = *(_QWORD *)(v2 - 192);
  sub_23BCFC424(v7, v10, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v11 = static ImageAsset.== infix(_:_:)(v1, v10);
  sub_23BCF56E0(v10, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  if ((v11 & 1) == 0)
  {
    sub_23BCF56E0(v3, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
    return 0;
  }
  v12 = v5 == v8 && v6 == v9;
  sub_23BCF56E0(v3, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return v12;
}

uint64_t sub_23BCFDBC4()
{
  return sub_23BCEEF14(&qword_256AA1828, (uint64_t (*)(uint64_t))type metadata accessor for DynamicImageAssetAction, (uint64_t)&protocol conformance descriptor for DynamicImageAssetAction);
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicImageAssetAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  int *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = sub_23BD451F8();
        v8 = *(_QWORD *)(v7 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
        {
          v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        }
        v28 = (int *)type metadata accessor for ImageAsset();
        v29 = v28[5];
        v30 = (uint64_t *)((char *)a1 + v29);
        v31 = (uint64_t *)((char *)a2 + v29);
        v32 = v31[1];
        *v30 = *v31;
        v30[1] = v32;
        *((_BYTE *)a1 + v28[6]) = *((_BYTE *)a2 + v28[6]);
        v33 = v28[7];
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = sub_23BD4515C();
        v37 = *(_QWORD *)(v36 - 8);
        v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        if (v38(v35, 1, v36))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
        *(_OWORD *)((char *)a1 + *(int *)(v76 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v76 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v12 = sub_23BD451F8();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v40 = (int *)type metadata accessor for ImageAsset();
        v41 = v40[5];
        v42 = (uint64_t *)((char *)a1 + v41);
        v43 = (uint64_t *)((char *)a2 + v41);
        v44 = v43[1];
        *v42 = *v43;
        v42[1] = v44;
        *((_BYTE *)a1 + v40[6]) = *((_BYTE *)a2 + v40[6]);
        v45 = v40[7];
        v46 = (char *)a1 + v45;
        v47 = (char *)a2 + v45;
        v48 = sub_23BD4515C();
        v49 = *(_QWORD *)(v48 - 8);
        v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        swift_bridgeObjectRetain();
        if (v50(v47, 1, v48))
        {
          v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
        *(_OWORD *)((char *)a1 + *(int *)(v77 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v77 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v15 = sub_23BD451F8();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v52 = (int *)type metadata accessor for ImageAsset();
        v53 = v52[5];
        v54 = (uint64_t *)((char *)a1 + v53);
        v55 = (uint64_t *)((char *)a2 + v53);
        v56 = v55[1];
        *v54 = *v55;
        v54[1] = v56;
        *((_BYTE *)a1 + v52[6]) = *((_BYTE *)a2 + v52[6]);
        v57 = v52[7];
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        v60 = sub_23BD4515C();
        v61 = *(_QWORD *)(v60 - 8);
        v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
        swift_bridgeObjectRetain();
        if (v62(v59, 1, v60))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v59, v60);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
        *((_BYTE *)a1 + *(int *)(v78 + 48)) = *((_BYTE *)a2 + *(int *)(v78 + 48));
        *(_OWORD *)((char *)a1 + *(int *)(v78 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v78 + 64));
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
      case 6u:
        *(_WORD *)a1 = *(_WORD *)a2;
        v21 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
        v22 = v21[6];
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = sub_23BD452AC();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v26(v23, v24, v25);
        *((_BYTE *)a1 + v21[7]) = *((_BYTE *)a2 + v21[7]);
        v26((char *)a1 + v21[8], (char *)a2 + v21[8], v25);
        v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v18 = sub_23BD451F8();
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(a1, a2, v18);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
        }
        v64 = (int *)type metadata accessor for ImageAsset();
        v65 = v64[5];
        v66 = (uint64_t *)((char *)a1 + v65);
        v67 = (uint64_t *)((char *)a2 + v65);
        v68 = v67[1];
        *v66 = *v67;
        v66[1] = v68;
        *((_BYTE *)a1 + v64[6]) = *((_BYTE *)a2 + v64[6]);
        v69 = v64[7];
        v70 = (char *)a1 + v69;
        v71 = (char *)a2 + v69;
        v72 = sub_23BD4515C();
        v73 = *(_QWORD *)(v72 - 8);
        v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
        swift_bridgeObjectRetain();
        if (v74(v71, 1, v72))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        v79 = type metadata accessor for FetchedImageAsset();
        *(_OWORD *)((char *)a1 + *(int *)(v79 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v79 + 20));
        v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
        *(_OWORD *)((char *)a1 + *(int *)(v80 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v80 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for DynamicImageAssetAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      v3 = sub_23BD451F8();
      v4 = *(_QWORD *)(v3 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
      v5 = type metadata accessor for ImageAsset();
      swift_bridgeObjectRelease();
      v6 = a1 + *(int *)(v5 + 28);
      v7 = sub_23BD4515C();
      v8 = *(_QWORD *)(v7 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
      if (!(_DWORD)result)
      {
        v14 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
        v12 = v6;
        v13 = v7;
        goto LABEL_8;
      }
      break;
    case 3:
    case 5:
    case 6:
      v9 = type metadata accessor for DynamicArtworkLayoutEnvironment();
      v10 = a1 + *(int *)(v9 + 24);
      v11 = sub_23BD452AC();
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v15(v10, v11);
      v12 = a1 + *(int *)(v9 + 32);
      v13 = v11;
      v14 = (uint64_t (*)(uint64_t, uint64_t))v15;
LABEL_8:
      result = v14(v12, v13);
      break;
    default:
      return result;
  }
  return result;
}

_WORD *initializeWithCopy for DynamicImageAssetAction(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  int *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  int *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = sub_23BD451F8();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v25 = (int *)type metadata accessor for ImageAsset();
      v26 = v25[5];
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (_QWORD *)((char *)a2 + v26);
      v29 = v28[1];
      *v27 = *v28;
      v27[1] = v29;
      *((_BYTE *)a1 + v25[6]) = *((_BYTE *)a2 + v25[6]);
      v30 = v25[7];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = sub_23BD4515C();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)((char *)a1 + *(int *)(v73 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v73 + 48));
      goto LABEL_32;
    case 1u:
      v9 = sub_23BD451F8();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v37 = (int *)type metadata accessor for ImageAsset();
      v38 = v37[5];
      v39 = (_QWORD *)((char *)a1 + v38);
      v40 = (_QWORD *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      *((_BYTE *)a1 + v37[6]) = *((_BYTE *)a2 + v37[6]);
      v42 = v37[7];
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      v45 = sub_23BD4515C();
      v46 = *(_QWORD *)(v45 - 8);
      v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
      swift_bridgeObjectRetain();
      if (v47(v44, 1, v45))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
      *(_OWORD *)((char *)a1 + *(int *)(v74 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v74 + 48));
      goto LABEL_32;
    case 2u:
      v12 = sub_23BD451F8();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v49 = (int *)type metadata accessor for ImageAsset();
      v50 = v49[5];
      v51 = (_QWORD *)((char *)a1 + v50);
      v52 = (_QWORD *)((char *)a2 + v50);
      v53 = v52[1];
      *v51 = *v52;
      v51[1] = v53;
      *((_BYTE *)a1 + v49[6]) = *((_BYTE *)a2 + v49[6]);
      v54 = v49[7];
      v55 = (char *)a1 + v54;
      v56 = (char *)a2 + v54;
      v57 = sub_23BD4515C();
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
      swift_bridgeObjectRetain();
      if (v59(v56, 1, v57))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      }
      v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
      *((_BYTE *)a1 + *(int *)(v75 + 48)) = *((_BYTE *)a2 + *(int *)(v75 + 48));
      *(_OWORD *)((char *)a1 + *(int *)(v75 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v75 + 64));
      goto LABEL_32;
    case 3u:
    case 5u:
    case 6u:
      *a1 = *a2;
      v18 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
      v19 = v18[6];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = sub_23BD452AC();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
      v23((char *)a1 + v18[8], (char *)a2 + v18[8], v22);
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
      *(_OWORD *)((char *)a1 + *(int *)(v24 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 48));
      goto LABEL_32;
    case 4u:
      v15 = sub_23BD451F8();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v16 + 16))(a1, a2, v15);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v61 = (int *)type metadata accessor for ImageAsset();
      v62 = v61[5];
      v63 = (_QWORD *)((char *)a1 + v62);
      v64 = (_QWORD *)((char *)a2 + v62);
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      *((_BYTE *)a1 + v61[6]) = *((_BYTE *)a2 + v61[6]);
      v66 = v61[7];
      v67 = (char *)a1 + v66;
      v68 = (char *)a2 + v66;
      v69 = sub_23BD4515C();
      v70 = *(_QWORD *)(v69 - 8);
      v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      if (v71(v68, 1, v69))
      {
        v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      }
      v76 = type metadata accessor for FetchedImageAsset();
      *(_OWORD *)((char *)a1 + *(int *)(v76 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v76 + 20));
      v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
      *(_OWORD *)((char *)a1 + *(int *)(v77 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v77 + 48));
LABEL_32:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithCopy for DynamicImageAssetAction(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(_BYTE *, uint64_t, uint64_t);
  uint64_t v35;
  int *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(_BYTE *, uint64_t, uint64_t);
  uint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(_BYTE *, uint64_t, uint64_t);
  uint64_t v57;
  int *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_BYTE *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = sub_23BD451F8();
        v7 = *(_QWORD *)(v6 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        v25 = (int *)type metadata accessor for ImageAsset();
        v26 = v25[5];
        v27 = &a1[v26];
        v28 = &a2[v26];
        *v27 = *v28;
        v27[1] = v28[1];
        a1[v25[6]] = a2[v25[6]];
        v29 = v25[7];
        v30 = &a1[v29];
        v31 = &a2[v29];
        v32 = sub_23BD4515C();
        v33 = *(_QWORD *)(v32 - 8);
        v34 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48);
        swift_bridgeObjectRetain();
        if (v34(v31, 1, v32))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 16))(v30, v31, v32);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
        *(_OWORD *)&a1[*(int *)(v69 + 48)] = *(_OWORD *)&a2[*(int *)(v69 + 48)];
        goto LABEL_33;
      case 1u:
        v9 = sub_23BD451F8();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        v36 = (int *)type metadata accessor for ImageAsset();
        v37 = v36[5];
        v38 = &a1[v37];
        v39 = &a2[v37];
        *v38 = *v39;
        v38[1] = v39[1];
        a1[v36[6]] = a2[v36[6]];
        v40 = v36[7];
        v41 = &a1[v40];
        v42 = &a2[v40];
        v43 = sub_23BD4515C();
        v44 = *(_QWORD *)(v43 - 8);
        v45 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48);
        swift_bridgeObjectRetain();
        if (v45(v42, 1, v43))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v41, v42, v43);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
        *(_OWORD *)&a1[*(int *)(v70 + 48)] = *(_OWORD *)&a2[*(int *)(v70 + 48)];
        goto LABEL_33;
      case 2u:
        v12 = sub_23BD451F8();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v47 = (int *)type metadata accessor for ImageAsset();
        v48 = v47[5];
        v49 = &a1[v48];
        v50 = &a2[v48];
        *v49 = *v50;
        v49[1] = v50[1];
        a1[v47[6]] = a2[v47[6]];
        v51 = v47[7];
        v52 = &a1[v51];
        v53 = &a2[v51];
        v54 = sub_23BD4515C();
        v55 = *(_QWORD *)(v54 - 8);
        v56 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48);
        swift_bridgeObjectRetain();
        if (v56(v53, 1, v54))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 16))(v52, v53, v54);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
        a1[*(int *)(v71 + 48)] = a2[*(int *)(v71 + 48)];
        *(_OWORD *)&a1[*(int *)(v71 + 64)] = *(_OWORD *)&a2[*(int *)(v71 + 64)];
        goto LABEL_33;
      case 3u:
      case 5u:
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        v18 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
        v19 = v18[6];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = sub_23BD452AC();
        v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v23(v20, v21, v22);
        a1[v18[7]] = a2[v18[7]];
        v23(&a1[v18[8]], &a2[v18[8]], v22);
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
        *(_OWORD *)&a1[*(int *)(v24 + 48)] = *(_OWORD *)&a2[*(int *)(v24 + 48)];
        goto LABEL_33;
      case 4u:
        v15 = sub_23BD451F8();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v58 = (int *)type metadata accessor for ImageAsset();
        v59 = v58[5];
        v60 = &a1[v59];
        v61 = &a2[v59];
        *v60 = *v61;
        v60[1] = v61[1];
        a1[v58[6]] = a2[v58[6]];
        v62 = v58[7];
        v63 = &a1[v62];
        v64 = &a2[v62];
        v65 = sub_23BD4515C();
        v66 = *(_QWORD *)(v65 - 8);
        v67 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
        swift_bridgeObjectRetain();
        if (v67(v64, 1, v65))
        {
          v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 16))(v63, v64, v65);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
        }
        v72 = type metadata accessor for FetchedImageAsset();
        *(_OWORD *)&a1[*(int *)(v72 + 20)] = *(_OWORD *)&a2[*(int *)(v72 + 20)];
        v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
        *(_OWORD *)&a1[*(int *)(v73 + 48)] = *(_OWORD *)&a2[*(int *)(v73 + 48)];
LABEL_33:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_WORD *initializeWithTake for DynamicImageAssetAction(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = sub_23BD451F8();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v25 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)((char *)a1 + v25[5]) = *(_OWORD *)((char *)a2 + v25[5]);
      *((_BYTE *)a1 + v25[6]) = *((_BYTE *)a2 + v25[6]);
      v26 = v25[7];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = sub_23BD4515C();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)((char *)a1 + *(int *)(v53 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v53 + 48));
      goto LABEL_32;
    case 1u:
      v9 = sub_23BD451F8();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v10 + 32))(a1, a2, v9);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v32 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)((char *)a1 + v32[5]) = *(_OWORD *)((char *)a2 + v32[5]);
      *((_BYTE *)a1 + v32[6]) = *((_BYTE *)a2 + v32[6]);
      v33 = v32[7];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = sub_23BD4515C();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
      *(_OWORD *)((char *)a1 + *(int *)(v54 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v54 + 48));
      goto LABEL_32;
    case 2u:
      v12 = sub_23BD451F8();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v13 + 32))(a1, a2, v12);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v39 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)((char *)a1 + v39[5]) = *(_OWORD *)((char *)a2 + v39[5]);
      *((_BYTE *)a1 + v39[6]) = *((_BYTE *)a2 + v39[6]);
      v40 = v39[7];
      v41 = (char *)a1 + v40;
      v42 = (char *)a2 + v40;
      v43 = sub_23BD4515C();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
      *((_BYTE *)a1 + *(int *)(v55 + 48)) = *((_BYTE *)a2 + *(int *)(v55 + 48));
      *(_OWORD *)((char *)a1 + *(int *)(v55 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v55 + 64));
      goto LABEL_32;
    case 3u:
    case 5u:
    case 6u:
      *a1 = *a2;
      v18 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
      v19 = v18[6];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = sub_23BD452AC();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
      v23((char *)a1 + v18[8], (char *)a2 + v18[8], v22);
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
      *(_OWORD *)((char *)a1 + *(int *)(v24 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 48));
      goto LABEL_32;
    case 4u:
      v15 = sub_23BD451F8();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v16 + 32))(a1, a2, v15);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v46 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)((char *)a1 + v46[5]) = *(_OWORD *)((char *)a2 + v46[5]);
      *((_BYTE *)a1 + v46[6]) = *((_BYTE *)a2 + v46[6]);
      v47 = v46[7];
      v48 = (char *)a1 + v47;
      v49 = (char *)a2 + v47;
      v50 = sub_23BD4515C();
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v56 = type metadata accessor for FetchedImageAsset();
      *(_OWORD *)((char *)a1 + *(int *)(v56 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v56 + 20));
      v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
      *(_OWORD *)((char *)a1 + *(int *)(v57 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v57 + 48));
LABEL_32:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_WORD *assignWithTake for DynamicImageAssetAction(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = sub_23BD451F8();
        v7 = *(_QWORD *)(v6 - 8);
        if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(_WORD *, _WORD *, uint64_t))(v7 + 32))(a1, a2, v6);
          (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
        }
        v25 = (int *)type metadata accessor for ImageAsset();
        *(_OWORD *)((char *)a1 + v25[5]) = *(_OWORD *)((char *)a2 + v25[5]);
        *((_BYTE *)a1 + v25[6]) = *((_BYTE *)a2 + v25[6]);
        v26 = v25[7];
        v27 = (char *)a1 + v26;
        v28 = (char *)a2 + v26;
        v29 = sub_23BD4515C();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
        v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
        *(_OWORD *)((char *)a1 + *(int *)(v53 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v53 + 48));
        goto LABEL_33;
      case 1u:
        v9 = sub_23BD451F8();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
        {
          v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_WORD *, _WORD *, uint64_t))(v10 + 32))(a1, a2, v9);
          (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
        }
        v32 = (int *)type metadata accessor for ImageAsset();
        *(_OWORD *)((char *)a1 + v32[5]) = *(_OWORD *)((char *)a2 + v32[5]);
        *((_BYTE *)a1 + v32[6]) = *((_BYTE *)a2 + v32[6]);
        v33 = v32[7];
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = sub_23BD4515C();
        v37 = *(_QWORD *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
        *(_OWORD *)((char *)a1 + *(int *)(v54 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v54 + 48));
        goto LABEL_33;
      case 2u:
        v12 = sub_23BD451F8();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(_WORD *, _WORD *, uint64_t))(v13 + 32))(a1, a2, v12);
          (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        v39 = (int *)type metadata accessor for ImageAsset();
        *(_OWORD *)((char *)a1 + v39[5]) = *(_OWORD *)((char *)a2 + v39[5]);
        *((_BYTE *)a1 + v39[6]) = *((_BYTE *)a2 + v39[6]);
        v40 = v39[7];
        v41 = (char *)a1 + v40;
        v42 = (char *)a2 + v40;
        v43 = sub_23BD4515C();
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
        *((_BYTE *)a1 + *(int *)(v55 + 48)) = *((_BYTE *)a2 + *(int *)(v55 + 48));
        *(_OWORD *)((char *)a1 + *(int *)(v55 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v55 + 64));
        goto LABEL_33;
      case 3u:
      case 5u:
      case 6u:
        *a1 = *a2;
        v18 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
        v19 = v18[6];
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = sub_23BD452AC();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
        v23(v20, v21, v22);
        *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
        v23((char *)a1 + v18[8], (char *)a2 + v18[8], v22);
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
        *(_OWORD *)((char *)a1 + *(int *)(v24 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 48));
        goto LABEL_33;
      case 4u:
        v15 = sub_23BD451F8();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(_WORD *, _WORD *, uint64_t))(v16 + 32))(a1, a2, v15);
          (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        v46 = (int *)type metadata accessor for ImageAsset();
        *(_OWORD *)((char *)a1 + v46[5]) = *(_OWORD *)((char *)a2 + v46[5]);
        *((_BYTE *)a1 + v46[6]) = *((_BYTE *)a2 + v46[6]);
        v47 = v46[7];
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        v50 = sub_23BD4515C();
        v51 = *(_QWORD *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        v56 = type metadata accessor for FetchedImageAsset();
        *(_OWORD *)((char *)a1 + *(int *)(v56 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v56 + 20));
        v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
        *(_OWORD *)((char *)a1 + *(int *)(v57 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v57 + 48));
LABEL_33:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23BD003A0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23BD003B0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  void *v18;

  result = type metadata accessor for ImageAsset();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v11 = &v10;
    swift_getTupleTypeLayout2();
    v12 = &v9;
    swift_getTupleTypeLayout3();
    v13 = &v8;
    result = type metadata accessor for DynamicArtworkLayoutEnvironment();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v14 = &v7;
      result = type metadata accessor for FetchedImageAsset();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v15 = &v6;
        swift_getTupleTypeLayout2();
        v16 = &v5;
        swift_getTupleTypeLayout2();
        v17 = &v4;
        v18 = &unk_23BD46E78;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23BD005E8 + 4 * byte_23BD46D73[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23BD0061C + 4 * byte_23BD46D6E[v4]))();
}

uint64_t sub_23BD0061C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD00624(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD0062CLL);
  return result;
}

uint64_t sub_23BD00638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD00640);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23BD00644(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD0064C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.CodingKeys()
{
  return &type metadata for DynamicImageAssetAction.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.FetchImageAssetCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.FetchImageAssetCodingKeys;
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD006DC + 4 * byte_23BD46D7D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD00710 + 4 * byte_23BD46D78[v4]))();
}

uint64_t sub_23BD00710(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD00718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD00720);
  return result;
}

uint64_t sub_23BD0072C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD00734);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD00738(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD00740(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.LoadedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys;
}

uint64_t _s12FitnessAsset23DynamicImageAssetActionO36CachedImageAssetLoadFailedCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD007D8 + 4 * byte_23BD46D87[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD0080C + 4 * byte_23BD46D82[v4]))();
}

uint64_t sub_23BD0080C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD00814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD0081CLL);
  return result;
}

uint64_t sub_23BD00828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD00830);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD00834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD0083C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.ViewAppearedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.ViewAppearedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetAction.ViewSizeChangedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD00898 + 4 * byte_23BD46D8C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD008B8 + 4 * byte_23BD46D91[v4]))();
}

_BYTE *sub_23BD00898(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD008B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD008C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD008C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD008D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD008D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetAction.ViewSizeChangedCodingKeys()
{
  return &type metadata for DynamicImageAssetAction.ViewSizeChangedCodingKeys;
}

unint64_t sub_23BD008F8()
{
  unint64_t result;

  result = qword_256AA18D8;
  if (!qword_256AA18D8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4709C, &type metadata for DynamicImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA18D8);
  }
  return result;
}

unint64_t sub_23BD00940()
{
  unint64_t result;

  result = qword_256AA18E0;
  if (!qword_256AA18E0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47154, &type metadata for DynamicImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA18E0);
  }
  return result;
}

unint64_t sub_23BD00988()
{
  unint64_t result;

  result = qword_256AA18E8;
  if (!qword_256AA18E8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4720C, &type metadata for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA18E8);
  }
  return result;
}

unint64_t sub_23BD009D0()
{
  unint64_t result;

  result = qword_256AA18F0;
  if (!qword_256AA18F0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD472C4, &type metadata for DynamicImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA18F0);
  }
  return result;
}

unint64_t sub_23BD00A18()
{
  unint64_t result;

  result = qword_256AA18F8;
  if (!qword_256AA18F8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4737C, &type metadata for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA18F8);
  }
  return result;
}

unint64_t sub_23BD00A60()
{
  unint64_t result;

  result = qword_256AA1900;
  if (!qword_256AA1900)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47434, &type metadata for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1900);
  }
  return result;
}

unint64_t sub_23BD00AA8()
{
  unint64_t result;

  result = qword_256AA1908;
  if (!qword_256AA1908)
  {
    result = MEMORY[0x242610FF4](&unk_23BD474EC, &type metadata for DynamicImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1908);
  }
  return result;
}

unint64_t sub_23BD00AF0()
{
  unint64_t result;

  result = qword_256AA1910;
  if (!qword_256AA1910)
  {
    result = MEMORY[0x242610FF4](&unk_23BD475A4, &type metadata for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1910);
  }
  return result;
}

unint64_t sub_23BD00B38()
{
  unint64_t result;

  result = qword_256AA1918;
  if (!qword_256AA1918)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4765C, &type metadata for DynamicImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1918);
  }
  return result;
}

unint64_t sub_23BD00B80()
{
  unint64_t result;

  result = qword_256AA1920;
  if (!qword_256AA1920)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47514, &type metadata for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1920);
  }
  return result;
}

unint64_t sub_23BD00BC8()
{
  unint64_t result;

  result = qword_256AA1928;
  if (!qword_256AA1928)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4753C, &type metadata for DynamicImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1928);
  }
  return result;
}

unint64_t sub_23BD00C10()
{
  unint64_t result;

  result = qword_256AA1930;
  if (!qword_256AA1930)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4745C, &type metadata for DynamicImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1930);
  }
  return result;
}

unint64_t sub_23BD00C58()
{
  unint64_t result;

  result = qword_256AA1938;
  if (!qword_256AA1938)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47484, &type metadata for DynamicImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1938);
  }
  return result;
}

unint64_t sub_23BD00CA0()
{
  unint64_t result;

  result = qword_256AA1940;
  if (!qword_256AA1940)
  {
    result = MEMORY[0x242610FF4](&unk_23BD473A4, &type metadata for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1940);
  }
  return result;
}

unint64_t sub_23BD00CE8()
{
  unint64_t result;

  result = qword_256AA1948;
  if (!qword_256AA1948)
  {
    result = MEMORY[0x242610FF4](&unk_23BD473CC, &type metadata for DynamicImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1948);
  }
  return result;
}

unint64_t sub_23BD00D30()
{
  unint64_t result;

  result = qword_256AA1950;
  if (!qword_256AA1950)
  {
    result = MEMORY[0x242610FF4](&unk_23BD472EC, &type metadata for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1950);
  }
  return result;
}

unint64_t sub_23BD00D78()
{
  unint64_t result;

  result = qword_256AA1958;
  if (!qword_256AA1958)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47314, &type metadata for DynamicImageAssetAction.LayoutEnvironmentChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1958);
  }
  return result;
}

unint64_t sub_23BD00DC0()
{
  unint64_t result;

  result = qword_256AA1960;
  if (!qword_256AA1960)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47234, &type metadata for DynamicImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1960);
  }
  return result;
}

unint64_t sub_23BD00E08()
{
  unint64_t result;

  result = qword_256AA1968;
  if (!qword_256AA1968)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4725C, &type metadata for DynamicImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1968);
  }
  return result;
}

unint64_t sub_23BD00E50()
{
  unint64_t result;

  result = qword_256AA1970;
  if (!qword_256AA1970)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4717C, &type metadata for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1970);
  }
  return result;
}

unint64_t sub_23BD00E98()
{
  unint64_t result;

  result = qword_256AA1978;
  if (!qword_256AA1978)
  {
    result = MEMORY[0x242610FF4](&unk_23BD471A4, &type metadata for DynamicImageAssetAction.UpdatePreferredArtworkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1978);
  }
  return result;
}

unint64_t sub_23BD00EE0()
{
  unint64_t result;

  result = qword_256AA1980;
  if (!qword_256AA1980)
  {
    result = MEMORY[0x242610FF4](&unk_23BD470C4, &type metadata for DynamicImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1980);
  }
  return result;
}

unint64_t sub_23BD00F28()
{
  unint64_t result;

  result = qword_256AA1988;
  if (!qword_256AA1988)
  {
    result = MEMORY[0x242610FF4](&unk_23BD470EC, &type metadata for DynamicImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1988);
  }
  return result;
}

unint64_t sub_23BD00F70()
{
  unint64_t result;

  result = qword_256AA1990;
  if (!qword_256AA1990)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4700C, &type metadata for DynamicImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1990);
  }
  return result;
}

unint64_t sub_23BD00FB8()
{
  unint64_t result;

  result = qword_256AA1998;
  if (!qword_256AA1998)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47034, &type metadata for DynamicImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1998);
  }
  return result;
}

unint64_t sub_23BD01000()
{
  unint64_t result;

  result = qword_256AA19A0;
  if (!qword_256AA19A0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD475CC, &type metadata for DynamicImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA19A0);
  }
  return result;
}

unint64_t sub_23BD01048()
{
  unint64_t result;

  result = qword_256AA19A8;
  if (!qword_256AA19A8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD475F4, &type metadata for DynamicImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA19A8);
  }
  return result;
}

uint64_t sub_23BD0108C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7373416567616D69 && a2 == 0xEA00000000007465;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD0116C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000023BD4BB60 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616D496863746566 && a2 == 0xEF74657373416567 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023BD4BB80 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BD4BBA0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BD4BBC0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x657A695377656976 && a2 == 0xEF6465676E616843)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v5 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_23BD014B4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD01574(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7373416567616D69 && a2 == 0xEA00000000007465;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD016A8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4164656863746566 && a2 == 0xEC00000074657373;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD01790(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BD4BBE0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD0186C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD018E0()
{
  return 1702521203;
}

uint64_t sub_23BD018F0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD01950(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD01988 + 4 * byte_23BD47990[a1]))(0xD000000000000015, 0x800000023BD4BC00);
}

uint64_t sub_23BD01988()
{
  return 0x6570704177656976;
}

uint64_t sub_23BD019A8()
{
  return 0x6176416863746566;
}

uint64_t sub_23BD019C8()
{
  return 0x6546726174617661;
}

uint64_t sub_23BD019F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD03928(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD01A18()
{
  sub_23BD02194();
  return sub_23BD45C0C();
}

uint64_t sub_23BD01A40()
{
  sub_23BD02194();
  return sub_23BD45C18();
}

uint64_t sub_23BD01A68()
{
  sub_23BD02108();
  return sub_23BD45C0C();
}

uint64_t sub_23BD01A90()
{
  sub_23BD02108();
  return sub_23BD45C18();
}

uint64_t sub_23BD01AB8()
{
  unsigned __int8 *v0;

  return sub_23BD01950(*v0);
}

uint64_t sub_23BD01AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD039A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD01AE4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23BD01AF0()
{
  sub_23BD0203C();
  return sub_23BD45C0C();
}

uint64_t sub_23BD01B18()
{
  sub_23BD0203C();
  return sub_23BD45C18();
}

uint64_t sub_23BD01B40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23BD01B6C()
{
  sub_23BD020C4();
  return sub_23BD45C0C();
}

uint64_t sub_23BD01B94()
{
  sub_23BD020C4();
  return sub_23BD45C18();
}

uint64_t sub_23BD01BBC()
{
  sub_23BD022E0();
  return sub_23BD45C0C();
}

uint64_t sub_23BD01BE4()
{
  sub_23BD022E0();
  return sub_23BD45C18();
}

void MonogramAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[16];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19B8);
  v17[11] = *(_QWORD *)(v2 - 8);
  v17[12] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v17[10] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19C0);
  v17[8] = *(_QWORD *)(v4 - 8);
  v17[9] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v17[7] = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19C8);
  v17[5] = *(_QWORD *)(v6 - 8);
  v17[6] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v17[4] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v17[3] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D8);
  v17[1] = *(_QWORD *)(v11 - 8);
  v17[2] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for MonogramAction();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19E0);
  v17[13] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD0203C();
  sub_23BD45BF4();
  sub_23BD02080(v17[15], (uint64_t)v14);
  v16 = (char *)sub_23BD01E58
      + 4 * byte_23BD47994[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 3, v8)];
  __asm { BR              X10 }
}

uint64_t sub_23BD01E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v3 - 184);
  sub_23BD0214C(v0, v4);
  *(_BYTE *)(v3 - 67) = 1;
  sub_23BD02194();
  v5 = *(_QWORD *)(v3 - 176);
  sub_23BD45AC8();
  sub_23BD02970(&qword_256AA1A08, MEMORY[0x24BE37C50]);
  v6 = *(_QWORD *)(v3 - 160);
  sub_23BD45AF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 8))(v5, v6);
  sub_23BD022A0(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 104) + 8))(v2, v1);
}

uint64_t type metadata accessor for MonogramAction()
{
  uint64_t result;

  result = qword_256AA1AD8;
  if (!qword_256AA1AD8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD0203C()
{
  unint64_t result;

  result = qword_256AA19E8;
  if (!qword_256AA19E8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47E58, &type metadata for MonogramAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA19E8);
  }
  return result;
}

uint64_t sub_23BD02080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MonogramAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD020C4()
{
  unint64_t result;

  result = qword_256AA19F0;
  if (!qword_256AA19F0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47E08, &type metadata for MonogramAction.FetchAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA19F0);
  }
  return result;
}

unint64_t sub_23BD02108()
{
  unint64_t result;

  result = qword_256AA19F8;
  if (!qword_256AA19F8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47DB8, &type metadata for MonogramAction.CachedImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA19F8);
  }
  return result;
}

uint64_t sub_23BD0214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD02194()
{
  unint64_t result;

  result = qword_256AA1A00;
  if (!qword_256AA1A00)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47D68, &type metadata for MonogramAction.AvatarFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1A00);
  }
  return result;
}

uint64_t sub_23BD021D8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Monogram();
    result = MEMORY[0x242610FF4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD02218()
{
  unint64_t result;

  result = qword_256AA1A20;
  if (!qword_256AA1A20)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for MonogramError, &type metadata for MonogramError);
    atomic_store(result, (unint64_t *)&qword_256AA1A20);
  }
  return result;
}

unint64_t sub_23BD0225C()
{
  unint64_t result;

  result = qword_256AA1A28;
  if (!qword_256AA1A28)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for MonogramError, &type metadata for MonogramError);
    atomic_store(result, (unint64_t *)&qword_256AA1A28);
  }
  return result;
}

uint64_t sub_23BD022A0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23BD022E0()
{
  unint64_t result;

  result = qword_256AA1A30;
  if (!qword_256AA1A30)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47D18, &type metadata for MonogramAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1A30);
  }
  return result;
}

uint64_t MonogramAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;

  v32 = a2;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1A38);
  v26[6] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1A40);
  v26[4] = *(_QWORD *)(v4 - 8);
  v26[5] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1A48);
  v26[3] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1A50);
  v26[1] = *(_QWORD *)(v7 - 8);
  v26[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1A58);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MonogramAction();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v26 - v17;
  v19 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23BD0203C();
  v20 = v35;
  sub_23BD45BE8();
  if (!v20)
  {
    v26[0] = v15;
    v35 = v18;
    v21 = sub_23BD45AB0();
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v22 = sub_23BD459C0();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v24 = v13;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

uint64_t sub_23BD0292C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MonogramAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD02970(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA19D0);
    v6[0] = sub_23BD021D8(&qword_256AA1A10, (uint64_t)&protocol conformance descriptor for Monogram);
    v6[1] = sub_23BD021D8(&qword_256AA1A18, (uint64_t)&protocol conformance descriptor for Monogram);
    v6[2] = sub_23BD02218();
    v6[3] = sub_23BD0225C();
    result = MEMORY[0x242610FF4](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD02A18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MonogramAction.init(from:)(a1, a2);
}

void sub_23BD02A2C(_QWORD *a1)
{
  MonogramAction.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for MonogramAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(v8 + 64));
      }
      else
      {
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        v11 = *(int *)(type metadata accessor for Monogram() + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = sub_23BD4512C();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v12, v13, v14);
        swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t destroy for MonogramAction(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload();
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      v4 = a1 + *(int *)(type metadata accessor for Monogram() + 20);
      v5 = sub_23BD4512C();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for MonogramAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for Monogram() + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_23BD4512C();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

_QWORD *assignWithCopy for MonogramAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        return a1;
      sub_23BD022A0((uint64_t)a1);
      if (!swift_getEnumCaseMultiPayload())
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v18 = *(int *)(type metadata accessor for Monogram() + 20);
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        v21 = sub_23BD4512C();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v11 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_23BD022A0((uint64_t)a1);
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v11);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v12 = *(int *)(type metadata accessor for Monogram() + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23BD4512C();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

_OWORD *initializeWithTake for MonogramAction(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      *a1 = *a2;
      v8 = *(int *)(type metadata accessor for Monogram() + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_23BD4512C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

_OWORD *assignWithTake for MonogramAction(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        return a1;
      sub_23BD022A0((uint64_t)a1);
      if (!swift_getEnumCaseMultiPayload())
      {
        *a1 = *a2;
        v17 = *(int *)(type metadata accessor for Monogram() + 20);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = sub_23BD4512C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v11 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_23BD022A0((uint64_t)a1);
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v11);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    *a1 = *a2;
    v12 = *(int *)(type metadata accessor for Monogram() + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23BD4512C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD031B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MonogramAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD0320C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_23BD03264(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t sub_23BD032A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

void sub_23BD032E4()
{
  unint64_t v0;

  sub_23BD03338();
  if (v0 <= 0x3F)
    swift_initEnumMetadataSinglePayload();
}

void sub_23BD03338()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AA1AE8)
  {
    type metadata accessor for Monogram();
    sub_23BCF6C74();
    v0 = sub_23BD45BC4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AA1AE8);
  }
}

uint64_t getEnumTagSinglePayload for AssetPlatform(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD0347C + 4 * byte_23BD479A1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD034B0 + 4 * byte_23BD4799C[v4]))();
}

uint64_t sub_23BD034B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD034B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD034C0);
  return result;
}

uint64_t sub_23BD034CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD034D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD034D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD034E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramAction.CodingKeys()
{
  return &type metadata for MonogramAction.CodingKeys;
}

ValueMetadata *type metadata accessor for MonogramAction.ViewAppearedCodingKeys()
{
  return &type metadata for MonogramAction.ViewAppearedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for MonogramAction.AvatarFetchedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD0354C + 4 * byte_23BD479A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD0356C + 4 * byte_23BD479AB[v4]))();
}

_BYTE *sub_23BD0354C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD0356C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD03574(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD0357C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD03584(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD0358C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MonogramAction.AvatarFetchedCodingKeys()
{
  return &type metadata for MonogramAction.AvatarFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for MonogramAction.CachedImageLoadFailedCodingKeys()
{
  return &type metadata for MonogramAction.CachedImageLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for MonogramAction.FetchAvatarCodingKeys()
{
  return &type metadata for MonogramAction.FetchAvatarCodingKeys;
}

unint64_t sub_23BD035CC()
{
  unint64_t result;

  result = qword_256AA1AF0;
  if (!qword_256AA1AF0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47BE8, &type metadata for MonogramAction.AvatarFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1AF0);
  }
  return result;
}

unint64_t sub_23BD03614()
{
  unint64_t result;

  result = qword_256AA1AF8;
  if (!qword_256AA1AF8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47CF0, &type metadata for MonogramAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1AF8);
  }
  return result;
}

unint64_t sub_23BD0365C()
{
  unint64_t result;

  result = qword_256AA1B00;
  if (!qword_256AA1B00)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47C10, &type metadata for MonogramAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B00);
  }
  return result;
}

unint64_t sub_23BD036A4()
{
  unint64_t result;

  result = qword_256AA1B08;
  if (!qword_256AA1B08)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47C38, &type metadata for MonogramAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B08);
  }
  return result;
}

unint64_t sub_23BD036EC()
{
  unint64_t result;

  result = qword_256AA1B10;
  if (!qword_256AA1B10)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47B58, &type metadata for MonogramAction.AvatarFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B10);
  }
  return result;
}

unint64_t sub_23BD03734()
{
  unint64_t result;

  result = qword_256AA1B18;
  if (!qword_256AA1B18)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47B80, &type metadata for MonogramAction.AvatarFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B18);
  }
  return result;
}

unint64_t sub_23BD0377C()
{
  unint64_t result;

  result = qword_256AA1B20;
  if (!qword_256AA1B20)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47B08, &type metadata for MonogramAction.CachedImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B20);
  }
  return result;
}

unint64_t sub_23BD037C4()
{
  unint64_t result;

  result = qword_256AA1B28;
  if (!qword_256AA1B28)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47B30, &type metadata for MonogramAction.CachedImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B28);
  }
  return result;
}

unint64_t sub_23BD0380C()
{
  unint64_t result;

  result = qword_256AA1B30;
  if (!qword_256AA1B30)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47AB8, &type metadata for MonogramAction.FetchAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B30);
  }
  return result;
}

unint64_t sub_23BD03854()
{
  unint64_t result;

  result = qword_256AA1B38;
  if (!qword_256AA1B38)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47AE0, &type metadata for MonogramAction.FetchAvatarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B38);
  }
  return result;
}

unint64_t sub_23BD0389C()
{
  unint64_t result;

  result = qword_256AA1B40;
  if (!qword_256AA1B40)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47C60, &type metadata for MonogramAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B40);
  }
  return result;
}

unint64_t sub_23BD038E4()
{
  unint64_t result;

  result = qword_256AA1B48;
  if (!qword_256AA1B48)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47C88, &type metadata for MonogramAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B48);
  }
  return result;
}

uint64_t sub_23BD03928(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD03994()
{
  return 12383;
}

uint64_t sub_23BD039A0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6570704177656976 && a2 == 0xEC00000064657261;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6546726174617661 && a2 == 0xED00006465686374 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023BD4BC00 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6176416863746566 && a2 == 0xEB00000000726174)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t MonogramState.loadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BD03B88(v1, a1);
}

uint64_t sub_23BD03B88(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

uint64_t MonogramState.loadState.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD03BD4(a1, v1);
}

uint64_t sub_23BD03BD4(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t (*MonogramState.loadState.modify())()
{
  return nullsub_1;
}

uint64_t MonogramState.init(loadState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23BCFC424(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MonogramLoadState);
}

uint64_t sub_23BD03C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD04DB4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD03C74()
{
  sub_23BD03DCC();
  return sub_23BD45C0C();
}

uint64_t sub_23BD03C9C()
{
  sub_23BD03DCC();
  return sub_23BD45C18();
}

uint64_t MonogramState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B50);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD03DCC();
  sub_23BD45BF4();
  type metadata accessor for MonogramLoadState();
  sub_23BD04010(&qword_256AA1B60, (uint64_t)&protocol conformance descriptor for MonogramLoadState);
  sub_23BD45AF8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23BD03DCC()
{
  unint64_t result;

  result = qword_256AA1B58;
  if (!qword_256AA1B58)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48008, &type metadata for MonogramState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1B58);
  }
  return result;
}

uint64_t MonogramState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B68);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MonogramState();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD03DCC();
  sub_23BD45BE8();
  if (!v2)
  {
    sub_23BD04010(&qword_256AA1B70, (uint64_t)&protocol conformance descriptor for MonogramLoadState);
    sub_23BD45AA4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_23BCFC424(v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MonogramLoadState);
    sub_23BCFC424((uint64_t)v11, v13, (uint64_t (*)(_QWORD))type metadata accessor for MonogramState);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for MonogramState()
{
  uint64_t result;

  result = qword_256AA1BD8;
  if (!qword_256AA1BD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD04010(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t State;

  result = *a1;
  if (!result)
  {
    State = type metadata accessor for MonogramLoadState();
    result = MEMORY[0x242610FF4](a2, State);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD04050@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MonogramState.init(from:)(a1, a2);
}

uint64_t sub_23BD04064(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B50);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD03DCC();
  sub_23BD45BF4();
  type metadata accessor for MonogramLoadState();
  sub_23BD04010(&qword_256AA1B60, (uint64_t)&protocol conformance descriptor for MonogramLoadState);
  sub_23BD45AF8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t *initializeBufferWithCopyOfBuffer for MonogramState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(type metadata accessor for MonogramLoadState() - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        v11 = *(int *)(type metadata accessor for Monogram() + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = sub_23BD4512C();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v12, v13, v14);
        swift_storeEnumTagMultiPayload();
      }
      v16 = *(int *)(v6 + 48);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
    }
  }
  return a1;
}

uint64_t destroy for MonogramLoadState(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (!swift_getEnumCaseMultiPayload())
    {
      swift_bridgeObjectRelease();
      v4 = a1 + *(int *)(type metadata accessor for Monogram() + 20);
      v5 = sub_23BD4512C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    }
    v6 = a1 + *(int *)(v2 + 48);
    v7 = sub_23BD451A4();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  return result;
}

_QWORD *initializeWithCopy for MonogramState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    State = type metadata accessor for MonogramLoadState();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for Monogram() + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_23BD4512C();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    v14 = *(int *)(v4 + 48);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_23BD451A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

_QWORD *assignWithCopy for MonogramState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (v7)
  {
    if (!v8)
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v12 = *(int *)(type metadata accessor for Monogram() + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = sub_23BD4512C();
        v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        v16(v13, v14, v15);
        swift_storeEnumTagMultiPayload();
      }
      v17 = *(int *)(v4 + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
      return a1;
    }
LABEL_7:
    State = type metadata accessor for MonogramLoadState();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    return a1;
  }
  if (v8)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA1B78);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA19D0);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v21 = *(int *)(type metadata accessor for Monogram() + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = sub_23BD4512C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      swift_bridgeObjectRetain();
      v25(v22, v23, v24);
      swift_storeEnumTagMultiPayload();
    }
  }
  v26 = *(int *)(v4 + 48);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_23BD451A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

_OWORD *initializeWithTake for MonogramState(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    State = type metadata accessor for MonogramLoadState();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v8 = *(int *)(type metadata accessor for Monogram() + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_23BD4512C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    v12 = *(int *)(v4 + 48);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23BD451A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

_OWORD *assignWithTake for MonogramState(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_OWORD *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (v7)
  {
    if (!v8)
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v12 = *(int *)(type metadata accessor for Monogram() + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = sub_23BD4512C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
        swift_storeEnumTagMultiPayload();
      }
      v16 = *(int *)(v4 + 48);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
      return a1;
    }
LABEL_7:
    State = type metadata accessor for MonogramLoadState();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    return a1;
  }
  if (v8)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA1B78);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA19D0);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v20 = *(int *)(type metadata accessor for Monogram() + 20);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = sub_23BD4512C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      swift_storeEnumTagMultiPayload();
    }
  }
  v24 = *(int *)(v4 + 48);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_23BD451A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD04B50(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(a1, a2, State);
}

uint64_t storeEnumTagSinglePayload for MonogramState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD04B98(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(a1, a2, a2, State);
}

uint64_t sub_23BD04BD8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MonogramLoadState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MonogramState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD04C80 + 4 * byte_23BD47EA8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD04CA0 + 4 * byte_23BD47EAD[v4]))();
}

_BYTE *sub_23BD04C80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD04CA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD04CA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD04CB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD04CB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD04CC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MonogramState.CodingKeys()
{
  return &type metadata for MonogramState.CodingKeys;
}

unint64_t sub_23BD04CE0()
{
  unint64_t result;

  result = qword_256AA1C10;
  if (!qword_256AA1C10)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47FE0, &type metadata for MonogramState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C10);
  }
  return result;
}

unint64_t sub_23BD04D28()
{
  unint64_t result;

  result = qword_256AA1C18;
  if (!qword_256AA1C18)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47F50, &type metadata for MonogramState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C18);
  }
  return result;
}

unint64_t sub_23BD04D70()
{
  unint64_t result;

  result = qword_256AA1C20;
  if (!qword_256AA1C20)
  {
    result = MEMORY[0x242610FF4](&unk_23BD47F78, &type metadata for MonogramState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C20);
  }
  return result;
}

uint64_t sub_23BD04DB4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7461745364616F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD04E40()
{
  return 0x7461745364616F6CLL;
}

BOOL static MonogramError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MonogramError.hash(into:)()
{
  return sub_23BD45B94();
}

uint64_t sub_23BD04E98(char a1)
{
  if (a1)
    return 0xD000000000000010;
  else
    return 0x656D614E6F6ELL;
}

uint64_t sub_23BD04EE8()
{
  char *v0;

  return sub_23BD04E98(*v0);
}

uint64_t sub_23BD04EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD05C6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD04F14()
{
  sub_23BD052B8();
  return sub_23BD45C0C();
}

uint64_t sub_23BD04F3C()
{
  sub_23BD052B8();
  return sub_23BD45C18();
}

uint64_t sub_23BD04F64()
{
  sub_23BD05384();
  return sub_23BD45C0C();
}

uint64_t sub_23BD04F8C()
{
  sub_23BD05384();
  return sub_23BD45C18();
}

uint64_t sub_23BD04FB4()
{
  sub_23BD052FC();
  return sub_23BD45C0C();
}

uint64_t sub_23BD04FDC()
{
  sub_23BD052FC();
  return sub_23BD45C18();
}

uint64_t sub_23BD05004()
{
  sub_23BD05340();
  return sub_23BD45C0C();
}

uint64_t sub_23BD0502C()
{
  sub_23BD05340();
  return sub_23BD45C18();
}

uint64_t MonogramError.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C28);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C30);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C38);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C40);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD052B8();
  sub_23BD45BF4();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23BD05340();
      sub_23BD45AC8();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23BD052FC();
      v16 = v21;
      sub_23BD45AC8();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23BD05384();
    sub_23BD45AC8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23BD052B8()
{
  unint64_t result;

  result = qword_256AA1C48;
  if (!qword_256AA1C48)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48494, &type metadata for MonogramError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C48);
  }
  return result;
}

unint64_t sub_23BD052FC()
{
  unint64_t result;

  result = qword_256AA1C50;
  if (!qword_256AA1C50)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48444, &type metadata for MonogramError.NoPrimaryAccountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C50);
  }
  return result;
}

unint64_t sub_23BD05340()
{
  unint64_t result;

  result = qword_256AA1C58;
  if (!qword_256AA1C58)
  {
    result = MEMORY[0x242610FF4](&unk_23BD483F4, &type metadata for MonogramError.NoProfilePictureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C58);
  }
  return result;
}

unint64_t sub_23BD05384()
{
  unint64_t result;

  result = qword_256AA1C60;
  if (!qword_256AA1C60)
  {
    result = MEMORY[0x242610FF4](&unk_23BD483A4, &type metadata for MonogramError.NoNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C60);
  }
  return result;
}

uint64_t MonogramError.hashValue.getter()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

uint64_t MonogramError.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C68);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C70);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C78);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1C80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD052B8();
  v13 = v41;
  sub_23BD45BE8();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23BD45AB0();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23BD459C0();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v25 = &type metadata for MonogramError;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23BD05340();
      v20 = v9;
      sub_23BD45A68();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23BD052FC();
      v28 = v15;
      sub_23BD45A68();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23BD05384();
    sub_23BD45A68();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23BD05860@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return MonogramError.init(from:)(a1, a2);
}

uint64_t sub_23BD05874(_QWORD *a1)
{
  return MonogramError.encode(to:)(a1);
}

unint64_t sub_23BD0588C()
{
  unint64_t result;

  result = qword_256AA1C88;
  if (!qword_256AA1C88)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for MonogramError, &type metadata for MonogramError);
    atomic_store(result, (unint64_t *)&qword_256AA1C88);
  }
  return result;
}

ValueMetadata *type metadata accessor for MonogramError()
{
  return &type metadata for MonogramError;
}

uint64_t _s12FitnessAsset13MonogramErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD05934 + 4 * byte_23BD48065[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD05968 + 4 * byte_23BD48060[v4]))();
}

uint64_t sub_23BD05968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD05970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD05978);
  return result;
}

uint64_t sub_23BD05984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD0598CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD05990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD05998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramError.CodingKeys()
{
  return &type metadata for MonogramError.CodingKeys;
}

ValueMetadata *type metadata accessor for MonogramError.NoNameCodingKeys()
{
  return &type metadata for MonogramError.NoNameCodingKeys;
}

ValueMetadata *type metadata accessor for MonogramError.NoProfilePictureCodingKeys()
{
  return &type metadata for MonogramError.NoProfilePictureCodingKeys;
}

ValueMetadata *type metadata accessor for MonogramError.NoPrimaryAccountCodingKeys()
{
  return &type metadata for MonogramError.NoPrimaryAccountCodingKeys;
}

unint64_t sub_23BD059E8()
{
  unint64_t result;

  result = qword_256AA1C90;
  if (!qword_256AA1C90)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4837C, &type metadata for MonogramError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C90);
  }
  return result;
}

unint64_t sub_23BD05A30()
{
  unint64_t result;

  result = qword_256AA1C98;
  if (!qword_256AA1C98)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4829C, &type metadata for MonogramError.NoNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1C98);
  }
  return result;
}

unint64_t sub_23BD05A78()
{
  unint64_t result;

  result = qword_256AA1CA0;
  if (!qword_256AA1CA0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD482C4, &type metadata for MonogramError.NoNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CA0);
  }
  return result;
}

unint64_t sub_23BD05AC0()
{
  unint64_t result;

  result = qword_256AA1CA8;
  if (!qword_256AA1CA8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4824C, &type metadata for MonogramError.NoProfilePictureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CA8);
  }
  return result;
}

unint64_t sub_23BD05B08()
{
  unint64_t result;

  result = qword_256AA1CB0;
  if (!qword_256AA1CB0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48274, &type metadata for MonogramError.NoProfilePictureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CB0);
  }
  return result;
}

unint64_t sub_23BD05B50()
{
  unint64_t result;

  result = qword_256AA1CB8;
  if (!qword_256AA1CB8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD481FC, &type metadata for MonogramError.NoPrimaryAccountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CB8);
  }
  return result;
}

unint64_t sub_23BD05B98()
{
  unint64_t result;

  result = qword_256AA1CC0;
  if (!qword_256AA1CC0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48224, &type metadata for MonogramError.NoPrimaryAccountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CC0);
  }
  return result;
}

unint64_t sub_23BD05BE0()
{
  unint64_t result;

  result = qword_256AA1CC8;
  if (!qword_256AA1CC8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD482EC, &type metadata for MonogramError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CC8);
  }
  return result;
}

unint64_t sub_23BD05C28()
{
  unint64_t result;

  result = qword_256AA1CD0;
  if (!qword_256AA1CD0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48314, &type metadata for MonogramError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1CD0);
  }
  return result;
}

uint64_t sub_23BD05C6C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656D614E6F6ELL && a2 == 0xE600000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BD4BC20 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BD4BC40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

ValueMetadata *type metadata accessor for ImageAssetConstants()
{
  return &type metadata for ImageAssetConstants;
}

void sub_23BD05DB4()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE40]), sel_init);
  objc_msgSend(v0, sel_setCountLimit_, 0);
  objc_msgSend(v0, sel_baf_setEvictsObjectsWhenApplicationEntersBackground_, 0);

  qword_256AACDC0 = (uint64_t)v0;
}

uint64_t MonogramFeature.init(environment:fetcher:)@<X0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3;

  v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = a1[2];
  return sub_23BD05E3C(a2, (uint64_t)(a3 + 3));
}

uint64_t sub_23BD05E3C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void MonogramFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t State;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  char *v25;
  _QWORD v26[4];
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a3;
  v35 = a2;
  v31 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1CD8);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v26 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v28 = (char *)v26 - v10;
  v27 = sub_23BD451A4();
  v26[3] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v26[1] = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v26[2] = (char *)v26 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  MEMORY[0x24BDAC7A8](v19);
  v20 = type metadata accessor for MonogramAction();
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v26 - v22;
  sub_23BCF6190(a4, (uint64_t)v26 - v22, v24);
  v25 = (char *)sub_23BD060D4
      + 4 * word_23BD48504[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 3, v14)];
  __asm { BR              X10 }
}

uint64_t sub_23BD060D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BD0214C(v0, v1);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  sub_23BD06904(v1, v2);
  sub_23BD45198();
  sub_23BD022A0(v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 2, v4);
  return sub_23BD03BD4(v2, *(_QWORD *)(v3 - 200));
}

uint64_t sub_23BD06904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD0694C()
{
  unint64_t result;

  result = qword_256AA1CE8;
  if (!qword_256AA1CE8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD485C8, &type metadata for MonogramFeature.TaskIdentifier);
    atomic_store(result, &qword_256AA1CE8);
  }
  return result;
}

uint64_t sub_23BD06990(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MonogramAction();
  v2[4] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D70);
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D78);
  v2[8] = v4;
  v2[9] = *(_QWORD *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = sub_23BD45858();
  v2[12] = sub_23BD4584C();
  v2[13] = sub_23BD45810();
  v2[14] = v5;
  return swift_task_switch();
}

uint64_t sub_23BD06A78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(v0[3] + 16) + *(_QWORD *)(v0[3] + 16));
  v1 = (_QWORD *)swift_task_alloc();
  v0[15] = v1;
  *v1 = v0;
  v1[1] = sub_23BD06AD8;
  return v3(v0[7]);
}

uint64_t sub_23BD06AD8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD06B24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  sub_23BD45870();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = sub_23BD4584C();
  v4 = (_QWORD *)swift_task_alloc();
  v0[17] = v4;
  *v4 = v0;
  v4[1] = sub_23BD06BC8;
  return sub_23BD4587C();
}

uint64_t sub_23BD06BC8()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BD06C1C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(v0 + 152) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 3, 3, v3);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D68);
    *v4 = v0;
    v4[1] = sub_23BD06D18;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD06D18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MonogramAction);
  return swift_task_switch();
}

uint64_t sub_23BD06D78()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 128) = sub_23BD4584C();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_23BD06BC8;
  return sub_23BD4587C();
}

uint64_t sub_23BD06DF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[12] = a1;
  v2[13] = a2;
  type metadata accessor for MonogramAction();
  v2[14] = swift_task_alloc();
  v2[15] = sub_23BD45858();
  v2[16] = sub_23BD4584C();
  v2[17] = sub_23BD45810();
  v2[18] = v3;
  return swift_task_switch();
}

uint64_t sub_23BD06E88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)(v0 + 104) + 32)
                                       + *(_QWORD *)(*(_QWORD *)(v0 + 104) + 32));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_23BD06EF0;
  return v3(v0 + 56);
}

uint64_t sub_23BD06EF0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD06F3C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BD45894();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[20] = sub_23BD4584C();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[21] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BD0709C;
  return sub_23BD45840();
}

uint64_t sub_23BD0709C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BD070F0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(v0 + 184) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 112);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 3, 3, v3);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D68);
    *v4 = v0;
    v4[1] = sub_23BD071C4;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD071C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MonogramAction);
  return swift_task_switch();
}

uint64_t sub_23BD07224()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[20] = sub_23BD4584C();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[21] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BD0709C;
  return sub_23BD45840();
}

uint64_t sub_23BD072C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = a2;
  type metadata accessor for MonogramAction();
  v2[6] = swift_task_alloc();
  type metadata accessor for Monogram();
  v2[7] = swift_task_alloc();
  sub_23BD45858();
  v2[8] = sub_23BD4584C();
  v2[9] = sub_23BD45810();
  v2[10] = v3;
  return swift_task_switch();
}

uint64_t sub_23BD07374()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(***(int ***)(v0 + 40) + **(_QWORD **)(v0 + 40));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_23BD073CC;
  return v3();
}

uint64_t sub_23BD073CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD07434()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[5];
  v2 = v1[9];
  v3 = v1[10];
  __swift_project_boxed_opaque_existential_1(v1 + 6, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = v4;
  *v4 = v0;
  v4[1] = sub_23BD074C0;
  return v6(v0[7], v0[4], v0[12], v2, v3);
}

uint64_t sub_23BD074C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD07520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  sub_23BCF6190(v0[7], v1, (uint64_t (*)(_QWORD))type metadata accessor for Monogram);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 3, v2);
  v3 = (_QWORD *)swift_task_alloc();
  v0[16] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D68);
  *v3 = v0;
  v3[1] = sub_23BD075D4;
  return sub_23BD456A8();
}

uint64_t sub_23BD075D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MonogramAction);
  return swift_task_switch();
}

uint64_t sub_23BD07634()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);

  swift_release();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for Monogram);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD07694()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MonogramAction);
  return swift_task_switch();
}

uint64_t sub_23BD076F4()
{
  uint64_t v0;

  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD07740()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(void **)(v0 + 104);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  if (swift_dynamicCast())
  {

    v3 = *(_BYTE *)(v0 + 144);
    if (qword_256AA0FC8 != -1)
      swift_once();
    v4 = sub_23BD45444();
    __swift_project_value_buffer(v4, (uint64_t)qword_256AACDC8);
    v5 = sub_23BD4542C();
    v6 = sub_23BD458B8();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      sub_23BCF6C74();
      swift_allocError();
      *v9 = v3;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 24) = v10;
      sub_23BD45918();
      *v8 = v10;
      _os_log_impl(&dword_23BCEB000, v5, v6, "Failed to fetch Account Avatar: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
      swift_arrayDestroy();
      MEMORY[0x242611078](v8, -1, -1);
      MEMORY[0x242611078](v7, -1, -1);
    }
    v11 = *(_BYTE **)(v0 + 48);

    *v11 = v3;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 3, v12);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D68);
    *v13 = v0;
    v13[1] = sub_23BD07694;
    return sub_23BD456A8();
  }
  else
  {
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23BD079E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  if (swift_dynamicCast())
  {

    v3 = *(_BYTE *)(v0 + 144);
    if (qword_256AA0FC8 != -1)
      swift_once();
    v4 = sub_23BD45444();
    __swift_project_value_buffer(v4, (uint64_t)qword_256AACDC8);
    v5 = sub_23BD4542C();
    v6 = sub_23BD458B8();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      sub_23BCF6C74();
      swift_allocError();
      *v9 = v3;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 24) = v10;
      sub_23BD45918();
      *v8 = v10;
      _os_log_impl(&dword_23BCEB000, v5, v6, "Failed to fetch Account Avatar: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
      swift_arrayDestroy();
      MEMORY[0x242611078](v8, -1, -1);
      MEMORY[0x242611078](v7, -1, -1);
    }
    v11 = *(_BYTE **)(v0 + 48);

    *v11 = v3;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 3, v12);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D68);
    *v13 = v0;
    v13[1] = sub_23BD07694;
    return sub_23BD456A8();
  }
  else
  {
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23BD07C90(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MonogramFeature(a2, a1);
  return a2;
}

uint64_t sub_23BD07CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BCF6D4C;
  return sub_23BD072C8(a1, v1 + 16);
}

uint64_t sub_23BD07D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BCF6F84;
  return sub_23BD06990(a1, v1 + 16);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocObject();
}

uint64_t sub_23BD07DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BCF6F84;
  return sub_23BD06DF8(a1, v1 + 16);
}

uint64_t sub_23BD07E10()
{
  return sub_23BCEEF14(&qword_256AA1D20, (uint64_t (*)(uint64_t))type metadata accessor for MonogramAction, (uint64_t)&protocol conformance descriptor for MonogramAction);
}

uint64_t sub_23BD07E3C()
{
  return sub_23BCEEF14(&qword_256AA1D28, (uint64_t (*)(uint64_t))type metadata accessor for MonogramAction, (uint64_t)&protocol conformance descriptor for MonogramAction);
}

unint64_t sub_23BD07E6C()
{
  unint64_t result;

  result = qword_256AA1D30;
  if (!qword_256AA1D30)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BE2B430], MEMORY[0x24BE2B428]);
    atomic_store(result, (unint64_t *)&qword_256AA1D30);
  }
  return result;
}

uint64_t sub_23BD07EB0()
{
  return sub_23BCEEF14(&qword_256AA1D38, (uint64_t (*)(uint64_t))type metadata accessor for MonogramState, (uint64_t)&protocol conformance descriptor for MonogramState);
}

uint64_t destroy for MonogramFeature(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 48);
}

uint64_t initializeWithCopy for MonogramFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = a1 + 48;
  v5 = a2 + 48;
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v8(v4, v5, v7);
  return a1;
}

_QWORD *assignWithCopy for MonogramFeature(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 6, a2 + 6);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MonogramFeature(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramFeature(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramFeature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonogramFeature()
{
  return &type metadata for MonogramFeature;
}

uint64_t storeEnumTagSinglePayload for MonogramFeature.TaskIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD08328 + 4 * byte_23BD48511[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD0835C + 4 * byte_23BD4850C[v4]))();
}

uint64_t sub_23BD0835C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD08364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD0836CLL);
  return result;
}

uint64_t sub_23BD08378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD08380);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD08384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD0838C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramFeature.TaskIdentifier()
{
  return &type metadata for MonogramFeature.TaskIdentifier;
}

unint64_t sub_23BD083AC()
{
  unint64_t result;

  result = qword_256AA1D40;
  if (!qword_256AA1D40)
  {
    result = MEMORY[0x242610FF4](&unk_23BD485A0, &type metadata for MonogramFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AA1D40);
  }
  return result;
}

uint64_t sub_23BD083F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD08404(a1, a2, a3, a4, &qword_256AA1D58, &qword_256AA1D60);
}

uint64_t sub_23BD08404(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23BD45A14();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23BD08624(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_23BD08610(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD08404(a1, a2, a3, a4, &qword_256AA1D48, &qword_256AA1D50);
}

uint64_t sub_23BD08624(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23BD45A50();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t MonogramEnvironment.init(fetchCurrentAccount:makeAccountChangedStream:makeRemoteBrowsingIdentityUpdatedStream:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t destroy for MonogramEnvironment()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MonogramEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for MonogramEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for MonogramEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonogramEnvironment()
{
  return &type metadata for MonogramEnvironment;
}

uint64_t sub_23BD089E4()
{
  uint64_t v0;

  v0 = sub_23BD45444();
  __swift_allocate_value_buffer(v0, qword_256AACDC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256AACDC8);
  return sub_23BD45438();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t MonogramFetcher.fetchAccountProfileImage(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

id sub_23BD08AB0()
{
  _QWORD *v0;
  id result;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE049E0]), sel_initWithAccount_, v0[17]);
  v0[18] = result;
  if (result)
  {
    v2 = result;
    v0[7] = v0 + 15;
    v0[2] = v0;
    v0[3] = sub_23BD08B70;
    v3 = swift_continuation_init();
    v0[10] = MEMORY[0x24BDAC760];
    v4 = v0 + 10;
    v4[1] = 0x40000000;
    v4[2] = sub_23BD08E70;
    v4[3] = &block_descriptor;
    v4[4] = v3;
    objc_msgSend(v2, sel_performRequestWithHandler_, v4);
    return (id)swift_continuation_await();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BD08B70()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23BD08BD0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  CGPoint v13;
  CGSize v14;
  id v15;
  void *v16;
  id v17;
  CGImage *v18;
  CGImageRef v19;
  id v20;
  _BYTE *v22;
  CGPoint v23;
  CGSize v24;
  char v25;
  CGRect v26;

  v1 = *(void **)(v0 + 144);

  v2 = *(void **)(v0 + 128);
  if (v2)
  {
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = (void *)v3;
      v5 = v2;
      v6 = objc_msgSend(v4, sel_photoData);
      if (v6)
      {
        v7 = v6;
        v8 = sub_23BD45174();
        v10 = v9;

        v11 = objc_msgSend(v4, sel_cropRect);
        if (v11)
        {
          v12 = v11;
          v23 = (CGPoint)0;
          v24 = (CGSize)0;
          v25 = 1;
          MEMORY[0x2426108F8](v11, &v23);

          if ((v25 & 1) == 0)
          {
            v13 = v23;
            v14 = v24;
            v15 = objc_allocWithZone(MEMORY[0x24BEBD640]);
            sub_23BD08F40(v8, v10);
            v16 = (void *)sub_23BD45168();
            v17 = objc_msgSend(v15, sel_initWithData_, v16);
            sub_23BD08EFC(v8, v10);

            if (v17)
            {
              v18 = (CGImage *)objc_msgSend(v17, sel_CGImage);

              if (v18)
              {
                v26.origin = v13;
                v26.size = v14;
                v19 = CGImageCreateWithImageInRect(v18, v26);

                if (v19)
                {
                  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD640]), sel_initWithCGImage_, v19);

                  sub_23BD08EFC(v8, v10);
                  return (*(uint64_t (**)(id))(v0 + 8))(v20);
                }
              }
            }
          }
        }

        sub_23BD08EFC(v8, v10);
      }
      else
      {

      }
    }
  }
  sub_23BCF6C74();
  swift_allocError();
  *v22 = 1;
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD08E30()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD08E70(uint64_t a1, void *a2, void *a3, void *a4)
{
  _QWORD *v5;
  id v6;
  _QWORD *v9;
  id v10;
  id v11;

  if (a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
    swift_allocError();
    *v5 = a4;
    v6 = a4;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40);
    *v9 = a2;
    v9[1] = a3;
    v10 = a2;
    v11 = a3;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_23BD08EFC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_23BD08F40(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_23BD08F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BD08FE4;
  v4[17] = a2;
  return swift_task_switch();
}

uint64_t sub_23BD08FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

ValueMetadata *type metadata accessor for MonogramFetcher()
{
  return &type metadata for MonogramFetcher;
}

uint64_t MonogramView.init(store:font:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a4 = sub_23BCF7008;
  *(_QWORD *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t sub_23BD090A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD090C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t State;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  sub_23BCF7984();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E58);
  sub_23BCF9568(&qword_256AA1E60, &qword_256AA1E58, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  sub_23BCF7978();
  swift_release();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v3, 2, v10))
  {
    sub_23BCF56E0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MonogramLoadState);
    v11 = v19;
LABEL_5:
    v15 = type metadata accessor for Monogram();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
  }
  v12 = &v3[*(int *)(v10 + 48)];
  sub_23BCECF30((uint64_t)v3, (uint64_t)v9, &qword_256AA19D0);
  v13 = sub_23BD451A4();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_23BCECF30((uint64_t)v9, (uint64_t)v6, &qword_256AA19D0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v11 = v19;
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BCEEED8((uint64_t)v6, &qword_256AA19D0);
    goto LABEL_5;
  }
  sub_23BD0ADF0((uint64_t)v6, v19);
  v17 = type metadata accessor for Monogram();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 0, 1, v17);
}

uint64_t MonogramView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DA8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DB0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(_BYTE *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v16[0] = *(_QWORD *)v1;
  v9 = v16[0];
  v16[1] = v10;
  v17 = v11;
  v18 = v12;
  sub_23BD0950C((uint64_t)v5);
  sub_23BD4569C();
  sub_23BD099B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, INFINITY, 0);
  sub_23BCEEED8((uint64_t)v5, &qword_256AA1DA8);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v10;
  *(_BYTE *)(v13 + 32) = v11;
  *(_QWORD *)(v13 + 40) = v12;
  sub_23BCECE9C((uint64_t)v8, a1, &qword_256AA1DB0);
  v14 = (uint64_t (**)())(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DB8) + 36));
  *v14 = sub_23BD09B78;
  v14[1] = (uint64_t (*)())v13;
  v14[2] = 0;
  v14[3] = 0;
  sub_23BCF7984();
  swift_retain();
  return sub_23BCEEED8((uint64_t)v8, &qword_256AA1DB0);
}

void sub_23BD0950C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DF0);
  MEMORY[0x24BDAC7A8](v3);
  v40 = (uint64_t)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DE0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)v37 - v9;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E68);
  MEMORY[0x24BDAC7A8](v42);
  v43 = (_QWORD *)((char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_23BD45684();
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E70);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (_QWORD *)((char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *v1;
  v17 = v1[1];
  v19 = *((_BYTE *)v1 + 16);
  v20 = v1[3];
  v44 = *v1;
  v45 = v17;
  v46 = v19;
  v47 = v20;
  sub_23BD090C8((uint64_t)v16);
  v21 = type metadata accessor for Monogram();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v16, 1, v21) == 1)
  {
    sub_23BCEEED8((uint64_t)v16, &qword_256AA1E70);
  }
  else
  {
    v37[0] = v5;
    v37[1] = a1;
    v22 = *v16;
    v23 = v16[1];
    swift_bridgeObjectRetain();
    sub_23BCF56E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Monogram);
    if (qword_256AA0FC0 != -1)
      swift_once();
    v24 = (void *)qword_256AACDC0;
    v44 = v22;
    v45 = v23;
    v25 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1590));
    swift_bridgeObjectRetain();
    v26 = v24;
    v27 = (void *)sub_23BD452E8();
    v28 = objc_msgSend(v26, sel_objectForKey_, v27);
    swift_bridgeObjectRelease();

    v5 = v37[0];
    if (v28)
    {
      v29 = v28;
      sub_23BD4566C();
      v31 = v38;
      v30 = v39;
      (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v13, *MEMORY[0x24BDF3FD0], v39);
      v32 = sub_23BD45690();
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v30);
      *v43 = v32;
      swift_storeEnumTagMultiPayload();
      sub_23BD0A8B4(&qword_256AA1DD8, &qword_256AA1DE0, (uint64_t (*)(void))sub_23BD0A9A8, MEMORY[0x24BDF0910]);
      swift_retain();
      sub_23BD455D0();
      swift_release();

      return;
    }
  }
  v44 = v18;
  v45 = v17;
  v46 = v19;
  v47 = v20;
  v33 = v40;
  sub_23BD09B90(v40);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v18;
  *(_QWORD *)(v34 + 24) = v17;
  *(_BYTE *)(v34 + 32) = v19;
  *(_QWORD *)(v34 + 40) = v20;
  sub_23BCECE9C(v33, (uint64_t)v7, &qword_256AA1DF0);
  v35 = (uint64_t (**)())&v7[*(int *)(v5 + 36)];
  *v35 = sub_23BD0ABFC;
  v35[1] = (uint64_t (*)())v34;
  v35[2] = 0;
  v35[3] = 0;
  sub_23BCF7984();
  swift_retain();
  sub_23BCEEED8(v33, &qword_256AA1DF0);
  v36 = v41;
  sub_23BCECF30((uint64_t)v7, v41, &qword_256AA1DE0);
  sub_23BCECE9C(v36, (uint64_t)v43, &qword_256AA1DE0);
  swift_storeEnumTagMultiPayload();
  sub_23BD0A8B4(&qword_256AA1DD8, &qword_256AA1DE0, (uint64_t (*)(void))sub_23BD0A9A8, MEMORY[0x24BDF0910]);
  sub_23BD455D0();
  sub_23BCEEED8(v36, &qword_256AA1DE0);
}

__n128 sub_23BD099B8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  _OWORD *v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BD458C4();
    v23 = (void *)sub_23BD455F4();
    sub_23BD45420();

  }
  sub_23BD454B0();
  sub_23BCECE9C(v13, a9, &qword_256AA1DA8);
  v24 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1DB0) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *v24 = v26;
  v24[1] = v27;
  result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_23BD09B78()
{
  return sub_23BD0AC04(1);
}

uint64_t sub_23BD09B80()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BD09B90@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  char v68;
  uint64_t v69;

  v63 = a1;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E20);
  MEMORY[0x24BDAC7A8](v64);
  v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E78);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E10);
  MEMORY[0x24BDAC7A8](v57);
  v60 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E80);
  MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_23BD450FC();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_23BD45108();
  v53 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E00);
  MEMORY[0x24BDAC7A8](v65);
  v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v58 = (uint64_t)&v51 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E70);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E88);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23BD4512C();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v23) = *((_BYTE *)v1 + 16);
  v25 = *((_QWORD *)v1 + 3);
  v67 = *v1;
  v68 = v23;
  v69 = v25;
  sub_23BD090C8((uint64_t)v17);
  v26 = type metadata accessor for Monogram();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v17, 1, v26) == 1)
  {
    sub_23BCEEED8((uint64_t)v17, &qword_256AA1E70);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
LABEL_4:
    sub_23BCEEED8((uint64_t)v20, &qword_256AA1E88);
    sub_23BD0A380((uint64_t)v3);
    sub_23BCECE9C((uint64_t)v3, v62, &qword_256AA1E20);
    swift_storeEnumTagMultiPayload();
    sub_23BD0AA14();
    sub_23BD0AA98();
    sub_23BD455D0();
    return sub_23BCEEED8((uint64_t)v3, &qword_256AA1E20);
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v20, &v17[*(int *)(v26 + 20)], v21);
  sub_23BCF56E0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Monogram);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    goto LABEL_4;
  v28 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v51 = v24;
  v28(v24, v20, v21);
  v29 = v52;
  v30 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v9, *MEMORY[0x24BDCCB80], v54);
  MEMORY[0x242610100](v9);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  sub_23BD0AC30();
  v31 = v55;
  sub_23BD45120();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v31);
  v66 = v67;
  sub_23BD0AC78();
  v32 = sub_23BD45618();
  v34 = v33;
  v36 = v35 & 1;
  v37 = sub_23BD4560C();
  v39 = v38;
  v55 = v40;
  v42 = v41 & 1;
  sub_23BD0ACBC(v32, v34, v36);
  swift_bridgeObjectRelease();
  v43 = *MEMORY[0x24BDF1D90];
  v44 = sub_23BD45600();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 104))(v59, v43, v44);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
  KeyPath = swift_getKeyPath();
  v48 = v60;
  sub_23BCECE9C(v46, (uint64_t)v60 + *(int *)(v57 + 28), &qword_256AA1E80);
  *v48 = KeyPath;
  v49 = (uint64_t)v56;
  sub_23BCECE9C((uint64_t)v48, (uint64_t)&v56[*(int *)(v65 + 36)], &qword_256AA1E10);
  *(_QWORD *)v49 = v37;
  *(_QWORD *)(v49 + 8) = v39;
  *(_BYTE *)(v49 + 16) = v42;
  *(_QWORD *)(v49 + 24) = v55;
  sub_23BD0AD10(v37, v39, v42);
  swift_bridgeObjectRetain();
  sub_23BCEEED8((uint64_t)v48, &qword_256AA1E10);
  sub_23BCEEED8(v46, &qword_256AA1E80);
  sub_23BD0ACBC(v37, v39, v42);
  swift_bridgeObjectRelease();
  v50 = v58;
  sub_23BCECF30(v49, v58, &qword_256AA1E00);
  sub_23BCECE9C(v50, v62, &qword_256AA1E00);
  swift_storeEnumTagMultiPayload();
  sub_23BD0AA14();
  sub_23BD0AA98();
  sub_23BD455D0();
  sub_23BCEEED8(v50, &qword_256AA1E00);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v51, v21);
}

uint64_t sub_23BD0A230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for MonogramAction();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCF7984();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E58);
  sub_23BCF9568(&qword_256AA1E60, &qword_256AA1E58, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  sub_23BCF7978();
  swift_release();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, a5, 3, v9);
  sub_23BD456D8();
  swift_release();
  return sub_23BCF56E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MonogramAction);
}

uint64_t sub_23BD0A380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v32 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EA0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BD45498();
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - v8;
  v10 = sub_23BD45684();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EA8);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45678();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDF3FD0], v10);
  v17 = sub_23BD45690();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18 = sub_23BD455DC();
  v33 = v17;
  v34 = v18;
  sub_23BD4548C();
  sub_23BD45480();
  v19 = *(void (**)(char *, uint64_t))(v29 + 8);
  v19(v9, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E28);
  sub_23BD0AB44();
  sub_23BD4563C();
  v19(v6, v4);
  swift_release();
  sub_23BD45528();
  v20 = sub_23BD45534();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v3, 0, 1, v20);
  KeyPath = swift_getKeyPath();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E20);
  v23 = v32;
  v24 = (uint64_t *)(v32 + *(int *)(v22 + 36));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1E50);
  sub_23BCECE9C((uint64_t)v3, (uint64_t)v24 + *(int *)(v25 + 28), &qword_256AA1EA0);
  *v24 = KeyPath;
  v27 = v30;
  v26 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v23, v16, v31);
  sub_23BCEEED8((uint64_t)v3, &qword_256AA1EA0);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v26);
}

uint64_t destroy for MonogramView()
{
  sub_23BCF7978();
  return swift_release();
}

uint64_t initializeWithCopy for MonogramView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BCF7984();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MonogramView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BCF7984();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BCF7978();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MonogramView(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BCF7978();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonogramView()
{
  return &type metadata for MonogramView;
}

uint64_t sub_23BD0A85C()
{
  return sub_23BD0A8B4(&qword_256AA1DC0, &qword_256AA1DB8, sub_23BD0A890, MEMORY[0x24BDF0910]);
}

uint64_t sub_23BD0A890()
{
  return sub_23BD0A8B4(&qword_256AA1DC8, &qword_256AA1DB0, (uint64_t (*)(void))sub_23BD0A91C, MEMORY[0x24BDEDBB8]);
}

uint64_t sub_23BD0A8B4(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD0A91C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AA1DD0;
  if (!qword_256AA1DD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1DA8);
    v2 = sub_23BD0A8B4(&qword_256AA1DD8, &qword_256AA1DE0, (uint64_t (*)(void))sub_23BD0A9A8, MEMORY[0x24BDF0910]);
    v3[0] = MEMORY[0x24BDF40E8];
    v3[1] = v2;
    result = MEMORY[0x242610FF4](MEMORY[0x24BDEF3E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AA1DD0);
  }
  return result;
}

unint64_t sub_23BD0A9A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1DE8;
  if (!qword_256AA1DE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1DF0);
    v2[0] = sub_23BD0AA14();
    v2[1] = sub_23BD0AA98();
    result = MEMORY[0x242610FF4](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1DE8);
  }
  return result;
}

unint64_t sub_23BD0AA14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AA1DF8;
  if (!qword_256AA1DF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1E00);
    v2 = sub_23BCF9568(&qword_256AA1E08, &qword_256AA1E10, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AA1DF8);
  }
  return result;
}

unint64_t sub_23BD0AA98()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256AA1E18;
  if (!qword_256AA1E18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1E20);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1E28);
    v2[3] = sub_23BD0AB44();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23BCF9568(&qword_256AA1E48, &qword_256AA1E50, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1E18);
  }
  return result;
}

unint64_t sub_23BD0AB44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AA1E30;
  if (!qword_256AA1E30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1E28);
    v2 = sub_23BCF9568(&qword_256AA1E38, &qword_256AA1E40, MEMORY[0x24BDF0978]);
    v3[0] = MEMORY[0x24BDF40E8];
    v3[1] = v2;
    result = MEMORY[0x242610FF4](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AA1E30);
  }
  return result;
}

uint64_t objectdestroy_2Tm_0()
{
  sub_23BCF7978();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD0ABFC()
{
  return sub_23BD0AC04(2);
}

uint64_t sub_23BD0AC04(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD0A230(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

unint64_t sub_23BD0AC30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA1E90;
  if (!qword_256AA1E90)
  {
    v1 = sub_23BD45108();
    result = MEMORY[0x242610FF4](MEMORY[0x24BDCCB98], v1);
    atomic_store(result, (unint64_t *)&qword_256AA1E90);
  }
  return result;
}

unint64_t sub_23BD0AC78()
{
  unint64_t result;

  result = qword_256AA1E98;
  if (!qword_256AA1E98)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256AA1E98);
  }
  return result;
}

uint64_t sub_23BD0ACBC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_23BD0ACCC()
{
  return sub_23BD454F8();
}

uint64_t sub_23BD0ACEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BD0AD40(a1, a2, a3, a4, &qword_256AA1E80, MEMORY[0x24BDEE450]);
}

uint64_t sub_23BD0AD10(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_23BD0AD20()
{
  return sub_23BD454EC();
}

uint64_t sub_23BD0AD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(a1, (uint64_t)v11, a5);
  return a6(v11);
}

uint64_t sub_23BD0ADCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BD0AD40(a1, a2, a3, a4, &qword_256AA1EA0, MEMORY[0x24BDEE1F8]);
}

uint64_t sub_23BD0ADF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Monogram();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ImageSequenceView.init(imagesNamed:startFrame:endFrame:bundle:framesPerSecond:repeatCount:isAnimating:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  if ((a4 & 1) != 0)
    a3 = *(_QWORD *)(result + 16) - 1;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a6;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a7;
  *(_BYTE *)(a9 + 48) = a8 & 1;
  return result;
}

id ImageSequenceView.makeUIView(context:)()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_init);
  objc_msgSend(v0, sel_setContentMode_, 1);
  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  ImageSequenceView.updateUIView(_:context:)(v0);
  return v0;
}

char *ImageSequenceView.updateUIView(_:context:)(void *a1)
{
  void *v1;
  __int128 *v2;
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  char *v10;
  char *result;
  char *v12;
  void *v13;
  uint64_t v14;
  char **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v4 = v2[1];
  v16 = *v2;
  v17 = v4;
  v18 = v2[2];
  v19 = *((_BYTE *)v2 + 48);
  v5 = *((_QWORD *)&v16 + 1);
  v6 = v4;
  if ((uint64_t)v4 < *((uint64_t *)&v16 + 1))
  {
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    v10 = (char *)sub_23BD45A20();
    if (!v10)
      goto LABEL_10;
LABEL_4:
    result = v10 - 1;
    if (__OFSUB__(v10, 1))
    {
      __break(1u);
    }
    else if ((v5 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)result < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = (char *)*(id *)(v5 + 8 * (_QWORD)result + 32);
LABEL_9:
        v10 = v12;
        goto LABEL_10;
      }
      __break(1u);
      return result;
    }
    v12 = (char *)MEMORY[0x2426109B8](result, v5);
    goto LABEL_9;
  }
  v1 = a1;
  sub_23BD0B42C((uint64_t)&v16);
  sub_23BD0B2D8(v5, v6, (uint64_t *)&v16);
  v5 = v7;
  sub_23BD0B460((uint64_t)&v16);
  LODWORD(v8) = 1132068864;
  objc_msgSend(v1, sel_setContentCompressionResistancePriority_forAxis_, 1, v8);
  LODWORD(v9) = 1132068864;
  objc_msgSend(v1, sel_setContentCompressionResistancePriority_forAxis_, 0, v9);
  v3 = v5 >> 62;
  if (v5 >> 62)
    goto LABEL_17;
  v10 = *(char **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10)
    goto LABEL_4;
LABEL_10:
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setImage_, v10);

  sub_23BD0B490();
  v13 = (void *)sub_23BD457D4();
  objc_msgSend(v1, sel_setAnimationImages_, v13);

  if (v3)
  {
    swift_bridgeObjectRetain();
    v14 = sub_23BD45A20();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAnimationDuration_, (double)v14 / (double)*((uint64_t *)&v17 + 1));
  v15 = &selRef_stopAnimating;
  if ((v19 & 1) != 0)
    v15 = &selRef_startAnimating;
  return (char *)objc_msgSend(v1, *v15);
}

id sub_23BD0B11C()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_init);
  objc_msgSend(v0, sel_setContentMode_, 1);
  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  ImageSequenceView.updateUIView(_:context:)(v0);
  return v0;
}

uint64_t sub_23BD0B1D4()
{
  return sub_23BD45558();
}

uint64_t sub_23BD0B214()
{
  sub_23BD0B738();
  return sub_23BD455B8();
}

uint64_t sub_23BD0B264()
{
  sub_23BD0B738();
  return sub_23BD45564();
}

void sub_23BD0B2B4()
{
  sub_23BD0B738();
  sub_23BD455AC();
  __break(1u);
}

void sub_23BD0B2D8(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  v5 = *a3;
  v6 = (void *)a3[4];
  v7 = objc_opt_self();
  v8 = *(_QWORD *)(v5 + 16);
  v9 = v8 - a1;
  if (v8 <= a1)
  {
LABEL_11:
    __break(1u);
  }
  else
  {
    v10 = (void *)v7;
    v11 = a2 - a1;
    v12 = v5 + 16 * a1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v13 = v6;
      v14 = (void *)sub_23BD4575C();
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v10, sel_imageNamed_inBundle_withConfiguration_, v14, v13, 0);

      if (v15)
      {
        MEMORY[0x2426107D8]();
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_23BD457EC();
        sub_23BD457F8();
        sub_23BD457E0();
      }
      if (!v11)
        break;
      v12 += 16;
      --v11;
      if (!--v9)
        goto LABEL_11;
    }
  }
}

uint64_t sub_23BD0B42C(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23BD0B460(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  return a1;
}

unint64_t sub_23BD0B490()
{
  unint64_t result;

  result = qword_256AA1EB0;
  if (!qword_256AA1EB0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256AA1EB0);
  }
  return result;
}

unint64_t sub_23BD0B4D0()
{
  unint64_t result;

  result = qword_256AA1EB8;
  if (!qword_256AA1EB8)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageSequenceView, &type metadata for ImageSequenceView);
    atomic_store(result, (unint64_t *)&qword_256AA1EB8);
  }
  return result;
}

uint64_t sub_23BD0B514()
{
  return MEMORY[0x24BDF5560];
}

void destroy for ImageSequenceView(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ImageSequenceView(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ImageSequenceView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ImageSequenceView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageSequenceView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageSequenceView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageSequenceView()
{
  return &type metadata for ImageSequenceView;
}

unint64_t sub_23BD0B738()
{
  unint64_t result;

  result = qword_256AA1EC0;
  if (!qword_256AA1EC0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageSequenceView, &type metadata for ImageSequenceView);
    atomic_store(result, (unint64_t *)&qword_256AA1EC0);
  }
  return result;
}

uint64_t DynamicImageAssetEnvironment.init(fetchRemoteImageData:queryRemoteImageURLBestMatches:reportFailedRemoteURL:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetEnvironment()
{
  return &type metadata for DynamicImageAssetEnvironment;
}

uint64_t DynamicPredicateLogicalDescriptor.makePredicateExpression<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];

  v9 = sub_23BD4539C();
  v10 = sub_23BD453A8();
  DynamicPredicateDescriptor.makePredicateExpression<A>(using:)(a1, v10, a2, a3, (uint64_t)v15);
  result = swift_release();
  if (!v4)
  {
    v12 = sub_23BD453B4();
    DynamicPredicateDescriptor.makePredicateExpression<A>(using:)(a1, v12, a2, a3, (uint64_t)v14);
    swift_release();
    a4[3] = (uint64_t)&type metadata for ArtworkPredicateLogicalOperation;
    a4[4] = (uint64_t)&protocol witness table for ArtworkPredicateLogicalOperation;
    v13 = swift_allocObject();
    *a4 = v13;
    sub_23BD0B8FC((uint64_t)v15, v13 + 16);
    sub_23BD0B8FC((uint64_t)v14, v13 + 56);
    *(_BYTE *)(v13 + 96) = v9 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return result;
}

uint64_t sub_23BD0B8D0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t sub_23BD0B8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23BD0B940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return DynamicPredicateLogicalDescriptor.makePredicateExpression<A>(using:)(a1, a2, a3, a4);
}

uint64_t sub_23BD0B954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t result;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL8 v32;
  double v33;
  double v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v43 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v38 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1560);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (_OWORD *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v11);
  v16 = (double *)((char *)&v38 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v17 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v41 = (unint64_t)(v18 + 63) >> 6;
  v42 = 0;
  v39 = v41 - 1;
  while (1)
  {
    if (v20)
    {
      v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v22 = v21 | (v42 << 6);
LABEL_8:
      v23 = *(_QWORD *)(a1 + 56);
      *v13 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v22);
      v24 = v23 + *(_QWORD *)(v43 + 72) * v22;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
      sub_23BCECE9C(v24, (uint64_t)v13 + *(int *)(v25 + 48), &qword_256AA1438);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
      goto LABEL_30;
    }
    v26 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v26 < v41)
    {
      v27 = *(_QWORD *)(v40 + 8 * v26);
      if (v27)
        goto LABEL_12;
      v28 = v42 + 2;
      ++v42;
      if (v26 + 1 < v41)
      {
        v27 = *(_QWORD *)(v40 + 8 * v28);
        if (v27)
          goto LABEL_15;
        v42 = v26 + 1;
        if (v26 + 2 < v41)
        {
          v27 = *(_QWORD *)(v40 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_12;
          }
          v42 = v26 + 2;
          if (v26 + 3 < v41)
          {
            v27 = *(_QWORD *)(v40 + 8 * (v26 + 3));
            if (v27)
            {
              v26 += 3;
              goto LABEL_12;
            }
            v28 = v26 + 4;
            v42 = v26 + 3;
            if (v26 + 4 < v41)
              break;
          }
        }
      }
    }
LABEL_29:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
    v20 = 0;
LABEL_30:
    sub_23BCECF30((uint64_t)v13, (uint64_t)v16, &qword_256AA1560);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1568);
    v31 = (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v16, 1, v30);
    v32 = v31 == 1;
    if (v31 == 1)
      return v32;
    v33 = *v16;
    v34 = v16[1];
    sub_23BCECF30((uint64_t)v16 + *(int *)(v30 + 48), (uint64_t)v9, &qword_256AA1438);
    v35 = sub_23BD203EC(v33, v34);
    if ((v36 & 1) == 0)
    {
      sub_23BCEEED8((uint64_t)v9, &qword_256AA1438);
      return 0;
    }
    sub_23BCECE9C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v43 + 72) * v35, (uint64_t)v7, &qword_256AA1438);
    v37 = sub_23BD37BA0((uint64_t)v7, (uint64_t)v9);
    sub_23BCEEED8((uint64_t)v7, &qword_256AA1438);
    result = sub_23BCEEED8((uint64_t)v9, &qword_256AA1438);
    if ((v37 & 1) == 0)
      return v32;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
LABEL_15:
    v26 = v28;
LABEL_12:
    v20 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v26 << 6);
    v42 = v26;
    goto LABEL_8;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v41)
    {
      v42 = v39;
      goto LABEL_29;
    }
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_23BD0BD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int64_t v43;

  v4 = type metadata accessor for ImageAsset();
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1540);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v41 = (char *)&v36 - v10;
  v43 = 0;
  v39 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v37 = v12;
  v38 = (unint64_t)(v14 + 63) >> 6;
  v36 = v38 - 1;
  v17 = &qword_256AA1548;
  v18 = (uint64_t)v42;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v43 << 6);
LABEL_8:
      v21 = v39;
      sub_23BCF6190(*(_QWORD *)(v39 + 48) + *(_QWORD *)(v40 + 72) * v20, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v22 = *(_QWORD *)(v21 + 56);
      v23 = __swift_instantiateConcreteTypeFromMangledName(v17);
      *(_QWORD *)&v8[*(int *)(v23 + 48)] = *(_QWORD *)(v22 + 8 * v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 0, 1, v23);
      swift_bridgeObjectRetain();
      v24 = (uint64_t)v41;
      goto LABEL_30;
    }
    v25 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    v24 = (uint64_t)v41;
    if (v25 < v38)
    {
      v26 = *(_QWORD *)(v37 + 8 * v25);
      if (v26)
        goto LABEL_12;
      v27 = v43 + 2;
      ++v43;
      if (v25 + 1 < v38)
      {
        v26 = *(_QWORD *)(v37 + 8 * v27);
        if (v26)
          goto LABEL_15;
        v43 = v25 + 1;
        if (v25 + 2 < v38)
        {
          v26 = *(_QWORD *)(v37 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_12;
          }
          v43 = v25 + 2;
          if (v25 + 3 < v38)
          {
            v26 = *(_QWORD *)(v37 + 8 * (v25 + 3));
            if (v26)
            {
              v25 += 3;
              goto LABEL_12;
            }
            v27 = v25 + 4;
            v43 = v25 + 3;
            if (v25 + 4 < v38)
              break;
          }
        }
      }
    }
LABEL_29:
    v28 = __swift_instantiateConcreteTypeFromMangledName(v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
    v16 = 0;
LABEL_30:
    sub_23BCECF30((uint64_t)v8, v24, &qword_256AA1540);
    v29 = v17;
    v30 = __swift_instantiateConcreteTypeFromMangledName(v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v24, 1, v30) == 1)
      return;
    v31 = *(int *)(v30 + 48);
    sub_23BCFC424(v24, v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v32 = *(_QWORD *)(v24 + v31);
    sub_23BD2044C(v18);
    LOBYTE(v31) = v33;
    sub_23BCF56E0(v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    if ((v31 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v34 = swift_bridgeObjectRetain();
    v35 = sub_23BD0B954(v34, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v29;
    if ((v35 & 1) == 0)
      return;
  }
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_15:
    v25 = v27;
LABEL_12:
    v16 = (v26 - 1) & v26;
    v20 = __clz(__rbit64(v26)) + (v25 << 6);
    v43 = v25;
    goto LABEL_8;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v38)
    {
      v43 = v36;
      goto LABEL_29;
    }
    v26 = *(_QWORD *)(v37 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
}

uint64_t DynamicImageAssetState.layoutEnvironment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BCECE9C(v1, a1, &qword_256AA1EC8);
}

uint64_t DynamicImageAssetState.layoutEnvironment.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD0C2AC(a1, v1, &qword_256AA1EC8);
}

uint64_t (*DynamicImageAssetState.layoutEnvironment.modify())()
{
  return nullsub_1;
}

uint64_t DynamicImageAssetState.loadStateRegistryByAsset.getter()
{
  type metadata accessor for DynamicImageAssetState();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for DynamicImageAssetState()
{
  uint64_t result;

  result = qword_256AA1F80;
  if (!qword_256AA1F80)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DynamicImageAssetState.loadStateRegistryByAsset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DynamicImageAssetState() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*DynamicImageAssetState.loadStateRegistryByAsset.modify())()
{
  type metadata accessor for DynamicImageAssetState();
  return nullsub_1;
}

uint64_t DynamicImageAssetState.preferredImageAsset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DynamicImageAssetState();
  return sub_23BCECE9C(v1 + *(int *)(v3 + 24), a1, &qword_256AA1400);
}

uint64_t DynamicImageAssetState.preferredImageAsset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DynamicImageAssetState();
  return sub_23BD0C2AC(a1, v1 + *(int *)(v3 + 24), &qword_256AA1400);
}

uint64_t sub_23BD0C2AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*DynamicImageAssetState.preferredImageAsset.modify())()
{
  type metadata accessor for DynamicImageAssetState();
  return nullsub_1;
}

uint64_t DynamicImageAssetState.init(descriptor:displayScale:layoutEnvironment:loadStateRegistryByAsset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v10 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  v11 = (int *)type metadata accessor for DynamicImageAssetState();
  v12 = a4 + v11[6];
  v13 = type metadata accessor for ImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a4 + v11[7];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a1, v15);
  *(double *)(a4 + v11[8]) = a5;
  result = sub_23BD0C2AC(a2, a4, &qword_256AA1EC8);
  *(_QWORD *)(a4 + v11[5]) = a3;
  return result;
}

uint64_t sub_23BD0C408(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD0C440 + 4 * byte_23BD488B0[a1]))(0xD000000000000011, 0x800000023BD4BBE0);
}

uint64_t sub_23BD0C440(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_23BD0C468()
{
  return 0x7470697263736564;
}

uint64_t sub_23BD0C484()
{
  return 0x5379616C70736964;
}

uint64_t sub_23BD0C4A4()
{
  unsigned __int8 *v0;

  return sub_23BD0C408(*v0);
}

uint64_t sub_23BD0C4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD0F16C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD0C4D0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23BD0C4DC()
{
  sub_23BD0C7B4();
  return sub_23BD45C0C();
}

uint64_t sub_23BD0C504()
{
  sub_23BD0C7B4();
  return sub_23BD45C18();
}

uint64_t DynamicImageAssetState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD0C7B4();
  sub_23BD45BF4();
  LOBYTE(v13) = 0;
  type metadata accessor for DynamicArtworkLayoutEnvironment();
  sub_23BCEEF14(&qword_256AA1760, (uint64_t (*)(uint64_t))type metadata accessor for DynamicArtworkLayoutEnvironment, (uint64_t)&protocol conformance descriptor for DynamicArtworkLayoutEnvironment);
  sub_23BD45AD4();
  if (!v2)
  {
    v9 = type metadata accessor for DynamicImageAssetState();
    v13 = *(_QWORD *)(v3 + *(int *)(v9 + 20));
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EE8);
    sub_23BD0C7F8();
    sub_23BD45AF8();
    LOBYTE(v13) = 2;
    type metadata accessor for ImageAsset();
    sub_23BCEEF14(&qword_256AA1448, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    sub_23BD45AD4();
    LOBYTE(v13) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
    sub_23BCF9568(&qword_256AA1EF8, &qword_256AA1ED0, MEMORY[0x24BE350B8]);
    sub_23BD45AF8();
    v13 = *(_QWORD *)(v3 + *(int *)(v9 + 32));
    v12 = 4;
    sub_23BCF33D0();
    sub_23BD45AF8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BD0C7B4()
{
  unint64_t result;

  result = qword_256AA1EE0;
  if (!qword_256AA1EE0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48A7C, &type metadata for DynamicImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1EE0);
  }
  return result;
}

unint64_t sub_23BD0C7F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1EF0;
  if (!qword_256AA1EF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1EE8);
    v2[0] = sub_23BCEEF14(&qword_256AA1448, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    v2[1] = sub_23BCF333C();
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1EF0);
  }
  return result;
}

uint64_t DynamicImageAssetState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v8);
  v34 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1F00);
  v10 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DynamicImageAssetState();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v40 = v15;
  v41 = v13;
  v17 = (uint64_t)&v15[*(int *)(v13 + 24)];
  v18 = type metadata accessor for ImageAsset();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v38 = v17;
  v19(v17, 1, 1, v18);
  v20 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BD0C7B4();
  v21 = v42;
  sub_23BD45BE8();
  if (v21)
  {
    v24 = v38;
    v25 = (uint64_t)v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    sub_23BCEEED8(v25, &qword_256AA1EC8);
    return sub_23BCEEED8(v24, &qword_256AA1400);
  }
  else
  {
    v42 = v7;
    v22 = v10;
    LOBYTE(v44) = 0;
    sub_23BCEEF14(&qword_256AA1810, (uint64_t (*)(uint64_t))type metadata accessor for DynamicArtworkLayoutEnvironment, (uint64_t)&protocol conformance descriptor for DynamicArtworkLayoutEnvironment);
    v23 = (uint64_t)v34;
    sub_23BD45A80();
    v26 = (uint64_t)v40;
    sub_23BD0C2AC(v23, (uint64_t)v40, &qword_256AA1EC8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EE8);
    v43 = 1;
    sub_23BD0CDA4();
    sub_23BD45AA4();
    v27 = v41;
    *(_QWORD *)(v26 + *(int *)(v41 + 20)) = v44;
    LOBYTE(v44) = 2;
    sub_23BCEEF14(&qword_256AA1478, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    v28 = (uint64_t)v42;
    sub_23BD45A80();
    sub_23BD0C2AC(v28, v38, &qword_256AA1400);
    LOBYTE(v44) = 3;
    sub_23BCF9568(&qword_256AA1F10, &qword_256AA1ED0, MEMORY[0x24BE350D0]);
    v29 = v33;
    v30 = v36;
    sub_23BD45AA4();
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v26 + *(int *)(v27 + 28), v29, v30);
    v43 = 4;
    sub_23BCF37EC();
    sub_23BD45AA4();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v37);
    *(_QWORD *)(v26 + *(int *)(v27 + 32)) = v44;
    sub_23BCF6190(v26, v32, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetState);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return sub_23BCF56E0(v26, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetState);
  }
}

unint64_t sub_23BD0CDA4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AA1F08;
  if (!qword_256AA1F08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA1EE8);
    v2[0] = sub_23BCEEF14(&qword_256AA1478, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
    v2[1] = sub_23BCF3714();
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AA1F08);
  }
  return result;
}

uint64_t sub_23BD0CE28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicImageAssetState.init(from:)(a1, a2);
}

uint64_t sub_23BD0CE3C(_QWORD *a1)
{
  return DynamicImageAssetState.encode(to:)(a1);
}

uint64_t DynamicImageAssetState.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v2, (uint64_t)v10, &qword_256AA1EC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    sub_23BCFC424((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    sub_23BD45BA0();
    DynamicArtworkLayoutEnvironment.hash(into:)();
    sub_23BCF56E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  }
  v11 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for DynamicImageAssetState() + 20));
  swift_bridgeObjectRetain();
  sub_23BCF4440(a1, v11);
  swift_bridgeObjectRelease();
  sub_23BCF3A58(a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  sub_23BCF9568(&qword_256AA1F18, &qword_256AA1ED0, MEMORY[0x24BE350C0]);
  sub_23BD45714();
  return sub_23BD45BAC();
}

uint64_t DynamicImageAssetState.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetState.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD0D054()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetState.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD0D094()
{
  _BYTE v1[72];

  sub_23BD45B88();
  DynamicImageAssetState.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

BOOL _s12FitnessAsset012DynamicImageB5StateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  char v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v51 = type metadata accessor for ImageAsset();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v46 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1550);
  MEMORY[0x24BDAC7A8](v48);
  v52 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v53 = (uint64_t)&v46 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v50 = (uint64_t)&v46 - v10;
  v11 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1FF8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v46 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v46 - v25;
  v54 = a1;
  sub_23BCECE9C(a1, (uint64_t)&v46 - v25, &qword_256AA1EC8);
  sub_23BCECE9C(v55, (uint64_t)v23, &qword_256AA1EC8);
  v27 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_23BCECE9C((uint64_t)v26, (uint64_t)v17, &qword_256AA1EC8);
  sub_23BCECE9C((uint64_t)v23, v27, &qword_256AA1EC8);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v28((uint64_t)v17, 1, v11) == 1)
  {
    sub_23BCEEED8((uint64_t)v23, &qword_256AA1EC8);
    sub_23BCEEED8((uint64_t)v26, &qword_256AA1EC8);
    if (v28(v27, 1, v11) == 1)
    {
      sub_23BCEEED8((uint64_t)v17, &qword_256AA1EC8);
      goto LABEL_9;
    }
LABEL_6:
    v29 = &qword_256AA1FF8;
    v30 = (uint64_t)v17;
LABEL_7:
    sub_23BCEEED8(v30, v29);
    return 0;
  }
  sub_23BCECE9C((uint64_t)v17, (uint64_t)v20, &qword_256AA1EC8);
  if (v28(v27, 1, v11) == 1)
  {
    sub_23BCEEED8((uint64_t)v23, &qword_256AA1EC8);
    sub_23BCEEED8((uint64_t)v26, &qword_256AA1EC8);
    sub_23BCF56E0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    goto LABEL_6;
  }
  sub_23BCFC424(v27, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  v31 = _s12FitnessAsset31DynamicArtworkLayoutEnvironmentV2eeoiySbAC_ACtFZ_0((uint64_t)v20, (uint64_t)v14);
  sub_23BCF56E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  sub_23BCEEED8((uint64_t)v23, &qword_256AA1EC8);
  sub_23BCEEED8((uint64_t)v26, &qword_256AA1EC8);
  sub_23BCF56E0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  sub_23BCEEED8((uint64_t)v17, &qword_256AA1EC8);
  if ((v31 & 1) == 0)
    return 0;
LABEL_9:
  v32 = (int *)type metadata accessor for DynamicImageAssetState();
  v34 = v54;
  v33 = v55;
  sub_23BD0BD4C(*(_QWORD *)(v54 + v32[5]), *(_QWORD *)(v55 + v32[5]));
  if ((v35 & 1) == 0)
    return 0;
  v36 = v50;
  sub_23BCECE9C(v34 + v32[6], v50, &qword_256AA1400);
  v37 = v53;
  sub_23BCECE9C(v33 + v32[6], v53, &qword_256AA1400);
  v38 = v52;
  v39 = v52 + *(int *)(v48 + 48);
  sub_23BCECE9C(v36, v52, &qword_256AA1400);
  sub_23BCECE9C(v37, v39, &qword_256AA1400);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v41 = v51;
  if (v40(v38, 1, v51) != 1)
  {
    v42 = v47;
    sub_23BCECE9C(v38, v47, &qword_256AA1400);
    if (v40(v39, 1, v41) != 1)
    {
      v43 = v46;
      sub_23BCFC424(v39, v46, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v44 = _s12FitnessAsset05ImageB0V2eeoiySbAC_ACtFZ_0(v42, v43);
      sub_23BCF56E0(v43, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      sub_23BCEEED8(v53, &qword_256AA1400);
      sub_23BCEEED8(v36, &qword_256AA1400);
      sub_23BCF56E0(v42, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      sub_23BCEEED8(v38, &qword_256AA1400);
      if (!v44)
        return 0;
      goto LABEL_17;
    }
    sub_23BCEEED8(v53, &qword_256AA1400);
    sub_23BCEEED8(v36, &qword_256AA1400);
    sub_23BCF56E0(v42, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    goto LABEL_15;
  }
  sub_23BCEEED8(v37, &qword_256AA1400);
  sub_23BCEEED8(v36, &qword_256AA1400);
  if (v40(v39, 1, v41) != 1)
  {
LABEL_15:
    v29 = &qword_256AA1550;
    v30 = v38;
    goto LABEL_7;
  }
  sub_23BCEEED8(v38, &qword_256AA1400);
LABEL_17:
  type metadata accessor for Artwork();
  sub_23BCEEF14(qword_256AA1FA0, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  if ((sub_23BD45264() & 1) != 0)
    return *(double *)(v34 + v32[8]) == *(double *)(v33 + v32[8]);
  return 0;
}

uint64_t sub_23BD0D6D0()
{
  return sub_23BCEEF14(&qword_256AA1F20, (uint64_t (*)(uint64_t))type metadata accessor for DynamicImageAssetState, (uint64_t)&protocol conformance descriptor for DynamicImageAssetState);
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicImageAssetState(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, int *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *__dst;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v11 = v7[6];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_23BD452AC();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      v15((char *)a1 + v7[8], (char *)a2 + v7[8], v14);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
    }
    v16 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = (int *)type metadata accessor for ImageAsset();
    v20 = *((_QWORD *)v19 - 1);
    v21 = *(unsigned int (**)(char *, uint64_t, int *))(v20 + 48);
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23BD451F8();
      v24 = *(_QWORD *)(v23 - 8);
      v42 = v20;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v18, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v17, v18, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v17, 0, 1, v23);
      }
      v26 = v19[5];
      v27 = &v17[v26];
      v28 = &v18[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v17[v19[6]] = v18[v19[6]];
      v30 = v19[7];
      __dst = &v17[v30];
      v31 = &v18[v30];
      v32 = sub_23BD4515C();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v42 + 56))(v17, 0, 1, v19);
    }
    v36 = a3[7];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t destroy for DynamicImageAssetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = a1 + *(int *)(v4 + 24);
    v6 = sub_23BD452AC();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(a1 + *(int *)(v4 + 32), v6);
  }
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for ImageAsset();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = sub_23BD451F8();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
    swift_bridgeObjectRelease();
    v12 = v8 + *(int *)(v9 + 28);
    v13 = sub_23BD4515C();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  v15 = a1 + *(int *)(a2 + 28);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

_WORD *initializeWithCopy for DynamicImageAssetState(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, int *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *__dst;
  uint64_t v40;

  v6 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23BD452AC();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    v13((char *)a1 + v6[8], (char *)a2 + v6[8], v12);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for ImageAsset();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23BD451F8();
    v22 = *(_QWORD *)(v21 - 8);
    v40 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v15, v16, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v15, 0, 1, v21);
    }
    v24 = v17[5];
    v25 = &v15[v24];
    v26 = &v16[v24];
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v15[v17[6]] = v16[v17[6]];
    v28 = v17[7];
    __dst = &v15[v28];
    v29 = &v16[v28];
    v30 = sub_23BD4515C();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56))(v15, 0, 1, v17);
  }
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_BYTE *assignWithCopy for DynamicImageAssetState(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_BYTE *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  char *__dst;
  int *v68;

  v6 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v11 = v6[6];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_23BD452AC();
      v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      a1[v6[7]] = a2[v6[7]];
      v15(&a1[v6[8]], &a2[v6[8]], v14);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v31 = v6[6];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = sub_23BD452AC();
  v35 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 24);
  v35(v32, v33, v34);
  a1[v6[7]] = a2[v6[7]];
  v35(&a1[v6[8]], &a2[v6[8]], v34);
LABEL_7:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = (int *)type metadata accessor for ImageAsset();
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      sub_23BCF56E0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      goto LABEL_13;
    }
    v36 = sub_23BD451F8();
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48);
    v39 = v38(v18, 1, v36);
    v40 = v38(v19, 1, v36);
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 16))(v18, v19, v36);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v18, 0, 1, v36);
LABEL_28:
        v56 = v20[5];
        v57 = &v18[v56];
        v58 = &v19[v56];
        *v57 = *v58;
        v57[1] = v58[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v18[v20[6]] = v19[v20[6]];
        v59 = v20[7];
        v60 = &v18[v59];
        v61 = &v19[v59];
        v62 = sub_23BD4515C();
        v63 = *(_QWORD *)(v62 - 8);
        v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
        v65 = v64(v60, 1, v62);
        v66 = v64(v61, 1, v62);
        if (v65)
        {
          if (!v66)
          {
            (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v66)
          {
            (*(void (**)(char *, char *, uint64_t))(v63 + 24))(v60, v61, v62);
            goto LABEL_24;
          }
          (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8) - 8) + 64);
        v29 = v60;
        v30 = v61;
        goto LABEL_14;
      }
    }
    else
    {
      if (!v40)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 24))(v18, v19, v36);
        goto LABEL_28;
      }
      (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v18, v36);
    }
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_28;
  }
  if (v24)
  {
LABEL_13:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400) - 8) + 64);
    v29 = v18;
    v30 = v19;
LABEL_14:
    memcpy(v29, v30, v28);
    goto LABEL_24;
  }
  v25 = sub_23BD451F8();
  v26 = *(_QWORD *)(v25 - 8);
  v68 = a3;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 16))(v18, v19, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v25);
  }
  v41 = v20[5];
  v42 = &v18[v41];
  v43 = &v19[v41];
  *v42 = *v43;
  v42[1] = v43[1];
  v18[v20[6]] = v19[v20[6]];
  v44 = v20[7];
  __dst = &v18[v44];
  v45 = &v19[v44];
  v46 = sub_23BD4515C();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
  }
  a3 = v68;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_24:
  v50 = a3[7];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

_WORD *initializeWithTake for DynamicImageAssetState(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23BD452AC();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    v13((char *)a1 + v6[8], (char *)a2 + v6[8], v12);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for ImageAsset();
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23BD451F8();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v15, v16, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, v20);
    }
    *(_OWORD *)&v15[v17[5]] = *(_OWORD *)&v16[v17[5]];
    v15[v17[6]] = v16[v17[6]];
    v23 = v17[7];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = sub_23BD4515C();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v29 = a3[7];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_WORD *assignWithTake for DynamicImageAssetState(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_WORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_BYTE *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  int v64;
  int v65;

  v6 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_WORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v11 = v6[6];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_23BD452AC();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
      v15((char *)a1 + v6[8], (char *)a2 + v6[8], v14);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v31 = v6[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_23BD452AC();
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40);
  v35(v32, v33, v34);
  *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
  v35((char *)a1 + v6[8], (char *)a2 + v6[8], v34);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = (int *)type metadata accessor for ImageAsset();
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      sub_23BCF56E0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      goto LABEL_13;
    }
    v36 = sub_23BD451F8();
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48);
    v39 = v38(v18, 1, v36);
    v40 = v38(v19, 1, v36);
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32))(v18, v19, v36);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v18, 0, 1, v36);
LABEL_28:
        v53 = v20[5];
        v54 = &v18[v53];
        v55 = (uint64_t *)&v19[v53];
        v57 = *v55;
        v56 = v55[1];
        *v54 = v57;
        v54[1] = v56;
        swift_bridgeObjectRelease();
        v18[v20[6]] = v19[v20[6]];
        v58 = v20[7];
        v59 = &v18[v58];
        v60 = &v19[v58];
        v61 = sub_23BD4515C();
        v62 = *(_QWORD *)(v61 - 8);
        v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
        v64 = v63(v59, 1, v61);
        v65 = v63(v60, 1, v61);
        if (v64)
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
            goto LABEL_24;
          }
          (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8) - 8) + 64);
        v29 = v59;
        v30 = v60;
        goto LABEL_14;
      }
    }
    else
    {
      if (!v40)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 40))(v18, v19, v36);
        goto LABEL_28;
      }
      (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v18, v36);
    }
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_28;
  }
  if (v24)
  {
LABEL_13:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400) - 8) + 64);
    v29 = v18;
    v30 = v19;
LABEL_14:
    memcpy(v29, v30, v28);
    goto LABEL_24;
  }
  v25 = sub_23BD451F8();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v18, v19, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v25);
  }
  *(_OWORD *)&v18[v20[5]] = *(_OWORD *)&v19[v20[5]];
  v18[v20[6]] = v19[v20[6]];
  v41 = v20[7];
  v42 = &v18[v41];
  v43 = &v19[v41];
  v44 = sub_23BD4515C();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_24:
  v47 = a3[7];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD0EC30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[7];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD0ED14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23BD0EDE8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23BCEEB88(319, &qword_256AA1F90, (void (*)(uint64_t))type metadata accessor for DynamicArtworkLayoutEnvironment);
  if (v0 <= 0x3F)
  {
    sub_23BCEEB88(319, (unint64_t *)&qword_256AA14F0, (void (*)(uint64_t))type metadata accessor for ImageAsset);
    if (v1 <= 0x3F)
    {
      sub_23BD0EEC0();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_23BD0EEC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AA1F98)
  {
    type metadata accessor for Artwork();
    sub_23BCEEF14(qword_256AA1FA0, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
    v0 = sub_23BD45270();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AA1F98);
  }
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD0F014 + 4 * byte_23BD488BA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD0F048 + 4 * byte_23BD488B5[v4]))();
}

uint64_t sub_23BD0F048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD0F050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD0F058);
  return result;
}

uint64_t sub_23BD0F064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD0F06CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD0F070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD0F078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicImageAssetState.CodingKeys()
{
  return &type metadata for DynamicImageAssetState.CodingKeys;
}

unint64_t sub_23BD0F098()
{
  unint64_t result;

  result = qword_256AA1FE0;
  if (!qword_256AA1FE0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48A54, &type metadata for DynamicImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1FE0);
  }
  return result;
}

unint64_t sub_23BD0F0E0()
{
  unint64_t result;

  result = qword_256AA1FE8;
  if (!qword_256AA1FE8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD489C4, &type metadata for DynamicImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1FE8);
  }
  return result;
}

unint64_t sub_23BD0F128()
{
  unint64_t result;

  result = qword_256AA1FF0;
  if (!qword_256AA1FF0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD489EC, &type metadata for DynamicImageAssetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA1FF0);
  }
  return result;
}

uint64_t sub_23BD0F16C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023BD4BBE0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BD4BDE0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BD4BE00 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEA0000000000726FLL || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C6163)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BD0F384@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, double a5@<X4>, int a6@<W5>, _BYTE *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  char v35;
  char *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  _BYTE *v41;
  void (*v42)(_BYTE *, char *, uint64_t);
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  _BYTE *v52;
  int v53;
  char *v54;

  v8 = v7;
  v50 = a6;
  v51 = a3;
  v44 = a5;
  v46 = a2;
  v47 = a4;
  v52 = a7;
  v53 = a1;
  v45 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2000);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v44 - v13;
  v15 = sub_23BD452AC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v54 = (char *)&v44 - v19;
  v20 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v20);
  v48 = (uint64_t)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v44 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v44 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v44 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (unsigned __int8 *)&v44 - v32;
  sub_23BD0F718(v8, (uint64_t)&v44 - v32);
  if (v45 == 13)
    v53 = *v33;
  sub_23BD0F75C((uint64_t)v33);
  sub_23BD0F798(v46, (uint64_t)v14);
  sub_23BD0F718(v8, (uint64_t)v30);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v34(v14, 1, v15) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v54, &v30[v20[6]], v15);
    sub_23BD0F75C((uint64_t)v30);
    sub_23BD0F7E0((uint64_t)v14);
  }
  else
  {
    sub_23BD0F75C((uint64_t)v30);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v54, v14, v15);
  }
  sub_23BD0F718(v8, (uint64_t)v27);
  v35 = v51;
  if (v51 == 4)
    v35 = v27[v20[7]];
  sub_23BD0F75C((uint64_t)v27);
  sub_23BD0F798(v47, (uint64_t)v11);
  sub_23BD0F718(v8, (uint64_t)v24);
  if (v34(v11, 1, v15) == 1)
  {
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, &v24[v20[8]], v15);
    sub_23BD0F75C((uint64_t)v24);
    sub_23BD0F7E0((uint64_t)v11);
  }
  else
  {
    sub_23BD0F75C((uint64_t)v24);
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v49, v11, v15);
  }
  v37 = v48;
  sub_23BD0F718(v8, v48);
  if ((v50 & 1) != 0)
  {
    sub_23BD451D4();
    v38 = v39;
  }
  else
  {
    v38 = v44;
  }
  v40 = sub_23BD0F75C(v37);
  v41 = v52;
  *v52 = v53;
  v41[1] = MEMORY[0x2426101F0](v40, v38);
  v42 = *(void (**)(_BYTE *, char *, uint64_t))(v16 + 32);
  v42(&v41[v20[6]], v54, v15);
  v41[v20[7]] = v35;
  return ((uint64_t (*)(_BYTE *, char *, uint64_t))v42)(&v41[v20[8]], v36, v15);
}

uint64_t sub_23BD0F718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD0F75C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD0F798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD0F7E0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2000);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ImageAsset.backgroundColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BCECE9C(v1, a1, &qword_256AA0FE0);
}

uint64_t ImageAsset.cropCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ImageAsset() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ImageAsset.fileType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ImageAsset();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t ImageAsset.templateURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ImageAsset();
  return sub_23BCECE9C(v1 + *(int *)(v3 + 28), a1, &qword_256AA0FE8);
}

uint64_t ImageAsset.init(backgroundColor:cropCode:fileType:templateURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  int *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v9 = *a3;
  sub_23BCECE9C(a1, a5, &qword_256AA0FE0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2008);
  sub_23BD452F4();
  sub_23BCEEED8(a2, &qword_256AA2008);
  sub_23BCEEED8(a1, &qword_256AA0FE0);
  v10 = (int *)type metadata accessor for ImageAsset();
  v11 = (_QWORD *)(a5 + v10[5]);
  *v11 = v13;
  v11[1] = v14;
  *(_BYTE *)(a5 + v10[6]) = v9;
  return sub_23BCECF30(a4, a5 + v10[7], &qword_256AA0FE8);
}

uint64_t sub_23BD0F9B8(char a1)
{
  return qword_23BD48D10[a1];
}

uint64_t sub_23BD0F9D8()
{
  char *v0;

  return sub_23BD0F9B8(*v0);
}

uint64_t sub_23BD0F9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD12024(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD0FA04()
{
  sub_23BD11200();
  return sub_23BD45C0C();
}

uint64_t sub_23BD0FA2C()
{
  sub_23BD11200();
  return sub_23BD45C18();
}

uint64_t ImageAsset.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2010);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD11200();
  sub_23BD45BF4();
  v11[15] = 0;
  sub_23BD451F8();
  sub_23BCEEF14(&qword_256AA1000, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB0]);
  sub_23BD45AD4();
  if (!v2)
  {
    v9 = type metadata accessor for ImageAsset();
    v11[14] = 1;
    sub_23BD45AE0();
    v11[13] = *(_BYTE *)(v3 + *(int *)(v9 + 24));
    v11[12] = 2;
    sub_23BD11244();
    sub_23BD45AF8();
    v11[11] = 3;
    sub_23BD4515C();
    sub_23BCEEF14(&qword_256AA1008, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23BD45AD4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ImageAsset.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v25 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2028);
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (int *)type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BD11200();
  v13 = v29;
  sub_23BD45BE8();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = v5;
  v14 = (uint64_t)v11;
  sub_23BD451F8();
  v34 = 0;
  sub_23BCEEF14(&qword_256AA1018, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC8]);
  v15 = v26;
  v16 = v27;
  sub_23BD45A80();
  v17 = (uint64_t)v15;
  v18 = v14;
  sub_23BCECF30(v17, v14, &qword_256AA0FE0);
  v33 = 1;
  v19 = sub_23BD45A8C();
  v20 = (uint64_t *)(v14 + v9[5]);
  *v20 = v19;
  v20[1] = v21;
  v31 = 2;
  sub_23BD11288();
  sub_23BD45AA4();
  *(_BYTE *)(v14 + v9[6]) = v32;
  sub_23BD4515C();
  v30 = 3;
  sub_23BCEEF14(&qword_256AA1020, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v22 = (uint64_t)v29;
  sub_23BD45A80();
  (*(void (**)(_QWORD, uint64_t))(v8 + 8))(0, v16);
  sub_23BCECF30(v22, v18 + v9[7], &qword_256AA0FE8);
  sub_23BD112CC(v18, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return sub_23BD11310(v18);
}

uint64_t sub_23BD0FFD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImageAsset.init(from:)(a1, a2);
}

uint64_t sub_23BD0FFEC(_QWORD *a1)
{
  return ImageAsset.encode(to:)(a1);
}

uint64_t ImageAsset.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  char *v19;

  v1 = v0;
  v2 = sub_23BD4515C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BD451F8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v1, (uint64_t)v14, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v15 = type metadata accessor for ImageAsset();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v1 + *(int *)(v15 + 28), (uint64_t)v7, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
    return sub_23BD45BA0();
  v17 = v19;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v19, v7, v2);
  sub_23BD45BA0();
  sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BD45714();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v17, v2);
}

uint64_t ImageAsset.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_23BD4515C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD451F8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45B88();
  sub_23BCECE9C(v1, (uint64_t)v15, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v1 + *(int *)(v16 + 28), (uint64_t)v8, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_23BD45BB8();
}

uint64_t sub_23BD105AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = v2;
  v5 = sub_23BD4515C();
  v21 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v20 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BD451F8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v4, (uint64_t)v16, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v4 + *(int *)(a2 + 28), (uint64_t)v9, &qword_256AA0FE8);
  v17 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v5) == 1)
    return sub_23BD45BA0();
  v19 = v20;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v9, v5);
  sub_23BD45BA0();
  sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23BD45714();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v5);
}

uint64_t sub_23BD10870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = sub_23BD4515C();
  v21 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD451F8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45B88();
  sub_23BCECE9C(v2, (uint64_t)v15, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v2 + *(int *)(a2 + 28), (uint64_t)v8, &qword_256AA0FE8);
  v16 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v8, v4);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v4);
  }
  return sub_23BD45BB8();
}

BOOL _s12FitnessAsset05ImageB0V2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  _BOOL8 result;
  char v32;
  void (*v33)(char *, uint64_t);
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  v68 = a2;
  v65 = sub_23BD4515C();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v59 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1118);
  MEMORY[0x24BDAC7A8](v61);
  v64 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v60 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (char *)&v59 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v62 = (uint64_t)&v59 - v10;
  v11 = sub_23BD451F8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1120);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v59 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v59 - v25;
  v66 = a1;
  sub_23BCECE9C(a1, (uint64_t)&v59 - v25, &qword_256AA0FE0);
  sub_23BCECE9C(v68, (uint64_t)v23, &qword_256AA0FE0);
  v27 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_23BCECE9C((uint64_t)v26, (uint64_t)v17, &qword_256AA0FE0);
  sub_23BCECE9C((uint64_t)v23, v27, &qword_256AA0FE0);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v28((uint64_t)v17, 1, v11) == 1)
  {
    sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
    sub_23BCEEED8((uint64_t)v26, &qword_256AA0FE0);
    if (v28(v27, 1, v11) == 1)
    {
      sub_23BCEEED8((uint64_t)v17, &qword_256AA0FE0);
      goto LABEL_11;
    }
LABEL_6:
    v29 = &qword_256AA1120;
    v30 = (uint64_t)v17;
LABEL_7:
    sub_23BCEEED8(v30, v29);
    return 0;
  }
  sub_23BCECE9C((uint64_t)v17, (uint64_t)v20, &qword_256AA0FE0);
  if (v28(v27, 1, v11) == 1)
  {
    sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
    sub_23BCEEED8((uint64_t)v26, &qword_256AA0FE0);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v27, v11);
  sub_23BCEEF14(&qword_256AA1130, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC0]);
  v32 = sub_23BD45750();
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v14, v11);
  sub_23BCEEED8((uint64_t)v23, &qword_256AA0FE0);
  sub_23BCEEED8((uint64_t)v26, &qword_256AA0FE0);
  v33(v20, v11);
  sub_23BCEEED8((uint64_t)v17, &qword_256AA0FE0);
  if ((v32 & 1) == 0)
    return 0;
LABEL_11:
  v34 = (int *)type metadata accessor for ImageAsset();
  v35 = v34[5];
  v36 = v66;
  v37 = (uint64_t)v67;
  v38 = *(_QWORD *)(v66 + v35);
  v39 = *(_QWORD *)(v66 + v35 + 8);
  v40 = v68;
  v41 = (_QWORD *)(v68 + v35);
  if (v38 == *v41 && v39 == v41[1] || (v42 = sub_23BD45B1C(), result = 0, (v42 & 1) != 0))
  {
    v43 = v34[6];
    v44 = *(unsigned __int8 *)(v36 + v43);
    v45 = *(unsigned __int8 *)(v40 + v43);
    if (v44)
      v46 = 6778986;
    else
      v46 = 6778480;
    if (v45)
      v47 = 6778986;
    else
      v47 = 6778480;
    if (v46 == v47)
    {
      swift_bridgeObjectRelease_n();
LABEL_23:
      v49 = v62;
      sub_23BCECE9C(v36 + v34[7], v62, &qword_256AA0FE8);
      sub_23BCECE9C(v40 + v34[7], v37, &qword_256AA0FE8);
      v50 = v64;
      v51 = v64 + *(int *)(v61 + 48);
      sub_23BCECE9C(v49, v64, &qword_256AA0FE8);
      sub_23BCECE9C(v37, v51, &qword_256AA0FE8);
      v52 = v63;
      v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      v54 = v65;
      if (v53(v50, 1, v65) == 1)
      {
        sub_23BCEEED8(v37, &qword_256AA0FE8);
        sub_23BCEEED8(v49, &qword_256AA0FE8);
        if (v53(v51, 1, v54) == 1)
        {
          sub_23BCEEED8(v50, &qword_256AA0FE8);
          return 1;
        }
      }
      else
      {
        v55 = v60;
        sub_23BCECE9C(v50, v60, &qword_256AA0FE8);
        if (v53(v51, 1, v54) != 1)
        {
          v56 = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v59, v51, v54);
          sub_23BCEEF14(&qword_256AA1128, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
          v57 = sub_23BD45750();
          v58 = *(void (**)(char *, uint64_t))(v52 + 8);
          v58(v56, v54);
          sub_23BCEEED8(v37, &qword_256AA0FE8);
          sub_23BCEEED8(v49, &qword_256AA0FE8);
          v58((char *)v55, v54);
          sub_23BCEEED8(v50, &qword_256AA0FE8);
          return (v57 & 1) != 0;
        }
        sub_23BCEEED8(v37, &qword_256AA0FE8);
        sub_23BCEEED8(v49, &qword_256AA0FE8);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v55, v54);
      }
      v29 = &qword_256AA1118;
      v30 = v50;
      goto LABEL_7;
    }
    v48 = sub_23BD45B1C();
    swift_bridgeObjectRelease_n();
    result = 0;
    if ((v48 & 1) != 0)
      goto LABEL_23;
  }
  return result;
}

uint64_t type metadata accessor for ImageAsset()
{
  uint64_t result;

  result = qword_256AA2098;
  if (!qword_256AA2098)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD11200()
{
  unint64_t result;

  result = qword_256AA2018;
  if (!qword_256AA2018)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48CBC, &type metadata for ImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2018);
  }
  return result;
}

unint64_t sub_23BD11244()
{
  unint64_t result;

  result = qword_256AA2020;
  if (!qword_256AA2020)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for FileType, &type metadata for FileType);
    atomic_store(result, (unint64_t *)&qword_256AA2020);
  }
  return result;
}

unint64_t sub_23BD11288()
{
  unint64_t result;

  result = qword_256AA2030;
  if (!qword_256AA2030)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for FileType, &type metadata for FileType);
    atomic_store(result, (unint64_t *)&qword_256AA2030);
  }
  return result;
}

uint64_t sub_23BD112CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD11310(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImageAsset();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD1134C()
{
  return sub_23BCEEF14(&qword_256AA2038, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
}

uint64_t *initializeBufferWithCopyOfBuffer for ImageAsset(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = *v14;
    v16 = v14[1];
    LOBYTE(v14) = *((_BYTE *)a2 + v12);
    *v13 = v15;
    v13[1] = v16;
    *((_BYTE *)a1 + v12) = (_BYTE)v14;
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_23BD4515C();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for ImageAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_23BD451F8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  v7 = sub_23BD4515C();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for ImageAsset(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *(_QWORD *)v12;
  v14 = *((_QWORD *)v12 + 1);
  LOBYTE(v12) = a2[v10];
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v14;
  a1[v10] = (char)v12;
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_23BD4515C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

char *assignWithCopy for ImageAsset(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[6]] = a2[a3[6]];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_23BD4515C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

char *initializeWithTake for ImageAsset(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_23BD4515C();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

char *assignWithTake for ImageAsset(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = sub_23BD4515C();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageAsset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD11C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageAsset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD11D18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23BD11DC8()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BCEEB88(319, &qword_256AA10C0, (void (*)(uint64_t))MEMORY[0x24BE34FA0]);
  if (v0 <= 0x3F)
  {
    sub_23BCEEB88(319, qword_256AA10C8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for ImageAsset.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD11ECC + 4 * byte_23BD48AD5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD11F00 + 4 * byte_23BD48AD0[v4]))();
}

uint64_t sub_23BD11F00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD11F08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD11F10);
  return result;
}

uint64_t sub_23BD11F1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD11F24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD11F28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD11F30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageAsset.CodingKeys()
{
  return &type metadata for ImageAsset.CodingKeys;
}

unint64_t sub_23BD11F50()
{
  unint64_t result;

  result = qword_256AA20D8;
  if (!qword_256AA20D8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48C94, &type metadata for ImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA20D8);
  }
  return result;
}

unint64_t sub_23BD11F98()
{
  unint64_t result;

  result = qword_256AA20E0;
  if (!qword_256AA20E0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48C04, &type metadata for ImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA20E0);
  }
  return result;
}

unint64_t sub_23BD11FE0()
{
  unint64_t result;

  result = qword_256AA20E8;
  if (!qword_256AA20E8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48C2C, &type metadata for ImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA20E8);
  }
  return result;
}

uint64_t sub_23BD12024(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65646F43706F7263 && a2 == 0xE800000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65707954656C6966 && a2 == 0xE800000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t ImageAssetEnvironment.init(fetchRemoteImageData:queryRemoteImageURLBestMatches:reportFailedRemoteURL:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetEnvironment()
{
  return &type metadata for ImageAssetEnvironment;
}

void ImageAssetCache.insertImage(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_23BD452D0();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v11 = (void *)sub_23BD452DC();
  objc_msgSend(v10, sel_setObject_forKey_, a1, v11);

}

id ImageAssetCache.image(forKey:)(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_23BD452D0();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = (void *)sub_23BD452DC();
  v10 = objc_msgSend(v8, sel_objectForKey_, v9);

  return v10;
}

void ImageAssetCache.init(countLimit:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  __swift_instantiateConcreteTypeFromMangledName(qword_256AA20F0);
  sub_23BD452D0();
  sub_23BD0B490();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v4, sel_setCountLimit_, a1);
  objc_msgSend(v4, sel_baf_setEvictsObjectsWhenApplicationEntersBackground_, 0);

  *a2 = v4;
}

uint64_t sub_23BD12438()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for ImageAssetCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImageAssetCache);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242610F64](a1, v6, a5);
}

BOOL static FetchedImageAsset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  _BOOL4 v9;

  if (!_s12FitnessAsset05ImageB0V2eeoiySbAC_ACtFZ_0(a1, a2))
    return 0;
  v4 = *(int *)(type metadata accessor for FetchedImageAsset() + 20);
  v5 = *(double *)(a1 + v4);
  v6 = *(double *)(a1 + v4 + 8);
  v7 = (double *)(a2 + v4);
  v8 = v7[1];
  v9 = v5 == *v7;
  return v6 == v8 && v9;
}

uint64_t sub_23BD124D4()
{
  sub_23BD13588();
  return sub_23BD45C0C();
}

uint64_t sub_23BD124FC()
{
  sub_23BD13588();
  return sub_23BD45C18();
}

uint64_t FetchedImageAsset.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;

  v1 = v0;
  v2 = sub_23BD4515C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BD451F8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v1, (uint64_t)v14, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v15 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v1 + *(int *)(v15 + 28), (uint64_t)v7, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v16 = v19;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v19, v7, v2);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v2);
  }
  type metadata accessor for FetchedImageAsset();
  return sub_23BCFD2FC();
}

uint64_t FetchedImageAsset.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2178);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD13588();
  sub_23BD45BF4();
  LOBYTE(v11) = 0;
  type metadata accessor for ImageAsset();
  sub_23BCEEF14(&qword_256AA1448, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
  sub_23BD45AF8();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for FetchedImageAsset() + 20));
    v10[15] = 1;
    type metadata accessor for CGSize();
    sub_23BCEEF14(&qword_256AA1428, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    sub_23BD45AF8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FetchedImageAsset.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_23BD4515C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD451F8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45B88();
  sub_23BCECE9C(v1, (uint64_t)v15, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v1 + *(int *)(v16 + 28), (uint64_t)v8, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  type metadata accessor for FetchedImageAsset();
  sub_23BCFD2FC();
  return sub_23BD45BB8();
}

uint64_t FetchedImageAsset.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  v18 = a2;
  v19 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v19);
  v20 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2188);
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD13588();
  sub_23BD45BE8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = v8;
  v11 = (uint64_t)v10;
  LOBYTE(v22) = 0;
  sub_23BCEEF14(&qword_256AA1478, (uint64_t (*)(uint64_t))type metadata accessor for ImageAsset, (uint64_t)&protocol conformance descriptor for ImageAsset);
  v12 = (uint64_t)v20;
  v13 = v21;
  sub_23BD45AA4();
  sub_23BCF61D4(v12, v11);
  type metadata accessor for CGSize();
  v23 = 1;
  sub_23BCEEF14(&qword_256AA1460, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
  sub_23BD45AA4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v18;
  *(_OWORD *)(v11 + *(int *)(v17 + 20)) = v22;
  sub_23BCF95EC(v11, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BCF56E0(v11, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
}

uint64_t sub_23BD12EEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FetchedImageAsset.init(from:)(a1, a2);
}

uint64_t sub_23BD12F00(_QWORD *a1)
{
  return FetchedImageAsset.encode(to:)(a1);
}

uint64_t sub_23BD12F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = a2;
  v3 = v2;
  v4 = sub_23BD4515C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v20[0] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BD451F8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v3, (uint64_t)v16, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v17 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v3 + *(int *)(v17 + 28), (uint64_t)v9, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v18 = v20[0];
    (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(v20[0], v9, v4);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v18, v4);
  }
  return sub_23BCFD2FC();
}

uint64_t sub_23BD131F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v22 = a2;
  v3 = v2;
  v4 = sub_23BD4515C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BD451F8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45B88();
  sub_23BCECE9C(v2, (uint64_t)v16, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v17 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(v3 + *(int *)(v17 + 28), (uint64_t)v9, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v18 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v21, v9, v4);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
  }
  sub_23BCFD2FC();
  return sub_23BD45BB8();
}

BOOL sub_23BD134EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  _BOOL4 v11;

  if ((static ImageAsset.== infix(_:_:)() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(double *)(a1 + v6);
  v8 = *(double *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9;
  return v8 == v10 && v11;
}

uint64_t type metadata accessor for FetchedImageAsset()
{
  uint64_t result;

  result = qword_256AA21F0;
  if (!qword_256AA21F0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD13588()
{
  unint64_t result;

  result = qword_256AA2180;
  if (!qword_256AA2180)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48F64, &type metadata for FetchedImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2180);
  }
  return result;
}

uint64_t sub_23BD135CC()
{
  return sub_23BCEEF14(&qword_256AA2190, (uint64_t (*)(uint64_t))type metadata accessor for FetchedImageAsset, (uint64_t)&protocol conformance descriptor for FetchedImageAsset);
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchedImageAsset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = (int *)type metadata accessor for ImageAsset();
    v12 = v11[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *((_BYTE *)a1 + v11[6]) = *((_BYTE *)a2 + v11[6]);
    v16 = v11[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_23BD4515C();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for FetchedImageAsset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = sub_23BD451F8();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  v4 = type metadata accessor for ImageAsset();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(v4 + 28);
  v6 = sub_23BD4515C();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

char *initializeWithCopy for FetchedImageAsset(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for ImageAsset();
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  a1[v9[6]] = a2[v9[6]];
  v14 = v9[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_23BD4515C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithCopy for FetchedImageAsset(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for ImageAsset();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v12[6]] = a2[v12[6]];
  v16 = v12[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_23BD4515C();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  v25 = *(int *)(a3 + 20);
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  return a1;
}

char *initializeWithTake for FetchedImageAsset(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for ImageAsset();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  a1[v9[6]] = a2[v9[6]];
  v10 = v9[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_23BD4515C();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for FetchedImageAsset(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  v6 = sub_23BD451F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for ImageAsset();
  v13 = v12[5];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  a1[v12[6]] = a2[v12[6]];
  v18 = v12[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_23BD4515C();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchedImageAsset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD13F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchedImageAsset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD13FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23BD1401C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ImageAsset();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchedImageAsset.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD140D8 + 4 * byte_23BD48DA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD1410C + 4 * byte_23BD48DA0[v4]))();
}

uint64_t sub_23BD1410C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD14114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD1411CLL);
  return result;
}

uint64_t sub_23BD14128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD14130);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD14134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD1413C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchedImageAsset.CodingKeys()
{
  return &type metadata for FetchedImageAsset.CodingKeys;
}

unint64_t sub_23BD1415C()
{
  unint64_t result;

  result = qword_256AA2228;
  if (!qword_256AA2228)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48F3C, &type metadata for FetchedImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2228);
  }
  return result;
}

unint64_t sub_23BD141A4()
{
  unint64_t result;

  result = qword_256AA2230;
  if (!qword_256AA2230)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48EAC, &type metadata for FetchedImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2230);
  }
  return result;
}

unint64_t sub_23BD141EC()
{
  unint64_t result;

  result = qword_256AA2238;
  if (!qword_256AA2238)
  {
    result = MEMORY[0x242610FF4](&unk_23BD48ED4, &type metadata for FetchedImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2238);
  }
  return result;
}

uint64_t AssetPlatform.rawValue.getter(char a1)
{
  return *(_QWORD *)&aPhone_1[8 * a1];
}

uint64_t sub_23BD14254(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = AssetPlatform.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == AssetPlatform.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BD45B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BD142DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s12FitnessAsset0B8PlatformO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BD14308@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = AssetPlatform.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *static AssetPlatform.allCases.getter()
{
  return &unk_250CCF2E8;
}

void sub_23BD1433C(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CCF310;
}

uint64_t sub_23BD1434C()
{
  sub_23BD1469C();
  return sub_23BD457BC();
}

uint64_t sub_23BD143A8()
{
  sub_23BD1469C();
  return sub_23BD457B0();
}

uint64_t sub_23BD143F4()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_23BD45B88();
  AssetPlatform.rawValue.getter(v1);
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t sub_23BD14454()
{
  char *v0;

  AssetPlatform.rawValue.getter(*v0);
  sub_23BD45780();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD14494()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_23BD45B88();
  AssetPlatform.rawValue.getter(v1);
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t _s12FitnessAsset0B8PlatformO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BD45A5C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_23BD1453C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA2240;
  if (!qword_256AA2240)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA2248);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256AA2240);
  }
  return result;
}

unint64_t sub_23BD1458C()
{
  unint64_t result;

  result = qword_256AA2250;
  if (!qword_256AA2250)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetPlatform, &type metadata for AssetPlatform);
    atomic_store(result, (unint64_t *)&qword_256AA2250);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetPlatform(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD1461C + 4 * byte_23BD48FBD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD14650 + 4 * byte_23BD48FB8[v4]))();
}

uint64_t sub_23BD14650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD14658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD14660);
  return result;
}

uint64_t sub_23BD1466C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD14674);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD14678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD14680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetPlatform()
{
  return &type metadata for AssetPlatform;
}

unint64_t sub_23BD1469C()
{
  unint64_t result;

  result = qword_256AA2258;
  if (!qword_256AA2258)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetPlatform, &type metadata for AssetPlatform);
    atomic_store(result, (unint64_t *)&qword_256AA2258);
  }
  return result;
}

uint64_t sub_23BD146E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  void (*v24)(char *, uint64_t);
  _BOOL8 v25;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v28 = sub_23BD451A4();
  v2 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v27 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1558);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v1, (uint64_t)v16, &qword_256AA1438);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v18 = sub_23BD451C8();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      return 0;
    }
    return 1;
  }
  else
  {
    v19 = &v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1570) + 48)];
    sub_23BCECF30((uint64_t)v16, (uint64_t)v13, &qword_256AA1558);
    v20 = v19;
    v21 = v28;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v20, v28);
    sub_23BCECE9C((uint64_t)v13, (uint64_t)v10, &qword_256AA1558);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v21);
      sub_23BCEEED8((uint64_t)v13, &qword_256AA1558);
      sub_23BCEEED8((uint64_t)v10, &qword_256AA1558);
      return 0;
    }
    sub_23BD45198();
    sub_23BD45180();
    v23 = v22;
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v4, v21);
    v24(v7, v21);
    sub_23BCEEED8((uint64_t)v13, &qword_256AA1558);
    v25 = v23 > 600.0;
    sub_23BCEEED8((uint64_t)v10, &qword_256AA1558);
  }
  return v25;
}

uint64_t sub_23BD14970@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[40];
  _BYTE v11[40];

  v5 = sub_23BD4539C();
  v6 = sub_23BD453A8();
  sub_23BD14A84(a1, v6, (uint64_t)v11);
  result = swift_release();
  if (!v2)
  {
    v8 = sub_23BD453B4();
    sub_23BD14A84(a1, v8, (uint64_t)v10);
    swift_release();
    a2[3] = (uint64_t)&type metadata for ArtworkPredicateLogicalOperation;
    a2[4] = (uint64_t)&protocol witness table for ArtworkPredicateLogicalOperation;
    v9 = swift_allocObject();
    *a2 = v9;
    sub_23BD0B8FC((uint64_t)v11, v9 + 16);
    sub_23BD0B8FC((uint64_t)v10, v9 + 56);
    *(_BYTE *)(v9 + 96) = v5 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

void sub_23BD14A84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  v8[4] = a1;
  v8[5] = a3;
  v4 = sub_23BD453C0();
  v8[2] = *(_QWORD *)(v4 - 8);
  v8[3] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v8[1] = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = sub_23BD453E4();
  MEMORY[0x24BDAC7A8](v8[0]);
  v6 = sub_23BD45414();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_23BD45318();
  MEMORY[0x24BDAC7A8](v7);
  __asm { BR              X10 }
}

uint64_t sub_23BD14BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v4, v1);
  v5 = sub_23BD4530C();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA13F0);
  v7 = *(_QWORD *)(v3 - 88);
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = sub_23BCF2E9C();
  *(_BYTE *)v7 = v5 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_23BD14CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a1;
  v2 = sub_23BD4515C();
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v4);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BD451F8();
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23BD451C8();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DynamicImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCF6190(v1, (uint64_t)v23, v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BCFC424((uint64_t)v23, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
      sub_23BD45B94();
      DynamicArtworkLayoutEnvironment.hash(into:)();
      v26 = (uint64_t)v16;
      v27 = type metadata accessor for DynamicArtworkLayoutEnvironment;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      sub_23BCFC424((uint64_t)v23, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      sub_23BD45B94();
      sub_23BCECE9C((uint64_t)v13, (uint64_t)v10, &qword_256AA0FE0);
      v30 = v40;
      v29 = v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v41) == 1)
      {
        sub_23BD45BA0();
      }
      else
      {
        v31 = v36;
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v36, v10, v29);
        sub_23BD45BA0();
        sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
        sub_23BD45714();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
      }
      v33 = v38;
      v32 = v39;
      sub_23BD45780();
      sub_23BD45780();
      swift_bridgeObjectRelease();
      v34 = v42;
      sub_23BCECE9C((uint64_t)&v13[*(int *)(v11 + 28)], v42, &qword_256AA0FE8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) == 1)
      {
        sub_23BD45BA0();
      }
      else
      {
        v35 = v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v37, v34, v32);
        sub_23BD45BA0();
        sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
        sub_23BD45714();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
      }
      sub_23BCFD2FC();
      v27 = type metadata accessor for ImageAsset;
      v26 = (uint64_t)v13;
    }
    return sub_23BCF56E0(v26, (uint64_t (*)(_QWORD))v27);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v23, v17);
    sub_23BD45B94();
    sub_23BCEEF14(&qword_256AA1160, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BD45714();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
}

uint64_t sub_23BD151D4()
{
  _BYTE v1[72];

  sub_23BD45B88();
  sub_23BD14CFC((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD15214()
{
  _BYTE v1[72];

  sub_23BD45B88();
  sub_23BD14CFC((uint64_t)v1);
  return sub_23BD45BB8();
}

void sub_23BD15250()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE40]), sel_init);
  objc_msgSend(v0, sel_setCountLimit_, 0);
  objc_msgSend(v0, sel_baf_setEvictsObjectsWhenApplicationEntersBackground_, 0);

  qword_256AACDE0 = (uint64_t)v0;
}

__n128 DynamicImageAssetFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  sub_23BD451BC();
  v4 = a2 + *(int *)(type metadata accessor for DynamicImageAssetFeature(0) + 20);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v5;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v4 + 32) = result;
  return result;
}

uint64_t type metadata accessor for DynamicImageAssetFeature(uint64_t a1)
{
  return sub_23BD21DE8(a1, qword_256AA2310);
}

uint64_t sub_23BD15314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BD451C8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
  swift_storeEnumTagMultiPayload();
  LOBYTE(a2) = sub_23BD37BA0(a1, (uint64_t)v6);
  sub_23BCEEED8((uint64_t)v6, &qword_256AA1438);
  return a2 & 1;
}

uint64_t sub_23BD153D8(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  uint64_t (*v13)(_QWORD);
  void (*v14)(_QWORD *);
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  sub_23BCF6190(a3, (uint64_t)v10, v13);
  type metadata accessor for DynamicImageAssetState();
  v14 = sub_23BD1553C(v18, (uint64_t)v10);
  if (*v15)
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 0, 1, v16);
    sub_23BD15610((uint64_t)v7, v11, v12);
  }
  ((void (*)(_QWORD *, _QWORD))v14)(v18, 0);
  return sub_23BCF56E0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
}

void (*sub_23BD1553C(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for ImageAsset();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_23BCF6190(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v4[5] = sub_23BD208C0(v4, (uint64_t)v6);
  return sub_23BD155C8;
}

void sub_23BD155C8(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_23BCF56E0((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  free(v2);
  free(v1);
}

uint64_t sub_23BD15610(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 48))(a1, 1, v11, v13) == 1)
  {
    sub_23BCEEED8(a1, &qword_256AA15F8);
    v16 = sub_23BD203EC(a2, a3);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v4;
      v25 = *v4;
      *v4 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_23BD3E5E0();
        v20 = v25;
      }
      sub_23BCECF30(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v12 + 72) * v18, (uint64_t)v10, &qword_256AA1438);
      sub_23BD209D8(v18, v20);
      *v4 = v20;
      swift_bridgeObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v21, 1, v11);
    return sub_23BCEEED8((uint64_t)v10, &qword_256AA15F8);
  }
  else
  {
    sub_23BCECF30(a1, (uint64_t)v15, &qword_256AA1438);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v4;
    *v4 = 0x8000000000000000;
    sub_23BD21124((uint64_t)v15, v22, a2, a3);
    *v4 = v25;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BD15800(uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  __int128 v18;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v18 = *(_OWORD *)(*(_QWORD *)(a3 + 48) + 16 * v14);
    result = a1(&v18);
    if (v3)
      return swift_release();
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release();
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void DynamicImageAssetFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD);
  char *v80;
  _QWORD v81[32];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v100 = a4;
  v99 = a3;
  v101 = a2;
  v81[31] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v4);
  v81[23] = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v6);
  v81[25] = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_23BD451C8();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v81[2] = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicImageAssetFeature(0);
  v81[13] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v81[14] = v10;
  v81[15] = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DynamicImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v95);
  v81[11] = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v81[22] = (char *)v81 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v81[21] = (char *)v81 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v94 = (char *)v81 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v81[12] = (char *)v81 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D60);
  v96 = *(_QWORD *)(v20 - 8);
  v97 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v81[24] = (char *)v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v90 = (char *)v81 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v89 = (char *)v81 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v81[26] = (char *)v81 - v27;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v81[27] = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v81[5] = (char *)v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v81[4] = (char *)v81 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v81[3] = (char *)v81 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v81[28] = (char *)v81 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v35);
  MEMORY[0x24BDAC7A8](v36);
  v81[19] = (char *)v81 - v37;
  v38 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  v92 = *(_QWORD *)(v38 - 8);
  v93 = v38;
  MEMORY[0x24BDAC7A8](v38);
  v81[6] = (char *)v81 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v81[30] = (char *)v81 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v88 = (char *)v81 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v87 = (char *)v81 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v81[9] = (char *)v81 - v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v48);
  v81[16] = (char *)v81 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for ImageAsset();
  v98 = *(_QWORD *)(v91 - 8);
  v50 = *(_QWORD *)(v98 + 64);
  MEMORY[0x24BDAC7A8](v91);
  v81[8] = (char *)v81 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51);
  v81[20] = (char *)v81 - v52;
  MEMORY[0x24BDAC7A8](v53);
  v81[17] = (char *)v81 - v54;
  MEMORY[0x24BDAC7A8](v55);
  v86 = (char *)v81 - v56;
  MEMORY[0x24BDAC7A8](v57);
  v81[1] = (char *)v81 - v58;
  MEMORY[0x24BDAC7A8](v59);
  v81[18] = (char *)v81 - v60;
  MEMORY[0x24BDAC7A8](v61);
  MEMORY[0x24BDAC7A8](v62);
  v85 = (char *)v81 - v63;
  MEMORY[0x24BDAC7A8](v64);
  v81[0] = (char *)v81 - v65;
  MEMORY[0x24BDAC7A8](v66);
  MEMORY[0x24BDAC7A8](v67);
  v81[10] = (char *)v81 - v68;
  MEMORY[0x24BDAC7A8](v69);
  v81[7] = (char *)v81 - v70;
  MEMORY[0x24BDAC7A8](v71);
  MEMORY[0x24BDAC7A8](v72);
  v81[29] = (char *)v81 - v73;
  MEMORY[0x24BDAC7A8](v74);
  MEMORY[0x24BDAC7A8](v75);
  v76 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v76);
  MEMORY[0x24BDAC7A8](v77);
  sub_23BCF6190(v100, (uint64_t)v81 - v78, v79);
  v80 = (char *)sub_23BD16130 + 4 * word_23BD49154[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD16130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  uint64_t v8;
  void (*v9)(_QWORD *);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  double *v16;

  v5 = (double *)(v0 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8) + 48));
  v6 = *v5;
  v7 = v5[1];
  sub_23BCFC424(v0, v3, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCF6190(v3, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  type metadata accessor for DynamicImageAssetState();
  v8 = *(_QWORD *)(v4 - 160);
  v9 = sub_23BD1553C((_QWORD *)(v4 - 152), v1);
  if (*v10)
  {
    v11 = *(_QWORD *)(v4 - 448);
    v12 = *(_QWORD *)(v4 - 320);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 360) + 56))(v11, 0, 1, v12);
    sub_23BD15610(v11, v6, v7);
  }
  ((void (*)(uint64_t, _QWORD))v9)(v4 - 152, 0);
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v13 = *(_QWORD *)(v4 - 424);
  sub_23BCECE9C(v8, v13, &qword_256AA1EC8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 240) + 48))(v13, 1, *(_QWORD *)(v4 - 232)) == 1)
  {
    sub_23BCF56E0(v3, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    return sub_23BCEEED8(v13, &qword_256AA1EC8);
  }
  else
  {
    v15 = *(_QWORD *)(v4 - 504);
    sub_23BCFC424(v13, v15, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    v16 = (double *)(v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750) + 48));
    sub_23BCF6190(v15, v2, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    *v16 = v6;
    v16[1] = v7;
    swift_storeEnumTagMultiPayload();
    ((void (*)(_QWORD, uint64_t, _QWORD, uint64_t))DynamicImageAssetFeature.reduce(localState:sharedState:sideEffects:action:))(*(_QWORD *)(v4 - 328), v8, *(_QWORD *)(v4 - 184), v2);
    sub_23BCF56E0(v2, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
    sub_23BCF56E0(v15, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    return sub_23BCF56E0(v3, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }
}

uint64_t sub_23BD177D0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 184) = a3;
  *(double *)(v6 + 168) = a5;
  *(double *)(v6 + 176) = a6;
  *(double *)(v6 + 160) = a4;
  *(_QWORD *)(v6 + 144) = a1;
  *(_QWORD *)(v6 + 152) = a2;
  v7 = sub_23BD45834();
  *(_QWORD *)(v6 + 192) = v7;
  *(_QWORD *)(v6 + 200) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 208) = swift_task_alloc();
  *(_QWORD *)(v6 + 216) = type metadata accessor for ImageAsset();
  *(_QWORD *)(v6 + 224) = swift_task_alloc();
  *(_QWORD *)(v6 + 232) = swift_task_alloc();
  *(_QWORD *)(v6 + 240) = swift_task_alloc();
  *(_QWORD *)(v6 + 248) = type metadata accessor for DynamicImageAssetAction();
  *(_QWORD *)(v6 + 256) = swift_task_alloc();
  *(_QWORD *)(v6 + 264) = type metadata accessor for FetchedImageAsset();
  *(_QWORD *)(v6 + 272) = swift_task_alloc();
  *(_QWORD *)(v6 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  *(_QWORD *)(v6 + 288) = swift_task_alloc();
  *(_QWORD *)(v6 + 296) = swift_task_alloc();
  v8 = sub_23BD4515C();
  *(_QWORD *)(v6 + 304) = v8;
  *(_QWORD *)(v6 + 312) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  *(_QWORD *)(v6 + 328) = swift_task_alloc();
  *(_QWORD *)(v6 + 336) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v6 + 344) = sub_23BD4584C();
  *(_QWORD *)(v6 + 352) = sub_23BD45810();
  *(_QWORD *)(v6 + 360) = v9;
  return swift_task_switch();
}

uint64_t sub_23BD17980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  sub_23BD2C1FC(v3, *(double *)(v0 + 160), *(double *)(v0 + 168), *(double *)(v0 + 176));
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 368) = v4;
  if (v4(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 296);
    swift_release();
    sub_23BCEEED8(v5, &qword_256AA0FE8);
    sub_23BD238AC();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 312) + 32);
    *(_QWORD *)(v0 + 376) = v12;
    v12(v8, v10, v9);
    v13 = *(int *)(type metadata accessor for DynamicImageAssetFeature(0) + 20);
    *(_DWORD *)(v0 + 608) = v13;
    v15 = (uint64_t (*)(_QWORD))(**(int **)(v11 + v13) + *(_QWORD *)(v11 + v13));
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v14;
    *v14 = v0;
    v14[1] = sub_23BD17B5C;
    return v15(*(_QWORD *)(v0 + 336));
  }
}

uint64_t sub_23BD17B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[49] = a1;
  v4[50] = a2;
  v4[51] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD17BC8()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t type;
  os_log_type_t typea;
  _QWORD *v77;
  os_log_t log;
  NSObject *loga;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(_QWORD, double, double);
  uint64_t (*v83)(_QWORD);
  uint64_t v84[2];

  v1 = *(void **)(v0 + 408);
  sub_23BD45888();
  if (!v1)
  {
    *(_BYTE *)(v0 + 613) = *(_BYTE *)(*(_QWORD *)(v0 + 152) + *(int *)(*(_QWORD *)(v0 + 216) + 24));
    return swift_task_switch();
  }
  sub_23BD08EFC(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
  *(_QWORD *)(v0 + 456) = v1;
  *(_QWORD *)(v0 + 128) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

LABEL_9:
      *(_QWORD *)(v0 + 48) = v1;
      v11 = v1;
      if (swift_dynamicCast())
      {
        swift_release();

        if (qword_256AA0FC8 != -1)
          swift_once();
        v12 = *(_QWORD *)(v0 + 224);
        v13 = *(_QWORD *)(v0 + 152);
        v14 = sub_23BD45444();
        __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
        sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v15 = sub_23BD4542C();
        v16 = sub_23BD458B8();
        v17 = os_log_type_enabled(v15, v16);
        v18 = *(_QWORD *)(v0 + 336);
        v19 = *(_QWORD *)(v0 + 304);
        v20 = *(_QWORD *)(v0 + 312);
        if (v17)
        {
          v80 = *(_QWORD *)(v0 + 336);
          v22 = *(_QWORD *)(v0 + 224);
          v21 = *(_QWORD *)(v0 + 232);
          v24 = *(_QWORD *)(v0 + 160);
          v23 = *(_QWORD *)(v0 + 168);
          log = *(os_log_t *)(v0 + 312);
          v25 = swift_slowAlloc();
          type = swift_slowAlloc();
          v84[0] = type;
          *(_DWORD *)v25 = 136315394;
          sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          v26 = sub_23BD45774();
          *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          *(_WORD *)(v25 + 12) = 2080;
          *(_QWORD *)(v0 + 32) = v24;
          *(_QWORD *)(v0 + 40) = v23;
          type metadata accessor for CGSize();
          v28 = sub_23BD45774();
          *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x242611078](type, -1, -1);
          MEMORY[0x242611078](v25, -1, -1);

          ((void (*)(uint64_t, uint64_t))log[1].isa)(v80, v19);
        }
        else
        {
          v72 = *(_QWORD *)(v0 + 224);

          sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        }
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      else
      {

        if (qword_256AA0FC8 != -1)
          swift_once();
        v31 = *(_QWORD *)(v0 + 336);
        v33 = *(_QWORD *)(v0 + 312);
        v32 = *(_QWORD *)(v0 + 320);
        v34 = *(_QWORD *)(v0 + 304);
        v35 = sub_23BD45444();
        __swift_project_value_buffer(v35, (uint64_t)qword_256AACDC8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v31, v34);
        v36 = v1;
        v37 = v1;
        v38 = sub_23BD4542C();
        v39 = sub_23BD458B8();
        v40 = os_log_type_enabled(v38, v39);
        v42 = *(_QWORD *)(v0 + 312);
        v41 = *(_QWORD *)(v0 + 320);
        v43 = *(_QWORD *)(v0 + 304);
        if (v40)
        {
          loga = v38;
          v44 = swift_slowAlloc();
          v77 = (_QWORD *)swift_slowAlloc();
          v81 = swift_slowAlloc();
          v84[0] = v81;
          *(_DWORD *)v44 = 136446466;
          sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v45 = sub_23BD45B10();
          typea = v39;
          *(_QWORD *)(v0 + 72) = sub_23BD374D4(v45, v46, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
          v47(v41, v43);
          *(_WORD *)(v44 + 12) = 2114;
          v48 = v1;
          v49 = _swift_stdlib_bridgeErrorToNSError();
          *(_QWORD *)(v0 + 80) = v49;
          sub_23BD45918();
          *v77 = v49;

          _os_log_impl(&dword_23BCEB000, loga, typea, "unable to fetch %{public}s: %{public}@", (uint8_t *)v44, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
          swift_arrayDestroy();
          MEMORY[0x242611078](v77, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x242611078](v81, -1, -1);
          MEMORY[0x242611078](v44, -1, -1);

        }
        else
        {
          v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
          v47(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

        }
        *(_QWORD *)(v0 + 576) = v47;
        v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
        v83 = (uint64_t (*)(_QWORD))(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
        v74 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 584) = v74;
        *v74 = v0;
        v74[1] = sub_23BD1A954;
        return v83(*(_QWORD *)(v0 + 336));
      }
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v50 = *(_QWORD *)(v0 + 240);
  v51 = *(_QWORD *)(v0 + 152);
  v52 = sub_23BD45444();
  __swift_project_value_buffer(v52, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v51, v50, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v53 = sub_23BD4542C();
  v54 = sub_23BD458B8();
  v55 = os_log_type_enabled(v53, v54);
  v56 = *(_QWORD *)(v0 + 240);
  if (v55)
  {
    v57 = *(_QWORD *)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD *)(v0 + 168);
    v60 = swift_slowAlloc();
    v61 = swift_slowAlloc();
    v84[0] = v61;
    *(_DWORD *)v60 = 136315394;
    sub_23BCF6190(v56, v57, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v62 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v62, v63, v84);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v60 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v59;
    *(_QWORD *)(v0 + 24) = v58;
    type metadata accessor for CGSize();
    v64 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v64, v65, v84);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v53, v54, "Fetching fallback for %s with %s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v61, -1, -1);
    MEMORY[0x242611078](v60, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v66 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v68 = v67;
  v70 = v69;
  v82 = (uint64_t (*)(_QWORD, double, double))((char *)v66 + *v66);
  v71 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v71;
  *v71 = v0;
  v71[1] = sub_23BD19DE8;
  return v82(*(_QWORD *)(v0 + 152), v68, v70);
}

uint64_t sub_23BD185D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 613);
  v3 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 416) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 424) = v6;
  sub_23BD23938(0, (unint64_t *)&qword_256AA1EB0);
  *v6 = v0;
  v6[1] = sub_23BD186AC;
  return sub_23BD45B28();
}

uint64_t sub_23BD186AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD18718()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 440) = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

uint64_t sub_23BD18730()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t type;
  os_log_type_t typea;
  _QWORD *v93;
  os_log_t log;
  NSObject *loga;
  uint64_t (*v96)(_QWORD, double, double);
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD);
  uint64_t v100[2];

  v1 = *(void **)(v0 + 432);
  sub_23BD45888();
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 392);
    v2 = *(_QWORD *)(v0 + 400);

    sub_23BD08EFC(v3, v2);
    *(_QWORD *)(v0 + 456) = v1;
    *(_QWORD *)(v0 + 128) = v1;
    v4 = v1;
    *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
    sub_23BD23938(0, &qword_256AA2408);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = *(void **)(v0 + 96);
      *(_QWORD *)(v0 + 472) = v5;
      v6 = objc_msgSend(v5, sel_domain);
      v7 = sub_23BD45768();
      v9 = v8;

      if (v7 == sub_23BD45768() && v9 == v10)
      {
        swift_bridgeObjectRelease_n();
LABEL_10:

        if (qword_256AA0FC8 != -1)
          swift_once();
        v28 = *(_QWORD *)(v0 + 240);
        v29 = *(_QWORD *)(v0 + 152);
        v30 = sub_23BD45444();
        __swift_project_value_buffer(v30, (uint64_t)qword_256AACDC8);
        sub_23BCF6190(v29, v28, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v31 = sub_23BD4542C();
        v32 = sub_23BD458B8();
        v33 = os_log_type_enabled(v31, v32);
        v34 = *(_QWORD *)(v0 + 240);
        if (v33)
        {
          v35 = *(_QWORD *)(v0 + 232);
          v37 = *(_QWORD *)(v0 + 160);
          v36 = *(_QWORD *)(v0 + 168);
          v38 = swift_slowAlloc();
          v39 = swift_slowAlloc();
          v100[0] = v39;
          *(_DWORD *)v38 = 136315394;
          sub_23BCF6190(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          v40 = sub_23BD45774();
          *(_QWORD *)(v0 + 120) = sub_23BD374D4(v40, v41, v100);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          sub_23BCF56E0(v34, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          *(_WORD *)(v38 + 12) = 2080;
          *(_QWORD *)(v0 + 16) = v37;
          *(_QWORD *)(v0 + 24) = v36;
          type metadata accessor for CGSize();
          v42 = sub_23BD45774();
          *(_QWORD *)(v0 + 136) = sub_23BD374D4(v42, v43, v100);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23BCEB000, v31, v32, "Fetching fallback for %s with %s", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x242611078](v39, -1, -1);
          MEMORY[0x242611078](v38, -1, -1);
        }
        else
        {
          sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        }

        v44 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
        sub_23BD458F4();
        v46 = v45;
        v48 = v47;
        v96 = (uint64_t (*)(_QWORD, double, double))((char *)v44 + *v44);
        v49 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 480) = v49;
        *v49 = v0;
        v49[1] = sub_23BD19DE8;
        return v96(*(_QWORD *)(v0 + 152), v46, v48);
      }
      v27 = sub_23BD45B1C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_10;

    }
    *(_QWORD *)(v0 + 48) = v1;
    v50 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v51 = *(_QWORD *)(v0 + 224);
      v52 = *(_QWORD *)(v0 + 152);
      v53 = sub_23BD45444();
      __swift_project_value_buffer(v53, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v52, v51, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v54 = sub_23BD4542C();
      v55 = sub_23BD458B8();
      v56 = os_log_type_enabled(v54, v55);
      v57 = *(_QWORD *)(v0 + 336);
      v58 = *(_QWORD *)(v0 + 304);
      v59 = *(_QWORD *)(v0 + 312);
      if (v56)
      {
        v97 = *(_QWORD *)(v0 + 336);
        v61 = *(_QWORD *)(v0 + 224);
        v60 = *(_QWORD *)(v0 + 232);
        v63 = *(_QWORD *)(v0 + 160);
        v62 = *(_QWORD *)(v0 + 168);
        log = *(os_log_t *)(v0 + 312);
        v64 = swift_slowAlloc();
        type = swift_slowAlloc();
        v100[0] = type;
        *(_DWORD *)v64 = 136315394;
        sub_23BCF6190(v61, v60, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v65 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v65, v66, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v61, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v64 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v63;
        *(_QWORD *)(v0 + 40) = v62;
        type metadata accessor for CGSize();
        v67 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v67, v68, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v54, v55, "Fetching %s for %s cancelled", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](type, -1, -1);
        MEMORY[0x242611078](v64, -1, -1);

        ((void (*)(uint64_t, uint64_t))log[1].isa)(v97, v58);
      }
      else
      {
        v88 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v88, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v69 = *(_QWORD *)(v0 + 336);
      v71 = *(_QWORD *)(v0 + 312);
      v70 = *(_QWORD *)(v0 + 320);
      v72 = *(_QWORD *)(v0 + 304);
      v73 = sub_23BD45444();
      __swift_project_value_buffer(v73, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v70, v69, v72);
      v74 = v1;
      v75 = v1;
      v76 = sub_23BD4542C();
      v77 = sub_23BD458B8();
      v78 = os_log_type_enabled(v76, v77);
      v80 = *(_QWORD *)(v0 + 312);
      v79 = *(_QWORD *)(v0 + 320);
      v81 = *(_QWORD *)(v0 + 304);
      if (v78)
      {
        loga = v76;
        v82 = swift_slowAlloc();
        v93 = (_QWORD *)swift_slowAlloc();
        v98 = swift_slowAlloc();
        v100[0] = v98;
        *(_DWORD *)v82 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v83 = sub_23BD45B10();
        typea = v77;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v83, v84, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v85 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v85(v79, v81);
        *(_WORD *)(v82 + 12) = 2114;
        v86 = v1;
        v87 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v87;
        sub_23BD45918();
        *v93 = v87;

        _os_log_impl(&dword_23BCEB000, loga, typea, "unable to fetch %{public}s: %{public}@", (uint8_t *)v82, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v93, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v98, -1, -1);
        MEMORY[0x242611078](v82, -1, -1);

      }
      else
      {
        v85 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v85(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v85;
      v89 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      v99 = (uint64_t (*)(_QWORD))(**(int **)(v89 + 32) + *(_QWORD *)(v89 + 32));
      v90 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v90;
      *v90 = v0;
      v90[1] = sub_23BD1A954;
      return v99(*(_QWORD *)(v0 + 336));
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 168);
    sub_23BCF6190(*(_QWORD *)(v0 + 152), v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v15 = (_QWORD *)(v11 + *(int *)(v12 + 20));
    *v15 = v14;
    v15[1] = v13;
    if (qword_256AA0FD0 != -1)
      swift_once();
    v16 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v21 = (void *)qword_256AACDE0;
    sub_23BCF6190(v17, *(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
    v22 = v21;
    v23 = (void *)sub_23BD452E8();
    objc_msgSend(v22, sel_setObject_forKey_, v16, v23);

    v24 = (_QWORD *)(v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770) + 48));
    sub_23BCF6190(v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    *v24 = v20;
    v24[1] = v19;
    swift_storeEnumTagMultiPayload();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
    *v25 = v0;
    v25[1] = sub_23BD19C74;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD1927C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD192B4()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  os_log_type_t type;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v83;

  sub_23BD08EFC(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
  v1 = *(void **)(v0 + 432);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 456) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if (!swift_dynamicCast())
  {
LABEL_8:

    *(_QWORD *)(v0 + 48) = v1;
    v11 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 152);
      v14 = sub_23BD45444();
      __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v15 = sub_23BD4542C();
      v16 = sub_23BD458B8();
      v17 = os_log_type_enabled(v15, v16);
      v18 = *(_QWORD *)(v0 + 336);
      v19 = *(_QWORD *)(v0 + 304);
      v20 = *(_QWORD *)(v0 + 312);
      if (v17)
      {
        v78 = *(_QWORD *)(v0 + 312);
        log = *(os_log_t *)(v0 + 336);
        v22 = *(_QWORD *)(v0 + 224);
        v21 = *(_QWORD *)(v0 + 232);
        v24 = *(_QWORD *)(v0 + 160);
        v23 = *(_QWORD *)(v0 + 168);
        v25 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        v83 = v75;
        *(_DWORD *)v25 = 136315394;
        sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v26 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v25 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v24;
        *(_QWORD *)(v0 + 40) = v23;
        type metadata accessor for CGSize();
        v28 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](v75, -1, -1);
        MEMORY[0x242611078](v25, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v78 + 8))(log, v19);
      }
      else
      {
        v72 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v30 = *(_QWORD *)(v0 + 336);
      v32 = *(_QWORD *)(v0 + 312);
      v31 = *(_QWORD *)(v0 + 320);
      v33 = *(_QWORD *)(v0 + 304);
      v34 = sub_23BD45444();
      __swift_project_value_buffer(v34, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
      v35 = v1;
      v36 = v1;
      v37 = sub_23BD4542C();
      v38 = sub_23BD458B8();
      v39 = os_log_type_enabled(v37, v38);
      v41 = *(_QWORD *)(v0 + 312);
      v40 = *(_QWORD *)(v0 + 320);
      v42 = *(_QWORD *)(v0 + 304);
      if (v39)
      {
        v43 = swift_slowAlloc();
        v77 = (_QWORD *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v83 = v79;
        *(_DWORD *)v43 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v44 = sub_23BD45B10();
        type = v38;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v44, v45, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(v40, v42);
        *(_WORD *)(v43 + 12) = 2114;
        v47 = v1;
        v48 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v48;
        sub_23BD45918();
        *v77 = v48;

        _os_log_impl(&dword_23BCEB000, v37, type, "unable to fetch %{public}s: %{public}@", (uint8_t *)v43, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v77, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v79, -1, -1);
        MEMORY[0x242611078](v43, -1, -1);

      }
      else
      {
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v46;
      v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      logb = (os_log_t)(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
      v74 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v74;
      *v74 = v0;
      v74[1] = sub_23BD1A954;
      return ((uint64_t (*)(_QWORD))logb)(*(_QWORD *)(v0 + 336));
    }
  }
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      goto LABEL_8;
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v49 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 152);
  v51 = sub_23BD45444();
  __swift_project_value_buffer(v51, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v52 = sub_23BD4542C();
  v53 = sub_23BD458B8();
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 240);
  if (v54)
  {
    v56 = *(_QWORD *)(v0 + 232);
    v58 = *(_QWORD *)(v0 + 160);
    v57 = *(_QWORD *)(v0 + 168);
    v59 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v83 = v60;
    *(_DWORD *)v59 = 136315394;
    sub_23BCF6190(v55, v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v61 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v61, v62, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v59 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v58;
    *(_QWORD *)(v0 + 24) = v57;
    type metadata accessor for CGSize();
    v63 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v63, v64, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v52, v53, "Fetching fallback for %s with %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v60, -1, -1);
    MEMORY[0x242611078](v59, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v65 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v67 = v66;
  v69 = v68;
  loga = (os_log_t)((char *)v65 + *v65);
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v70;
  *v70 = v0;
  v70[1] = sub_23BD19DE8;
  return ((uint64_t (*)(_QWORD, double, double))loga)(*(_QWORD *)(v0 + 152), v67, v69);
}

uint64_t sub_23BD19C74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD19CD4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 280);
  swift_release();

  sub_23BD08EFC(v2, v3);
  sub_23BCF56E0(v7, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD19DE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 488) = a1;
  *(_QWORD *)(v3 + 496) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD19E50()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 496);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(void **)(v0 + 472);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
    swift_release();
    swift_bridgeObjectRelease();

LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  sub_23BD38354(*(_QWORD *)(v0 + 488), v5);
  swift_bridgeObjectRelease();
  if (v3(v5, 1, v4) == 1)
  {
    v6 = *(void **)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 288);
    swift_release();
    sub_23BCEEED8(v10, &qword_256AA0FE8);
    sub_23BD238F0();
    swift_allocError();
    *v11 = 2;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    goto LABEL_5;
  }
  v13 = (_QWORD *)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304));
  v15 = (uint64_t (*)(_QWORD))(*(int *)*v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 504) = v14;
  *v14 = v0;
  v14[1] = sub_23BD1A07C;
  return v15(*(_QWORD *)(v0 + 328));
}

uint64_t sub_23BD1A07C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[64] = a1;
  v4[65] = a2;
  v4[66] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD1A0EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 528);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 520);
    v3 = *(_QWORD *)(v0 + 512);
    v4 = *(void **)(v0 + 472);
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 312);
    swift_release();

    sub_23BD08EFC(v3, v2);
    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v6, v7);
    v9(v5, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 614) = *(_BYTE *)(*(_QWORD *)(v0 + 152) + *(int *)(*(_QWORD *)(v0 + 216) + 24));
    return swift_task_switch();
  }
}

uint64_t sub_23BD1A25C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 614);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 536) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 544) = v6;
  sub_23BD23938(0, (unint64_t *)&qword_256AA1EB0);
  *v6 = v0;
  v6[1] = sub_23BD1A334;
  return sub_23BD45B28();
}

uint64_t sub_23BD1A334()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD1A3A0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 560) = *(_QWORD *)(v0 + 112);
  return swift_task_switch();
}

uint64_t sub_23BD1A3B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 552);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(void **)(v0 + 560);
    v3 = *(_QWORD *)(v0 + 520);
    v4 = *(_QWORD *)(v0 + 512);
    v5 = *(void **)(v0 + 472);
    v6 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    swift_release();

    sub_23BD08EFC(v4, v3);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v6, v8);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 280);
    v13 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 168);
    sub_23BCF6190(*(_QWORD *)(v0 + 152), v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v16 = (_QWORD *)(v12 + *(int *)(v13 + 20));
    *v16 = v15;
    v16[1] = v14;
    if (qword_256AA0FD0 != -1)
      swift_once();
    v17 = *(_QWORD *)(v0 + 560);
    v18 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v22 = (void *)qword_256AACDE0;
    sub_23BCF6190(v18, *(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    v23 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
    v24 = v22;
    v25 = (void *)sub_23BD452E8();
    objc_msgSend(v24, sel_setObject_forKey_, v17, v25);

    v26 = (_QWORD *)(v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770) + 48));
    sub_23BCF6190(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    *v26 = v21;
    v26[1] = v20;
    swift_storeEnumTagMultiPayload();
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 568) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
    *v27 = v0;
    v27[1] = sub_23BD1A7BC;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD1A660()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD1A698()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(void **)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 312);
  swift_release();

  sub_23BD08EFC(v2, v1);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v4, v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1A7BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1A81C()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(void **)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 280);
  swift_release();

  sub_23BD08EFC(v3, v2);
  sub_23BCF56E0(v9, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v6, v7);
  v10(v5, v7);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1A954()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23BD1A9BC()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(void **)(v0 + 456);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1;
  v3 = swift_dynamicCast();
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  if ((v3 & 1) != 0)
  {
    v8 = *(_BYTE *)(v0 + 612);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
    v10 = *(int *)(v9 + 48);
    v11 = (_QWORD *)(v4 + *(int *)(v9 + 64));
    sub_23BCF6190(v7, v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_BYTE *)(v4 + v10) = v8;
    *v11 = v6;
    v11[1] = v5;
    swift_storeEnumTagMultiPayload();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 600) = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
    v13 = sub_23BD1AC90;
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1790);
    v15 = *(int *)(v14 + 48);
    v16 = (_QWORD *)(v4 + *(int *)(v14 + 64));
    sub_23BCF6190(v7, v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_BYTE *)(v4 + v15) = 0;
    *v16 = v6;
    v16[1] = v5;
    swift_storeEnumTagMultiPayload();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 592) = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
    v13 = sub_23BD1AB3C;
  }
  *v12 = v0;
  v12[1] = v13;
  return sub_23BD456A8();
}

uint64_t sub_23BD1AB3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1AB9C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  v2 = *(void **)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 304);
  swift_release();

  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1AC90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1ACF0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  os_log_type_t type;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v83;

  v1 = *(void **)(v0 + 408);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 456) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if (!swift_dynamicCast())
  {
LABEL_8:

    *(_QWORD *)(v0 + 48) = v1;
    v11 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 152);
      v14 = sub_23BD45444();
      __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v15 = sub_23BD4542C();
      v16 = sub_23BD458B8();
      v17 = os_log_type_enabled(v15, v16);
      v18 = *(_QWORD *)(v0 + 336);
      v19 = *(_QWORD *)(v0 + 304);
      v20 = *(_QWORD *)(v0 + 312);
      if (v17)
      {
        v78 = *(_QWORD *)(v0 + 312);
        log = *(os_log_t *)(v0 + 336);
        v22 = *(_QWORD *)(v0 + 224);
        v21 = *(_QWORD *)(v0 + 232);
        v24 = *(_QWORD *)(v0 + 160);
        v23 = *(_QWORD *)(v0 + 168);
        v25 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        v83 = v75;
        *(_DWORD *)v25 = 136315394;
        sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v26 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v25 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v24;
        *(_QWORD *)(v0 + 40) = v23;
        type metadata accessor for CGSize();
        v28 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](v75, -1, -1);
        MEMORY[0x242611078](v25, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v78 + 8))(log, v19);
      }
      else
      {
        v72 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v30 = *(_QWORD *)(v0 + 336);
      v32 = *(_QWORD *)(v0 + 312);
      v31 = *(_QWORD *)(v0 + 320);
      v33 = *(_QWORD *)(v0 + 304);
      v34 = sub_23BD45444();
      __swift_project_value_buffer(v34, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
      v35 = v1;
      v36 = v1;
      v37 = sub_23BD4542C();
      v38 = sub_23BD458B8();
      v39 = os_log_type_enabled(v37, v38);
      v41 = *(_QWORD *)(v0 + 312);
      v40 = *(_QWORD *)(v0 + 320);
      v42 = *(_QWORD *)(v0 + 304);
      if (v39)
      {
        v43 = swift_slowAlloc();
        v77 = (_QWORD *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v83 = v79;
        *(_DWORD *)v43 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v44 = sub_23BD45B10();
        type = v38;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v44, v45, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(v40, v42);
        *(_WORD *)(v43 + 12) = 2114;
        v47 = v1;
        v48 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v48;
        sub_23BD45918();
        *v77 = v48;

        _os_log_impl(&dword_23BCEB000, v37, type, "unable to fetch %{public}s: %{public}@", (uint8_t *)v43, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v77, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v79, -1, -1);
        MEMORY[0x242611078](v43, -1, -1);

      }
      else
      {
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v46;
      v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      logb = (os_log_t)(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
      v74 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v74;
      *v74 = v0;
      v74[1] = sub_23BD1A954;
      return ((uint64_t (*)(_QWORD))logb)(*(_QWORD *)(v0 + 336));
    }
  }
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      goto LABEL_8;
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v49 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 152);
  v51 = sub_23BD45444();
  __swift_project_value_buffer(v51, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v52 = sub_23BD4542C();
  v53 = sub_23BD458B8();
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 240);
  if (v54)
  {
    v56 = *(_QWORD *)(v0 + 232);
    v58 = *(_QWORD *)(v0 + 160);
    v57 = *(_QWORD *)(v0 + 168);
    v59 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v83 = v60;
    *(_DWORD *)v59 = 136315394;
    sub_23BCF6190(v55, v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v61 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v61, v62, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v59 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v58;
    *(_QWORD *)(v0 + 24) = v57;
    type metadata accessor for CGSize();
    v63 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v63, v64, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v52, v53, "Fetching fallback for %s with %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v60, -1, -1);
    MEMORY[0x242611078](v59, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v65 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v67 = v66;
  v69 = v68;
  loga = (os_log_t)((char *)v65 + *v65);
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v70;
  *v70 = v0;
  v70[1] = sub_23BD19DE8;
  return ((uint64_t (*)(_QWORD, double, double))loga)(*(_QWORD *)(v0 + 152), v67, v69);
}

uint64_t sub_23BD1B6A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1B7A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  swift_release();

  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v2, v4);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1B8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD v104[8];
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, unint64_t, uint64_t);
  unsigned __int8 *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  uint64_t v161;

  v146 = a2;
  v123 = a3;
  v120 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v120);
  v121 = (uint64_t)v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v119 = (uint64_t)v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2008);
  MEMORY[0x24BDAC7A8](v118);
  v117 = (char *)v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v8);
  v116 = (uint64_t)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2438);
  v108 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v109 = (char *)v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_23BD453C0();
  v134 = *(_QWORD *)(v137 - 8);
  MEMORY[0x24BDAC7A8](v137);
  v111 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v104[6] = (char *)v104 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v125 = (char *)v104 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v135 = (char *)v104 - v17;
  v136 = sub_23BD453E4();
  v18 = *(_QWORD *)(v136 - 8);
  MEMORY[0x24BDAC7A8](v136);
  v20 = (char *)v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v104[3] = (char *)v104 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v113 = (char *)v104 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v128 = (char *)v104 - v26;
  v132 = sub_23BD45414();
  v144 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  v28 = (char *)v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v127 = (char *)v104 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v112 = (char *)v104 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v143 = (char *)v104 - v34;
  v35 = sub_23BD45318();
  v130 = *(_QWORD *)(v35 - 8);
  v131 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v129 = (char *)v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v37);
  v107 = (uint64_t)v104 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v142 = (unsigned __int8 *)v104 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2440);
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v147 = (char *)v104 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44);
  v106 = (char *)v104 - v45;
  v115 = type metadata accessor for Artwork();
  MEMORY[0x24BDAC7A8](v115);
  v105 = (char *)v104 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)v104 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2448);
  MEMORY[0x24BDAC7A8](v50);
  v114 = (uint64_t)v104 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52);
  v126 = (uint64_t)v104 - v53;
  v104[7] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1ED0);
  v54 = a1;
  v55 = sub_23BD45258();
  v56 = *(_QWORD *)(v55 + 16);
  v122 = v49;
  if (v56)
  {
    v124 = v28;
    v104[2] = v20;
    v104[4] = v55;
    v104[5] = v54;
    v57 = v55 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    v138 = *(_QWORD *)(v42 + 72);
    v141 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    swift_bridgeObjectRetain();
    v148 = 0;
    v139 = v37;
    v140 = v42;
    v58 = v37;
    v145 = v41;
    v133 = v18;
    v149 = v57;
    v150 = v56;
    v141(v147, v57, v41);
    v59 = sub_23BD45228();
    v60 = v142;
    sub_23BCF6190(v146, (uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    v61 = *v60 + 1;
    v62 = v60[1] + 1;
    v63 = sub_23BD452A0();
    v65 = v64;
    v66 = v60[*(int *)(v58 + 28)];
    v67 = sub_23BD452A0();
    v69 = v68;
    sub_23BCF56E0((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    v155 = v61;
    v156 = v62;
    v157 = v63;
    v158 = v65;
    v151 = v65;
    v159 = v66;
    v160 = v67;
    v161 = v69;
    __asm { BR              X9 }
  }
  v70 = v123;
  v71 = v126;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v126, 1, 1, v41);
  swift_bridgeObjectRelease();
  v72 = v114;
  sub_23BCECE9C(v71, v114, &qword_256AA2448);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v72, 1, v41) == 1)
  {
    sub_23BCEEED8(v72, &qword_256AA2448);
    v73 = v109;
    sub_23BD4524C();
    v74 = (uint64_t)v105;
    v75 = v110;
    sub_23BD4527C();
    v76 = *(void (**)(char *, uint64_t))(v108 + 8);
    v76(v73, v75);
    sub_23BCFC424(v74, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
    sub_23BD4524C();
    v77 = sub_23BD45288();
    v151 = v78;
    v76(v73, v75);
    if (qword_256AA0FC8 != -1)
      swift_once();
    v79 = sub_23BD45444();
    __swift_project_value_buffer(v79, (uint64_t)qword_256AACDC8);
    v80 = v107;
    sub_23BCF6190(v146, v107, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    v81 = sub_23BD4542C();
    v82 = sub_23BD458B8();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      v84 = v77;
      v85 = swift_slowAlloc();
      v153 = v85;
      *(_DWORD *)v83 = 136446210;
      v86 = DynamicArtworkLayoutEnvironment.description.getter();
      v152 = sub_23BD374D4(v86, v87, &v153);
      sub_23BD45918();
      swift_bridgeObjectRelease();
      sub_23BCF56E0(v80, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
      _os_log_impl(&dword_23BCEB000, v81, v82, "[DynamicAssetFeature] Failed to find preferred artwork for environment %{public}s", v83, 0xCu);
      swift_arrayDestroy();
      v88 = v85;
      v77 = v84;
      MEMORY[0x242611078](v88, -1, -1);
      v89 = v83;
      v90 = v123;
      MEMORY[0x242611078](v89, -1, -1);
    }
    else
    {
      v90 = v70;
      sub_23BCF56E0(v80, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
    }

    v94 = (uint64_t)v122;
    v95 = v151;
  }
  else
  {
    v91 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v106, v72, v41);
    sub_23BD45234();
    v92 = sub_23BD45240();
    v94 = (uint64_t)v49;
    if (v93)
      v77 = v92;
    else
      v77 = 0;
    if (v93)
      v95 = v93;
    else
      v95 = 0xE000000000000000;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v91, v41);
    v90 = v70;
  }
  v96 = v116;
  sub_23BCECE9C(v94, v116, &qword_256AA0FE0);
  v153 = v77;
  v154 = v95;
  sub_23BD45294();
  sub_23BCEEF14(&qword_256AA2450, (uint64_t (*)(uint64_t))MEMORY[0x24BE35120], MEMORY[0x24BE35148]);
  v97 = (uint64_t)v117;
  sub_23BD45300();
  v98 = v119;
  sub_23BCECE9C(v94 + *(int *)(v115 + 20), v119, &qword_256AA0FE8);
  v99 = v121;
  sub_23BCECE9C(v96, v121, &qword_256AA0FE0);
  sub_23BD452F4();
  sub_23BCEEED8(v97, &qword_256AA2008);
  sub_23BCEEED8(v96, &qword_256AA0FE0);
  v100 = v154;
  v101 = v120;
  v102 = (_QWORD *)(v99 + *(int *)(v120 + 20));
  *v102 = v153;
  v102[1] = v100;
  *(_BYTE *)(v99 + *(int *)(v101 + 24)) = 1;
  sub_23BCECF30(v98, v99 + *(int *)(v101 + 28), &qword_256AA0FE8);
  sub_23BCFC424(v99, v90, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCF56E0(v94, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
  return sub_23BCEEED8(v126, &qword_256AA2448);
}

uint64_t sub_23BD1CEB8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  *(double *)(v4 + 32) = a3;
  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 48) = type metadata accessor for DynamicImageAssetAction();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v4 + 64) = sub_23BD4584C();
  *(_QWORD *)(v4 + 72) = sub_23BD45810();
  *(_QWORD *)(v4 + 80) = v5;
  return swift_task_switch();
}

uint64_t sub_23BD1CF4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[7];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  v5 = (_QWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8) + 48));
  sub_23BCF6190(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *v5 = v3;
  v5[1] = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  v0[11] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
  *v6 = v0;
  v6[1] = sub_23BD1D008;
  return sub_23BD456A8();
}

uint64_t sub_23BD1D008()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1D068()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1D0A4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v4 + 32) = a3;
  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 48) = type metadata accessor for DynamicImageAssetAction();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  v5 = sub_23BD459F0();
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v4 + 88) = sub_23BD4584C();
  *(_QWORD *)(v4 + 96) = sub_23BD45810();
  *(_QWORD *)(v4 + 104) = v6;
  return swift_task_switch();
}

uint64_t sub_23BD1D160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_23BD45C00();
  v3 = v2;
  sub_23BD459E4();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256AA2EF0 + dword_256AA2EF0);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_23BD1D1F8;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_23BD1D1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_23BD1D280()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[7];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  v5 = (_QWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8) + 48));
  sub_23BCF6190(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *v5 = v3;
  v5[1] = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
  *v6 = v0;
  v6[1] = sub_23BD1D33C;
  return sub_23BD456A8();
}

uint64_t sub_23BD1D33C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1D39C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1D3E4()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD1D42C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v4 + 32) = a3;
  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 48) = type metadata accessor for DynamicImageAssetAction();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  v5 = sub_23BD459F0();
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v4 + 88) = sub_23BD4584C();
  *(_QWORD *)(v4 + 96) = sub_23BD45810();
  *(_QWORD *)(v4 + 104) = v6;
  return swift_task_switch();
}

uint64_t sub_23BD1D4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_23BD45C00();
  v3 = v2;
  sub_23BD459E4();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256AA2EF0 + dword_256AA2EF0);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_23BD1D580;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_23BD1D580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_23BD1D608()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[7];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  v5 = (_QWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8) + 48));
  sub_23BCF6190(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *v5 = v3;
  v5[1] = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2410);
  *v6 = v0;
  v6[1] = sub_23BD1D6C4;
  return sub_23BD456A8();
}

uint64_t sub_23BD1D6C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD1D724(uint64_t a1, int64_t a2)
{
  return _s12FitnessAsset012DynamicImageB7FeatureV7dispose10localState06sharedH0y8DataFlow05EmptyH0V_AA0cdbH0VztF_0(a2);
}

uint64_t sub_23BD1D730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t (*v48)(void);
  char *v49;
  _BYTE *v50;
  _QWORD v52[7];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v64 = a2;
  v52[3] = *(_QWORD *)a1;
  v52[4] = *(_QWORD *)(a1 + 8);
  v52[5] = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v53 = *(unsigned __int8 *)(a1 + 32);
  v54 = *(_QWORD *)(a1 + 40);
  v55 = v2;
  v52[6] = a1;
  v56 = *(_QWORD *)(a1 + 48);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2458);
  MEMORY[0x24BDAC7A8](v66);
  v67 = (uint64_t)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BD4536C();
  v5 = *(_QWORD *)(v4 - 8);
  v69 = v4;
  v70 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v52 - v9;
  v11 = sub_23BD45378();
  v12 = MEMORY[0x24BE37B08];
  v65 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v68 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v52[0] = (char *)v52 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v52[1] = (char *)v52 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v62 = (char *)v52 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v52[2] = (char *)v52 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v61 = (char *)v52 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v60 = (char *)v52 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v59 = (char *)v52 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v63 = (char *)v52 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v58 = (char *)v52 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)v52 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)v52 - v36;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v52 - v39;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)v52 - v42;
  sub_23BD453FC();
  sub_23BD45354();
  v57 = v43;
  sub_23BCF56E0((uint64_t)v43, (uint64_t (*)(_QWORD))v12);
  sub_23BD45408();
  sub_23BD45354();
  sub_23BCF56E0((uint64_t)v40, (uint64_t (*)(_QWORD))v12);
  v44 = sub_23BD45360();
  v45 = v69;
  v46 = *(void (**)(char *, uint64_t))(v70 + 8);
  v46(v7, v69);
  v46(v10, v45);
  if ((v44 & 1) != 0)
  {
    sub_23BD453F0();
    sub_23BD453FC();
    sub_23BD45408();
    v47 = v67 + *(int *)(v66 + 48);
    v48 = MEMORY[0x24BE37B08];
    sub_23BCFC424((uint64_t)v37, v67, (uint64_t (*)(_QWORD))MEMORY[0x24BE37B08]);
    sub_23BCFC424((uint64_t)v34, v47, (uint64_t (*)(_QWORD))v48);
    v49 = (char *)&loc_23BD1DB10 + 4 * word_23BD49174[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_23BD239AC();
  swift_allocError();
  *v50 = 6;
  return swift_willThrow();
}

uint64_t sub_23BD1E7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t (*v66)(void);
  char *v67;
  _BYTE *v68;
  _QWORD v70[21];
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v78 = a2;
  v2 = *(_QWORD *)(a1 + 8);
  v70[18] = *(_QWORD *)a1;
  v70[19] = v2;
  v70[20] = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v73 = a1;
  v74 = v3;
  v71 = *(unsigned __int8 *)(a1 + 32);
  v72 = *(_QWORD *)(a1 + 40);
  v75 = *(_QWORD *)(a1 + 48);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA24A0);
  MEMORY[0x24BDAC7A8](v81);
  v82 = (uint64_t)v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23BD4533C();
  v6 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  v84 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v70 - v10;
  v12 = sub_23BD45348();
  v13 = MEMORY[0x24BE37AE0];
  v80 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v70[10] = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v70[8] = (char *)v70 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v70[9] = (char *)v70 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v70[7] = (char *)v70 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v70[1] = (char *)v70 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v70[3] = (char *)v70 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v70[2] = (char *)v70 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v70[4] = (char *)v70 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v70[5] = (char *)v70 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v76 = (char *)v70 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v70[6] = (char *)v70 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v70[15] = (char *)v70 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v70[16] = (char *)v70 - v38;
  MEMORY[0x24BDAC7A8](v39);
  v70[14] = (char *)v70 - v40;
  MEMORY[0x24BDAC7A8](v41);
  v79 = (char *)v70 - v42;
  MEMORY[0x24BDAC7A8](v43);
  v70[13] = (char *)v70 - v44;
  MEMORY[0x24BDAC7A8](v45);
  v70[12] = (char *)v70 - v46;
  MEMORY[0x24BDAC7A8](v47);
  v70[17] = (char *)v70 - v48;
  MEMORY[0x24BDAC7A8](v49);
  v70[11] = (char *)v70 - v50;
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)v70 - v52;
  MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)v70 - v55;
  MEMORY[0x24BDAC7A8](v57);
  v59 = (uint64_t)v70 - v58;
  MEMORY[0x24BDAC7A8](v60);
  v62 = (char *)v70 - v61;
  sub_23BD453CC();
  sub_23BD45324();
  v77 = v62;
  sub_23BCF56E0((uint64_t)v62, (uint64_t (*)(_QWORD))v13);
  sub_23BD453D8();
  sub_23BD45324();
  sub_23BCF56E0(v59, (uint64_t (*)(_QWORD))v13);
  LOBYTE(v59) = sub_23BD45330();
  v63 = v83;
  v64 = *(void (**)(char *, uint64_t))(v84 + 8);
  v64(v8, v83);
  v64(v11, v63);
  if ((v59 & 1) != 0)
  {
    sub_23BD453CC();
    sub_23BD453D8();
    v65 = v82 + *(int *)(v81 + 48);
    v66 = MEMORY[0x24BE37AE0];
    sub_23BCFC424((uint64_t)v56, v82, (uint64_t (*)(_QWORD))MEMORY[0x24BE37AE0]);
    sub_23BCFC424((uint64_t)v53, v65, (uint64_t (*)(_QWORD))v66);
    v67 = (char *)&loc_23BD1ED00 + 4 * word_23BD4917E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_23BD239AC();
  swift_allocError();
  *v68 = 8;
  return swift_willThrow();
}

unint64_t sub_23BD203EC(double a1, double a2)
{
  uint64_t v4;

  sub_23BD45B88();
  sub_23BCFD2FC();
  v4 = sub_23BD45BB8();
  return sub_23BD2073C(v4, a1, a2);
}

unint64_t sub_23BD2044C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_23BD4515C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BD451F8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v2;
  sub_23BD45B88();
  sub_23BCECE9C(a1, (uint64_t)v16, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v17 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(a1 + *(int *)(v17 + 28), (uint64_t)v9, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v18 = v22;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v22, v9, v4);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
  }
  v19 = sub_23BD45BB8();
  return sub_23BD207B0(a1, v19);
}

unint64_t sub_23BD2073C(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  double *v7;
  double v8;
  BOOL v9;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (double *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v8 = v7[1];
      v9 = *v7 == a2;
      if (v8 == a3 && v9)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_23BD207B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;

  v5 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_23BCF6190(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v13 = _s12FitnessAsset05ImageB0V2eeoiySbAC_ACtFZ_0((uint64_t)v8, a1);
      sub_23BCF56E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      if (v13)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void (*sub_23BD208C0(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v5 = type metadata accessor for ImageAsset();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[8] = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23BCF6190(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v4[9] = sub_23BD21500(v4);
  v4[10] = sub_23BD213A8(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_23BD20978;
}

void sub_23BD20978(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_23BCF56E0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v2(v1, 0);
  free(v3);
  free(v1);
}

unint64_t sub_23BD209D8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23BD4596C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_23BD45B88();
        sub_23BD45BAC();
        sub_23BD45BAC();
        result = sub_23BD45BB8();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v9 < v8)
          goto LABEL_11;
LABEL_12:
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_OWORD *)(v10 + 16 * v3);
        v12 = (_OWORD *)(v10 + 16 * v6);
        if (v3 != v6 || v11 >= v12 + 1)
          *v11 = *v12;
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438) - 8) + 72);
        v15 = v14 * v3;
        result = v13 + v14 * v3;
        v16 = v14 * v6;
        v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v15 == v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v9 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v9)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_23BD20BE0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;

  v50 = sub_23BD4515C();
  v4 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD451F8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v53);
  v55 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2 + 64;
  v17 = -1 << *(_BYTE *)(a2 + 32);
  v18 = (a1 + 1) & ~v17;
  if (((1 << v18) & *(_QWORD *)(a2 + 64 + 8 * (v18 >> 6))) != 0)
  {
    v54 = v14;
    v51 = ~v17;
    v19 = sub_23BD4596C();
    if ((*(_QWORD *)(v16 + 8 * (v18 >> 6)) & (1 << v18)) != 0)
    {
      v48 = (v19 + 1) & v51;
      v49 = a2 + 64;
      v20 = *(_QWORD *)(v54 + 72);
      v21 = (uint64_t)v47;
      v52 = v20;
      do
      {
        v22 = *(_QWORD *)(a2 + 48);
        v54 = v20 * v18;
        v23 = v55;
        sub_23BCF6190(v22 + v20 * v18, v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        sub_23BD45B88();
        sub_23BCECE9C(v23, v21, &qword_256AA0FE0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v21, 1, v9) == 1)
        {
          sub_23BD45BA0();
        }
        else
        {
          v24 = v45;
          (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v45, v21, v9);
          sub_23BD45BA0();
          sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
          sub_23BD45714();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
        }
        v25 = v53;
        v26 = v55;
        sub_23BD45780();
        sub_23BD45780();
        swift_bridgeObjectRelease();
        sub_23BCECE9C(v26 + *(int *)(v25 + 28), (uint64_t)v8, &qword_256AA0FE8);
        v27 = v50;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v50) == 1)
        {
          sub_23BD45BA0();
        }
        else
        {
          v28 = a1;
          v29 = v9;
          v30 = v46;
          (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v46, v8, v27);
          sub_23BD45BA0();
          sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
          sub_23BD45714();
          v31 = v30;
          v9 = v29;
          a1 = v28;
          v21 = (uint64_t)v47;
          (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v27);
        }
        v16 = v49;
        v32 = sub_23BD45BB8();
        sub_23BCF56E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v33 = v32 & v51;
        v34 = v51;
        if ((uint64_t)a1 >= (uint64_t)v48)
        {
          v20 = v52;
          if (v33 < v48)
            goto LABEL_5;
        }
        else
        {
          v20 = v52;
          if (v33 >= v48)
            goto LABEL_17;
        }
        if ((uint64_t)a1 >= (uint64_t)v33)
        {
LABEL_17:
          if ((uint64_t)(v20 * a1) < v54 || *(_QWORD *)(a2 + 48) + v20 * a1 >= *(_QWORD *)(a2 + 48) + v54 + v20)
          {
            swift_arrayInitWithTakeFrontToBack();
LABEL_22:
            v20 = v52;
          }
          else if (v20 * a1 != v54)
          {
            swift_arrayInitWithTakeBackToFront();
            goto LABEL_22;
          }
          v35 = *(_QWORD *)(a2 + 56);
          v36 = (_QWORD *)(v35 + 8 * a1);
          v37 = (_QWORD *)(v35 + 8 * v18);
          if (a1 != v18 || (a1 = v18, v36 >= v37 + 1))
          {
            *v36 = *v37;
            a1 = v18;
          }
        }
LABEL_5:
        v18 = (v18 + 1) & v34;
      }
      while (((*(_QWORD *)(v16 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    }
    v38 = (uint64_t *)(v16 + 8 * (a1 >> 6));
    v39 = *v38;
    v40 = (-1 << a1) - 1;
  }
  else
  {
    v38 = (uint64_t *)(v16 + 8 * (a1 >> 6));
    v40 = *v38;
    v39 = (-1 << a1) - 1;
  }
  *v38 = v40 & v39;
  v41 = *(_QWORD *)(a2 + 16);
  v42 = __OFSUB__(v41, 1);
  v43 = v41 - 1;
  if (v42)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v43;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_23BD21124(uint64_t a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_23BD203EC(a3, a4);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19
            + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438) - 8) + 72)
            * v12;
        return sub_23BD23864(a1, v20);
      }
      return sub_23BD3E4AC(v12, a1, v18, a3, a4);
    }
    if (v17 >= v15 && (a2 & 1) == 0)
    {
      sub_23BD3E5E0();
      goto LABEL_7;
    }
    sub_23BD3D848(v15, a2 & 1);
    v22 = sub_23BD203EC(a3, a4);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_23BD3E4AC(v12, a1, v18, a3, a4);
    }
  }
  type metadata accessor for CGSize();
  result = sub_23BD45B34();
  __break(1u);
  return result;
}

uint64_t sub_23BD2124C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_23BD2044C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_23BD3E814();
    goto LABEL_7;
  }
  sub_23BD3DBB4(v16, a3 & 1);
  v22 = sub_23BD2044C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_23BD45B34();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_23BCF6190(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  return sub_23BD3E548(v13, (uint64_t)v10, a1, v19);
}

void (*sub_23BD213A8(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_23BD2044C(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_23BD214C4;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_23BD3E814();
      goto LABEL_7;
    }
    sub_23BD3DBB4(v14, a3 & 1);
    v18 = sub_23BD2044C(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for ImageAsset();
  result = (void (*)(uint64_t **))sub_23BD45B34();
  __break(1u);
  return result;
}

void sub_23BD214C4(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_23BD2152C(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_23BD21500(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_23BD21520;
}

uint64_t sub_23BD21520(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_23BD2152C(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v10 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)&v17 - v12;
  v14 = *a1;
  if (v14)
  {
    v15 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v15[7] + 8 * a4) = v14;
    }
    else
    {
      sub_23BCF6190(a5, (uint64_t)&v17 - v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      sub_23BD3E548(a4, (uint64_t)v13, v14, v15);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_23BD20BE0(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BD2161C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  char v33;
  uint64_t (*v34)();
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a1;
  v41 = a2;
  v2 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v2);
  v38 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v4);
  v39 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BD451C8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DynamicImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v38 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA23F8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t)&v21[*(int *)(v22 + 48)];
  sub_23BCF6190(v40, (uint64_t)v21, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
  sub_23BCF6190(v41, v23, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BCF6190((uint64_t)v21, (uint64_t)v18, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v23, v6);
      v26 = sub_23BD451B0();
      v36 = *(void (**)(char *, uint64_t))(v7 + 8);
      v36(v9, v6);
      v36(v18, v6);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BCF6190((uint64_t)v21, (uint64_t)v15, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = v39;
      sub_23BCFC424(v23, v39, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
      v26 = _s12FitnessAsset31DynamicArtworkLayoutEnvironmentV2eeoiySbAC_ACtFZ_0((uint64_t)v15, v25);
      sub_23BCF56E0(v25, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
      sub_23BCF56E0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
LABEL_18:
      sub_23BCF56E0((uint64_t)v21, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
      return v26 & 1;
    }
    v34 = type metadata accessor for DynamicArtworkLayoutEnvironment;
    v35 = (uint64_t)v15;
    goto LABEL_14;
  }
  sub_23BCF6190((uint64_t)v21, (uint64_t)v12, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
  v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8) + 48);
  v29 = *(double *)&v12[v27];
  v28 = *(double *)&v12[v27 + 8];
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    v34 = type metadata accessor for ImageAsset;
    v35 = (uint64_t)v12;
LABEL_14:
    sub_23BCF56E0(v35, (uint64_t (*)(_QWORD))v34);
LABEL_15:
    sub_23BCEEED8((uint64_t)v21, &qword_256AA23F8);
    goto LABEL_16;
  }
  v31 = *(double *)(v23 + v27);
  v30 = *(double *)(v23 + v27 + 8);
  v32 = v38;
  sub_23BCFC424(v23, v38, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v33 = static ImageAsset.== infix(_:_:)(v12, v32);
  sub_23BCF56E0(v32, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BCF56E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  if ((v33 & 1) != 0)
  {
    v26 = v28 == v30 && v29 == v31;
    goto LABEL_18;
  }
  sub_23BCF56E0((uint64_t)v21, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
LABEL_16:
  v26 = 0;
  return v26 & 1;
}

uint64_t _s12FitnessAsset012DynamicImageB7FeatureV7dispose10localState06sharedH0y8DataFlow05EmptyH0V_AA0cdbH0VztF_0(int64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  char *v42;

  v2 = type metadata accessor for ImageAsset();
  v37 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v39 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1540);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v34 - v8;
  v9 = *(int *)(type metadata accessor for DynamicImageAssetState() + 20);
  v40 = a1;
  v10 = *(_QWORD *)(a1 + v9);
  v11 = *(_QWORD *)(v10 + 64);
  v35 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v36 = (unint64_t)(v12 + 63) >> 6;
  v34 = v36 - 1;
  v38 = v10;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  if (!v14)
    goto LABEL_6;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v18 = v17 | (v16 << 6);
  v19 = (uint64_t)v42;
LABEL_5:
  v20 = v38;
  sub_23BCF6190(*(_QWORD *)(v38 + 48) + *(_QWORD *)(v37 + 72) * v18, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v21 = *(_QWORD *)(v20 + 56);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
  *(_QWORD *)&v6[*(int *)(v22 + 48)] = *(_QWORD *)(v21 + 8 * v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 0, 1, v22);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23BCECF30((uint64_t)v6, v19, &qword_256AA1540);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v19, 1, v26) == 1)
      return swift_release();
    v27 = *(_QWORD *)(v19 + *(int *)(v26 + 48));
    v28 = v19;
    v29 = v39;
    v30 = sub_23BCFC424(v28, v39, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    MEMORY[0x24BDAC7A8](v30);
    *(&v34 - 2) = v41;
    v31 = sub_23BD3F0B8(v27, (uint64_t (*)(char *, double, double))sub_23BD23CDC, (uint64_t)(&v34 - 4));
    v32 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v32);
    *(&v34 - 2) = v40;
    *(&v34 - 1) = v29;
    sub_23BD15800((uint64_t (*)(__int128 *))sub_23BD23CE4, (uint64_t)(&v34 - 4), v31);
    swift_release();
    result = sub_23BCF56E0(v29, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    if (v14)
      goto LABEL_4;
LABEL_6:
    v23 = v16 + 1;
    v19 = (uint64_t)v42;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 < v36)
    {
      v24 = *(_QWORD *)(v35 + 8 * v23);
      if (v24)
        goto LABEL_9;
      v16 += 2;
      if (v23 + 1 >= v36)
      {
        v16 = v23;
        goto LABEL_14;
      }
      v24 = *(_QWORD *)(v35 + 8 * v16);
      if (v24)
      {
        ++v23;
LABEL_9:
        v14 = (v24 - 1) & v24;
        v18 = __clz(__rbit64(v24)) + (v23 << 6);
        v16 = v23;
        goto LABEL_5;
      }
      if (v23 + 2 < v36)
        break;
    }
LABEL_14:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1548);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
    v14 = 0;
  }
  v24 = *(_QWORD *)(v35 + 8 * (v23 + 2));
  if (v24)
  {
    v23 += 2;
    goto LABEL_9;
  }
  v33 = v23 + 3;
  if (v23 + 3 >= v36)
  {
    v16 = v23 + 2;
    goto LABEL_14;
  }
  v24 = *(_QWORD *)(v35 + 8 * v33);
  if (v24)
  {
    v23 += 3;
    goto LABEL_9;
  }
  while (1)
  {
    v23 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v23 >= v36)
    {
      v16 = v34;
      goto LABEL_14;
    }
    v24 = *(_QWORD *)(v35 + 8 * v23);
    ++v33;
    if (v24)
      goto LABEL_9;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DynamicImageAssetFeature.TaskIdentifier(uint64_t a1)
{
  return sub_23BD21DE8(a1, qword_256AA23B8);
}

uint64_t sub_23BD21DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD21E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (double *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BCF6F84;
  return sub_23BD1D42C(a1, v6, v8, v9);
}

uint64_t sub_23BD21EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (double *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BCF6D4C;
  return sub_23BD1D0A4(a1, v6, v8, v9);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ImageAsset();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = sub_23BD451F8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v3, v4);
  swift_bridgeObjectRelease();
  v6 = v0 + v3 + *(int *)(v1 + 28);
  v7 = sub_23BD4515C();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t sub_23BD22054(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (double *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BCF6F84;
  return sub_23BD1CEB8(a1, v6, v8, v9);
}

unint64_t sub_23BD220F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2428);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (double *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2430);
    v7 = (_QWORD *)sub_23BD45A44();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_23BCECE9C(v9, (uint64_t)v5, &qword_256AA2428);
      v11 = *v5;
      v12 = v5[1];
      result = sub_23BD203EC(*v5, v12);
      if ((v14 & 1) != 0)
        break;
      v15 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v16 = (double *)(v7[6] + 16 * result);
      *v16 = v11;
      v16[1] = v12;
      v17 = v7[7];
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
      result = sub_23BCECF30(v8, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v15, &qword_256AA1438);
      v19 = v7[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v7[2] = v21;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_23BD2226C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for ImageAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v12 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DynamicImageAssetFeature(0) - 8) + 80);
  v5 = sub_23BD451F8();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  v7 = v0 + v3 + *(int *)(v1 + 28);
  v8 = sub_23BD4515C();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = sub_23BD451C8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v0 + ((v4 + ((((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4), v10);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD223F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DynamicImageAssetFeature(0) - 8) + 80);
  v9 = v1 + v5;
  v10 = *(double *)(v1 + v6);
  v11 = *(double *)(v1 + v6 + 8);
  v12 = *(double *)(v1 + v7);
  v13 = v1 + ((v8 + v7 + 8) & ~v8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_23BCF6F84;
  return sub_23BD177D0(a1, v9, v13, v10, v11, v12);
}

uint64_t sub_23BD224C8()
{
  return sub_23BCEEF14(&qword_256AA22A8, (uint64_t (*)(uint64_t))type metadata accessor for DynamicImageAssetAction, (uint64_t)&protocol conformance descriptor for DynamicImageAssetAction);
}

uint64_t sub_23BD224F4()
{
  return sub_23BCEEF14(&qword_256AA22B0, (uint64_t (*)(uint64_t))type metadata accessor for DynamicImageAssetAction, (uint64_t)&protocol conformance descriptor for DynamicImageAssetAction);
}

uint64_t sub_23BD22520()
{
  return sub_23BCEEF14(&qword_256AA1F20, (uint64_t (*)(uint64_t))type metadata accessor for DynamicImageAssetState, (uint64_t)&protocol conformance descriptor for DynamicImageAssetState);
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicImageAssetFeature(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23BD451C8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 8);
    v11 = *((_QWORD *)v10 + 5);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *((_QWORD *)v9 + 5) = v11;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DynamicImageAssetFeature(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BD451C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DynamicImageAssetFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23BD451C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 40);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 40) = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DynamicImageAssetFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23BD451C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  swift_retain();
  swift_release();
  v12 = v9[5];
  v8[4] = v9[4];
  v8[5] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DynamicImageAssetFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = sub_23BD451C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  return a1;
}

uint64_t assignWithTake for DynamicImageAssetFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;

  v6 = sub_23BD451C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + v7) = *v9;
  swift_release();
  *(_OWORD *)(v8 + 16) = v9[1];
  swift_release();
  *(_OWORD *)(v8 + 32) = v9[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD228BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23BD451C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD22944(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23BD451C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23BD229BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BD451C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BD22A2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = sub_23BD451F8();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(a1, a2, v14);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v18 = (int *)type metadata accessor for ImageAsset();
      v19 = v18[5];
      v20 = (uint64_t *)((char *)a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      *((_BYTE *)a1 + v18[6]) = *((_BYTE *)a2 + v18[6]);
      v23 = v18[7];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = sub_23BD4515C();
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      swift_bridgeObjectRetain();
      if (v28(v25, 1, v26))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)((char *)a1 + *(int *)(v30 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v30 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v7 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_23BD452AC();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      v12((char *)a1 + v7[8], (char *)a2 + v7[8], v11);
    }
    else
    {
      v17 = sub_23BD451C8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BD22CB4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v6 = sub_23BD451F8();
      v7 = *(_QWORD *)(v6 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      v8 = type metadata accessor for ImageAsset();
      swift_bridgeObjectRelease();
      v9 = a1 + *(int *)(v8 + 28);
      v10 = sub_23BD4515C();
      v11 = *(_QWORD *)(v10 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
      if (!(_DWORD)result)
      {
        v4 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
        v5 = v9;
        v3 = v10;
        return v4(v5, v3);
      }
      break;
    case 1:
      v12 = type metadata accessor for DynamicArtworkLayoutEnvironment();
      v13 = a1 + *(int *)(v12 + 24);
      v14 = sub_23BD452AC();
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v15(v13, v14);
      v5 = a1 + *(int *)(v12 + 32);
      v3 = v14;
      v4 = (uint64_t (*)(uint64_t, uint64_t))v15;
      return v4(v5, v3);
    case 0:
      v3 = sub_23BD451C8();
      v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v5 = a1;
      return v4(v5, v3);
  }
  return result;
}

_WORD *sub_23BD22E08(_WORD *a1, _WORD *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23BD451F8();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_WORD *, _WORD *, uint64_t))(v12 + 16))(a1, a2, v11);
      (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v15 = (int *)type metadata accessor for ImageAsset();
    v16 = v15[5];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *((_BYTE *)a1 + v15[6]) = *((_BYTE *)a2 + v15[6]);
    v20 = v15[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_23BD4515C();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
    *(_OWORD *)((char *)a1 + *(int *)(v27 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
    v6 = v5[6];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23BD452AC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    *((_BYTE *)a1 + v5[7]) = *((_BYTE *)a2 + v5[7]);
    v10((char *)a1 + v5[8], (char *)a2 + v5[8], v9);
  }
  else
  {
    v14 = sub_23BD451C8();
    (*(void (**)(_WORD *, _WORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_BYTE *sub_23BD23064(_BYTE *a1, _BYTE *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_BYTE *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23BD451F8();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v15 = (int *)type metadata accessor for ImageAsset();
      v16 = v15[5];
      v17 = &a1[v16];
      v18 = &a2[v16];
      *v17 = *v18;
      v17[1] = v18[1];
      a1[v15[6]] = a2[v15[6]];
      v19 = v15[7];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = sub_23BD4515C();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48);
      swift_bridgeObjectRetain();
      if (v24(v21, 1, v22))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)&a1[*(int *)(v26 + 48)] = *(_OWORD *)&a2[*(int *)(v26 + 48)];
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v5 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
      v6 = v5[6];
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = sub_23BD452AC();
      v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      a1[v5[7]] = a2[v5[7]];
      v10(&a1[v5[8]], &a2[v5[8]], v9);
    }
    else
    {
      v14 = sub_23BD451C8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *sub_23BD232E8(_WORD *a1, _WORD *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23BD451F8();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_WORD *, _WORD *, uint64_t))(v12 + 32))(a1, a2, v11);
      (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v15 = (int *)type metadata accessor for ImageAsset();
    *(_OWORD *)((char *)a1 + v15[5]) = *(_OWORD *)((char *)a2 + v15[5]);
    *((_BYTE *)a1 + v15[6]) = *((_BYTE *)a2 + v15[6]);
    v16 = v15[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_23BD4515C();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
    *(_OWORD *)((char *)a1 + *(int *)(v22 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
    v6 = v5[6];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23BD452AC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    *((_BYTE *)a1 + v5[7]) = *((_BYTE *)a2 + v5[7]);
    v10((char *)a1 + v5[8], (char *)a2 + v5[8], v9);
  }
  else
  {
    v14 = sub_23BD451C8();
    (*(void (**)(_WORD *, _WORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_WORD *sub_23BD2352C(_WORD *a1, _WORD *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23BD451F8();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_WORD *, _WORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v15 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)((char *)a1 + v15[5]) = *(_OWORD *)((char *)a2 + v15[5]);
      *((_BYTE *)a1 + v15[6]) = *((_BYTE *)a2 + v15[6]);
      v16 = v15[7];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = sub_23BD4515C();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)((char *)a1 + *(int *)(v22 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
      v6 = v5[6];
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = sub_23BD452AC();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      *((_BYTE *)a1 + v5[7]) = *((_BYTE *)a2 + v5[7]);
      v10((char *)a1 + v5[8], (char *)a2 + v5[8], v9);
    }
    else
    {
      v14 = sub_23BD451C8();
      (*(void (**)(_WORD *, _WORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BD23788()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  result = sub_23BD451C8();
  if (v1 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DynamicArtworkLayoutEnvironment();
    if (v2 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for ImageAsset();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v7 = &v4;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23BD23838()
{
  return sub_23BCEEF14(&qword_256AA23F0, type metadata accessor for DynamicImageAssetFeature.TaskIdentifier, (uint64_t)&unk_23BD49260);
}

uint64_t sub_23BD23864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD238AC()
{
  unint64_t result;

  result = qword_256AA2400;
  if (!qword_256AA2400)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageAssetLoadError, &type metadata for ImageAssetLoadError);
    atomic_store(result, (unint64_t *)&qword_256AA2400);
  }
  return result;
}

unint64_t sub_23BD238F0()
{
  unint64_t result;

  result = qword_256AA2420;
  if (!qword_256AA2420)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetError, &type metadata for AssetError);
    atomic_store(result, (unint64_t *)&qword_256AA2420);
  }
  return result;
}

uint64_t sub_23BD23938(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23BD23970(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD23D0C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_23BD23980()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

unint64_t sub_23BD239AC()
{
  unint64_t result;

  result = qword_256AA2460;
  if (!qword_256AA2460)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateError, &type metadata for ArtworkPredicateError);
    atomic_store(result, (unint64_t *)&qword_256AA2460);
  }
  return result;
}

uint64_t sub_23BD239F0()
{
  return objectdestroy_37Tm();
}

uint64_t sub_23BD239FC()
{
  return 16;
}

__n128 sub_23BD23A08(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_23BD23A14()
{
  unint64_t result;

  result = qword_256AA2478;
  if (!qword_256AA2478)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateInput, &type metadata for ArtworkPredicateInput);
    atomic_store(result, (unint64_t *)&qword_256AA2478);
  }
  return result;
}

uint64_t sub_23BD23A58()
{
  return objectdestroy_40Tm();
}

uint64_t sub_23BD23A60(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23BD23A94()
{
  return objectdestroy_43Tm();
}

uint64_t sub_23BD23A9C()
{
  return objectdestroy_46Tm();
}

uint64_t sub_23BD23AA8()
{
  return 16;
}

__n128 sub_23BD23AB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD23AC4()
{
  return 16;
}

__n128 sub_23BD23AD0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD23ADC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23B18()
{
  return objectdestroy_37Tm();
}

uint64_t objectdestroy_37Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23B5C()
{
  return 16;
}

__n128 sub_23BD23B68(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD23B74()
{
  return objectdestroy_40Tm();
}

uint64_t sub_23BD23B80()
{
  return 16;
}

__n128 sub_23BD23B8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD23B98()
{
  return objectdestroy_40Tm();
}

uint64_t objectdestroy_40Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23BE0()
{
  return objectdestroy_43Tm();
}

uint64_t sub_23BD23BE8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23C24()
{
  return objectdestroy_43Tm();
}

uint64_t sub_23BD23C2C()
{
  return objectdestroy_46Tm();
}

uint64_t sub_23BD23C34()
{
  return objectdestroy_43Tm();
}

uint64_t objectdestroy_43Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23C94()
{
  return objectdestroy_46Tm();
}

uint64_t objectdestroy_46Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD23CDC(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD15314(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23BD23CE4(double *a1)
{
  uint64_t v1;

  return sub_23BD153D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23BD23D0C(uint64_t a1, uint64_t a2, unint64_t a3, char a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v31 = a3;
  v29 = a1;
  v32 = a4 & 1;
  v34 = sub_23BD456E4();
  v37 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BD45708();
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2510);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23BD456F0();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD23FFC();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BEE5488], v15);
  v30 = sub_23BD458DC();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v29, v11);
  v19 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v20 = v19 + v13;
  v21 = swift_allocObject();
  v22 = ((v19 + v13) & 0xFFFFFFFFFFFFFFF8) + v21;
  v23 = v31;
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v21 + v19, v14, v11);
  *(_BYTE *)(v21 + v20) = v32;
  *(double *)(v22 + 8) = a5;
  aBlock[4] = sub_23BD24228;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23BD24274;
  aBlock[3] = &block_descriptor_0;
  v24 = _Block_copy(aBlock);
  sub_23BD08F40(a2, v23);
  sub_23BD456FC();
  v38 = MEMORY[0x24BEE4AF8];
  sub_23BD242B8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2528);
  sub_23BD24300();
  v26 = v33;
  v25 = v34;
  sub_23BD45960();
  v27 = (void *)v30;
  MEMORY[0x2426108E0](0, v10, v26, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  return swift_release();
}

unint64_t sub_23BD23FFC()
{
  unint64_t result;

  result = qword_256AA2518;
  if (!qword_256AA2518)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256AA2518);
  }
  return result;
}

void sub_23BD24038(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23BD24084()
{
  unint64_t v0;
  uint64_t v1;
  double v2;
  id v3;
  void *v4;
  id v5;
  char *v7;
  char v8;

  if ((v0 & 0xFF000000000000) != 0)
  {
    v3 = objc_allocWithZone(MEMORY[0x24BEBD640]);
    sub_23BD08F40(v1, v0);
    v4 = (void *)sub_23BD45168();
    v5 = objc_msgSend(v3, sel_initWithData_scale_, v4, v2);
    sub_23BD08EFC(v1, v0);

    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2510);
      return sub_23BD45828();
    }
    sub_23BD238F0();
    swift_allocError();
    v8 = 4;
  }
  else
  {
    sub_23BD238F0();
    swift_allocError();
    v8 = 3;
  }
  *v7 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2510);
  return sub_23BD4581C();
}

uint64_t sub_23BD241A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2510);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_23BD08EFC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_23BD24228()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2510);
  sub_23BD24038(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23BD24274(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_23BD242B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA2520;
  if (!qword_256AA2520)
  {
    v1 = sub_23BD456E4();
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&qword_256AA2520);
  }
  return result;
}

unint64_t sub_23BD24300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA2530;
  if (!qword_256AA2530)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA2528);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_256AA2530);
  }
  return result;
}

BOOL static ImageAssetLoadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_23BD24364()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD000000000000013;
}

uint64_t sub_23BD243A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD24E84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD243C8()
{
  sub_23BD2468C();
  return sub_23BD45C0C();
}

uint64_t sub_23BD243F0()
{
  sub_23BD2468C();
  return sub_23BD45C18();
}

uint64_t sub_23BD24418()
{
  sub_23BD24714();
  return sub_23BD45C0C();
}

uint64_t sub_23BD24440()
{
  sub_23BD24714();
  return sub_23BD45C18();
}

uint64_t sub_23BD24468()
{
  sub_23BD246D0();
  return sub_23BD45C0C();
}

uint64_t sub_23BD24490()
{
  sub_23BD246D0();
  return sub_23BD45C18();
}

uint64_t ImageAssetLoadError.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2538);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2540);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2548);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD2468C();
  sub_23BD45BF4();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BD246D0();
    sub_23BD45AC8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BD24714();
    sub_23BD45AC8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BD2468C()
{
  unint64_t result;

  result = qword_256AA2550;
  if (!qword_256AA2550)
  {
    result = MEMORY[0x242610FF4](&unk_23BD49764, &type metadata for ImageAssetLoadError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2550);
  }
  return result;
}

unint64_t sub_23BD246D0()
{
  unint64_t result;

  result = qword_256AA2558;
  if (!qword_256AA2558)
  {
    result = MEMORY[0x242610FF4](&unk_23BD49714, &type metadata for ImageAssetLoadError.InvalidRemoteURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2558);
  }
  return result;
}

unint64_t sub_23BD24714()
{
  unint64_t result;

  result = qword_256AA2560;
  if (!qword_256AA2560)
  {
    result = MEMORY[0x242610FF4](&unk_23BD496C4, &type metadata for ImageAssetLoadError.ImageLoadingFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2560);
  }
  return result;
}

uint64_t ImageAssetLoadError.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2568);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2570);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2578);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD2468C();
  v11 = v33;
  sub_23BD45BE8();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BD45AB0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BD459C0();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v21 = &type metadata for ImageAssetLoadError;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BD246D0();
    sub_23BD45A68();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BD24714();
    v22 = v6;
    sub_23BD45A68();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23BD24AB0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ImageAssetLoadError.init(from:)(a1, a2);
}

uint64_t sub_23BD24AC4(_QWORD *a1)
{
  return ImageAssetLoadError.encode(to:)(a1);
}

uint64_t ImageAssetLoadError.hash(into:)()
{
  return sub_23BD45B94();
}

uint64_t ImageAssetLoadError.hashValue.getter()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

unint64_t sub_23BD24B48()
{
  unint64_t result;

  result = qword_256AA2580;
  if (!qword_256AA2580)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ImageAssetLoadError, &type metadata for ImageAssetLoadError);
    atomic_store(result, (unint64_t *)&qword_256AA2580);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetLoadError()
{
  return &type metadata for ImageAssetLoadError;
}

uint64_t _s12FitnessAsset19ImageAssetLoadErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD24BEC + 4 * byte_23BD493F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD24C20 + 4 * byte_23BD493F0[v4]))();
}

uint64_t sub_23BD24C20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD24C28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD24C30);
  return result;
}

uint64_t sub_23BD24C3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD24C44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD24C48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD24C50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetLoadError.CodingKeys()
{
  return &type metadata for ImageAssetLoadError.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetLoadError.ImageLoadingFailureCodingKeys()
{
  return &type metadata for ImageAssetLoadError.ImageLoadingFailureCodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetLoadError.InvalidRemoteURLCodingKeys()
{
  return &type metadata for ImageAssetLoadError.InvalidRemoteURLCodingKeys;
}

unint64_t sub_23BD24C90()
{
  unint64_t result;

  result = qword_256AA2588;
  if (!qword_256AA2588)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4969C, &type metadata for ImageAssetLoadError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2588);
  }
  return result;
}

unint64_t sub_23BD24CD8()
{
  unint64_t result;

  result = qword_256AA2590;
  if (!qword_256AA2590)
  {
    result = MEMORY[0x242610FF4](&unk_23BD495BC, &type metadata for ImageAssetLoadError.ImageLoadingFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2590);
  }
  return result;
}

unint64_t sub_23BD24D20()
{
  unint64_t result;

  result = qword_256AA2598;
  if (!qword_256AA2598)
  {
    result = MEMORY[0x242610FF4](&unk_23BD495E4, &type metadata for ImageAssetLoadError.ImageLoadingFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2598);
  }
  return result;
}

unint64_t sub_23BD24D68()
{
  unint64_t result;

  result = qword_256AA25A0;
  if (!qword_256AA25A0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4956C, &type metadata for ImageAssetLoadError.InvalidRemoteURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA25A0);
  }
  return result;
}

unint64_t sub_23BD24DB0()
{
  unint64_t result;

  result = qword_256AA25A8;
  if (!qword_256AA25A8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD49594, &type metadata for ImageAssetLoadError.InvalidRemoteURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA25A8);
  }
  return result;
}

unint64_t sub_23BD24DF8()
{
  unint64_t result;

  result = qword_256AA25B0;
  if (!qword_256AA25B0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4960C, &type metadata for ImageAssetLoadError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA25B0);
  }
  return result;
}

unint64_t sub_23BD24E40()
{
  unint64_t result;

  result = qword_256AA25B8;
  if (!qword_256AA25B8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD49634, &type metadata for ImageAssetLoadError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA25B8);
  }
  return result;
}

uint64_t sub_23BD24E84(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x800000023BD4BED0 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BD4BEF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void DynamicPredicateDescriptor.makePredicateExpression<A>(using:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];

  v10[6] = a3;
  v10[7] = a4;
  v10[4] = a5;
  v10[5] = a1;
  v6 = sub_23BD453C0();
  v10[2] = *(_QWORD *)(v6 - 8);
  v10[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v10[1] = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = sub_23BD453E4();
  MEMORY[0x24BDAC7A8](v10[0]);
  v8 = sub_23BD45414();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23BD45318();
  MEMORY[0x24BDAC7A8](v9);
  __asm { BR              X10 }
}

uint64_t sub_23BD250A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = swift_projectBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v4, v1);
  DynamicPredicateBooleanValue.makePredicateExpression<A>(using:)(*(_QWORD *)(v3 - 112));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_23BD251D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  DynamicPredicateDescriptor.makePredicateExpression<A>(using:)(a1, *v4, a2, a3, a4);
}

FitnessAsset::FileType_optional __swiftcall FileType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FitnessAsset::FileType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23BD45A5C();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FileType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 6778986;
  else
    return 6778480;
}

uint64_t sub_23BD25274(char *a1, char *a2)
{
  return sub_23BD2705C(*a1, *a2);
}

FitnessAsset::FileType_optional sub_23BD25280(Swift::String *a1)
{
  return FileType.init(rawValue:)(*a1);
}

uint64_t sub_23BD2528C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FileType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23BD252B0()
{
  sub_23BD25484();
  return sub_23BD457BC();
}

uint64_t sub_23BD2530C()
{
  sub_23BD25484();
  return sub_23BD457B0();
}

unint64_t sub_23BD2535C()
{
  unint64_t result;

  result = qword_256AA25C0;
  if (!qword_256AA25C0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for FileType, &type metadata for FileType);
    atomic_store(result, (unint64_t *)&qword_256AA25C0);
  }
  return result;
}

uint64_t sub_23BD253A0()
{
  return sub_23BD27294();
}

uint64_t sub_23BD253A8()
{
  return sub_23BCFD228();
}

uint64_t sub_23BD253B0()
{
  return sub_23BD27480();
}

uint64_t storeEnumTagSinglePayload for FileType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD25404 + 4 * byte_23BD497CD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD25438 + 4 * byte_23BD497C8[v4]))();
}

uint64_t sub_23BD25438(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD25440(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD25448);
  return result;
}

uint64_t sub_23BD25454(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD2545CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD25460(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD25468(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileType()
{
  return &type metadata for FileType;
}

unint64_t sub_23BD25484()
{
  unint64_t result;

  result = qword_256AA25C8;
  if (!qword_256AA25C8)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for FileType, &type metadata for FileType);
    atomic_store(result, (unint64_t *)&qword_256AA25C8);
  }
  return result;
}

uint64_t static ArtworkPredicate.makeLogicalOperation(lhs:rhs:logicalOperator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t result;

  v6 = a3 & 1;
  sub_23BD0B8FC(a1, a4);
  result = sub_23BD0B8FC(a2, a4 + 40);
  *(_BYTE *)(a4 + 80) = v6;
  return result;
}

void static ArtworkPredicate.makeComparison<A, B>(lhs:rhs:comparisonOperator:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v20 = a5;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v17;
  (*(void (**)(char *, __n128))(v19 + 16))(v16, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a4);
  v21 = v18;
  sub_23BD25C4C((uint64_t)v16, a3, a6);
}

void static ArtworkPredicate.makeEquality<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  sub_23BD280C0((uint64_t)v15, a3, a5);
}

uint64_t static ArtworkPredicate.makeKeyPath<A, B>(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v9 = *a2;
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  ArtworkPredicateKeyPath.init(root:keyPath:)((uint64_t)v12, (uint64_t)a2, a3, *(_QWORD *)(*MEMORY[0x24BEE46A8] + v9 + 8), a4, a5);
  return swift_retain();
}

ValueMetadata *type metadata accessor for ArtworkPredicate()
{
  return &type metadata for ArtworkPredicate;
}

FitnessAsset::LogicalOperator_optional __swiftcall LogicalOperator.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  FitnessAsset::LogicalOperator_optional v2;

  v1 = sub_23BD45A5C();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = FitnessAsset_LogicalOperator_or;
  else
    v2.value = FitnessAsset_LogicalOperator_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t LogicalOperator.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 29295;
  else
    return 6581857;
}

uint64_t sub_23BD25844(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = LogicalOperator.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == LogicalOperator.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BD45B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BD258CC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23BD45A5C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_23BD25928@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = LogicalOperator.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23BD25950()
{
  sub_23BD25C08();
  return sub_23BD457BC();
}

uint64_t sub_23BD259AC()
{
  sub_23BD25C08();
  return sub_23BD457B0();
}

unint64_t sub_23BD259FC()
{
  unint64_t result;

  result = qword_256AA25D0;
  if (!qword_256AA25D0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for LogicalOperator, &type metadata for LogicalOperator);
    atomic_store(result, (unint64_t *)&qword_256AA25D0);
  }
  return result;
}

uint64_t sub_23BD25A40()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_23BD45B88();
  LogicalOperator.rawValue.getter(v1);
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t sub_23BD25AA0()
{
  char *v0;

  LogicalOperator.rawValue.getter(*v0);
  sub_23BD45780();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD25AE0()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_23BD45B88();
  LogicalOperator.rawValue.getter(v1);
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t storeEnumTagSinglePayload for LogicalOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD25B88 + 4 * byte_23BD498F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD25BBC + 4 * asc_23BD498F4[v4]))();
}

uint64_t sub_23BD25BBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD25BC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD25BCCLL);
  return result;
}

uint64_t sub_23BD25BD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD25BE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD25BE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD25BEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogicalOperator()
{
  return &type metadata for LogicalOperator;
}

unint64_t sub_23BD25C08()
{
  unint64_t result;

  result = qword_256AA25D8;
  if (!qword_256AA25D8)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for LogicalOperator, &type metadata for LogicalOperator);
    atomic_store(result, (unint64_t *)&qword_256AA25D8);
  }
  return result;
}

void sub_23BD25C4C(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ArtworkPredicateComparison();
}

uint64_t sub_23BD25CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
  *(_BYTE *)(v3 + *(int *)(a1 + 64)) = v4;
  return result;
}

uint64_t ArtworkPredicateComparison.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ArtworkPredicateComparison.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t ArtworkPredicateComparison.comparisonOperator.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 64));
  return result;
}

Swift::Bool __swiftcall ArtworkPredicateComparison.evaluate()()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  __n128 v7;
  Swift::Bool result;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 16))(v4, v3, v7);
  (*(void (**)(_QWORD))(*(_QWORD *)(v2 + 40) + 16))(*(_QWORD *)(v2 + 24));
  __asm { BR              X10 }
  return result;
}

uint64_t sub_23BD25E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_23BD45720();
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v0);
  v5(v2, v0);
  return v4 & 1;
}

BOOL sub_23BD25ED8@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = ArtworkPredicateComparison.evaluate()();
  *a1 = result;
  return result;
}

uint64_t sub_23BD25F00()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BD25F08()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BD25F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v10 + (v9 & (unint64_t)~v8) + 1 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_BYTE *)((((unint64_t)v4 + v9) & v15) + v10) = *(_BYTE *)(v16 + v10);
  }
  return v4;
}

uint64_t sub_23BD26088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_23BD260E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t sub_23BD26160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t sub_23BD261E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t sub_23BD26260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t sub_23BD262E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFC)
    v8 = 252;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_26;
  v13 = v11 + (v10 & ~v9) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_26:
      if (v5 == v8)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v20 = (v10 + a1) & ~v9;
      if (v7 == v8)
        return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
      v21 = *(unsigned __int8 *)(v20 + v11);
      if (v21 >= 4)
        return v21 - 3;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_26;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -1)
    return v8 + v18 + 1;
  if (v13 <= 3)
    v19 = v11 + (v10 & ~(_DWORD)v9) + 1;
  else
    v19 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BD263CC + 4 * byte_23BD49A14[v19 - 1]))();
}

void sub_23BD26458(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFC)
    v7 = 252;
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void type metadata accessor for ArtworkPredicateComparison()
{
  JUMPOUT(0x242610F64);
}

uint64_t ArtworkPredicateKeyPath.init(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = type metadata accessor for ArtworkPredicateKeyPath(0, a3, a4, a5);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&a6[*(int *)(v10 + 44)], a1, a3);
  *(_QWORD *)a6 = a2;
  return result;
}

uint64_t type metadata accessor for ArtworkPredicateKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArtworkPredicateKeyPath);
}

uint64_t ArtworkPredicateKeyPath.keyPath.getter()
{
  return swift_retain();
}

uint64_t ArtworkPredicateKeyPath.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t ArtworkPredicateKeyPath.evaluate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 16))(v2, v1, v5);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t sub_23BD267E8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BD267F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BD26868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_23BD26924(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_23BD26968(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *sub_23BD269D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_23BD26A48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_23BD26A98(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_23BD26B00(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BD26BD4 + 4 * byte_23BD49AA0[(v9 - 1)]))();
}

void sub_23BD26C44(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

BOOL static ArtworkPredicateError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ArtworkPredicateError.hash(into:)()
{
  return sub_23BD45B94();
}

uint64_t ArtworkPredicateError.hashValue.getter()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

unint64_t sub_23BD26EBC()
{
  unint64_t result;

  result = qword_256AA2710;
  if (!qword_256AA2710)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateError, &type metadata for ArtworkPredicateError);
    atomic_store(result, (unint64_t *)&qword_256AA2710);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArtworkPredicateError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtworkPredicateError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23BD26FDC + 4 * byte_23BD49B25[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23BD27010 + 4 * byte_23BD49B20[v4]))();
}

uint64_t sub_23BD27010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD27018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD27020);
  return result;
}

uint64_t sub_23BD2702C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD27034);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23BD27038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD27040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkPredicateError()
{
  return &type metadata for ArtworkPredicateError;
}

uint64_t sub_23BD2705C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 6778986;
  else
    v2 = 6778480;
  if ((a2 & 1) != 0)
    v3 = 6778986;
  else
    v3 = 6778480;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_23BD45B1C();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_23BD270C4(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aPhone_2[8 * a1] == *(_QWORD *)&aPhone_2[8 * a2] && qword_23BD49D98[a1] == qword_23BD49D98[a2])
    v3 = 1;
  else
    v3 = sub_23BD45B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_23BD27148(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23BD27194(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23BD271FC + 4 * byte_23BD49C34[a2]))(0x5472657461657267);
}

uint64_t sub_23BD271FC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5472657461657267 && v1 == 0xEB000000006E6168)
    v2 = 1;
  else
    v2 = sub_23BD45B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23BD27294()
{
  sub_23BD45B88();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

void sub_23BD272F4(char a1)
{
  sub_23BD45B88();
  __asm { BR              X10 }
}

uint64_t sub_23BD27348()
{
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

void sub_23BD273BC(uint64_t a1, char a2)
{
  sub_23BD45B88();
  __asm { BR              X10 }
}

uint64_t sub_23BD2740C()
{
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t sub_23BD27480()
{
  sub_23BD45B88();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

FitnessAsset::ComparisonOperator_optional __swiftcall ComparisonOperator.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FitnessAsset::ComparisonOperator_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23BD45A5C();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ComparisonOperator.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD27568 + 4 * byte_23BD49C40[*v0]))(0xD000000000000012, 0x800000023BD4BA80);
}

uint64_t sub_23BD27568()
{
  return 0x5472657461657267;
}

uint64_t sub_23BD27588()
{
  return 0x6E6168547373656CLL;
}

void sub_23BD275B4(char *a1)
{
  sub_23BD27148(*a1);
}

FitnessAsset::ComparisonOperator_optional sub_23BD275C0(Swift::String *a1)
{
  return ComparisonOperator.init(rawValue:)(*a1);
}

uint64_t sub_23BD275CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ComparisonOperator.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23BD275F0()
{
  sub_23BD277C4();
  return sub_23BD457BC();
}

uint64_t sub_23BD2764C()
{
  sub_23BD277C4();
  return sub_23BD457B0();
}

unint64_t sub_23BD2769C()
{
  unint64_t result;

  result = qword_256AA2718;
  if (!qword_256AA2718)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ComparisonOperator, &type metadata for ComparisonOperator);
    atomic_store(result, (unint64_t *)&qword_256AA2718);
  }
  return result;
}

void sub_23BD276E0()
{
  char *v0;

  sub_23BD272F4(*v0);
}

void sub_23BD276E8(uint64_t a1)
{
  char *v1;

  sub_23BCFD258(a1, *v1);
}

void sub_23BD276F0(uint64_t a1)
{
  char *v1;

  sub_23BD273BC(a1, *v1);
}

uint64_t storeEnumTagSinglePayload for ComparisonOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD27744 + 4 * byte_23BD49C49[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD27778 + 4 * byte_23BD49C44[v4]))();
}

uint64_t sub_23BD27778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD27780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD27788);
  return result;
}

uint64_t sub_23BD27794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD2779CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD277A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD277A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComparisonOperator()
{
  return &type metadata for ComparisonOperator;
}

unint64_t sub_23BD277C4()
{
  unint64_t result;

  result = qword_256AA2720;
  if (!qword_256AA2720)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ComparisonOperator, &type metadata for ComparisonOperator);
    atomic_store(result, (unint64_t *)&qword_256AA2720);
  }
  return result;
}

uint64_t ArtworkPredicateValue.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t ArtworkPredicateValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_23BD2783C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BD27844()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BD278B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23BD27920(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23BD27930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_23BD27960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_23BD27990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_23BD279C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_23BD279F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BD27AA0 + 4 * byte_23BD49DC0[(v7 - 1)]))();
}

void sub_23BD27AF0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for ArtworkPredicateValue()
{
  JUMPOUT(0x242610F64);
}

uint64_t dispatch thunk of ArtworkPredicateExpression.evaluate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ArtworkPredicateInputProtocol.dynamicTypeSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ArtworkPredicateInputProtocol.gridSizeClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ArtworkPredicateInputProtocol.horizontalSizeClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ArtworkPredicateInputProtocol.platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ArtworkPredicateInputProtocol.verticalSizeClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ArtworkPredicateExpressible.makePredicateExpression<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t ArtworkPredicateLogicalOperation.lhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BD0B8FC(v1, a1);
}

uint64_t ArtworkPredicateLogicalOperation.rhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BD0B8FC(v1 + 40, a1);
}

uint64_t ArtworkPredicateLogicalOperation.logicalOperator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

Swift::Bool __swiftcall ArtworkPredicateLogicalOperation.evaluate()()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 80);
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  if ((v2 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v15, v3, v4);
    v7 = v15;
    sub_23BD27E08((uint64_t)v1, (uint64_t)v11 + 1);
    if (v7 != 1)
    {
      v6 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v15, v3, v4);
  v5 = v15;
  sub_23BD27E08((uint64_t)v1, (uint64_t)v11 + 1);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    v8 = v13;
    v9 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v11, v8, v9);
    v6 = v11[0];
    goto LABEL_7;
  }
  v6 = 1;
LABEL_7:
  sub_23BD27E74((uint64_t)v11 + 1);
  return v6;
}

uint64_t sub_23BD27E08(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 40, a1 + 40);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  return a2;
}

uint64_t sub_23BD27E74(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return a1;
}

BOOL sub_23BD27EA0@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = ArtworkPredicateLogicalOperation.evaluate()();
  *a1 = result;
  return result;
}

uint64_t destroy for ArtworkPredicateLogicalOperation(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for ArtworkPredicateLogicalOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for ArtworkPredicateLogicalOperation(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ArtworkPredicateLogicalOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArtworkPredicateLogicalOperation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtworkPredicateLogicalOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtworkPredicateLogicalOperation()
{
  return &type metadata for ArtworkPredicateLogicalOperation;
}

void sub_23BD280C0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for ArtworkPredicateEquality();
}

uint64_t sub_23BD28124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

uint64_t ArtworkPredicateEquality.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ArtworkPredicateEquality.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

Swift::Bool __swiftcall ArtworkPredicateEquality.evaluate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 16))(v3, v2, v9);
  (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 40) + 16))(*(_QWORD *)(v1 + 24));
  LOBYTE(v1) = sub_23BD45750();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, AssociatedTypeWitness);
  v12(v11, AssociatedTypeWitness);
  return v1 & 1;
}

BOOL sub_23BD282A8@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = ArtworkPredicateEquality.evaluate()();
  *a1 = result;
  return result;
}

uint64_t sub_23BD282D0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BD282D8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BD28364(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t sub_23BD28434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_23BD284A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_23BD2850C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_23BD28578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_23BD285E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BD286C0 + 4 * byte_23BD49F20[v17 - 1]))();
}

void sub_23BD2873C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ArtworkPredicateEquality()
{
  JUMPOUT(0x242610F64);
}

void __swiftcall ArtworkPredicateInput.init(dynamicTypeSize:gridSizeClass:horizontalSizeClass:platform:verticalSizeClass:)(FitnessAsset::ArtworkPredicateInput *__return_ptr retstr, Swift::Int dynamicTypeSize, Swift::Int gridSizeClass, Swift::String horizontalSizeClass, FitnessAsset::AssetPlatform platform, Swift::String verticalSizeClass)
{
  retstr->dynamicTypeSize = dynamicTypeSize;
  retstr->gridSizeClass = gridSizeClass;
  retstr->horizontalSizeClass = horizontalSizeClass;
  retstr->platform = platform;
  retstr->verticalSizeClass = verticalSizeClass;
}

uint64_t ArtworkPredicateInput.dynamicTypeSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ArtworkPredicateInput.gridSizeClass.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ArtworkPredicateInput.horizontalSizeClass.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArtworkPredicateInput.platform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ArtworkPredicateInput.verticalSizeClass.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23BD289CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD28A08 + 4 * byte_23BD49F80[a1]))(0xD000000000000013, 0x800000023BD4BF10);
}

uint64_t sub_23BD28A08()
{
  return 0x5463696D616E7964;
}

uint64_t sub_23BD28A2C()
{
  return 0x657A695364697267;
}

uint64_t sub_23BD28A50()
{
  return 0x6D726F6674616C70;
}

unint64_t sub_23BD28A68()
{
  return 0xD000000000000011;
}

uint64_t sub_23BD28A84()
{
  unsigned __int8 *v0;

  return sub_23BD289CC(*v0);
}

uint64_t sub_23BD28A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD29904(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD28AB0()
{
  sub_23BD28D48();
  return sub_23BD45C0C();
}

uint64_t sub_23BD28AD8()
{
  sub_23BD28D48();
  return sub_23BD45C18();
}

uint64_t sub_23BD28B00()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_23BD28B08()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_23BD28B10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23BD28B3C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_23BD28B44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArtworkPredicateInput.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2870);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v15 = *(_QWORD *)(v1 + 16);
  v16 = v8;
  v14 = *(_QWORD *)(v1 + 24);
  v13 = *(unsigned __int8 *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v12[0] = *(_QWORD *)(v1 + 48);
  v12[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD28D48();
  sub_23BD45BF4();
  v22 = 0;
  sub_23BD45AEC();
  if (!v2)
  {
    v10 = v13;
    v21 = 1;
    sub_23BD45AEC();
    v20 = 2;
    sub_23BD45AE0();
    v19 = v10;
    v18 = 3;
    sub_23BD28D8C();
    sub_23BD45AF8();
    v17 = 4;
    sub_23BD45AE0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BD28D48()
{
  unint64_t result;

  result = qword_256AA2878;
  if (!qword_256AA2878)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A15C, &type metadata for ArtworkPredicateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2878);
  }
  return result;
}

unint64_t sub_23BD28D8C()
{
  unint64_t result;

  result = qword_256AA2880;
  if (!qword_256AA2880)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetPlatform, &type metadata for AssetPlatform);
    atomic_store(result, (unint64_t *)&qword_256AA2880);
  }
  return result;
}

uint64_t ArtworkPredicateInput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  char v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2888);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD28D48();
  sub_23BD45BE8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v30 = 0;
  v9 = sub_23BD45A98();
  v29 = 1;
  v10 = sub_23BD45A98();
  v28 = 2;
  v11 = sub_23BD45A8C();
  v13 = v12;
  v23 = v11;
  v26 = 3;
  sub_23BD29028();
  swift_bridgeObjectRetain();
  v24 = v13;
  sub_23BD45AA4();
  v22 = v27;
  v25 = 4;
  v14 = sub_23BD45A8C();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v14;
  v18(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  v20 = v24;
  *(_QWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 24) = v20;
  *(_BYTE *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BD29028()
{
  unint64_t result;

  result = qword_256AA2890;
  if (!qword_256AA2890)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetPlatform, &type metadata for AssetPlatform);
    atomic_store(result, (unint64_t *)&qword_256AA2890);
  }
  return result;
}

uint64_t sub_23BD2906C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ArtworkPredicateInput.init(from:)(a1, a2);
}

uint64_t sub_23BD29080(_QWORD *a1)
{
  return ArtworkPredicateInput.encode(to:)(a1);
}

uint64_t ArtworkPredicateInput.hash(into:)()
{
  sub_23BD45B94();
  sub_23BD45B94();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  return swift_bridgeObjectRelease();
}

uint64_t ArtworkPredicateInput.hashValue.getter()
{
  sub_23BD45B88();
  sub_23BD45B94();
  sub_23BD45B94();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t sub_23BD29244()
{
  sub_23BD45B88();
  sub_23BD45B94();
  sub_23BD45B94();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45BB8();
}

uint64_t _s12FitnessAsset21ArtworkPredicateInputV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v4 = *(_BYTE *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_BYTE *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      goto LABEL_6;
    v10 = sub_23BD45B1C();
    result = 0;
    if ((v10 & 1) != 0)
    {
LABEL_6:
      if ((sub_23BD270C4(v4, v7) & 1) != 0)
      {
        if (v5 == v8 && v6 == v9)
          return 1;
        else
          return sub_23BD45B1C();
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_23BD2940C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23BD29440();
  a1[2] = sub_23BD29484();
  result = sub_23BD294C8();
  a1[3] = result;
  return result;
}

unint64_t sub_23BD29440()
{
  unint64_t result;

  result = qword_256AA2898;
  if (!qword_256AA2898)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateInput, &type metadata for ArtworkPredicateInput);
    atomic_store(result, (unint64_t *)&qword_256AA2898);
  }
  return result;
}

unint64_t sub_23BD29484()
{
  unint64_t result;

  result = qword_256AA28A0;
  if (!qword_256AA28A0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateInput, &type metadata for ArtworkPredicateInput);
    atomic_store(result, (unint64_t *)&qword_256AA28A0);
  }
  return result;
}

unint64_t sub_23BD294C8()
{
  unint64_t result;

  result = qword_256AA28A8;
  if (!qword_256AA28A8)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateInput, &type metadata for ArtworkPredicateInput);
    atomic_store(result, (unint64_t *)&qword_256AA28A8);
  }
  return result;
}

unint64_t sub_23BD29510()
{
  unint64_t result;

  result = qword_256AA28B0;
  if (!qword_256AA28B0)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateInput, &type metadata for ArtworkPredicateInput);
    atomic_store(result, (unint64_t *)&qword_256AA28B0);
  }
  return result;
}

uint64_t destroy for ArtworkPredicateInput()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArtworkPredicateInput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArtworkPredicateInput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ArtworkPredicateInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArtworkPredicateInput(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtworkPredicateInput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtworkPredicateInput()
{
  return &type metadata for ArtworkPredicateInput;
}

uint64_t storeEnumTagSinglePayload for ArtworkPredicateInput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD297AC + 4 * byte_23BD49F8A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD297E0 + 4 * byte_23BD49F85[v4]))();
}

uint64_t sub_23BD297E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD297E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD297F0);
  return result;
}

uint64_t sub_23BD297FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD29804);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD29808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD29810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkPredicateInput.CodingKeys()
{
  return &type metadata for ArtworkPredicateInput.CodingKeys;
}

unint64_t sub_23BD29830()
{
  unint64_t result;

  result = qword_256AA28B8;
  if (!qword_256AA28B8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A134, &type metadata for ArtworkPredicateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA28B8);
  }
  return result;
}

unint64_t sub_23BD29878()
{
  unint64_t result;

  result = qword_256AA28C0;
  if (!qword_256AA28C0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A0A4, &type metadata for ArtworkPredicateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA28C0);
  }
  return result;
}

unint64_t sub_23BD298C0()
{
  unint64_t result;

  result = qword_256AA28C8;
  if (!qword_256AA28C8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A0CC, &type metadata for ArtworkPredicateInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA28C8);
  }
  return result;
}

uint64_t sub_23BD29904(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x5463696D616E7964 && a2 == 0xEF657A6953657079;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A695364697267 && a2 == 0xED00007373616C43 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BD4BF10 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023BD4BF30)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t MonogramLoadState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t State;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v1 = v0;
  v2 = sub_23BD451A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD03B88(v1, (uint64_t)v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 2, v12))
    return sub_23BD45B94();
  v13 = &v11[*(int *)(v12 + 48)];
  sub_23BD0214C((uint64_t)v11, (uint64_t)v8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
  sub_23BD45B94();
  sub_23BCEEF14(&qword_256AA28D0, (uint64_t (*)(uint64_t))type metadata accessor for Monogram, (uint64_t)&protocol conformance descriptor for Monogram);
  sub_23BD2ADEC();
  sub_23BD45BD0();
  sub_23BCEEF14(qword_256AA1168, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23BD45714();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_23BCEEED8((uint64_t)v8, &qword_256AA19D0);
}

uint64_t sub_23BD29D2C(char a1)
{
  return *(_QWORD *)&aIdle_1[8 * a1];
}

uint64_t sub_23BD29D4C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x637465467473616CLL;
  else
    return 12383;
}

uint64_t sub_23BD29D80()
{
  char *v0;

  return sub_23BD29D2C(*v0);
}

uint64_t sub_23BD29D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD2BFAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD29DAC()
{
  sub_23BD2AE30();
  return sub_23BD45C0C();
}

uint64_t sub_23BD29DD4()
{
  sub_23BD2AE30();
  return sub_23BD45C18();
}

uint64_t sub_23BD29DFC()
{
  char *v0;

  return sub_23BD29D4C(*v0);
}

uint64_t sub_23BD29E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD2C0E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD29E28()
{
  sub_23BD2AE74();
  return sub_23BD45C0C();
}

uint64_t sub_23BD29E50()
{
  sub_23BD2AE74();
  return sub_23BD45C18();
}

uint64_t sub_23BD29E78()
{
  sub_23BD2AEB8();
  return sub_23BD45C0C();
}

uint64_t sub_23BD29EA0()
{
  sub_23BD2AEB8();
  return sub_23BD45C18();
}

uint64_t sub_23BD29EC8()
{
  sub_23BD2AEFC();
  return sub_23BD45C0C();
}

uint64_t sub_23BD29EF0()
{
  sub_23BD2AEFC();
  return sub_23BD45C18();
}

uint64_t MonogramLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA28E0);
  v32 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23BD451A4();
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA28E8);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA28F0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA28F8);
  v40 = *(_QWORD *)(v15 - 8);
  v41 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD2AE30();
  sub_23BD45BF4();
  sub_23BD03B88(v43, (uint64_t)v14);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v14, 2, v18);
  if (v19)
  {
    if (v19 == 1)
    {
      v44 = 0;
      sub_23BD2AEFC();
      v20 = v41;
      sub_23BD45AC8();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      v45 = 1;
      sub_23BD2AEB8();
      v20 = v41;
      sub_23BD45AC8();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v20);
  }
  else
  {
    v21 = v32;
    v22 = v33;
    v23 = &v14[*(int *)(v18 + 48)];
    sub_23BD0214C((uint64_t)v14, v33);
    v24 = v35;
    v25 = v37;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v39, v23, v37);
    v48 = 2;
    sub_23BD2AE74();
    v26 = v41;
    sub_23BD45AC8();
    v47 = 0;
    sub_23BD2AF40(&qword_256AA1A08, MEMORY[0x24BE37C50]);
    v27 = v36;
    v28 = v42;
    sub_23BD45AF8();
    if (!v28)
    {
      v46 = 1;
      sub_23BCEEF14(&qword_256AA1140, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
      sub_23BD45AF8();
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v38, v27);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v39, v25);
    sub_23BCEEED8(v22, &qword_256AA19D0);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v26);
  }
}

uint64_t MonogramLoadState.hashValue.getter()
{
  sub_23BD45B88();
  MonogramLoadState.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t MonogramLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t State;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2920);
  v4 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  v53 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2928);
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2930);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2938);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v45 - v18;
  v20 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BD2AE30();
  v58 = v13;
  v21 = v60;
  sub_23BD45BE8();
  if (v21)
    goto LABEL_9;
  v23 = v55;
  v22 = v56;
  v46 = v16;
  v47 = v19;
  v24 = v57;
  v60 = v11;
  v25 = sub_23BD45AB0();
  v26 = v10;
  if (*(_QWORD *)(v25 + 16) != 1)
  {
    v31 = v10;
    v32 = sub_23BD459C0();
    swift_allocError();
    v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v34 = State;
    v35 = v58;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x24BEE26D0], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v31);
LABEL_9:
    v40 = (uint64_t)v59;
    return __swift_destroy_boxed_opaque_existential_1(v40);
  }
  v27 = v58;
  v28 = v60;
  if (*(_BYTE *)(v25 + 32))
  {
    if (*(_BYTE *)(v25 + 32) == 1)
    {
      v62 = 1;
      sub_23BD2AEB8();
      sub_23BD45A68();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v22, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v10);
      v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
      v30 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v47, 2, 2, v29);
    }
    else
    {
      v56 = (char *)v25;
      v65 = 2;
      sub_23BD2AE74();
      v36 = v27;
      sub_23BD45A68();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      v64 = 0;
      sub_23BD2AF40(&qword_256AA1A60, MEMORY[0x24BE37C58]);
      v37 = (uint64_t)v46;
      v38 = v52;
      v39 = v24;
      sub_23BD45AA4();
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
      sub_23BD451A4();
      v63 = 1;
      sub_23BCEEF14(&qword_256AA1158, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
      sub_23BD45AA4();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v26);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v37, 0, 2, v44);
      v30 = (uint64_t)v47;
      sub_23BD2AFF8(v37, (uint64_t)v47);
    }
  }
  else
  {
    v61 = 0;
    sub_23BD2AEFC();
    sub_23BD45A68();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v49);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v10);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
    v30 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v47, 1, 2, v42);
  }
  v43 = (uint64_t)v59;
  sub_23BD2AFF8(v30, v54);
  v40 = v43;
  return __swift_destroy_boxed_opaque_existential_1(v40);
}

uint64_t sub_23BD2A98C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MonogramLoadState.init(from:)(a1, a2);
}

uint64_t sub_23BD2A9A0(_QWORD *a1)
{
  return MonogramLoadState.encode(to:)(a1);
}

uint64_t sub_23BD2A9B4()
{
  sub_23BD45B88();
  MonogramLoadState.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BD2A9F4()
{
  sub_23BD45B88();
  MonogramLoadState.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t _s12FitnessAsset13MonogramStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t State;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;

  v4 = sub_23BD451A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for MonogramLoadState();
  MEMORY[0x24BDAC7A8](State);
  v39 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A18);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v18[*(int *)(v19 + 48)];
  sub_23BD03B88(a1, (uint64_t)v18);
  sub_23BD03B88(a2, v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  v23 = v22(v18, 2, v21);
  if (!v23)
  {
    v38 = v10;
    v24 = v39;
    sub_23BD03B88((uint64_t)v18, v39);
    v25 = *(int *)(v21 + 48);
    v26 = v24 + v25;
    if (!v22((char *)v20, 2, v21))
    {
      v29 = v20 + v25;
      v30 = v20;
      v31 = (uint64_t)v13;
      sub_23BD0214C(v30, (uint64_t)v13);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
      v33 = v4;
      v32(v38, v26, v4);
      v32(v7, v29, v4);
      type metadata accessor for Monogram();
      sub_23BCEEF14(&qword_256AA2A20, (uint64_t (*)(uint64_t))type metadata accessor for Monogram, (uint64_t)&protocol conformance descriptor for Monogram);
      sub_23BD0588C();
      sub_23BCF6C74();
      v34 = v38;
      v35 = v39;
      LOBYTE(v29) = sub_23BD45BDC();
      sub_23BCEEED8(v35, &qword_256AA19D0);
      if ((v29 & 1) != 0)
      {
        v27 = sub_23BD4518C();
        v36 = *(void (**)(char *, uint64_t))(v5 + 8);
        v36(v7, v33);
        v36(v34, v33);
        sub_23BCEEED8(v31, &qword_256AA19D0);
        sub_23BD2C1C0((uint64_t)v18);
        return v27 & 1;
      }
      v37 = *(void (**)(char *, uint64_t))(v5 + 8);
      v37(v7, v33);
      v37(v34, v33);
      sub_23BCEEED8(v31, &qword_256AA19D0);
      sub_23BD2C1C0((uint64_t)v18);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v4);
    sub_23BCEEED8(v39, &qword_256AA19D0);
    goto LABEL_9;
  }
  if (v23 != 1)
  {
    if (v22((char *)v20, 2, v21) == 2)
      goto LABEL_8;
LABEL_9:
    sub_23BCEEED8((uint64_t)v18, &qword_256AA2A18);
LABEL_10:
    v27 = 0;
    return v27 & 1;
  }
  if (v22((char *)v20, 2, v21) != 1)
    goto LABEL_9;
LABEL_8:
  sub_23BD2C1C0((uint64_t)v18);
  v27 = 1;
  return v27 & 1;
}

uint64_t type metadata accessor for MonogramLoadState()
{
  uint64_t result;

  result = qword_256AA29B8;
  if (!qword_256AA29B8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD2ADEC()
{
  unint64_t result;

  result = qword_256AA28D8;
  if (!qword_256AA28D8)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for MonogramError, &type metadata for MonogramError);
    atomic_store(result, (unint64_t *)&qword_256AA28D8);
  }
  return result;
}

unint64_t sub_23BD2AE30()
{
  unint64_t result;

  result = qword_256AA2900;
  if (!qword_256AA2900)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A634, &type metadata for MonogramLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2900);
  }
  return result;
}

unint64_t sub_23BD2AE74()
{
  unint64_t result;

  result = qword_256AA2908;
  if (!qword_256AA2908)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A5E4, &type metadata for MonogramLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2908);
  }
  return result;
}

unint64_t sub_23BD2AEB8()
{
  unint64_t result;

  result = qword_256AA2910;
  if (!qword_256AA2910)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A594, &type metadata for MonogramLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2910);
  }
  return result;
}

unint64_t sub_23BD2AEFC()
{
  unint64_t result;

  result = qword_256AA2918;
  if (!qword_256AA2918)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A544, &type metadata for MonogramLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2918);
  }
  return result;
}

uint64_t sub_23BD2AF40(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA19D0);
    v6[0] = sub_23BCEEF14(&qword_256AA1A10, (uint64_t (*)(uint64_t))type metadata accessor for Monogram, (uint64_t)&protocol conformance descriptor for Monogram);
    v6[1] = sub_23BCEEF14(&qword_256AA1A18, (uint64_t (*)(uint64_t))type metadata accessor for Monogram, (uint64_t)&protocol conformance descriptor for Monogram);
    v6[2] = sub_23BD02218();
    v6[3] = sub_23BD0225C();
    result = MEMORY[0x242610FF4](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD2AFF8(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32))(a2, a1, State);
  return a2;
}

uint64_t sub_23BD2B03C()
{
  return sub_23BCEEF14(&qword_256AA2940, (uint64_t (*)(uint64_t))type metadata accessor for MonogramLoadState, (uint64_t)&protocol conformance descriptor for MonogramLoadState);
}

uint64_t *initializeBufferWithCopyOfBuffer for MonogramLoadState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        v12 = *(int *)(type metadata accessor for Monogram() + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = sub_23BD4512C();
        v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        v16(v13, v14, v15);
        swift_storeEnumTagMultiPayload();
      }
      v17 = *(int *)(v7 + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

_QWORD *initializeWithCopy for MonogramLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = *(int *)(type metadata accessor for Monogram() + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_23BD4512C();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    v15 = *(int *)(v6 + 48);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_23BD451A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

_QWORD *assignWithCopy for MonogramLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v13 = *(int *)(type metadata accessor for Monogram() + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = sub_23BD4512C();
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v17(v14, v15, v16);
        swift_storeEnumTagMultiPayload();
      }
      v18 = *(int *)(v6 + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      return a1;
    }
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA1B78);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA19D0);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v22 = *(int *)(type metadata accessor for Monogram() + 20);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = sub_23BD4512C();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      v26(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
  }
  v27 = *(int *)(v6 + 48);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = sub_23BD451A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

_OWORD *initializeWithTake for MonogramLoadState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for Monogram() + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_23BD4512C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    v13 = *(int *)(v6 + 48);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_23BD451A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

_OWORD *assignWithTake for MonogramLoadState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v13 = *(int *)(type metadata accessor for Monogram() + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = sub_23BD4512C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        swift_storeEnumTagMultiPayload();
      }
      v17 = *(int *)(v6 + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_23BD451A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      return a1;
    }
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA1B78);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA19D0);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA19D0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v21 = *(int *)(type metadata accessor for Monogram() + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = sub_23BD4512C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      swift_storeEnumTagMultiPayload();
    }
  }
  v25 = *(int *)(v6 + 48);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_23BD451A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonogramLoadState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD2B95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MonogramLoadState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD2B9B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_23BD2BA10(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_23BD2BA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1B78);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_23BD2BA90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_23BD03338();
  v1 = v0;
  if (v2 <= 0x3F)
  {
    v3 = sub_23BD451A4();
    if (v4 > 0x3F)
    {
      return v3;
    }
    else
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return v1;
}

uint64_t storeEnumTagSinglePayload for MonogramLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD2BB70 + 4 * byte_23BD4A1F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD2BBA4 + 4 * byte_23BD4A1F0[v4]))();
}

uint64_t sub_23BD2BBA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD2BBAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD2BBB4);
  return result;
}

uint64_t sub_23BD2BBC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD2BBC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD2BBCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD2BBD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramLoadState.CodingKeys()
{
  return &type metadata for MonogramLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for MonogramLoadState.IdleCodingKeys()
{
  return &type metadata for MonogramLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for MonogramLoadState.FetchingCodingKeys()
{
  return &type metadata for MonogramLoadState.FetchingCodingKeys;
}

uint64_t storeEnumTagSinglePayload for MonogramLoadState.FetchedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD2BC5C + 4 * byte_23BD4A1FF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD2BC90 + 4 * byte_23BD4A1FA[v4]))();
}

uint64_t sub_23BD2BC90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD2BC98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD2BCA0);
  return result;
}

uint64_t sub_23BD2BCAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD2BCB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD2BCB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD2BCC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramLoadState.FetchedCodingKeys()
{
  return &type metadata for MonogramLoadState.FetchedCodingKeys;
}

unint64_t sub_23BD2BCE0()
{
  unint64_t result;

  result = qword_256AA29C8;
  if (!qword_256AA29C8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A3C4, &type metadata for MonogramLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29C8);
  }
  return result;
}

unint64_t sub_23BD2BD28()
{
  unint64_t result;

  result = qword_256AA29D0;
  if (!qword_256AA29D0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A51C, &type metadata for MonogramLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29D0);
  }
  return result;
}

unint64_t sub_23BD2BD70()
{
  unint64_t result;

  result = qword_256AA29D8;
  if (!qword_256AA29D8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A43C, &type metadata for MonogramLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29D8);
  }
  return result;
}

unint64_t sub_23BD2BDB8()
{
  unint64_t result;

  result = qword_256AA29E0;
  if (!qword_256AA29E0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A464, &type metadata for MonogramLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29E0);
  }
  return result;
}

unint64_t sub_23BD2BE00()
{
  unint64_t result;

  result = qword_256AA29E8;
  if (!qword_256AA29E8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A3EC, &type metadata for MonogramLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29E8);
  }
  return result;
}

unint64_t sub_23BD2BE48()
{
  unint64_t result;

  result = qword_256AA29F0;
  if (!qword_256AA29F0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A414, &type metadata for MonogramLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29F0);
  }
  return result;
}

unint64_t sub_23BD2BE90()
{
  unint64_t result;

  result = qword_256AA29F8;
  if (!qword_256AA29F8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A334, &type metadata for MonogramLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA29F8);
  }
  return result;
}

unint64_t sub_23BD2BED8()
{
  unint64_t result;

  result = qword_256AA2A00;
  if (!qword_256AA2A00)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A35C, &type metadata for MonogramLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A00);
  }
  return result;
}

unint64_t sub_23BD2BF20()
{
  unint64_t result;

  result = qword_256AA2A08;
  if (!qword_256AA2A08)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A48C, &type metadata for MonogramLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A08);
  }
  return result;
}

unint64_t sub_23BD2BF68()
{
  unint64_t result;

  result = qword_256AA2A10;
  if (!qword_256AA2A10)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A4B4, &type metadata for MonogramLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A10);
  }
  return result;
}

uint64_t sub_23BD2BFAC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1701602409 && a2 == 0xE400000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696863746566 && a2 == 0xE800000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656863746566 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD2C0E0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x637465467473616CLL && a2 == 0xEB00000000646568)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD2C1C0(uint64_t a1)
{
  uint64_t State;

  State = type metadata accessor for MonogramLoadState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8))(a1, State);
  return a1;
}

uint64_t sub_23BD2C1FC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23BD4515C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ImageAsset();
  sub_23BD2C668(v4 + *(int *)(v16 + 28), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_23BD2C6B0((uint64_t)v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
  }
  v44 = v4;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  v49 = sub_23BD45144();
  v50 = v17;
  sub_23BD0AC78();
  v18 = sub_23BD4593C();
  v20 = v19;
  result = swift_bridgeObjectRelease();
  if (!v20)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
  }
  v49 = v18;
  v50 = v20;
  v47 = 8222587;
  v48 = 0xE300000000000000;
  v22 = a2 * a4;
  if ((~COERCE__INT64(a2 * a4) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v22 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v43 = a1;
  v45 = (uint64_t)v22;
  v45 = sub_23BD45B10();
  v46 = v23;
  v24 = sub_23BD45930();
  v26 = v25;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v49 = v24;
  v50 = v26;
  v47 = 8218747;
  v48 = 0xE300000000000000;
  v27 = a3 * a4;
  if ((~COERCE__INT64(a3 * a4) & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v27 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v45 = (uint64_t)v27;
  v45 = sub_23BD45B10();
  v46 = v28;
  v29 = sub_23BD45930();
  v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = v29;
  v50 = v31;
  v47 = 8217467;
  v48 = 0xE300000000000000;
  v32 = *(int *)(v16 + 20);
  v42 = v16;
  v33 = v44;
  v34 = (uint64_t *)(v44 + v32);
  v36 = *v34;
  v35 = v34[1];
  v45 = v36;
  v46 = v35;
  v37 = sub_23BD45930();
  v39 = v38;
  swift_bridgeObjectRelease();
  v49 = v37;
  v50 = v39;
  v47 = 8218235;
  v48 = 0xE300000000000000;
  if (*(_BYTE *)(v33 + *(int *)(v42 + 24)))
    v40 = 6778986;
  else
    v40 = 6778480;
  v45 = v40;
  v46 = 0xE300000000000000;
  sub_23BD45930();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23BD45150();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_23BD2C668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD2C6B0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD2C6F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD2C72C + 4 * byte_23BD4A6C0[a1]))(0xD00000000000001ALL, 0x800000023BD4BB60);
}

unint64_t sub_23BD2C72C()
{
  return 0xD000000000000014;
}

uint64_t sub_23BD2C748()
{
  return 0x616D496863746566;
}

uint64_t sub_23BD2C76C()
{
  return 0x646564616F6CLL;
}

uint64_t sub_23BD2C780()
{
  return 0x6570704177656976;
}

uint64_t sub_23BD2C7A0()
{
  return 0x657A695377656976;
}

uint64_t sub_23BD2C7C4(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 0x726F727265;
}

uint64_t sub_23BD2C7F8()
{
  sub_23BD2D558();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2C820()
{
  sub_23BD2D558();
  return sub_23BD45C18();
}

uint64_t sub_23BD2C848()
{
  unsigned __int8 *v0;

  return sub_23BD2C6F0(*v0);
}

uint64_t sub_23BD2C850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD309AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD2C874(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23BD2C880()
{
  sub_23BD2D37C();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2C8A8()
{
  sub_23BD2D37C();
  return sub_23BD45C18();
}

uint64_t sub_23BD2C8D0()
{
  sub_23BD2D4D0();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2C8F8()
{
  sub_23BD2D4D0();
  return sub_23BD45C18();
}

uint64_t sub_23BD2C920()
{
  char *v0;

  return sub_23BD2C7C4(*v0);
}

uint64_t sub_23BD2C928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD30C44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD2C94C()
{
  sub_23BD2D514();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2C974()
{
  sub_23BD2D514();
  return sub_23BD45C18();
}

uint64_t sub_23BD2C99C()
{
  sub_23BD2D48C();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2C9C4()
{
  sub_23BD2D48C();
  return sub_23BD45C18();
}

uint64_t sub_23BD2C9EC()
{
  sub_23BD2D448();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2CA14()
{
  sub_23BD2D448();
  return sub_23BD45C18();
}

uint64_t sub_23BD2CA3C()
{
  sub_23BD2D404();
  return sub_23BD45C0C();
}

uint64_t sub_23BD2CA64()
{
  sub_23BD2D404();
  return sub_23BD45C18();
}

void ImageAssetAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A28);
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v32 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A30);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v28 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A38);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v24);
  v34 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A40);
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v26 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A48);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A50);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A58);
  v15 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  v41 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD2D37C();
  v39 = v17;
  sub_23BD45BF4();
  sub_23BD2D3C0(v42, (uint64_t)v13);
  v18 = (char *)sub_23BD2CDC0 + 4 * word_23BD4A6C6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD2CDC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *v0;
  v6 = v0[1];
  *(_BYTE *)(v4 - 120) = 0;
  sub_23BD2D558();
  v8 = *(_QWORD *)(v4 - 152);
  v7 = *(_QWORD *)(v4 - 144);
  sub_23BD45AC8();
  *(_QWORD *)(v4 - 120) = v5;
  *(_QWORD *)(v4 - 112) = v6;
  type metadata accessor for CGSize();
  sub_23BCEEF14(&qword_256AA1428, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_23BD45AF8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v8, v7);
}

uint64_t type metadata accessor for ImageAssetAction()
{
  uint64_t result;

  result = qword_256AA2B48;
  if (!qword_256AA2B48)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD2D37C()
{
  unint64_t result;

  result = qword_256AA2A60;
  if (!qword_256AA2A60)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AFF4, &type metadata for ImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A60);
  }
  return result;
}

uint64_t sub_23BD2D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageAssetAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD2D404()
{
  unint64_t result;

  result = qword_256AA2A68;
  if (!qword_256AA2A68)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AFA4, &type metadata for ImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A68);
  }
  return result;
}

unint64_t sub_23BD2D448()
{
  unint64_t result;

  result = qword_256AA2A70;
  if (!qword_256AA2A70)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AF54, &type metadata for ImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A70);
  }
  return result;
}

unint64_t sub_23BD2D48C()
{
  unint64_t result;

  result = qword_256AA2A78;
  if (!qword_256AA2A78)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AF04, &type metadata for ImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A78);
  }
  return result;
}

unint64_t sub_23BD2D4D0()
{
  unint64_t result;

  result = qword_256AA2A80;
  if (!qword_256AA2A80)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AEB4, &type metadata for ImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A80);
  }
  return result;
}

unint64_t sub_23BD2D514()
{
  unint64_t result;

  result = qword_256AA2A88;
  if (!qword_256AA2A88)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AE64, &type metadata for ImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A88);
  }
  return result;
}

unint64_t sub_23BD2D558()
{
  unint64_t result;

  result = qword_256AA2A90;
  if (!qword_256AA2A90)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AE14, &type metadata for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2A90);
  }
  return result;
}

uint64_t ImageAssetAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD v42[7];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;

  v54 = a2;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2A98);
  v51 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v62 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AA0);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v61 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AA8);
  v6 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  v53 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AB0);
  v9 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  v50 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AB8);
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v55 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AC0);
  v42[6] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v58 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2AC8);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v63);
  v42[5] = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v42[4] = (char *)v42 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v42 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v42 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v42 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v42 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)v42 - v31;
  v33 = a1[3];
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  sub_23BD2D37C();
  v34 = v65;
  sub_23BD45BE8();
  if (!v34)
  {
    v42[1] = v29;
    v42[0] = v26;
    v42[2] = v23;
    v42[3] = v20;
    v35 = v59;
    v65 = v32;
    v36 = sub_23BD45AB0();
    if (*(_QWORD *)(v36 + 16) == 1)
      __asm { BR              X10 }
    v37 = v35;
    v38 = sub_23BD459C0();
    swift_allocError();
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1148);
    *v40 = v63;
    sub_23BD45A74();
    sub_23BD459B4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x24BEE26D0], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v37);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
}

uint64_t sub_23BD2E294@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImageAssetAction.init(from:)(a1, a2);
}

void sub_23BD2E2A8(_QWORD *a1)
{
  ImageAssetAction.encode(to:)(a1);
}

void ImageAssetAction.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v17 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v17);
  v18 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23BD4515C();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v5);
  v16 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v19 = (char *)&v16 - v8;
  v9 = sub_23BD451F8();
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v13);
  sub_23BD2D3C0(v1, (uint64_t)&v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)sub_23BD2E4E8 + 4 * byte_23BD4A6DE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD2E4E8()
{
  sub_23BD45B94();
  return sub_23BCFD2FC();
}

uint64_t ImageAssetAction.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BD45B88();
  ImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD2E9A0()
{
  _BYTE v1[72];

  sub_23BD45B88();
  ImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD2E9E0()
{
  _BYTE v1[72];

  sub_23BD45B88();
  ImageAssetAction.hash(into:)((uint64_t)v1);
  return sub_23BD45BB8();
}

void _s12FitnessAsset05ImageB6ActionO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[3];
  uint64_t v18;

  v18 = a2;
  v17[0] = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v17[0]);
  v17[1] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v4);
  v17[2] = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C28);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 + *(int *)(v14 + 48) - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD2D3C0(a1, (uint64_t)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BD2D3C0(v18, (uint64_t)v15);
  v16 = (char *)sub_23BD2EC04 + 4 * byte_23BD4A6E4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_23BD2EC04()
{
  uint64_t v0;
  double *v1;
  double *v2;
  _BOOL8 v3;

  sub_23BD2D3C0(v0, (uint64_t)v2);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_23BD30D14(v0);
    return 0;
  }
  else
  {
    v3 = v2[1] == v1[1] && *v2 == *v1;
    sub_23BCF56E0(v0, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  }
  return v3;
}

uint64_t sub_23BD2EEB8()
{
  return sub_23BCEEF14(&qword_256AA2AD0, (uint64_t (*)(uint64_t))type metadata accessor for ImageAssetAction, (uint64_t)&protocol conformance descriptor for ImageAssetAction);
}

uint64_t *initializeBufferWithCopyOfBuffer for ImageAssetAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v12 = sub_23BD451F8();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      v27 = (int *)type metadata accessor for ImageAsset();
      v28 = v27[5];
      v29 = (uint64_t *)((char *)a1 + v28);
      v30 = (uint64_t *)((char *)a2 + v28);
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      *((_BYTE *)a1 + v27[6]) = *((_BYTE *)a2 + v27[6]);
      v32 = v27[7];
      v33 = (char *)a1 + v32;
      v34 = (char *)a2 + v32;
      v35 = sub_23BD4515C();
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v40 = type metadata accessor for FetchedImageAsset();
      *(_OWORD *)((char *)a1 + *(int *)(v40 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v40 + 20));
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
      *(_OWORD *)((char *)a1 + *(int *)(v41 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v41 + 48));
      goto LABEL_20;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_23BD451F8();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v15 = (int *)type metadata accessor for ImageAsset();
      v16 = v15[5];
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      *((_BYTE *)a1 + v15[6]) = *((_BYTE *)a2 + v15[6]);
      v20 = v15[7];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = sub_23BD4515C();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      if (v25(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
      *(_OWORD *)((char *)a1 + *(int *)(v39 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v39 + 48));
LABEL_20:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for ImageAssetAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3 || (_DWORD)result == 2)
  {
    v3 = sub_23BD451F8();
    v4 = *(_QWORD *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    v5 = type metadata accessor for ImageAsset();
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v5 + 28);
    v7 = sub_23BD4515C();
    v8 = *(_QWORD *)(v7 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

char *initializeWithCopy for ImageAssetAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v10 = sub_23BD451F8();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a1, a2, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    v25 = (int *)type metadata accessor for ImageAsset();
    v26 = v25[5];
    v27 = &a1[v26];
    v28 = &a2[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    a1[v25[6]] = a2[v25[6]];
    v30 = v25[7];
    v31 = &a1[v30];
    v32 = &a2[v30];
    v33 = sub_23BD4515C();
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain();
    if (v35(v32, 1, v33))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v38 = type metadata accessor for FetchedImageAsset();
    *(_OWORD *)&a1[*(int *)(v38 + 20)] = *(_OWORD *)&a2[*(int *)(v38 + 20)];
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
    *(_OWORD *)&a1[*(int *)(v39 + 48)] = *(_OWORD *)&a2[*(int *)(v39 + 48)];
    goto LABEL_18;
  }
  if (EnumCaseMultiPayload == 2)
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v13 = (int *)type metadata accessor for ImageAsset();
    v14 = v13[5];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    a1[v13[6]] = a2[v13[6]];
    v18 = v13[7];
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = sub_23BD4515C();
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
    *(_OWORD *)&a1[*(int *)(v37 + 48)] = *(_OWORD *)&a2[*(int *)(v37 + 48)];
LABEL_18:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for ImageAssetAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v10 = sub_23BD451F8();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      v24 = (int *)type metadata accessor for ImageAsset();
      v25 = v24[5];
      v26 = &a1[v25];
      v27 = &a2[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      a1[v24[6]] = a2[v24[6]];
      v28 = v24[7];
      v29 = &a1[v28];
      v30 = &a2[v28];
      v31 = sub_23BD4515C();
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v36 = type metadata accessor for FetchedImageAsset();
      *(_OWORD *)&a1[*(int *)(v36 + 20)] = *(_OWORD *)&a2[*(int *)(v36 + 20)];
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
      *(_OWORD *)&a1[*(int *)(v37 + 48)] = *(_OWORD *)&a2[*(int *)(v37 + 48)];
      goto LABEL_19;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v7 = sub_23BD451F8();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v13 = (int *)type metadata accessor for ImageAsset();
      v14 = v13[5];
      v15 = &a1[v14];
      v16 = &a2[v14];
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      a1[v13[6]] = a2[v13[6]];
      v17 = v13[7];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = sub_23BD4515C();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
      *(_OWORD *)&a1[*(int *)(v35 + 48)] = *(_OWORD *)&a2[*(int *)(v35 + 48)];
LABEL_19:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for ImageAssetAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v10 = sub_23BD451F8();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    v20 = (int *)type metadata accessor for ImageAsset();
    *(_OWORD *)&a1[v20[5]] = *(_OWORD *)&a2[v20[5]];
    a1[v20[6]] = a2[v20[6]];
    v21 = v20[7];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = sub_23BD4515C();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v28 = type metadata accessor for FetchedImageAsset();
    *(_OWORD *)&a1[*(int *)(v28 + 20)] = *(_OWORD *)&a2[*(int *)(v28 + 20)];
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
    *(_OWORD *)&a1[*(int *)(v29 + 48)] = *(_OWORD *)&a2[*(int *)(v29 + 48)];
    goto LABEL_18;
  }
  if (EnumCaseMultiPayload == 2)
  {
    v7 = sub_23BD451F8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v13 = (int *)type metadata accessor for ImageAsset();
    *(_OWORD *)&a1[v13[5]] = *(_OWORD *)&a2[v13[5]];
    a1[v13[6]] = a2[v13[6]];
    v14 = v13[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = sub_23BD4515C();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
    *(_OWORD *)&a1[*(int *)(v27 + 48)] = *(_OWORD *)&a2[*(int *)(v27 + 48)];
LABEL_18:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ImageAssetAction(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v10 = sub_23BD451F8();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      v20 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)&a1[v20[5]] = *(_OWORD *)&a2[v20[5]];
      a1[v20[6]] = a2[v20[6]];
      v21 = v20[7];
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = sub_23BD4515C();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v28 = type metadata accessor for FetchedImageAsset();
      *(_OWORD *)&a1[*(int *)(v28 + 20)] = *(_OWORD *)&a2[*(int *)(v28 + 20)];
      v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770);
      *(_OWORD *)&a1[*(int *)(v29 + 48)] = *(_OWORD *)&a2[*(int *)(v29 + 48)];
      goto LABEL_19;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v7 = sub_23BD451F8();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v13 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)&a1[v13[5]] = *(_OWORD *)&a2[v13[5]];
      a1[v13[6]] = a2[v13[6]];
      v14 = v13[7];
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = sub_23BD4515C();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8);
      *(_OWORD *)&a1[*(int *)(v27 + 48)] = *(_OWORD *)&a2[*(int *)(v27 + 48)];
LABEL_19:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23BD2FFEC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  char *v7;
  uint64_t *v8;
  void *v9;
  void *v10;

  v5 = &unk_23BD4A7E8;
  v6 = &unk_23BD4A800;
  result = type metadata accessor for ImageAsset();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v7 = &v4;
    result = type metadata accessor for FetchedImageAsset();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v8 = &v3;
      v9 = &unk_23BD4A7E8;
      v10 = &unk_23BD4A7E8;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ImageAssetAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageAssetAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BD30190 + 4 * byte_23BD4A6EF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BD301C4 + 4 * byte_23BD4A6EA[v4]))();
}

uint64_t sub_23BD301C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD301CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD301D4);
  return result;
}

uint64_t sub_23BD301E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD301E8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BD301EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD301F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetAction.CodingKeys()
{
  return &type metadata for ImageAssetAction.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys()
{
  return &type metadata for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetAction.ImageAssetLoadFailedCodingKeys()
{
  return &type metadata for ImageAssetAction.ImageAssetLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetAction.FetchImageAssetCodingKeys()
{
  return &type metadata for ImageAssetAction.FetchImageAssetCodingKeys;
}

uint64_t _s12FitnessAsset16ImageAssetActionO30ImageAssetLoadFailedCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD30298 + 4 * byte_23BD4A6F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD302CC + 4 * byte_23BD4A6F4[v4]))();
}

uint64_t sub_23BD302CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD302D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD302DCLL);
  return result;
}

uint64_t sub_23BD302E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD302F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD302F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD302FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetAction.LoadedCodingKeys()
{
  return &type metadata for ImageAssetAction.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for ImageAssetAction.ViewAppearedCodingKeys()
{
  return &type metadata for ImageAssetAction.ViewAppearedCodingKeys;
}

uint64_t _s12FitnessAsset16ImageAssetActionO36CachedImageAssetLoadFailedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD30368 + 4 * byte_23BD4A6FE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD30388 + 4 * byte_23BD4A703[v4]))();
}

_BYTE *sub_23BD30368(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD30388(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD30390(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD30398(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD303A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD303A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ImageAssetAction.ViewSizeChangedCodingKeys()
{
  return &type metadata for ImageAssetAction.ViewSizeChangedCodingKeys;
}

unint64_t sub_23BD303C8()
{
  unint64_t result;

  result = qword_256AA2B80;
  if (!qword_256AA2B80)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A99C, &type metadata for ImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2B80);
  }
  return result;
}

unint64_t sub_23BD30410()
{
  unint64_t result;

  result = qword_256AA2B88;
  if (!qword_256AA2B88)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AA54, &type metadata for ImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2B88);
  }
  return result;
}

unint64_t sub_23BD30458()
{
  unint64_t result;

  result = qword_256AA2B90;
  if (!qword_256AA2B90)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AB0C, &type metadata for ImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2B90);
  }
  return result;
}

unint64_t sub_23BD304A0()
{
  unint64_t result;

  result = qword_256AA2B98;
  if (!qword_256AA2B98)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4ABC4, &type metadata for ImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2B98);
  }
  return result;
}

unint64_t sub_23BD304E8()
{
  unint64_t result;

  result = qword_256AA2BA0;
  if (!qword_256AA2BA0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AC7C, &type metadata for ImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BA0);
  }
  return result;
}

unint64_t sub_23BD30530()
{
  unint64_t result;

  result = qword_256AA2BA8;
  if (!qword_256AA2BA8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AD34, &type metadata for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BA8);
  }
  return result;
}

unint64_t sub_23BD30578()
{
  unint64_t result;

  result = qword_256AA2BB0;
  if (!qword_256AA2BB0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4ADEC, &type metadata for ImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BB0);
  }
  return result;
}

unint64_t sub_23BD305C0()
{
  unint64_t result;

  result = qword_256AA2BB8;
  if (!qword_256AA2BB8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4ACA4, &type metadata for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BB8);
  }
  return result;
}

unint64_t sub_23BD30608()
{
  unint64_t result;

  result = qword_256AA2BC0;
  if (!qword_256AA2BC0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4ACCC, &type metadata for ImageAssetAction.CachedImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BC0);
  }
  return result;
}

unint64_t sub_23BD30650()
{
  unint64_t result;

  result = qword_256AA2BC8;
  if (!qword_256AA2BC8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4ABEC, &type metadata for ImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BC8);
  }
  return result;
}

unint64_t sub_23BD30698()
{
  unint64_t result;

  result = qword_256AA2BD0;
  if (!qword_256AA2BD0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AC14, &type metadata for ImageAssetAction.ImageAssetLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BD0);
  }
  return result;
}

unint64_t sub_23BD306E0()
{
  unint64_t result;

  result = qword_256AA2BD8;
  if (!qword_256AA2BD8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AB34, &type metadata for ImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BD8);
  }
  return result;
}

unint64_t sub_23BD30728()
{
  unint64_t result;

  result = qword_256AA2BE0;
  if (!qword_256AA2BE0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AB5C, &type metadata for ImageAssetAction.FetchImageAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BE0);
  }
  return result;
}

unint64_t sub_23BD30770()
{
  unint64_t result;

  result = qword_256AA2BE8;
  if (!qword_256AA2BE8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AA7C, &type metadata for ImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BE8);
  }
  return result;
}

unint64_t sub_23BD307B8()
{
  unint64_t result;

  result = qword_256AA2BF0;
  if (!qword_256AA2BF0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AAA4, &type metadata for ImageAssetAction.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BF0);
  }
  return result;
}

unint64_t sub_23BD30800()
{
  unint64_t result;

  result = qword_256AA2BF8;
  if (!qword_256AA2BF8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A9C4, &type metadata for ImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2BF8);
  }
  return result;
}

unint64_t sub_23BD30848()
{
  unint64_t result;

  result = qword_256AA2C00;
  if (!qword_256AA2C00)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A9EC, &type metadata for ImageAssetAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2C00);
  }
  return result;
}

unint64_t sub_23BD30890()
{
  unint64_t result;

  result = qword_256AA2C08;
  if (!qword_256AA2C08)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A90C, &type metadata for ImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2C08);
  }
  return result;
}

unint64_t sub_23BD308D8()
{
  unint64_t result;

  result = qword_256AA2C10;
  if (!qword_256AA2C10)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4A934, &type metadata for ImageAssetAction.ViewSizeChangedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2C10);
  }
  return result;
}

unint64_t sub_23BD30920()
{
  unint64_t result;

  result = qword_256AA2C18;
  if (!qword_256AA2C18)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AD5C, &type metadata for ImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2C18);
  }
  return result;
}

unint64_t sub_23BD30968()
{
  unint64_t result;

  result = qword_256AA2C20;
  if (!qword_256AA2C20)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4AD84, &type metadata for ImageAssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2C20);
  }
  return result;
}

uint64_t sub_23BD309AC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000023BD4BB60 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023BD4BB80 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616D496863746566 && a2 == 0xEF74657373416567 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657A695377656976 && a2 == 0xEF6465676E616843)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23BD30C44(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x726F727265 && a2 == 0xE500000000000000;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD30D14(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DynamicImageAssetView.init(store:placeholderImage:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  int *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t result;
  char *v14;

  *a5 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  swift_storeEnumTagMultiPayload();
  v10 = (int *)type metadata accessor for DynamicImageAssetView();
  v11 = (uint64_t *)((char *)a5 + v10[5]);
  *v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  swift_storeEnumTagMultiPayload();
  v12 = (uint64_t *)((char *)a5 + v10[6]);
  *v12 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  v14 = (char *)a5 + v10[7];
  *(_QWORD *)v14 = sub_23BCF7008;
  *((_QWORD *)v14 + 1) = result;
  v14[16] = 0;
  *(uint64_t *)((char *)a5 + v10[8]) = a3;
  *((_BYTE *)a5 + v10[9]) = a4;
  return result;
}

void sub_23BD30E78(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BD45684();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + *(int *)(type metadata accessor for DynamicImageAssetView() + 32));
  if (!v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
    sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    swift_getKeyPath();
    sub_23BD456CC();
    swift_release();
    swift_release();
    v16 = type metadata accessor for ImageAsset();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v5, 1, v16) == 1)
    {
      v17 = &qword_256AA1400;
      v18 = (uint64_t)v5;
    }
    else
    {
      sub_23BCECE9C((uint64_t)v5, (uint64_t)v8, &qword_256AA0FE0);
      sub_23BCF56E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v19 = sub_23BD451F8();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) != 1)
      {
        v21 = (id)sub_23BD451EC();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
        goto LABEL_9;
      }
      v17 = &qword_256AA0FE0;
      v18 = (uint64_t)v8;
    }
    sub_23BCEEED8(v18, v17);
    v21 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemFillColor);
LABEL_9:
    v23 = MEMORY[0x242610670](v21);
    v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1668);
    sub_23BCF8FA4();
    sub_23BD455D0();
    goto LABEL_10;
  }
  v14 = v13;
  sub_23BD4566C();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDF3FD0], v9);
  v15 = sub_23BD45690();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = v15;
  v24 = 0;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1668);
  sub_23BCF8FA4();
  sub_23BD455D0();
  swift_release();

LABEL_10:
  v22 = v26;
  *(_QWORD *)a1 = v25;
  *(_BYTE *)(a1 + 8) = v22;
}

uint64_t DynamicImageAssetView.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DynamicImageAssetView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_23BCF6190(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  result = sub_23BCFC424((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  *a1 = sub_23BD33F40;
  a1[1] = v7;
  return result;
}

uint64_t sub_23BD312A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t OpaqueTypeConformance2;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  char v94;

  v74 = a3;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v71);
  v80 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_23BD45474();
  v63 = *(_QWORD *)(v64 - 8);
  v65 = *(_QWORD *)(v63 + 64);
  MEMORY[0x24BDAC7A8](v64);
  v62 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DynamicImageAssetView();
  v76 = *(_QWORD *)(v7 - 8);
  v78 = *(_QWORD *)(v76 + 64);
  v79 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v84 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  MEMORY[0x24BDAC7A8](v66);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D18);
  v68 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v77 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D20);
  v70 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v81 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D28);
  v73 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v82 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45468();
  sub_23BD458F4();
  v18 = v17;
  v20 = v19;
  sub_23BD31AE4(a2, a1, &v87, v17, v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
  sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  v83 = a2;
  sub_23BD32978((uint64_t)v11, v85, (uint64_t)v13, v18, v20);
  swift_bridgeObjectRelease();
  sub_23BCEEED8((uint64_t)v11, &qword_256AA1400);
  v21 = a2;
  v22 = v84;
  sub_23BCF6190(v21, v84, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v23 = v63;
  v24 = v62;
  v25 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, a1, v64);
  v26 = *(unsigned __int8 *)(v76 + 80);
  v78 += (v26 + 16) & ~v26;
  v27 = (v26 + 16) & ~v26;
  v75 = v27;
  v76 = v26 | 7;
  v28 = v23;
  v29 = (v78 + *(unsigned __int8 *)(v23 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v30 = (v65 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject();
  sub_23BCFC424(v22, v31 + v27, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v31 + v29, v24, v25);
  v32 = (double *)(v31 + v30);
  *v32 = v18;
  v32[1] = v20;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1610);
  v34 = sub_23BCF8E04();
  v35 = sub_23BCF9568(&qword_256AA16E8, &qword_256AA1438, (uint64_t)&protocol conformance descriptor for AssetLoadState<A, B>);
  v36 = v66;
  sub_23BD45654();
  swift_release();
  sub_23BCEEED8((uint64_t)v13, &qword_256AA1438);
  sub_23BCF91E4(v87, v88, v89, v90, v91, v92, v93, v94);
  v37 = v80;
  v38 = v83;
  sub_23BD35644(v80);
  sub_23BCF6190(v38, v22, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v39 = (v78 + 7) & 0xFFFFFFFFFFFFFFF8;
  v65 = v39 + 16;
  v40 = swift_allocObject();
  v41 = v75;
  sub_23BCFC424(v22, v40 + v75, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v42 = (double *)(v40 + v39);
  *v42 = v18;
  v42[1] = v20;
  v87 = v33;
  v88 = v36;
  v89 = v34;
  v90 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v44 = sub_23BD35884();
  v45 = v67;
  v46 = v71;
  v47 = v77;
  sub_23BD45654();
  swift_release();
  sub_23BCEEED8(v37, &qword_256AA2C40);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v47, v45);
  v48 = v83;
  sub_23BD35644(v37);
  v49 = v84;
  sub_23BCF6190(v48, v84, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v50 = swift_allocObject();
  sub_23BCFC424(v49, v50 + v41, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v51 = (double *)(v50 + v39);
  *v51 = v18;
  v51[1] = v20;
  v87 = v45;
  v88 = v46;
  v89 = OpaqueTypeConformance2;
  v90 = v44;
  v52 = swift_getOpaqueTypeConformance2();
  v53 = v81;
  v54 = v80;
  v55 = v69;
  sub_23BD45654();
  swift_release();
  sub_23BCEEED8(v54, &qword_256AA2C40);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v55);
  v85 = *(_QWORD *)&v18;
  v86 = v20;
  v56 = v84;
  sub_23BCF6190(v83, v84, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v57 = swift_allocObject();
  sub_23BCFC424(v56, v57 + v75, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  type metadata accessor for CGSize();
  v87 = v55;
  v88 = v46;
  v89 = v52;
  v90 = v44;
  swift_getOpaqueTypeConformance2();
  sub_23BCEEF14((unint64_t *)&qword_256AA16C8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD858]);
  v58 = v72;
  v59 = v82;
  sub_23BD45654();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v59, v58);
}

uint64_t sub_23BD31AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  char v59;
  uint64_t result;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  double *v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  _QWORD *v114;
  _BYTE v115[32];
  __int128 v116;
  __int16 v117;
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int16 v122;
  char v123;

  v106 = a2;
  *(_QWORD *)&v112 = a1;
  v114 = a3;
  v7 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v7);
  v101 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v99 = (char *)&v92 - v10;
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1558);
  MEMORY[0x24BDAC7A8](v103);
  v104 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v111 = (uint64_t)&v92 - v13;
  v96 = sub_23BD45684();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v94 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_23BD45474();
  v102 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v98 = v15;
  v100 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DynamicImageAssetView();
  v108 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v109 = v17;
  *(_QWORD *)&v110 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  MEMORY[0x24BDAC7A8](v113);
  v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v92 - v24;
  v97 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
  sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  v26 = v112;
  swift_release();
  v27 = (uint64_t)v25;
  v28 = (uint64_t)v22;
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  sub_23BD32978((uint64_t)v20, v119, (uint64_t)v25, a4, a5);
  swift_bridgeObjectRelease();
  sub_23BCEEED8((uint64_t)v20, &qword_256AA1400);
  sub_23BCECE9C((uint64_t)v25, (uint64_t)v22, &qword_256AA1438);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v107 = v25;
    if (EnumCaseMultiPayload == 1)
    {
      v30 = *(void **)(v26 + *(int *)(v97 + 32));
      v93 = v22;
      if (v30)
      {
        v31 = v30;
        sub_23BD4566C();
        v32 = v95;
        v33 = v94;
        v34 = v96;
        (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, *MEMORY[0x24BDF3FD0], v96);
        v35 = sub_23BD45690();
        swift_release();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
        *(_QWORD *)v115 = v35;
        *(_WORD *)&v115[8] = 0;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
        sub_23BCF8F88();
        sub_23BD455D0();
        swift_release();

      }
      else
      {
        sub_23BD30E78((uint64_t)&v119);
        *(_QWORD *)v115 = v119;
        v115[8] = BYTE8(v119);
        v115[9] = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
        sub_23BCF8F88();
        sub_23BD455D0();
      }
      v72 = 256;
      if (!BYTE9(v119))
        v72 = 0;
      *(_QWORD *)v115 = v119;
      *(_QWORD *)&v115[8] = v72 | BYTE8(v119);
      *(_OWORD *)&v115[16] = 0u;
      v116 = 0u;
      LOBYTE(v117) = 1;
      *(_QWORD *)&v113 = v119;
      LODWORD(v112) = BYTE8(v119);
      LODWORD(v111) = BYTE9(v119);
      sub_23BCF9690(v119, BYTE8(v119), SBYTE9(v119));
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1690);
      sub_23BCF8F1C();
      sub_23BCF906C();
      sub_23BD455D0();
      v74 = *((_QWORD *)&v119 + 1);
      v73 = v119;
      v76 = *((_QWORD *)&v120 + 1);
      v75 = v120;
      v78 = *((_QWORD *)&v121 + 1);
      v77 = v121;
      v79 = v122;
      *(_OWORD *)v115 = v119;
      *(_OWORD *)&v115[16] = v120;
      v116 = v121;
      v117 = v122;
      v118 = 0;
      sub_23BCF96A4(v119, *((unint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121, *((uint64_t *)&v121 + 1), v122, (void (*)(uint64_t, unint64_t))j__swift_retain, (void (*)(uint64_t, uint64_t))sub_23BCF9728, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_23BCF9690);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
      sub_23BCF8E88();
      sub_23BCF90F4();
      sub_23BD455D0();
      sub_23BCF9240(v113, v112, v111);
      sub_23BCF96A4(v73, v74, v75, v76, v77, v78, v79, (void (*)(uint64_t, unint64_t))j__swift_release, (void (*)(uint64_t, uint64_t))sub_23BCF9230, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_23BCF9240);
      v53 = *((_QWORD *)&v119 + 1);
      v52 = v119;
      v55 = *((_QWORD *)&v120 + 1);
      v54 = v120;
      v57 = *((_QWORD *)&v121 + 1);
      v56 = v121;
      v58 = v122;
      v59 = v123;
      sub_23BCEEED8((uint64_t)v107, &qword_256AA1438);
      v80 = sub_23BD451C8();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v93, v80);
    }
    else
    {
      sub_23BD30E78((uint64_t)&v119);
      v43 = v119;
      v44 = BYTE8(v119);
      v45 = v110;
      sub_23BCF6190(v26, v110, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
      v46 = v102;
      v47 = v100;
      v48 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v106, v105);
      v49 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      v50 = (v109 + *(unsigned __int8 *)(v46 + 80) + v49) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v51 = swift_allocObject();
      *(double *)(v51 + 16) = a4;
      *(double *)(v51 + 24) = a5;
      sub_23BCFC424(v45, v51 + v49, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
      (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v51 + v50, v47, v48);
      *(_QWORD *)v115 = v43;
      *(_QWORD *)&v115[8] = v44;
      *(_QWORD *)&v115[16] = sub_23BD35F70;
      *(_QWORD *)&v115[24] = v51;
      v116 = 0uLL;
      LOBYTE(v117) = 0;
      j__swift_retain();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1690);
      sub_23BCF8F1C();
      sub_23BCF906C();
      sub_23BD455D0();
      *(_OWORD *)v115 = v119;
      *(_OWORD *)&v115[16] = v120;
      v116 = v121;
      v117 = v122;
      v118 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
      sub_23BCF8E88();
      sub_23BCF90F4();
      sub_23BD455D0();
      j__swift_release();
      swift_release();
      v53 = *((_QWORD *)&v119 + 1);
      v52 = v119;
      v55 = *((_QWORD *)&v120 + 1);
      v54 = v120;
      v57 = *((_QWORD *)&v121 + 1);
      v56 = v121;
      v58 = v122;
      v59 = v123;
      result = sub_23BCEEED8((uint64_t)v107, &qword_256AA1438);
    }
  }
  else
  {
    v36 = (uint64_t)v101;
    v37 = (uint64_t)v99;
    v38 = v111;
    sub_23BCECF30(v28, v111, &qword_256AA1558);
    v39 = v38;
    v40 = v104;
    sub_23BCECE9C(v39, v104, &qword_256AA1558);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_23BD30E78((uint64_t)&v119);
      *(_QWORD *)v115 = v119;
      *(_QWORD *)&v115[8] = BYTE8(v119);
      *(_OWORD *)&v115[16] = 0u;
      v116 = 0u;
      v117 = 256;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16B0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
      sub_23BCF9118();
      sub_23BCF8F88();
      sub_23BD455D0();
      v113 = v119;
      v112 = v120;
      v110 = v121;
      v41 = v122;
      v42 = HIBYTE(v122);
    }
    else
    {
      sub_23BCFC424(v40, v37, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
      if (qword_256AA0FD0 != -1)
        swift_once();
      v61 = (void *)qword_256AACDE0;
      sub_23BCF6190(v37, v36, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
      v62 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
      v63 = v61;
      v64 = (void *)sub_23BD452E8();
      v65 = objc_msgSend(v63, sel_objectForKey_, v64);

      if (v65)
      {
        v66 = sub_23BD4551C();
        v67 = v65;
        sub_23BD4566C();
        v68 = v95;
        v69 = v94;
        v70 = v96;
        (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, *MEMORY[0x24BDF3FD0], v96);
        v71 = sub_23BD45690();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
        *(_QWORD *)v115 = v66;
        *(_OWORD *)&v115[8] = xmmword_23BD46C00;
        v116 = 0uLL;
        *(_QWORD *)&v115[24] = v71;
        LOBYTE(v117) = 0;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16C0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
        sub_23BCF9568(&qword_256AA16B8, &qword_256AA16C0, MEMORY[0x24BDF4700]);
        sub_23BCF8F1C();
        sub_23BD455D0();
        swift_release();

      }
      else
      {
        sub_23BD30E78((uint64_t)&v119);
        v81 = v119;
        v82 = BYTE8(v119);
        v83 = v110;
        sub_23BCF6190(v26, v110, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
        v84 = (*(unsigned __int8 *)(v108 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
        v85 = (v109 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
        v86 = swift_allocObject();
        sub_23BCFC424(v83, v86 + v84, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
        v87 = (double *)(v86 + v85);
        *v87 = a4;
        v87[1] = a5;
        *(_QWORD *)v115 = v81;
        *(_QWORD *)&v115[8] = v82;
        *(_QWORD *)&v115[16] = sub_23BD35D34;
        *(_QWORD *)&v115[24] = v86;
        v116 = 0uLL;
        LOBYTE(v117) = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16C0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1648);
        sub_23BCF9568(&qword_256AA16B8, &qword_256AA16C0, MEMORY[0x24BDF4700]);
        sub_23BCF8F1C();
        sub_23BD455D0();
      }
      *(_OWORD *)v115 = v119;
      *(_OWORD *)&v115[16] = v120;
      v116 = v121;
      v117 = v122;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16B0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1658);
      sub_23BCF9118();
      sub_23BCF8F88();
      sub_23BD455D0();
      v113 = v119;
      v112 = v120;
      v110 = v121;
      v41 = v122;
      v42 = HIBYTE(v122);
      sub_23BCF56E0(v37, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    }
    v88 = v28 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1570) + 48);
    if (v42)
      v89 = 256;
    else
      v89 = 0;
    *(_OWORD *)v115 = v113;
    *(_OWORD *)&v115[16] = v112;
    v116 = v110;
    v117 = v89 | v41;
    v118 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1638);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA16A0);
    sub_23BCF8E88();
    sub_23BCF90F4();
    sub_23BD455D0();
    v53 = *((_QWORD *)&v119 + 1);
    v52 = v119;
    v55 = *((_QWORD *)&v120 + 1);
    v54 = v120;
    v57 = *((_QWORD *)&v121 + 1);
    v56 = v121;
    v58 = v122;
    v59 = v123;
    sub_23BCEEED8(v111, &qword_256AA1558);
    sub_23BCEEED8(v27, &qword_256AA1438);
    v90 = sub_23BD451A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v88, v90);
  }
  v91 = v114;
  *v114 = v52;
  v91[1] = v53;
  v91[2] = v54;
  v91[3] = v55;
  v91[4] = v56;
  v91[5] = v57;
  *((_WORD *)v91 + 24) = v58;
  *((_BYTE *)v91 + 50) = v59;
  return result;
}

uint64_t sub_23BD32978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ImageAsset();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(a1, (uint64_t)v15, &qword_256AA1400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_23BCEEED8((uint64_t)v15, &qword_256AA1400);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    return swift_storeEnumTagMultiPayload();
  }
  sub_23BCFC424((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  if (!*(_QWORD *)(a2 + 16) || (v21 = sub_23BD2044C((uint64_t)v19), (v22 & 1) == 0))
  {
    sub_23BCF56E0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v12, 1, 1, v30);
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    swift_storeEnumTagMultiPayload();
    return sub_23BCEEED8((uint64_t)v12, &qword_256AA15F8);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v21);
  if (*(_QWORD *)(v23 + 16) && (v24 = sub_23BD203EC(a4, a5), (v25 & 1) != 0))
  {
    v26 = v24;
    v27 = *(_QWORD *)(v23 + 56);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    v29 = *(_QWORD *)(v28 - 8);
    sub_23BCECE9C(v27 + *(_QWORD *)(v29 + 72) * v26, (uint64_t)v12, &qword_256AA1438);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v12, 0, 1, v28);
  }
  else
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 1, 1, v31);
  }
  sub_23BCF56E0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v12, 1, v32) == 1)
    goto LABEL_9;
  return sub_23BCECF30((uint64_t)v12, a3, &qword_256AA1438);
}

uint64_t sub_23BD32C4C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  double *v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23BD454A4();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_23BD45900();
  if ((result & 1) != 0)
  {
    v18 = type metadata accessor for DynamicImageAssetView();
    v24[0] = a2;
    v24[1] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
    sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    v19 = (double *)&v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750) + 48)];
    sub_23BD35400((uint64_t)v13);
    v20 = sub_23BD4521C();
    sub_23BD35644((uint64_t)v10);
    v21 = type metadata accessor for DynamicArtworkLayoutEnvironment();
    sub_23BD452B8();
    v22 = *(_BYTE *)(a1 + *(int *)(v18 + 36));
    sub_23BD35644((uint64_t)v10);
    sub_23BD452B8();
    v23 = sub_23BD45468();
    *v16 = v20;
    v16[1] = MEMORY[0x2426101F0](v23);
    v16[*(int *)(v21 + 28)] = v22;
    *v19 = a3;
    v19[1] = a4;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  }
  return result;
}

uint64_t sub_23BD32E94(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v19);
  v20 = (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImageAsset();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v18 = (uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DynamicImageAssetView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
  sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23BCEEED8((uint64_t)v7, &qword_256AA1400);
  v12 = (uint64_t)v7;
  v13 = v18;
  sub_23BCFC424(v12, v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  sub_23BD4545C();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
  v15 = v20;
  v16 = (double *)(v20 + *(int *)(v14 + 48));
  sub_23BCF6190(v13, v20, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *v16 = a1;
  v16[1] = a2;
  swift_storeEnumTagMultiPayload();
  sub_23BD456D8();
  swift_release();
  sub_23BCF56E0(v15, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  return sub_23BCF56E0(v13, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
}

uint64_t sub_23BD330F4(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  double *v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[2];

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BD454A4();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(a4, (uint64_t)v22, &qword_256AA1438);
  LODWORD(a4) = swift_getEnumCaseMultiPayload();
  result = sub_23BCEEED8((uint64_t)v22, &qword_256AA1438);
  if ((_DWORD)a4 == 2)
  {
    v24 = type metadata accessor for DynamicImageAssetView();
    v30[0] = a6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
    v30[1] = v17;
    sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    v25 = (double *)&v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750) + 48)];
    sub_23BD35400((uint64_t)v16);
    v26 = sub_23BD4521C();
    sub_23BD35644((uint64_t)v13);
    v27 = type metadata accessor for DynamicArtworkLayoutEnvironment();
    sub_23BD452B8();
    v28 = *(_BYTE *)(a5 + *(int *)(v24 + 36));
    sub_23BD35644((uint64_t)v13);
    sub_23BD452B8();
    v29 = sub_23BD45468();
    *v19 = v26;
    v19[1] = MEMORY[0x2426101F0](v29);
    v19[*(int *)(v27 + 28)] = v28;
    *v25 = a1;
    v25[1] = a2;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  }
  return result;
}

uint64_t sub_23BD333A8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;

  v39 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v39);
  v40 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v9);
  v34 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2000);
  MEMORY[0x24BDAC7A8](v11);
  v36 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v33 = (char *)&v33 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v38 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v37 = (uint64_t)&v33 - v22;
  type metadata accessor for DynamicImageAssetView();
  v35 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
  sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    return sub_23BCEEED8((uint64_t)v17, &qword_256AA1EC8);
  v24 = v37;
  sub_23BCFC424((uint64_t)v17, v37, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  sub_23BD35644(v34);
  v25 = (uint64_t)v33;
  sub_23BD452B8();
  v26 = sub_23BD452AC();
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 0, 1, v26);
  v28 = (uint64_t)v36;
  v27((uint64_t)v36, 1, 1, v26);
  v29 = v38;
  sub_23BD0F384(13, v25, 4, v28, 0.0, 1, v38);
  sub_23BCEEED8(v28, &qword_256AA2000);
  sub_23BCEEED8(v25, &qword_256AA2000);
  sub_23BD4545C();
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
  v31 = v40;
  v32 = (double *)(v40 + *(int *)(v30 + 48));
  sub_23BCF6190((uint64_t)v29, v40, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  *v32 = a1;
  v32[1] = a2;
  swift_storeEnumTagMultiPayload();
  sub_23BD456D8();
  swift_release();
  sub_23BCF56E0(v31, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  sub_23BCF56E0((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  return sub_23BCF56E0(v24, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
}

uint64_t sub_23BD3377C(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v42);
  v43 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v9);
  v37 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2000);
  MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v38 = (char *)&v34 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1EC8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v41 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v40 = (uint64_t)&v34 - v22;
  type metadata accessor for DynamicImageAssetView();
  v39 = a5;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
  sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
  v36 = v23;
  sub_23BD4545C();
  swift_getKeyPath();
  sub_23BD456CC();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    return sub_23BCEEED8((uint64_t)v17, &qword_256AA1EC8);
  v25 = v40;
  sub_23BCFC424((uint64_t)v17, v40, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  v26 = sub_23BD452AC();
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v28 = (uint64_t)v38;
  v27(v38, 1, 1, v26);
  sub_23BD35644(v37);
  v29 = (uint64_t)v35;
  sub_23BD452B8();
  v27((char *)v29, 0, 1, v26);
  v30 = v41;
  sub_23BD0F384(13, v28, 4, v29, 0.0, 1, v41);
  sub_23BCEEED8(v29, &qword_256AA2000);
  sub_23BCEEED8(v28, &qword_256AA2000);
  sub_23BD4545C();
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1750);
  v32 = v43;
  v33 = (double *)(v43 + *(int *)(v31 + 48));
  sub_23BCF6190((uint64_t)v30, v43, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  *v33 = a1;
  v33[1] = a2;
  swift_storeEnumTagMultiPayload();
  sub_23BD456D8();
  swift_release();
  sub_23BCF56E0(v32, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  sub_23BCF56E0((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
  return sub_23BCF56E0(v25, (uint64_t (*)(_QWORD))type metadata accessor for DynamicArtworkLayoutEnvironment);
}

uint64_t sub_23BD33B5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DynamicImageAssetAction();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *a2;
  v7 = a2[1];
  result = sub_23BD45900();
  if ((result & 1) != 0)
  {
    type metadata accessor for DynamicImageAssetView();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D30);
    sub_23BCF9568(&qword_256AA2D38, &qword_256AA2D30, MEMORY[0x24BE2B5E8]);
    sub_23BD4545C();
    *v5 = v6;
    v5[1] = v7;
    swift_storeEnumTagMultiPayload();
    sub_23BD456D8();
    swift_release();
    return sub_23BCF56E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetAction);
  }
  return result;
}

uint64_t sub_23BD33C84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_23BCF6190(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  result = sub_23BCFC424((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for DynamicImageAssetView);
  *a2 = sub_23BD33F40;
  a2[1] = v7;
  return result;
}

uint64_t sub_23BD33D38()
{
  return sub_23BD454BC();
}

uint64_t sub_23BD33D58(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_23BD454A4();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_23BD454C8();
}

uint64_t type metadata accessor for DynamicImageAssetView()
{
  uint64_t result;

  result = qword_256AA2CB0;
  if (!qword_256AA2CB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD33E14()
{
  return sub_23BD454E0();
}

uint64_t sub_23BD33E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BD33E70(a1, a2, a3, a4, MEMORY[0x24BDEE1E0]);
}

uint64_t sub_23BD33E50()
{
  return sub_23BD454D4();
}

uint64_t sub_23BD33E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(a1, (uint64_t)v9, &qword_256AA2C40);
  return a5(v9);
}

uint64_t sub_23BD33EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23BD33E70(a1, a2, a3, a4, MEMORY[0x24BDEE130]);
}

uint64_t sub_23BD33F18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD33F44()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicImageAssetView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_23BD454A4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_23BD455E8();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v15 = a3[6];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_23BD455E8();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v21 = a3[7];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)v23;
    v25 = *((_QWORD *)v23 + 1);
    v26 = v23[16];
    sub_23BCF7984();
    *(_QWORD *)v22 = v24;
    *((_QWORD *)v22 + 1) = v25;
    v22[16] = v26;
    v27 = a3[8];
    v28 = a3[9];
    v29 = *(void **)((char *)a2 + v27);
    *(_QWORD *)((char *)a1 + v27) = v29;
    *((_BYTE *)a1 + v28) = *((_BYTE *)a2 + v28);
    v30 = v29;
  }
  return a1;
}

void destroy for DynamicImageAssetView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23BD454A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + a2[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23BD455E8();
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v8 = a1 + a2[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_23BD455E8();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_23BCF7978();

}

_QWORD *initializeWithCopy for DynamicImageAssetView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23BD454A4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BD455E8();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_23BD455E8();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  else
  {
    *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  v24 = v21[16];
  sub_23BCF7984();
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v23;
  v20[16] = v24;
  v25 = a3[8];
  v26 = a3[9];
  v27 = *(void **)((char *)a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v27;
  *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
  v28 = v27;
  return a1;
}

_QWORD *assignWithCopy for DynamicImageAssetView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;

  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA2C30);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23BD454A4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v7 = a3[5];
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    sub_23BCEEED8((uint64_t)a1 + v7, &qword_256AA2C38);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_23BD455E8();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    sub_23BCEEED8((uint64_t)a1 + v13, &qword_256AA2C38);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = sub_23BD455E8();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
    }
    else
    {
      *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  v24 = v21[16];
  sub_23BCF7984();
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v23;
  v20[16] = v24;
  sub_23BCF7978();
  v25 = a3[8];
  v26 = *(void **)((char *)a1 + v25);
  v27 = *(void **)((char *)a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v27;
  v28 = v27;

  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *initializeWithTake for DynamicImageAssetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BD454A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_23BD455E8();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = sub_23BD455E8();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v21 = a3[7];
  v22 = a3[8];
  v23 = &a1[v21];
  v24 = &a2[v21];
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v23[16] = v24[16];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *assignWithTake for DynamicImageAssetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  void *v27;

  if (a1 != a2)
  {
    sub_23BCEEED8((uint64_t)a1, &qword_256AA2C30);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_23BD454A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_23BCEEED8((uint64_t)&a1[v8], &qword_256AA2C38);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_23BD455E8();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v15 = a3[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    sub_23BCEEED8((uint64_t)&a1[v15], &qword_256AA2C38);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = sub_23BD455E8();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C40);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v17, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v24[16];
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v23[16] = v25;
  sub_23BCF7978();
  v26 = a3[8];
  v27 = *(void **)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];

  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicImageAssetView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD34E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C48);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C50);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicImageAssetView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD34EF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C48);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C50);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = a2;
  return result;
}

void sub_23BD34FA0()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BD35044();
  if (v0 <= 0x3F)
  {
    sub_23BD35098();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23BD35044()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AA2CC0)
  {
    sub_23BD454A4();
    v0 = sub_23BD45450();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AA2CC0);
  }
}

void sub_23BD35098()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AA2CC8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA2C40);
    v0 = sub_23BD45450();
    if (!v1)
      atomic_store(v0, qword_256AA2CC8);
  }
}

uint64_t sub_23BD350F0()
{
  return sub_23BCF9568(&qword_256AA2D08, &qword_256AA2D10, MEMORY[0x24BDEC6F8]);
}

uint64_t sub_23BD35120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DynamicImageAssetView() - 8) + 80);
  return sub_23BD312A4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_23BD3516C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for DynamicImageAssetView();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v16 = sub_23BD45474();
  v4 = *(_QWORD *)(v16 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((v3 + 16) & ~v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BD454A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + ((v3 + 16) & ~v3), v7);
  }
  else
  {
    swift_release();
  }
  v8 = v6 + v1[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_23BD455E8();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v11 = v6 + v1[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_23BD455E8();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  sub_23BCF7978();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((((v3 + 16) & ~v3) + v15 + v5) & ~v5), v16);
  return swift_deallocObject();
}

uint64_t sub_23BD35370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;

  v5 = *(_QWORD *)(type metadata accessor for DynamicImageAssetView() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_23BD45474() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (double *)(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_23BD330F4(*v10, v10[1], a1, a2, v2 + v6, v2 + v9);
}

uint64_t sub_23BD35400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v2 = v1;
  v4 = sub_23BD45510();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v2, (uint64_t)v10, &qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_23BD454A4();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = sub_23BD458C4();
    v14 = sub_23BD455F4();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19[1] = a1;
      v18 = v17;
      v20 = v17;
      *(_DWORD *)v16 = 136315138;
      v19[2] = sub_23BD374D4(0x5463696D616E7944, 0xEF657A6953657079, &v20);
      sub_23BD45918();
      _os_log_impl(&dword_23BCEB000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611078](v18, -1, -1);
      MEMORY[0x242611078](v16, -1, -1);
    }

    sub_23BD45504();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23BD35644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v2 = v1;
  v4 = sub_23BD45510();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCECE9C(v2, (uint64_t)v10, &qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_23BCECF30((uint64_t)v10, a1, &qword_256AA2C40);
  v12 = sub_23BD458C4();
  v13 = sub_23BD455F4();
  v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v18[1] = a1;
    v17 = v16;
    v19 = v16;
    *(_DWORD *)v15 = 136315138;
    v18[2] = sub_23BD374D4(0xD000000000000020, 0x800000023BD4BF50, &v19);
    sub_23BD45918();
    _os_log_impl(&dword_23BCEB000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611078](v17, -1, -1);
    MEMORY[0x242611078](v15, -1, -1);
  }

  sub_23BD45504();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23BD35878(uint64_t a1, uint64_t a2)
{
  return sub_23BD35910(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, double, double))sub_23BD333A8);
}

unint64_t sub_23BD35884()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AA2D40;
  if (!qword_256AA2D40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA2C40);
    v2 = sub_23BCEEF14(&qword_256AA2D48, (uint64_t (*)(uint64_t))MEMORY[0x24BDEFEF8], MEMORY[0x24BDEFF08]);
    result = MEMORY[0x242610FF4](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AA2D40);
  }
  return result;
}

uint64_t sub_23BD35904(uint64_t a1, uint64_t a2)
{
  return sub_23BD35910(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, double, double))sub_23BD3377C);
}

uint64_t sub_23BD35910(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, double, double))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  double *v8;

  v6 = *(_QWORD *)(type metadata accessor for DynamicImageAssetView() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (double *)(v3 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, a2, v3 + v7, *v8, v8[1]);
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for DynamicImageAssetView();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v0 + v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_23BD454A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v4 + v1[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BD455E8();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v9 = v4 + v1[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BD455E8();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  sub_23BCF7978();

  return swift_deallocObject();
}

uint64_t sub_23BD35B30(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for DynamicImageAssetView();
  return sub_23BD33B5C(a1, a2);
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for DynamicImageAssetView();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v0 + v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_23BD454A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v4 + v1[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BD455E8();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  v9 = v4 + v1[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BD455E8();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  sub_23BCF7978();

  return swift_deallocObject();
}

uint64_t sub_23BD35D34()
{
  uint64_t v0;
  uint64_t v1;
  double *v2;

  v1 = type metadata accessor for DynamicImageAssetView();
  v2 = (double *)(v0
                + ((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
                  + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_23BD32E94(*v2, v2[1]);
}

uint64_t sub_23BD35D78()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for DynamicImageAssetView();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v16 = sub_23BD45474();
  v4 = *(_QWORD *)(v16 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((v3 + 32) & ~v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BD454A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + ((v3 + 32) & ~v3), v7);
  }
  else
  {
    swift_release();
  }
  v8 = v6 + v1[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2C38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_23BD455E8();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v11 = v6 + v1[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_23BD455E8();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  sub_23BCF7978();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + ((((v3 + 32) & ~v3) + v15 + v5) & ~v5), v16);
  return swift_deallocObject();
}

uint64_t sub_23BD35F70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for DynamicImageAssetView() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_23BD45474() - 8) + 80);
  return sub_23BD32C4C(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4), *(double *)(v0 + 16), *(double *)(v0 + 24));
}

void DynamicPredicateComparisonDescriptor.makePredicateExpression<A>(using:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[35];

  v9[5] = a1;
  v9[24] = a3;
  v9[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[6] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v4[1];
  v5 = v4[2];
  v9[11] = v4;
  v7 = v4[3];
  v9[10] = v8;
  v9[31] = v8;
  v9[32] = v6;
  v9[7] = v6;
  v9[8] = v5;
  v9[33] = v5;
  v9[34] = v7;
  v9[9] = v7;
  type metadata accessor for ArtworkPredicateValue();
}

uint64_t sub_23BD37284(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BD45378();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD372C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BD45378();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD37304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BD45378();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD37348(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2458);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD37388()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD373B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD373EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 40))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD37424@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 40))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD3745C()
{
  return 16;
}

__n128 sub_23BD37468(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_23BD37474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AA2D58;
  if (!qword_256AA2D58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AA2D50);
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateValue<A>, v1);
    atomic_store(result, (unint64_t *)&qword_256AA2D58);
  }
  return result;
}

void sub_23BD374C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  DynamicPredicateComparisonDescriptor.makePredicateExpression<A>(using:)(a1, a2, a3);
}

uint64_t sub_23BD374D4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23BD375F4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23BD377AC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23BD377AC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23BD375A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD375DC()
{
  return 16;
}

__n128 sub_23BD375E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD375F4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23BD45924();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23BD377E8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23BD459CC();
  if (!v8)
  {
    sub_23BD45A14();
    __break(1u);
LABEL_17:
    result = sub_23BD45A50();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23BD377AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23BD377E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23BD3787C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23BD37A54(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23BD37A54(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23BD3787C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23BD379F0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23BD4599C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23BD45A14();
      __break(1u);
LABEL_10:
      v2 = sub_23BD45798();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23BD45A50();
    __break(1u);
LABEL_14:
    result = sub_23BD45A14();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23BD379F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D60);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23BD37A54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2D60);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23BD45A50();
  __break(1u);
  return result;
}

uint64_t sub_23BD37BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v51 = (char *)a1;
  v52 = (char *)a2;
  v2 = sub_23BD451C8();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v47 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_23BD451A4();
  v4 = *(_QWORD *)(v48 - 8);
  v5 = MEMORY[0x24BDAC7A8](v48);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v47 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1558);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v47 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2F08);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_23BCECE9C((uint64_t)v51, (uint64_t)v22, &qword_256AA1438);
  sub_23BCECE9C((uint64_t)v52, v23, &qword_256AA1438);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v51 = v12;
    v52 = v7;
    v31 = v48;
    sub_23BCECE9C((uint64_t)v22, (uint64_t)v18, &qword_256AA1438);
    v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1570) + 48);
    v33 = &v18[v32];
    if (!swift_getEnumCaseMultiPayload())
    {
      v36 = (char *)(v23 + v32);
      v37 = (uint64_t)v51;
      sub_23BCECF30(v23, (uint64_t)v51, &qword_256AA1558);
      v38 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v39 = v9;
      v40 = v9;
      v41 = v31;
      v38(v40, v33, v31);
      v42 = (uint64_t)v52;
      v38(v52, v36, v41);
      type metadata accessor for FetchedImageAsset();
      sub_23BCEEF14(&qword_256AA2190, (uint64_t (*)(uint64_t))type metadata accessor for FetchedImageAsset, (uint64_t)&protocol conformance descriptor for FetchedImageAsset);
      sub_23BD24B48();
      sub_23BD238AC();
      v43 = sub_23BD45BDC();
      sub_23BCEEED8((uint64_t)v18, &qword_256AA1558);
      if ((v43 & 1) != 0)
      {
        v29 = sub_23BD4518C();
        v44 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v44(v42, v41);
        v44((uint64_t)v39, v41);
        sub_23BCEEED8(v37, &qword_256AA1558);
      }
      else
      {
        v45 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v45(v42, v41);
        v45((uint64_t)v39, v41);
        sub_23BCEEED8(v37, &qword_256AA1558);
        v29 = 0;
      }
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(&v18[v32], v31);
    sub_23BCEEED8((uint64_t)v18, &qword_256AA1558);
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BCECE9C((uint64_t)v22, (uint64_t)v16, &qword_256AA1438);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = v49;
      v26 = v47;
      v27 = v23;
      v28 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v47, v27, v50);
      v29 = sub_23BD451B0();
      v30 = *(void (**)(char *, uint64_t))(v25 + 8);
      v30(v26, v28);
      v30(v16, v28);
LABEL_18:
      v35 = &qword_256AA1438;
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
LABEL_14:
    v29 = 0;
    v35 = &qword_256AA2F08;
    goto LABEL_19;
  }
  v34 = swift_getEnumCaseMultiPayload();
  if (v34 == 2)
    v35 = &qword_256AA1438;
  else
    v35 = &qword_256AA2F08;
  if (v34 == 2)
    v29 = -1;
  else
    v29 = 0;
LABEL_19:
  sub_23BCEEED8((uint64_t)v22, v35);
  return v29 & 1;
}

uint64_t sub_23BD37FE4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  double *v20;
  double v21;
  double v22;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  double *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v39 - v8;
  v10 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v44 = a1;
  swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
    }
    else
    {
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v41)
        return swift_release();
      v18 = *(_QWORD *)(v40 + 8 * v17);
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v41)
          return swift_release();
        v18 = *(_QWORD *)(v40 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v41)
            return swift_release();
          v18 = *(_QWORD *)(v40 + 8 * v14);
          if (!v18)
          {
            v14 = v17 + 3;
            if (v17 + 3 >= v41)
              return swift_release();
            v18 = *(_QWORD *)(v40 + 8 * v14);
            if (!v18)
            {
              v19 = v17 + 4;
              if (v19 >= v41)
                return swift_release();
              v18 = *(_QWORD *)(v40 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v14 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v14 >= v41)
                    return swift_release();
                  v18 = *(_QWORD *)(v40 + 8 * v14);
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v14 = v19;
            }
          }
        }
      }
LABEL_23:
      v13 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v14 << 6);
    }
    v20 = (double *)(*(_QWORD *)(v44 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    swift_storeEnumTagMultiPayload();
    sub_23BCECF30((uint64_t)v9, (uint64_t)v6, &qword_256AA1438);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = (_QWORD *)*a2;
    v24 = v45;
    *a2 = 0x8000000000000000;
    v26 = sub_23BD203EC(v21, v22);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v33 = v45;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_23BD3E5E0();
        v33 = v45;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_23BD3D848(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_23BD203EC(v21, v22);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_40;
      v26 = v31;
      v33 = v45;
      if ((v30 & 1) != 0)
      {
LABEL_4:
        sub_23BD23864((uint64_t)v6, v33[7] + *(_QWORD *)(v42 + 72) * v26);
        goto LABEL_5;
      }
    }
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v34 = (double *)(v33[6] + 16 * v26);
    *v34 = v21;
    v34[1] = v22;
    sub_23BCECF30((uint64_t)v6, v33[7] + *(_QWORD *)(v42 + 72) * v26, &qword_256AA1438);
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_37;
    v33[2] = v37;
LABEL_5:
    *a2 = v33;
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  type metadata accessor for CGSize();
  result = sub_23BD45B34();
  __break(1u);
  return result;
}

uint64_t sub_23BD38354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_23BD3EA4C(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = sub_23BD4515C();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_23BD3EAEC(result, v5, a1, a2);
    v7 = sub_23BD4515C();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_23BD383F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v39 = a1;
  v1 = sub_23BD4515C();
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v37 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_23BD451F8();
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BD451C8();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BCF6190((uint64_t)v40, (uint64_t)v20, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v40 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
    sub_23BCFC424((uint64_t)v20, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    sub_23BD45B94();
    sub_23BCECE9C((uint64_t)v13, (uint64_t)v10, &qword_256AA0FE0);
    v22 = v36;
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v10, 1, v38);
    v25 = v34;
    v24 = v35;
    v26 = v37;
    if (v23 == 1)
    {
      sub_23BD45BA0();
    }
    else
    {
      v28 = v7;
      v29 = v7;
      v30 = v38;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v10, v38);
      sub_23BD45BA0();
      sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
      sub_23BD45714();
      v31 = v28;
      v26 = v37;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v31, v30);
    }
    sub_23BD45780();
    sub_23BD45780();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v40;
    sub_23BCECE9C((uint64_t)&v13[*(int *)(v11 + 28)], (uint64_t)v40, &qword_256AA0FE8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v32, 1, v24) == 1)
    {
      sub_23BD45BA0();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v26, v32, v24);
      sub_23BD45BA0();
      sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_23BD45714();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
    }
    sub_23BCFD2FC();
    return sub_23BCF56E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    sub_23BD45B94();
    sub_23BCEEF14(&qword_256AA1160, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BD45714();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_23BD38860()
{
  _BYTE v1[72];

  sub_23BD45B88();
  sub_23BD383F4((uint64_t)v1);
  return sub_23BD45BB8();
}

uint64_t sub_23BD388A0()
{
  _BYTE v1[72];

  sub_23BD45B88();
  sub_23BD383F4((uint64_t)v1);
  return sub_23BD45BB8();
}

void sub_23BD388DC()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE40]), sel_init);
  objc_msgSend(v0, sel_setCountLimit_, 0);
  objc_msgSend(v0, sel_baf_setEvictsObjectsWhenApplicationEntersBackground_, 0);

  qword_256AACDE8 = (uint64_t)v0;
}

__n128 ImageAssetFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  sub_23BD451BC();
  v4 = a2 + *(int *)(type metadata accessor for ImageAssetFeature(0) + 20);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v5;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v4 + 32) = result;
  return result;
}

uint64_t type metadata accessor for ImageAssetFeature(uint64_t a1)
{
  return sub_23BD21DE8(a1, qword_256AA2DF8);
}

uint64_t ImageAssetFeature.dispose(localState:sharedState:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_23BD3F0B8(v2, (uint64_t (*)(char *, double, double))sub_23BD23CDC, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  sub_23BD37FE4(v3, a1);
  return swift_release();
}

void ImageAssetFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD);
  char *v38;
  _QWORD v39[12];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v54 = a2;
  v55 = a4;
  v51 = a3;
  v39[8] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1400);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for FetchedImageAsset();
  MEMORY[0x24BDAC7A8](v5);
  v39[9] = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ImageAssetFeature(0);
  v39[3] = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v39[4] = v8;
  v39[5] = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for ImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v40);
  v39[7] = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v39[11] = (char *)v39 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v39[1] = (char *)v39 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D50);
  v41 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v49 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v39[10] = (char *)v39 - v17;
  v18 = type metadata accessor for ImageAsset();
  v50 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v50 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v39[6] = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v48 = (char *)v39 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v39[2] = (char *)v39 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v44 = (char *)v39 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA15F8);
  MEMORY[0x24BDAC7A8](v26);
  v45 = (char *)v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v52 = *(_QWORD *)(v28 - 8);
  v53 = v28;
  MEMORY[0x24BDAC7A8](v28);
  MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8](v30);
  v43 = (char *)v39 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v33 = sub_23BD451C8();
  v46 = *(_QWORD *)(v33 - 8);
  v47 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v34 = type metadata accessor for ImageAssetAction();
  MEMORY[0x24BDAC7A8](v34);
  MEMORY[0x24BDAC7A8](v35);
  sub_23BCF6190(v55, (uint64_t)v39 - v36, v37);
  v38 = (char *)sub_23BD38E34 + 4 * byte_23BD4B280[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD38E34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *v1;
  v5 = v1[1];
  v7 = type metadata accessor for ImageAssetState();
  sub_23BCECE9C(*(_QWORD *)(v4 - 136) + *(int *)(v7 + 24), v0, &qword_256AA1400);
  v8 = *(_QWORD *)(v4 - 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0, 1, v2) == 1)
    return sub_23BCEEED8(v0, &qword_256AA1400);
  v10 = *(_QWORD *)(v4 - 192);
  sub_23BCFC424(v0, v10, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1CE0);
  v12 = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v4 - 128) = v12 + v11[12];
  v13 = v12 + v11[16];
  *(_QWORD *)(v4 - 136) = v12 + v11[20];
  v14 = (_QWORD *)(v12 + v11[24]);
  v15 = *(_QWORD *)(v4 - 296);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v4 - 208) + 16))(v15, *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 200));
  swift_storeEnumTagMultiPayload();
  sub_23BCF6190(v15, *(_QWORD *)(v4 - 264), type metadata accessor for ImageAssetFeature.TaskIdentifier);
  sub_23BCEEF14(&qword_256AA2D68, type metadata accessor for ImageAssetFeature.TaskIdentifier, (uint64_t)&unk_23BD4B370);
  sub_23BD45984();
  sub_23BCF56E0(v15, type metadata accessor for ImageAssetFeature.TaskIdentifier);
  v16 = *MEMORY[0x24BE2B580];
  v17 = sub_23BD456C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v13, v16, v17);
  v18 = *MEMORY[0x24BE2B550];
  v19 = sub_23BD456B4();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(*(_QWORD *)(v4 - 136), v18, v19);
  v20 = v10;
  v21 = *(_QWORD *)(v4 - 304);
  sub_23BCF6190(v20, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v22 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v23 = swift_allocObject();
  sub_23BCFC424(v21, v23 + v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v24 = (_QWORD *)(v23 + ((v3 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v24 = v6;
  v24[1] = v5;
  *v14 = &unk_256AA2D78;
  v14[1] = v23;
  sub_23BD45864();
  v26 = *(_QWORD *)(v4 - 248);
  v25 = *(_QWORD *)(v4 - 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v12, *MEMORY[0x24BE2B438], v25);
  v27 = *(unint64_t **)(v4 - 168);
  v28 = *v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v28 = sub_23BD08610(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
  v30 = *(_QWORD *)(v28 + 16);
  v29 = *(_QWORD *)(v28 + 24);
  if (v30 >= v29 >> 1)
    v28 = sub_23BD08610(v29 > 1, v30 + 1, 1, v28);
  *(_QWORD *)(v28 + 16) = v30 + 1;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v26 + 32))(v28+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v30, *(_QWORD *)(v4 - 184), v25);
  *v27 = v28;
  return sub_23BCF56E0(*(_QWORD *)(v4 - 192), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
}

uint64_t sub_23BD39874(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 184) = a3;
  *(double *)(v6 + 168) = a5;
  *(double *)(v6 + 176) = a6;
  *(double *)(v6 + 160) = a4;
  *(_QWORD *)(v6 + 144) = a1;
  *(_QWORD *)(v6 + 152) = a2;
  v7 = sub_23BD45834();
  *(_QWORD *)(v6 + 192) = v7;
  *(_QWORD *)(v6 + 200) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 208) = swift_task_alloc();
  *(_QWORD *)(v6 + 216) = type metadata accessor for ImageAsset();
  *(_QWORD *)(v6 + 224) = swift_task_alloc();
  *(_QWORD *)(v6 + 232) = swift_task_alloc();
  *(_QWORD *)(v6 + 240) = swift_task_alloc();
  *(_QWORD *)(v6 + 248) = type metadata accessor for ImageAssetAction();
  *(_QWORD *)(v6 + 256) = swift_task_alloc();
  *(_QWORD *)(v6 + 264) = type metadata accessor for FetchedImageAsset();
  *(_QWORD *)(v6 + 272) = swift_task_alloc();
  *(_QWORD *)(v6 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  *(_QWORD *)(v6 + 288) = swift_task_alloc();
  *(_QWORD *)(v6 + 296) = swift_task_alloc();
  v8 = sub_23BD4515C();
  *(_QWORD *)(v6 + 304) = v8;
  *(_QWORD *)(v6 + 312) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  *(_QWORD *)(v6 + 328) = swift_task_alloc();
  *(_QWORD *)(v6 + 336) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v6 + 344) = sub_23BD4584C();
  *(_QWORD *)(v6 + 352) = sub_23BD45810();
  *(_QWORD *)(v6 + 360) = v9;
  return swift_task_switch();
}

uint64_t sub_23BD39A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  sub_23BD2C1FC(v3, *(double *)(v0 + 160), *(double *)(v0 + 168), *(double *)(v0 + 176));
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 368) = v4;
  if (v4(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 296);
    swift_release();
    sub_23BCEEED8(v5, &qword_256AA0FE8);
    sub_23BD238AC();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 312) + 32);
    *(_QWORD *)(v0 + 376) = v12;
    v12(v8, v10, v9);
    v13 = *(int *)(type metadata accessor for ImageAssetFeature(0) + 20);
    *(_DWORD *)(v0 + 608) = v13;
    v15 = (uint64_t (*)(_QWORD))(**(int **)(v11 + v13) + *(_QWORD *)(v11 + v13));
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v14;
    *v14 = v0;
    v14[1] = sub_23BD39C00;
    return v15(*(_QWORD *)(v0 + 336));
  }
}

uint64_t sub_23BD39C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[49] = a1;
  v4[50] = a2;
  v4[51] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD39C6C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t type;
  os_log_type_t typea;
  _QWORD *v77;
  os_log_t log;
  NSObject *loga;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(_QWORD, double, double);
  uint64_t (*v83)(_QWORD);
  uint64_t v84[2];

  v1 = *(void **)(v0 + 408);
  sub_23BD45888();
  if (!v1)
  {
    *(_BYTE *)(v0 + 613) = *(_BYTE *)(*(_QWORD *)(v0 + 152) + *(int *)(*(_QWORD *)(v0 + 216) + 24));
    return swift_task_switch();
  }
  sub_23BD08EFC(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
  *(_QWORD *)(v0 + 456) = v1;
  *(_QWORD *)(v0 + 128) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

LABEL_9:
      *(_QWORD *)(v0 + 48) = v1;
      v11 = v1;
      if (swift_dynamicCast())
      {
        swift_release();

        if (qword_256AA0FC8 != -1)
          swift_once();
        v12 = *(_QWORD *)(v0 + 224);
        v13 = *(_QWORD *)(v0 + 152);
        v14 = sub_23BD45444();
        __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
        sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v15 = sub_23BD4542C();
        v16 = sub_23BD458B8();
        v17 = os_log_type_enabled(v15, v16);
        v18 = *(_QWORD *)(v0 + 336);
        v19 = *(_QWORD *)(v0 + 304);
        v20 = *(_QWORD *)(v0 + 312);
        if (v17)
        {
          v80 = *(_QWORD *)(v0 + 336);
          v22 = *(_QWORD *)(v0 + 224);
          v21 = *(_QWORD *)(v0 + 232);
          v24 = *(_QWORD *)(v0 + 160);
          v23 = *(_QWORD *)(v0 + 168);
          log = *(os_log_t *)(v0 + 312);
          v25 = swift_slowAlloc();
          type = swift_slowAlloc();
          v84[0] = type;
          *(_DWORD *)v25 = 136315394;
          sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          v26 = sub_23BD45774();
          *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          *(_WORD *)(v25 + 12) = 2080;
          *(_QWORD *)(v0 + 32) = v24;
          *(_QWORD *)(v0 + 40) = v23;
          type metadata accessor for CGSize();
          v28 = sub_23BD45774();
          *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x242611078](type, -1, -1);
          MEMORY[0x242611078](v25, -1, -1);

          ((void (*)(uint64_t, uint64_t))log[1].isa)(v80, v19);
        }
        else
        {
          v72 = *(_QWORD *)(v0 + 224);

          sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        }
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      else
      {

        if (qword_256AA0FC8 != -1)
          swift_once();
        v31 = *(_QWORD *)(v0 + 336);
        v33 = *(_QWORD *)(v0 + 312);
        v32 = *(_QWORD *)(v0 + 320);
        v34 = *(_QWORD *)(v0 + 304);
        v35 = sub_23BD45444();
        __swift_project_value_buffer(v35, (uint64_t)qword_256AACDC8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v31, v34);
        v36 = v1;
        v37 = v1;
        v38 = sub_23BD4542C();
        v39 = sub_23BD458B8();
        v40 = os_log_type_enabled(v38, v39);
        v42 = *(_QWORD *)(v0 + 312);
        v41 = *(_QWORD *)(v0 + 320);
        v43 = *(_QWORD *)(v0 + 304);
        if (v40)
        {
          loga = v38;
          v44 = swift_slowAlloc();
          v77 = (_QWORD *)swift_slowAlloc();
          v81 = swift_slowAlloc();
          v84[0] = v81;
          *(_DWORD *)v44 = 136446466;
          sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v45 = sub_23BD45B10();
          typea = v39;
          *(_QWORD *)(v0 + 72) = sub_23BD374D4(v45, v46, v84);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
          v47(v41, v43);
          *(_WORD *)(v44 + 12) = 2114;
          v48 = v1;
          v49 = _swift_stdlib_bridgeErrorToNSError();
          *(_QWORD *)(v0 + 80) = v49;
          sub_23BD45918();
          *v77 = v49;

          _os_log_impl(&dword_23BCEB000, loga, typea, "unable to fetch %{public}s: %{public}@", (uint8_t *)v44, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
          swift_arrayDestroy();
          MEMORY[0x242611078](v77, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x242611078](v81, -1, -1);
          MEMORY[0x242611078](v44, -1, -1);

        }
        else
        {
          v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
          v47(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

        }
        *(_QWORD *)(v0 + 576) = v47;
        v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
        v83 = (uint64_t (*)(_QWORD))(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
        v74 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 584) = v74;
        *v74 = v0;
        v74[1] = sub_23BD3C650;
        return v83(*(_QWORD *)(v0 + 336));
      }
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v50 = *(_QWORD *)(v0 + 240);
  v51 = *(_QWORD *)(v0 + 152);
  v52 = sub_23BD45444();
  __swift_project_value_buffer(v52, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v51, v50, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v53 = sub_23BD4542C();
  v54 = sub_23BD458B8();
  v55 = os_log_type_enabled(v53, v54);
  v56 = *(_QWORD *)(v0 + 240);
  if (v55)
  {
    v57 = *(_QWORD *)(v0 + 232);
    v59 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD *)(v0 + 168);
    v60 = swift_slowAlloc();
    v61 = swift_slowAlloc();
    v84[0] = v61;
    *(_DWORD *)v60 = 136315394;
    sub_23BCF6190(v56, v57, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v62 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v62, v63, v84);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v60 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v59;
    *(_QWORD *)(v0 + 24) = v58;
    type metadata accessor for CGSize();
    v64 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v64, v65, v84);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v53, v54, "Fetching fallback for %s with %s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v61, -1, -1);
    MEMORY[0x242611078](v60, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v66 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v68 = v67;
  v70 = v69;
  v82 = (uint64_t (*)(_QWORD, double, double))((char *)v66 + *v66);
  v71 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v71;
  *v71 = v0;
  v71[1] = sub_23BD3BD78;
  return v82(*(_QWORD *)(v0 + 152), v68, v70);
}

uint64_t sub_23BD3A67C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 613);
  v3 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 416) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 424) = v6;
  sub_23BD23938(0, (unint64_t *)&qword_256AA1EB0);
  *v6 = v0;
  v6[1] = sub_23BD3A750;
  return sub_23BD45B28();
}

uint64_t sub_23BD3A750()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD3A7BC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 440) = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

uint64_t sub_23BD3A7D4()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t type;
  os_log_type_t typea;
  _QWORD *v93;
  os_log_t log;
  NSObject *loga;
  uint64_t (*v96)(_QWORD, double, double);
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD);
  uint64_t v100[2];

  v1 = *(void **)(v0 + 432);
  sub_23BD45888();
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 392);
    v2 = *(_QWORD *)(v0 + 400);

    sub_23BD08EFC(v3, v2);
    *(_QWORD *)(v0 + 456) = v1;
    *(_QWORD *)(v0 + 128) = v1;
    v4 = v1;
    *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
    sub_23BD23938(0, &qword_256AA2408);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = *(void **)(v0 + 96);
      *(_QWORD *)(v0 + 472) = v5;
      v6 = objc_msgSend(v5, sel_domain);
      v7 = sub_23BD45768();
      v9 = v8;

      if (v7 == sub_23BD45768() && v9 == v10)
      {
        swift_bridgeObjectRelease_n();
LABEL_10:

        if (qword_256AA0FC8 != -1)
          swift_once();
        v28 = *(_QWORD *)(v0 + 240);
        v29 = *(_QWORD *)(v0 + 152);
        v30 = sub_23BD45444();
        __swift_project_value_buffer(v30, (uint64_t)qword_256AACDC8);
        sub_23BCF6190(v29, v28, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v31 = sub_23BD4542C();
        v32 = sub_23BD458B8();
        v33 = os_log_type_enabled(v31, v32);
        v34 = *(_QWORD *)(v0 + 240);
        if (v33)
        {
          v35 = *(_QWORD *)(v0 + 232);
          v37 = *(_QWORD *)(v0 + 160);
          v36 = *(_QWORD *)(v0 + 168);
          v38 = swift_slowAlloc();
          v39 = swift_slowAlloc();
          v100[0] = v39;
          *(_DWORD *)v38 = 136315394;
          sub_23BCF6190(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          v40 = sub_23BD45774();
          *(_QWORD *)(v0 + 120) = sub_23BD374D4(v40, v41, v100);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          sub_23BCF56E0(v34, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
          *(_WORD *)(v38 + 12) = 2080;
          *(_QWORD *)(v0 + 16) = v37;
          *(_QWORD *)(v0 + 24) = v36;
          type metadata accessor for CGSize();
          v42 = sub_23BD45774();
          *(_QWORD *)(v0 + 136) = sub_23BD374D4(v42, v43, v100);
          sub_23BD45918();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23BCEB000, v31, v32, "Fetching fallback for %s with %s", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x242611078](v39, -1, -1);
          MEMORY[0x242611078](v38, -1, -1);
        }
        else
        {
          sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        }

        v44 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
        sub_23BD458F4();
        v46 = v45;
        v48 = v47;
        v96 = (uint64_t (*)(_QWORD, double, double))((char *)v44 + *v44);
        v49 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 480) = v49;
        *v49 = v0;
        v49[1] = sub_23BD3BD78;
        return v96(*(_QWORD *)(v0 + 152), v46, v48);
      }
      v27 = sub_23BD45B1C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_10;

    }
    *(_QWORD *)(v0 + 48) = v1;
    v50 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v51 = *(_QWORD *)(v0 + 224);
      v52 = *(_QWORD *)(v0 + 152);
      v53 = sub_23BD45444();
      __swift_project_value_buffer(v53, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v52, v51, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v54 = sub_23BD4542C();
      v55 = sub_23BD458B8();
      v56 = os_log_type_enabled(v54, v55);
      v57 = *(_QWORD *)(v0 + 336);
      v58 = *(_QWORD *)(v0 + 304);
      v59 = *(_QWORD *)(v0 + 312);
      if (v56)
      {
        v97 = *(_QWORD *)(v0 + 336);
        v61 = *(_QWORD *)(v0 + 224);
        v60 = *(_QWORD *)(v0 + 232);
        v63 = *(_QWORD *)(v0 + 160);
        v62 = *(_QWORD *)(v0 + 168);
        log = *(os_log_t *)(v0 + 312);
        v64 = swift_slowAlloc();
        type = swift_slowAlloc();
        v100[0] = type;
        *(_DWORD *)v64 = 136315394;
        sub_23BCF6190(v61, v60, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v65 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v65, v66, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v61, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v64 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v63;
        *(_QWORD *)(v0 + 40) = v62;
        type metadata accessor for CGSize();
        v67 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v67, v68, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v54, v55, "Fetching %s for %s cancelled", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](type, -1, -1);
        MEMORY[0x242611078](v64, -1, -1);

        ((void (*)(uint64_t, uint64_t))log[1].isa)(v97, v58);
      }
      else
      {
        v88 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v88, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v69 = *(_QWORD *)(v0 + 336);
      v71 = *(_QWORD *)(v0 + 312);
      v70 = *(_QWORD *)(v0 + 320);
      v72 = *(_QWORD *)(v0 + 304);
      v73 = sub_23BD45444();
      __swift_project_value_buffer(v73, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v70, v69, v72);
      v74 = v1;
      v75 = v1;
      v76 = sub_23BD4542C();
      v77 = sub_23BD458B8();
      v78 = os_log_type_enabled(v76, v77);
      v80 = *(_QWORD *)(v0 + 312);
      v79 = *(_QWORD *)(v0 + 320);
      v81 = *(_QWORD *)(v0 + 304);
      if (v78)
      {
        loga = v76;
        v82 = swift_slowAlloc();
        v93 = (_QWORD *)swift_slowAlloc();
        v98 = swift_slowAlloc();
        v100[0] = v98;
        *(_DWORD *)v82 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v83 = sub_23BD45B10();
        typea = v77;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v83, v84, v100);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v85 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v85(v79, v81);
        *(_WORD *)(v82 + 12) = 2114;
        v86 = v1;
        v87 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v87;
        sub_23BD45918();
        *v93 = v87;

        _os_log_impl(&dword_23BCEB000, loga, typea, "unable to fetch %{public}s: %{public}@", (uint8_t *)v82, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v93, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v98, -1, -1);
        MEMORY[0x242611078](v82, -1, -1);

      }
      else
      {
        v85 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v85(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v85;
      v89 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      v99 = (uint64_t (*)(_QWORD))(**(int **)(v89 + 32) + *(_QWORD *)(v89 + 32));
      v90 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v90;
      *v90 = v0;
      v90[1] = sub_23BD3C650;
      return v99(*(_QWORD *)(v0 + 336));
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 168);
    sub_23BCF6190(*(_QWORD *)(v0 + 152), v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v15 = (_QWORD *)(v11 + *(int *)(v12 + 20));
    *v15 = v14;
    v15[1] = v13;
    if (qword_256AA0FD8 != -1)
      swift_once();
    v16 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v21 = (void *)qword_256AACDE8;
    sub_23BCF6190(v17, *(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
    v22 = v21;
    v23 = (void *)sub_23BD452E8();
    objc_msgSend(v22, sel_setObject_forKey_, v16, v23);

    v24 = (_QWORD *)(v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770) + 48));
    sub_23BCF6190(v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    *v24 = v20;
    v24[1] = v19;
    swift_storeEnumTagMultiPayload();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE8);
    *v25 = v0;
    v25[1] = sub_23BD3BD18;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD3B320()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD3B358()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  os_log_type_t type;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v83;

  sub_23BD08EFC(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
  v1 = *(void **)(v0 + 432);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 456) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if (!swift_dynamicCast())
  {
LABEL_8:

    *(_QWORD *)(v0 + 48) = v1;
    v11 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 152);
      v14 = sub_23BD45444();
      __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v15 = sub_23BD4542C();
      v16 = sub_23BD458B8();
      v17 = os_log_type_enabled(v15, v16);
      v18 = *(_QWORD *)(v0 + 336);
      v19 = *(_QWORD *)(v0 + 304);
      v20 = *(_QWORD *)(v0 + 312);
      if (v17)
      {
        v78 = *(_QWORD *)(v0 + 312);
        log = *(os_log_t *)(v0 + 336);
        v22 = *(_QWORD *)(v0 + 224);
        v21 = *(_QWORD *)(v0 + 232);
        v24 = *(_QWORD *)(v0 + 160);
        v23 = *(_QWORD *)(v0 + 168);
        v25 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        v83 = v75;
        *(_DWORD *)v25 = 136315394;
        sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v26 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v25 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v24;
        *(_QWORD *)(v0 + 40) = v23;
        type metadata accessor for CGSize();
        v28 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](v75, -1, -1);
        MEMORY[0x242611078](v25, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v78 + 8))(log, v19);
      }
      else
      {
        v72 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v30 = *(_QWORD *)(v0 + 336);
      v32 = *(_QWORD *)(v0 + 312);
      v31 = *(_QWORD *)(v0 + 320);
      v33 = *(_QWORD *)(v0 + 304);
      v34 = sub_23BD45444();
      __swift_project_value_buffer(v34, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
      v35 = v1;
      v36 = v1;
      v37 = sub_23BD4542C();
      v38 = sub_23BD458B8();
      v39 = os_log_type_enabled(v37, v38);
      v41 = *(_QWORD *)(v0 + 312);
      v40 = *(_QWORD *)(v0 + 320);
      v42 = *(_QWORD *)(v0 + 304);
      if (v39)
      {
        v43 = swift_slowAlloc();
        v77 = (_QWORD *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v83 = v79;
        *(_DWORD *)v43 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v44 = sub_23BD45B10();
        type = v38;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v44, v45, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(v40, v42);
        *(_WORD *)(v43 + 12) = 2114;
        v47 = v1;
        v48 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v48;
        sub_23BD45918();
        *v77 = v48;

        _os_log_impl(&dword_23BCEB000, v37, type, "unable to fetch %{public}s: %{public}@", (uint8_t *)v43, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v77, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v79, -1, -1);
        MEMORY[0x242611078](v43, -1, -1);

      }
      else
      {
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v46;
      v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      logb = (os_log_t)(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
      v74 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v74;
      *v74 = v0;
      v74[1] = sub_23BD3C650;
      return ((uint64_t (*)(_QWORD))logb)(*(_QWORD *)(v0 + 336));
    }
  }
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      goto LABEL_8;
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v49 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 152);
  v51 = sub_23BD45444();
  __swift_project_value_buffer(v51, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v52 = sub_23BD4542C();
  v53 = sub_23BD458B8();
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 240);
  if (v54)
  {
    v56 = *(_QWORD *)(v0 + 232);
    v58 = *(_QWORD *)(v0 + 160);
    v57 = *(_QWORD *)(v0 + 168);
    v59 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v83 = v60;
    *(_DWORD *)v59 = 136315394;
    sub_23BCF6190(v55, v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v61 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v61, v62, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v59 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v58;
    *(_QWORD *)(v0 + 24) = v57;
    type metadata accessor for CGSize();
    v63 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v63, v64, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v52, v53, "Fetching fallback for %s with %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v60, -1, -1);
    MEMORY[0x242611078](v59, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v65 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v67 = v66;
  v69 = v68;
  loga = (os_log_t)((char *)v65 + *v65);
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v70;
  *v70 = v0;
  v70[1] = sub_23BD3BD78;
  return ((uint64_t (*)(_QWORD, double, double))loga)(*(_QWORD *)(v0 + 152), v67, v69);
}

uint64_t sub_23BD3BD18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD3BD78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 488) = a1;
  *(_QWORD *)(v3 + 496) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD3BDE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 496);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(void **)(v0 + 472);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
    swift_release();
    swift_bridgeObjectRelease();

LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  sub_23BD38354(*(_QWORD *)(v0 + 488), v5);
  swift_bridgeObjectRelease();
  if (v3(v5, 1, v4) == 1)
  {
    v6 = *(void **)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 288);
    swift_release();
    sub_23BCEEED8(v10, &qword_256AA0FE8);
    sub_23BD238F0();
    swift_allocError();
    *v11 = 2;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    goto LABEL_5;
  }
  v13 = (_QWORD *)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304));
  v15 = (uint64_t (*)(_QWORD))(*(int *)*v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 504) = v14;
  *v14 = v0;
  v14[1] = sub_23BD3C00C;
  return v15(*(_QWORD *)(v0 + 328));
}

uint64_t sub_23BD3C00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[64] = a1;
  v4[65] = a2;
  v4[66] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD3C07C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 528);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 520);
    v3 = *(_QWORD *)(v0 + 512);
    v4 = *(void **)(v0 + 472);
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 312);
    swift_release();

    sub_23BD08EFC(v3, v2);
    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v6, v7);
    v9(v5, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 614) = *(_BYTE *)(*(_QWORD *)(v0 + 152) + *(int *)(*(_QWORD *)(v0 + 216) + 24));
    return swift_task_switch();
  }
}

uint64_t sub_23BD3C1EC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 614);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 536) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 544) = v6;
  sub_23BD23938(0, (unint64_t *)&qword_256AA1EB0);
  *v6 = v0;
  v6[1] = sub_23BD3C2C4;
  return sub_23BD45B28();
}

uint64_t sub_23BD3C2C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD3C330()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 560) = *(_QWORD *)(v0 + 112);
  return swift_task_switch();
}

uint64_t sub_23BD3C348()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 552);
  sub_23BD45888();
  if (v1)
  {
    v2 = *(void **)(v0 + 560);
    v3 = *(_QWORD *)(v0 + 520);
    v4 = *(_QWORD *)(v0 + 512);
    v5 = *(void **)(v0 + 472);
    v6 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    swift_release();

    sub_23BD08EFC(v4, v3);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v6, v8);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 280);
    v13 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 168);
    sub_23BCF6190(*(_QWORD *)(v0 + 152), v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v16 = (_QWORD *)(v12 + *(int *)(v13 + 20));
    *v16 = v15;
    v16[1] = v14;
    if (qword_256AA0FD8 != -1)
      swift_once();
    v17 = *(_QWORD *)(v0 + 560);
    v18 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v22 = (void *)qword_256AACDE8;
    sub_23BCF6190(v18, *(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    v23 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256AA16F0));
    v24 = v22;
    v25 = (void *)sub_23BD452E8();
    objc_msgSend(v24, sel_setObject_forKey_, v17, v25);

    v26 = (_QWORD *)(v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA1770) + 48));
    sub_23BCF6190(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for FetchedImageAsset);
    *v26 = v21;
    v26[1] = v20;
    swift_storeEnumTagMultiPayload();
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 568) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE8);
    *v27 = v0;
    v27[1] = sub_23BD3C5F0;
    return sub_23BD456A8();
  }
}

uint64_t sub_23BD3C5F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD3C650()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23BD3C6B8()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v1 = *(void **)(v0 + 456);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1;
  v3 = swift_dynamicCast();
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  if ((v3 & 1) != 0)
  {
    *(_BYTE *)v4 = *(_BYTE *)(v0 + 612);
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 16) = v5;
    swift_storeEnumTagMultiPayload();
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 600) = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE8);
    v8 = sub_23BD3C820;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 16) = v5;
    swift_storeEnumTagMultiPayload();
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 592) = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE8);
    v8 = sub_23BD3C7C0;
  }
  *v7 = v0;
  v7[1] = v8;
  return sub_23BD456A8();
}

uint64_t sub_23BD3C7C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD3C820()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD3C880()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  os_log_type_t type;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v83;

  v1 = *(void **)(v0 + 408);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 456) = v1;
  v2 = v1;
  *(_QWORD *)(v0 + 464) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D88);
  sub_23BD23938(0, &qword_256AA2408);
  if (!swift_dynamicCast())
  {
LABEL_8:

    *(_QWORD *)(v0 + 48) = v1;
    v11 = v1;
    if (swift_dynamicCast())
    {
      swift_release();

      if (qword_256AA0FC8 != -1)
        swift_once();
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 152);
      v14 = sub_23BD45444();
      __swift_project_value_buffer(v14, (uint64_t)qword_256AACDC8);
      sub_23BCF6190(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v15 = sub_23BD4542C();
      v16 = sub_23BD458B8();
      v17 = os_log_type_enabled(v15, v16);
      v18 = *(_QWORD *)(v0 + 336);
      v19 = *(_QWORD *)(v0 + 304);
      v20 = *(_QWORD *)(v0 + 312);
      if (v17)
      {
        v78 = *(_QWORD *)(v0 + 312);
        log = *(os_log_t *)(v0 + 336);
        v22 = *(_QWORD *)(v0 + 224);
        v21 = *(_QWORD *)(v0 + 232);
        v24 = *(_QWORD *)(v0 + 160);
        v23 = *(_QWORD *)(v0 + 168);
        v25 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        v83 = v75;
        *(_DWORD *)v25 = 136315394;
        sub_23BCF6190(v22, v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v26 = sub_23BD45774();
        *(_QWORD *)(v0 + 88) = sub_23BD374D4(v26, v27, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        sub_23BCF56E0(v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        *(_WORD *)(v25 + 12) = 2080;
        *(_QWORD *)(v0 + 32) = v24;
        *(_QWORD *)(v0 + 40) = v23;
        type metadata accessor for CGSize();
        v28 = sub_23BD45774();
        *(_QWORD *)(v0 + 104) = sub_23BD374D4(v28, v29, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BCEB000, v15, v16, "Fetching %s for %s cancelled", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611078](v75, -1, -1);
        MEMORY[0x242611078](v25, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v78 + 8))(log, v19);
      }
      else
      {
        v72 = *(_QWORD *)(v0 + 224);

        sub_23BCF56E0(v72, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {

      if (qword_256AA0FC8 != -1)
        swift_once();
      v30 = *(_QWORD *)(v0 + 336);
      v32 = *(_QWORD *)(v0 + 312);
      v31 = *(_QWORD *)(v0 + 320);
      v33 = *(_QWORD *)(v0 + 304);
      v34 = sub_23BD45444();
      __swift_project_value_buffer(v34, (uint64_t)qword_256AACDC8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
      v35 = v1;
      v36 = v1;
      v37 = sub_23BD4542C();
      v38 = sub_23BD458B8();
      v39 = os_log_type_enabled(v37, v38);
      v41 = *(_QWORD *)(v0 + 312);
      v40 = *(_QWORD *)(v0 + 320);
      v42 = *(_QWORD *)(v0 + 304);
      if (v39)
      {
        v43 = swift_slowAlloc();
        v77 = (_QWORD *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v83 = v79;
        *(_DWORD *)v43 = 136446466;
        sub_23BCEEF14(&qword_256AA2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v44 = sub_23BD45B10();
        type = v38;
        *(_QWORD *)(v0 + 72) = sub_23BD374D4(v44, v45, &v83);
        sub_23BD45918();
        swift_bridgeObjectRelease();
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(v40, v42);
        *(_WORD *)(v43 + 12) = 2114;
        v47 = v1;
        v48 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v0 + 80) = v48;
        sub_23BD45918();
        *v77 = v48;

        _os_log_impl(&dword_23BCEB000, v37, type, "unable to fetch %{public}s: %{public}@", (uint8_t *)v43, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1D90);
        swift_arrayDestroy();
        MEMORY[0x242611078](v77, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x242611078](v79, -1, -1);
        MEMORY[0x242611078](v43, -1, -1);

      }
      else
      {
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      }
      *(_QWORD *)(v0 + 576) = v46;
      v73 = *(_QWORD *)(v0 + 184) + *(int *)(v0 + 608);
      logb = (os_log_t)(**(int **)(v73 + 32) + *(_QWORD *)(v73 + 32));
      v74 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v74;
      *v74 = v0;
      v74[1] = sub_23BD3C650;
      return ((uint64_t (*)(_QWORD))logb)(*(_QWORD *)(v0 + 336));
    }
  }
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 472) = v3;
  v4 = objc_msgSend(v3, sel_domain);
  v5 = sub_23BD45768();
  v7 = v6;

  if (v5 == sub_23BD45768() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      goto LABEL_8;
    }
  }

  if (qword_256AA0FC8 != -1)
    swift_once();
  v49 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 152);
  v51 = sub_23BD45444();
  __swift_project_value_buffer(v51, (uint64_t)qword_256AACDC8);
  sub_23BCF6190(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  v52 = sub_23BD4542C();
  v53 = sub_23BD458B8();
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 240);
  if (v54)
  {
    v56 = *(_QWORD *)(v0 + 232);
    v58 = *(_QWORD *)(v0 + 160);
    v57 = *(_QWORD *)(v0 + 168);
    v59 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v83 = v60;
    *(_DWORD *)v59 = 136315394;
    sub_23BCF6190(v55, v56, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v61 = sub_23BD45774();
    *(_QWORD *)(v0 + 120) = sub_23BD374D4(v61, v62, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    sub_23BCF56E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_WORD *)(v59 + 12) = 2080;
    *(_QWORD *)(v0 + 16) = v58;
    *(_QWORD *)(v0 + 24) = v57;
    type metadata accessor for CGSize();
    v63 = sub_23BD45774();
    *(_QWORD *)(v0 + 136) = sub_23BD374D4(v63, v64, &v83);
    sub_23BD45918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BCEB000, v52, v53, "Fetching fallback for %s with %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611078](v60, -1, -1);
    MEMORY[0x242611078](v59, -1, -1);
  }
  else
  {
    sub_23BCF56E0(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  }

  v65 = *(int **)(*(_QWORD *)(v0 + 184) + *(int *)(v0 + 608) + 16);
  sub_23BD458F4();
  v67 = v66;
  v69 = v68;
  loga = (os_log_t)((char *)v65 + *v65);
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v70;
  *v70 = v0;
  v70[1] = sub_23BD3BD78;
  return ((uint64_t (*)(_QWORD, double, double))loga)(*(_QWORD *)(v0 + 152), v67, v69);
}

uint64_t sub_23BD3D238(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v4 + 32) = a3;
  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 48) = type metadata accessor for ImageAssetAction();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  v5 = sub_23BD459F0();
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  sub_23BD45858();
  *(_QWORD *)(v4 + 88) = sub_23BD4584C();
  *(_QWORD *)(v4 + 96) = sub_23BD45810();
  *(_QWORD *)(v4 + 104) = v6;
  return swift_task_switch();
}

uint64_t sub_23BD3D2F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_23BD45C00();
  v3 = v2;
  sub_23BD459E4();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256AA2EF0 + dword_256AA2EF0);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_23BD3D38C;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_23BD3D38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_23BD3D414()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[7];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  v5 = (_QWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17A8) + 48));
  sub_23BCF6190(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *v5 = v3;
  v5[1] = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE8);
  *v6 = v0;
  v6[1] = sub_23BD3D4D0;
  return sub_23BD456A8();
}

uint64_t sub_23BD3D4D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  sub_23BCF56E0(v1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAssetAction);
  return swift_task_switch();
}

uint64_t sub_23BD3D530(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_23BD3F0B8(v3, (uint64_t (*)(char *, double, double))sub_23BD4036C, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  sub_23BD37FE4(v4, a2);
  return swift_release();
}

uint64_t sub_23BD3D5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_23BD459D8();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23BD3D648()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_23BD459F0();
  sub_23BCEEF14(&qword_256AA2EF8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_23BD45B40();
  sub_23BCEEF14(&qword_256AA2F00, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_23BD459FC();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23BD3D760;
  return sub_23BD45B4C();
}

uint64_t sub_23BD3D760()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23BD3D80C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD3D848(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  __int128 v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v38 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2430);
  v39 = a2;
  result = sub_23BD45A38();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v35 = v2;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v37 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v36 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v37;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v36)
                  goto LABEL_34;
                v21 = v37[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(v8 + 56);
      v40 = *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
      v24 = *(_QWORD *)(v38 + 72);
      v25 = v23 + v24 * v19;
      if ((v39 & 1) != 0)
        sub_23BCECF30(v25, (uint64_t)v7, &qword_256AA1438);
      else
        sub_23BCECE9C(v25, (uint64_t)v7, &qword_256AA1438);
      sub_23BD45B88();
      sub_23BD45BAC();
      sub_23BD45BAC();
      result = sub_23BD45BB8();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17) = v40;
      result = sub_23BCECF30((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, &qword_256AA1438);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_23BD3DBB4(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = v2;
  v5 = type metadata accessor for ImageAsset();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2F10);
  v10 = (_QWORD *)sub_23BD45A38();
  if (*(_QWORD *)(v9 + 16))
  {
    v27 = v3;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = (_QWORD *)(v9 + 64);
    v13 = -1;
    if (v11 < 64)
      v13 = ~(-1 << v11);
    v14 = v13 & *(_QWORD *)(v9 + 64);
    v15 = (unint64_t)(v11 + 63) >> 6;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v21 >= v15)
          goto LABEL_23;
        v22 = v12[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v15)
            goto LABEL_23;
          v22 = v12[v17];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v27;
                goto LABEL_30;
              }
              v25 = 1 << *(_BYTE *)(v9 + 32);
              if (v25 >= 64)
                bzero((void *)(v9 + 64), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v12 = -1 << v25;
              v3 = v27;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v12[v23];
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_32;
                if (v17 >= v15)
                  goto LABEL_23;
                v22 = v12[v17];
                ++v23;
                if (v22)
                  goto LABEL_20;
              }
            }
            v17 = v23;
          }
        }
LABEL_20:
        v14 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(v9 + 48) + *(_QWORD *)(v6 + 72) * v20;
      if ((a2 & 1) != 0)
      {
        sub_23BCFC424(v24, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
      }
      else
      {
        sub_23BCF6190(v24, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
        v18 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
        swift_bridgeObjectRetain();
      }
      result = sub_23BD3DE10((uint64_t)v8, v18, v10);
    }
  }
  result = swift_release();
LABEL_30:
  *v3 = v10;
  return result;
}

uint64_t sub_23BD3DE10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v24 = a2;
  v5 = sub_23BD4515C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v23 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23BD451F8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD45B88();
  sub_23BCECE9C(a1, (uint64_t)v17, &qword_256AA0FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1028, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  v18 = type metadata accessor for ImageAsset();
  sub_23BD45780();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BCECE9C(a1 + *(int *)(v18 + 28), (uint64_t)v10, &qword_256AA0FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5) == 1)
  {
    sub_23BD45BA0();
  }
  else
  {
    v19 = v23;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v23, v10, v5);
    sub_23BD45BA0();
    sub_23BCEEF14(&qword_256AA1030, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23BD45714();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  sub_23BD45BB8();
  v20 = sub_23BD45978();
  *(_QWORD *)((char *)a3 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
  result = sub_23BCFC424(a1, a3[6] + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v20, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *(_QWORD *)(a3[7] + 8 * v20) = v24;
  ++a3[2];
  return result;
}

uint64_t sub_23BD3E164(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v37 - v11;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2430);
  result = sub_23BD45A44();
  v14 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v16 << 6);
    }
    else
    {
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v20 >= v39)
        return v14;
      v21 = v38[v20];
      ++v16;
      if (!v21)
      {
        v16 = v20 + 1;
        if (v20 + 1 >= v39)
          return v14;
        v21 = v38[v16];
        if (!v21)
        {
          v16 = v20 + 2;
          if (v20 + 2 >= v39)
            return v14;
          v21 = v38[v16];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              return v14;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v16 >= v39)
                  return v14;
                v21 = v38[v16];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v16 = v22;
          }
        }
      }
LABEL_24:
      v15 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v16 << 6);
    }
    v23 = (uint64_t *)(a4[6] + 16 * v19);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v40 + 72);
    sub_23BCECE9C(a4[7] + v26 * v19, (uint64_t)v12, &qword_256AA1438);
    sub_23BCECF30((uint64_t)v12, v41, &qword_256AA1438);
    sub_23BD45B88();
    sub_23BD45BAC();
    sub_23BD45BAC();
    result = sub_23BD45BB8();
    v27 = -1 << *(_BYTE *)(v14 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
    {
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v17 + 8 * v29);
      }
      while (v34 == -1);
      v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(_QWORD *)(v17 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v30);
    *v35 = v25;
    v35[1] = v24;
    result = sub_23BCECF30(v41, *(_QWORD *)(v14 + 56) + v30 * v26, &qword_256AA1438);
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23BD3E4AC(unint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (double *)(a3[6] + 16 * a1);
  *v8 = a4;
  v8[1] = a5;
  v9 = a3[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  result = sub_23BCECF30(a2, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, &qword_256AA1438);
  v12 = a3[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a3[2] = v14;
  return result;
}

uint64_t sub_23BD3E548(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ImageAsset();
  result = sub_23BCFC424(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_23BD3E5E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2430);
  v6 = *v0;
  v7 = sub_23BD45A2C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v12 = 1 << *(_BYTE *)(v6 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v6 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_22:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    v18 = 16 * v17;
    v19 = *(_QWORD *)(v3 + 72) * v17;
    v20 = *(_QWORD *)(v6 + 56) + v19;
    v26 = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v17);
    sub_23BCECE9C(v20, (uint64_t)v5, &qword_256AA1438);
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + v18) = v26;
    result = (void *)sub_23BCECF30((uint64_t)v5, *(_QWORD *)(v8 + 56) + v19, &qword_256AA1438);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_23BD3E814()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for ImageAsset();
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2F10);
  v5 = *v0;
  v6 = sub_23BD45A2C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v27 + 72) * v17;
    sub_23BCF6190(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    sub_23BCFC424((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23BD3EA4C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23BD3EAEC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = sub_23BD4515C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_23BD3EB80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  v2 = type metadata accessor for ImageAsset();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23BD451C8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageAssetFeature.TaskIdentifier(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2EE0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v17[*(int *)(v18 + 48)];
  sub_23BCF6190(v29, (uint64_t)v17, type metadata accessor for ImageAssetFeature.TaskIdentifier);
  sub_23BCF6190(v30, v19, type metadata accessor for ImageAssetFeature.TaskIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23BCF6190((uint64_t)v17, (uint64_t)v11, type metadata accessor for ImageAssetFeature.TaskIdentifier);
    v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8) + 48);
    v22 = *(double *)&v11[v20];
    v21 = *(double *)&v11[v20 + 8];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = *(double *)(v19 + v20);
      v23 = *(double *)(v19 + v20 + 8);
      sub_23BCFC424(v19, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      v25 = static ImageAsset.== infix(_:_:)(v11, v4);
      sub_23BCF56E0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      sub_23BCF56E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
      if ((v25 & 1) != 0)
      {
        v26 = v21 == v23 && v22 == v24;
        goto LABEL_12;
      }
      sub_23BCF56E0((uint64_t)v17, type metadata accessor for ImageAssetFeature.TaskIdentifier);
LABEL_14:
      v26 = 0;
      return v26 & 1;
    }
    sub_23BCF56E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageAsset);
LABEL_10:
    sub_23BCEEED8((uint64_t)v17, &qword_256AA2EE0);
    goto LABEL_14;
  }
  sub_23BCF6190((uint64_t)v17, (uint64_t)v14, type metadata accessor for ImageAssetFeature.TaskIdentifier);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v19, v5);
  v26 = sub_23BD451B0();
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v8, v5);
  v27(v14, v5);
LABEL_12:
  sub_23BCF56E0((uint64_t)v17, type metadata accessor for ImageAssetFeature.TaskIdentifier);
  return v26 & 1;
}

void sub_23BD3EE74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, double, double))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t (*v29)(char *, double, double);

  v24 = a2;
  v29 = a4;
  v25 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA1438);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 64);
  v26 = 0;
  v27 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v28 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v28)
        goto LABEL_24;
      v21 = *(_QWORD *)(v27 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v28)
          goto LABEL_24;
        v21 = *(_QWORD *)(v27 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v13 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_5:
    v16 = (double *)(*(_QWORD *)(a3 + 48) + 16 * v15);
    v17 = *v16;
    v18 = v16[1];
    sub_23BCECE9C(*(_QWORD *)(a3 + 56) + *(_QWORD *)(v6 + 72) * v15, (uint64_t)v8, &qword_256AA1438);
    v19 = v29(v8, v17, v18);
    sub_23BCEEED8((uint64_t)v8, &qword_256AA1438);
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        sub_23BD3E164(v25, v24, v26, (_QWORD *)a3);
        return;
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v28)
    goto LABEL_24;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_23BD3F0B8(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, double, double), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = isStackAllocationSafe;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_23BD3EE74((_QWORD *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    sub_23BD3EE74((unint64_t *)v11, v8, v6, a2);
    a3 = v12;
    MEMORY[0x242611078](v11, -1, -1);
  }
  return a3;
}

uint64_t type metadata accessor for ImageAssetFeature.TaskIdentifier(uint64_t a1)
{
  return sub_23BD21DE8(a1, qword_256AA2EA0);
}

uint64_t sub_23BD3F23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ImageAsset();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = sub_23BD451F8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v3, v4);
  swift_bridgeObjectRelease();
  v6 = v0 + v3 + *(int *)(v1 + 28);
  v7 = sub_23BD4515C();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t sub_23BD3F330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (double *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BCF6D4C;
  return sub_23BD3D238(a1, v6, v8, v9);
}

uint64_t sub_23BD3F3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for ImageAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v12 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageAssetFeature(0) - 8) + 80);
  v5 = sub_23BD451F8();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  v7 = v0 + v3 + *(int *)(v1 + 28);
  v8 = sub_23BD4515C();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = sub_23BD451C8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v0 + ((v4 + ((((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4), v10);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD3F550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for ImageAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageAssetFeature(0) - 8) + 80);
  v9 = v1 + v5;
  v10 = *(double *)(v1 + v6);
  v11 = *(double *)(v1 + v6 + 8);
  v12 = *(double *)(v1 + v7);
  v13 = v1 + ((v8 + v7 + 8) & ~v8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_23BCF6F84;
  return sub_23BD39874(a1, v9, v13, v10, v11, v12);
}

uint64_t sub_23BD3F628()
{
  return sub_23BCEEF14(&qword_256AA2D90, (uint64_t (*)(uint64_t))type metadata accessor for ImageAssetAction, (uint64_t)&protocol conformance descriptor for ImageAssetAction);
}

uint64_t sub_23BD3F654()
{
  return sub_23BCEEF14(&qword_256AA2D98, (uint64_t (*)(uint64_t))type metadata accessor for ImageAssetAction, (uint64_t)&protocol conformance descriptor for ImageAssetAction);
}

uint64_t sub_23BD3F680()
{
  return sub_23BCEEF14(&qword_256AA1480, (uint64_t (*)(uint64_t))type metadata accessor for ImageAssetState, (uint64_t)&protocol conformance descriptor for ImageAssetState);
}

uint64_t getEnumTagSinglePayload for ImageAssetFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD3F6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23BD451C8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageAssetFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD3F740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23BD451C8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23BD3F7B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BD451C8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BD3F828(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23BD451F8();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v11 = (int *)type metadata accessor for ImageAsset();
      v12 = v11[5];
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      *((_BYTE *)a1 + v11[6]) = *((_BYTE *)a2 + v11[6]);
      v16 = v11[7];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = sub_23BD4515C();
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)((char *)a1 + *(int *)(v23 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 48));
    }
    else
    {
      v10 = sub_23BD451C8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BD3FA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v9 = sub_23BD451C8();
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v11 = a1;
    return v10(v11, v9);
  }
  v2 = sub_23BD451F8();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  v4 = type metadata accessor for ImageAsset();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(v4 + 28);
  v6 = sub_23BD4515C();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    v11 = v5;
    v9 = v6;
    return v10(v11, v9);
  }
  return result;
}

char *sub_23BD3FB20(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23BD451F8();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
    v8 = (int *)type metadata accessor for ImageAsset();
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    a1[v8[6]] = a2[v8[6]];
    v13 = v8[7];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = sub_23BD4515C();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
    *(_OWORD *)&a1[*(int *)(v20 + 48)] = *(_OWORD *)&a2[*(int *)(v20 + 48)];
  }
  else
  {
    v7 = sub_23BD451C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_23BD3FD00(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, type metadata accessor for ImageAssetFeature.TaskIdentifier);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23BD451F8();
      v5 = *(_QWORD *)(v4 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
      v8 = (int *)type metadata accessor for ImageAsset();
      v9 = v8[5];
      v10 = &a1[v9];
      v11 = &a2[v9];
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
      a1[v8[6]] = a2[v8[6]];
      v12 = v8[7];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = sub_23BD4515C();
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)&a1[*(int *)(v19 + 48)] = *(_OWORD *)&a2[*(int *)(v19 + 48)];
    }
    else
    {
      v7 = sub_23BD451C8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_23BD3FF00(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23BD451F8();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
    v8 = (int *)type metadata accessor for ImageAsset();
    *(_OWORD *)&a1[v8[5]] = *(_OWORD *)&a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    v9 = v8[7];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_23BD4515C();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
    *(_OWORD *)&a1[*(int *)(v15 + 48)] = *(_OWORD *)&a2[*(int *)(v15 + 48)];
  }
  else
  {
    v7 = sub_23BD451C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_23BD400C8(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_23BCF56E0((uint64_t)a1, type metadata accessor for ImageAssetFeature.TaskIdentifier);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_23BD451F8();
      v5 = *(_QWORD *)(v4 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
      v8 = (int *)type metadata accessor for ImageAsset();
      *(_OWORD *)&a1[v8[5]] = *(_OWORD *)&a2[v8[5]];
      a1[v8[6]] = a2[v8[6]];
      v9 = v8[7];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_23BD4515C();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA0FE8);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA17B8);
      *(_OWORD *)&a1[*(int *)(v15 + 48)] = *(_OWORD *)&a2[*(int *)(v15 + 48)];
    }
    else
    {
      v7 = sub_23BD451C8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BD402A8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  _QWORD v3[6];

  result = sub_23BD451C8();
  if (v1 <= 0x3F)
  {
    v3[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ImageAsset();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23BD4033C()
{
  return sub_23BCEEF14(&qword_256AA2ED8, type metadata accessor for ImageAssetFeature.TaskIdentifier, (uint64_t)&unk_23BD4B348);
}

uint64_t Monogram.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  type metadata accessor for Monogram();
  sub_23BD4512C();
  sub_23BCEEF14(&qword_256AA2F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  return sub_23BD45714();
}

uint64_t type metadata accessor for Monogram()
{
  uint64_t result;

  result = qword_256AA2FA0;
  if (!qword_256AA2FA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static Monogram.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_23BD45B1C() & 1) == 0)
    return 0;
  type metadata accessor for Monogram();
  return sub_23BD45114();
}

uint64_t sub_23BD404A4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x706D6F43656D616ELL;
  else
    return 0x696669746E656469;
}

uint64_t sub_23BD404EC()
{
  char *v0;

  return sub_23BD404A4(*v0);
}

uint64_t sub_23BD404F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD412C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD40518()
{
  sub_23BD406BC();
  return sub_23BD45C0C();
}

uint64_t sub_23BD40540()
{
  sub_23BD406BC();
  return sub_23BD45C18();
}

uint64_t Monogram.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2F20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD406BC();
  sub_23BD45BF4();
  v8[15] = 0;
  sub_23BD45AE0();
  if (!v1)
  {
    type metadata accessor for Monogram();
    v8[14] = 1;
    sub_23BD4512C();
    sub_23BCEEF14(&qword_256AA2F30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC20]);
    sub_23BD45AF8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BD406BC()
{
  unint64_t result;

  result = qword_256AA2F28;
  if (!qword_256AA2F28)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B564, &type metadata for Monogram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2F28);
  }
  return result;
}

uint64_t Monogram.hashValue.getter()
{
  sub_23BD45B88();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  type metadata accessor for Monogram();
  sub_23BD4512C();
  sub_23BCEEF14(&qword_256AA2F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_23BD45714();
  return sub_23BD45BB8();
}

uint64_t Monogram.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v4 = sub_23BD4512C();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2F38);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Monogram();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD406BC();
  sub_23BD45BE8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = a1;
  v21 = v6;
  v12 = v11;
  v14 = v23;
  v13 = v24;
  v15 = v25;
  v16 = v26;
  v28 = 0;
  *v12 = sub_23BD45A8C();
  v12[1] = v17;
  v27 = 1;
  sub_23BCEEF14(&qword_256AA2F40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC38]);
  sub_23BD45AA4();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v16);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v12 + *(int *)(v9 + 20), v14, v15);
  sub_23BD40BF0((uint64_t)v12, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_23BD40C34((uint64_t)v12);
}

uint64_t sub_23BD409F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Monogram.init(from:)(a1, a2);
}

uint64_t sub_23BD40A04(_QWORD *a1)
{
  return Monogram.encode(to:)(a1);
}

uint64_t sub_23BD40A18()
{
  sub_23BD45B88();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD4512C();
  sub_23BCEEF14(&qword_256AA2F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_23BD45714();
  return sub_23BD45BB8();
}

uint64_t sub_23BD40ABC()
{
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD4512C();
  sub_23BCEEF14(&qword_256AA2F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  return sub_23BD45714();
}

uint64_t sub_23BD40B50()
{
  sub_23BD45B88();
  swift_bridgeObjectRetain();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  sub_23BD4512C();
  sub_23BCEEF14(&qword_256AA2F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDCCC10], MEMORY[0x24BDCCC28]);
  sub_23BD45714();
  return sub_23BD45BB8();
}

uint64_t sub_23BD40BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Monogram();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD40C34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Monogram();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD40C70()
{
  return sub_23BCEEF14(&qword_256AA2A20, (uint64_t (*)(uint64_t))type metadata accessor for Monogram, (uint64_t)&protocol conformance descriptor for Monogram);
}

uint64_t sub_23BD40C9C(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_23BD45B1C() & 1) != 0)
    return sub_23BD45114();
  else
    return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Monogram(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23BD4512C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Monogram(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BD4512C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Monogram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23BD4512C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for Monogram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BD4512C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Monogram(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23BD4512C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for Monogram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23BD4512C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Monogram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD40FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BD4512C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Monogram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD41038(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23BD4512C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BD410AC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BD4512C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Monogram.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD4116C + 4 * byte_23BD4B3B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD411A0 + 4 * byte_23BD4B3B0[v4]))();
}

uint64_t sub_23BD411A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD411A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD411B0);
  return result;
}

uint64_t sub_23BD411BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD411C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD411C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD411D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Monogram.CodingKeys()
{
  return &type metadata for Monogram.CodingKeys;
}

unint64_t sub_23BD411F0()
{
  unint64_t result;

  result = qword_256AA2FD8;
  if (!qword_256AA2FD8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B53C, &type metadata for Monogram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2FD8);
  }
  return result;
}

unint64_t sub_23BD41238()
{
  unint64_t result;

  result = qword_256AA2FE0;
  if (!qword_256AA2FE0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B4AC, &type metadata for Monogram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2FE0);
  }
  return result;
}

unint64_t sub_23BD41280()
{
  unint64_t result;

  result = qword_256AA2FE8;
  if (!qword_256AA2FE8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B4D4, &type metadata for Monogram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2FE8);
  }
  return result;
}

uint64_t sub_23BD412C4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (sub_23BD45B1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x706D6F43656D616ELL && a2 == 0xEE0073746E656E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t DynamicArtworkLayoutEnvironment.init(dynamicTypeSize:horizontalSizeClass:platform:verticalSizeClass:viewWidth:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  int *v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v13)(_BYTE *, uint64_t, uint64_t);

  *a5 = a1;
  a5[1] = MEMORY[0x2426101F0]();
  v9 = (int *)type metadata accessor for DynamicArtworkLayoutEnvironment();
  v10 = &a5[v9[6]];
  v11 = sub_23BD452AC();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v13(v10, a2, v11);
  a5[v9[7]] = a3;
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v13)(&a5[v9[8]], a4, v11);
}

uint64_t DynamicArtworkLayoutEnvironment.dynamicTypeSize.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DynamicArtworkLayoutEnvironment.gridSizeClass.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t DynamicArtworkLayoutEnvironment.horizontalSizeClass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DynamicArtworkLayoutEnvironment() + 24);
  v4 = sub_23BD452AC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DynamicArtworkLayoutEnvironment.platform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DynamicArtworkLayoutEnvironment() + 28));
}

uint64_t DynamicArtworkLayoutEnvironment.verticalSizeClass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DynamicArtworkLayoutEnvironment() + 32);
  v4 = sub_23BD452AC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23BD41540(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD4157C + 4 * byte_23BD4B5C0[a1]))(0xD000000000000013, 0x800000023BD4BF10);
}

uint64_t sub_23BD4157C()
{
  return 0x5463696D616E7964;
}

uint64_t sub_23BD415A0()
{
  return 0x657A695364697267;
}

uint64_t sub_23BD415C4()
{
  return 0x6D726F6674616C70;
}

unint64_t sub_23BD415DC()
{
  return 0xD000000000000011;
}

uint64_t sub_23BD415F8()
{
  unsigned __int8 *v0;

  return sub_23BD41540(*v0);
}

uint64_t sub_23BD41600()
{
  sub_23BD41FF4();
  return sub_23BD45C0C();
}

uint64_t sub_23BD41628()
{
  sub_23BD41FF4();
  return sub_23BD45C18();
}

uint64_t DynamicArtworkLayoutEnvironment.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA2FF0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD41FF4();
  sub_23BD45BF4();
  v19 = *v3;
  v18 = 0;
  sub_23BD42038();
  sub_23BD45AF8();
  if (!v2)
  {
    v17 = v3[1];
    v16 = 1;
    sub_23BD4207C();
    sub_23BD45AF8();
    v9 = type metadata accessor for DynamicArtworkLayoutEnvironment();
    v15 = 2;
    sub_23BD452AC();
    sub_23BCEEF14(&qword_256AA3010, (uint64_t (*)(uint64_t))MEMORY[0x24BE35160], MEMORY[0x24BE35170]);
    sub_23BD45AF8();
    v14 = v3[*(int *)(v9 + 28)];
    v13 = 3;
    sub_23BD28D8C();
    sub_23BD45AF8();
    v12 = 4;
    sub_23BD45AF8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t DynamicArtworkLayoutEnvironment.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v30 = a2;
  v3 = sub_23BD452AC();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (void (*)(uint64_t, char *, uint64_t))((char *)&v27 - v6);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA3018);
  v8 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD41FF4();
  v35 = v10;
  v14 = v36;
  sub_23BD45BE8();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v7;
  v16 = v8;
  v36 = v11;
  v29 = v13;
  v17 = v33;
  v43 = 0;
  sub_23BD420C0();
  v18 = v34;
  sub_23BD45AA4();
  v19 = v29;
  *v29 = v44;
  v41 = 1;
  sub_23BD42104();
  sub_23BD45AA4();
  v19[1] = v42;
  v40 = 2;
  v20 = sub_23BCEEF14(&qword_256AA3030, (uint64_t (*)(uint64_t))MEMORY[0x24BE35160], MEMORY[0x24BE35188]);
  v21 = v15;
  v22 = v20;
  v28 = v21;
  sub_23BD45AA4();
  v27 = v22;
  v23 = v36;
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
  v24((uint64_t)&v19[*(int *)(v36 + 24)], (char *)v28, v17);
  v38 = 3;
  sub_23BD29028();
  sub_23BD45AA4();
  v28 = v24;
  v25 = (uint64_t)v29;
  v29[*(int *)(v23 + 28)] = v39;
  v37 = 4;
  sub_23BD45AA4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v35, v18);
  v28(v25 + *(int *)(v23 + 32), v31, v17);
  sub_23BD0F718(v25, v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23BD0F75C(v25);
}

uint64_t sub_23BD41C18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicArtworkLayoutEnvironment.init(from:)(a1, a2);
}

uint64_t sub_23BD41C2C(_QWORD *a1)
{
  return DynamicArtworkLayoutEnvironment.encode(to:)(a1);
}

uint64_t DynamicArtworkLayoutEnvironment.hash(into:)()
{
  sub_23BD45210();
  sub_23BD451D4();
  sub_23BD45BAC();
  type metadata accessor for DynamicArtworkLayoutEnvironment();
  sub_23BD452AC();
  sub_23BCEEF14(&qword_256AA3038, (uint64_t (*)(uint64_t))MEMORY[0x24BE35160], MEMORY[0x24BE35178]);
  sub_23BD45714();
  sub_23BD45780();
  swift_bridgeObjectRelease();
  return sub_23BD45714();
}

uint64_t DynamicArtworkLayoutEnvironment.hashValue.getter()
{
  sub_23BD45B88();
  DynamicArtworkLayoutEnvironment.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BD41D70()
{
  sub_23BD45B88();
  DynamicArtworkLayoutEnvironment.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t sub_23BD41DB0()
{
  sub_23BD45B88();
  DynamicArtworkLayoutEnvironment.hash(into:)();
  return sub_23BD45BB8();
}

uint64_t _s12FitnessAsset31DynamicArtworkLayoutEnvironmentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((sub_23BD45204() & 1) == 0)
    goto LABEL_11;
  sub_23BD451D4();
  v5 = v4;
  sub_23BD451D4();
  if (v5 != v6)
    goto LABEL_11;
  v7 = type metadata accessor for DynamicArtworkLayoutEnvironment();
  sub_23BD452AC();
  sub_23BCEEF14(&qword_256AA3100, (uint64_t (*)(uint64_t))MEMORY[0x24BE35160], MEMORY[0x24BE35180]);
  sub_23BD457A4();
  sub_23BD457A4();
  if (v13 == v11 && v14 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_23BD45B1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = 0;
    if ((v8 & 1) == 0)
      return v9 & 1;
  }
  if ((sub_23BD270C4(*(_BYTE *)(a1 + *(int *)(v7 + 28)), *(_BYTE *)(a2 + *(int *)(v7 + 28))) & 1) == 0)
  {
LABEL_11:
    v9 = 0;
    return v9 & 1;
  }
  sub_23BD457A4();
  sub_23BD457A4();
  if (v13 == v11 && v14 == v12)
    v9 = 1;
  else
    v9 = sub_23BD45B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t type metadata accessor for DynamicArtworkLayoutEnvironment()
{
  uint64_t result;

  result = qword_256AA30A0;
  if (!qword_256AA30A0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD41FF4()
{
  unint64_t result;

  result = qword_256AA2FF8;
  if (!qword_256AA2FF8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B7DC, &type metadata for DynamicArtworkLayoutEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA2FF8);
  }
  return result;
}

unint64_t sub_23BD42038()
{
  unint64_t result;

  result = qword_256AA3000;
  if (!qword_256AA3000)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BE34FF0], MEMORY[0x24BE34FE8]);
    atomic_store(result, (unint64_t *)&qword_256AA3000);
  }
  return result;
}

unint64_t sub_23BD4207C()
{
  unint64_t result;

  result = qword_256AA3008;
  if (!qword_256AA3008)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BE34F58], MEMORY[0x24BE34F50]);
    atomic_store(result, (unint64_t *)&qword_256AA3008);
  }
  return result;
}

unint64_t sub_23BD420C0()
{
  unint64_t result;

  result = qword_256AA3020;
  if (!qword_256AA3020)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BE34FF8], MEMORY[0x24BE34FE8]);
    atomic_store(result, (unint64_t *)&qword_256AA3020);
  }
  return result;
}

unint64_t sub_23BD42104()
{
  unint64_t result;

  result = qword_256AA3028;
  if (!qword_256AA3028)
  {
    result = MEMORY[0x242610FF4](MEMORY[0x24BE34F60], MEMORY[0x24BE34F50]);
    atomic_store(result, (unint64_t *)&qword_256AA3028);
  }
  return result;
}

uint64_t sub_23BD42148()
{
  return sub_23BCEEF14(&qword_256AA3040, (uint64_t (*)(uint64_t))type metadata accessor for DynamicArtworkLayoutEnvironment, (uint64_t)&protocol conformance descriptor for DynamicArtworkLayoutEnvironment);
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicArtworkLayoutEnvironment(_WORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23BD452AC();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v11((char *)v4 + v12, (char *)a2 + v12, v10);
  }
  return v4;
}

uint64_t destroy for DynamicArtworkLayoutEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23BD452AC();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 32), v5);
}

_WORD *initializeWithCopy for DynamicArtworkLayoutEnvironment(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BD452AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10((char *)a1 + v11, (char *)a2 + v11, v9);
  return a1;
}

_BYTE *assignWithCopy for DynamicArtworkLayoutEnvironment(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BD452AC();
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  a1[a3[7]] = a2[a3[7]];
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  return a1;
}

_WORD *initializeWithTake for DynamicArtworkLayoutEnvironment(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BD452AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10((char *)a1 + v11, (char *)a2 + v11, v9);
  return a1;
}

_WORD *assignWithTake for DynamicArtworkLayoutEnvironment(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BD452AC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10((char *)a1 + v11, (char *)a2 + v11, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicArtworkLayoutEnvironment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD4250C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23BD452AC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 4)
    return v9 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DynamicArtworkLayoutEnvironment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD42594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23BD452AC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 3;
  return result;
}

uint64_t sub_23BD42610()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BD452AC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DynamicArtworkLayoutEnvironment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD426E4 + 4 * byte_23BD4B5CA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD42718 + 4 * byte_23BD4B5C5[v4]))();
}

uint64_t sub_23BD42718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD42720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD42728);
  return result;
}

uint64_t sub_23BD42734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD4273CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD42740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD42748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicArtworkLayoutEnvironment.CodingKeys()
{
  return &type metadata for DynamicArtworkLayoutEnvironment.CodingKeys;
}

unint64_t sub_23BD42768()
{
  unint64_t result;

  result = qword_256AA30E8;
  if (!qword_256AA30E8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B7B4, &type metadata for DynamicArtworkLayoutEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA30E8);
  }
  return result;
}

unint64_t sub_23BD427B0()
{
  unint64_t result;

  result = qword_256AA30F0;
  if (!qword_256AA30F0)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B724, &type metadata for DynamicArtworkLayoutEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA30F0);
  }
  return result;
}

unint64_t sub_23BD427F8()
{
  unint64_t result;

  result = qword_256AA30F8;
  if (!qword_256AA30F8)
  {
    result = MEMORY[0x242610FF4](&unk_23BD4B74C, &type metadata for DynamicArtworkLayoutEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AA30F8);
  }
  return result;
}

void DynamicPredicateEqualityDescriptor.makePredicateExpression<A>(using:)()
{
  type metadata accessor for ArtworkPredicateValue();
}

uint64_t sub_23BD44C08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BD45348();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD44C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BD45348();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD44C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BD45348();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD44CCC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AA24A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD44D0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 48))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23BD44D44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 56))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD44D7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23BD44DB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23BD44DEC()
{
  return 16;
}

__n128 sub_23BD44DF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD44E04()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD44E30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 56))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_23BD44E68()
{
  return 16;
}

__n128 sub_23BD44E74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD44E80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 48))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23BD44EB8()
{
  return 16;
}

__n128 sub_23BD44EC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD44ED4()
{
  return 16;
}

__n128 sub_23BD44EE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BD44EEC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for ArtworkPredicateValue<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BD44F2C()
{
  DynamicPredicateEqualityDescriptor.makePredicateExpression<A>(using:)();
}

uint64_t sub_23BD44F44()
{
  return 16;
}

__n128 sub_23BD44F50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

BOOL static AssetError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t AssetError.hash(into:)()
{
  return sub_23BD45B94();
}

uint64_t AssetError.hashValue.getter()
{
  sub_23BD45B88();
  sub_23BD45B94();
  return sub_23BD45BB8();
}

unint64_t sub_23BD44FE0()
{
  unint64_t result;

  result = qword_256AA3128;
  if (!qword_256AA3128)
  {
    result = MEMORY[0x242610FF4](&protocol conformance descriptor for AssetError, &type metadata for AssetError);
    atomic_store(result, (unint64_t *)&qword_256AA3128);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD45070 + 4 * byte_23BD4B985[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD450A4 + 4 * byte_23BD4B980[v4]))();
}

uint64_t sub_23BD450A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD450AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD450B4);
  return result;
}

uint64_t sub_23BD450C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD450C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD450CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD450D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetError()
{
  return &type metadata for AssetError;
}

uint64_t sub_23BD450F0()
{
  return MEMORY[0x24BDCB110]();
}

uint64_t sub_23BD450FC()
{
  return MEMORY[0x24BDCCB90]();
}

uint64_t sub_23BD45108()
{
  return MEMORY[0x24BDCCBA0]();
}

uint64_t sub_23BD45114()
{
  return MEMORY[0x24BDCCBC8]();
}

uint64_t sub_23BD45120()
{
  return MEMORY[0x24BDCCBF8]();
}

uint64_t sub_23BD4512C()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t sub_23BD45138()
{
  return MEMORY[0x24BDCCC40]();
}

uint64_t sub_23BD45144()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_23BD45150()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_23BD4515C()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23BD45168()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_23BD45174()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_23BD45180()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_23BD4518C()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_23BD45198()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_23BD451A4()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23BD451B0()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_23BD451BC()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23BD451C8()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23BD451D4()
{
  return MEMORY[0x24BE34F40]();
}

uint64_t sub_23BD451E0()
{
  return MEMORY[0x24BE34F68]();
}

uint64_t sub_23BD451EC()
{
  return MEMORY[0x24BE34F80]();
}

uint64_t sub_23BD451F8()
{
  return MEMORY[0x24BE34FA0]();
}

uint64_t sub_23BD45204()
{
  return MEMORY[0x24BE34FD0]();
}

uint64_t sub_23BD45210()
{
  return MEMORY[0x24BE34FD8]();
}

uint64_t sub_23BD4521C()
{
  return MEMORY[0x24BE35000]();
}

uint64_t sub_23BD45228()
{
  return MEMORY[0x24BE35008]();
}

uint64_t sub_23BD45234()
{
  return MEMORY[0x24BE35018]();
}

uint64_t sub_23BD45240()
{
  return MEMORY[0x24BE35020]();
}

uint64_t sub_23BD4524C()
{
  return MEMORY[0x24BE35088]();
}

uint64_t sub_23BD45258()
{
  return MEMORY[0x24BE35098]();
}

uint64_t sub_23BD45264()
{
  return MEMORY[0x24BE350A0]();
}

uint64_t sub_23BD45270()
{
  return MEMORY[0x24BE350A8]();
}

uint64_t sub_23BD4527C()
{
  return MEMORY[0x24BE350E0]();
}

uint64_t sub_23BD45288()
{
  return MEMORY[0x24BE350E8]();
}

uint64_t sub_23BD45294()
{
  return MEMORY[0x24BE35120]();
}

uint64_t sub_23BD452A0()
{
  return MEMORY[0x24BE35158]();
}

uint64_t sub_23BD452AC()
{
  return MEMORY[0x24BE35160]();
}

uint64_t sub_23BD452B8()
{
  return MEMORY[0x24BE35190]();
}

uint64_t sub_23BD452C4()
{
  return MEMORY[0x24BE37980]();
}

uint64_t sub_23BD452D0()
{
  return MEMORY[0x24BE379A0]();
}

uint64_t sub_23BD452DC()
{
  return MEMORY[0x24BE379B0]();
}

uint64_t sub_23BD452E8()
{
  return MEMORY[0x24BE379B8]();
}

uint64_t sub_23BD452F4()
{
  return MEMORY[0x24BE379C0]();
}

uint64_t sub_23BD45300()
{
  return MEMORY[0x24BE379C8]();
}

uint64_t sub_23BD4530C()
{
  return MEMORY[0x24BE37AA8]();
}

uint64_t sub_23BD45318()
{
  return MEMORY[0x24BE37AB0]();
}

uint64_t sub_23BD45324()
{
  return MEMORY[0x24BE37AC8]();
}

uint64_t sub_23BD45330()
{
  return MEMORY[0x24BE37AD0]();
}

uint64_t sub_23BD4533C()
{
  return MEMORY[0x24BE37AD8]();
}

uint64_t sub_23BD45348()
{
  return MEMORY[0x24BE37AE0]();
}

uint64_t sub_23BD45354()
{
  return MEMORY[0x24BE37AF0]();
}

uint64_t sub_23BD45360()
{
  return MEMORY[0x24BE37AF8]();
}

uint64_t sub_23BD4536C()
{
  return MEMORY[0x24BE37B00]();
}

uint64_t sub_23BD45378()
{
  return MEMORY[0x24BE37B08]();
}

uint64_t sub_23BD45384()
{
  return MEMORY[0x24BE37B40]();
}

uint64_t sub_23BD45390()
{
  return MEMORY[0x24BE37B58]();
}

uint64_t sub_23BD4539C()
{
  return MEMORY[0x24BE37B60]();
}

uint64_t sub_23BD453A8()
{
  return MEMORY[0x24BE37B70]();
}

uint64_t sub_23BD453B4()
{
  return MEMORY[0x24BE37B78]();
}

uint64_t sub_23BD453C0()
{
  return MEMORY[0x24BE37B80]();
}

uint64_t sub_23BD453CC()
{
  return MEMORY[0x24BE37B98]();
}

uint64_t sub_23BD453D8()
{
  return MEMORY[0x24BE37BA0]();
}

uint64_t sub_23BD453E4()
{
  return MEMORY[0x24BE37BA8]();
}

uint64_t sub_23BD453F0()
{
  return MEMORY[0x24BE37BC0]();
}

uint64_t sub_23BD453FC()
{
  return MEMORY[0x24BE37BC8]();
}

uint64_t sub_23BD45408()
{
  return MEMORY[0x24BE37BD0]();
}

uint64_t sub_23BD45414()
{
  return MEMORY[0x24BE37BD8]();
}

uint64_t sub_23BD45420()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23BD4542C()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23BD45438()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23BD45444()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23BD45450()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t sub_23BD4545C()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t sub_23BD45468()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_23BD45474()
{
  return MEMORY[0x24BDEC148]();
}

uint64_t sub_23BD45480()
{
  return MEMORY[0x24BDECB38]();
}

uint64_t sub_23BD4548C()
{
  return MEMORY[0x24BDECB58]();
}

uint64_t sub_23BD45498()
{
  return MEMORY[0x24BDECB68]();
}

uint64_t sub_23BD454A4()
{
  return MEMORY[0x24BDECF50]();
}

uint64_t sub_23BD454B0()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_23BD454BC()
{
  return MEMORY[0x24BDEE020]();
}

uint64_t sub_23BD454C8()
{
  return MEMORY[0x24BDEE028]();
}

uint64_t sub_23BD454D4()
{
  return MEMORY[0x24BDEE128]();
}

uint64_t sub_23BD454E0()
{
  return MEMORY[0x24BDEE1D8]();
}

uint64_t sub_23BD454EC()
{
  return MEMORY[0x24BDEE1F0]();
}

uint64_t sub_23BD454F8()
{
  return MEMORY[0x24BDEE448]();
}

uint64_t sub_23BD45504()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t sub_23BD45510()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t sub_23BD4551C()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t sub_23BD45528()
{
  return MEMORY[0x24BDEF0D8]();
}

uint64_t sub_23BD45534()
{
  return MEMORY[0x24BDEF0E8]();
}

uint64_t sub_23BD45540()
{
  return MEMORY[0x24BDEF228]();
}

uint64_t sub_23BD4554C()
{
  return MEMORY[0x24BDEF238]();
}

uint64_t sub_23BD45558()
{
  return MEMORY[0x24BDEF248]();
}

uint64_t sub_23BD45564()
{
  return MEMORY[0x24BDEF260]();
}

uint64_t sub_23BD45570()
{
  return MEMORY[0x24BDEF270]();
}

uint64_t sub_23BD4557C()
{
  return MEMORY[0x24BDEF278]();
}

uint64_t sub_23BD45588()
{
  return MEMORY[0x24BDEF288]();
}

uint64_t sub_23BD45594()
{
  return MEMORY[0x24BDEF298]();
}

uint64_t sub_23BD455A0()
{
  return MEMORY[0x24BDEF2A8]();
}

uint64_t sub_23BD455AC()
{
  return MEMORY[0x24BDEF2C0]();
}

uint64_t sub_23BD455B8()
{
  return MEMORY[0x24BDEF2C8]();
}

uint64_t sub_23BD455C4()
{
  return MEMORY[0x24BDEF2D8]();
}

uint64_t sub_23BD455D0()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_23BD455DC()
{
  return MEMORY[0x24BDEFCA8]();
}

uint64_t sub_23BD455E8()
{
  return MEMORY[0x24BDEFEF8]();
}

uint64_t sub_23BD455F4()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_23BD45600()
{
  return MEMORY[0x24BDF1D98]();
}

uint64_t sub_23BD4560C()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_23BD45618()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_23BD45624()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_23BD45630()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_23BD4563C()
{
  return MEMORY[0x24BDF2678]();
}

uint64_t sub_23BD45648()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_23BD45654()
{
  return MEMORY[0x24BDF38E0]();
}

uint64_t sub_23BD45660()
{
  return MEMORY[0x24BDF3EB0]();
}

uint64_t sub_23BD4566C()
{
  return MEMORY[0x24BDF3F58]();
}

uint64_t sub_23BD45678()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_23BD45684()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t sub_23BD45690()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t sub_23BD4569C()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_23BD456A8()
{
  return MEMORY[0x24BE2B460]();
}

uint64_t sub_23BD456B4()
{
  return MEMORY[0x24BE2B560]();
}

uint64_t sub_23BD456C0()
{
  return MEMORY[0x24BE2B588]();
}

uint64_t sub_23BD456CC()
{
  return MEMORY[0x24BE2B598]();
}

uint64_t sub_23BD456D8()
{
  return MEMORY[0x24BE2B5A8]();
}

uint64_t sub_23BD456E4()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_23BD456F0()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_23BD456FC()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23BD45708()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23BD45714()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23BD45720()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_23BD4572C()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_23BD45738()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_23BD45744()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_23BD45750()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23BD4575C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23BD45768()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23BD45774()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23BD45780()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23BD4578C()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23BD45798()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23BD457A4()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_23BD457B0()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23BD457BC()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23BD457C8()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_23BD457D4()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_23BD457E0()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23BD457EC()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_23BD457F8()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_23BD45804()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23BD45810()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23BD4581C()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_23BD45828()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_23BD45834()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t sub_23BD45840()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t sub_23BD4584C()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_23BD45858()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_23BD45864()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t sub_23BD45870()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_23BD4587C()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_23BD45888()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_23BD45894()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_23BD458A0()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t sub_23BD458AC()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_23BD458B8()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23BD458C4()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23BD458D0()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_23BD458DC()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t sub_23BD458E8()
{
  return MEMORY[0x24BDD0110]();
}

uint64_t sub_23BD458F4()
{
  return MEMORY[0x24BE351B8]();
}

uint64_t sub_23BD45900()
{
  return MEMORY[0x24BE351C0]();
}

uint64_t sub_23BD4590C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23BD45918()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23BD45924()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23BD45930()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_23BD4593C()
{
  return MEMORY[0x24BDD0590]();
}

uint64_t sub_23BD45948()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_23BD45954()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t sub_23BD45960()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23BD4596C()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23BD45978()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_23BD45984()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23BD45990()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23BD4599C()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23BD459A8()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23BD459B4()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23BD459C0()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23BD459CC()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23BD459D8()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_23BD459E4()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t sub_23BD459F0()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_23BD459FC()
{
  return MEMORY[0x24BEE2AE0]();
}

uint64_t sub_23BD45A08()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23BD45A14()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23BD45A20()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23BD45A2C()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23BD45A38()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23BD45A44()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23BD45A50()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23BD45A5C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23BD45A68()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23BD45A74()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23BD45A80()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23BD45A8C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23BD45A98()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_23BD45AA4()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23BD45AB0()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23BD45ABC()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_23BD45AC8()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23BD45AD4()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23BD45AE0()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23BD45AEC()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_23BD45AF8()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23BD45B04()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_23BD45B10()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23BD45B1C()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23BD45B28()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_23BD45B34()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23BD45B40()
{
  return MEMORY[0x24BEE7110]();
}

uint64_t sub_23BD45B4C()
{
  return MEMORY[0x24BEE7118]();
}

uint64_t sub_23BD45B58()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23BD45B64()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23BD45B70()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23BD45B7C()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23BD45B88()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23BD45B94()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23BD45BA0()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23BD45BAC()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23BD45BB8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23BD45BC4()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_23BD45BD0()
{
  return MEMORY[0x24BEE4418]();
}

uint64_t sub_23BD45BDC()
{
  return MEMORY[0x24BEE4420]();
}

uint64_t sub_23BD45BE8()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23BD45BF4()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23BD45C00()
{
  return MEMORY[0x24BEE48A0]();
}

uint64_t sub_23BD45C0C()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23BD45C18()
{
  return MEMORY[0x24BEE4A10]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x24BDBE5F8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

