CFComparisonResult __CompareCachedDays(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  const __CFDate *v5;
  const __CFDate *v6;
  CFComparisonResult v7;

  v3 = CUIKOccurrenceCacheDayKey;
  v4 = a2;
  objc_msgSend(a1, "objectForKey:", v3);
  v5 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CUIKOccurrenceCacheDayKey);
  v6 = (const __CFDate *)objc_claimAutoreleasedReturnValue();

  v7 = CFDateCompare(v5, v6, 0);
  return v7;
}

void sub_1B8A6D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

uint64_t CUIKEventDisplaysAsTentative(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isProposedTimeEvent") & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(v1, "calendar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "isSuggestedEventCalendar") & 1) != 0)
    {
      v2 = 1;
    }
    else if ((objc_msgSend(v1, "isSelfOrganizedInvitation") & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v2 = CUIKEventCommonPartStatDisplayTestsAndSpecificTest(v1, &__block_literal_global_6_0);
    }

  }
  return v2;
}

uint64_t CUIKEventDisplaysAsNeedsReply(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isSelfOrganizedInvitation") & 1) != 0)
    v2 = 0;
  else
    v2 = CUIKEventCommonPartStatDisplayTestsAndSpecificTest(v1, &__block_literal_global_7_0);

  return v2;
}

uint64_t CUIKEventCommonPartStatDisplayTestsAndSpecificTest(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, uint64_t);
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "hasAttendees"))
    v5 = v4[2](v4, objc_msgSend(v3, "selfParticipantStatus"));
  else
    v5 = 0;

  return v5;
}

uint64_t CUIKEventDisplaysAsDeclined(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isProposedTimeEvent") & 1) != 0)
    v2 = 0;
  else
    v2 = CUIKEventCommonPartStatDisplayTestsAndSpecificTest(v1, &__block_literal_global_15);

  return v2;
}

id CUIKTextColorForCalendarColorForStyle(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void (*v12[4])(_QWORD, _QWORD);
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C0B8], a2 == 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "intValue") == 1)
  {
    v5 = a2 == 2;
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C0B0], v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C0A8], v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C098], v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    CUIKColorAdjustSaturationBrightnessAlpha(v3, v6, v7, v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else if (a2 == 1)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = __Block_byref_object_copy__1;
    v19 = __Block_byref_object_dispose__1;
    v20 = 0;
    objc_msgSend(MEMORY[0x1E0DC3658], "labelColor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v12[1] = (void (*)(_QWORD, _QWORD))3221225472;
    v12[2] = (void (*)(_QWORD, _QWORD))__CUIKTextColorForCalendarColorForStyle_block_invoke;
    v12[3] = (void (*)(_QWORD, _QWORD))&unk_1E6EB5BE8;
    v14 = &v15;
    v13 = v3;
    CUIKPerformWithResolvedColorForDynamicColor(v10, 1, v12);

    v9 = (id)v16[5];
    _Block_object_dispose(&v15, 8);

  }
  else
  {
    CUIKAdjustedColorForColor(v3, a2);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v9;
}

void sub_1B8A6E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CUIKColorIsWhite(void *a1)
{
  _BOOL4 v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;

  v6 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  v3 = 0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v6, &v5, &v4, &v3);
  v1 = v6 > 0.95;
  if (v5 <= 0.95)
    v1 = 0;
  return v4 > 0.95 && v1;
}

id CUIKBlendColorsSourceOver(void *a1, void *a2)
{
  id v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v3 = a2;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v12, &v11, &v10, &v9);
  v7 = 0.0;
  v8 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  objc_msgSend(v3, "cuik_getRed:green:blue:alpha:", &v8, &v7, &v6, &v5);

  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", v12 * (1.0 - v5) + v8 * v5, (1.0 - v5) * v11 + v7 * v5, (1.0 - v5) * v10 + v6 * v5, v9);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUIKBackgroundColorForCalendarColorWithOpaqueForStyle(void *a1, char a2, uint64_t a3, char a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void (*v14[4])(_QWORD, _QWORD);
  id v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v7 = a1;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__1;
  v24 = __Block_byref_object_dispose__1;
  v25 = 0;
  v8 = (void *)MEMORY[0x1E0DC3658];
  CUIKBundle();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("backgroundColorForMixingWithOccurrenceColors"), v9, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v14[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v14[2] = (void (*)(_QWORD, _QWORD))__CUIKBackgroundColorForCalendarColorWithOpaqueForStyle_block_invoke;
  v14[3] = (void (*)(_QWORD, _QWORD))&unk_1E6EB5C38;
  v18 = a2;
  v19 = a4;
  v16 = &v20;
  v17 = a3;
  v11 = v7;
  v15 = v11;
  CUIKPerformWithResolvedColorForDynamicColor(v10, a3, v14);
  v12 = (id)v21[5];

  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_1B8A6E794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CUIKBundle()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)CUIKBundle___Bundle;
  if (!CUIKBundle___Bundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.CalendarUIKit"));
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)CUIKBundle___Bundle;
    CUIKBundle___Bundle = v1;

    v0 = (void *)CUIKBundle___Bundle;
  }
  return v0;
}

void sub_1B8A6F8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CUIKRoundToScreenScale(double a1)
{
  uint64_t result;

  if ((double)(int)a1 != a1)
    return UIRoundToViewScale();
  return result;
}

double CUIKRoundRectToScreenScale(double a1, double a2, double a3, double a4)
{
  double v7;
  double v8;

  v7 = a1;
  if (a1 != (double)(int)a1)
  {
    UIRoundToViewScale();
    v7 = v8;
  }
  if (a2 != (double)(int)a2)
    UIRoundToViewScale();
  if (a3 != (double)(int)a3)
    UIRoundToViewScale();
  if (a4 != (double)(int)a4)
    UIRoundToViewScale();
  return v7;
}

id CUIKAdjustedColorForColor(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  v4 = v3;
  if (CUIKColorIsWhite(v3))
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.8, 1.0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (a2 == 2)
  {
    if (CUIKColorIsBlack(v3))
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.25, 1.0);
      v5 = objc_claimAutoreleasedReturnValue();

      v4 = (void *)v5;
    }
    CUIKAdjustColorLuminanceIfNeeded(v4);
    v6 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v6;
  }

  return v4;
}

uint64_t CUIKCompareEKEvents(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  BOOL v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v5 = a1;
  v6 = a2;
  v7 = v5;
  v8 = v6;
  LODWORD(v6) = objc_msgSend(v7, "isAllDay");
  if ((_DWORD)v6 == objc_msgSend(v8, "isAllDay"))
  {
    if (!a3
      || !objc_msgSend(v7, "isAllDay")
      || ((objc_msgSend(v7, "duration"),
           v11 = (unint64_t)v10,
           objc_msgSend(v8, "duration"),
           v13 = v11 == (unint64_t)v12,
           v11 > (unint64_t)v12)
        ? (v9 = -1)
        : (v9 = 1),
          v13))
    {
      v9 = objc_msgSend(v7, "compareStartDateIncludingTravelWithEvent:", v8);
      if (!v9)
      {
        objc_msgSend(v7, "calendar");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "calendar");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = CUIKCompareEKCalendars(v14, v15);

        if (!v9)
        {
          objc_msgSend(v7, "title");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "title");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v16, "compare:options:", v17, 129);

        }
      }
    }
  }
  else if (objc_msgSend(v7, "isAllDay"))
  {
    v9 = -1;
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

id CUIKWeekdayVeryShortAbbreviations()
{
  void *v0;
  __CFDateFormatter *v1;
  CFTypeRef v2;
  void *v3;
  id v4;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = (void *)__WeekdayVeryShortAbbreviations;
  if (!__WeekdayVeryShortAbbreviations)
  {
    v1 = (__CFDateFormatter *)_SharedDateFormatter();
    v2 = CFDateFormatterCopyProperty(v1, (CFDateFormatterKey)*MEMORY[0x1E0C9AF90]);
    v3 = (void *)__WeekdayVeryShortAbbreviations;
    __WeekdayVeryShortAbbreviations = (uint64_t)v2;

    v0 = (void *)__WeekdayVeryShortAbbreviations;
  }
  v4 = v0;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v4;
}

id CUIKStringForMonthNumber(int a1)
{
  __CFDateFormatter *v2;
  CFLocaleRef Locale;
  void *v4;
  int v5;
  void *v6;
  const __CFString *v7;
  CFTypeRef v8;
  void *v9;
  void *v10;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (__CFDateFormatter *)_SharedDateFormatter();
  Locale = CFDateFormatterGetLocale(v2);
  MEMORY[0x1BCCB6C5C](Locale);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(&unk_1E6ED7130, "containsObject:", v4);
  v6 = (void *)__MonthNames;
  if (!__MonthNames)
  {
    if (v5)
      v7 = (const __CFString *)*MEMORY[0x1E0C9AF20];
    else
      v7 = (const __CFString *)*MEMORY[0x1E0C9AF50];
    v8 = CFDateFormatterCopyProperty(v2, v7);
    v9 = (void *)__MonthNames;
    __MonthNames = (uint64_t)v8;

    v6 = (void *)__MonthNames;
  }
  if (objc_msgSend(v6, "count") >= (unint64_t)a1)
  {
    objc_msgSend((id)__MonthNames, "objectAtIndex:", a1 - 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v10;
}

id CUIKStringForYear(void *a1)
{
  uint64_t v1;
  id v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  id v5;
  void *v6;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  v5 = (id)CalCopyTimeZone();
  _stringForFormatterInTimeZone(v2, v3, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringForTime(void *a1, char a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKStringForTimeWithSharedFormatter(v4, a2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v5;
}

id _CUIKStringForTimeWithSharedFormatter(void *a1, char a2, __CFDateFormatter *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)CalCopyTimeZone();
  _CUIKStringForTimeInTimeZoneWithFormatter(v5, a2, v6, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id _CUIKStringForTimeInTimeZoneWithFormatter(void *a1, char a2, void *a3, __CFDateFormatter *a4)
{
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  __CFString *v11;
  void *v12;

  v7 = a1;
  v8 = a3;
  v9 = __Show24Hours;
  if (!__Show24Hours)
  {
    _CUIKDetermineShortTimeParameters();
    v9 = __Show24Hours;
  }
  if (v9 == 2)
    goto LABEL_10;
  if ((a2 & 1) != 0)
    goto LABEL_10;
  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  if ((unint64_t)MEMORY[0x1BCCB6FD4](v8) >> 56)
    goto LABEL_10;
  CPDateFormatStringForFormatType();
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v10)
    goto LABEL_10;
  v11 = (__CFString *)v10;
  if (!a4)
    a4 = (__CFDateFormatter *)_SharedDateFormatter();
  CFDateFormatterSetFormat(a4, v11);
  _stringForFormatterInTimeZone(v7, a4, v8, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
LABEL_10:
    _initStandardTimeFormatter();
    _stringForFormatterInTimeZone(v7, (__CFDateFormatter *)__standardTimeFormatter, v8, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v12;
}

__CFString *_stringForFormatterInTimeZone(void *a1, __CFDateFormatter *a2, const void *a3, unint64_t a4)
{
  const __CFDate *v7;
  uint64_t v8;
  void *v9;
  __CFString *Format;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __CFDateFormatter *v15;
  const __CFLocale *v16;
  const __CFString *v17;
  uint64_t v18;
  __CFString *StringWithDate;

  v7 = a1;
  if (!__dateFormattersForTimeZones)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)__dateFormattersForTimeZones;
    __dateFormattersForTimeZones = v8;

  }
  Format = (__CFString *)CFDateFormatterGetFormat(a2);
  -[__CFString stringByAppendingString:](Format, "stringByAppendingString:", MEMORY[0x1BCCB6D58](a3));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (a4)
  {
    objc_msgSend(v11, "stringByAppendingFormat:", CFSTR("%ld"), a4);
    v13 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)v13;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v12, "hash"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (__CFDateFormatter *)objc_msgSend((id)__dateFormattersForTimeZones, "objectForKey:", v14);
  if (!v15)
  {
    v16 = CFLocaleCopyCurrent();
    v15 = CFDateFormatterCreate(0, v16, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFRelease(v16);
    if (v15)
    {
      CFDateFormatterSetProperty(v15, (CFStringRef)*MEMORY[0x1E0C9AF68], a3);
      v17 = CFDateFormatterGetFormat(a2);
      CFDateFormatterSetFormat(v15, v17);
      if (a4)
      {
        if (a4 > 5)
          v18 = 256;
        else
          v18 = dword_1B8BA48D8[a4 - 1];
        CFDateFormatterSetProperty(v15, CFSTR("kCFDateFormatterFormattingContextKey"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18));
      }
      objc_msgSend((id)__dateFormattersForTimeZones, "setObject:forKey:", v15, v14);
      CFRelease(v15);
    }
  }
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v15, v7);

  return StringWithDate;
}

void _initStandardTimeFormatter()
{
  const __CFLocale *v0;

  if (!__standardTimeFormatter)
  {
    v0 = CFLocaleCopyCurrent();
    __standardTimeFormatter = (uint64_t)CFDateFormatterCreate(0, v0, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    CFRelease(v0);
  }
}

uint64_t _SharedDateFormatter()
{
  uint64_t result;
  const __CFLocale *v1;
  __CFDateFormatter *v2;
  CFAbsoluteTime Current;
  CFStringRef StringWithAbsoluteTime;

  result = __formatter;
  if (!__formatter)
  {
    _CUIKDetermineWeekStart();
    v1 = CFLocaleCopyCurrent();
    v2 = CFDateFormatterCreate(0, v1, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    __formatter = (uint64_t)v2;
    Current = CFAbsoluteTimeGetCurrent();
    StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0, v2, Current);
    if (StringWithAbsoluteTime)
      CFRelease(StringWithAbsoluteTime);
    CFRelease(v1);
    return __formatter;
  }
  return result;
}

void CUIKMultiwindowAssert(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  void *v11;

  v10 = a2;
  if (_shouldAssertOnUnknownWindow_onceToken != -1)
    dispatch_once(&_shouldAssertOnUnknownWindow_onceToken, &__block_literal_global_16);
  if (_shouldAssertOnUnknownWindow_shouldAssert)
  {
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v10, &a9);
    if ((a1 & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("CUIKDeviceCapabilities assertion failed: %@"), v11);

  }
}

BOOL CUIKTimezonesDivergeAtDate(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _BOOL8 v9;

  v5 = RegisterForInvalidation_onceToken;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  if (v5 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  v9 = _CUIKTimezonesDivergeAtDate(v8, v7, v6);

  return v9;
}

BOOL _CUIKTimezonesDivergeAtDate(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(a1, "secondsFromGMTForDate:", v5);
  v8 = objc_msgSend(v6, "secondsFromGMTForDate:", v5);

  return v7 != v8;
}

double CUIKCeilToScreenScale(double a1)
{
  uint64_t v2;

  v2 = CUIKCeilToScreenScale___scale;
  if (*(double *)&CUIKCeilToScreenScale___scale == -1.0)
  {
    *(double *)&v2 = CUIKScaleFactor();
    CUIKCeilToScreenScale___scale = v2;
  }
  if (a1 != 0.0)
    return ceil(*(double *)&v2 * a1) / *(double *)&v2;
  return a1;
}

id CUIKGetOverlayCalendar()
{
  id v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (_CUIKOverlayCalendarCache_onceToken != -1)
    dispatch_once(&_CUIKOverlayCalendarCache_onceToken, &__block_literal_global_23);
  v0 = (id)_CUIKOverlayCalendarCache_overlayCalendarCache;
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("com.apple.mobilecal.overlayCalendarGeneration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "unsignedIntegerValue");
    v4 = __overlayCalendarGeneration;
    if (v3 >= __overlayCalendarGeneration)
      goto LABEL_13;
  }
  else
  {
    v4 = __overlayCalendarGeneration;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v5, CFSTR("com.apple.mobilecal.overlayCalendarGeneration"));

  +[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "overlayCalendarID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E80], "calendarTimeZone");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[CUIKOverlayCalendar overlayCalendarForCalendarIdentifier:timezone:](CUIKOverlayCalendar, "overlayCalendarForCalendarIdentifier:timezone:", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v9, CFSTR("com.apple.com.mobilecal.overlayCalendar"));
  else
    objc_msgSend(v0, "removeObjectForKey:", CFSTR("com.apple.com.mobilecal.overlayCalendar"));

LABEL_13:
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("com.apple.com.mobilecal.overlayCalendar"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v10;
}

id _CUIKCalendar()
{
  id v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (_CUIKCalendarCache_onceToken != -1)
    dispatch_once(&_CUIKCalendarCache_onceToken, &__block_literal_global_203);
  v0 = (id)_CUIKCalendarCache_calendarCache;
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("com.apple.mobilecal.calendarGeneration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "unsignedIntegerValue");
    v4 = __calendarGeneration;
    if (v3 >= __calendarGeneration)
      goto LABEL_10;
  }
  else
  {
    v4 = __calendarGeneration;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v5, CFSTR("com.apple.mobilecal.calendarGeneration"));

  v6 = objc_alloc(MEMORY[0x1E0C99D48]);
  v7 = (void *)objc_msgSend(v6, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setLocale:", v8);

  objc_msgSend(MEMORY[0x1E0C99E80], "calendarTimeZone");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTimeZone:", v9);

  if ((__isWeekStartValid & 1) == 0)
    _CUIKDetermineWeekStart();
  objc_msgSend(v7, "setFirstWeekday:", __weekStart);
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v7, CFSTR("com.apple.mobilecal.calendar"));

LABEL_10:
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("com.apple.mobilecal.calendar"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id CUIKNowComponents()
{
  void *v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKNowComponents();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id CUIKTodayDate()
{
  void *v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKTodayDate();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id _CUIKTodayDate()
{
  _CUIKComputeTodayCachesIfNeeded();
  return (id)__TodayDate;
}

id CUIKTodayComponents()
{
  void *v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKComputeTodayCachesIfNeeded();
  v0 = (void *)objc_msgSend((id)__TodayComponents, "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id CUIKNowDate()
{
  void *v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKNowDate();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id _CUIKNowDate()
{
  void *v0;
  void *v1;
  void *v2;

  _CUIKNowComponents();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKCalendar();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateFromComponents:", v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _CUIKNowComponents()
{
  void *v0;
  void *v1;

  _CUIKCalendar();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKNowComponentsInCalendar(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id _CUIKNowComponentsInCalendar(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  _CUIKComputeTodayCachesIfNeeded();
  v2 = (void *)objc_msgSend((id)__TodayComponents, "copy");
  v3 = (void *)objc_msgSend(v2, "copy");

  if (objc_msgSend((id)*MEMORY[0x1E0DC4730], "launchedToTest"))
  {
    objc_msgSend(v3, "setHour:", 11);
    objc_msgSend(v3, "setMinute:", 15);
    objc_msgSend(v3, "setSecond:", 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "components:fromDate:", 224, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "setHour:", objc_msgSend(v5, "hour"));
    objc_msgSend(v3, "setMinute:", objc_msgSend(v5, "minute"));
    objc_msgSend(v3, "setSecond:", objc_msgSend(v5, "second"));

  }
  return v3;
}

void _CUIKComputeTodayCachesIfNeeded()
{
  void *v0;
  void *v1;
  BOOL v2;
  double v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id obj;

  objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)__TodayComponents;
  if (__TodayComponents)
    v2 = _CUIKComputeTodayCachesIfNeeded_s_lastComputeTime == 0;
  else
    v2 = 1;
  obj = v0;
  if (!v2)
  {
    objc_msgSend(v0, "timeIntervalSinceDate:");
    if (v3 < 300.0)
      goto LABEL_12;
    v1 = (void *)__TodayComponents;
  }
  __TodayComponents = 0;

  v4 = (void *)__TodayDate;
  __TodayDate = 0;

  objc_storeStrong((id *)&_CUIKComputeTodayCachesIfNeeded_s_lastComputeTime, obj);
  _CUIKCalendar();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend((id)*MEMORY[0x1E0DC4730], "launchedToTest"))
  {
    objc_msgSend(v5, "components:fromDate:", 30, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setMonth:", 5);
    objc_msgSend(v7, "setDay:", 1);
    objc_msgSend(v5, "dateFromComponents:", v7);
    v8 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v8;
  }
  if (!__TodayComponents)
  {
    objc_msgSend(v5, "components:fromDate:", 30, v6);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)__TodayComponents;
    __TodayComponents = v9;

    objc_msgSend(v5, "dateFromComponents:", __TodayComponents);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)__TodayDate;
    __TodayDate = v11;

  }
LABEL_12:

}

void sub_1B8A75350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A753FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A759A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A75B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CUIKLocaleIsRightToLeft()
{
  int v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = __IsLocaleRightToLeft;
  if (!__IsLocaleRightToLeft)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)MEMORY[0x1E0C99DC8];
    objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0C997E8]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v2, "characterDirectionForLanguage:", v3);

    if (v4 == 2)
      v5 = 2;
    else
      v5 = 1;
    __IsLocaleRightToLeft = v5;

    v0 = __IsLocaleRightToLeft;
  }
  v6 = v0 == 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

BOOL CUIKDayOfWeekIsWeekend(int a1)
{
  _BOOL8 v3;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKFindWeekendsIfNeeded();
  v3 = (_DWORD)__weekendDays == a1 || HIDWORD(__weekendDays) == a1;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v3;
}

void _CUIKFindWeekendsIfNeeded()
{
  void *v0;
  int v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  if ((__areWeekendDaysValid & 1) == 0)
  {
    +[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = objc_msgSend(v0, "overrideLocaleWeekends");

    if (v1)
    {
      __weekendDays = 6;
    }
    else
    {
      _CUIKCalendar();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = 0;
      v5 = 1;
      do
      {
        if (v5 == 8)
          break;
        v6 = objc_alloc_init(MEMORY[0x1E0C99D78]);
        objc_msgSend(v6, "setWeekday:", v5);
        objc_msgSend(v2, "nextDateAfterDate:matchingComponents:options:", v3, v6, 1024);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v2, "isDateInWeekend:", v7))
          *((_DWORD *)&__weekendDays + v4++) = v5 - 1;

        ++v5;
      }
      while (v4 < 2);

    }
    __areWeekendDaysValid = 1;
  }
}

void ___shouldAssertOnUnknownWindow_block_invoke()
{
  id v0;

  +[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _shouldAssertOnUnknownWindow_shouldAssert = objc_msgSend(v0, "enableMultiwindowAsserts");

}

void _CUIKDetermineWeekStart()
{
  void *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  +[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "weekStart");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v1 = objc_msgSend(v4, "longValue");
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = objc_msgSend(v2, "firstWeekday");

  }
  if (v1 <= 1)
    v3 = 1;
  else
    v3 = v1;
  __weekStart = v3;
  __isWeekStartValid = 1;

}

BOOL CUIKShouldSaveStateInPreferences()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "userInterfaceIdiom") != 1;

  return v2;
}

void sub_1B8A774F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double CUIKScaleFactor()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "displayScale");
  v3 = v2;

  return v3;
}

id CUIKCalendar()
{
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  return CUIKCalendarWithoutRegisteringForInvalidation();
}

void sub_1B8A77CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CUIKStringForHour(unsigned int a1)
{
  int v2;
  __CFDateFormatter *v3;
  __CFString *v4;
  __CFDateFormatter *v5;
  const void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  __CFString *StringWithAbsoluteTime;
  const void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (!__HourSymbols)
  {
    v2 = __Show24Hours;
    if (!__Show24Hours)
    {
      _CUIKDetermineShortTimeParameters();
      v2 = __Show24Hours;
    }
    if (v2 == 2)
    {
      _initStandardTimeFormatter();
      v3 = (__CFDateFormatter *)__standardTimeFormatter;
      CFRetain((CFTypeRef)__standardTimeFormatter);
      if (!v3)
        goto LABEL_19;
      goto LABEL_14;
    }
    CPDateFormatStringForFormatType();
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = (__CFDateFormatter *)_SharedDateFormatter();
      v3 = v5;
      if (v5)
      {
        CFRetain(v5);
        CFDateFormatterSetFormat(v3, v4);
      }
    }
    else
    {
      v3 = 0;
    }

    if (v3)
    {
LABEL_14:
      v6 = (const void *)CalTimeZoneCopyCFTimeZone();
      v7 = (const __CFString *)*MEMORY[0x1E0C9AF68];
      CFDateFormatterSetProperty(v3, (CFStringRef)*MEMORY[0x1E0C9AF68], v6);
      v8 = 24;
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 24);
      v10 = 0x50B000007D7;
      do
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        StringWithAbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime(0, v3, v11);
        objc_msgSend(v9, "addObject:", StringWithAbsoluteTime);

        v10 += 0x1000000000000;
        --v8;
      }
      while (v8);
      if (v6)
        CFRelease(v6);
      v13 = (const void *)CalCopySystemTimeZone();
      CFDateFormatterSetProperty(v3, v7, v13);
      CFRelease(v13);
      CFRelease(v3);
      v14 = (void *)__HourSymbols;
      __HourSymbols = (uint64_t)v9;

    }
  }
LABEL_19:
  if (a1 <= 0x17)
    v15 = a1;
  else
    v15 = a1 - 24;
  objc_msgSend((id)__HourSymbols, "objectAtIndex:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v16;
}

void sub_1B8A79F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;
  uint64_t v69;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose((const void *)(v69 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A7AA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

id CUIKStringForDayOfWeek(unsigned int a1)
{
  __CFDateFormatter *v2;
  void *v3;
  void *v4;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (__CFDateFormatter *)_SharedDateFormatter();
  CFDateFormatterSetProperty(v2, CFSTR("kCFDateFormatterFormattingContextKey"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 260));
  v3 = (void *)CFDateFormatterCopyProperty(v2, (CFDateFormatterKey)*MEMORY[0x1E0C9AF60]);
  if (objc_msgSend(v3, "count") <= (unint64_t)a1)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndex:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  CFDateFormatterSetProperty(v2, CFSTR("kCFDateFormatterFormattingContextKey"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 256));
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v4;
}

__CFString *CUIKLocalizedStringForInteger(unint64_t a1)
{
  __CFString *StringWithNumber;
  const __CFNumber *v3;
  __CFNumberFormatter *v4;
  const __CFLocale *v5;
  unint64_t valuePtr;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  valuePtr = a1;
  if (a1 <= 0x1F && (__localizedIntStringLoadFlags & (1 << a1)) != 0)
  {
    StringWithNumber = (__CFString *)__localizedIntStrings[a1];
  }
  else
  {
    v3 = CFNumberCreate(0, kCFNumberNSIntegerType, &valuePtr);
    v4 = (__CFNumberFormatter *)__numberFormatter;
    if (!__numberFormatter)
    {
      v5 = CFLocaleCopyCurrent();
      __numberFormatter = (uint64_t)CFNumberFormatterCreate(0, v5, kCFNumberFormatterDecimalStyle);
      CFRelease(v5);
      v4 = (__CFNumberFormatter *)__numberFormatter;
    }
    StringWithNumber = (__CFString *)CFNumberFormatterCreateStringWithNumber(0, v4, v3);
    CFRelease(v3);
    if (a1 <= 0x1F)
    {
      objc_storeStrong(&__localizedIntStrings[valuePtr], StringWithNumber);
      __localizedIntStringLoadFlags |= 1 << valuePtr;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithNumber;
}

id CUIKAllDayBackgroundColor()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)CUIKAllDayBackgroundColor_color;
  if (!CUIKAllDayBackgroundColor_color)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "cuik_systemBackgroundColor");
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)CUIKAllDayBackgroundColor_color;
    CUIKAllDayBackgroundColor_color = v1;

    v0 = (void *)CUIKAllDayBackgroundColor_color;
  }
  return v0;
}

BOOL CUIKIsWeekdayNameFirst()
{
  const __CFLocale *v0;
  const __CFLocale *v1;
  const __CFString *DateFormatFromTemplate;
  const __CFString *v3;
  int v4;
  _BOOL8 v5;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (!__IsWeekdayNameFirst)
  {
    v0 = CFLocaleCopyCurrent();
    if (v0)
    {
      v1 = v0;
      DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("EEEEMMMdy"), 0, v0);
      if (DateFormatFromTemplate)
      {
        v3 = DateFormatFromTemplate;
        if (CFStringHasPrefix(DateFormatFromTemplate, CFSTR("E")))
        {
          v4 = 2;
        }
        else
        {
          CFStringHasSuffix(v3, CFSTR("E"));
          v4 = 1;
        }
        __IsWeekdayNameFirst = v4;
        CFRelease(v3);
      }
      CFRelease(v1);
    }
  }
  v5 = __IsWeekdayNameFirst != 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v5;
}

id CUIKCalendarWithoutRegisteringForInvalidation()
{
  void *v0;

  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKCalendar();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

BOOL CUIKShow24Hours()
{
  int v0;
  _BOOL8 v1;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = __Show24Hours;
  if (!__Show24Hours)
  {
    _CUIKDetermineShortTimeParameters();
    v0 = __Show24Hours;
  }
  v1 = v0 == 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v1;
}

void _CUIKDetermineShortTimeParameters()
{
  const __CFLocale *v0;
  const __CFLocale *v1;
  __CFDateFormatter *v2;
  __CFDateFormatter *v3;
  const __CFString *Format;
  const __CFAllocator *v5;
  CFDateFormatterRef v6;
  __CFDateFormatter *v7;
  CFAbsoluteTime Current;
  __CFString *StringWithAbsoluteTime;
  __CFString *v10;
  void *v11;
  void *v12;
  int v13;
  CFRange v14;
  CFIndex location;
  CFIndex v16;
  int v18;
  CFIndex v19;
  CFIndex Length;
  CFRange v22;
  CFStringCompareFlags v23;
  int v24;

  v0 = CFLocaleCopyCurrent();
  if (v0)
  {
    v1 = v0;
    v2 = CFDateFormatterCreate(0, v0, kCFDateFormatterNoStyle, kCFDateFormatterFullStyle);
    if (!v2)
    {
LABEL_45:
      CFRelease(v1);
      return;
    }
    v3 = v2;
    Format = CFDateFormatterGetFormat(v2);
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    if (v6)
    {
      v7 = v6;
      Current = CFAbsoluteTimeGetCurrent();
      StringWithAbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime(v5, v7, Current);
      v10 = StringWithAbsoluteTime;
      if (StringWithAbsoluteTime
        && (v11 = malloc_type_malloc(2 * -[__CFString length](StringWithAbsoluteTime, "length"), 0x1000040BDFB0063uLL)) != 0)
      {
        v12 = v11;
        -[__CFString getCharacters:](v10, "getCharacters:", v11);
        ubidi_openSized();
        ubidi_setPara();
        v13 = ubidi_getParaLevel() & 1;
        ubidi_close();
        free(v12);
      }
      else
      {
        v13 = 0;
      }
      CFRelease(v7);

    }
    else
    {
      v13 = 0;
    }
    v14 = CFStringFind(Format, CFSTR("a"), 0);
    location = v14.location;
    if (v14.location == -1)
    {
      __DesignatorsBeforeHour = 1;
      __SpaceAroundDesignator = 1;
    }
    v16 = CFStringFind(Format, CFSTR("H"), 0).location;
    if (v16 == -1)
    {
      v19 = CFStringFind(Format, CFSTR("h"), 0).location;
      if (v19 != -1 || (v19 = CFStringFind(Format, CFSTR("K"), 0).location, v19 != -1))
      {
        __Show24Hours = 1;
        if (v14.location >= v19 || v14.location == -1)
          v18 = 1;
        else
          v18 = 2;
LABEL_29:
        __DesignatorsBeforeHour = v18;
        if (v14.location == -1)
        {
LABEL_44:
          CFRelease(v3);
          goto LABEL_45;
        }
        __SpaceAroundDesignator = 1;
        Length = CFStringGetLength(Format);
        if (v14.location && __DesignatorsBeforeHour == 1)
        {
          v22.location = 0;
          v23 = 12;
        }
        else
        {
          if (__DesignatorsBeforeHour != 2
            || (v22.location = v14.location + v14.length, v14.location + v14.length == -1)
            || Length <= v22.location)
          {
LABEL_39:
            if (v13)
            {
              if (__DesignatorsBeforeHour == 2)
                v24 = 1;
              else
                v24 = 2;
              __DesignatorsBeforeHour = v24;
            }
            goto LABEL_44;
          }
          location = Length - v22.location;
          v23 = 8;
        }
        v22.length = location;
        if (CFStringFindWithOptions(Format, CFSTR(" "), v22, v23, 0))
          __SpaceAroundDesignator = 2;
        goto LABEL_39;
      }
      v16 = CFStringFind(Format, CFSTR("k"), 0).location;
      if (v16 == -1)
      {
        v18 = 1;
        __Show24Hours = 1;
        goto LABEL_29;
      }
    }
    __Show24Hours = 2;
    if (v14.location >= v16 || v14.location == -1)
      v18 = 1;
    else
      v18 = 2;
    goto LABEL_29;
  }
}

__CFString *CUIKLongStringForDateWithCommaAndYear(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _initLongDateFormatterWithCommaAndYear();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)__longDateFormatterWithCommaAndYear, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

void _initLongDateFormatterWithCommaAndYear()
{
  const __CFLocale *v0;
  __CFDateFormatter *v1;
  const __CFString *v2;
  id v3;

  if (!__longDateFormatterWithCommaAndYear)
  {
    v0 = CFLocaleCopyCurrent();
    v1 = CFDateFormatterCreate(0, v0, kCFDateFormatterLongStyle, kCFDateFormatterNoStyle);
    __longDateFormatterWithCommaAndYear = (uint64_t)v1;
    v2 = (const __CFString *)*MEMORY[0x1E0C9AF68];
    v3 = (id)CalCopyTimeZone();
    CFDateFormatterSetProperty(v1, v2, v3);
    CFRelease(v0);
  }
}

void sub_1B8A7F148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1B8A8390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

double CUIKOccurrenceLeadingIconAlphaScale(uint64_t a1)
{
  double result;

  result = 0.85;
  if (a1 == 2)
    return 1.0;
  return result;
}

id CUIKInvitationTitleColor()
{
  if (CUIKInvitationTitleColor_onceToken != -1)
    dispatch_once(&CUIKInvitationTitleColor_onceToken, &__block_literal_global_0);
  return (id)CUIKInvitationTitleColor_sInvitationTitleColor;
}

id CUIKAppTintColor()
{
  if (CUIKAppTintColor_onceToken != -1)
    dispatch_once(&CUIKAppTintColor_onceToken, &__block_literal_global_8);
  return (id)CUIKAppTintColor_sAppTintColor;
}

id CUIKBirthdayMonthCalendarColor()
{
  if (CUIKBirthdayMonthCalendarColor_onceToken != -1)
    dispatch_once(&CUIKBirthdayMonthCalendarColor_onceToken, &__block_literal_global_9);
  return (id)CUIKBirthdayMonthCalendarColor_sBirthdayMonthCalendarColor;
}

uint64_t CUIKDeclinedEventBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.82, 0.25);
}

uint64_t CUIKIntegrationEventBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
}

id CUIKBaseColor(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v14;

  v9 = a1;
  v10 = v9;
  if (a3)
    goto LABEL_2;
  if (a4)
  {
    if (CUIKDeclinedEventBaseColor_onceToken != -1)
      dispatch_once(&CUIKDeclinedEventBaseColor_onceToken, &__block_literal_global_47);
    v11 = (id)CUIKDeclinedEventBaseColor_sDeclinedEventBaseColor;
    goto LABEL_7;
  }
  if (a5)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    CUIKAdjustedColorForColor(v14, a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_8;
  }
  if (v9)
  {
LABEL_2:
    CUIKAdjustedColorForColor(v9, a2);
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.0549019608, 0.380392157, 0.725490196, 1.0);
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  v12 = v11;
LABEL_8:

  return v12;
}

id CUIKColorBarColor(void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  char v9;
  void *v11;
  void *v12;
  id v13;
  void *v14;

  v9 = a4;
  CUIKBaseColor(a1, a2, a3, a4, a5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (!a6)
  {
    if ((v9 & 1) != 0 || a7)
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.78, 1.0);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (a3 && (a7 & 1) == 0)
  {
LABEL_7:
    v13 = v11;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0DC3658], "clearColor");
  v13 = (id)objc_claimAutoreleasedReturnValue();
LABEL_9:
  v14 = v13;

  return v14;
}

id CUIKSelectedNeedsReplyBackgroundColor()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)CUIKSelectedNeedsReplyBackgroundColor_color;
  if (!CUIKSelectedNeedsReplyBackgroundColor_color)
  {
    v1 = (void *)MEMORY[0x1E0DC3658];
    CUIKBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("selectedNeedsReplyBGColor"), v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)CUIKSelectedNeedsReplyBackgroundColor_color;
    CUIKSelectedNeedsReplyBackgroundColor_color = v3;

    v0 = (void *)CUIKSelectedNeedsReplyBackgroundColor_color;
  }
  return v0;
}

id CUIKNeedsReplyBackgroundColor()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)CUIKNeedsReplyBackgroundColor_color;
  if (!CUIKNeedsReplyBackgroundColor_color)
  {
    v1 = (void *)MEMORY[0x1E0DC3658];
    CUIKBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("needsReplyBGColor"), v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)CUIKNeedsReplyBackgroundColor_color;
    CUIKNeedsReplyBackgroundColor_color = v3;

    v0 = (void *)CUIKNeedsReplyBackgroundColor_color;
  }
  return v0;
}

id CUIKSelectedNeedsReplyStripeColor()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)CUIKSelectedNeedsReplyStripeColor_color;
  if (!CUIKSelectedNeedsReplyStripeColor_color)
  {
    v1 = (void *)MEMORY[0x1E0DC3658];
    CUIKBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("selectedNeedsReplyStripeColor"), v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)CUIKSelectedNeedsReplyStripeColor_color;
    CUIKSelectedNeedsReplyStripeColor_color = v3;

    v0 = (void *)CUIKSelectedNeedsReplyStripeColor_color;
  }
  return v0;
}

id CUIKNeedsReplyStripeColor()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)CUIKNeedsReplyStripeColor_color;
  if (!CUIKNeedsReplyStripeColor_color)
  {
    v1 = (void *)MEMORY[0x1E0DC3658];
    CUIKBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("needsReplyStripeColor"), v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)CUIKNeedsReplyStripeColor_color;
    CUIKNeedsReplyStripeColor_color = v3;

    v0 = (void *)CUIKNeedsReplyStripeColor_color;
  }
  return v0;
}

id CUIKSelectedTentativeStripeColor()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)CUIKSelectedTentativeStripeColor_color;
  if (!CUIKSelectedTentativeStripeColor_color)
  {
    v1 = (void *)MEMORY[0x1E0DC3658];
    CUIKBundle();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorNamed:inBundle:compatibleWithTraitCollection:", CFSTR("selectedTentativeStripeColor"), v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)CUIKSelectedTentativeStripeColor_color;
    CUIKSelectedTentativeStripeColor_color = v3;

    v0 = (void *)CUIKSelectedTentativeStripeColor_color;
  }
  return v0;
}

uint64_t CUIKSelectedDeclinedBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.6, 1.0);
}

id CUIKOccurrenceSelectedTextColor(void *a1, uint64_t a2, char a3)
{
  id v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL8 v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;

  v5 = a1;
  objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C090], a2 == 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "intValue"))
  {
    if ((a3 & 1) == 0)
    {
      v24 = 0.0;
      v25 = 0.0;
      v22 = 0;
      v23 = 0.0;
      v7 = v5;
      objc_msgSend(v7, "cuik_getRed:green:blue:alpha:", &v25, &v24, &v23, &v22);
      v12 = v24 * 0.587000012 + v25 * 0.298999995 + v23 * 0.114;
      objc_msgSend(v7, "cuik_alphaComponent", v22);
      v14 = v13;

      if (v12 * (1.0 / v14) > 0.85)
      {
        objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      }
    }
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_14:
    v17 = (void *)v20;
    goto LABEL_15;
  }
  if (objc_msgSend(v6, "intValue") != 1)
  {
    v18 = a2 == 2;
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C088], v18);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C080], v18);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C078], v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    CUIKColorAdjustSaturationBrightnessAlpha(v5, v15, v16, v19);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_11;
  }
  if ((a3 & 1) != 0)
    goto LABEL_13;
  v24 = 0.0;
  v25 = 0.0;
  v22 = 0;
  v23 = 0.0;
  v7 = v5;
  objc_msgSend(v7, "cuik_getRed:green:blue:alpha:", &v25, &v24, &v23, &v22);
  v8 = v24 * 0.587000012 + v25 * 0.298999995 + v23 * 0.114;
  objc_msgSend(v7, "cuik_alphaComponent", v22);
  v10 = v9;

  if (v8 * (1.0 / v10) >= 0.2)
  {
LABEL_13:
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:
  v15 = v11;
  objc_msgSend(v11, "colorWithAlphaComponent:", 0.6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  CUIKBlendColorsSourceOver(v7, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:

LABEL_15:
  return v17;
}

id CUIKColorAdjustSaturationBrightnessAlpha(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  float v10;
  float v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  double v17;
  void *v18;
  float v19;
  void *v20;
  double v22;
  double v23;
  double v24;

  v7 = a4;
  v23 = 0.0;
  v24 = 0.0;
  v22 = 0.0;
  v8 = a3;
  v9 = a2;
  objc_msgSend(a1, "getHue:saturation:brightness:alpha:", &v24, &v23, &v22, 0);
  objc_msgSend(v9, "floatValue");
  v11 = v10;

  v12 = fmax(v23 + v11, 0.0);
  v13 = 1.0;
  if (v12 > 1.0)
    v12 = 1.0;
  v23 = v12;
  objc_msgSend(v8, "floatValue");
  v15 = v14;

  v16 = fmax(v22 + v15, 0.0);
  if (v16 <= 1.0)
    v17 = v16;
  else
    v17 = 1.0;
  v22 = v17;
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithHue:saturation:brightness:alpha:", v24, v23);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v7, "floatValue");
    v13 = v19;
  }
  objc_msgSend(v18, "colorWithAlphaComponent:", v13);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

id CUIKOccurrenceTextColor(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8, char a9, uint64_t a10)
{
  id v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v17 = a1;
  v18 = v17;
  v19 = a2 | a3;
  if (a4)
  {
    CUIKOccurrenceSelectedTextColor(v17, a10, v19 | a5);
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_18;
  }
  if (v19)
  {
    v21 = (void *)MEMORY[0x1E0DC3658];
LABEL_5:
    objc_msgSend(v21, "tertiaryLabelColor");
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_18;
  }
  if (a5)
  {
    CUIKInvitationTitleColor();
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_18;
  }
  if (a6)
  {
    v21 = (void *)MEMORY[0x1E0DC3658];
    if (!a7 && (a8 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "labelColor");
      v20 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  if (v17)
  {
    CUIKTextColorForCalendarColorForStyle(v17, a10);
    v20 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a9)
      CUIKBirthdayMonthCalendarColor();
    else
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.0549019608, 0.380392157, 0.725490196, 1.0);
    v20 = objc_claimAutoreleasedReturnValue();
  }
LABEL_18:
  v22 = (void *)v20;

  return v22;
}

id CUIKStrikethroughColor(int a1)
{
  if (a1)
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 1.0, 0.75);
  else
    objc_msgSend(MEMORY[0x1E0DC3658], "tertiaryLabelColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUIKOccurrenceSecondaryTextColor(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8, char a9, uint64_t a10)
{
  id v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v17 = a1;
  v18 = v17;
  v19 = a2 | a3;
  if (!a4)
  {
    if (v19)
    {
      v21 = (void *)MEMORY[0x1E0DC3658];
LABEL_5:
      objc_msgSend(v21, "tertiaryLabelColor");
      v20 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (a5)
    {
      CUIKInvitationTitleColor();
      v20 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (a6)
    {
      v21 = (void *)MEMORY[0x1E0DC3658];
      if (!a7)
      {
        if ((a8 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0DC3658], "labelColor");
          v20 = objc_claimAutoreleasedReturnValue();
          goto LABEL_18;
        }
        goto LABEL_5;
      }
      objc_msgSend(MEMORY[0x1E0DC3658], "tertiaryLabelColor");

    }
    else
    {
      if (v17)
      {
        CUIKSecondaryTextColorForCalendarColorForStyle(v17, a10);
        v20 = objc_claimAutoreleasedReturnValue();
        goto LABEL_18;
      }
      if (a9)
      {
        CUIKBirthdayMonthCalendarColor();
        v20 = objc_claimAutoreleasedReturnValue();
        goto LABEL_18;
      }
    }
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.0549019608, 0.380392157, 0.725490196, 1.0);
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_18;
  }
  CUIKOccurrenceSelectedTextColor(v17, a10, v19 | a5);
  v20 = objc_claimAutoreleasedReturnValue();
LABEL_18:
  v22 = (void *)v20;

  return v22;
}

id CUIKSecondaryTextColorForCalendarColorForStyle(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void (*v14[4])(_QWORD, _QWORD);
  id v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18[4])(_QWORD, _QWORD);
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C070], a2 == 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "integerValue") == 1)
  {
    v5 = a2 == 2;
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C068], v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C060], v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C368], "getDebugColorNumberForPreference:dark:", *MEMORY[0x1E0D0C050], v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    CUIKColorAdjustSaturationBrightnessAlpha(v3, v6, v7, v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = __Block_byref_object_copy__1;
    v25 = __Block_byref_object_dispose__1;
    v26 = 0;
    if (a2 == 1)
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "labelColor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v18[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v18[2] = (void (*)(_QWORD, _QWORD))__CUIKSecondaryTextColorForCalendarColorForStyle_block_invoke;
      v18[3] = (void (*)(_QWORD, _QWORD))&unk_1E6EB5BE8;
      v20 = &v21;
      v19 = v3;
      CUIKPerformWithResolvedColorForDynamicColor(v10, 1, v18);

      v9 = (id)v22[5];
      v11 = v19;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v14[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v14[2] = (void (*)(_QWORD, _QWORD))__CUIKSecondaryTextColorForCalendarColorForStyle_block_invoke_2;
      v14[3] = (void (*)(_QWORD, _QWORD))&unk_1E6EB5C10;
      v16 = &v21;
      v15 = v3;
      v17 = a2;
      CUIKPerformWithResolvedColorForDynamicColor(v12, a2, v14);

      v9 = (id)v22[5];
      v11 = v15;
    }

    _Block_object_dispose(&v21, 8);
  }

  return v9;
}

void sub_1B8A84ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void CUIKPerformWithResolvedColorForDynamicColor(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  id v8;
  void *v9;
  id v10;

  v6 = (void *)MEMORY[0x1E0DC3E88];
  v7 = a3;
  v8 = a1;
  objc_msgSend(v6, "traitCollectionWithUserInterfaceStyle:", a2);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "resolvedColorWithTraitCollection:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, void *))a3)[2](v7, v9);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

id CUIKLightStripeColorForColor(void *a1)
{
  double v2;
  double v3;
  double v4;

  v4 = 0.0;
  v2 = 0.0;
  v3 = 0.0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v4, &v3, &v2, 0);
  v4 = v4 * 0.16 + 0.84;
  v2 = v2 * 0.16 + 0.84;
  v3 = v3 * 0.16 + 0.84;
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:");
  return (id)objc_claimAutoreleasedReturnValue();
}

double CUIKLuminance(void *a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;

  v5 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v2 = 0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v5, &v4, &v3, &v2);
  return v4 * 0.587000012 + v5 * 0.298999995 + v3 * 0.114;
}

double CUIKGetYUVA(void *a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  double result;
  double v9;
  double v10;
  double v11;

  v10 = 0.0;
  v11 = 0.0;
  v9 = 0.0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v11, &v10, &v9, a5);
  if (a2)
  {
    result = v10 * 0.587000012 + v11 * 0.298999995 + v9 * 0.114;
    *a2 = result;
  }
  if (a3)
  {
    result = v10 * -0.331999987 + v11 * -0.169 + v9 * 0.5 + 0.5;
    *a3 = result;
  }
  if (a4)
  {
    result = v10 * -0.419 + v11 * 0.5 + v9 * -0.0812999979 + 0.5;
    *a4 = result;
  }
  return result;
}

uint64_t CUIKColorWithYUVA(double a1, double a2, double a3)
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", a1 + a3 * 1.40750003 + -0.703750014, a1 + a2 * -0.345499992 + a3 * -0.716899991 + 0.531199992, a1 + a2 * 1.77900004 + -0.889500022);
}

id CUIKAdjustColorToMinimumLuminance(void *a1, double a2)
{
  id v3;
  void *v4;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a1;
  v8 = 0.0;
  v9 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  CUIKGetYUVA(v3, &v9, &v8, &v7, (uint64_t)&v6);
  v4 = v3;
  if (v9 < a2)
  {
    v9 = a2;
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", a2 + v7 * 1.40750003 + -0.703750014, a2 + v8 * -0.345499992 + v7 * -0.716899991 + 0.531199992, a2 + v8 * 1.77900004 + -0.889500022, v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id CUIKAdjustColorLuminanceIfNeeded(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  float v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;

  v1 = a1;
  v14 = 0.0;
  v15 = 0.0;
  v12 = 0;
  v13 = 0.0;
  objc_msgSend(v1, "cuik_getRed:green:blue:alpha:", &v15, &v14, &v13, &v12);
  HIDWORD(v3) = HIDWORD(v13);
  HIDWORD(v4) = 1069362970;
  v5 = v14 * 0.587000012 + v15 * 0.298999995 + v13 * 0.114;
  v6 = v1;
  if (v5 < 0.5)
  {
    v7 = v5 + v5;
    LODWORD(v4) = 1038174126;
    LODWORD(v2) = 1061494456;
    LODWORD(v5) = 0;
    LODWORD(v3) = 1.0;
    objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithControlPoints::::", v5, v3, v4, v2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v9 = v7;
    objc_msgSend(v8, "_solveForInput:", v9);
    CUIKAdjustColorToMinimumLuminance(v1, v10 * 0.5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

BOOL CUIKColorIsBlack(void *a1)
{
  _BOOL4 v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;

  v6 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  v3 = 0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v6, &v5, &v4, &v3);
  v1 = v6 < 0.05;
  if (v5 >= 0.05)
    v1 = 0;
  return v4 < 0.05 && v1;
}

id CUIKAdjustedColorForBackgroundColor(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  if (CUIKColorIsWhite(v5))
  {
    v6 = v5;
    if (CUIKColorIsWhite(v4))
    {
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.8, 1.0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (CUIKColorIsBlack(v5) && CUIKColorIsBlack(v4))
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.25, 1.0);
    v7 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v7;
  }

  return v6;
}

id CUIKSummaryColorForColor(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  CUIKAdjustedColorForColor(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2 == 2)
    CUIKColorDarkenedToPercentageWithFinalAlpha(v3, 0.7);
  else
    CUIKColorLightenedToPercentageWithFinalAlpha(v3, 0.5, 1.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id CUIKColorDarkenedToPercentageWithFinalAlpha(void *a1, double a2)
{
  double v4;
  double v5;
  double v6;

  v5 = 0.0;
  v6 = 0.0;
  v4 = 0.0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v6, &v5, &v4, 0);
  v5 = v5 * a2;
  v6 = v6 * a2;
  v4 = v4 * a2;
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:");
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUIKColorLightenedToPercentageWithFinalAlpha(void *a1, double a2, double a3)
{
  double v5;
  double v7;
  double v8;
  double v9;

  v8 = 0.0;
  v9 = 0.0;
  v7 = 0.0;
  objc_msgSend(a1, "cuik_getRed:green:blue:alpha:", &v9, &v8, &v7, 0);
  v5 = 1.0 - a2 / a3;
  v8 = v5 + v8 * (a2 / a3);
  v9 = v5 + v9 * (a2 / a3);
  v7 = v5 + v7 * (a2 / a3);
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:");
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUIKColorFromString()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  CalGetRGBAFromString();
  LODWORD(v0) = 0;
  LODWORD(v2) = 0;
  LODWORD(v1) = 0;
  LODWORD(v3) = 0;
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", (double)v0 / 255.0, (double)v1 / 255.0, (double)v2 / 255.0, (double)v3 / 255.0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CUIKSymbolicColorWithName(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = CUIKSymbolicColorWithName_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&CUIKSymbolicColorWithName_onceToken, &__block_literal_global_28);
  objc_msgSend((id)CUIKSymbolicColorWithName_kColors, "objectForKeyedSubscript:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1B8A89880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 232), 8);
  _Block_object_dispose((const void *)(v36 - 200), 8);
  _Block_object_dispose((const void *)(v36 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1B8A8A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B8A8B0E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B8A8C1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A8CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak(v24);
  objc_destroyWeak((id *)(v26 - 112));
  _Unwind_Resume(a1);
}

void sub_1B8A8DD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v20 - 72));
  _Unwind_Resume(a1);
}

void sub_1B8A8E1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A8F440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B8A90734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B8A916DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

id CalShortDisplayStringForNotificationIdentity(void *a1, int a2, uint64_t a3)
{
  return _CUIKDisplayStringForNotificationIdentity(a1, a2, 1, a3);
}

id _CUIKDisplayStringForNotificationIdentity(void *a1, int a2, int a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFString *v11;

  v7 = a1;
  if (a3)
    +[CUIKAttendeeUtils displayShortStringForIdentityWithDecomposedName:useAddressAsFallback:contactIdentifier:outFirstName:outLastName:outDepartment:](CUIKAttendeeUtils, "displayShortStringForIdentityWithDecomposedName:useAddressAsFallback:contactIdentifier:outFirstName:outLastName:outDepartment:", v7, 1, a4, 0, 0, 0);
  else
    +[CUIKAttendeeUtils displayStringForIdentityWithDecomposedName:useAddressAsFallback:contactIdentifier:outFirstName:outLastName:outDepartment:](CUIKAttendeeUtils, "displayStringForIdentityWithDecomposedName:useAddressAsFallback:contactIdentifier:outFirstName:outLastName:outDepartment:", v7, 1, a4, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    CUIKBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (a2)
      v11 = CFSTR("Somebody");
    else
      v11 = CFSTR("somebody");
    objc_msgSend(v9, "localizedStringForKey:value:table:", v11, &stru_1E6EBAE30, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

id CUIKDisplayStringForNotificationIdentity(void *a1, int a2, uint64_t a3)
{
  return _CUIKDisplayStringForNotificationIdentity(a1, a2, 0, a3);
}

__CFString *CUIKMessageStringForNotification(void *a1)
{
  void *v1;
  __CFString *v2;

  objc_msgSend(a1, "allDescriptionStringsWithOptions:", 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = &stru_1E6EBAE30;
  }

  return v2;
}

id CUIKMessageStringForEventInvitationNotification(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  const __CFDate *v19;
  const __CFLocale *v20;
  __CFDateFormatter *v21;
  CFAbsoluteTime Current;
  CFStringRef StringWithAbsoluteTime;
  const __CFLocale *Locale;
  const __CFString *DateFormatFromTemplate;
  __CFString *StringWithDate;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  _QWORD v88[4];
  id v89;
  id v90;
  id v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  char v96;

  v3 = a1;
  if (objc_msgSend(v3, "type") != 3)
  {
    if (objc_msgSend(v3, "type") == 2)
    {
      v16 = 0;
    }
    else
    {
      v18 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v3, "startDate");
      v19 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
      v20 = CFLocaleCopyCurrent();
      v21 = CFDateFormatterCreate(0, v20, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
      Current = CFAbsoluteTimeGetCurrent();
      StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0, v21, Current);
      if (StringWithAbsoluteTime)
        CFRelease(StringWithAbsoluteTime);
      CFRelease(v20);
      Locale = CFDateFormatterGetLocale(v21);
      DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("EEEEMMMMdjma"), 0, Locale);
      CFDateFormatterSetFormat(v21, DateFormatFromTemplate);
      CFRelease(DateFormatFromTemplate);
      StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v21, v19);
      CFRelease(v21);
      objc_msgSend(v18, "stringWithFormat:", CFSTR("%@\n"), StringWithDate);
      v16 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "location");
      v27 = objc_claimAutoreleasedReturnValue();
      if (v27)
      {
        v28 = (void *)v27;
        objc_msgSend(v3, "location");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "length");

        if (v30)
        {
          v31 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v3, "location");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "stringWithFormat:", CFSTR("%@%@\n"), v16, v32);
          v33 = objc_claimAutoreleasedReturnValue();

          v16 = (id)v33;
        }
      }
    }
    goto LABEL_108;
  }
  v4 = (void *)objc_opt_new();
  v5 = (void *)objc_opt_new();
  v6 = (void *)objc_opt_new();
  v93 = 0;
  v94 = &v93;
  v95 = 0x2020000000;
  v96 = 0;
  objc_msgSend(v3, "attendees");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v88[0] = MEMORY[0x1E0C809B0];
  v88[1] = 3221225472;
  v88[2] = __CUIKMessageStringForEventInvitationNotification_block_invoke;
  v88[3] = &unk_1E6EB69C0;
  v8 = v4;
  v89 = v8;
  v9 = v5;
  v90 = v9;
  v10 = v6;
  v91 = v10;
  v92 = &v93;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v88);

  if (*((_BYTE *)v94 + 24))
  {
    objc_msgSend(v3, "owner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _CUIKDisplayStringForNotificationIdentity(v11, 1, 1, a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = v12;
    CUIKBundle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("%@ declined to move the event to your proposed time"), &stru_1E6EBAE30, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v15, v13);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v17 = v13;
LABEL_4:

LABEL_105:
    goto LABEL_106;
  }
  if (objc_msgSend(v8, "count") == 1 && !objc_msgSend(v9, "count") && !objc_msgSend(v10, "count"))
  {
    objc_msgSend(v8, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "isLocationDecline"))
    {
      _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      CalInviteeDeclinedLocalizedString(v15);
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_104;
    }
    objc_msgSend(v17, "name");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = (void *)MEMORY[0x1E0CB3940];
    CUIKBundle();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("%@ is unavailable"), &stru_1E6EBAE30, 0);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "localizedStringWithFormat:", v52, v15);
    v53 = objc_claimAutoreleasedReturnValue();
    goto LABEL_102;
  }
  if (!objc_msgSend(v8, "count") && objc_msgSend(v9, "count") == 1 && !objc_msgSend(v10, "count"))
  {
    objc_msgSend(v9, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "comment");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    +[CUIKNotificationDescriptionGenerator stringWithAutoCommentRemoved:](CUIKNotificationDescriptionGenerator, "stringWithAutoCommentRemoved:", v54);
    v13 = (id)objc_claimAutoreleasedReturnValue();

    CalInviteeCommentedLocalizedString(v15, v13);
    v36 = objc_claimAutoreleasedReturnValue();
    goto LABEL_97;
  }
  if (!objc_msgSend(v8, "count") && !objc_msgSend(v9, "count") && objc_msgSend(v10, "count") == 1)
  {
    objc_msgSend(v10, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[CUIKDateDescriptionGenerator sharedGenerator](CUIKDateDescriptionGenerator, "sharedGenerator");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "proposedStartDate");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "dateStringForDate:allDay:standalone:shortFormat:", v35, 0, 0, 0);
    v13 = (id)objc_claimAutoreleasedReturnValue();

    CalInviteeProposedNewTimeLocalizedString(v15, v13);
    v36 = objc_claimAutoreleasedReturnValue();
LABEL_97:
    v16 = (id)v36;
    goto LABEL_4;
  }
  if ((unint64_t)objc_msgSend(v8, "count") < 2 || objc_msgSend(v9, "count") || objc_msgSend(v10, "count"))
  {
    if (!objc_msgSend(v8, "count") && (unint64_t)objc_msgSend(v9, "count") >= 2 && !objc_msgSend(v10, "count"))
    {
      v60 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("invitees_commented"), &stru_1E6EBAE30, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "localizedStringWithFormat:", v15, objc_msgSend(v9, "count"));
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_104;
    }
    if (!objc_msgSend(v8, "count") && !objc_msgSend(v9, "count") && (unint64_t)objc_msgSend(v10, "count") >= 2)
    {
      v37 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("invitees_proposed_time"), &stru_1E6EBAE30, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "localizedStringWithFormat:", v15, objc_msgSend(v10, "count"));
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_104;
    }
    if (objc_msgSend(v8, "count") == 1 && objc_msgSend(v9, "count") == 1 && !objc_msgSend(v10, "count"))
    {
      objc_msgSend(v8, "firstObject");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "firstObject");
      v58 = (void *)objc_claimAutoreleasedReturnValue();

      if (v57 == v58)
      {
        objc_msgSend(v8, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "comment");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        +[CUIKNotificationDescriptionGenerator stringWithAutoCommentRemoved:](CUIKNotificationDescriptionGenerator, "stringWithAutoCommentRemoved:", v66);
        v13 = (id)objc_claimAutoreleasedReturnValue();

        CalInviteeDeclinedWithCommentLocalizedString(v15, v13);
        v36 = objc_claimAutoreleasedReturnValue();
        goto LABEL_97;
      }
      v59 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %d invitee commented"), &stru_1E6EBAE30, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "localizedStringWithFormat:", v15, 1, 1);
      v38 = objc_claimAutoreleasedReturnValue();
LABEL_104:
      v16 = (id)v38;
      goto LABEL_105;
    }
    if (objc_msgSend(v8, "count") == 1 && !objc_msgSend(v9, "count") && objc_msgSend(v10, "count") == 1)
    {
      objc_msgSend(v8, "firstObject");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "firstObject");
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if (v39 == v40)
      {
        objc_msgSend(v8, "firstObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        +[CUIKDateDescriptionGenerator sharedGenerator](CUIKDateDescriptionGenerator, "sharedGenerator");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "proposedStartDate");
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v76, "dateStringForDate:allDay:standalone:shortFormat:", v77, 0, 0, 0);
        v13 = (id)objc_claimAutoreleasedReturnValue();

        CalInviteeDeclinedAndProposedNewTimeLocalizedString(v15, v13);
        v36 = objc_claimAutoreleasedReturnValue();
        goto LABEL_97;
      }
      v41 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %d invitee proposed a new time"), &stru_1E6EBAE30, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "localizedStringWithFormat:", v15, 1, 1);
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_104;
    }
    if (!objc_msgSend(v8, "count") && objc_msgSend(v9, "count") == 1 && objc_msgSend(v10, "count") == 1)
    {
      objc_msgSend(v9, "firstObject");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "firstObject");
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      if (v42 != v43)
      {
        v44 = (void *)MEMORY[0x1E0CB3940];
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee commented, %d invitee proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "localizedStringWithFormat:", v15, 1, 1);
        v38 = objc_claimAutoreleasedReturnValue();
        goto LABEL_104;
      }
      objc_msgSend(v9, "firstObject");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[CUIKDateDescriptionGenerator sharedGenerator](CUIKDateDescriptionGenerator, "sharedGenerator");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "proposedStartDate");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "dateStringForDate:allDay:standalone:shortFormat:", v80, 0, 0, 0);
      v13 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v17, "comment");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      +[CUIKNotificationDescriptionGenerator stringWithAutoCommentRemoved:](CUIKNotificationDescriptionGenerator, "stringWithAutoCommentRemoved:", v81);
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      CalInviteeCommentedAndProposedNewTimeLocalizedString(v15, v13, v52);
      v53 = objc_claimAutoreleasedReturnValue();
LABEL_102:
      v16 = (id)v53;

      goto LABEL_4;
    }
    if (objc_msgSend(v8, "count") == 1 && objc_msgSend(v9, "count") == 1 && objc_msgSend(v10, "count") == 1)
    {
      objc_msgSend(v9, "firstObject");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "firstObject");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if (v45 == v46)
      {
        objc_msgSend(v8, "firstObject");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "firstObject");
        v68 = (void *)objc_claimAutoreleasedReturnValue();

        if (v67 == v68)
        {
          objc_msgSend(v9, "firstObject");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          _CUIKDisplayStringForNotificationIdentity(v17, 1, 1, a2);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "comment");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          +[CUIKNotificationDescriptionGenerator stringWithAutoCommentRemoved:](CUIKNotificationDescriptionGenerator, "stringWithAutoCommentRemoved:", v83);
          v13 = (id)objc_claimAutoreleasedReturnValue();

          +[CUIKDateDescriptionGenerator sharedGenerator](CUIKDateDescriptionGenerator, "sharedGenerator");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "proposedStartDate");
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "dateStringForDate:allDay:standalone:shortFormat:", v85, 0, 0, 0);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          CalInviteeDeclinedCommentedAndProposedNewTimeLocalizedString(v15, v52, v13);
          v53 = objc_claimAutoreleasedReturnValue();
          goto LABEL_102;
        }
      }
      else
      {

      }
      objc_msgSend(v9, "firstObject");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "firstObject");
      v70 = (void *)objc_claimAutoreleasedReturnValue();

      if (v69 == v70)
      {
        v78 = (void *)MEMORY[0x1E0CB3940];
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %d invitee commented and proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "localizedStringWithFormat:", v15, 1, 1);
        v38 = objc_claimAutoreleasedReturnValue();
        goto LABEL_104;
      }
      objc_msgSend(v8, "firstObject");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "firstObject");
      v72 = (void *)objc_claimAutoreleasedReturnValue();

      if (v71 == v72)
      {
        v82 = (void *)MEMORY[0x1E0CB3940];
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee commented, %d invitee declined and proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "localizedStringWithFormat:", v15, 1, 1);
        v38 = objc_claimAutoreleasedReturnValue();
        goto LABEL_104;
      }
      objc_msgSend(v8, "firstObject");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "firstObject");
      v74 = (void *)objc_claimAutoreleasedReturnValue();

      v75 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      if (v73 == v74)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee proposed a new time, %d invitee declined and commented"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "localizedStringWithFormat:", v15, 1, 1);
      }
      else
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %d invitee commented, %d invitee proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "localizedStringWithFormat:", v15, 1, 1, 1);
      }
LABEL_94:
      v38 = objc_claimAutoreleasedReturnValue();
      goto LABEL_104;
    }
    if ((unint64_t)objc_msgSend(v8, "count") >= 2 && !objc_msgSend(v9, "count"))
    {
      v49 = objc_msgSend(v10, "count");
      v50 = (void *)MEMORY[0x1E0CB3940];
      if (v49 == 1)
      {
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees declined, %d invitee proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "localizedStringWithFormat:", v15, objc_msgSend(v8, "count"), 1);
      }
      else
      {
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees declined, %ld invitees proposed a new time"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "localizedStringWithFormat:", v15, objc_msgSend(v8, "count"), objc_msgSend(v10, "count"));
      }
      goto LABEL_94;
    }
    if ((unint64_t)objc_msgSend(v8, "count") < 2 || objc_msgSend(v10, "count"))
    {
      if ((unint64_t)objc_msgSend(v9, "count") < 2 || objc_msgSend(v10, "count"))
      {
        if ((unint64_t)objc_msgSend(v9, "count") < 2 || objc_msgSend(v8, "count"))
        {
          if ((unint64_t)objc_msgSend(v10, "count") < 2 || objc_msgSend(v8, "count"))
          {
            if ((unint64_t)objc_msgSend(v10, "count") < 2 || objc_msgSend(v9, "count"))
            {
              if ((unint64_t)objc_msgSend(v8, "count") < 2
                || (unint64_t)objc_msgSend(v10, "count") < 2
                || (unint64_t)objc_msgSend(v9, "count") < 2)
              {
                v16 = 0;
                v48 = 0;
                goto LABEL_107;
              }
              v47 = (void *)MEMORY[0x1E0CB3940];
              CUIKBundle();
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees declined, %ld invitees commented, %ld invitees proposed a new time"), &stru_1E6EBAE30, 0);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "localizedStringWithFormat:", v15, objc_msgSend(v8, "count"), objc_msgSend(v9, "count"), objc_msgSend(v10, "count"));
              v38 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v65 = (void *)MEMORY[0x1E0CB3940];
              CUIKBundle();
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %ld invitees proposed a new time"), &stru_1E6EBAE30, 0);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "localizedStringWithFormat:", v15, 1, objc_msgSend(v10, "count"));
              v38 = objc_claimAutoreleasedReturnValue();
            }
          }
          else
          {
            v64 = (void *)MEMORY[0x1E0CB3940];
            CUIKBundle();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee commented, %ld invitees proposed a new time"), &stru_1E6EBAE30, 0);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "localizedStringWithFormat:", v15, 1, objc_msgSend(v10, "count"));
            v38 = objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_104;
        }
        v62 = objc_msgSend(v10, "count");
        v63 = (void *)MEMORY[0x1E0CB3940];
        if (v62 == 1)
        {
          CUIKBundle();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees commented, %d invitee proposed a new time"), &stru_1E6EBAE30, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "localizedStringWithFormat:", v15, objc_msgSend(v9, "count"), 1);
        }
        else
        {
          CUIKBundle();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees commented, %ld invitees proposed a new time"), &stru_1E6EBAE30, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "localizedStringWithFormat:", v15, objc_msgSend(v9, "count"), objc_msgSend(v10, "count"));
        }
        goto LABEL_94;
      }
      v61 = objc_msgSend(v8, "count");
      v56 = (void *)MEMORY[0x1E0CB3940];
      if (v61 == 1)
      {
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%d invitee declined, %ld invitees commented"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "localizedStringWithFormat:", v15, 1, objc_msgSend(v9, "count"));
        goto LABEL_94;
      }
    }
    else
    {
      v55 = objc_msgSend(v9, "count");
      v56 = (void *)MEMORY[0x1E0CB3940];
      if (v55 == 1)
      {
        CUIKBundle();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees declined, %d invitee commented"), &stru_1E6EBAE30, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "localizedStringWithFormat:", v15, objc_msgSend(v8, "count"), 1);
        goto LABEL_94;
      }
    }
    CUIKBundle();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("%ld invitees declined, %ld invitees commented"), &stru_1E6EBAE30, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "localizedStringWithFormat:", v15, objc_msgSend(v8, "count"), objc_msgSend(v9, "count"));
    goto LABEL_94;
  }
  CalInviteesDeclinedLocalizedString(objc_msgSend(v8, "count"));
  v16 = (id)objc_claimAutoreleasedReturnValue();
LABEL_106:
  v48 = 1;
LABEL_107:

  _Block_object_dispose(&v93, 8);
  if ((v48 & 1) == 0)
  {
    v86 = 0;
    goto LABEL_110;
  }
LABEL_108:
  v16 = v16;
  v86 = v16;
LABEL_110:

  return v86;
}

void sub_1B8A98080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CalInviteeDeclinedLocalizedString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  CUIKBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("%@ declined"), &stru_1E6EBAE30, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v3, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id CalInviteeCommentedLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  CUIKBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("%@: “%@”"), &stru_1E6EBAE30, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v6, v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CalInviteeProposedNewTimeLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  CUIKBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("%@ proposed moving event to %@"), &stru_1E6EBAE30, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v6, v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CalInviteesDeclinedLocalizedString(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  CUIKBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("invitees_declined_long"), &stru_1E6EBAE30, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v3, a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id CalInviteeDeclinedWithCommentLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  CUIKBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("%@ declined: “%@”"), &stru_1E6EBAE30, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v6, v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CalInviteeDeclinedAndProposedNewTimeLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  CUIKBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("%@ declined, but proposed moving event to %@"), &stru_1E6EBAE30, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v6, v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CalInviteeCommentedAndProposedNewTimeLocalizedString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  CUIKBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("%@ proposed moving event to %@: “%@”"), &stru_1E6EBAE30, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v9, v7, v6, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id CalInviteeDeclinedCommentedAndProposedNewTimeLocalizedString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  CUIKBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("%@ declined, but proposed moving event to %@: “%@”"), &stru_1E6EBAE30, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v9, v7, v6, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t CUIKLaunchURLForInbox()
{
  return objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("calinvitelist:"));
}

id CUIKLaunchURLForEvent(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    +[CUIKLogSubsystem defaultCategory](CUIKLogSubsystem, "defaultCategory");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      CUIKLaunchURLForEvent_cold_1();
    goto LABEL_7;
  }
  objc_msgSend(v1, "externalURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    +[CUIKLogSubsystem defaultCategory](CUIKLogSubsystem, "defaultCategory");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      CUIKLaunchURLForEvent_cold_2();
LABEL_7:

    v3 = 0;
  }

  return v3;
}

id CUIKLaunchURLForEventInvitation(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    +[CUIKLogSubsystem defaultCategory](CUIKLogSubsystem, "defaultCategory");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      CUIKLaunchURLForEventInvitation_cold_1();
    goto LABEL_8;
  }
  objc_msgSend(v1, "externalURL");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    +[CUIKLogSubsystem defaultCategory](CUIKLogSubsystem, "defaultCategory");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      CUIKLaunchURLForEventInvitation_cold_2();
LABEL_8:

    v7 = 0;
    goto LABEL_9;
  }
  v4 = (void *)v3;
  v5 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("calinvite:%@"), v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_9:
  return v7;
}

id CUIKNewTimeProposerForNotification(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  char v5;

  objc_msgSend(a1, "descriptionStrings:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ImportantAttendee"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2 || !objc_msgSend(v2, "proposedStartDateChanged"))
  {
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  objc_msgSend(v3, "proposedStartDate");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = objc_msgSend(v3, "proposedStartDateDeclined");

    if ((v5 & 1) == 0)
    {
      v4 = v3;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_6:

  return v4;
}

void sub_1B8A99018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_1B8A9924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A993F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A995A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A997C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A99A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A99DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B8A9A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A9AC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1B8A9B21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void sub_1B8AA38DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B8AA435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double CUIKFloorToScreenScale(double a1)
{
  uint64_t v2;

  v2 = CUIKFloorToScreenScale___scale;
  if (*(double *)&CUIKFloorToScreenScale___scale == -1.0)
  {
    *(double *)&v2 = CUIKScaleFactor();
    CUIKFloorToScreenScale___scale = v2;
  }
  if (a1 != 0.0)
    return floor(*(double *)&v2 * a1) / *(double *)&v2;
  return a1;
}

void sub_1B8AA6DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8AA7078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCUIKIReminderColorDeserializerClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!CalendarUIKitInternalLibraryCore_frameworkLibrary)
    CalendarUIKitInternalLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("CUIKIReminderColorDeserializer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getCUIKIReminderColorDeserializerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

id __GetDateFormatter()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)__DateFormatter;
  if (!__DateFormatter)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v2 = (void *)__DateFormatter;
    __DateFormatter = (uint64_t)v1;

    objc_msgSend((id)__DateFormatter, "setDateStyle:", 1);
    objc_msgSend((id)__DateFormatter, "setTimeStyle:", 1);
    v0 = (void *)__DateFormatter;
  }
  return v0;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_8_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

uint64_t OUTLINED_FUNCTION_11()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_14()
{
  return MEMORY[0x1E0C99D68];
}

uint64_t CUIKEventParticipantStatusForDisplay(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  int v4;

  v1 = a1;
  if (!objc_msgSend(v1, "hasAttendees"))
    goto LABEL_9;
  v2 = objc_msgSend(v1, "selfParticipantStatus");
  if (v2 != 3)
  {
    if (objc_msgSend(MEMORY[0x1E0CAA0E0], "needsResponseForParticipantStatus:", v2)
      && !objc_msgSend(v1, "isSelfOrganizedInvitation"))
    {
      v2 = 2;
      goto LABEL_10;
    }
    if (v2 == 4 && !objc_msgSend(v1, "isSelfOrganizedInvitation")
      || (objc_msgSend(v1, "calendar"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v4 = objc_msgSend(v3, "isSuggestedEventCalendar"),
          v3,
          v4))
    {
      v2 = 1;
      goto LABEL_10;
    }
LABEL_9:
    v2 = 0;
  }
LABEL_10:

  return v2;
}

id CUIKDisplayedTitleForEvent(void *a1)
{
  id v1;
  int v2;
  _BOOL4 v3;
  int v4;
  void *v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "isProposedTimeEvent");
  v3 = objc_msgSend(v1, "status") == 3;
  v4 = CUIKEventDisplaysAsDeclined(v1);
  CUIKDisplayedTitleForEventWithOptions(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

__CFString *CUIKDisplayedTitleForEventWithOptions(void *a1, int a2, int a3, int a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  uint64_t v16;

  v7 = a1;
  objc_msgSend(v7, "title");
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v8
    || (objc_msgSend(v7, "title"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "isEqualToString:", &stru_1E6EBAE30),
        v9,
        v10))
  {

    v8 = CFSTR(" ");
  }
  if (a2)
  {
    v11 = (void *)MEMORY[0x1E0CB3940];
    CUIKBundle();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = CFSTR("PROPOSED: %@");
LABEL_10:
    objc_msgSend(v12, "localizedStringForKey:value:table:", v14, &stru_1E6EBAE30, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "localizedStringWithFormat:", v15, v8);
    v16 = objc_claimAutoreleasedReturnValue();

    v8 = (__CFString *)v16;
    goto LABEL_11;
  }
  if (a4)
  {
    v11 = (void *)MEMORY[0x1E0CB3940];
    CUIKBundle();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = CFSTR("DECLINED: %@");
    goto LABEL_10;
  }
  if (a3)
  {
    v11 = (void *)MEMORY[0x1E0CB3940];
    CUIKBundle();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    v14 = CFSTR("CANCELED: %@");
    goto LABEL_10;
  }
LABEL_11:

  return v8;
}

id CUIKDisplayedTitleForCalendar(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  const __CFString *v21;
  void *v22;
  uint64_t v23;

  v1 = a1;
  objc_msgSend(v1, "source");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    if (objc_msgSend(v2, "sourceType") == 5)
    {
      if (objc_msgSend(v1, "isSuggestedEventCalendar"))
      {
        CUIKBundle();
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        v6 = CFSTR("Siri Suggestions");
LABEL_8:
        objc_msgSend(v4, "localizedStringForKey:value:table:", v6, &stru_1E6EBAE30, 0);
        v10 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_26;
      }
LABEL_10:
      CUIKBirthdayCalendarLocalizedString();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      if (v10)
        goto LABEL_28;
      goto LABEL_27;
    }
    if ((objc_msgSend(v1, "isFacebookBirthdayCalendar") & 1) == 0)
    {
      objc_msgSend(v1, "source");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "constraints");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isFacebook");

      if (v9)
      {
        CUIKBundle();
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        v6 = CFSTR("Facebook Events");
        goto LABEL_8;
      }
    }
    if (objc_msgSend(v1, "isFacebookBirthdayCalendar"))
      goto LABEL_10;
    v11 = objc_msgSend(v3, "sourceType");
    objc_msgSend(v1, "title");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "externalID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v12;
    v14 = v13;
    v15 = v14;
    if (v11 == 2
      && v14
      && ((objc_msgSend(v5, "isEqualToString:", CFSTR("Work")) & 1) != 0
       || objc_msgSend(v5, "isEqualToString:", CFSTR("Home"))))
    {
      +[CUIKAccountsController sharedInstance](CUIKAccountsController, "sharedInstance");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "accountTypeTitleForSourceWithExternalId:", v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17 && objc_msgSend(v17, "isEqualToString:", CFSTR("iCloud")))
      {
        if (objc_msgSend(v5, "isEqualToString:", CFSTR("Work")))
        {
          CUIKBundle();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          v20 = CFSTR("Name of default iCloud 'work' calendar");
          v21 = CFSTR("Work");
LABEL_22:
          objc_msgSend(v18, "localizedStringForKey:value:table:", v20, v21, 0);
          v10 = (id)objc_claimAutoreleasedReturnValue();

LABEL_25:
LABEL_26:

          if (v10)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (objc_msgSend(v5, "isEqualToString:", CFSTR("Home")))
        {
          CUIKBundle();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          v20 = CFSTR("Name of default iCloud 'home' calendar");
          v21 = CFSTR("Home");
          goto LABEL_22;
        }
      }

    }
    v10 = v5;
    goto LABEL_25;
  }
LABEL_27:
  objc_msgSend(v1, "title");
  v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_28:
  if (!objc_msgSend(v10, "length"))
  {
    CUIKBundle();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("Untitled Calendar"), &stru_1E6EBAE30, 0);
    v23 = objc_claimAutoreleasedReturnValue();

    v10 = (id)v23;
  }

  return v10;
}

id CUIKBirthdayCalendarLocalizedString()
{
  void *v0;
  void *v1;

  CUIKBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Birthdays"), &stru_1E6EBAE30, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id CUIKDisplayedTitleForSource(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  +[CUIKAccountsController sharedInstance](CUIKAccountsController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "titleForSource:forBeginningOfSentence:", v3, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id CUIKDisplayedStoreTypeTitleForSource(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    +[CUIKAccountsController sharedInstance](CUIKAccountsController, "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "accountTypeTitleForSource:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

BOOL CUIKShouldDisplayNotes(void *a1)
{
  __CFString *v1;
  int v2;
  void *v3;
  _BOOL8 v4;
  const __CFCharacterSet *InvertedSet;
  const __CFCharacterSet *Predefined;
  CFRange v8;

  v1 = a1;
  v2 = CUIKShouldDisplayNotes___ShouldDisplayNotes;
  if (CUIKShouldDisplayNotes___ShouldDisplayNotes < 0)
  {
    v3 = (void *)CFPreferencesCopyValue(CFSTR("HideNotes"), (CFStringRef)*MEMORY[0x1E0C9B248], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CUIKShouldDisplayNotes___ShouldDisplayNotes = objc_msgSend(v3, "BOOLValue") ^ 1;

    v2 = CUIKShouldDisplayNotes___ShouldDisplayNotes;
  }
  v4 = 0;
  if (v1 && v2 == 1)
  {
    InvertedSet = (const __CFCharacterSet *)CUIKShouldDisplayNotes___NonWhitespaceSet;
    if (!CUIKShouldDisplayNotes___NonWhitespaceSet)
    {
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
      InvertedSet = CFCharacterSetCreateInvertedSet((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Predefined);
      CUIKShouldDisplayNotes___NonWhitespaceSet = (uint64_t)InvertedSet;
    }
    v8.length = -[__CFString length](v1, "length");
    v8.location = 0;
    v4 = CFStringFindCharacterFromSet(v1, InvertedSet, v8, 0, 0) != 0;
  }

  return v4;
}

void *CUIKNotesFieldHasInlineExchangeAttachments(void *result)
{
  id v1;
  void *v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    _CUIKNotesFieldCIDNotationPattern();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "rangeOfFirstMatchInString:options:range:", v1, 0, 0, objc_msgSend(v1, "length"));

    return (void *)(v3 != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

id CUIKStripInlineExchangeAttachmentsFromNotes(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    _CUIKNotesFieldCIDNotationPattern();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "length");
    CUIKBundle();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("<inline attachment not shown>"), &stru_1E6EBAE30, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByReplacingMatchesInString:options:range:withTemplate:", v1, 0, 0, v3, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

uint64_t CUIKGregorianUnitsForRecurrenceTypeAndInterval@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (a2 >= 1)
  {
    switch(result)
    {
      case 0:
        *(_DWORD *)(a3 + 8) = a2;
        break;
      case 1:
        *(_DWORD *)(a3 + 8) = 7 * a2;
        break;
      case 2:
        *(_DWORD *)(a3 + 4) = a2;
        break;
      case 3:
        *(_DWORD *)a3 = a2;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CUIKCheckEventStartDateAgainstOccurrenceCacheBounds()
{
  const void *v0;

  v0 = (const void *)CalCopyTimeZone();
  CalEventOccurrenceCacheCopyBoundsForTimeZone();
  if (v0)
    CFRelease(v0);
  return 1;
}

uint64_t CUIKStringForRecurrenceRule(void *a1, const char *a2)
{
  return objc_msgSend(a1, "humanReadableDescriptionWithStartDate:isConcise:", a2, 1);
}

id CUIKStringForRecurrenceRuleAndDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "naturalLanguageDescriptionForRecurrenceRule:withStartDate:", v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t CUIKRecurrenceDateMatchesAnyDaySpecifiedInByDayList(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setTimeZone:", v7);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v18 = v5;
      v11 = *(_QWORD *)v20;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          objc_msgSend(v8, "components:fromDate:", 512, v6);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v13, "dayOfTheWeek");
          v16 = objc_msgSend(v14, "weekday");

          if (v15 == v16)
          {
            v10 = 1;
            goto LABEL_12;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        if (v10)
          continue;
        break;
      }
LABEL_12:
      v5 = v18;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t CUIKRecurrenceDateMatchesAnyDaySpecifiedInByMonthDayList(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setTimeZone:", v7);
    objc_msgSend(v8, "components:fromDate:", 16, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "day");

    objc_msgSend(v8, "rangeOfUnit:inUnit:forDate:", 16, 8, v6);
    v12 = v11;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = v5;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v24;
      v17 = v12 + 1;
      while (2)
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          v19 = objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "integerValue", (_QWORD)v23);
          if (v19 < 0)
          {
            if (v19 == v10 || v17 + v19 == v10)
            {
LABEL_17:
              v21 = 1;
              goto LABEL_18;
            }
          }
          else if (v19 == v10)
          {
            goto LABEL_17;
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v15)
          continue;
        break;
      }
    }
    v21 = 0;
LABEL_18:

  }
  else
  {
    v21 = 0;
  }

  return v21;
}

uint64_t CUIKRecurrenceMonthMatchesAnyMonthSpecifiedInByMonthList(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  if (!a2)
    return 0;
  v5 = (void *)MEMORY[0x1E0C99D48];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  objc_msgSend(v5, "currentCalendar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setTimeZone:", v6);

  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v9, "components:fromDate:", 8, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "numberWithInteger:", objc_msgSend(v11, "month"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_msgSend(v8, "containsObject:", v12);
  return v13;
}

id CUIKDisplayStringForAvailability(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case -1:
    case 0:
      CUIKBusyLocalizedString();
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      return v1;
    case 1:
      CUIKBundle();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Free");
      goto LABEL_6;
    case 2:
      CUIKBundle();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Tentative");
      goto LABEL_6;
    case 3:
      CUIKBundle();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Out of office");
LABEL_6:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E6EBAE30, 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

id CUIKBusyLocalizedString()
{
  void *v0;
  void *v1;

  CUIKBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Busy"), &stru_1E6EBAE30, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id CUIKDisplayStringForTravelTimeUsingShortFormat(int a1, double a2)
{
  void *v4;
  void *v5;
  void *v6;

  CUIKBundle();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("None"), &stru_1E6EBAE30, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CUIKDurationStringForTimeInterval(0, v5, a1, 0, 1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id CUIKDisplayStringTravelTimeAndDuration(double a1)
{
  void *v1;
  void *v2;

  CUIKDisplayStringForTravelTimeUsingShortFormat(1, a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  CUIKDisplayStringTravelTimeFormat(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id CUIKDisplayStringTravelTimeFormat(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  CUIKBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("%@ travel time"), &stru_1E6EBAE30, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v3, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id CUIKDisplayStringTravelToLocationWithRoutingModeAndDuration(void *a1, uint64_t a2, double a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  uint64_t v22;

  v5 = a1;
  if (a3 <= 0.0)
  {
    v10 = 0;
  }
  else
  {
    CUIKDisplayStringForTravelTimeUsingShortFormat(1, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v5;
    if (objc_msgSend(v7, "length"))
    {
      objc_msgSend(v7, "componentsSeparatedByString:", CFSTR("\n"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "firstObject");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }
    if (objc_msgSend(v9, "length"))
    {
      objc_msgSend(v9, "componentsSeparatedByString:", CFSTR(","));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "firstObject");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v12 = 0;
    }

    if (v12)
    {
      CUIKBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("%@ from %@ (%@)"), &stru_1E6EBAE30, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      switch(a2)
      {
        case -1:
        case 0:
          v15 = (void *)MEMORY[0x1E0CB3940];
          CUIKBundle();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("Travel to %@ (%@)"), &stru_1E6EBAE30, 0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "localizedStringWithFormat:", v17, v12, v6, v22);
          goto LABEL_19;
        case 1:
          v18 = (void *)MEMORY[0x1E0CB3940];
          CUIKBundle();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v19;
          v20 = CFSTR("drive");
          goto LABEL_18;
        case 2:
          v18 = (void *)MEMORY[0x1E0CB3940];
          CUIKBundle();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v19;
          v20 = CFSTR("walk");
          goto LABEL_18;
        case 3:
          v18 = (void *)MEMORY[0x1E0CB3940];
          CUIKBundle();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v19;
          v20 = CFSTR("take transit");
          goto LABEL_18;
        case 4:
          v18 = (void *)MEMORY[0x1E0CB3940];
          CUIKBundle();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v19;
          v20 = CFSTR("bike");
LABEL_18:
          objc_msgSend(v19, "localizedStringForKey:value:table:", v20, &stru_1E6EBAE30, 0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "localizedStringWithFormat:", v14, v17, v12, v6);
LABEL_19:
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          break;
        default:
          v10 = 0;
          break;
      }

    }
    else
    {
      CUIKDisplayStringTravelTimeFormat(v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  return v10;
}

BOOL CUIKShouldShowTimezoneClarification(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)CalCopyTimeZone();
  v6 = v3 && (objc_msgSend(v3, "isUTC") & 1) == 0 && CUIKTimezonesDivergeAtDate(v3, v5, v4);

  return v6;
}

uint64_t CUIKDayRangeForOccurenceDates(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  void *v19;
  uint64_t v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  objc_msgSend(v7, "absoluteTime");
  v12 = v11;
  objc_msgSend(v9, "absoluteTime");
  if (v12 < v13)
  {
    v14 = v9;

    v7 = v14;
  }
  objc_msgSend(v8, "absoluteTime");
  v16 = v15;
  objc_msgSend(v10, "absoluteTime");
  if (v16 > v17)
  {
    v18 = v10;

    v8 = v18;
  }
  objc_msgSend(v7, "calendarDateForDay");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v7, "differenceInDays:", v9);
  objc_msgSend(v8, "differenceInDays:", v19);

  return v20;
}

uint64_t CUIKCompareEKCalendars(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v23;
  uint64_t v24;
  void *v25;

  v3 = a1;
  v4 = a2;
  +[CUIKAccountsController sharedInstance](CUIKAccountsController, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "source");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "sortOrderForSource:", v6);

  +[CUIKAccountsController sharedInstance](CUIKAccountsController, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "source");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "sortOrderForSource:", v9);

  if (v7 == v10)
  {
    objc_msgSend(v3, "source");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "sourceIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "source");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sourceIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v12, "compare:", v14);

    if (!v15)
    {
      v16 = objc_msgSend(v3, "isSharingInvitation");
      v17 = objc_msgSend(v4, "isSharingInvitation");
      if ((v16 & 1) == 0 && v17)
      {
LABEL_13:
        v15 = -1;
        goto LABEL_17;
      }
      if ((v16 ^ 1 | v17) != 1)
        goto LABEL_19;
      v18 = objc_msgSend(v3, "displayOrder");
      v19 = objc_msgSend(v4, "displayOrder");
      if (v18 == -1)
        v20 = 0x7FFFFFFF;
      else
        v20 = v18;
      if (v19 == -1)
        v21 = 0x7FFFFFFF;
      else
        v21 = v19;
      if (v20 < v21)
        goto LABEL_13;
      if (v20 > v21)
      {
LABEL_19:
        v15 = 1;
        goto LABEL_17;
      }
      objc_msgSend(v3, "title");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "title");
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = (void *)v24;
      if (v23 && v24)
      {
        v15 = objc_msgSend(v23, "localizedCompare:", v24);
      }
      else if (v23)
      {
        v15 = -1;
      }
      else
      {
        v15 = 1;
      }

    }
  }
  else if (v7 < v10)
  {
    v15 = -1;
  }
  else
  {
    v15 = 1;
  }
LABEL_17:

  return v15;
}

uint64_t CUIKCompareEKEventsAsReminders(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v4;
  LODWORD(v4) = objc_msgSend(v6, "completed");
  if ((_DWORD)v4 != objc_msgSend(v5, "completed"))
  {
    v7 = objc_msgSend(v6, "completed");
LABEL_5:
    v9 = v7 == 0;
    goto LABEL_6;
  }
  v8 = objc_msgSend(v5, "CUIK_reminderShouldBeEditable");
  if (v8 != objc_msgSend(v6, "CUIK_reminderShouldBeEditable"))
  {
    v7 = objc_msgSend(v5, "CUIK_reminderShouldBeEditable");
    goto LABEL_5;
  }
  objc_msgSend(v5, "startDate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "startDate");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "isEqualToDate:", v13);

  if ((v14 & 1) != 0)
  {
    objc_msgSend(v5, "uniqueID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v15, "compare:", v16);

    goto LABEL_9;
  }
  objc_msgSend(v5, "startDate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "startDate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v17, "isBeforeDate:", v18);

  v9 = v19 == 0;
LABEL_6:
  if (v9)
    v10 = 1;
  else
    v10 = -1;
LABEL_9:

  return v10;
}

id CUIKGetAttributedStringForEventDetailWithURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  const __CFString *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void **v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v1, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "scheme");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    objc_msgSend(v1, "absoluteString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "length");
    if (v5)
    {
      v6 = v5;
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D1CE78]), "initWithScannerType:passiveIntent:", 1, 1);
      objc_msgSend(MEMORY[0x1E0D1CE70], "scanString:range:configuration:", v4, 0, v6, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "firstObject");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9
        && !objc_msgSend(v9, "urlificationRange")
        && v10 == v6
        && objc_msgSend(v9, "category") - 1 <= 1)
      {
        objc_msgSend(v9, "url");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v11, 1);
          v12 = objc_claimAutoreleasedReturnValue();

          v2 = (void *)v12;
        }

      }
    }
    objc_msgSend(v2, "scheme");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
      goto LABEL_16;
    objc_msgSend(v2, "setScheme:", CFSTR("http"));
    objc_msgSend(v2, "path");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "length"))
    {
      objc_msgSend(v2, "path");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "hasPrefix:", CFSTR("//"));

      if ((v16 & 1) != 0)
      {
LABEL_16:

        goto LABEL_17;
      }
      objc_msgSend(v2, "path");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("//"), "stringByAppendingString:", v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setPath:", v17);

    }
    goto LABEL_16;
  }
LABEL_17:
  objc_msgSend(v1, "_lp_userVisibleString");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "scheme");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "lowercaseString");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "URL");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "absoluteString");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v20, "isEqualToString:", CFSTR("message")))
  {
    CUIKBundle();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = CFSTR("Show in Mail");
  }
  else if (objc_msgSend(v20, "isEqualToString:", CFSTR("sms")))
  {
    CUIKBundle();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = CFSTR("Show in Messages");
  }
  else
  {
    if (!objc_msgSend(v22, "cal_isWalletURL"))
      goto LABEL_24;
    CUIKBundle();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = CFSTR("Show in Wallet");
  }
  objc_msgSend(v23, "localizedStringForKey:value:table:", v25, &stru_1E6EBAE30, 0);
  v26 = objc_claimAutoreleasedReturnValue();

  v18 = (void *)v26;
LABEL_24:
  if (v18)
  {
    objc_msgSend(v2, "URL");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v28 = objc_alloc(MEMORY[0x1E0CB3498]);
    if (v27)
    {
      v38 = *MEMORY[0x1E0DC1160];
      objc_msgSend(v2, "URL");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v39[0] = v29;
      v30 = (void *)MEMORY[0x1E0C99D80];
      v31 = (void **)v39;
      v32 = &v38;
    }
    else
    {
      v36 = *MEMORY[0x1E0DC1140];
      objc_msgSend(MEMORY[0x1E0DC3658], "secondaryLabelColor");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v29;
      v30 = (void *)MEMORY[0x1E0C99D80];
      v31 = &v37;
      v32 = &v36;
    }
    objc_msgSend(v30, "dictionaryWithObjects:forKeys:count:", v31, v32, 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = (void *)objc_msgSend(v28, "initWithString:attributes:", v18, v34);

  }
  else
  {
    v33 = 0;
  }

  return v33;
}

id _CUIKNotesFieldCIDNotationPattern()
{
  if (_CUIKNotesFieldCIDNotationPattern_onceToken != -1)
    dispatch_once(&_CUIKNotesFieldCIDNotationPattern_onceToken, &__block_literal_global_86);
  return (id)_CUIKNotesFieldCIDNotationPattern_cidNotationPattern;
}

void _CUIKDateDescriptionGeneratorDateTimeFormatChanged()
{
  id v0;

  +[CUIKDateDescriptionGenerator sharedGenerator](CUIKDateDescriptionGenerator, "sharedGenerator");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_initializeFormatters");

}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

const __CFString *gylphForCUIKParticipantDisplayImageState(int a1)
{
  if ((a1 - 1) > 6)
    return CFSTR("?⃝");
  else
    return off_1E6EB71F0[a1 - 1];
}

const __CFString *gylphNameForCUIKParticipantDisplayImageState(int a1)
{
  if ((a1 - 1) > 6)
    return CFSTR("questionmark.circle");
  else
    return off_1E6EB7228[a1 - 1];
}

uint64_t stateForParticipationStatus(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) >= 3)
    return 6;
  else
    return (a1 + 1);
}

id colorForParticipationState(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  switch((int)a1)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      objc_msgSend(MEMORY[0x1E0DC3658], "systemGrayColor", v1, v2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0DC3658], "systemGreenColor", v1, v2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 4:
    case 7:
      objc_msgSend(MEMORY[0x1E0DC3658], "systemRedColor", v1, v2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0DC3658], "systemOrangeColor", v1, v2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      return a1;
  }
  return a1;
}

id glyphWithAttributes(int a1, void *a2)
{
  const __CFString *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if ((a1 - 1) > 6)
    v2 = CFSTR("questionmark.circle");
  else
    v2 = off_1E6EB7228[a1 - 1];
  v3 = (void *)MEMORY[0x1E0DC3888];
  v4 = *MEMORY[0x1E0DC1138];
  v5 = a2;
  objc_msgSend(v5, "objectForKeyedSubscript:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "configurationWithFont:scale:", v6, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:withConfiguration:", v2, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "imageWithRenderingMode:", 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)objc_opt_new();
  objc_msgSend(v10, "setImage:", v9);
  objc_msgSend(MEMORY[0x1E0CB3498], "attributedStringWithAttachment:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "mutableCopy");
  objc_msgSend(v12, "addAttributes:range:", v5, 0, objc_msgSend(v12, "length"));

  return v12;
}

id attributedStateGlyph(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v8[0] = *MEMORY[0x1E0DC1140];
  v3 = a2;
  colorForParticipationState(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = *MEMORY[0x1E0DC1138];
  v9[0] = v4;
  v9[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  glyphWithAttributes((int)a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id attributedStatusGlyph(uint64_t a1, void *a2)
{
  uint64_t v2;

  if ((unint64_t)(a1 - 2) >= 3)
    v2 = 6;
  else
    v2 = (a1 + 1);
  return attributedStateGlyph((void *)v2, a2);
}

void sub_1B8AB2744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CUIKDescriptorForRequiredKeysForLabeledDisplayString()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C97218], "descriptorForRequiredKeysForStyle:", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = *MEMORY[0x1E0C96898];
  v4[0] = v0;
  v4[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1B8AB39F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CUIKDecomposedAttendeeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  +[CUIKAttendeeUtils _filteredAttendeeName:parenthesizedPart:](CUIKAttendeeUtils, "_filteredAttendeeName:parenthesizedPart:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  v7 = 0;
  objc_msgSend(v5, "CUIK_attendeeFirstName:middleName:lastName:extension:", a2, &v7, a3, &v6);

}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return NSRequestConcreteImplementation();
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  return objc_opt_class();
}

void sub_1B8ABA924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void _initShortDayFormatter()
{
  const __CFLocale *v0;

  if (!__shortDayFormatter)
  {
    v0 = CFLocaleCopyCurrent();
    __shortDayFormatter = (uint64_t)CFDateFormatterCreate(0, v0, kCFDateFormatterShortStyle, kCFDateFormatterNoStyle);
    CFRelease(v0);
  }
}

void _initFullDayFormatter()
{
  const __CFLocale *v0;

  if (!__fullDayFormatter)
  {
    v0 = CFLocaleCopyCurrent();
    __fullDayFormatter = (uint64_t)CFDateFormatterCreate(0, v0, kCFDateFormatterFullStyle, kCFDateFormatterNoStyle);
    CFRelease(v0);
  }
}

void _initTimeWithoutDesignatorFormatter()
{
  const __CFLocale *v0;
  __CFDateFormatter *v1;
  const __CFString *v2;

  if (!__timeWithoutDesignatorFormatter)
  {
    v0 = CFLocaleCopyCurrent();
    v1 = CFDateFormatterCreate(0, v0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    __timeWithoutDesignatorFormatter = (uint64_t)v1;
    v2 = (const __CFString *)CPDateFormatStringForFormatType();
    CFDateFormatterSetFormat(v1, v2);
    CFRelease(v0);
  }
}

void _initDateFormatterWithCommaAndYear()
{
  const __CFLocale *v0;

  if (!__dateFormatterWithCommaAndYear)
  {
    v0 = CFLocaleCopyCurrent();
    __dateFormatterWithCommaAndYear = (uint64_t)CFDateFormatterCreate(0, v0, kCFDateFormatterMediumStyle, kCFDateFormatterNoStyle);
    CFRelease(v0);
  }
}

id _CUIKTimeZoneForChoice(void *a1)
{
  if (a1 == (void *)2)
  {
    a1 = CFTimeZoneCreateWithName(0, CFSTR("GMT"), 1u);
  }
  else if (a1 == (void *)1)
  {
    a1 = (void *)CalCopyTimeZone();
  }
  else if (!a1)
  {
    a1 = (void *)CalCopySystemTimeZone();
  }
  return a1;
}

void CUIKDetermineWeekStart()
{
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKDetermineWeekStart();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
}

id CUIKTimeZoneForChoice(void *a1)
{
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  return _CUIKTimeZoneForChoice(a1);
}

uint64_t CUIKCurrentLocaleRequiresUnabbrevatedMonthNames()
{
  void *v1;
  void *v2;
  void *v3;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (CUIKCurrentLocaleRequiresUnabbrevatedMonthNames_hasChecked != 1
    || __languagesRequiringUnabbreviatedMonthNames == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0C997E8]);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = (void *)__languagesRequiringUnabbreviatedMonthNames;
    if (!__languagesRequiringUnabbreviatedMonthNames)
    {
      __languagesRequiringUnabbreviatedMonthNames = (uint64_t)&unk_1E6ED7118;

      v3 = (void *)__languagesRequiringUnabbreviatedMonthNames;
    }
    CUIKCurrentLocaleRequiresUnabbrevatedMonthNames_usesFullLengthMonthNames = objc_msgSend(v3, "containsObject:", v2);
    CUIKCurrentLocaleRequiresUnabbrevatedMonthNames_hasChecked = 1;

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return CUIKCurrentLocaleRequiresUnabbrevatedMonthNames_usesFullLengthMonthNames;
}

id CUIKStringVeryShortAbbreviationForMonth(int a1)
{
  void *v2;
  __CFDateFormatter *v3;
  CFTypeRef v4;
  void *v5;
  void *v6;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (void *)__MonthVeryShortAbbreviationsStandalone;
  if (!__MonthVeryShortAbbreviationsStandalone)
  {
    v3 = (__CFDateFormatter *)_SharedDateFormatter();
    v4 = CFDateFormatterCopyProperty(v3, (CFDateFormatterKey)*MEMORY[0x1E0C9AF88]);
    v5 = (void *)__MonthVeryShortAbbreviationsStandalone;
    __MonthVeryShortAbbreviationsStandalone = (uint64_t)v4;

    v2 = (void *)__MonthVeryShortAbbreviationsStandalone;
  }
  if (objc_msgSend(v2, "count") >= (unint64_t)a1)
  {
    objc_msgSend((id)__MonthVeryShortAbbreviationsStandalone, "objectAtIndex:", a1 - 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringAbbreviationForMonth(int a1)
{
  void *v2;
  __CFDateFormatter *v3;
  CFTypeRef v4;
  void *v5;
  void *v6;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (void *)__MonthAbbreviationsStandalone;
  if (!__MonthAbbreviationsStandalone)
  {
    v3 = (__CFDateFormatter *)_SharedDateFormatter();
    v4 = CFDateFormatterCopyProperty(v3, (CFDateFormatterKey)*MEMORY[0x1E0C9AF30]);
    v5 = (void *)__MonthAbbreviationsStandalone;
    __MonthAbbreviationsStandalone = (uint64_t)v4;

    v2 = (void *)__MonthAbbreviationsStandalone;
  }
  if (objc_msgSend(v2, "count") >= (unint64_t)a1)
  {
    objc_msgSend((id)__MonthAbbreviationsStandalone, "objectAtIndex:", a1 - 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringForDayOfWeekNotStandalone(unsigned int a1)
{
  __CFDateFormatter *v2;
  void *v3;
  void *v4;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (__CFDateFormatter *)_SharedDateFormatter();
  v3 = (void *)CFDateFormatterCopyProperty(v2, (CFDateFormatterKey)*MEMORY[0x1E0C9AFA0]);
  if (objc_msgSend(v3, "count") <= (unint64_t)a1)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndex:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v4;
}

id CUIKWeekdayAbbreviations()
{
  void *v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKWeekdayAbbreviations();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id _CUIKWeekdayAbbreviations()
{
  void *v0;
  __CFDateFormatter *v1;
  CFTypeRef v2;
  void *v3;

  v0 = (void *)__WeekdayAbbreviations;
  if (!__WeekdayAbbreviations)
  {
    v1 = (__CFDateFormatter *)_SharedDateFormatter();
    v2 = CFDateFormatterCopyProperty(v1, (CFDateFormatterKey)*MEMORY[0x1E0C9AF40]);
    v3 = (void *)__WeekdayAbbreviations;
    __WeekdayAbbreviations = (uint64_t)v2;

    v0 = (void *)__WeekdayAbbreviations;
  }
  return v0;
}

id CUIKStringAbbreviationForDayOfWeek(unsigned int a1)
{
  void *v2;
  void *v3;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKWeekdayAbbreviations();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") <= (unint64_t)a1)
  {
    v3 = 0;
  }
  else
  {
    objc_msgSend(v2, "objectAtIndexedSubscript:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v3;
}

id CUIKStringForHourWithoutDesignator(unsigned int a1)
{
  int v2;
  __CFDateFormatter *v3;
  __CFString *v4;
  __CFDateFormatter *v5;
  const void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  __CFString *StringWithAbsoluteTime;
  const void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (!__HourSymbolsWithoutDesignator)
  {
    v2 = __Show24Hours;
    if (!__Show24Hours)
    {
      _CUIKDetermineShortTimeParameters();
      v2 = __Show24Hours;
    }
    if (v2 == 2)
    {
      _initStandardTimeFormatter();
      v3 = (__CFDateFormatter *)__standardTimeFormatter;
      CFRetain((CFTypeRef)__standardTimeFormatter);
      if (!v3)
        goto LABEL_19;
      goto LABEL_14;
    }
    CPDateFormatStringForFormatType();
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = (__CFDateFormatter *)_SharedDateFormatter();
      v3 = v5;
      if (v5)
      {
        CFRetain(v5);
        CFDateFormatterSetFormat(v3, v4);
      }
    }
    else
    {
      v3 = 0;
    }

    if (v3)
    {
LABEL_14:
      v6 = (const void *)CalTimeZoneCopyCFTimeZone();
      v7 = (const __CFString *)*MEMORY[0x1E0C9AF68];
      CFDateFormatterSetProperty(v3, (CFStringRef)*MEMORY[0x1E0C9AF68], v6);
      v8 = 24;
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 24);
      v10 = 0x50B000007D7;
      do
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        StringWithAbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime(0, v3, v11);
        objc_msgSend(v9, "addObject:", StringWithAbsoluteTime);

        v10 += 0x1000000000000;
        --v8;
      }
      while (v8);
      if (v6)
        CFRelease(v6);
      v13 = (const void *)CalCopySystemTimeZone();
      CFDateFormatterSetProperty(v3, v7, v13);
      CFRelease(v13);
      CFRelease(v3);
      v14 = (void *)__HourSymbolsWithoutDesignator;
      __HourSymbolsWithoutDesignator = (uint64_t)v9;

    }
  }
LABEL_19:
  if (a1 == 24)
    v15 = 0;
  else
    v15 = a1;
  objc_msgSend((id)__HourSymbolsWithoutDesignator, "objectAtIndex:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v16;
}

id CUIKStringForDate(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t *v7;
  __CFDateFormatter *v8;
  const __CFLocale *v9;
  __CFDateFormatter *v10;
  const __CFString *v11;
  void *v12;

  v3 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v4 = (void *)CalCopyTimeZone();
  v5 = v3;
  v6 = v4;
  if (a2)
    v7 = &__dateFormatterWithYear;
  else
    v7 = &__dateFormatterWithoutYear;
  v8 = (__CFDateFormatter *)*v7;
  if (!*v7)
  {
    v9 = CFLocaleCopyCurrent();
    v10 = CFDateFormatterCreate(0, v9, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    *v7 = (uint64_t)v10;
    v11 = (const __CFString *)CPDateFormatStringForFormatType();
    CFDateFormatterSetFormat(v10, v11);
    CFRelease(v9);
    v8 = (__CFDateFormatter *)*v7;
  }
  _stringForFormatterInTimeZone(v5, v8, v6, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v12;
}

id CUIKShortStringForDateWithMonthAndYear(void *a1)
{
  uint64_t v1;
  id v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  id v5;
  void *v6;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  v5 = (id)CalCopyTimeZone();
  _stringForFormatterInTimeZone(v2, v3, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

__CFString *CUIKStringForDateWithCommaAndYear(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _initDateFormatterWithCommaAndYear();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)__dateFormatterWithCommaAndYear, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKStringForDateComponents(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t *v7;
  __CFDateFormatter *v8;
  const __CFLocale *v9;
  __CFDateFormatter *v10;
  const __CFString *v11;
  void *v12;
  __CFDateFormatter *v13;
  const __CFString *v14;
  void *v15;
  const __CFDate *v16;
  __CFString *StringWithDate;

  v5 = a1;
  v6 = a2;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (a3)
    v7 = &__dateFormatterWithYear;
  else
    v7 = &__dateFormatterWithoutYear;
  v8 = (__CFDateFormatter *)*v7;
  if (!*v7)
  {
    v9 = CFLocaleCopyCurrent();
    v10 = CFDateFormatterCreate(0, v9, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    *v7 = (uint64_t)v10;
    v11 = (const __CFString *)CPDateFormatStringForFormatType();
    CFDateFormatterSetFormat(v10, v11);
    objc_msgSend(v6, "timeZone");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = (__CFDateFormatter *)*v7;
      v14 = (const __CFString *)*MEMORY[0x1E0C9AF68];
      objc_msgSend(v6, "timeZone");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      CFDateFormatterSetProperty(v13, v14, v15);

    }
    CFRelease(v9);
    v8 = (__CFDateFormatter *)*v7;
  }
  objc_msgSend(v6, "dateFromComponents:", v5);
  v16 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v8, v16);
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return StringWithDate;
}

id CUIKDayOfMonthStringForDate(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0CB3578];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "setDateFormat:", CFSTR("d"));
  objc_msgSend(v3, "stringFromDate:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

__CFString *CUIKShortStringForDay(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _initShortDayFormatter();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)__shortDayFormatter, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKLongStringForWeekday(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

id CUIKStringForMonth(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (void *)__monthNameFormatter;
  if (!__monthNameFormatter)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v4 = (void *)__monthNameFormatter;
    __monthNameFormatter = (uint64_t)v3;

    objc_msgSend((id)__monthNameFormatter, "setDateFormat:", CFSTR("LLL"));
    v5 = (void *)__monthNameFormatter;
    v6 = (void *)CalCopyTimeZone();
    objc_msgSend(v5, "setTimeZone:", v6);

    v2 = (void *)__monthNameFormatter;
  }
  objc_msgSend(v2, "stringFromDate:", v1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v7;
}

id CUIKLongStringForMonth(void *a1)
{
  return CUIKLongStringForMonthWithFormattingContext(a1, 0);
}

id CUIKLongStringForMonthWithFormattingContext(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v4 = (void *)__longMonthNameFormatter;
  if (!__longMonthNameFormatter)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v6 = (void *)__longMonthNameFormatter;
    __longMonthNameFormatter = (uint64_t)v5;

    objc_msgSend((id)__longMonthNameFormatter, "setDateFormat:", CFSTR("LLLL"));
    v7 = (void *)__longMonthNameFormatter;
    v8 = (void *)CalCopyTimeZone();
    objc_msgSend(v7, "setTimeZone:", v8);

    v4 = (void *)__longMonthNameFormatter;
  }
  objc_msgSend(v4, "setFormattingContext:", a2);
  objc_msgSend((id)__longMonthNameFormatter, "stringFromDate:", v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v9;
}

__CFString *CUIKShortStringMonthAndDay(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKAbbreviatedStringMonthAndDay(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

id CUIKStringForDateAndDayOfWeekInTimezone(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  void *v8;

  v5 = RegisterForInvalidation_onceToken;
  v6 = a3;
  v7 = a1;
  if (v5 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKStringForDateAndDayOfWeekInTimezone(v7, a2, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v8;
}

id _CUIKStringForDateAndDayOfWeekInTimezone(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  __CFDateFormatter *v6;
  const __CFString *v7;
  void *v8;

  v4 = a3;
  v5 = a1;
  v6 = (__CFDateFormatter *)_SharedDateFormatter();
  v7 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v6, v7);
  _stringForFormatterInTimeZone(v5, v6, v4, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id CUIKStringForDateAndDayOfWeekSystemTime(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v5 = (void *)CalCopySystemTimeZone();
  _CUIKStringForDateAndDayOfWeekInTimezone(v4, a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringForDateAndDayOfWeekInCalendarTimezone(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v5 = (void *)CalCopyTimeZone();
  _CUIKStringForDateAndDayOfWeekInTimezone(v4, a2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringForDateAndDayOfWeekInCalendarTimezoneWithFormattingContext(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  id v5;
  __CFDateFormatter *v6;
  const __CFString *v7;
  id v8;
  void *v9;

  v4 = RegisterForInvalidation_onceToken;
  v5 = a1;
  if (v4 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v6 = (__CFDateFormatter *)_SharedDateFormatter();
  v7 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v6, v7);
  v8 = (id)CalCopyTimeZone();
  _stringForFormatterInTimeZone(v5, v6, v8, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v9;
}

id CUIKLongDayStringForDateNoYear(void *a1)
{
  uint64_t v1;
  id v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  id v5;
  void *v6;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  v5 = (id)CalCopyTimeZone();
  _stringForFormatterInTimeZone(v2, v3, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKStringMonthDayYearWithComma(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  __CFDateFormatter *v5;
  id v6;

  v1 = a1;
  _initDateFormatterWithCommaAndYear();
  _initLongDateFormatterWithCommaAndYear();
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = 0;
  v3 = __dateFormatterWithCommaAndYear;
  if (__dateFormatterWithCommaAndYear && __longDateFormatterWithCommaAndYear)
  {
    CFDateFormatterGetFormat((CFDateFormatterRef)__dateFormatterWithCommaAndYear);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("[a-zA-Z]+\\U0000200F\\/[a-zA-Z]+\\U0000200F\\/[a-zA-Z]+"), 1024) == 0x7FFFFFFFFFFFFFFFLL)v5 = (__CFDateFormatter *)v3;
    else
      v5 = (__CFDateFormatter *)__longDateFormatterWithCommaAndYear;
    v6 = (id)CalCopyTimeZone();
    _stringForFormatterInTimeZone(v1, v5, v6, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v2;
}

id CUIKLongDayStringForDate(void *a1)
{
  uint64_t v1;
  id v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  id v5;
  void *v6;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  v5 = (id)CalCopyTimeZone();
  _stringForFormatterInTimeZone(v2, v3, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v6;
}

id CUIKLongEmDashDayStringForDate(void *a1, char a2)
{
  id v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = CUIKIsWeekdayNameFirst();
  CUIKCalendar();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "components:fromDate:", 512, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CUIKStringForDayOfWeek(objc_msgSend(v6, "weekday") - 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a2 & 1) != 0)
    CUIKStringMonthDayYearWithComma(v3);
  else
    CUIKAbbreviatedStringMonthAndDay(v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1E0CB3940];
  CUIKBundle();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v4)
  {
    objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("DAY_OF_WEEK_DASH_DAY_STRING_FORMAT"), CFSTR("%@ — %@"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", v12, v7, v8);
  }
  else
  {
    objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("DAY_STRING_DASH_DAY_OF_WEEK_FORMAT"), CFSTR("%@ — %@"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", v12, v8, v7);
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id CUIKAbbreviatedEmDashDayStringForDate(void *a1, char a2)
{
  id v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = CUIKIsWeekdayNameFirst();
  CUIKCalendar();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "components:fromDate:", 512, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CUIKStringAbbreviationForDayOfWeek(objc_msgSend(v6, "weekday") - 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a2 & 1) != 0)
    CUIKStringMonthDayYearWithComma(v3);
  else
    CUIKAbbreviatedStringMonthAndDay(v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1E0CB3940];
  CUIKBundle();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v4)
  {
    objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("DAY_OF_WEEK_DASH_DAY_STRING_FORMAT"), CFSTR("%@ — %@"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", v12, v7, v8);
  }
  else
  {
    objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("DAY_STRING_DASH_DAY_OF_WEEK_FORMAT"), CFSTR("%@ — %@"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", v12, v8, v7);
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

__CFString *CUIKLongDayLongMonthStringForDate(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _initFullDayFormatter();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)__fullDayFormatter, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKStringForDateAndTime(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKLongStringForDateAndTime(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFLocale *Locale;
  const __CFString *DateFormatFromTemplate;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  Locale = CFDateFormatterGetLocale(v3);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("EEE  MMM d, jmm"), 0, Locale);
  CFDateFormatterSetFormat(v3, DateFormatFromTemplate);
  CFRelease(DateFormatFromTemplate);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

__CFString *CUIKStringMonthDayYearTime(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFLocale *Locale;
  const __CFString *DateFormatFromTemplate;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  Locale = CFDateFormatterGetLocale(v3);
  DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("MMM d, yyyy, jmm"), 0, Locale);
  CFDateFormatterSetFormat(v3, DateFormatFromTemplate);
  CFRelease(DateFormatFromTemplate);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

id CUIKShortTZString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  objc_msgSend(v5, "abbreviationForDate:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id CUIKStringForSystemTime(void *a1, char a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v5 = (void *)CalCopySystemTimeZone();
  v6 = _CUIKStringForTimeInTimeZoneWithFormatter(v4, a2, v5, 0);

  v7 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v7;
}

id CUIKStringForGMTTime(void *a1, char a2)
{
  uint64_t v3;
  id v4;
  CFTimeZoneRef v5;
  id v6;
  id v7;

  v3 = RegisterForInvalidation_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v5 = CFTimeZoneCreateWithName(0, CFSTR("GMT"), 1u);
  v6 = _CUIKStringForTimeInTimeZoneWithFormatter(v4, a2, v5, 0);

  v7 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v7;
}

id CUIKStringForTimeWithTZ(void *a1, char a2, void *a3, __CFDateFormatter *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  void *v10;

  v7 = RegisterForInvalidation_onceToken;
  v8 = a3;
  v9 = a1;
  if (v7 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKStringForTimeWithTZ(v9, a2, v8, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v10;
}

id _CUIKStringForTimeWithTZ(void *a1, char a2, void *a3, __CFDateFormatter *a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v7 = (void *)MEMORY[0x1E0CB3940];
  v8 = a3;
  v9 = a1;
  CUIKBundle();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("Time string annotated with short timezone, for instance '4:00PM (PST)'"), CFSTR("%@ (%@)"), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKStringForTimeInTimeZoneWithFormatter(v9, a2, v8, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "abbreviationForDate:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "localizedStringWithFormat:", v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

id CUIKStringForTimeWithTZIfDivergent(void *a1, char a2, __CFDateFormatter *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (_CUIKSystemAndCalendarTimezonesDiverge(v5))
  {
    v6 = (void *)CalCopyTimeZone();
    _CUIKStringForTimeWithTZ(v5, a2, v6, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    _CUIKStringForTimeWithSharedFormatter(v5, a2, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v7;
}

BOOL _CUIKSystemAndCalendarTimezonesDiverge(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = (void *)CalCopySystemTimeZone();
  v3 = (void *)CalCopyTimeZone();
  v4 = _CUIKTimezonesDivergeAtDate(v2, v3, v1);

  return v4;
}

__CFString *CUIKStringForTimeWithoutDesignator(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _initTimeWithoutDesignatorFormatter();
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)__timeWithoutDesignatorFormatter, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

id CUIKDurationStringForDates(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a1;
  v6 = a2;
  v7 = v5;
  v8 = v6;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKStringForTimeWithSharedFormatter(v7, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKStringForTimeWithSharedFormatter(v8, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (_CUIKSystemAndCalendarTimezonesDiverge(v7))
  {
    if ((a3 & 1) != 0)
      _CUIKDurationFormatNoFromWithShortOneTimeZone();
    else
      _CUIKDurationFormatWithShortOneTimeZone();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1E0CB3940];
    v17 = v7;
    v18 = (void *)CalCopyTimeZone();
    objc_msgSend(v18, "abbreviationForDate:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v16, "localizedStringWithValidatedFormat:validFormatSpecifiers:error:", v15, CFSTR("%@%@%@"), 0, v9, v10, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    CUIKBundle();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if ((a3 & 1) != 0)
    {
      v13 = CFSTR("Detail duration format no 'from'");
      v14 = CFSTR("%@ to %@");
    }
    else
    {
      v13 = CFSTR("from %@ to %@");
      v14 = &stru_1E6EBAE30;
    }
    objc_msgSend(v11, "localizedStringForKey:value:table:", v13, v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithValidatedFormat:validFormatSpecifiers:error:", v15, CFSTR("%@%@"), 0, v9, v10);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v20;
}

id CUIKDurationStringForTimeInterval(int a1, void *a2, int a3, int a4, int a5, double a6)
{
  id v11;
  id v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  int v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  const __CFString *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  const __CFString *v48;
  void *v49;
  void *v50;
  void *v51;
  int v53;
  int v54;
  id v55;

  v11 = a2;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v12 = v11;
  v13 = v12;
  v14 = -a6;
  if (a6 >= 0.0)
    v14 = a6;
  if (v14 >= 86400.0)
  {
    v15 = (int)vcvtmd_s64_f64(v14 / 86400.0);
    v14 = v14 - (double)(unint64_t)(86400 * v15);
  }
  else
  {
    v15 = 0;
  }
  if (v14 >= 3600.0)
  {
    v16 = (int)vcvtmd_s64_f64(v14 / 3600.0);
    v14 = v14 - (double)(unint64_t)(3600 * v16);
  }
  else
  {
    v16 = 0;
  }
  if (v14 >= 60.0)
  {
    v17 = (int)vcvtmd_s64_f64(v14 / 60.0);
    v14 = v14 - (double)(unint64_t)(60 * v17);
  }
  else
  {
    v17 = 0;
  }
  v18 = (unint64_t)v14;
  if (v15 || v16 || v17 || v18)
  {
    v55 = v12;
    v53 = a5;
    v54 = a1;
    v21 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    if (v15)
    {
      CUIKBundle();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      v24 = a3;
      if (a3)
        v25 = CFSTR("interval_days_short");
      else
        v25 = CFSTR("interval_days_long");
      objc_msgSend(v22, "localizedStringForKey:value:table:", v25, &stru_1E6EBAE30, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v26, v15);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "appendString:", v27);

      if (!v16)
        goto LABEL_32;
      _CUIKIntervalSeparatorLocalizedString();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "appendString:", v28);

      a3 = v24;
    }
    else if (!v16)
    {
      if (!v17)
      {
        if (!a5)
          goto LABEL_54;
        v24 = a3;
        if (!v18)
          goto LABEL_54;
        goto LABEL_50;
      }
      goto LABEL_42;
    }
    CUIKBundle();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v29;
    v24 = a3;
    if (a3)
      v31 = CFSTR("interval_hours_short");
    else
      v31 = CFSTR("interval_hours_long");
    objc_msgSend(v29, "localizedStringForKey:value:table:", v31, &stru_1E6EBAE30, 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v32, v16);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "appendString:", v33);

LABEL_32:
    if (v15)
      goto LABEL_33;
    if (!v17)
    {
      if (!v53)
        goto LABEL_54;
LABEL_48:
      if (!v18)
        goto LABEL_54;
      _CUIKIntervalSeparatorLocalizedString();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "appendString:", v45);

LABEL_50:
      CUIKBundle();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = v46;
      if (v24)
        v48 = CFSTR("interval_seconds_short");
      else
        v48 = CFSTR("interval_seconds_long");
      objc_msgSend(v46, "localizedStringForKey:value:table:", v48, &stru_1E6EBAE30, 0);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v49, v18);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "appendString:", v50);

      goto LABEL_54;
    }
    _CUIKIntervalSeparatorLocalizedString();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "appendString:", v38);

    a3 = v24;
LABEL_42:
    CUIKBundle();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v40;
    v24 = a3;
    if (a3)
      v42 = CFSTR("interval_minutes_short");
    else
      v42 = CFSTR("interval_minutes_long");
    objc_msgSend(v40, "localizedStringForKey:value:table:", v42, &stru_1E6EBAE30, 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v43, v17);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "appendString:", v44);

    if (!v53)
    {
LABEL_54:
      if (a6 < 0.0 && a4)
      {
        v51 = (void *)MEMORY[0x1E0CB3940];
        CUIKBundle();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "localizedStringForKey:value:table:", CFSTR("%@ before travel time"), &stru_1E6EBAE30, 0);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "localizedStringWithFormat:", v39, v21);
        v20 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_57;
      }
LABEL_33:
      if (!v54)
      {
        v20 = v21;
LABEL_58:
        v13 = v55;

        goto LABEL_59;
      }
      v34 = (void *)MEMORY[0x1E0CB3940];
      CUIKBundle();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      if (a6 >= 0.0)
        v37 = CFSTR("%@ after");
      else
        v37 = CFSTR("%@ before");
      objc_msgSend(v35, "localizedStringForKey:value:table:", v37, &stru_1E6EBAE30, 0);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "stringWithFormat:", v39, v21);
      v20 = (id)objc_claimAutoreleasedReturnValue();
LABEL_57:

      goto LABEL_58;
    }
    goto LABEL_48;
  }
  if (a4)
  {
    CUIKBundle();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("At start of travel time"), &stru_1E6EBAE30, 0);
    v20 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v20 = v12;
  }
LABEL_59:

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v20;
}

id CUIKTimezoneClarificationStringForDates(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v31;
  void *v32;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (v11)
  {
    v13 = v11;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "calendarTimeZone");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = v13;
  if (v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = v15;
  v17 = _CUIKStringForTimeInTimeZoneWithFormatter(v9, 0, v14, 0);
  v18 = _CUIKStringForTimeInTimeZoneWithFormatter(v10, 0, v16, 0);
  v32 = v12;
  if (objc_msgSend(v14, "isEquivalentTo:", v16))
  {
    if (a5)
      _CUIKDurationFormatNoFromWithShortOneTimeZone();
    else
      _CUIKDurationFormatWithShortOneTimeZone();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v14, "abbreviationForDate:", v9);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "localizedStringWithValidatedFormat:validFormatSpecifiers:error:", v22, CFSTR("%@%@%@"), 0, v17, v18, v24);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    CUIKBundle();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (a5)
      v21 = CFSTR("%@ (%@) to %@ (%@)");
    else
      v21 = CFSTR("from %@ (%@) to %@ (%@)");
    objc_msgSend(v19, "localizedStringForKey:value:table:", v21, &stru_1E6EBAE30, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v14, "abbreviationForDate:", v9);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "abbreviationForDate:", v10);
    v31 = v11;
    v25 = v9;
    v26 = v10;
    v27 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "localizedStringWithValidatedFormat:validFormatSpecifiers:error:", v22, CFSTR("%@%@%@%@"), 0, v17, v24, v18, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = v17;
    v17 = (id)v27;
    v10 = v26;
    v9 = v25;
    v11 = v31;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v28;
}

id _CUIKDurationFormatNoFromWithShortOneTimeZone()
{
  void *v0;
  void *v1;

  CUIKBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("%@ to %@ (%@)"), &stru_1E6EBAE30, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id _CUIKDurationFormatWithShortOneTimeZone()
{
  void *v0;
  void *v1;

  CUIKBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("from %@ to %@ (%@)"), &stru_1E6EBAE30, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id CUIKTimeIntervalStringForDates(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  const __CFString *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v5 = __Show24Hours;
  if (!__Show24Hours)
  {
    _CUIKDetermineShortTimeParameters();
    v5 = __Show24Hours;
  }
  if (v5 == 2)
    v6 = CFSTR("Hm");
  else
    v6 = CFSTR("jm");
  v7 = (void *)__intervalFormatters;
  if (!__intervalFormatters)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = (void *)__intervalFormatters;
    __intervalFormatters = (uint64_t)v8;

    v7 = (void *)__intervalFormatters;
  }
  objc_msgSend(v7, "objectForKey:", v6);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0CB3590]);
    objc_msgSend(v10, "setDateTemplate:", v6);
    objc_msgSend((id)__intervalFormatters, "setObject:forKey:", v10, v6);
  }
  objc_msgSend(v10, "stringFromDate:toDate:", v3, v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v11;
}

__CFString *CUIKStringForWeekdayNoYear(void *a1)
{
  uint64_t v1;
  const __CFDate *v2;
  __CFDateFormatter *v3;
  const __CFString *v4;
  __CFString *StringWithDate;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = (__CFDateFormatter *)_SharedDateFormatter();
  v4 = (const __CFString *)CPDateFormatStringForFormatType();
  CFDateFormatterSetFormat(v3, v4);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v3, v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return StringWithDate;
}

id CUIKStringForMonthYear(void *a1)
{
  return CUIKStringForMonthYearWithFormattingContext(a1, 0);
}

id CUIKStringForMonthYearWithFormattingContext(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v4 = (void *)__monthYearFormatter;
  if (!__monthYearFormatter)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v6 = (void *)__monthYearFormatter;
    __monthYearFormatter = (uint64_t)v5;

    v7 = (void *)__monthYearFormatter;
    CPDateFormatStringForFormatType();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDateFormat:", v8);

    v9 = (void *)__monthYearFormatter;
    v10 = (void *)CalCopyTimeZone();
    objc_msgSend(v9, "setTimeZone:", v10);

    v4 = (void *)__monthYearFormatter;
  }
  objc_msgSend(v4, "setFormattingContext:", a2);
  objc_msgSend((id)__monthYearFormatter, "stringFromDate:", v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v11;
}

id CUIKShortStringForMonthYear(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (!__monthYearShortFormatString)
  {
    v2 = (void *)MEMORY[0x1E0CB3578];
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateFormatFromTemplate:options:locale:", CFSTR("MMMy"), 0, v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)__monthYearShortFormatString;
    __monthYearShortFormatString = v4;

    v6 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v7 = (void *)CUIKShortStringForMonthYear__shortMonthYearFormatter;
    CUIKShortStringForMonthYear__shortMonthYearFormatter = (uint64_t)v6;

    objc_msgSend((id)CUIKShortStringForMonthYear__shortMonthYearFormatter, "setDateFormat:", __monthYearShortFormatString);
    v8 = (void *)CUIKShortStringForMonthYear__shortMonthYearFormatter;
    v9 = (void *)CalCopyTimeZone();
    objc_msgSend(v8, "setTimeZone:", v9);

  }
  objc_msgSend((id)CUIKShortStringForMonthYear__shortMonthYearFormatter, "stringFromDate:", v1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v10;
}

__CFString *CUIKVeryShortStringForMonthYear(void *a1)
{
  const __CFDate *v1;
  __CFDateFormatter *v2;
  const __CFString *v3;
  const __CFLocale *v4;
  __CFString *StringWithDate;

  v1 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (__CFDateFormatter *)_SharedDateFormatter();
  v3 = (const __CFString *)__monthYearVeryShortFormatString;
  if (!__monthYearVeryShortFormatString)
  {
    v4 = CFLocaleCopyCurrent();
    __monthYearVeryShortFormatString = (uint64_t)CFDateFormatterCreateDateFormatFromTemplate(0, CFSTR("My"), 0, v4);
    CFRelease(v4);
    v3 = (const __CFString *)__monthYearVeryShortFormatString;
  }
  CFDateFormatterSetFormat(v2, v3);
  StringWithDate = (__CFString *)CFDateFormatterCreateStringWithDate(0, v2, v1);
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return StringWithDate;
}

void CUIKGetHourDesignators(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  __CFDateFormatter *v5;
  CFTypeRef v6;
  void *v7;
  void *v8;
  __CFDateFormatter *v9;
  CFTypeRef v10;
  void *v11;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if (a1)
  {
    v4 = (void *)__AMDesignator;
    if (!__AMDesignator)
    {
      v5 = (__CFDateFormatter *)_SharedDateFormatter();
      v6 = CFDateFormatterCopyProperty(v5, (CFDateFormatterKey)*MEMORY[0x1E0C9AEC8]);
      v7 = (void *)__AMDesignator;
      __AMDesignator = (uint64_t)v6;

      v4 = (void *)__AMDesignator;
    }
    *a1 = objc_retainAutorelease(v4);
  }
  if (a2)
  {
    v8 = (void *)__PMDesignator;
    if (!__PMDesignator)
    {
      v9 = (__CFDateFormatter *)_SharedDateFormatter();
      v10 = CFDateFormatterCopyProperty(v9, (CFDateFormatterKey)*MEMORY[0x1E0C9AF10]);
      v11 = (void *)__PMDesignator;
      __PMDesignator = (uint64_t)v10;

      v8 = (void *)__PMDesignator;
    }
    *a2 = objc_retainAutorelease(v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
}

void CUIKInvalidateToday()
{
  void *v0;
  void *v1;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = (void *)__TodayComponents;
  __TodayComponents = 0;

  v1 = (void *)__TodayDate;
  __TodayDate = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
}

uint64_t CUIKInvalidateTodayAndDetermineIfChanged()
{
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  return objc_msgSend((id)__todayInvalidationTimerWrapper, "todayChangedAfterInvalidation");
}

id CUIKNowComponentsSystemTime()
{
  void *v0;
  void *v1;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKNowComponentsInCalendar(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v1;
}

uint64_t CUIKNSDateIsToday(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKCalendar();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKTodayDate();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 30, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 30, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "isEqual:", v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v7;
}

uint64_t CUIKNSDateIsThisYear(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = RegisterForInvalidation_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKCalendar();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKTodayDate();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 6, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 6, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "isEqual:", v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v7;
}

uint64_t CUIKNumberOfSecondsForCurrentTime()
{
  void *v0;
  double v1;
  double v2;
  void *v3;
  double v4;
  double v5;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKTodayDate();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "timeIntervalSinceReferenceDate");
  v2 = v1;

  _CUIKNowDate();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "timeIntervalSinceReferenceDate");
  v5 = v4;

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return (int)(v5 - v2);
}

BOOL CUIKSpaceBetweenDesignatorsAndHour()
{
  int v0;
  _BOOL8 v1;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = __SpaceAroundDesignator;
  if (!__SpaceAroundDesignator)
  {
    _CUIKDetermineShortTimeParameters();
    v0 = __SpaceAroundDesignator;
  }
  v1 = v0 == 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v1;
}

uint64_t CUIKZeroIndexedWeekStart()
{
  return CUIKOneIndexedWeekStart() - 1;
}

uint64_t CUIKOneIndexedWeekStart()
{
  uint64_t v0;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  if ((__isWeekStartValid & 1) == 0)
    _CUIKDetermineWeekStart();
  v0 = __weekStart;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v0;
}

id CUIKLocalizedStringForIntegerWithMinimumTwoDigits(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v2 = (void *)__numberFormatterWithTwoDigitsMinimum;
  if (!__numberFormatterWithTwoDigitsMinimum)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    v4 = (void *)__numberFormatterWithTwoDigitsMinimum;
    __numberFormatterWithTwoDigitsMinimum = (uint64_t)v3;

    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)__numberFormatterWithTwoDigitsMinimum, "setLocale:", v5);

    objc_msgSend((id)__numberFormatterWithTwoDigitsMinimum, "setMinimumIntegerDigits:", 2);
    v2 = (void *)__numberFormatterWithTwoDigitsMinimum;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringFromNumber:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v7;
}

void CUIKGetDefaultStartAndEndTimeForDate(void *a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  id v13;
  id v14;

  v14 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKCalendar();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKNowComponents();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "components:fromDate:", 254, v14);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setHour:", objc_msgSend(v6, "hour"));
  objc_msgSend(v7, "setMinute:", 0);
  objc_msgSend(v7, "setSecond:", 0);
  objc_msgSend(v5, "dateFromComponents:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a2)
    *a2 = objc_retainAutorelease(v8);
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0D0C2F8], "shared");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "defaultEventDuration");
    v12 = v11;

    objc_msgSend(v9, "dateByAddingTimeInterval:", v12);
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *a3 = v13;

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

}

id CUIKGetDefaultTimeForDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = a1;
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKCalendar();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _CUIKNowComponents();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "components:fromDate:", 254, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E80], "calendarTimeZone");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateForStartOfDayInTimeZone:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dateForStartOfDayInTimeZone:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setHour:", objc_msgSend(v3, "hour"));
  objc_msgSend(v4, "setMinute:", 0);
  objc_msgSend(v4, "setSecond:", 0);
  if (objc_msgSend(v6, "isEqualToDate:", v8))
  {
    objc_msgSend(v4, "setHour:", objc_msgSend(v3, "hour") + 1);
    objc_msgSend(v2, "dateFromComponents:", v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "dateForStartOfDayInTimeZone:", v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v10, "isEqualToDate:", v8) & 1) == 0)
      objc_msgSend(v4, "setHour:", objc_msgSend(v3, "hour"));

  }
  objc_msgSend(v2, "dateFromComponents:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

  return v11;
}

void CUIKGetWeekendDays(_DWORD *a1, _DWORD *a2)
{
  if (RegisterForInvalidation_onceToken != -1)
    dispatch_once(&RegisterForInvalidation_onceToken, &__block_literal_global_147);
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  _CUIKFindWeekendsIfNeeded();
  if (a1)
    *a1 = __weekendDays;
  if (a2)
    *a2 = HIDWORD(__weekendDays);
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
}

void InvalidateFormatter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  ++__calendarGeneration;
  ++__overlayCalendarGeneration;
  if (__formatter)
  {
    CFRelease((CFTypeRef)__formatter);
    __formatter = 0;
  }
  if (__standardTimeFormatter)
  {
    CFRelease((CFTypeRef)__standardTimeFormatter);
    __standardTimeFormatter = 0;
  }
  if (__shortDayFormatter)
  {
    CFRelease((CFTypeRef)__shortDayFormatter);
    __shortDayFormatter = 0;
  }
  if (__fullDayFormatter)
  {
    CFRelease((CFTypeRef)__fullDayFormatter);
    __fullDayFormatter = 0;
  }
  if (__numberFormatter)
  {
    CFRelease((CFTypeRef)__numberFormatter);
    __numberFormatter = 0;
  }
  v0 = (void *)__numberFormatterWithTwoDigitsMinimum;
  if (__numberFormatterWithTwoDigitsMinimum)
  {
    __numberFormatterWithTwoDigitsMinimum = 0;

  }
  if (__dateFormatterWithYear)
  {
    CFRelease((CFTypeRef)__dateFormatterWithYear);
    __dateFormatterWithYear = 0;
  }
  if (__dateFormatterWithoutYear)
  {
    CFRelease((CFTypeRef)__dateFormatterWithoutYear);
    __dateFormatterWithoutYear = 0;
  }
  if (__dateFormatterWithCommaAndYear)
  {
    CFRelease((CFTypeRef)__dateFormatterWithCommaAndYear);
    __dateFormatterWithCommaAndYear = 0;
  }
  if (__longDateFormatterWithCommaAndYear)
  {
    CFRelease((CFTypeRef)__longDateFormatterWithCommaAndYear);
    __longDateFormatterWithCommaAndYear = 0;
  }
  if (__timeWithoutDesignatorFormatter)
  {
    CFRelease((CFTypeRef)__timeWithoutDesignatorFormatter);
    __timeWithoutDesignatorFormatter = 0;
  }
  v1 = (void *)__MonthAbbreviationsStandalone;
  __MonthAbbreviationsStandalone = 0;

  v2 = (void *)__MonthVeryShortAbbreviationsStandalone;
  __MonthVeryShortAbbreviationsStandalone = 0;

  v3 = (void *)__MonthNames;
  __MonthNames = 0;

  v4 = (void *)__WeekdayAbbreviations;
  __WeekdayAbbreviations = 0;

  v5 = (void *)__WeekdayVeryShortAbbreviations;
  __WeekdayVeryShortAbbreviations = 0;

  v6 = (void *)__HourSymbols;
  __HourSymbols = 0;

  v7 = (void *)__HourSymbolsWithoutDesignator;
  __HourSymbolsWithoutDesignator = 0;

  v8 = (void *)__PMDesignator;
  __PMDesignator = 0;

  v9 = (void *)__AMDesignator;
  __AMDesignator = 0;

  v10 = (void *)__intervalFormatters;
  __intervalFormatters = 0;

  v11 = (void *)__dateFormattersForTimeZones;
  __dateFormattersForTimeZones = 0;

  v12 = 0;
  __DesignatorsBeforeHour = 0;
  __Show24Hours = 0;
  __SpaceAroundDesignator = 0;
  __IsWeekdayNameFirst = 0;
  __IsLocaleRightToLeft = 0;
  v13 = __localizedIntStringLoadFlags;
  do
  {
    if (((v13 << v12) & 1) != 0)
    {
      v14 = __localizedIntStrings[v12];
      __localizedIntStrings[v12] = 0;

      v13 = __localizedIntStringLoadFlags;
    }
    ++v12;
  }
  while (v12 != 32);
  __localizedIntStringLoadFlags = 0;
  v15 = (void *)__monthYearShortFormatString;
  __monthYearShortFormatString = 0;

  __monthYearVeryShortFormatString = 0;
  v16 = (void *)__monthNameFormatter;
  __monthNameFormatter = 0;

  v17 = (void *)__longMonthNameFormatter;
  __longMonthNameFormatter = 0;

  v18 = (void *)__monthYearFormatter;
  __monthYearFormatter = 0;

  v19 = (void *)__languagesRequiringUnabbreviatedMonthNames;
  __languagesRequiringUnabbreviatedMonthNames = 0;

  __isWeekStartValid = 0;
  __areWeekendDaysValid = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  objc_msgSend((id)__todayInvalidationTimerWrapper, "invalidateTodayAndNotifyIfChanged");
  objc_msgSend(MEMORY[0x1E0D0C2B0], "rebuildFormatters");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "postNotificationName:object:", CFSTR("CalLocaleChangedNotification"), 0);

}

id _CUIKIntervalSeparatorLocalizedString()
{
  void *v0;
  void *v1;

  CUIKBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR(", "), &stru_1E6EBAE30, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1B8AC17E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location, id *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a72;
  id *v72;
  id *v73;
  id *v74;
  uint64_t v75;

  objc_destroyWeak(v72);
  objc_destroyWeak(location);
  _Block_object_dispose(&a60, 8);
  objc_destroyWeak(v73);
  _Block_object_dispose(&a66, 8);
  objc_destroyWeak(v74);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose((const void *)(v75 - 160), 8);
  objc_destroyWeak(a16);
  objc_destroyWeak((id *)(v75 - 200));
  _Block_object_dispose((const void *)(v75 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

uint64_t CUIKParticipantDisplaySort(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  void *v36;
  void *v37;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Event"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Organizer"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v5;
  v11 = v6;
  if ((objc_msgSend(v9, "isEqualToParticipant:", v10) & 1) != 0)
  {
    v12 = -1;
    goto LABEL_23;
  }
  if ((objc_msgSend(v9, "isEqualToParticipant:", v11) & 1) != 0)
  {
    v12 = 1;
    goto LABEL_23;
  }
  +[CUIKAttendeeHeuristics _participantRoleSortPriority](CUIKAttendeeHeuristics, "_participantRoleSortPriority");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v10, "participantRole"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKeyedSubscript:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v11, "participantRole"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v13;
  objc_msgSend(v13, "objectForKeyedSubscript:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "integerValue");

  if (v16 != v19)
  {
    if (v16 < v19)
      v12 = -1;
    else
      v12 = 1;
LABEL_22:

    goto LABEL_23;
  }
  +[CUIKAttendeeHeuristics _participantStatusSortPriority](CUIKAttendeeHeuristics, "_participantStatusSortPriority");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v10, "participantStatus"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKeyedSubscript:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v22, "integerValue");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v11, "participantStatus"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKeyedSubscript:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "integerValue");

  if (v35 < v25)
    v12 = -1;
  else
    v12 = 1;
  if (v35 != v25)
    goto LABEL_22;

  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("DisplayNameCache"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "URL");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "absoluteString");
  v28 = objc_claimAutoreleasedReturnValue();

  if (!v28
    || (objc_msgSend(v26, "objectForKeyedSubscript:", v28), (v29 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    +[CUIKAttendeeDescriptionGenerator displayNameForParticipant:event:options:](CUIKAttendeeDescriptionGenerator, "displayNameForParticipant:event:options:", v10, v8, 0, v35);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28)
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v29, v28);
  }
  v30 = (void *)v28;
  objc_msgSend(v11, "URL", v35);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "absoluteString");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v32
    || (objc_msgSend(v26, "objectForKeyedSubscript:", v32), (v33 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    +[CUIKAttendeeDescriptionGenerator displayNameForParticipant:event:options:](CUIKAttendeeDescriptionGenerator, "displayNameForParticipant:event:options:", v11, v8, 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v32)
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v33, v32);
  }
  v37 = v26;
  v12 = objc_msgSend(v29, "compare:options:", v33, 65);

LABEL_23:
  return v12;
}

void sub_1B8ACDFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Block_object_dispose((const void *)(v37 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

double CUIKScreenScale()
{
  void *v0;
  double v1;
  double v2;

  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "scale");
  v2 = v1;

  return v2;
}

double CUIKFloatFloorForScale(double a1, double a2)
{
  if (fabs(a2) < 2.22044605e-16)
    a2 = CUIKScreenScale();
  return floor(a2 * a1) / a2;
}

void sub_1B8AD128C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

const char *OUTLINED_FUNCTION_4_2(UErrorCode *a1)
{
  return u_errorName(*a1);
}

CGImageRef CUIKCreateStripedImage(CGColor *a1, CGColor *a2, CGFloat a3)
{
  double Width;
  double Height;
  CGContext *v8;
  CGFloat v9;
  CGImageRef Image;
  CGPoint v12[6];
  uint64_t v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v13 = *MEMORY[0x1E0C80C00];
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 9.0;
  v14.size.height = 9.0;
  Width = CGRectGetWidth(v14);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = 9.0;
  v15.size.height = 9.0;
  Height = CGRectGetHeight(v15);
  if (_GetGenericRGBColorSpace_onceToken != -1)
    dispatch_once(&_GetGenericRGBColorSpace_onceToken, &__block_literal_global_32);
  v8 = CGBitmapContextCreate(0, (unint64_t)(Width * a3), (unint64_t)(Height * a3), 8uLL, 0, (CGColorSpaceRef)_GetGenericRGBColorSpace_genericRGBColorSpace, 2u);
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = 9.0;
  v16.size.height = 9.0;
  v9 = CGRectGetHeight(v16);
  CGContextTranslateCTM(v8, 0.0, v9 * a3);
  CGContextScaleCTM(v8, a3, -a3);
  CGContextSetFillColorWithColor(v8, a1);
  v17.origin.x = 0.0;
  v17.origin.y = 0.0;
  v17.size.width = 9.0;
  v17.size.height = 9.0;
  CGContextFillRect(v8, v17);
  CGContextSetLineWidth(v8, 3.0);
  CGContextSetStrokeColorWithColor(v8, a2);
  v12[0] = (CGPoint)xmmword_1B8BA49D0;
  v12[1] = (CGPoint)xmmword_1B8BA49E0;
  v12[2] = (CGPoint)xmmword_1B8BA49F0;
  v12[3] = (CGPoint)xmmword_1B8BA4A00;
  v12[4] = (CGPoint)xmmword_1B8BA4A10;
  v12[5] = (CGPoint)xmmword_1B8BA4A20;
  CGContextStrokeLineSegments(v8, v12, 6uLL);
  CGContextFlush(v8);
  Image = CGBitmapContextCreateImage(v8);
  CGContextRelease(v8);
  return Image;
}

id CUIKCreateStripedUIImage(void *a1, void *a2, CGFloat a3)
{
  id v5;
  id v6;
  CGColor *v7;
  id v8;
  CGColor *v9;
  CGImageRef v10;
  void *v11;

  v5 = objc_retainAutorelease(a1);
  v6 = a2;
  v7 = (CGColor *)objc_msgSend(v5, "CGColor");
  v8 = objc_retainAutorelease(v6);
  v9 = (CGColor *)objc_msgSend(v8, "CGColor");

  v10 = CUIKCreateStripedImage(v7, v9, a3);
  objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", v10, 0, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  CFRelease(v10);
  return v11;
}

uint64_t CUIKRecurrenceFrequencyForRepeatType(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 3)
    return 0;
  else
    return qword_1B8BA4A40[a1 - 2];
}

uint64_t CUIKIntervalForRepeatType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return 0;
  else
    return qword_1B8BA4A60[a1 - 1];
}

id CUIKStringForRepeatType(unint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  CUIKBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 > 6)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v2, "localizedStringForKey:value:table:", off_1E6EB78B8[a1], &stru_1E6EBAE30, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

id CUIKStringForRepeatTypeDetail(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  void *v6;

  CUIKBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  switch(a1)
  {
    case 0:
      v4 = CFSTR("Never - repeat type detail");
      v5 = CFSTR("Never");
      goto LABEL_10;
    case 1:
      v4 = CFSTR("Every Day");
      goto LABEL_9;
    case 2:
      v4 = CFSTR("Every Week");
      goto LABEL_9;
    case 3:
      v4 = CFSTR("Every 2 Weeks");
      goto LABEL_9;
    case 4:
      v4 = CFSTR("Every Month");
      goto LABEL_9;
    case 5:
      v4 = CFSTR("Every Year");
LABEL_9:
      v5 = &stru_1E6EBAE30;
      goto LABEL_10;
    case 6:
      v4 = CFSTR("Custom - repeat type detail");
      v5 = CFSTR("Custom");
LABEL_10:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, v5, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v6 = 0;
      break;
  }

  return v6;
}

void CUIKGetTypeAndEndDateForRecurrenceRules(void *a1, void *a2, void *a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;

  v48 = a1;
  v10 = a2;
  v11 = a3;
  v12 = objc_msgSend(v48, "count");
  v13 = v12;
  if (!v12)
  {
    v18 = 0;
    if (!a5)
      goto LABEL_77;
    goto LABEL_76;
  }
  if (v12 != 1)
  {
    v18 = 0;
    v13 = 6;
    if (!a5)
      goto LABEL_77;
LABEL_76:
    *a5 = v13;
    goto LABEL_77;
  }
  objc_msgSend(v48, "objectAtIndex:", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "recurrenceEnd");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "occurrenceCount");

  objc_msgSend(v14, "monthsOfTheYear");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v13 = 6;
    goto LABEL_71;
  }
  objc_msgSend(v14, "daysOfTheWeek");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "count");
  v21 = objc_msgSend(v14, "interval");
  switch(objc_msgSend(v14, "frequency"))
  {
    case 0:
      v13 = 6;
      if (v21 == 1 && !v20)
      {
        if (objc_msgSend(v17, "count"))
          goto LABEL_45;
        objc_msgSend(v14, "daysOfTheMonth");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v22, "count"))
          v13 = 6;
        else
          v13 = 1;
        goto LABEL_69;
      }
      goto LABEL_70;
    case 1:
      if ((unint64_t)(v21 - 1) > 1 || objc_msgSend(v17, "count"))
        goto LABEL_45;
      objc_msgSend(v14, "setPositions");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v45, "count")
        || v20 && (v20 != 1 || !CUIKRecurrenceDateMatchesAnyDaySpecifiedInByDayList(v19, v10, v11)))
      {
        v13 = 6;
      }
      else if (v21 == 1)
      {
        v13 = 2;
      }
      else
      {
        v13 = 3;
      }
      v22 = v45;
      goto LABEL_69;
    case 2:
      v13 = 6;
      if (v21 != 1 || v20)
        goto LABEL_70;
      if (objc_msgSend(v17, "count"))
        goto LABEL_45;
      objc_msgSend(v14, "daysOfTheMonth");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "count");
      v46 = v23;
      v25 = CUIKRecurrenceDateMatchesAnyDaySpecifiedInByMonthDayList(v23, v10, v11);
      v26 = v25;
      if (v24 == 1)
        v27 = v25;
      else
        v27 = 0;
      objc_msgSend(v14, "setPositions");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v44, "count"))
        goto LABEL_30;
      v42 = v26;
      v43 = v27;
      objc_msgSend(v44, "objectAtIndex:", 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v28, "integerValue");

      if (v29 == -1)
      {
        if (v42)
          v13 = 4;
        else
          v13 = 6;
        goto LABEL_58;
      }
      v27 = v43;
      if (v29)
        goto LABEL_46;
LABEL_30:
      if (v24)
        v30 = v27;
      else
        v30 = 1;
      if (v30 != 1)
      {
LABEL_46:
        v13 = 6;
        goto LABEL_58;
      }
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setTimeZone:", v11);
      objc_msgSend(v31, "components:fromDate:", 16, v10);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "day");

      if ((unint64_t)(v33 - 29) >= 3)
        v13 = 4;
      else
        v13 = 6;

LABEL_58:
      v22 = v46;

LABEL_69:
LABEL_70:

LABEL_71:
      objc_msgSend(v14, "recurrenceEnd");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = v40;
      if (v40)
      {
        objc_msgSend(v40, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          objc_msgSend(v41, "endDate");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        v18 = 0;
      }

      if (a5)
        goto LABEL_76;
LABEL_77:
      if (a6)
        *a6 = objc_retainAutorelease(v18);

      return;
    case 3:
      v34 = objc_msgSend(v17, "count");
      v13 = 6;
      if (v21 != 1 || v20)
        goto LABEL_70;
      if (v34 && (v34 != 1 || !CUIKRecurrenceMonthMatchesAnyMonthSpecifiedInByMonthList(v17, v10, v11)))
      {
LABEL_45:
        v13 = 6;
        goto LABEL_70;
      }
      objc_msgSend(v14, "daysOfTheYear");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v22, "count"))
      {
        v13 = 6;
      }
      else
      {
        objc_msgSend(v14, "setPositions");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v35, "count"))
        {
          v13 = 6;
        }
        else
        {
          v47 = v22;
          objc_msgSend(v14, "weeksOfTheYear");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v36, "count"))
          {
            v13 = 6;
          }
          else
          {
            objc_msgSend(v14, "daysOfTheMonth");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v37, "count");
            if (!v38
              || v38 == 1 && CUIKRecurrenceDateMatchesAnyDaySpecifiedInByMonthDayList(v37, v10, v11))
            {
              v39 = v37;
              v13 = 5;
            }
            else
            {
              v39 = v37;
              v13 = 6;
            }

          }
          v22 = v47;
        }

      }
      goto LABEL_69;
    default:
      goto LABEL_45;
  }
}

void sub_1B8AD3D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1B8AD4570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8AD4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

id CUIKUserFriendlyStringForCLLocation(void *a1)
{
  id v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = a1;
  objc_msgSend(v1, "coordinate");
  CreateCoordinateComponentString(1, v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "coordinate");
  v6 = v5;
  v8 = v7;

  CreateCoordinateComponentString(0, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB3940];
  CUIKBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("%@, %@"), &stru_1E6EBAE30, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "localizedStringWithFormat:", v12, v4, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id CreateCoordinateComponentString(int a1, double a2, double a3)
{
  uint64_t v4;
  BOOL v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;

  if (!a1)
    a2 = a3;
  v4 = (uint64_t)(a2 * 3600.0);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = CFSTR("N");
  else
    v6 = CFSTR("S");
  v7 = CFSTR("E");
  if (v5)
    v7 = CFSTR("W");
  if (a1)
    v8 = v6;
  else
    v8 = v7;
  CUIKBundle();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "localizedStringForKey:value:table:", v8, &stru_1E6EBAE30, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (uint64_t)a2;
  v12 = fabs((a2 - (double)(uint64_t)a2) * 60.0);
  v13 = (uint64_t)v12;
  v14 = (double)(uint64_t)((v12 - (double)(uint64_t)v12) * 60.0);
  if (v11 >= 0)
    v15 = v11;
  else
    v15 = -v11;

  v16 = objc_retainAutorelease(v10);
  v17 = v16;
  v18 = objc_alloc(MEMORY[0x1E0CB3940]);
  CUIKBundle();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("%ld°%ld'%.0f'' %@"), &stru_1E6EBAE30, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_msgSend(v18, "initWithFormat:", v20, v15, v13, *(_QWORD *)&v14, v17, 0);

  return v21;
}

id CUIKImageForAttributes(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0CC17D0];
  v2 = a1;
  objc_msgSend(v1, "imageForStyle:size:forScale:format:", v2, 3, 0, _scaleFactor());
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id CUIKMapPinImage()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0D270A8], "markerStyleAttributes");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CC17D0], "imageForStyle:size:forScale:format:", v0, 4, 0, _scaleFactor());
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id CUIKImageForMapItem(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0CC17D0];
  v2 = a1;
  objc_msgSend(v1, "imageForMapItem:forScale:fallbackToBundleIcon:", v2, 0, _scaleFactor());
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    CUIKMapPinImage();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

double _scaleFactor()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "displayScale");
  v3 = v2;

  return v3;
}

void sub_1B8AD7694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B8AD7780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B8AD7E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

BOOL sub_1B8AD942C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1B8AD943C()
{
  return sub_1B8B9C974();
}

uint64_t sub_1B8AD9460(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E657265666E6F63 && a2 == 0xEE006D6F6F526563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B8AD9574()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AD95B8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E657265666E6F63;
  else
    return 0x6E6F697461636F6CLL;
}

BOOL sub_1B8AD95FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B8AD942C(*a1, *a2);
}

uint64_t sub_1B8AD9614()
{
  return sub_1B8AD9574();
}

uint64_t sub_1B8AD9628()
{
  return sub_1B8AD943C();
}

uint64_t sub_1B8AD963C()
{
  sub_1B8B9C968();
  sub_1B8AD943C();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AD9684()
{
  char *v0;

  return sub_1B8AD95B8(*v0);
}

uint64_t sub_1B8AD9698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AD9460(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8AD96C8()
{
  return 0;
}

uint64_t sub_1B8AD96D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B8ADC26C();
  *a1 = result;
  return result;
}

uint64_t sub_1B8AD9704(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5C48, a1);
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AD9738(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5C48, a1);
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8AD976C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B8AD97D8()
{
  return 1;
}

uint64_t sub_1B8AD97E8()
{
  return 12383;
}

uint64_t sub_1B8AD97F8@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_1B8AD994C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B8ADC3CC, a2);
}

uint64_t sub_1B8AD9804(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5CE8, a1);
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AD9838(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5CE8, a1);
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8AD986C()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AD98AC()
{
  return sub_1B8B9C974();
}

uint64_t sub_1B8AD98D0()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AD990C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AD976C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B8AD9940@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_1B8AD994C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B8AD97D8, a2);
}

uint64_t sub_1B8AD994C@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B8AD9984(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5C98, a1);
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AD99B8(uint64_t a1)
{
  MEMORY[0x1BCCB79D0](&unk_1B8BA5C98, a1);
  return sub_1B8B9C9EC();
}

void static EventRecentLocation<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[14];

  v16[3] = a6;
  v16[4] = a8;
  v16[8] = a1;
  v16[9] = a2;
  v16[7] = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v16[2] = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[6] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v16[1] = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[10] = v12;
  v16[11] = v13;
  v16[12] = v14;
  v16[13] = v15;
  type metadata accessor for EventRecentLocation();
}

uint64_t sub_1B8AD9A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[96];

  v4 = a1;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v25[-v9];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v14 = &v25[-v13];
  v15 = &v25[*(int *)(v12 + 48) - v13];
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v16(&v25[-v13], *(_BYTE **)(v3 - 128), v4);
  v16(v15, *(_BYTE **)(v3 - 120), v4);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v16(v10, v14, v4);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v21 = *(_QWORD *)(v3 - 144);
      v22 = *(_QWORD *)(v3 - 184);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v21 + 32))(v22, v15, v2);
      v19 = sub_1B8B9C0EC();
      v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v23(v22, v2);
      v23((uint64_t)v10, v2);
      goto LABEL_9;
    }
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v10, v2);
    goto LABEL_7;
  }
  v16(v8, v14, v4);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v8, v1);
LABEL_7:
    v19 = 0;
    v5 = *(_QWORD *)(v3 - 152);
    v4 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(v3 - 136);
  v18 = *(_QWORD *)(v3 - 176);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(v18, v15, v1);
  v19 = sub_1B8B9C0EC();
  v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v20(v18, v1);
  v20((uint64_t)v8, v1);
LABEL_9:
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
  return v19 & 1;
}

void type metadata accessor for EventRecentLocation()
{
  JUMPOUT(0x1BCCB7934);
}

void sub_1B8AD9CD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static EventRecentLocation<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8), a3[5], *(_QWORD *)(a4 - 16));
}

uint64_t EventRecentLocation<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v7);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v17, v5);
    sub_1B8B9C974();
    sub_1B8B9C0C8();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    sub_1B8B9C974();
    sub_1B8B9C0C8();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t EventRecentLocation<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[72];

  sub_1B8B9C968();
  EventRecentLocation<>.hash(into:)((uint64_t)v7, a1, a2, a3);
  return sub_1B8B9C998();
}

uint64_t sub_1B8AD9ECC(uint64_t a1, uint64_t a2)
{
  return EventRecentLocation<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t sub_1B8AD9ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EventRecentLocation<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t sub_1B8AD9EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *(_QWORD *)(a3 - 16);
  v4 = *(_QWORD *)(a3 - 8);
  sub_1B8B9C968();
  EventRecentLocation<>.hash(into:)((uint64_t)v7, a2, v4, v5);
  return sub_1B8B9C998();
}

void EventRecentLocation<>.encode(to:)()
{
  type metadata accessor for EventRecentLocation.ConferenceRoomCodingKeys();
}

void sub_1B8AD9F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v13 - 232) = MEMORY[0x1BCCB79D0](&unk_1B8BA5CE8, a1);
  *(_QWORD *)(v13 - 224) = a1;
  v15 = sub_1B8B9C8B4();
  *(_QWORD *)(v13 - 176) = v15;
  *(_QWORD *)(v13 - 200) = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 216) = (char *)&a9 - v17;
  *(_QWORD *)(v13 - 192) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 208) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 120) = v12;
  *(_QWORD *)(v13 - 112) = v10;
  *(_QWORD *)(v13 - 104) = v9;
  *(_QWORD *)(v13 - 96) = v11;
  type metadata accessor for EventRecentLocation.LocationCodingKeys();
}

void sub_1B8ADA02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = MEMORY[0x1BCCB79D0](&unk_1B8BA5C98, a1);
  *(_QWORD *)(v13 - 280) = a1;
  *(_QWORD *)(v13 - 288) = v15;
  v16 = sub_1B8B9C8B4();
  *(_QWORD *)(v13 - 240) = v16;
  *(_QWORD *)(v13 - 256) = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 272) = (char *)&a9 - v18;
  *(_QWORD *)(v13 - 248) = *(_QWORD *)(v12 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v13 - 264) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v13 - 152) = v12;
  *(_QWORD *)(v13 - 120) = v12;
  *(_QWORD *)(v13 - 112) = v10;
  *(_QWORD *)(v13 - 184) = v10;
  *(_QWORD *)(v13 - 104) = v9;
  *(_QWORD *)(v13 - 96) = v11;
  type metadata accessor for EventRecentLocation.CodingKeys();
}

uint64_t sub_1B8ADA118(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  MEMORY[0x1BCCB79D0](&unk_1B8BA5C48, a1);
  v6 = sub_1B8B9C8B4();
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 136) = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - v7;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_1B8B9C9C8();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v5 - 128), v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(_QWORD *)(v5 - 192);
    v9 = *(_QWORD *)(v5 - 184);
    v11 = *(_QWORD *)(v5 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v11, v3, v9);
    *(_BYTE *)(v5 - 120) = 1;
    v12 = *(_QWORD *)(v5 - 216);
    v13 = *(_QWORD *)(v5 - 136);
    sub_1B8B9C83C();
    v14 = *(_QWORD *)(v5 - 176);
    sub_1B8B9C8A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
  }
  else
  {
    v15 = *(_QWORD *)(v5 - 248);
    v16 = *(_QWORD *)(v5 - 264);
    v17 = *(_QWORD *)(v5 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v3, v17);
    *(_BYTE *)(v5 - 120) = 0;
    v18 = *(_QWORD *)(v5 - 272);
    v13 = *(_QWORD *)(v5 - 136);
    sub_1B8B9C83C();
    v19 = *(_QWORD *)(v5 - 240);
    sub_1B8B9C8A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v8, v13);
}

void type metadata accessor for EventRecentLocation.ConferenceRoomCodingKeys()
{
  JUMPOUT(0x1BCCB7934);
}

void type metadata accessor for EventRecentLocation.LocationCodingKeys()
{
  JUMPOUT(0x1BCCB7934);
}

void type metadata accessor for EventRecentLocation.CodingKeys()
{
  JUMPOUT(0x1BCCB7934);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void EventRecentLocation<>.init(from:)()
{
  type metadata accessor for EventRecentLocation.ConferenceRoomCodingKeys();
}

void sub_1B8ADA3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 232) = MEMORY[0x1BCCB79D0](&unk_1B8BA5CE8, a1);
  *(_QWORD *)(v13 - 224) = a1;
  v15 = sub_1B8B9C830();
  *(_QWORD *)(v13 - 304) = v15;
  *(_QWORD *)(v13 - 264) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 216) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 128) = v10;
  *(_QWORD *)(v13 - 120) = v11;
  *(_QWORD *)(v13 - 112) = v12;
  *(_QWORD *)(v13 - 104) = v9;
  type metadata accessor for EventRecentLocation.LocationCodingKeys();
}

void sub_1B8ADA450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 256) = MEMORY[0x1BCCB79D0](&unk_1B8BA5C98, a1);
  *(_QWORD *)(v13 - 248) = a1;
  v15 = sub_1B8B9C830();
  *(_QWORD *)(v13 - 312) = v15;
  *(_QWORD *)(v13 - 272) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 128) = v10;
  *(_QWORD *)(v13 - 120) = v11;
  *(_QWORD *)(v13 - 112) = v12;
  *(_QWORD *)(v13 - 104) = v9;
  type metadata accessor for EventRecentLocation.CodingKeys();
}

void sub_1B8ADA4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 168) = MEMORY[0x1BCCB79D0](&unk_1B8BA5C48, a1);
  v6 = sub_1B8B9C830();
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 184) = v6;
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v5 - 296) = v2;
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 120) = v3;
  *(_QWORD *)(v5 - 176) = v3;
  *(_QWORD *)(v5 - 112) = v4;
  *(_QWORD *)(v5 - 104) = v1;
  type metadata accessor for EventRecentLocation();
}

uint64_t sub_1B8ADA53C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[96];

  *(_QWORD *)(v3 - 200) = a1;
  *(_QWORD *)(v3 - 320) = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = &v44[-v8];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v44[-v10];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v12 = *(_QWORD *)(v3 - 72);
  sub_1B8B9C9B0();
  if (v12)
    goto LABEL_7;
  *(_QWORD *)(v3 - 328) = v9;
  *(_QWORD *)(v3 - 168) = v6;
  *(_QWORD *)(v3 - 336) = v11;
  v13 = *(_QWORD *)(v3 - 184);
  *(_QWORD *)(v3 - 72) = v2;
  v14 = v1;
  *(_QWORD *)(v3 - 160) = sub_1B8B9C824();
  v15 = sub_1B8B9C35C();
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEAF38], v15);
  *(_QWORD *)(v3 - 128) = sub_1B8B9C59C();
  *(_QWORD *)(v3 - 120) = v16;
  *(_QWORD *)(v3 - 112) = v17;
  *(_QWORD *)(v3 - 104) = v18;
  v19 = sub_1B8B9C590();
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEBF88], v19);
  sub_1B8B9C41C();
  v20 = *(unsigned __int8 *)(v3 - 160);
  v21 = v13;
  if (v20 == 2
    || (v23 = *(_OWORD *)(v3 - 128),
        v22 = *(_OWORD *)(v3 - 112),
        *(_OWORD *)(v3 - 352) = v23,
        *(_OWORD *)(v3 - 160) = v23,
        *(_OWORD *)(v3 - 144) = v22,
        (sub_1B8B9C428() & 1) == 0))
  {
    v29 = sub_1B8B9C6A4();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF1BB528);
    *v31 = *(_QWORD *)(v3 - 200);
    sub_1B8B9C794();
    sub_1B8B9C698();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC450], v29);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 8))(v14, v13);
    v2 = *(_QWORD **)(v3 - 72);
LABEL_7:
    v32 = (uint64_t)v2;
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  if ((v20 & 1) != 0)
  {
    *(_BYTE *)(v3 - 160) = 1;
    v34 = *(_QWORD *)(v3 - 216);
    v35 = v14;
    sub_1B8B9C788();
    v43 = *(_QWORD *)(v3 - 208);
    v36 = v21;
    v37 = *(_QWORD *)(v3 - 168);
    v38 = *(_QWORD *)(v3 - 304);
    sub_1B8B9C818();
    v39 = *(_QWORD *)(v3 - 192);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 8))(v34, v38);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v36);
    v40 = *(_QWORD *)(v3 - 200);
    swift_storeEnumTagMultiPayload();
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 320) + 32);
    v42 = *(_QWORD *)(v3 - 336);
    v41(v42, v37, v40);
  }
  else
  {
    *(_BYTE *)(v3 - 160) = 0;
    v24 = *(_QWORD *)(v3 - 240);
    v25 = v14;
    sub_1B8B9C788();
    v26 = *(_QWORD *)(v3 - 328);
    v27 = *(_QWORD *)(v3 - 312);
    sub_1B8B9C818();
    v28 = *(_QWORD *)(v3 - 192);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8))(v24, v27);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v21);
    v40 = *(_QWORD *)(v3 - 200);
    swift_storeEnumTagMultiPayload();
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 320) + 32);
    v42 = *(_QWORD *)(v3 - 336);
    v41(v42, v26, v40);
    v43 = *(_QWORD *)(v3 - 208);
  }
  v41(v43, v42, v40);
  v32 = *(_QWORD *)(v3 - 72);
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1BCCB79B8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B8ADAA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x1BCCB79D0](&protocol conformance descriptor for <> EventRecentLocation<A, B>, a1, v5);
}

void sub_1B8ADAAA4()
{
  EventRecentLocation<>.init(from:)();
}

void sub_1B8ADAAD4()
{
  EventRecentLocation<>.encode(to:)();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.contactsSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.recentsSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.frequentsSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.eventsSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.textualSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of EventLocationSearchResultsModel.conferenceRoomSearchResults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_1B8ADAB20()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B8ADAB28()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1B8ADABB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1B8ADACDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1B8ADAD28 + 4 * byte_1B8BA4AC5[v7]))();
  }
}

uint64_t sub_1B8ADAD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1B8ADAE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1B8ADAFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1B8ADB0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1B8ADB21C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B8ADB2E4 + 4 * byte_1B8BA4AE8[(v4 - 1)]))();
}

void sub_1B8ADB330(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1B8ADB4DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B8ADB528 + 4 * byte_1B8BA4AF6[v3]))();
}

void sub_1B8ADB574(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

void type metadata accessor for CUIKRepeatType(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB790);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB798);
}

void type metadata accessor for EKEventAvailability(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7A0);
}

void type metadata accessor for EKEventStatus(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7A8);
}

void type metadata accessor for EKLocationRoutingMode(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7B0);
}

void type metadata accessor for EKPrivacyLevel(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7B8);
}

void type metadata accessor for EKSourceType(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7C0);
}

void type metadata accessor for EKWeekday(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7C8);
}

void type metadata accessor for EKVirtualConferenceSource(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7D0);
}

void type metadata accessor for EKRecurrenceFrequency(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7D8);
}

void type metadata accessor for RTLocationOfInterestType(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7E0);
}

void type metadata accessor for EKSharingStatus(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB7E8);
}

void type metadata accessor for EKCalendarType(uint64_t a1)
{
  sub_1B8ADC37C(a1, (unint64_t *)&unk_1EF1BB7F0);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1B9478);
}

void type metadata accessor for EKScheduleAgent(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB800);
}

void type metadata accessor for EKParticipantType(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB808);
}

void type metadata accessor for EKParticipantRole(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB810);
}

void type metadata accessor for EKParticipantStatus(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BB818);
}

void type metadata accessor for EKAvailabilitySpanType(uint64_t a1)
{
  sub_1B8ADC37C(a1, qword_1EF1BB820);
}

uint64_t sub_1B8ADB7E8()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WeekDayViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1B8ADB88C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B8ADB8D8 + 4 * byte_1B8BA4B00[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B8ADB90C + 4 * byte_1B8BA4AFB[v4]))();
}

uint64_t sub_1B8ADB90C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8ADB914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8ADB91CLL);
  return result;
}

uint64_t sub_1B8ADB928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8ADB930);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B8ADB934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8ADB93C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8ADB948(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1B8ADB950(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t sub_1B8ADB968()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for FamilyCalendarScreens(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_1B8ADB9C0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B8ADBA00 + 4 * byte_1B8BA4B05[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B8ADBA20 + 4 * byte_1B8BA4B0A[v4]))();
}

_BYTE *sub_1B8ADBA00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B8ADBA20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8ADBA28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8ADBA30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8ADBA38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8ADBA40(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1B8ADBA4C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADBA5C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADBA6C()
{
  JUMPOUT(0x1BCCB79D0);
}

uint64_t sub_1B8ADBA7C()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9A8, (uint64_t (*)(uint64_t))type metadata accessor for EKAvailabilitySpanType, (uint64_t)&unk_1B8BA51A8);
}

uint64_t sub_1B8ADBAB0(uint64_t a1, uint64_t a2)
{
  return sub_1B8ADBBF8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1B8ADBABC(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1B8B9C164();
  *a2 = 0;
  return result;
}

uint64_t sub_1B8ADBB30(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1B8B9C170();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B8ADBBAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1B8B9C17C();
  v2 = sub_1B8B9C14C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B8ADBBEC(uint64_t a1, uint64_t a2)
{
  return sub_1B8ADBBF8(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1B8ADBBF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1B8B9C17C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B8ADBC34()
{
  sub_1B8B9C17C();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8ADBC74()
{
  uint64_t v0;

  sub_1B8B9C17C();
  sub_1B8B9C968();
  sub_1B8B9C1E8();
  v0 = sub_1B8B9C998();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B8ADBCE4()
{
  return sub_1B8B9C974();
}

_QWORD *sub_1B8ADBD0C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1B8ADBD1C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1B8ADBD28()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8ADBD6C()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

BOOL sub_1B8ADBDAC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B8ADBDC0()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9B0, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantStatus, (uint64_t)&unk_1B8BA5258);
}

uint64_t sub_1B8ADBDEC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1BCCB79D0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8ADBE2C()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9B8, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantRole, (uint64_t)&unk_1B8BA5304);
}

uint64_t sub_1B8ADBE58()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9C0, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantType, (uint64_t)&unk_1B8BA53B0);
}

uint64_t sub_1B8ADBE84()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9C8, (uint64_t (*)(uint64_t))type metadata accessor for EKScheduleAgent, (uint64_t)&unk_1B8BA5458);
}

uint64_t sub_1B8ADBEB0()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9D0, (uint64_t (*)(uint64_t))type metadata accessor for EKCalendarType, (uint64_t)&unk_1B8BA54FC);
}

uint64_t sub_1B8ADBEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1B8B9C17C();
  v2 = v1;
  if (v0 == sub_1B8B9C17C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1B8B9C8D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B8ADBF64()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9D8, (uint64_t (*)(uint64_t))type metadata accessor for EKSharingStatus, (uint64_t)&unk_1B8BA55A4);
}

uint64_t sub_1B8ADBF90()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9E0, (uint64_t (*)(uint64_t))type metadata accessor for RTLocationOfInterestType, (uint64_t)&unk_1B8BA5644);
}

uint64_t sub_1B8ADBFBC()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9E8, (uint64_t (*)(uint64_t))type metadata accessor for EKRecurrenceFrequency, (uint64_t)&unk_1B8BA56E8);
}

uint64_t sub_1B8ADBFE8()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9F0, (uint64_t (*)(uint64_t))type metadata accessor for EKVirtualConferenceSource, (uint64_t)&unk_1B8BA5790);
}

uint64_t sub_1B8ADC014()
{
  return sub_1B8ADBDEC(&qword_1EF1BB9F8, (uint64_t (*)(uint64_t))type metadata accessor for EKWeekday, (uint64_t)&unk_1B8BA5834);
}

uint64_t sub_1B8ADC040()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA00, (uint64_t (*)(uint64_t))type metadata accessor for EKSourceType, (uint64_t)&unk_1B8BA58E0);
}

uint64_t sub_1B8ADC06C()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA08, (uint64_t (*)(uint64_t))type metadata accessor for EKPrivacyLevel, (uint64_t)&unk_1B8BA5988);
}

uint64_t sub_1B8ADC098()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA10, (uint64_t (*)(uint64_t))type metadata accessor for EKLocationRoutingMode, (uint64_t)&unk_1B8BA5A28);
}

uint64_t sub_1B8ADC0C4()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA18, (uint64_t (*)(uint64_t))type metadata accessor for EKEventStatus, (uint64_t)&unk_1B8BA5ACC);
}

uint64_t sub_1B8ADC0F0()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA20, (uint64_t (*)(uint64_t))type metadata accessor for EKEventAvailability, (uint64_t)&unk_1B8BA5B78);
}

void sub_1B8ADC11C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADC12C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADC13C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADC14C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADC15C()
{
  JUMPOUT(0x1BCCB79D0);
}

void sub_1B8ADC16C()
{
  JUMPOUT(0x1BCCB79D0);
}

uint64_t sub_1B8ADC17C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B8B9C14C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B8ADC1C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B8B9C17C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B8ADC1E8()
{
  sub_1B8ADBDEC(&qword_1EF1BBA48, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5E80);
  sub_1B8ADBDEC(&qword_1EF1BBA50, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5DD4);
  return sub_1B8B9C770();
}

uint64_t sub_1B8ADC26C()
{
  return 2;
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BBA28);
}

uint64_t sub_1B8ADC288()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA30, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5D98);
}

uint64_t sub_1B8ADC2B4()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA38, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5D6C);
}

uint64_t sub_1B8ADC2E0()
{
  return sub_1B8ADBDEC(&qword_1EF1BBA40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5E08);
}

void type metadata accessor for EKShareeAccessLevel(uint64_t a1)
{
  sub_1B8ADC37C(a1, &qword_1EF1BBA58);
}

uint64_t getEnumTagSinglePayload for EventRecurrenceDayOfWeekModelObject(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EventRecurrenceDayOfWeekModelObject(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for MKCoordinateSpan(uint64_t a1)
{
  sub_1B8ADC37C(a1, (unint64_t *)&unk_1EF1BBAC0);
}

void sub_1B8ADC37C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1B8ADC3E0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B8ADC478(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 48) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v19 = ~v6;
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v12[1] = v13[1];
    v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = (uint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    v16 = v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v16 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v17 = *v15;
      sub_1B8ADC5E4(*v15, v16);
      *(_QWORD *)v14 = v17;
      *(_QWORD *)(v14 + 8) = v16;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v14 + v6 + 16) & v19, ((unint64_t)v15 + v6 + 16) & v19, v4);
    *(_QWORD *)((v7 + ((v14 + v6 + 16) & v19)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7
                                                                                  + (((unint64_t)v15 + v6 + 16) & v19)) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_1B8ADC5E4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1B8ADC628(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = v4[1];
  if ((v5 & 0x3000000000000000) == 0)
    sub_1B8ADC698(*v4, v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1B8ADC698(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *sub_1B8ADC6DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v10 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_1B8ADC5E4(*v9, v10);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v8 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v14, v15);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1B8ADC7DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (uint64_t *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = v8[1];
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 & 0x3000000000000000;
  if ((v10 & 0x3000000000000000) == 0)
  {
    if (!v12)
    {
      v19 = *(_QWORD *)v9;
      sub_1B8ADC5E4(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      v20 = *v8;
      v21 = v8[1];
      *v8 = v19;
      v8[1] = v11;
      sub_1B8ADC698(v20, v21);
      goto LABEL_7;
    }
    sub_1B8ADC698(*v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_7;
  }
  v13 = *(_QWORD *)v9;
  sub_1B8ADC5E4(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
  *v8 = v13;
  v8[1] = v11;
LABEL_7:
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v8 + v15 + 16) & ~v15;
  v17 = (v9 + v15 + 16) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v16, v17);
  *(_QWORD *)((*(_QWORD *)(v14 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v14 + 64) + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_1B8ADC92C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_OWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_OWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1B8ADC9D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = v9[1];
  if ((v11 & 0x3000000000000000) == 0)
  {
    v12 = v10[1];
    if ((v12 & 0x3000000000000000) == 0)
    {
      v18 = *v9;
      *v9 = *v10;
      v9[1] = v12;
      sub_1B8ADC698(v18, v11);
      goto LABEL_5;
    }
    sub_1B8ADC698(*v9, v11);
  }
  *(_OWORD *)v9 = *(_OWORD *)v10;
LABEL_5:
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v9 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v10 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B8ADCAE8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 48) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B8ADCB74 + 4 * byte_1B8BA5F38[v10]))();
  }
}

void sub_1B8ADCC04(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 48) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 48) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 48) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1B8ADCD0C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B8ADCD88);
}

void sub_1B8ADCD14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B8ADCD1CLL);
  JUMPOUT(0x1B8ADCD88);
}

void sub_1B8ADCD30()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B8ADCD88);
}

void sub_1B8ADCD38()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B8ADCD88);
}

void sub_1B8ADCD40(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x1B8ADCD4CLL);
    if (a2 < 0)
      JUMPOUT(0x1B8ADCD80);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x1B8ADCD88);
}

uint64_t type metadata accessor for MemberItemView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MemberItemView);
}

uint64_t sub_1B8ADCDAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8ADCDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD30);
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD38);
  v23 = MEMORY[0x1E0CDFC08];
  v24 = *(_QWORD *)(a1 + 16);
  v5 = v24;
  swift_getTupleTypeMetadata();
  v6 = sub_1B8B9C068();
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE0678], v6);
  v7 = sub_1B8B9BEE8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v17[-v12];
  v14 = *(_QWORD *)(a1 + 24);
  v18 = v5;
  v19 = v14;
  v20 = v2;
  sub_1B8B9B738();
  sub_1B8B9BEDC();
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFB08], v7);
  sub_1B8B06AE4((uint64_t)v11, v7, (uint64_t)v13);
  v15 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v15(v11, v7);
  sub_1B8AF2470((uint64_t)v13, v7, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v15)(v13, v7);
}

uint64_t sub_1B8ADCF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  uint64_t v48;
  char v49;
  __int128 v50;
  _BYTE v51[168];
  _QWORD v52[9];
  uint64_t v53[4];
  _OWORD v54[10];
  _BYTE v55[167];
  char v56;
  _OWORD v57[11];
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;

  v33 = a4;
  v34 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v32 = (uint64_t)&v31 - v9;
  v10 = sub_1B8B9BE10();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v42 = a1;
  v16 = *(_QWORD *)(a1 + 40);
  if (v16 >> 60 != 15)
  {
    v31 = a3;
    v17 = *(_QWORD *)(v42 + 32);
    v18 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
    sub_1B8ADC5E4(v17, v16);
    sub_1B8ADC5E4(v17, v16);
    v19 = (void *)sub_1B8B9B078();
    v20 = objc_msgSend(v18, sel_initWithData_, v19);

    if (!v20)
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
    sub_1B8B9BDF8();
    sub_1B8ADDBD0(v17, v16);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0CDF6F0], v10);
    v14 = sub_1B8B9BE1C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    a3 = v31;
    type metadata accessor for MemberItemView(0, a2, v31, v21);
    sub_1B8B9C014();
    sub_1B8B9B474();
    v40 = v60;
    v41 = v59;
    v38 = v62;
    v39 = v61;
    v36 = v64;
    v37 = v63;
    sub_1B8ADDBD0(v17, v16);
    v15 = 1;
  }
  v22 = sub_1B8B9B7B0();
  v23 = v42;
  sub_1B8ADD410(v42, (uint64_t)v54);
  *(_OWORD *)&v55[103] = v54[6];
  *(_OWORD *)&v55[119] = v54[7];
  *(_OWORD *)&v55[135] = v54[8];
  *(_OWORD *)&v55[151] = v54[9];
  *(_OWORD *)&v55[39] = v54[2];
  *(_OWORD *)&v55[55] = v54[3];
  *(_OWORD *)&v55[71] = v54[4];
  *(_OWORD *)&v55[87] = v54[5];
  *(_OWORD *)&v55[7] = v54[0];
  v56 = 1;
  *(_OWORD *)&v55[23] = v54[1];
  v25 = v23 + *(int *)(type metadata accessor for MemberItemView(0, a2, a3, v24) + 44);
  v26 = v32;
  sub_1B8B06AE4(v25, a2, v32);
  *(_OWORD *)&v51[113] = *(_OWORD *)&v55[112];
  *(_OWORD *)&v51[129] = *(_OWORD *)&v55[128];
  *(_OWORD *)&v51[145] = *(_OWORD *)&v55[144];
  *(_OWORD *)&v51[49] = *(_OWORD *)&v55[48];
  *(_OWORD *)&v51[65] = *(_OWORD *)&v55[64];
  *(_OWORD *)&v51[81] = *(_OWORD *)&v55[80];
  *(_OWORD *)&v51[97] = *(_OWORD *)&v55[96];
  *(_OWORD *)&v51[1] = *(_OWORD *)v55;
  *(_OWORD *)&v51[17] = *(_OWORD *)&v55[16];
  v52[0] = v14;
  v52[1] = 0;
  v52[2] = v15;
  v52[3] = v41;
  v52[4] = v40;
  v52[5] = v39;
  v52[6] = v38;
  v52[7] = v37;
  v50 = (unint64_t)v22;
  v51[0] = 1;
  *(_QWORD *)&v51[160] = *(_QWORD *)&v55[159];
  *(_OWORD *)&v51[33] = *(_OWORD *)&v55[32];
  v52[8] = v36;
  v53[0] = (uint64_t)v52;
  v48 = 0;
  v49 = 1;
  v53[1] = (uint64_t)&v50;
  v53[2] = (uint64_t)&v48;
  v27 = v34;
  v28 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v35, v26, a2);
  v53[3] = v28;
  swift_retain();
  sub_1B8ADD6F4((uint64_t)v54);
  v47[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD30);
  v47[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD38);
  v47[2] = MEMORY[0x1E0CDFC08];
  v47[3] = a2;
  v43 = sub_1B8ADD83C();
  v44 = sub_1B8ADD970();
  v45 = MEMORY[0x1E0CDFBF0];
  v46 = a3;
  sub_1B8B6D0D0(v53, 4uLL, (uint64_t)v47);
  swift_release();
  v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v29(v26, a2);
  sub_1B8ADD9BC((uint64_t)v54);
  v29(v28, a2);
  v57[8] = *(_OWORD *)&v51[112];
  v57[9] = *(_OWORD *)&v51[128];
  v57[10] = *(_OWORD *)&v51[144];
  v58 = *(_QWORD *)&v51[160];
  v57[4] = *(_OWORD *)&v51[48];
  v57[5] = *(_OWORD *)&v51[64];
  v57[6] = *(_OWORD *)&v51[80];
  v57[7] = *(_OWORD *)&v51[96];
  v57[0] = v50;
  v57[1] = *(_OWORD *)v51;
  v57[2] = *(_OWORD *)&v51[16];
  v57[3] = *(_OWORD *)&v51[32];
  sub_1B8ADDB04((uint64_t)v57);
  return swift_release();
}

uint64_t sub_1B8ADD410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;

  sub_1B8ADDBE4();
  swift_bridgeObjectRetain();
  v4 = sub_1B8B9BBAC();
  v25 = v5;
  v26 = v6;
  v8 = v7;
  KeyPath = swift_getKeyPath();
  v27 = sub_1B8B9BA38();
  v9 = swift_getKeyPath();
  v24 = sub_1B8B9BDC8();
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1B8B9BBAC();
    v22 = v12;
    v23 = v11;
    v21 = v13;
    v15 = v14 & 1;
    v20 = swift_getKeyPath();
    v18 = sub_1B8B9BA2C();
    v19 = swift_getKeyPath();
    v10 = sub_1B8B9BDD4();
    v16 = 1;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v15 = 0;
    v20 = 0;
    v21 = 0;
    v16 = 0;
    v18 = 0;
    v19 = 0;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v26;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v27;
  *(_QWORD *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_QWORD *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 96) = v15;
  *(_QWORD *)(a2 + 104) = v21;
  *(_QWORD *)(a2 + 112) = v20;
  *(_QWORD *)(a2 + 120) = v16;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = v19;
  *(_QWORD *)(a2 + 144) = v18;
  *(_QWORD *)(a2 + 152) = v10;
  sub_1B8ADD7C0(v4, v25, v8 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B8ADD7D0(v23, v22, v15, v21);
  sub_1B8ADDA98(v23, v22, v15, v21);
  sub_1B8ADDA88(v4, v25, v8 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8ADD688()
{
  return sub_1B8B9BC3C();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1BCCB79C4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B8ADD6E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1B8ADCF7C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1B8ADD6F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 104);
  sub_1B8ADD7C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1B8ADD7D0(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1B8ADD7C0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1B8ADD7D0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1B8ADD7C0(result, a2, a3 & 1);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t sub_1B8ADD83C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BBD40;
  if (!qword_1EF1BBD40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD30);
    v2 = sub_1B8ADD8A0();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE07A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBD40);
  }
  return result;
}

unint64_t sub_1B8ADD8A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBD48;
  if (!qword_1EF1BBD48)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD50);
    v2[0] = sub_1B8ADD90C();
    v2[1] = MEMORY[0x1E0CD8D78];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBD48);
  }
  return result;
}

unint64_t sub_1B8ADD90C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBD58;
  if (!qword_1EF1BBD58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD60);
    v2[0] = MEMORY[0x1E0CDF818];
    v2[1] = MEMORY[0x1E0CDB160];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBD58);
  }
  return result;
}

unint64_t sub_1B8ADD970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BBD68;
  if (!qword_1EF1BBD68)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD38);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFCB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BBD68);
  }
  return result;
}

uint64_t sub_1B8ADD9BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 104);
  sub_1B8ADDA88(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1B8ADDA98(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1B8ADDA88(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1B8ADDA98(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1B8ADDA88(result, a2, a3 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B8ADDB04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 128);
  sub_1B8ADDA88(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1B8ADDA98(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1B8ADDBD0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1B8ADC698(a1, a2);
  return a1;
}

unint64_t sub_1B8ADDBE4()
{
  unint64_t result;

  result = qword_1EF1B9420;
  if (!qword_1EF1B9420)
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF1B9420);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1BCCB7934](a1, v6, a5);
}

uint64_t sub_1B8ADDC64()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD30);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBD38);
  swift_getTupleTypeMetadata();
  v0 = sub_1B8B9C068();
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE0678], v0);
  v1 = sub_1B8B9BEE8();
  return MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFB08], v1);
}

uint64_t initializeBufferWithCopyOfBuffer for OrganizerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for OrganizerView(id *a1)
{

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OrganizerView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrganizerView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OrganizerView(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrganizerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrganizerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrganizerView()
{
  return &type metadata for OrganizerView;
}

uint64_t sub_1B8ADDF3C()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_1B8ADDF4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = sub_1B8B9B738();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD88);
  return sub_1B8ADDF98(a1, a2 + *(int *)(v4 + 44));
}

id sub_1B8ADDF98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD90);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B8BA6070;
  result = objc_msgSend(a1, sel_emailAddress);
  if (result)
  {
    v12 = result;
    v13 = sub_1B8B9C17C();
    v15 = v14;

    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    sub_1B8B9C014();
    sub_1B8B9B474();
    v16 = v26;
    LOBYTE(v13) = v27;
    v17 = v28;
    v18 = v29;
    v19 = v30;
    v25 = v31;
    *(_QWORD *)v9 = sub_1B8B9B7B0();
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD98);
    sub_1B8ADE190(a1, (uint64_t *)&v9[*(int *)(v20 + 44)]);
    sub_1B8ADE850((uint64_t)v9, (uint64_t)v7, &qword_1EF1BBD90);
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v16;
    *(_BYTE *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v17;
    *(_BYTE *)(a2 + 32) = v18;
    v21 = v25;
    *(_QWORD *)(a2 + 40) = v19;
    *(_QWORD *)(a2 + 48) = v21;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDA0);
    sub_1B8ADE850((uint64_t)v7, a2 + *(int *)(v22 + 48), &qword_1EF1BBD90);
    v23 = a2 + *(int *)(v22 + 64);
    *(_QWORD *)v23 = 0;
    *(_BYTE *)(v23 + 8) = 1;
    swift_bridgeObjectRetain();
    sub_1B8ADE894((uint64_t)v9, &qword_1EF1BBD90);
    sub_1B8ADE894((uint64_t)v7, &qword_1EF1BBD90);
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8ADE190@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v53 = a2;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDA8);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDB0);
  v5 = MEMORY[0x1E0C80A78](v52);
  v57 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v48 - v8;
  MEMORY[0x1E0C80A78](v7);
  v55 = (uint64_t)&v48 - v10;
  sub_1B8B9B780();
  v11 = sub_1B8B9BBA0();
  v13 = v12;
  v15 = v14 & 1;
  sub_1B8B9BDD4();
  v16 = sub_1B8B9BB64();
  v49 = v17;
  v50 = v16;
  v19 = v18;
  v51 = v20;
  swift_release();
  sub_1B8ADDA88(v11, v13, v15);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(a1, sel_name);
  if (v21)
  {
    v22 = v21;
    v23 = sub_1B8B9C17C();
  }
  else
  {
    v22 = CUIKBundle();
    v23 = sub_1B8B9AFD0();
  }
  v25 = v23;
  v26 = v24;

  v27 = v19 & 1;
  v58 = v25;
  v59 = v26;
  sub_1B8ADDBE4();
  v28 = sub_1B8B9BBAC();
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  KeyPath = swift_getKeyPath();
  v58 = v28;
  v59 = v30;
  v60 = v34;
  v61 = v32;
  v62 = KeyPath;
  v63 = 1;
  v64 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9100);
  sub_1B8ADE77C();
  sub_1B8B9BCC0();
  sub_1B8ADDA88(v28, v30, v34);
  swift_release();
  swift_bridgeObjectRelease();
  v36 = sub_1B8B9BDC8();
  v37 = swift_getKeyPath();
  v38 = v54;
  v39 = v56;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v9, v4, v56);
  v40 = (uint64_t *)&v9[*(int *)(v52 + 36)];
  *v40 = v37;
  v40[1] = v36;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v39);
  v41 = v55;
  sub_1B8ADE808((uint64_t)v9, v55);
  v42 = v57;
  sub_1B8ADE850(v41, v57, &qword_1EF1BBDB0);
  v43 = v53;
  v45 = v49;
  v44 = v50;
  *v53 = v50;
  v43[1] = v45;
  *((_BYTE *)v43 + 16) = v27;
  v43[3] = v51;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDB8);
  sub_1B8ADE850(v42, (uint64_t)v43 + *(int *)(v46 + 48), &qword_1EF1BBDB0);
  sub_1B8ADD7C0(v44, v45, v27);
  swift_bridgeObjectRetain();
  sub_1B8ADE894(v41, &qword_1EF1BBDB0);
  sub_1B8ADE894(v42, &qword_1EF1BBDB0);
  sub_1B8ADDA88(v44, v45, v27);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8ADE574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    v4 = *(_BYTE *)(v1 + 24);
    v7 = v1 + 8;
    v5 = *(_QWORD *)(v1 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v5;
    *(_QWORD *)(v8 + 32) = v6;
    *(_BYTE *)(v8 + 40) = v4;
    MEMORY[0x1E0C80A78](v8);
    swift_retain();
    swift_retain();
    v9 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD78);
    sub_1B8ADE950(&qword_1EF1BBD80, &qword_1EF1BBD78, MEMORY[0x1E0CDFB08]);
    sub_1B8B9BEB8();

    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD70);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBD70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
}

uint64_t sub_1B8ADE6E4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8ADE718()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDC0);
  return sub_1B8B9BF48();
}

id sub_1B8ADE76C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8ADDF4C(*(void **)(v1 + 16), a1);
}

unint64_t sub_1B8ADE77C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1B90F8;
  if (!qword_1EF1B90F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9100);
    v2 = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    v3[0] = MEMORY[0x1E0CDDD50];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1B90F8);
  }
  return result;
}

uint64_t sub_1B8ADE808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8ADE850(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B8ADE894(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1B8ADE8D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF1BBDC8;
  if (!qword_1EF1BBDC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBDD0);
    v2 = sub_1B8ADE950(&qword_1EF1BBDD8, &qword_1EF1BBD70, MEMORY[0x1E0CDFA50]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE07A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBDC8);
  }
  return result;
}

uint64_t sub_1B8ADE950(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1BCCB79D0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for AvailabilityView()
{
  swift_release();
  return swift_release();
}

_QWORD *_s13CalendarUIKit16AvailabilityViewVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AvailabilityView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AvailabilityView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvailabilityView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvailabilityView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AvailabilityView()
{
  return &type metadata for AvailabilityView;
}

uint64_t sub_1B8ADEB4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8ADEB5C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBE40);
  type metadata accessor for EKEventAvailability(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBE08);
  sub_1B8ADE950(&qword_1EF1BBE48, &qword_1EF1BBE40, MEMORY[0x1E0DEAF48]);
  sub_1B8ADEE68();
  sub_1B8ADEF70();
  return sub_1B8B9BF90();
}

id sub_1B8ADEC24@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *a1;
  result = CUIKDisplayStringForAvailability(v3 - 1);
  if (result)
  {
    v5 = result;
    sub_1B8B9C17C();

    sub_1B8ADDBE4();
    result = (id)sub_1B8B9BBAC();
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7 & 1;
    *(_QWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 32) = v3;
    *(_BYTE *)(a2 + 33) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8ADECBC()
{
  sub_1B8B9B780();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDE0);
  sub_1B8B9BF60();
  type metadata accessor for EKEventAvailability(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDE8);
  sub_1B8ADEDBC();
  sub_1B8ADEE04();
  return sub_1B8B9BEF4();
}

unint64_t sub_1B8ADEDBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BBDF0;
  if (!qword_1EF1BBDF0)
  {
    type metadata accessor for EKEventAvailability(255);
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA5B34, v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BBDF0);
  }
  return result;
}

unint64_t sub_1B8ADEE04()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BBDF8;
  if (!qword_1EF1BBDF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBDE8);
    v2 = sub_1B8ADEE68();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFEE0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBDF8);
  }
  return result;
}

unint64_t sub_1B8ADEE68()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBE00;
  if (!qword_1EF1BBE00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBE08);
    v2[0] = sub_1B8ADEEEC();
    v2[1] = sub_1B8ADE950(&qword_1EF1BBE30, &qword_1EF1BBE38, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE00);
  }
  return result;
}

unint64_t sub_1B8ADEEEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BBE10;
  if (!qword_1EF1BBE10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBE18);
    v2 = sub_1B8ADE950(&qword_1EF1BBE20, &qword_1EF1BBE28, MEMORY[0x1E0CDBEE8]);
    v3[0] = MEMORY[0x1E0CDDD50];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE10);
  }
  return result;
}

unint64_t sub_1B8ADEF70()
{
  unint64_t result;

  result = qword_1EF1BBE50;
  if (!qword_1EF1BBE50)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAF3F8, &type metadata for CUIKEventAvailability);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE50);
  }
  return result;
}

uint64_t sub_1B8ADEFB4()
{
  return sub_1B8ADE950(&qword_1EF1BBE58, &qword_1EF1BBE60, MEMORY[0x1E0CDFBB0]);
}

uint64_t EventConferenceRoomModelObject.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 56) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EventConferenceRoomModelObject.location.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v5 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v7;
  *(_OWORD *)(v1 + 16) = v6;
  result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*EventConferenceRoomModelObject.location.modify())()
{
  return nullsub_1;
}

uint64_t EventConferenceRoomModelObject.supportsAvailability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t EventConferenceRoomModelObject.supportsAvailability.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*EventConferenceRoomModelObject.supportsAvailability.modify())()
{
  return nullsub_1;
}

uint64_t EventConferenceRoomModelObject.availabilityRequestInProgress.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t EventConferenceRoomModelObject.availabilityRequestInProgress.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = result;
  return result;
}

uint64_t (*EventConferenceRoomModelObject.availabilityRequestInProgress.modify())()
{
  return nullsub_1;
}

uint64_t EventConferenceRoomModelObject.availability.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t EventConferenceRoomModelObject.availability.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*EventConferenceRoomModelObject.availability.modify())()
{
  return nullsub_1;
}

__n128 EventConferenceRoomModelObject.init(id:location:supportsAvailability:availabilityRequestInProgress:availability:)@<Q0>(uint64_t a1@<X2>, char a2@<W3>, char a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v12;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a5 + 48) = v10;
  *(_QWORD *)(a5 + 56) = v11;
  *(_BYTE *)(a5 + 64) = a2;
  *(_BYTE *)(a5 + 65) = a3;
  *(_QWORD *)(a5 + 72) = a4;
  return result;
}

uint64_t EventConferenceRoomModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[5];
  _OWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
  v20[3] = swift_getAssociatedTypeWitness();
  v20[4] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v20);
  v6(v4, v5);
  EventDirectoryRecordModelObject.init(_:)(v20, (uint64_t *)v21);
  v18 = v21[1];
  v19 = v21[0];
  v17 = v21[2];
  v7 = v22;
  v8 = v23;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  LOBYTE(v11) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v13, v14);
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = v9 & 1;
  *(_BYTE *)(a2 + 65) = v11 & 1;
  *(_QWORD *)(a2 + 72) = v15;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t EventConferenceRoomModelObject.hash(into:)()
{
  EventDirectoryRecordModelObject.hash(into:)();
  sub_1B8B9C980();
  sub_1B8B9C980();
  return sub_1B8B9C974();
}

BOOL sub_1B8ADF3F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s13CalendarUIKit12CUIKDateViewV7StylingV16FirstLineContentO9hashValueSivg_0()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8ADF44C()
{
  return sub_1B8B9C974();
}

uint64_t sub_1B8ADF474()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8ADF4B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8ADF4E4 + 4 * byte_1B8BA61C0[*v0]))(0x6E6F697461636F6CLL, 0xE800000000000000);
}

unint64_t sub_1B8ADF4E4()
{
  return 0xD000000000000014;
}

unint64_t sub_1B8ADF500()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B8ADF524()
{
  return 0x6962616C69617661;
}

uint64_t sub_1B8ADF544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AE05B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8ADF568(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1B8ADF574()
{
  sub_1B8ADFF9C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8ADF59C()
{
  sub_1B8ADFF9C();
  return sub_1B8B9C9EC();
}

uint64_t EventConferenceRoomModelObject.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBE68);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v16 = v1[1];
  v17 = v7;
  v15 = v1[2];
  v9 = *((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  v24 = *((unsigned __int8 *)v1 + 64);
  v14 = *((unsigned __int8 *)v1 + 65);
  v13 = *((_QWORD *)v1 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8ADFF9C();
  sub_1B8B9C9C8();
  v19 = v17;
  v20 = v16;
  v21 = v15;
  v22 = v9;
  v23 = v8;
  v25 = 0;
  sub_1B8ADFFE0();
  v10 = v18;
  sub_1B8B9C8A8();
  if (!v10)
  {
    v11 = v13;
    LOBYTE(v19) = 1;
    sub_1B8B9C878();
    LOBYTE(v19) = 2;
    sub_1B8B9C878();
    *(_QWORD *)&v19 = v11;
    v25 = 3;
    type metadata accessor for EKAvailabilitySpanType(0);
    sub_1B8AE0778(&qword_1EF1BBE80, (uint64_t)&protocol conformance descriptor for EKAvailabilitySpanType);
    sub_1B8B9C8A8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EventConferenceRoomModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventDirectoryRecordModelObject.hash(into:)();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t EventConferenceRoomModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBE88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8ADFF9C();
  sub_1B8B9C9B0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v35 = 0;
  sub_1B8AE0024();
  sub_1B8B9C818();
  v9 = v27;
  v23 = v26;
  v24 = a2;
  v10 = v29;
  v11 = v31;
  v21 = v30;
  v22 = v28;
  v12 = v33;
  v20 = v32;
  LOBYTE(v26) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = sub_1B8B9C7E8();
  LOBYTE(v26) = 2;
  v19 = sub_1B8B9C7E8();
  type metadata accessor for EKAvailabilitySpanType(0);
  v35 = 3;
  sub_1B8AE0778(&qword_1EF1BBE98, (uint64_t)&protocol conformance descriptor for EKAvailabilitySpanType);
  sub_1B8B9C818();
  v34 &= 1u;
  v14 = v19 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v25;
  v15 = v26;
  v17 = v24;
  *v24 = v23;
  v17[1] = v16;
  v17[2] = v22;
  v17[3] = v10;
  v17[4] = v21;
  v17[5] = v11;
  v17[6] = v20;
  v17[7] = v12;
  *((_BYTE *)v17 + 64) = v34;
  *((_BYTE *)v17 + 65) = v14;
  v17[9] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8ADFB34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 56) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8ADFBA0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1B8ADFBA8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t sub_1B8ADFBB0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_1B8ADFBBC()
{
  EventDirectoryRecordModelObject.hash(into:)();
  sub_1B8B9C980();
  sub_1B8B9C980();
  return sub_1B8B9C974();
}

uint64_t sub_1B8ADFC38()
{
  sub_1B8B9C968();
  EventDirectoryRecordModelObject.hash(into:)();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8ADFCF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return EventConferenceRoomModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8ADFD04(_QWORD *a1)
{
  return EventConferenceRoomModelObject.encode(to:)(a1);
}

void EventConferenceRoomModelObject.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  id v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  EventDirectoryRecordModelObject.init(_:)(objc_msgSend(a1, sel_location), (uint64_t)v15);
  v4 = v18;
  if (v18)
  {
    v5 = v16;
    v14 = v15[1];
    v12 = v17;
    v13 = v15[0];
    v6 = objc_msgSend(a1, sel_supportsAvailability);
    v7 = objc_msgSend(a1, sel_availabilityRequestInProgress);
    v8 = objc_msgSend(a1, sel_availability);

    v9 = v12;
    v10 = 256;
    if (!v7)
      v10 = 0;
    v11 = v10 | v6;
    *(_OWORD *)a2 = v13;
    *(_OWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 32) = v5;
  }
  else
  {

    v11 = 0;
    v8 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v9 = 0uLL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  *(_OWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v8;
}

uint64_t sub_1B8ADFE24()
{
  sub_1B8AE0778(&qword_1EF1BBEC0, (uint64_t)&unk_1B8BA51D0);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8ADFE90()
{
  sub_1B8AE0778(&qword_1EF1BBEC0, (uint64_t)&unk_1B8BA51D0);
  return sub_1B8B9C2A8();
}

BOOL _s13CalendarUIKit30EventConferenceRoomModelObjectV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _BOOL4 v14;
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 65);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 64);
  v10 = *(_BYTE *)(a2 + 65);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v12;
  v19[2] = *(_OWORD *)(a1 + 32);
  v20 = v2;
  v21 = v3;
  v13 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v13;
  v16[2] = *(_OWORD *)(a2 + 32);
  v17 = v7;
  v18 = v8;
  if ((_s13CalendarUIKit31EventDirectoryRecordModelObjectV2eeoiySbAC_ACtFZ_0(v19, v16) & 1) == 0)
    return 0;
  v14 = ((v5 ^ v10) & 1) == 0 && v6 == v11;
  return ((v4 ^ v9) & 1) == 0 && v14;
}

unint64_t sub_1B8ADFF9C()
{
  unint64_t result;

  result = qword_1EF1BBE70;
  if (!qword_1EF1BBE70)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA63F4, &type metadata for EventConferenceRoomModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE70);
  }
  return result;
}

unint64_t sub_1B8ADFFE0()
{
  unint64_t result;

  result = qword_1EF1BBE78;
  if (!qword_1EF1BBE78)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventDirectoryRecordModelObject, &type metadata for EventDirectoryRecordModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE78);
  }
  return result;
}

unint64_t sub_1B8AE0024()
{
  unint64_t result;

  result = qword_1EF1BBE90;
  if (!qword_1EF1BBE90)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventDirectoryRecordModelObject, &type metadata for EventDirectoryRecordModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BBE90);
  }
  return result;
}

_UNKNOWN **sub_1B8AE0068()
{
  return &protocol witness table for EventDirectoryRecordModelObject;
}

unint64_t sub_1B8AE0078()
{
  unint64_t result;

  result = qword_1EF1BBEA0;
  if (!qword_1EF1BBEA0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventConferenceRoomModelObject, &type metadata for EventConferenceRoomModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BBEA0);
  }
  return result;
}

uint64_t destroy for EventDirectoryRecordModelObject()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventConferenceRoomModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EventConferenceRoomModelObject(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for EventConferenceRoomModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventConferenceRoomModelObject(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventConferenceRoomModelObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventConferenceRoomModelObject()
{
  return &type metadata for EventConferenceRoomModelObject;
}

uint64_t getEnumTagSinglePayload for EventConferenceRoomModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventConferenceRoomModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B8AE0454 + 4 * byte_1B8BA61C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B8AE0488 + 4 * byte_1B8BA61C4[v4]))();
}

uint64_t sub_1B8AE0488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AE0490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AE0498);
  return result;
}

uint64_t sub_1B8AE04A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AE04ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B8AE04B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AE04B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1B8AE04C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EventConferenceRoomModelObject.CodingKeys()
{
  return &type metadata for EventConferenceRoomModelObject.CodingKeys;
}

unint64_t sub_1B8AE04E0()
{
  unint64_t result;

  result = qword_1EF1BBEA8;
  if (!qword_1EF1BBEA8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA63CC, &type metadata for EventConferenceRoomModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BBEA8);
  }
  return result;
}

unint64_t sub_1B8AE0528()
{
  unint64_t result;

  result = qword_1EF1BBEB0;
  if (!qword_1EF1BBEB0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA633C, &type metadata for EventConferenceRoomModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BBEB0);
  }
  return result;
}

unint64_t sub_1B8AE0570()
{
  unint64_t result;

  result = qword_1EF1BBEB8;
  if (!qword_1EF1BBEB8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA6364, &type metadata for EventConferenceRoomModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BBEB8);
  }
  return result;
}

uint64_t sub_1B8AE05B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B8BB6C60 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001B8BB6C80 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B8AE0778(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EKAvailabilitySpanType(255);
    result = MEMORY[0x1BCCB79D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CUIKEventEditorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CUIKEventEditorView()
{
  return swift_release();
}

_QWORD *assignWithCopy for CUIKEventEditorView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for CUIKEventEditorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CUIKEventEditorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKEventEditorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIKEventEditorView()
{
  return &type metadata for CUIKEventEditorView;
}

uint64_t sub_1B8AE08F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AE0900@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  _QWORD v22[10];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEF0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v22 - v10;
  sub_1B8AE0B08(a1, a2, (_QWORD *)((char *)v22 - v10));
  type metadata accessor for CUIKEventEditorViewModel(0);
  sub_1B8AE2010();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v12 = v22[7];
  v13 = v22[8];
  v14 = v22[9];
  swift_getKeyPath();
  v22[1] = v12;
  v22[2] = v13;
  v22[3] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEF8);
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v15 = v22[4];
  v16 = v22[5];
  v17 = (void *)v22[6];
  KeyPath = swift_getKeyPath();
  sub_1B8AE2068((uint64_t)v11, (uint64_t)v9);
  sub_1B8AE2068((uint64_t)v9, a3);
  v19 = a3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF00) + 48);
  *(_QWORD *)v19 = v15;
  *(_QWORD *)(v19 + 8) = v16;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = KeyPath;
  *(_BYTE *)(v19 + 32) = 0;
  v20 = v17;
  swift_retain();
  swift_retain();
  sub_1B8AE20B0(KeyPath, 0);
  sub_1B8AE20BC((uint64_t)v11);

  swift_release();
  swift_release();
  sub_1B8AE20FC(KeyPath, 0);
  return sub_1B8AE20BC((uint64_t)v9);
}

void sub_1B8AE0B08(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t KeyPath;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  void *v115;
  uint64_t v116;
  id v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;

  v93 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1E0C80A78](v5);
  v125 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeAndDateView();
  v8 = MEMORY[0x1E0C80A78](v7);
  v116 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v129 = (uint64_t)&v83 - v10;
  v124 = (id)a2[2];
  v117 = objc_msgSend(v124, sel_organizer);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  swift_release();
  v115 = v143;
  v11 = type metadata accessor for CUIKEventEditorViewModel(0);
  sub_1B8AE2010();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v12 = (uint64_t)v147;
  v13 = v148;
  v14 = *(double *)&v149;
  swift_getKeyPath();
  v140 = v12;
  v141 = v13;
  v142 = v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEF8);
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v113 = v143;
  v112 = v144;
  v92 = v145;
  v111 = v146;
  KeyPath = swift_getKeyPath();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v16 = (uint64_t)v143;
  v17 = v144;
  v18 = *(double *)&v145;
  swift_getKeyPath();
  v140 = v16;
  v141 = v17;
  v142 = v18;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v109 = v147;
  v108 = v148;
  v114 = v149;
  v95 = v11;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v126 = v140;
  v127 = v141;
  v91 = LOBYTE(v142);
  v128 = swift_getKeyPath();
  v130 = a1;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v19 = v143;
  v20 = v144;
  v21 = v145;
  swift_getKeyPath();
  v147 = v19;
  v148 = v20;
  v149 = v21;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v96 = a2;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v22 = v147;
  v23 = v148;
  v24 = (uint64_t)v149;
  swift_getKeyPath();
  v137 = v22;
  v138 = v23;
  v139 = v24;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v25 = v140;
  v123 = v141;
  v26 = v142;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v27 = v137;
  v28 = v138;
  v29 = v139;
  swift_getKeyPath();
  v131 = v27;
  v132 = v28;
  v133 = v29;
  v94 = v15;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8B074EC(v125, v25, v123, v134, v135, v136, v129, v26);
  v30 = v96;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v31 = (uint64_t)v143;
  v32 = v144;
  v33 = *(double *)&v145;
  swift_getKeyPath();
  v140 = v31;
  v141 = v32;
  v142 = v33;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v34 = v148;
  v35 = v149;
  v107 = v30[7];
  v140 = (uint64_t)v147;
  v141 = v148;
  v142 = *(double *)&v149;
  v120 = v147;
  swift_retain();
  v125 = v34;
  swift_retain();
  v36 = v35;
  v105 = v36;
  swift_bridgeObjectRetain();
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF10);
  MEMORY[0x1BCCB60C8](&v137, v37);
  v38 = v137;
  v39 = objc_msgSend(v137, sel_calendarIdentifier);

  v90 = sub_1B8B9C17C();
  v106 = v40;

  swift_release();
  swift_release();
  v104 = objc_msgSend(v124, sel_organizer);
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v102 = v143;
  v103 = v144;
  v89 = v145;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v41 = (uint64_t)v143;
  v42 = v144;
  v43 = *(double *)&v145;
  swift_getKeyPath();
  v140 = v41;
  v141 = v42;
  v142 = v43;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v121 = v147;
  v122 = v148;
  v123 = (uint64_t)v149;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v100 = v140;
  v101 = v141;
  v88 = LOBYTE(v142);
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v44 = v143;
  v45 = v144;
  v46 = v145;
  swift_getKeyPath();
  v147 = v44;
  v148 = v45;
  v149 = v46;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v124 = v137;
  v119 = v138;
  v87 = v139;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v47 = (uint64_t)v147;
  v48 = v148;
  v49 = *(double *)&v149;
  swift_getKeyPath();
  v140 = v47;
  v141 = v48;
  v142 = v49;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v98 = v131;
  v99 = v132;
  v86 = v133;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v50 = (uint64_t)v143;
  v51 = v144;
  v52 = *(double *)&v145;
  swift_getKeyPath();
  v140 = v50;
  v141 = v51;
  v142 = v52;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v118 = v147;
  v97 = v148;
  v85 = v149;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v53 = (uint64_t)v147;
  v54 = v148;
  v55 = *(double *)&v149;
  swift_getKeyPath();
  v140 = v53;
  v141 = v54;
  v142 = v55;
  sub_1B8B9BF54();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v96 = v143;
  v95 = v144;
  v84 = v145;
  v94 = v146;
  v130 = swift_getKeyPath();
  LOBYTE(v143) = 0;
  LOBYTE(v147) = 0;
  v56 = v116;
  sub_1B8AE2160(v129, v116);
  v57 = v93;
  v58 = v115;
  *v93 = v117;
  v57[1] = v58;
  v59 = v112;
  v57[2] = v113;
  v57[3] = v59;
  v60 = v111;
  v57[4] = v92;
  v57[5] = v60;
  v61 = KeyPath;
  v57[6] = KeyPath;
  *((_BYTE *)v57 + 56) = 0;
  v62 = v108;
  v57[8] = v109;
  v57[9] = v62;
  v63 = v126;
  v57[10] = v114;
  v57[11] = v63;
  v57[12] = v127;
  *((_BYTE *)v57 + 104) = v91;
  v57[14] = v128;
  *((_BYTE *)v57 + 120) = 0;
  v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF18);
  sub_1B8AE2160(v56, (uint64_t)v57 + v64[20]);
  v65 = (_QWORD *)((char *)v57 + v64[24]);
  v66 = v125;
  *v65 = v120;
  v65[1] = v66;
  v67 = v107;
  v65[2] = v105;
  v65[3] = v67;
  v68 = v106;
  v65[4] = v90;
  v65[5] = v68;
  v65[6] = 0;
  v69 = (char *)v57 + v64[28];
  v70 = v102;
  *(_QWORD *)v69 = v104;
  *((_QWORD *)v69 + 1) = v70;
  *((_QWORD *)v69 + 2) = v103;
  v69[24] = v89;
  v71 = (char *)v57 + v64[32];
  v72 = v122;
  *(_QWORD *)v71 = v121;
  *((_QWORD *)v71 + 1) = v72;
  v73 = v100;
  *((_QWORD *)v71 + 2) = v123;
  *((_QWORD *)v71 + 3) = v73;
  *((_QWORD *)v71 + 4) = v101;
  v71[40] = v88;
  v74 = (char *)v57 + v64[36];
  v75 = v119;
  *(_QWORD *)v74 = v124;
  *((_QWORD *)v74 + 1) = v75;
  v74[16] = v87;
  v76 = v99;
  *((_QWORD *)v74 + 3) = v98;
  *((_QWORD *)v74 + 4) = v76;
  v74[40] = v86;
  v77 = (_QWORD *)((char *)v57 + v64[40]);
  v78 = v97;
  *v77 = v118;
  v77[1] = v78;
  v77[2] = v85;
  v79 = (char *)v57 + v64[44];
  v80 = v95;
  *(_QWORD *)v79 = v96;
  *((_QWORD *)v79 + 1) = v80;
  v81 = v94;
  *((_QWORD *)v79 + 2) = v84;
  *((_QWORD *)v79 + 3) = v81;
  *((_QWORD *)v79 + 4) = v130;
  v79[40] = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v117 = v117;
  swift_bridgeObjectRetain();
  sub_1B8AE20B0(v61, 0);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v114 = v114;
  sub_1B8AE20B0(v128, 0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v93 = v105;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v105 = v104;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v82 = v130;
  sub_1B8AE20B0(v130, 0);
  sub_1B8AE21A4(v129);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1B8AE20FC(v82, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8AE21A4(v116);
  LOBYTE(v58) = (_BYTE)v147;
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_1B8AE20FC(v128, (char)v58);
  LOBYTE(v58) = (_BYTE)v143;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1B8AE20FC(KeyPath, (char)v58);
  swift_bridgeObjectRelease();

}

uint64_t sub_1B8AE1D80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1B8AE1FCC();
  result = sub_1B8B9B6F0();
  *a1 = v3;
  return result;
}

uint64_t sub_1B8AE1DCC()
{
  sub_1B8AE1FCC();
  return sub_1B8B9B6FC();
}

uint64_t sub_1B8AE1E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  char v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEC8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v1[1];
  v13 = *v1;
  v14 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBED0);
  sub_1B8ADE950(&qword_1EF1BBED8, &qword_1EF1BBED0, MEMORY[0x1E0CE0678]);
  sub_1B8B9BB04();
  KeyPath = swift_getKeyPath();
  v9 = *(_BYTE *)(v7 + 49);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  v10 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEE0) + 36);
  *(_QWORD *)v10 = KeyPath;
  *(_BYTE *)(v10 + 8) = v9;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B8AE1F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8AE0900(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1B8AE1F38@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1B8AE1FCC();
  result = sub_1B8B9B6F0();
  *a1 = v3;
  return result;
}

uint64_t sub_1B8AE1F84()
{
  sub_1B8AE1FCC();
  return sub_1B8B9B6FC();
}

unint64_t sub_1B8AE1FCC()
{
  unint64_t result;

  result = qword_1EF1BBEE8;
  if (!qword_1EF1BBEE8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAE8FC, &type metadata for EditableKey);
    atomic_store(result, (unint64_t *)&qword_1EF1BBEE8);
  }
  return result;
}

unint64_t sub_1B8AE2010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BC9E0;
  if (!qword_1EF1BC9E0)
  {
    v1 = type metadata accessor for CUIKEventEditorViewModel(255);
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAEF10, v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BC9E0);
  }
  return result;
}

uint64_t sub_1B8AE2068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8AE20B0(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_1B8AE20BC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBEF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8AE20FC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t sub_1B8AE2160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeAndDateView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8AE21A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeAndDateView();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B8AE21E4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBF20;
  if (!qword_1EF1BBF20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBEE0);
    v2[0] = sub_1B8ADE950(&qword_1EF1BBF28, &qword_1EF1BBEC8, MEMORY[0x1E0CDD958]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BBF30, &qword_1EF1BBF38, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBF20);
  }
  return result;
}

uint64_t dispatch thunk of EventConferenceRoomModel.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventConferenceRoomModel.supportsAvailability.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventConferenceRoomModel.availabilityRequestInProgress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventConferenceRoomModel.availability.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

ValueMetadata *type metadata accessor for FamilyCalendarFlowButtonModifier()
{
  return &type metadata for FamilyCalendarFlowButtonModifier;
}

uint64_t sub_1B8AE22B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AE22C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v59 = a1;
  v67 = a2;
  v66 = sub_1B8B9B594();
  MEMORY[0x1E0C80A78](v66);
  v65 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1B8B9B924();
  v63 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9B408();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF40);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF48);
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v57 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF50);
  MEMORY[0x1E0C80A78](v58);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF58);
  MEMORY[0x1E0C80A78](v62);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CD8748], v5);
  KeyPath = swift_getKeyPath();
  v18 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF60);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v18 + *(int *)(v19 + 28), v8, v5);
  *v18 = KeyPath;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF68);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v11, v59, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1B8B9B918();
  sub_1B8AE2758();
  sub_1B8AE27F4();
  v21 = v57;
  v22 = v60;
  sub_1B8B9BBF4();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v4, v22);
  sub_1B8ADE894((uint64_t)v11, &qword_1EF1BBF40);
  v23 = v65;
  v24 = &v65[*(int *)(v66 + 20)];
  v25 = *MEMORY[0x1E0CDB0C8];
  v26 = sub_1B8B9B798();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  __asm { FMOV            V0.2D, #14.0 }
  v32 = (uint64_t)v23;
  *v23 = _Q0;
  v33 = (uint64_t)&v14[*(int *)(v58 + 36)];
  sub_1B8AE283C((uint64_t)v23, v33);
  *(_WORD *)(v33 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF90) + 36)) = 256;
  v34 = v61;
  v35 = v64;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v14, v21, v64);
  sub_1B8AE2880(v32);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
  LOBYTE(v35) = sub_1B8B9B9D8();
  sub_1B8B9B3E4();
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_1B8ADE850((uint64_t)v14, (uint64_t)v16, &qword_1EF1BBF50);
  v44 = &v16[*(int *)(v62 + 36)];
  *v44 = v35;
  *((_QWORD *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  sub_1B8ADE894((uint64_t)v14, &qword_1EF1BBF50);
  LOBYTE(v35) = sub_1B8B9B9F0();
  sub_1B8B9B3E4();
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v67;
  sub_1B8ADE850((uint64_t)v16, v67, &qword_1EF1BBF58);
  v54 = v53 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF98) + 36);
  *(_BYTE *)v54 = v35;
  *(_QWORD *)(v54 + 8) = v46;
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_QWORD *)(v54 + 32) = v52;
  *(_BYTE *)(v54 + 40) = 0;
  return sub_1B8ADE894((uint64_t)v16, &qword_1EF1BBF58);
}

uint64_t sub_1B8AE2734()
{
  return sub_1B8B9B468();
}

unint64_t sub_1B8AE2758()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBF70;
  if (!qword_1EF1BBF70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBF40);
    v2[0] = sub_1B8ADE950(&qword_1EF1BBF78, &qword_1EF1BBF68, MEMORY[0x1E0CDBF18]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BBF80, &qword_1EF1BBF60, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBF70);
  }
  return result;
}

unint64_t sub_1B8AE27F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BBF88;
  if (!qword_1EF1BBF88)
  {
    v1 = sub_1B8B9B924();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDCDA8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BBF88);
  }
  return result;
}

uint64_t sub_1B8AE283C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B8B9B594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8AE2880(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B8B9B594();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8AE28BC()
{
  return sub_1B8AE2904(&qword_1EF1BBFA0, &qword_1EF1BBF98, sub_1B8AE28E8);
}

uint64_t sub_1B8AE28E8()
{
  return sub_1B8AE2904(&qword_1EF1BBFA8, &qword_1EF1BBF58, (uint64_t (*)(void))sub_1B8AE2970);
}

uint64_t sub_1B8AE2904(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CD9750];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8AE2970()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_1EF1BBFB0;
  if (!qword_1EF1BBFB0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBF50);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBF40);
    v2[3] = sub_1B8B9B924();
    v2[4] = sub_1B8AE2758();
    v2[5] = sub_1B8AE27F4();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_1B8ADE950(&qword_1EF1BBFB8, &qword_1EF1BBF90, MEMORY[0x1E0CD89F8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBFB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIKProposedTimeView()
{
  return &type metadata for CUIKProposedTimeView;
}

uint64_t sub_1B8AE2A4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AE2A5C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  char *v26;
  id v27;
  id v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeAndDateView();
  v7 = MEMORY[0x1E0C80A78](v6);
  v34 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - v9;
  type metadata accessor for CUIKProposedTimeViewModel();
  sub_1B8AE2FAC();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v31 = v40;
  v32 = v39;
  v33 = v41;
  v30 = v42;
  KeyPath = swift_getKeyPath();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v11 = v39;
  v12 = v40;
  v13 = v41;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  sub_1B8B074EC((uint64_t)v5, v11, v12, v36, v37, v38, (uint64_t)v10, v13);
  v27 = *(id *)(a1 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer);
  v28 = v27;
  sub_1B8B9B504();
  swift_getKeyPath();
  sub_1B8B9B510();
  swift_release();
  swift_release();
  v14 = v39;
  v15 = v40;
  v16 = LOBYTE(v41);
  v26 = v10;
  v17 = v34;
  sub_1B8AE2160((uint64_t)v10, v34);
  v18 = v31;
  v19 = (double *)v35;
  *v35 = v32;
  *((_QWORD *)v19 + 1) = v18;
  v21 = KeyPath;
  v20 = v30;
  v19[2] = v33;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = v21;
  *((_BYTE *)v19 + 40) = 0;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBFF0);
  sub_1B8AE2160(v17, (uint64_t)v19 + *(int *)(v22 + 48));
  v23 = (char *)v19 + *(int *)(v22 + 64);
  *(_QWORD *)v23 = v27;
  *((_QWORD *)v23 + 1) = v14;
  *((_QWORD *)v23 + 2) = v15;
  v23[24] = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B8AE20B0(v21, 0);
  swift_retain();
  swift_retain();
  v24 = v28;
  sub_1B8AE21A4((uint64_t)v26);
  swift_release();
  swift_release();

  sub_1B8AE21A4(v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_1B8AE20FC(v21, 0);
}

uint64_t sub_1B8AE2E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBFC0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v1[1];
  v12 = *v1;
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBFC8);
  sub_1B8AE2F28();
  sub_1B8B9BB04();
  KeyPath = swift_getKeyPath();
  LOBYTE(v7) = *(_BYTE *)(v7 + 32);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  v9 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBFE8) + 36);
  *(_QWORD *)v9 = KeyPath;
  *(_BYTE *)(v9 + 8) = v7;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B8AE2F20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1B8AE2A5C(*(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1B8AE2F28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF1BBFD0;
  if (!qword_1EF1BBFD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBFC8);
    v2 = sub_1B8ADE950(&qword_1EF1BBFD8, &qword_1EF1BBFE0, MEMORY[0x1E0CE0678]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDF698], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBFD0);
  }
  return result;
}

unint64_t sub_1B8AE2FAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BCDB0;
  if (!qword_1EF1BCDB0)
  {
    v1 = type metadata accessor for CUIKProposedTimeViewModel();
    result = MEMORY[0x1BCCB79D0](&unk_1B8BABD70, v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BCDB0);
  }
  return result;
}

unint64_t sub_1B8AE3020()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BBFF8;
  if (!qword_1EF1BBFF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BBFE8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC000, &qword_1EF1BBFC0, MEMORY[0x1E0CDD958]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BBF30, &qword_1EF1BBF38, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BBFF8);
  }
  return result;
}

id EKAlarmModelWrapper.ekAlarm.getter()
{
  id *v0;

  return *v0;
}

void EKAlarmModelWrapper.ekAlarm.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKAlarmModelWrapper.ekAlarm.modify())()
{
  return nullsub_1;
}

id EKAlarmModelWrapper.id.getter()
{
  id *v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(*v0, sel_UUID);
  if (result)
  {
    v2 = result;
    v3 = sub_1B8B9C17C();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id EKAlarmModelWrapper.relativeOffset.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_relativeOffset);
}

uint64_t EKAlarmModelWrapper.absoluteDate.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_absoluteDate);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B0D8();

    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id EKAlarmModelWrapper.isDefaultAlarm.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isDefaultAlarm);
}

CalendarUIKit::EKAlarmModelWrapper __swiftcall EKAlarmModelWrapper.init(_:)(CalendarUIKit::EKAlarmModelWrapper result)
{
  CalendarUIKit::EKAlarmModelWrapper *v1;

  v1->ekAlarm.super.super.isa = result.ekAlarm.super.super.isa;
  return result;
}

id sub_1B8AE3214()
{
  id *v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(*v0, sel_UUID);
  if (result)
  {
    v2 = result;
    v3 = sub_1B8B9C17C();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1B8AE3270()
{
  id *v0;

  return objc_msgSend(*v0, sel_relativeOffset);
}

uint64_t sub_1B8AE3280@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_absoluteDate);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B0D8();

    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id sub_1B8AE3304()
{
  id *v0;

  return objc_msgSend(*v0, sel_isDefaultAlarm);
}

unint64_t sub_1B8AE3324(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8AE3348();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8AE3348()
{
  unint64_t result;

  result = qword_1EF1BC008;
  if (!qword_1EF1BC008)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKAlarmModelWrapper, &type metadata for EKAlarmModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1BC008);
  }
  return result;
}

uint64_t sub_1B8AE338C()
{
  return MEMORY[0x1E0DEA978];
}

void sub_1B8AE3398(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*v1, sel_UUID);
  if (v3)
  {
    v4 = v3;
    v5 = sub_1B8B9C17C();
    v7 = v6;

    *a1 = v5;
    a1[1] = v7;
  }
  else
  {
    __break(1u);
  }
}

ValueMetadata *type metadata accessor for EKAlarmModelWrapper()
{
  return &type metadata for EKAlarmModelWrapper;
}

BOOL EventAttendeeModel.hasRealComment.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  (*(void (**)(void))(a2 + 40))();
  if (!v2)
    return 0;
  v3 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v3, sel_CalStringByRemovingAutoComment);

  if (!v4)
    return 0;
  v5 = sub_1B8B9C17C();
  v7 = v6;

  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  return v8 != 0;
}

unint64_t EventAttendeeModel.statusImageName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  v3 = 0xD000000000000018;
  v4 = 0xD000000000000013;
  if (v2 == 3)
    v4 = 0xD000000000000011;
  if (v2 != 4)
    v3 = v4;
  if (v2 == 2)
    return 0xD000000000000015;
  else
    return v3;
}

uint64_t EventAttendeeModel.statusColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  switch(v2)
  {
    case 4:
      return sub_1B8B9BDBC();
    case 3:
      return sub_1B8B9BD68();
    case 2:
      return sub_1B8B9BDA4();
  }
  return sub_1B8B9BD74();
}

BOOL EventAttendeeModel.isRealPerson.getter(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 32))() & 0xFFFFFFFFFFFFFFFELL) != 2;
}

uint64_t (*EventParticipantModelObject.name.modify())()
{
  return nullsub_1;
}

uint64_t (*EventParticipantModelObject.emailAddress.modify())()
{
  return nullsub_1;
}

uint64_t (*EventParticipantModelObject.phoneNumber.modify())()
{
  return nullsub_1;
}

uint64_t EventParticipantModelObject.url.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8AE4744(type metadata accessor for EventParticipantModelObject, a1);
}

uint64_t type metadata accessor for EventParticipantModelObject(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B9518);
}

uint64_t sub_1B8AE3600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t EventParticipantModelObject.url.setter(uint64_t a1)
{
  return sub_1B8AE4784(a1, type metadata accessor for EventParticipantModelObject);
}

uint64_t sub_1B8AE3654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*EventParticipantModelObject.url.modify())()
{
  type metadata accessor for EventParticipantModelObject(0);
  return nullsub_1;
}

uint64_t EventParticipantModelObject.id.getter()
{
  return sub_1B8AE47E8(type metadata accessor for EventParticipantModelObject);
}

uint64_t EventParticipantModelObject.id.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4834(a1, a2, type metadata accessor for EventParticipantModelObject);
}

uint64_t (*EventParticipantModelObject.id.modify())()
{
  type metadata accessor for EventParticipantModelObject(0);
  return nullsub_1;
}

uint64_t EventParticipantModelObject.isCurrentUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EventParticipantModelObject(0) + 36));
}

uint64_t EventParticipantModelObject.isCurrentUser.setter(char a1)
{
  return sub_1B8AE48CC(a1, type metadata accessor for EventParticipantModelObject);
}

uint64_t (*EventParticipantModelObject.isCurrentUser.modify())()
{
  type metadata accessor for EventParticipantModelObject(0);
  return nullsub_1;
}

uint64_t EventParticipantModelObject.contactID.getter()
{
  return sub_1B8AE492C(type metadata accessor for EventParticipantModelObject);
}

uint64_t EventParticipantModelObject.contactID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4978(a1, a2, type metadata accessor for EventParticipantModelObject);
}

uint64_t (*EventParticipantModelObject.contactID.modify())()
{
  type metadata accessor for EventParticipantModelObject(0);
  return nullsub_1;
}

uint64_t EventParticipantModelObject.init(name:emailAddress:phoneNumber:url:id:isCurrentUser:contactID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;

  v19 = (int *)type metadata accessor for EventParticipantModelObject(0);
  v20 = (uint64_t)a9 + v19[7];
  v21 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = (_QWORD *)((char *)a9 + v19[10]);
  *v22 = 0;
  v22[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  sub_1B8AE3654(a7, v20);
  v23 = (_QWORD *)((char *)a9 + v19[8]);
  *v23 = a8;
  v23[1] = a10;
  *((_BYTE *)a9 + v19[9]) = a11;
  result = swift_bridgeObjectRelease();
  *v22 = a12;
  v22[1] = a13;
  return result;
}

uint64_t EventParticipantModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for EventParticipantModelObject(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = (uint64_t)&v10[*(int *)(v8 + 28)];
  v12 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (uint64_t *)&v10[v7[10]];
  *v13 = 0;
  v13[1] = 0;
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  *(_QWORD *)v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
  *((_QWORD *)v10 + 1) = v16;
  v17 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  *((_QWORD *)v10 + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
  *((_QWORD *)v10 + 3) = v19;
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  *((_QWORD *)v10 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 40))(v20, v21);
  *((_QWORD *)v10 + 5) = v22;
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
  sub_1B8AE3654((uint64_t)v6, v11);
  v25 = a1[3];
  v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  v28 = (uint64_t *)&v10[v7[8]];
  *v28 = v27;
  v28[1] = v29;
  v30 = a1[3];
  v31 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v30);
  v10[v7[9]] = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31) & 1;
  v32 = a1[3];
  v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v32);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33);
  v36 = v35;
  swift_bridgeObjectRelease();
  *v13 = v34;
  v13[1] = v36;
  sub_1B8AE7B90((uint64_t)v10, a2, type metadata accessor for EventParticipantModelObject);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B8AE7BD4((uint64_t)v10, type metadata accessor for EventParticipantModelObject);
}

uint64_t EventParticipantModelObject.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = sub_1B8B9B054();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[1])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v0[3])
      goto LABEL_3;
LABEL_6:
    sub_1B8B9C980();
    if (v0[5])
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1B8B9C980();
  if (!v0[3])
    goto LABEL_6;
LABEL_3:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (v0[5])
  {
LABEL_4:
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_1B8B9C980();
LABEL_8:
  v8 = type metadata accessor for EventParticipantModelObject(0);
  sub_1B8AE3600((uint64_t)v0 + *(int *)(v8 + 28), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1B8B9C980();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_1B8B9C980();
    sub_1B8ADBDEC(&qword_1EF1BC010, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    sub_1B8B9C0C8();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C980();
  if (!*(_QWORD *)((char *)v0 + *(int *)(v8 + 40) + 8))
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8AE3DE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8AE3E0C
                                                            + 4 * asc_1B8BA6A00[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B8AE3E0C()
{
  return 0x6464416C69616D65;
}

uint64_t sub_1B8AE3E2C()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_1B8AE3E4C()
{
  return 7107189;
}

uint64_t sub_1B8AE3E5C()
{
  return 25705;
}

uint64_t sub_1B8AE3E68()
{
  return 0x6E65727275437369;
}

uint64_t sub_1B8AE3E8C()
{
  return 0x49746361746E6F63;
}

uint64_t sub_1B8AE3EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AEAA04(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AE3ECC(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1B8AE3ED8()
{
  sub_1B8AE7B38();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AE3F00()
{
  sub_1B8AE7B38();
  return sub_1B8B9C9EC();
}

uint64_t EventParticipantModelObject.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC018);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE7B38();
  sub_1B8B9C9C8();
  v8[15] = 0;
  sub_1B8B9C848();
  if (!v1)
  {
    v8[14] = 1;
    sub_1B8B9C848();
    v8[13] = 2;
    sub_1B8B9C848();
    type metadata accessor for EventParticipantModelObject(0);
    v8[12] = 3;
    sub_1B8B9B054();
    sub_1B8ADBDEC(&qword_1EF1BC028, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1B8B9C860();
    v8[11] = 4;
    sub_1B8B9C86C();
    v8[10] = 5;
    sub_1B8B9C878();
    v8[9] = 6;
    sub_1B8B9C848();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EventParticipantModelObject.hashValue.getter()
{
  return sub_1B8AE6D24((void (*)(_BYTE *))EventParticipantModelObject.hash(into:));
}

uint64_t EventParticipantModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v3);
  v30 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC030);
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v6 = type metadata accessor for EventParticipantModelObject(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = (uint64_t)&v9[*(int *)(v7 + 28)];
  v11 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v31 = v6;
  v12 = &v9[*(int *)(v6 + 40)];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v33 = a1;
  v34 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE7B38();
  v13 = v35;
  sub_1B8B9C9B0();
  if (v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8ADE894(v10, &qword_1ED1B3020);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v5;
    v42 = 0;
    *(_QWORD *)v9 = sub_1B8B9C7A0();
    *((_QWORD *)v9 + 1) = v15;
    v41 = 1;
    *((_QWORD *)v9 + 2) = sub_1B8B9C7A0();
    *((_QWORD *)v9 + 3) = v16;
    v40 = 2;
    *((_QWORD *)v9 + 4) = sub_1B8B9C7A0();
    *((_QWORD *)v9 + 5) = v17;
    v39 = 3;
    sub_1B8ADBDEC(&qword_1EF1BC038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v18 = (uint64_t)v30;
    sub_1B8B9C7D0();
    sub_1B8AE3654(v18, v10);
    v38 = 4;
    v19 = sub_1B8B9C7DC();
    v20 = v31;
    v21 = (uint64_t *)&v9[*(int *)(v31 + 32)];
    *v21 = v19;
    v21[1] = v22;
    v37 = 5;
    v9[*(int *)(v20 + 36)] = sub_1B8B9C7E8() & 1;
    v36 = 6;
    v23 = sub_1B8B9C7A0();
    v25 = v24;
    (*(void (**)(_QWORD, uint64_t))(v14 + 8))(0, v32);
    v26 = (uint64_t *)v34;
    swift_bridgeObjectRelease();
    *v26 = v23;
    v26[1] = v25;
    sub_1B8AE7B90((uint64_t)v9, v29, type metadata accessor for EventParticipantModelObject);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    return sub_1B8AE7BD4((uint64_t)v9, type metadata accessor for EventParticipantModelObject);
  }
}

uint64_t (*sub_1B8AE4568())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE457C())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE4590())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE45A4())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE45B4())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE45C8())()
{
  return nullsub_1;
}

uint64_t (*sub_1B8AE45E0())()
{
  return nullsub_1;
}

uint64_t sub_1B8AE45F4(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE7248(a1, a2, (void (*)(_BYTE *))EventParticipantModelObject.hash(into:));
}

uint64_t sub_1B8AE4604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B8AE7298(a1, a2, a3, (void (*)(_BYTE *))EventParticipantModelObject.hash(into:));
}

uint64_t sub_1B8AE4610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EventParticipantModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8AE4624(_QWORD *a1)
{
  return EventParticipantModelObject.encode(to:)(a1);
}

uint64_t EventAttendeeModelObject.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventAttendeeModelObject.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventAttendeeModelObject.name.modify())()
{
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.emailAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*EventAttendeeModelObject.emailAddress.modify())()
{
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*EventAttendeeModelObject.phoneNumber.modify())()
{
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.url.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8AE4744(type metadata accessor for EventAttendeeModelObject, a1);
}

uint64_t sub_1B8AE4744@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a1(0) + 28);
  return sub_1B8AE3600(v4, a2);
}

uint64_t EventAttendeeModelObject.url.setter(uint64_t a1)
{
  return sub_1B8AE4784(a1, type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE4784(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a2(0) + 28);
  return sub_1B8AE3654(a1, v4);
}

uint64_t (*EventAttendeeModelObject.url.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.id.getter()
{
  return sub_1B8AE47E8(type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE47E8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t EventAttendeeModelObject.id.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4834(a1, a2, type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE4834(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 32));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*EventAttendeeModelObject.id.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.isCurrentUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 36));
}

uint64_t EventAttendeeModelObject.isCurrentUser.setter(char a1)
{
  return sub_1B8AE48CC(a1, type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE48CC(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*EventAttendeeModelObject.isCurrentUser.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.contactID.getter()
{
  return sub_1B8AE492C(type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE492C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 40));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t EventAttendeeModelObject.contactID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4978(a1, a2, type metadata accessor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE4978(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 40));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*EventAttendeeModelObject.contactID.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 44));
}

uint64_t EventAttendeeModelObject.status.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EventAttendeeModelObject(0);
  *(_QWORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*EventAttendeeModelObject.status.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.role.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 48));
}

uint64_t EventAttendeeModelObject.role.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EventAttendeeModelObject(0);
  *(_QWORD *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*EventAttendeeModelObject.role.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 52));
}

uint64_t EventAttendeeModelObject.type.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EventAttendeeModelObject(0);
  *(_QWORD *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*EventAttendeeModelObject.type.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.comment.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventAttendeeModelObject.comment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for EventAttendeeModelObject(0) + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*EventAttendeeModelObject.comment.modify())()
{
  type metadata accessor for EventAttendeeModelObject(0);
  return nullsub_1;
}

uint64_t EventAttendeeModelObject.init(name:emailAddress:phoneNumber:url:id:isCurrentUser:contactID:status:role:type:comment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t result;

  v23 = (int *)type metadata accessor for EventAttendeeModelObject(0);
  v24 = (uint64_t)a9 + v23[7];
  v25 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = (_QWORD *)((char *)a9 + v23[10]);
  *v26 = 0;
  v26[1] = 0;
  v27 = (_QWORD *)((char *)a9 + v23[14]);
  *v27 = 0;
  v27[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  sub_1B8AE3654(a7, v24);
  v28 = (_QWORD *)((char *)a9 + v23[8]);
  *v28 = a8;
  v28[1] = a10;
  *((_BYTE *)a9 + v23[9]) = a11;
  swift_bridgeObjectRelease();
  *v26 = a12;
  v26[1] = a13;
  *(_QWORD *)((char *)a9 + v23[11]) = a14;
  *(_QWORD *)((char *)a9 + v23[12]) = a15;
  *(_QWORD *)((char *)a9 + v23[13]) = a16;
  result = swift_bridgeObjectRelease();
  *v27 = a17;
  v27[1] = a18;
  return result;
}

uint64_t EventAttendeeModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for EventAttendeeModelObject(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = (uint64_t)&v10[*(int *)(v8 + 28)];
  v12 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (uint64_t *)&v10[v7[10]];
  *v13 = 0;
  v13[1] = 0;
  v14 = (uint64_t *)&v10[v7[14]];
  *v14 = 0;
  v14[1] = 0;
  v16 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  *(_QWORD *)v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 24))(v16);
  *((_QWORD *)v10 + 1) = v17;
  v19 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  *((_QWORD *)v10 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 32))(v19);
  *((_QWORD *)v10 + 3) = v20;
  v22 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  *((_QWORD *)v10 + 4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 8) + 40))(v22);
  *((_QWORD *)v10 + 5) = v23;
  v25 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 8) + 48))(v25);
  sub_1B8AE3654((uint64_t)v6, v11);
  v27 = a1[3];
  v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v27);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 16))(v27);
  v29 = (uint64_t *)&v10[v7[8]];
  *v29 = v28;
  v29[1] = v30;
  v32 = a1[3];
  v31 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v32);
  v10[v7[9]] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v31 + 8) + 56))(v32) & 1;
  v34 = a1[3];
  v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 8) + 64))(v34);
  v37 = v36;
  swift_bridgeObjectRelease();
  *v13 = v35;
  v13[1] = v37;
  v38 = a1[3];
  v39 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v38);
  *(_QWORD *)&v10[v7[11]] = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
  v40 = a1[3];
  v41 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v40);
  *(_QWORD *)&v10[v7[12]] = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
  v42 = a1[3];
  v43 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v42);
  *(_QWORD *)&v10[v7[13]] = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 32))(v42, v43);
  v44 = a1[3];
  v45 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v44);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 40))(v44, v45);
  v48 = v47;
  swift_bridgeObjectRelease();
  *v14 = v46;
  v14[1] = v48;
  sub_1B8AE7B90((uint64_t)v10, a2, type metadata accessor for EventAttendeeModelObject);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B8AE7BD4((uint64_t)v10, type metadata accessor for EventAttendeeModelObject);
}

uint64_t EventAttendeeModelObject.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v10;

  v1 = sub_1B8B9B054();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[1])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v0[3])
      goto LABEL_3;
LABEL_6:
    sub_1B8B9C980();
    if (v0[5])
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1B8B9C980();
  if (!v0[3])
    goto LABEL_6;
LABEL_3:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (v0[5])
  {
LABEL_4:
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_1B8B9C980();
LABEL_8:
  v8 = (int *)type metadata accessor for EventAttendeeModelObject(0);
  sub_1B8AE3600((uint64_t)v0 + v8[7], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1B8B9C980();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_1B8B9C980();
    sub_1B8ADBDEC(&qword_1EF1BC010, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    sub_1B8B9C0C8();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C980();
  if (*(_QWORD *)((char *)v0 + v8[10] + 8))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  sub_1B8B9C974();
  sub_1B8B9C974();
  sub_1B8B9C974();
  if (!*(_QWORD *)((char *)v0 + v8[14] + 8))
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8AE53D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8AE5400 + 4 * byte_1B8BA6A07[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B8AE5400()
{
  return 0x6464416C69616D65;
}

uint64_t sub_1B8AE5420()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_1B8AE5440()
{
  return 7107189;
}

uint64_t sub_1B8AE5450()
{
  return 25705;
}

uint64_t sub_1B8AE545C()
{
  return 0x6E65727275437369;
}

uint64_t sub_1B8AE5480()
{
  return 0x49746361746E6F63;
}

uint64_t sub_1B8AE549C()
{
  return 0x737574617473;
}

uint64_t sub_1B8AE54B0()
{
  return 1701869940;
}

uint64_t sub_1B8AE54BC()
{
  return 0x746E656D6D6F63;
}

uint64_t sub_1B8AE54D4()
{
  return 1701605234;
}

uint64_t sub_1B8AE54E0()
{
  unsigned __int8 *v0;

  return sub_1B8AE53D4(*v0);
}

uint64_t sub_1B8AE54E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AEAD10(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AE550C(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1B8AE5518()
{
  sub_1B8AE856C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AE5540()
{
  sub_1B8AE856C();
  return sub_1B8B9C9EC();
}

uint64_t EventAttendeeModelObject.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC040);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE856C();
  sub_1B8B9C9C8();
  LOBYTE(v12) = 0;
  sub_1B8B9C848();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_1B8B9C848();
    LOBYTE(v12) = 2;
    sub_1B8B9C848();
    v9 = (int *)type metadata accessor for EventAttendeeModelObject(0);
    LOBYTE(v12) = 3;
    sub_1B8B9B054();
    sub_1B8ADBDEC(&qword_1EF1BC028, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1B8B9C860();
    LOBYTE(v12) = 4;
    sub_1B8B9C86C();
    LOBYTE(v12) = 5;
    sub_1B8B9C878();
    LOBYTE(v12) = 6;
    sub_1B8B9C848();
    v12 = *(_QWORD *)(v3 + v9[11]);
    HIBYTE(v11) = 7;
    type metadata accessor for EKParticipantStatus(0);
    sub_1B8ADBDEC(&qword_1EF1BC050, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantStatus, (uint64_t)&protocol conformance descriptor for EKParticipantStatus);
    sub_1B8B9C8A8();
    v12 = *(_QWORD *)(v3 + v9[12]);
    HIBYTE(v11) = 8;
    type metadata accessor for EKParticipantRole(0);
    sub_1B8ADBDEC(&qword_1EF1BC058, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantRole, (uint64_t)&protocol conformance descriptor for EKParticipantRole);
    sub_1B8B9C8A8();
    v12 = *(_QWORD *)(v3 + v9[13]);
    HIBYTE(v11) = 9;
    type metadata accessor for EKParticipantType(0);
    sub_1B8ADBDEC(&qword_1EF1BC060, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantType, (uint64_t)&protocol conformance descriptor for EKParticipantType);
    sub_1B8B9C8A8();
    LOBYTE(v12) = 10;
    sub_1B8B9C848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t EventAttendeeModelObject.hashValue.getter()
{
  return sub_1B8AE6D24((void (*)(_BYTE *))EventAttendeeModelObject.hash(into:));
}

uint64_t EventAttendeeModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  int *v46;
  char v47;
  uint64_t v48;

  v39 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC068);
  v7 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EventAttendeeModelObject(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = (uint64_t)&v13[*(int *)(v11 + 28)];
  v15 = sub_1B8B9B054();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v45 = v14;
  v16(v14, 1, 1, v15);
  v17 = &v13[*(int *)(v10 + 40)];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v43 = a1;
  v44 = v17;
  v46 = (int *)v10;
  v18 = &v13[*(int *)(v10 + 56)];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v42 = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE856C();
  v40 = v9;
  sub_1B8B9C9B0();
  if (v2)
  {
    v22 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8ADE894(v22, &qword_1ED1B3020);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v7;
    LOBYTE(v48) = 0;
    *(_QWORD *)v13 = sub_1B8B9C7A0();
    *((_QWORD *)v13 + 1) = v19;
    LOBYTE(v48) = 1;
    *((_QWORD *)v13 + 2) = sub_1B8B9C7A0();
    *((_QWORD *)v13 + 3) = v20;
    LOBYTE(v48) = 2;
    *((_QWORD *)v13 + 4) = sub_1B8B9C7A0();
    *((_QWORD *)v13 + 5) = v21;
    LOBYTE(v48) = 3;
    sub_1B8ADBDEC(&qword_1EF1BC038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    sub_1B8B9C7D0();
    sub_1B8AE3654((uint64_t)v6, v45);
    LOBYTE(v48) = 4;
    v23 = sub_1B8B9C7DC();
    v24 = v46;
    v25 = (uint64_t *)&v13[v46[8]];
    *v25 = v23;
    v25[1] = v26;
    LOBYTE(v48) = 5;
    v27 = sub_1B8B9C7E8();
    v28 = (uint64_t *)v44;
    v13[v24[9]] = v27 & 1;
    LOBYTE(v48) = 6;
    v29 = sub_1B8B9C7A0();
    v31 = v30;
    swift_bridgeObjectRelease();
    *v28 = v29;
    v28[1] = v31;
    type metadata accessor for EKParticipantStatus(0);
    v47 = 7;
    sub_1B8ADBDEC(&qword_1EF1BC070, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantStatus, (uint64_t)&protocol conformance descriptor for EKParticipantStatus);
    sub_1B8B9C818();
    v32 = v46;
    *(_QWORD *)&v13[v46[11]] = v48;
    type metadata accessor for EKParticipantRole(0);
    v47 = 8;
    sub_1B8ADBDEC(&qword_1EF1BC078, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantRole, (uint64_t)&protocol conformance descriptor for EKParticipantRole);
    sub_1B8B9C818();
    *(_QWORD *)&v13[v32[12]] = v48;
    type metadata accessor for EKParticipantType(0);
    v47 = 9;
    sub_1B8ADBDEC(&qword_1EF1BC080, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantType, (uint64_t)&protocol conformance descriptor for EKParticipantType);
    sub_1B8B9C818();
    *(_QWORD *)&v13[v46[13]] = v48;
    LOBYTE(v48) = 10;
    v33 = sub_1B8B9C7A0();
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
    v36 = (uint64_t *)v42;
    swift_bridgeObjectRelease();
    *v36 = v33;
    v36[1] = v35;
    sub_1B8AE7B90((uint64_t)v13, v39, type metadata accessor for EventAttendeeModelObject);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return sub_1B8AE7BD4((uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
  }
}

uint64_t sub_1B8AE5ED0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_1B8AE5EDC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48));
}

uint64_t sub_1B8AE5EE8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_1B8AE5EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 56));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1B8AE5F28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t sub_1B8AE5F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B8AE3654(a1, v2 + *(int *)(a2 + 28));
}

uint64_t sub_1B8AE5F68(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t sub_1B8AE5F74(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE7248(a1, a2, (void (*)(_BYTE *))EventAttendeeModelObject.hash(into:));
}

uint64_t sub_1B8AE5F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B8AE7298(a1, a2, a3, (void (*)(_BYTE *))EventAttendeeModelObject.hash(into:));
}

uint64_t sub_1B8AE5F90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EventAttendeeModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8AE5FA4(_QWORD *a1)
{
  return EventAttendeeModelObject.encode(to:)(a1);
}

uint64_t sub_1B8AE5FB8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8AE5FE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8AE6010()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8AE603C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B8AE3600(v2 + *(int *)(a1 + 28), a2);
}

uint64_t sub_1B8AE604C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t (*EventOrganizerModelObject.name.modify())()
{
  return nullsub_1;
}

uint64_t _s13CalendarUIKit27EventParticipantModelObjectV12emailAddressSSSgvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*EventOrganizerModelObject.emailAddress.modify())()
{
  return nullsub_1;
}

uint64_t _s13CalendarUIKit27EventParticipantModelObjectV11phoneNumberSSSgvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*EventOrganizerModelObject.phoneNumber.modify())()
{
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.url.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8AE4744(type metadata accessor for EventOrganizerModelObject, a1);
}

uint64_t EventOrganizerModelObject.url.setter(uint64_t a1)
{
  return sub_1B8AE4784(a1, type metadata accessor for EventOrganizerModelObject);
}

uint64_t (*EventOrganizerModelObject.url.modify())()
{
  type metadata accessor for EventOrganizerModelObject(0);
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.id.getter()
{
  return sub_1B8AE47E8(type metadata accessor for EventOrganizerModelObject);
}

uint64_t EventOrganizerModelObject.id.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4834(a1, a2, type metadata accessor for EventOrganizerModelObject);
}

uint64_t (*EventOrganizerModelObject.id.modify())()
{
  type metadata accessor for EventOrganizerModelObject(0);
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.isCurrentUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EventOrganizerModelObject(0) + 36));
}

uint64_t EventOrganizerModelObject.isCurrentUser.setter(char a1)
{
  return sub_1B8AE48CC(a1, type metadata accessor for EventOrganizerModelObject);
}

uint64_t (*EventOrganizerModelObject.isCurrentUser.modify())()
{
  type metadata accessor for EventOrganizerModelObject(0);
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.contactID.getter()
{
  return sub_1B8AE492C(type metadata accessor for EventOrganizerModelObject);
}

uint64_t EventOrganizerModelObject.contactID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE4978(a1, a2, type metadata accessor for EventOrganizerModelObject);
}

uint64_t (*EventOrganizerModelObject.contactID.modify())()
{
  type metadata accessor for EventOrganizerModelObject(0);
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.scheduleAgent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventOrganizerModelObject(0) + 44));
}

uint64_t EventOrganizerModelObject.scheduleAgent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EventOrganizerModelObject(0);
  *(_QWORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*EventOrganizerModelObject.scheduleAgent.modify())()
{
  type metadata accessor for EventOrganizerModelObject(0);
  return nullsub_1;
}

uint64_t EventOrganizerModelObject.init(name:emailAddress:phoneNumber:url:id:isCurrentUser:contactID:scheduleAgent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t result;

  v20 = (int *)type metadata accessor for EventOrganizerModelObject(0);
  v21 = (uint64_t)a9 + v20[7];
  v22 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = (_QWORD *)((char *)a9 + v20[10]);
  *v23 = 0;
  v23[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  sub_1B8AE3654(a7, v21);
  v24 = (_QWORD *)((char *)a9 + v20[8]);
  *v24 = a8;
  v24[1] = a10;
  *((_BYTE *)a9 + v20[9]) = a11;
  result = swift_bridgeObjectRelease();
  *v23 = a12;
  v23[1] = a13;
  *(_QWORD *)((char *)a9 + v20[11]) = a14;
  return result;
}

uint64_t EventOrganizerModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for EventOrganizerModelObject(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = (uint64_t)&v10[*(int *)(v8 + 28)];
  v12 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (uint64_t *)&v10[v7[10]];
  *v13 = 0;
  v13[1] = 0;
  v15 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  *(_QWORD *)v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 24))(v15);
  *((_QWORD *)v10 + 1) = v16;
  v18 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  *((_QWORD *)v10 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 32))(v18);
  *((_QWORD *)v10 + 3) = v19;
  v21 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  *((_QWORD *)v10 + 4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 40))(v21);
  *((_QWORD *)v10 + 5) = v22;
  v24 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  (*(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 48))(v24);
  sub_1B8AE3654((uint64_t)v6, v11);
  v26 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 + 8) + 16))(v26);
  v28 = (uint64_t *)&v10[v7[8]];
  *v28 = v27;
  v28[1] = v29;
  v31 = a1[3];
  v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  v10[v7[9]] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 + 8) + 56))(v31) & 1;
  v33 = a1[3];
  v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v33);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 8) + 64))(v33);
  v36 = v35;
  swift_bridgeObjectRelease();
  *v13 = v34;
  v13[1] = v36;
  v37 = a1[3];
  v38 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  *(_QWORD *)&v10[v7[11]] = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
  sub_1B8AE7B90((uint64_t)v10, a2, type metadata accessor for EventOrganizerModelObject);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B8AE7BD4((uint64_t)v10, type metadata accessor for EventOrganizerModelObject);
}

uint64_t EventOrganizerModelObject.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = sub_1B8B9B054();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[1])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v0[3])
      goto LABEL_3;
LABEL_6:
    sub_1B8B9C980();
    if (v0[5])
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1B8B9C980();
  if (!v0[3])
    goto LABEL_6;
LABEL_3:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (v0[5])
  {
LABEL_4:
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_1B8B9C980();
LABEL_8:
  v8 = type metadata accessor for EventOrganizerModelObject(0);
  sub_1B8AE3600((uint64_t)v0 + *(int *)(v8 + 28), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1B8B9C980();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_1B8B9C980();
    sub_1B8ADBDEC(&qword_1EF1BC010, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    sub_1B8B9C0C8();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C980();
  if (*(_QWORD *)((char *)v0 + *(int *)(v8 + 40) + 8))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  return sub_1B8B9C974();
}

uint64_t sub_1B8AE6918()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8AE6940 + 4 * byte_1B8BA6A12[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B8AE6940()
{
  return 0x6464416C69616D65;
}

uint64_t sub_1B8AE6960()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_1B8AE6980()
{
  return 7107189;
}

uint64_t sub_1B8AE6990()
{
  return 25705;
}

uint64_t sub_1B8AE699C()
{
  return 0x6E65727275437369;
}

uint64_t sub_1B8AE69C0()
{
  return 0x49746361746E6F63;
}

uint64_t sub_1B8AE69DC()
{
  return 0x656C756465686373;
}

uint64_t sub_1B8AE6A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AEB184(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AE6A24(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B8AE6A30()
{
  sub_1B8AE85F8();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AE6A58()
{
  sub_1B8AE85F8();
  return sub_1B8B9C9EC();
}

uint64_t EventOrganizerModelObject.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC088);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE85F8();
  sub_1B8B9C9C8();
  LOBYTE(v12) = 0;
  sub_1B8B9C848();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_1B8B9C848();
    LOBYTE(v12) = 2;
    sub_1B8B9C848();
    v9 = type metadata accessor for EventOrganizerModelObject(0);
    LOBYTE(v12) = 3;
    sub_1B8B9B054();
    sub_1B8ADBDEC(&qword_1EF1BC028, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1B8B9C860();
    LOBYTE(v12) = 4;
    sub_1B8B9C86C();
    LOBYTE(v12) = 5;
    sub_1B8B9C878();
    LOBYTE(v12) = 6;
    sub_1B8B9C848();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 44));
    v11[7] = 7;
    type metadata accessor for EKScheduleAgent(0);
    sub_1B8ADBDEC(&qword_1EF1BC098, (uint64_t (*)(uint64_t))type metadata accessor for EKScheduleAgent, (uint64_t)&protocol conformance descriptor for EKScheduleAgent);
    sub_1B8B9C8A8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t EventOrganizerModelObject.hashValue.getter()
{
  return sub_1B8AE6D24((void (*)(_BYTE *))EventOrganizerModelObject.hash(into:));
}

uint64_t sub_1B8AE6D24(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  sub_1B8B9C968();
  a1(v3);
  return sub_1B8B9C998();
}

uint64_t EventOrganizerModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  int *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC0A0);
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EventOrganizerModelObject(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = (uint64_t)&v10[*(int *)(v8 + 28)];
  v12 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v40 = a1;
  v41 = (int *)v7;
  v13 = &v10[*(int *)(v7 + 40)];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AE85F8();
  v38 = v6;
  v15 = v42;
  sub_1B8B9C9B0();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8ADE894(v11, &qword_1ED1B3020);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v42 = v12;
    v16 = v37;
    LOBYTE(v44) = 0;
    v17 = (uint64_t *)v14;
    *(_QWORD *)v10 = sub_1B8B9C7A0();
    *((_QWORD *)v10 + 1) = v18;
    LOBYTE(v44) = 1;
    v19 = sub_1B8B9C7A0();
    v20 = v41;
    v21 = v16;
    *((_QWORD *)v10 + 2) = v19;
    *((_QWORD *)v10 + 3) = v22;
    LOBYTE(v44) = 2;
    v23 = sub_1B8B9C7A0();
    v24 = (uint64_t)v40;
    *((_QWORD *)v10 + 4) = v23;
    *((_QWORD *)v10 + 5) = v25;
    LOBYTE(v44) = 3;
    sub_1B8ADBDEC(&qword_1EF1BC038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v26 = (uint64_t)v36;
    sub_1B8B9C7D0();
    sub_1B8AE3654(v26, v11);
    LOBYTE(v44) = 4;
    v27 = sub_1B8B9C7DC();
    v28 = (uint64_t *)&v10[v20[8]];
    *v28 = v27;
    v28[1] = v29;
    LOBYTE(v44) = 5;
    v10[v20[9]] = sub_1B8B9C7E8() & 1;
    LOBYTE(v44) = 6;
    v30 = sub_1B8B9C7A0();
    v32 = v31;
    swift_bridgeObjectRelease();
    *v17 = v30;
    v17[1] = v32;
    type metadata accessor for EKScheduleAgent(0);
    v43 = 7;
    sub_1B8ADBDEC(&qword_1EF1BC0A8, (uint64_t (*)(uint64_t))type metadata accessor for EKScheduleAgent, (uint64_t)&protocol conformance descriptor for EKScheduleAgent);
    sub_1B8B9C818();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v38, v39);
    *(_QWORD *)&v10[v20[11]] = v44;
    sub_1B8AE7B90((uint64_t)v10, v35, type metadata accessor for EventOrganizerModelObject);
    __swift_destroy_boxed_opaque_existential_1(v24);
    return sub_1B8AE7BD4((uint64_t)v10, type metadata accessor for EventOrganizerModelObject);
  }
}

uint64_t sub_1B8AE71C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 32));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1B8AE7200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 40));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1B8AE723C(uint64_t a1, uint64_t a2)
{
  return sub_1B8AE7248(a1, a2, (void (*)(_BYTE *))EventOrganizerModelObject.hash(into:));
}

uint64_t sub_1B8AE7248(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  sub_1B8B9C968();
  a3(v5);
  return sub_1B8B9C998();
}

uint64_t sub_1B8AE728C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B8AE7298(a1, a2, a3, (void (*)(_BYTE *))EventOrganizerModelObject.hash(into:));
}

uint64_t sub_1B8AE7298(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_1B8B9C968();
  a4(v6);
  return sub_1B8B9C998();
}

uint64_t sub_1B8AE72D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EventOrganizerModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8AE72E8(_QWORD *a1)
{
  return EventOrganizerModelObject.encode(to:)(a1);
}

uint64_t sub_1B8AE72FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1B8AE7330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1B8AE7368@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 32));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8AE737C()
{
  sub_1B8ADBDEC(&qword_1EF1BC200, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantStatus, (uint64_t)&unk_1B8BA5284);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8AE73F0()
{
  sub_1B8ADBDEC(&qword_1EF1BC200, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantStatus, (uint64_t)&unk_1B8BA5284);
  return sub_1B8B9C2A8();
}

uint64_t sub_1B8AE7454()
{
  sub_1B8ADBDEC(&qword_1EF1BC1F8, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantRole, (uint64_t)&unk_1B8BA5330);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8AE74C8()
{
  sub_1B8ADBDEC(&qword_1EF1BC1F8, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantRole, (uint64_t)&unk_1B8BA5330);
  return sub_1B8B9C2A8();
}

uint64_t sub_1B8AE752C()
{
  sub_1B8ADBDEC(&qword_1EF1BC1F0, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantType, (uint64_t)"=)1.");
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8AE75A0()
{
  sub_1B8ADBDEC(&qword_1EF1BC1F0, (uint64_t (*)(uint64_t))type metadata accessor for EKParticipantType, (uint64_t)"=)1.");
  return sub_1B8B9C2A8();
}

uint64_t sub_1B8AE7604()
{
  sub_1B8ADBDEC(&qword_1EF1BC1E8, (uint64_t (*)(uint64_t))type metadata accessor for EKScheduleAgent, (uint64_t)&unk_1B8BA5480);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8AE7678()
{
  sub_1B8ADBDEC(&qword_1EF1BC1E8, (uint64_t (*)(uint64_t))type metadata accessor for EKScheduleAgent, (uint64_t)&unk_1B8BA5480);
  return sub_1B8B9C2A8();
}

uint64_t _s13CalendarUIKit27EventParticipantModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = sub_1B8B9B054();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC208);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v49 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v49 - v18;
  v20 = a1[1];
  v21 = a2[1];
  if (!v20)
  {
    if (v21)
      return 0;
    goto LABEL_8;
  }
  if (!v21)
    return 0;
  if (*a1 == *a2 && v20 == v21 || (v22 = sub_1B8B9C8D8(), result = 0, (v22 & 1) != 0))
  {
LABEL_8:
    v24 = a1[3];
    v25 = a2[3];
    if (v24)
    {
      if (!v25)
        return 0;
      if (a1[2] != a2[2] || v24 != v25)
      {
        v26 = sub_1B8B9C8D8();
        result = 0;
        if ((v26 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v27 = a1[5];
    v28 = a2[5];
    if (v27)
    {
      if (!v28)
        return 0;
      if (a1[4] != a2[4] || v27 != v28)
      {
        v29 = sub_1B8B9C8D8();
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v28)
    {
      return 0;
    }
    v30 = type metadata accessor for EventParticipantModelObject(0);
    v51 = v4;
    v31 = v30;
    sub_1B8AE3600((uint64_t)a1 + *(int *)(v30 + 28), (uint64_t)v19);
    v50 = v31;
    v32 = *(int *)(v31 + 28);
    v33 = v51;
    sub_1B8AE3600((uint64_t)a2 + v32, (uint64_t)v17);
    v34 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_1B8AE3600((uint64_t)v19, (uint64_t)v10);
    v52 = v34;
    sub_1B8AE3600((uint64_t)v17, v34);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v35((uint64_t)v10, 1, v33) == 1)
    {
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      if (v35(v52, 1, v33) == 1)
      {
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
LABEL_29:
        v38 = v50;
        v39 = *(int *)(v50 + 32);
        v40 = *(_QWORD *)((char *)a1 + v39);
        v41 = *(_QWORD *)((char *)a1 + v39 + 8);
        v42 = (_QWORD *)((char *)a2 + v39);
        if (v40 != *v42 || v41 != v42[1])
        {
          v43 = sub_1B8B9C8D8();
          result = 0;
          if ((v43 & 1) == 0)
            return result;
        }
        if (*((unsigned __int8 *)a1 + *(int *)(v38 + 36)) == *((unsigned __int8 *)a2 + *(int *)(v38 + 36)))
        {
          v44 = *(int *)(v38 + 40);
          v45 = (_QWORD *)((char *)a1 + v44);
          v46 = *(_QWORD *)((char *)a1 + v44 + 8);
          v47 = (_QWORD *)((char *)a2 + v44);
          v48 = v47[1];
          if (v46)
          {
            if (!v48 || (*v45 != *v47 || v46 != v48) && (sub_1B8B9C8D8() & 1) == 0)
              return 0;
          }
          else if (v48)
          {
            return 0;
          }
          return 1;
        }
        return 0;
      }
    }
    else
    {
      sub_1B8AE3600((uint64_t)v10, (uint64_t)v14);
      if (v35(v52, 1, v33) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v52, v33);
        sub_1B8ADBDEC(&qword_1EF1BC210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        v36 = sub_1B8B9C0EC();
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v7, v33);
        sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
        sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
        v37(v14, v33);
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
        if ((v36 & 1) == 0)
          return 0;
        goto LABEL_29;
      }
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v33);
    }
    sub_1B8ADE894((uint64_t)v10, &qword_1EF1BC208);
    return 0;
  }
  return result;
}

unint64_t sub_1B8AE7B38()
{
  unint64_t result;

  result = qword_1EF1BC020;
  if (!qword_1EF1BC020)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7380, &type metadata for EventParticipantModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC020);
  }
  return result;
}

uint64_t type metadata accessor for EventAttendeeModelObject(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B9500);
}

uint64_t sub_1B8AE7B90(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B8AE7BD4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL _s13CalendarUIKit25EventOrganizerModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL8 result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;

  v4 = sub_1B8B9B054();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC208);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v50 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v50 - v18;
  v20 = a1[1];
  v21 = a2[1];
  if (!v20)
  {
    if (v21)
      return 0;
    goto LABEL_8;
  }
  if (!v21)
    return 0;
  if (*a1 == *a2 && v20 == v21 || (v22 = sub_1B8B9C8D8(), result = 0, (v22 & 1) != 0))
  {
LABEL_8:
    v24 = a1[3];
    v25 = a2[3];
    if (v24)
    {
      if (!v25)
        return 0;
      if (a1[2] != a2[2] || v24 != v25)
      {
        v26 = sub_1B8B9C8D8();
        result = 0;
        if ((v26 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v27 = a1[5];
    v28 = a2[5];
    if (v27)
    {
      if (!v28)
        return 0;
      if (a1[4] != a2[4] || v27 != v28)
      {
        v29 = sub_1B8B9C8D8();
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v28)
    {
      return 0;
    }
    v30 = type metadata accessor for EventOrganizerModelObject(0);
    v52 = v4;
    v31 = v30;
    sub_1B8AE3600((uint64_t)a1 + *(int *)(v30 + 28), (uint64_t)v19);
    v51 = (int *)v31;
    v32 = *(int *)(v31 + 28);
    v33 = v52;
    sub_1B8AE3600((uint64_t)a2 + v32, (uint64_t)v17);
    v34 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_1B8AE3600((uint64_t)v19, (uint64_t)v10);
    v53 = v34;
    sub_1B8AE3600((uint64_t)v17, v34);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v35((uint64_t)v10, 1, v33) == 1)
    {
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      if (v35(v53, 1, v33) == 1)
      {
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
LABEL_29:
        v38 = v51;
        v39 = v51[8];
        v40 = *(_QWORD *)((char *)a1 + v39);
        v41 = *(_QWORD *)((char *)a1 + v39 + 8);
        v42 = (_QWORD *)((char *)a2 + v39);
        if (v40 != *v42 || v41 != v42[1])
        {
          v43 = sub_1B8B9C8D8();
          result = 0;
          if ((v43 & 1) == 0)
            return result;
        }
        if (*((unsigned __int8 *)a1 + v38[9]) == *((unsigned __int8 *)a2 + v38[9]))
        {
          v44 = v38[10];
          v45 = (_QWORD *)((char *)a1 + v44);
          v46 = *(_QWORD *)((char *)a1 + v44 + 8);
          v47 = (_QWORD *)((char *)a2 + v44);
          v48 = v47[1];
          if (v46)
          {
            if (!v48)
              return 0;
            if (*v45 != *v47 || v46 != v48)
            {
              v49 = sub_1B8B9C8D8();
              result = 0;
              if ((v49 & 1) == 0)
                return result;
            }
          }
          else if (v48)
          {
            return 0;
          }
          return *(_QWORD *)((char *)a1 + v38[11]) == *(_QWORD *)((char *)a2 + v38[11]);
        }
        return 0;
      }
    }
    else
    {
      sub_1B8AE3600((uint64_t)v10, (uint64_t)v14);
      if (v35(v53, 1, v33) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v53, v33);
        sub_1B8ADBDEC(&qword_1EF1BC210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        v36 = sub_1B8B9C0EC();
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v7, v33);
        sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
        sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
        v37(v14, v33);
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
        if ((v36 & 1) == 0)
          return 0;
        goto LABEL_29;
      }
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v33);
    }
    sub_1B8ADE894((uint64_t)v10, &qword_1EF1BC208);
    return 0;
  }
  return result;
}

uint64_t _s13CalendarUIKit24EventAttendeeModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;

  v4 = sub_1B8B9B054();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC208);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v55 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v55 - v18;
  v20 = a1[1];
  v21 = a2[1];
  if (!v20)
  {
    if (v21)
      return 0;
    goto LABEL_8;
  }
  if (!v21)
    return 0;
  if (*a1 == *a2 && v20 == v21 || (v22 = sub_1B8B9C8D8(), result = 0, (v22 & 1) != 0))
  {
LABEL_8:
    v24 = a1[3];
    v25 = a2[3];
    if (v24)
    {
      if (!v25)
        return 0;
      if (a1[2] != a2[2] || v24 != v25)
      {
        v26 = sub_1B8B9C8D8();
        result = 0;
        if ((v26 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v27 = a1[5];
    v28 = a2[5];
    if (v27)
    {
      if (!v28)
        return 0;
      if (a1[4] != a2[4] || v27 != v28)
      {
        v29 = sub_1B8B9C8D8();
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v28)
    {
      return 0;
    }
    v30 = type metadata accessor for EventAttendeeModelObject(0);
    v57 = v4;
    v31 = v30;
    sub_1B8AE3600((uint64_t)a1 + *(int *)(v30 + 28), (uint64_t)v19);
    v56 = (int *)v31;
    v32 = *(int *)(v31 + 28);
    v33 = v57;
    sub_1B8AE3600((uint64_t)a2 + v32, (uint64_t)v17);
    v34 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_1B8AE3600((uint64_t)v19, (uint64_t)v10);
    v58 = v34;
    sub_1B8AE3600((uint64_t)v17, v34);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v35((uint64_t)v10, 1, v33) == 1)
    {
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      if (v35(v58, 1, v33) == 1)
      {
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
LABEL_29:
        v38 = v56;
        v39 = v56[8];
        v40 = *(_QWORD *)((char *)a1 + v39);
        v41 = *(_QWORD *)((char *)a1 + v39 + 8);
        v42 = (_QWORD *)((char *)a2 + v39);
        if (v40 != *v42 || v41 != v42[1])
        {
          v43 = sub_1B8B9C8D8();
          result = 0;
          if ((v43 & 1) == 0)
            return result;
        }
        if (*((unsigned __int8 *)a1 + v38[9]) == *((unsigned __int8 *)a2 + v38[9]))
        {
          v44 = v38[10];
          v45 = (_QWORD *)((char *)a1 + v44);
          v46 = *(_QWORD *)((char *)a1 + v44 + 8);
          v47 = (_QWORD *)((char *)a2 + v44);
          v48 = v47[1];
          if (v46)
          {
            if (!v48)
              return 0;
            if (*v45 != *v47 || v46 != v48)
            {
              v49 = sub_1B8B9C8D8();
              result = 0;
              if ((v49 & 1) == 0)
                return result;
            }
          }
          else if (v48)
          {
            return 0;
          }
          if (*(_QWORD *)((char *)a1 + v38[11]) != *(_QWORD *)((char *)a2 + v38[11])
            || *(_QWORD *)((char *)a1 + v38[12]) != *(_QWORD *)((char *)a2 + v38[12])
            || *(_QWORD *)((char *)a1 + v38[13]) != *(_QWORD *)((char *)a2 + v38[13]))
          {
            return 0;
          }
          v50 = v38[14];
          v51 = (_QWORD *)((char *)a1 + v50);
          v52 = *(_QWORD *)((char *)a1 + v50 + 8);
          v53 = (_QWORD *)((char *)a2 + v50);
          v54 = v53[1];
          if (v52)
          {
            if (!v54 || (*v51 != *v53 || v52 != v54) && (sub_1B8B9C8D8() & 1) == 0)
              return 0;
          }
          else if (v54)
          {
            return 0;
          }
          return 1;
        }
        return 0;
      }
    }
    else
    {
      sub_1B8AE3600((uint64_t)v10, (uint64_t)v14);
      if (v35(v58, 1, v33) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v58, v33);
        sub_1B8ADBDEC(&qword_1EF1BC210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        v36 = sub_1B8B9C0EC();
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v7, v33);
        sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
        sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
        v37(v14, v33);
        sub_1B8ADE894((uint64_t)v10, &qword_1ED1B3020);
        if ((v36 & 1) == 0)
          return 0;
        goto LABEL_29;
      }
      sub_1B8ADE894((uint64_t)v17, &qword_1ED1B3020);
      sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3020);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v33);
    }
    sub_1B8ADE894((uint64_t)v10, &qword_1EF1BC208);
    return 0;
  }
  return result;
}

unint64_t sub_1B8AE856C()
{
  unint64_t result;

  result = qword_1EF1BC048;
  if (!qword_1EF1BC048)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7330, &type metadata for EventAttendeeModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC048);
  }
  return result;
}

uint64_t type metadata accessor for EventOrganizerModelObject(uint64_t a1)
{
  return sub_1B8AE85C4(a1, qword_1EF1BC150);
}

uint64_t sub_1B8AE85C4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1B8AE85F8()
{
  unint64_t result;

  result = qword_1EF1BC090;
  if (!qword_1EF1BC090)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA72E0, &type metadata for EventOrganizerModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC090);
  }
  return result;
}

uint64_t sub_1B8AE863C(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0B0, type metadata accessor for EventParticipantModelObject, (uint64_t)&protocol conformance descriptor for EventParticipantModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B8AE8678()
{
  return sub_1B8ADBDEC(&qword_1EF1BC0B8, type metadata accessor for EventParticipantModelObject, (uint64_t)&protocol conformance descriptor for EventParticipantModelObject);
}

uint64_t sub_1B8AE86A4(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0C0, type metadata accessor for EventParticipantModelObject, (uint64_t)&protocol conformance descriptor for EventParticipantModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B8AE86E0(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0C8, type metadata accessor for EventAttendeeModelObject, (uint64_t)&protocol conformance descriptor for EventAttendeeModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B8AE871C()
{
  return sub_1B8ADBDEC(&qword_1EF1BC0D0, type metadata accessor for EventAttendeeModelObject, (uint64_t)&protocol conformance descriptor for EventAttendeeModelObject);
}

uint64_t sub_1B8AE8748(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0D8, type metadata accessor for EventAttendeeModelObject, (uint64_t)&protocol conformance descriptor for EventAttendeeModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B8AE8784(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0E0, type metadata accessor for EventOrganizerModelObject, (uint64_t)&protocol conformance descriptor for EventOrganizerModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B8AE87C0()
{
  return sub_1B8ADBDEC(&qword_1EF1BC0E8, type metadata accessor for EventOrganizerModelObject, (uint64_t)&protocol conformance descriptor for EventOrganizerModelObject);
}

uint64_t sub_1B8AE87EC(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BC0F0, type metadata accessor for EventOrganizerModelObject, (uint64_t)&protocol conformance descriptor for EventOrganizerModelObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for EventParticipantModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = sub_1B8B9B054();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[8];
    v18 = a3[9];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v22 = a3[10];
    v23 = (_QWORD *)((char *)v4 + v22);
    v24 = (_QWORD *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

_QWORD *initializeWithCopy for EventParticipantModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = sub_1B8B9B054();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v20 = a3[10];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EventParticipantModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B054();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v18 = a3[10];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for EventParticipantModelObject(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B8B9B054();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithTake for EventParticipantModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1B8B9B054();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventParticipantModelObject()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for EventParticipantModelObject()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1B8AE8F50()
{
  unint64_t v0;

  sub_1B8AE8FDC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1B8AE8FDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF1B94E0)
  {
    sub_1B8B9B054();
    v0 = sub_1B8B9C50C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF1B94E0);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for EventAttendeeModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = sub_1B8B9B054();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[8];
    v18 = a3[9];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v22 = a3[10];
    v23 = a3[11];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    *(_QWORD *)((char *)v4 + v23) = *(_QWORD *)((char *)a2 + v23);
    v27 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    *(_QWORD *)((char *)v4 + v27) = *(_QWORD *)((char *)a2 + v27);
    v28 = a3[14];
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for EventAttendeeModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1B8B9B054();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EventAttendeeModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = sub_1B8B9B054();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v20 = a3[10];
  v21 = a3[11];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v25 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v26 = a3[14];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EventAttendeeModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B054();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v18 = a3[10];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  v21 = a3[14];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for EventAttendeeModelObject(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B8B9B054();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return a1;
}

_QWORD *assignWithTake for EventAttendeeModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1B8B9B054();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  v28 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  v29 = a3[14];
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventAttendeeModelObject()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for EventAttendeeModelObject()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1B8AE9928()
{
  unint64_t v0;

  sub_1B8AE8FDC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for EventOrganizerModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = sub_1B8B9B054();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[8];
    v18 = a3[9];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v22 = a3[10];
    v23 = a3[11];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    *(_QWORD *)((char *)v4 + v23) = *(_QWORD *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s13CalendarUIKit27EventParticipantModelObjectVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1B8B9B054();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EventOrganizerModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = sub_1B8B9B054();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v20 = a3[10];
  v21 = a3[11];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EventOrganizerModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B054();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v18 = a3[10];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *initializeWithTake for EventOrganizerModelObject(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B8B9B054();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithTake for EventOrganizerModelObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1B8B9B054();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventOrganizerModelObject()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for EventOrganizerModelObject()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

void sub_1B8AEA2CC()
{
  unint64_t v0;

  sub_1B8AE8FDC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for EventOrganizerModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventOrganizerModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B8AEA444 + 4 * byte_1B8BA6A1F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B8AEA478 + 4 * byte_1B8BA6A1A[v4]))();
}

uint64_t sub_1B8AEA478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AEA488);
  return result;
}

uint64_t sub_1B8AEA494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AEA49CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B8AEA4A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA4A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventOrganizerModelObject.CodingKeys()
{
  return &type metadata for EventOrganizerModelObject.CodingKeys;
}

uint64_t getEnumTagSinglePayload for EventAttendeeModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventAttendeeModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B8AEA5A0 + 4 * byte_1B8BA6A29[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B8AEA5D4 + 4 * byte_1B8BA6A24[v4]))();
}

uint64_t sub_1B8AEA5D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA5DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AEA5E4);
  return result;
}

uint64_t sub_1B8AEA5F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AEA5F8);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B8AEA5FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventAttendeeModelObject.CodingKeys()
{
  return &type metadata for EventAttendeeModelObject.CodingKeys;
}

uint64_t getEnumTagSinglePayload for EventParticipantModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventParticipantModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B8AEA6FC + 4 * byte_1B8BA6A33[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B8AEA730 + 4 * byte_1B8BA6A2E[v4]))();
}

uint64_t sub_1B8AEA730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AEA740);
  return result;
}

uint64_t sub_1B8AEA74C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AEA754);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B8AEA758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AEA760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventParticipantModelObject.CodingKeys()
{
  return &type metadata for EventParticipantModelObject.CodingKeys;
}

unint64_t sub_1B8AEA780()
{
  unint64_t result;

  result = qword_1EF1BC1A0;
  if (!qword_1EF1BC1A0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7148, &type metadata for EventParticipantModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1A0);
  }
  return result;
}

unint64_t sub_1B8AEA7C8()
{
  unint64_t result;

  result = qword_1EF1BC1A8;
  if (!qword_1EF1BC1A8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7200, &type metadata for EventAttendeeModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1A8);
  }
  return result;
}

unint64_t sub_1B8AEA810()
{
  unint64_t result;

  result = qword_1EF1BC1B0;
  if (!qword_1EF1BC1B0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA72B8, &type metadata for EventOrganizerModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1B0);
  }
  return result;
}

unint64_t sub_1B8AEA858()
{
  unint64_t result;

  result = qword_1EF1BC1B8;
  if (!qword_1EF1BC1B8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7228, &type metadata for EventOrganizerModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1B8);
  }
  return result;
}

unint64_t sub_1B8AEA8A0()
{
  unint64_t result;

  result = qword_1EF1BC1C0;
  if (!qword_1EF1BC1C0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7250, &type metadata for EventOrganizerModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1C0);
  }
  return result;
}

unint64_t sub_1B8AEA8E8()
{
  unint64_t result;

  result = qword_1EF1BC1C8;
  if (!qword_1EF1BC1C8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7170, &type metadata for EventAttendeeModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1C8);
  }
  return result;
}

unint64_t sub_1B8AEA930()
{
  unint64_t result;

  result = qword_1EF1BC1D0;
  if (!qword_1EF1BC1D0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7198, &type metadata for EventAttendeeModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1D0);
  }
  return result;
}

unint64_t sub_1B8AEA978()
{
  unint64_t result;

  result = qword_1EF1BC1D8;
  if (!qword_1EF1BC1D8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA70B8, &type metadata for EventParticipantModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1D8);
  }
  return result;
}

unint64_t sub_1B8AEA9C0()
{
  unint64_t result;

  result = qword_1EF1BC1E0;
  if (!qword_1EF1BC1E0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA70E0, &type metadata for EventParticipantModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC1E0);
  }
  return result;
}

uint64_t sub_1B8AEAA04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6464416C69616D65 && a2 == 0xEC00000073736572 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65727275437369 && a2 == 0xED00007265735574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1B8AEAD10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6464416C69616D65 && a2 == 0xEC00000073736572 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65727275437369 && a2 == 0xED00007265735574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x746E656D6D6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1B8AEB184(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6464416C69616D65 && a2 == 0xEC00000073736572 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65727275437369 && a2 == 0xED00007265735574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xED0000746E656741)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

CalendarUIKit::EventSourceConstraintsModelObject __swiftcall EventSourceConstraintsModelObject.init(maxAlarmsAllowed:isEnabledForEvents:isDelegate:isManaged:requiresOutgoingInvitationsInDefaultCalendar:eventDurationConstrainedToRecurrenceInterval:occurrencesMustOccurOnSeparateDays:supportsPrivateEvents:supportsAlarmTriggerDates:supportsMultipleAlarms:requiresOccurrencesConformToRecurrenceRule:supportsURLField:supportsFloatingTimeZone:prohibitsMultipleDaysInMonthlyRecurrence:prohibitsMultipleMonthsInYearlyRecurrence:prohibitsYearlyRecurrenceInterval:canSetAvailability:eventAvailabilityLimited:)(Swift::UInt maxAlarmsAllowed, Swift::Bool isEnabledForEvents, Swift::Bool isDelegate, Swift::Bool isManaged, Swift::Bool requiresOutgoingInvitationsInDefaultCalendar, Swift::Bool eventDurationConstrainedToRecurrenceInterval, Swift::Bool occurrencesMustOccurOnSeparateDays, Swift::Bool supportsPrivateEvents, Swift::Bool supportsAlarmTriggerDates, Swift::Bool supportsMultipleAlarms, Swift::Bool requiresOccurrencesConformToRecurrenceRule, Swift::Bool supportsURLField, Swift::Bool supportsFloatingTimeZone, Swift::Bool prohibitsMultipleDaysInMonthlyRecurrence, Swift::Bool prohibitsMultipleMonthsInYearlyRecurrence, Swift::Bool prohibitsYearlyRecurrenceInterval, Swift::Bool canSetAvailability, Swift::Bool eventAvailabilityLimited)
{
  uint64_t v18;
  _BOOL8 v19;
  CalendarUIKit::EventSourceConstraintsModelObject result;

  v19 = supportsAlarmTriggerDates;
  *(_QWORD *)v18 = maxAlarmsAllowed;
  *(_BYTE *)(v18 + 8) = requiresOutgoingInvitationsInDefaultCalendar;
  *(_BYTE *)(v18 + 9) = eventDurationConstrainedToRecurrenceInterval;
  *(_BYTE *)(v18 + 10) = occurrencesMustOccurOnSeparateDays;
  *(_BYTE *)(v18 + 11) = supportsPrivateEvents;
  *(_BYTE *)(v18 + 12) = supportsAlarmTriggerDates;
  *(_BYTE *)(v18 + 13) = supportsMultipleAlarms;
  *(_BYTE *)(v18 + 14) = requiresOccurrencesConformToRecurrenceRule;
  *(_BYTE *)(v18 + 15) = supportsURLField;
  *(_BYTE *)(v18 + 16) = supportsFloatingTimeZone;
  *(_BYTE *)(v18 + 17) = prohibitsMultipleDaysInMonthlyRecurrence;
  *(_BYTE *)(v18 + 18) = prohibitsMultipleMonthsInYearlyRecurrence;
  *(_BYTE *)(v18 + 19) = prohibitsYearlyRecurrenceInterval;
  *(_BYTE *)(v18 + 20) = canSetAvailability;
  *(_BYTE *)(v18 + 21) = eventAvailabilityLimited;
  result.requiresOutgoingInvitationsInDefaultCalendar = v19;
  result.eventDurationConstrainedToRecurrenceInterval = BYTE1(v19);
  result.occurrencesMustOccurOnSeparateDays = BYTE2(v19);
  result.supportsPrivateEvents = BYTE3(v19);
  result.supportsAlarmTriggerDates = BYTE4(v19);
  result.supportsMultipleAlarms = BYTE5(v19);
  result.requiresOccurrencesConformToRecurrenceRule = BYTE6(v19);
  result.supportsURLField = HIBYTE(v19);
  result.maxAlarmsAllowed = maxAlarmsAllowed;
  result.supportsFloatingTimeZone = isDelegate;
  return result;
}

uint64_t EventSourceConstraintsModelObject.maxAlarmsAllowed.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EventSourceConstraintsModelObject.requiresOutgoingInvitationsInDefaultCalendar.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t EventSourceConstraintsModelObject.eventDurationConstrainedToRecurrenceInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t EventSourceConstraintsModelObject.occurrencesMustOccurOnSeparateDays.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t EventSourceConstraintsModelObject.supportsPrivateEvents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t EventSourceConstraintsModelObject.supportsAlarmTriggerDates.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t EventSourceConstraintsModelObject.supportsMultipleAlarms.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t EventSourceConstraintsModelObject.requiresOccurrencesConformToRecurrenceRule.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t EventSourceConstraintsModelObject.supportsURLField.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 15);
}

uint64_t EventSourceConstraintsModelObject.supportsFloatingTimeZone.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t EventSourceConstraintsModelObject.prohibitsMultipleDaysInMonthlyRecurrence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t EventSourceConstraintsModelObject.prohibitsMultipleMonthsInYearlyRecurrence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t EventSourceConstraintsModelObject.prohibitsYearlyRecurrenceInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t EventSourceConstraintsModelObject.canSetAvailability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t EventSourceConstraintsModelObject.eventAvailabilityLimited.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t EventSourceConstraintsModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v12, v13);
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
  v18 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 72))(v20, v21);
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  LOBYTE(v24) = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
  v26 = a1[3];
  v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  LOBYTE(v26) = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 96))(v26, v27);
  v28 = a1[3];
  v29 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v28);
  LOBYTE(v28) = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 104))(v28, v29);
  v31 = a1[3];
  v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 112))(v31, v30);
  v33 = a1[3];
  v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v33);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 120))(v33, v32);
  *(_QWORD *)a2 = v44;
  *(_BYTE *)(a2 + 8) = v43 & 1;
  *(_BYTE *)(a2 + 9) = v42 & 1;
  *(_BYTE *)(a2 + 10) = v41 & 1;
  *(_BYTE *)(a2 + 11) = v40 & 1;
  *(_BYTE *)(a2 + 12) = v39 & 1;
  *(_BYTE *)(a2 + 13) = v38 & 1;
  *(_BYTE *)(a2 + 14) = v37 & 1;
  *(_BYTE *)(a2 + 15) = v36 & 1;
  *(_BYTE *)(a2 + 16) = v22 & 1;
  *(_BYTE *)(a2 + 17) = v24 & 1;
  *(_BYTE *)(a2 + 18) = v26 & 1;
  *(_BYTE *)(a2 + 19) = v28 & 1;
  *(_BYTE *)(a2 + 20) = v30 & 1;
  *(_BYTE *)(a2 + 21) = v34 & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t EventSourceConstraintsModelObject.hash(into:)()
{
  sub_1B8B9C974();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  return sub_1B8B9C980();
}

uint64_t sub_1B8AEBA90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B8AEBAC8 + 4 * byte_1B8BA73E0[a1]))(0xD000000000000010, 0x80000001B8BB6D20);
}

uint64_t sub_1B8AEBAC8(uint64_t a1)
{
  return a1 + 28;
}

uint64_t sub_1B8AEBBAC()
{
  unsigned __int8 *v0;

  return sub_1B8AEBA90(*v0);
}

uint64_t sub_1B8AEBBB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8AECB1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AEBBD8(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1B8AEBBE4()
{
  sub_1B8AEC79C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AEBC0C()
{
  sub_1B8AEC79C();
  return sub_1B8B9C9EC();
}

uint64_t EventSourceConstraintsModelObject.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD v16[16];
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC218);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[8];
  v16[14] = v1[9];
  v16[15] = v7;
  v8 = v1[10];
  v16[12] = v1[11];
  v16[13] = v8;
  v9 = v1[12];
  v16[10] = v1[13];
  v16[11] = v9;
  v10 = v1[14];
  v16[8] = v1[15];
  v16[9] = v10;
  v11 = v1[16];
  v16[6] = v1[17];
  v16[7] = v11;
  v12 = v1[18];
  v16[4] = v1[19];
  v16[5] = v12;
  v16[3] = v1[20];
  v13 = v1[21];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AEC79C();
  sub_1B8B9C9C8();
  v32 = 0;
  v14 = v17;
  sub_1B8B9C89C();
  if (!v14)
  {
    LODWORD(v17) = v13;
    v31 = 1;
    sub_1B8B9C878();
    v30 = 2;
    sub_1B8B9C878();
    v29 = 3;
    sub_1B8B9C878();
    v28 = 4;
    sub_1B8B9C878();
    v27 = 5;
    sub_1B8B9C878();
    v26 = 6;
    sub_1B8B9C878();
    v25 = 7;
    sub_1B8B9C878();
    v24 = 8;
    sub_1B8B9C878();
    v23 = 9;
    sub_1B8B9C878();
    v22 = 10;
    sub_1B8B9C878();
    v21 = 11;
    sub_1B8B9C878();
    v20 = 12;
    sub_1B8B9C878();
    v19 = 13;
    sub_1B8B9C878();
    v18 = 14;
    sub_1B8B9C878();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EventSourceConstraintsModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventSourceConstraintsModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t EventSourceConstraintsModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC228);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8AEC79C();
  sub_1B8B9C9B0();
  if (!v2)
  {
    v40 = 0;
    v9 = sub_1B8B9C80C();
    v39 = 1;
    v10 = sub_1B8B9C7E8();
    v38 = 2;
    v25 = sub_1B8B9C7E8();
    v37 = 3;
    v24 = sub_1B8B9C7E8();
    v36 = 4;
    v23 = sub_1B8B9C7E8();
    v35 = 5;
    v22 = sub_1B8B9C7E8();
    v34 = 6;
    v21 = sub_1B8B9C7E8();
    v33 = 7;
    v20 = sub_1B8B9C7E8();
    v32 = 8;
    v19 = sub_1B8B9C7E8();
    v31 = 9;
    v18 = sub_1B8B9C7E8();
    v30 = 10;
    v17 = sub_1B8B9C7E8();
    v29 = 11;
    v16 = sub_1B8B9C7E8();
    v28 = 12;
    v15 = sub_1B8B9C7E8();
    v27 = 13;
    v14 = sub_1B8B9C7E8();
    v26 = 14;
    v12 = sub_1B8B9C7E8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v10 & 1;
    *(_BYTE *)(a2 + 9) = v25 & 1;
    *(_BYTE *)(a2 + 10) = v24 & 1;
    *(_BYTE *)(a2 + 11) = v23 & 1;
    *(_BYTE *)(a2 + 12) = v22 & 1;
    *(_BYTE *)(a2 + 13) = v21 & 1;
    *(_BYTE *)(a2 + 14) = v20 & 1;
    *(_BYTE *)(a2 + 15) = v19 & 1;
    *(_BYTE *)(a2 + 16) = v18 & 1;
    *(_BYTE *)(a2 + 17) = v17 & 1;
    *(_BYTE *)(a2 + 18) = v16 & 1;
    *(_BYTE *)(a2 + 19) = v15 & 1;
    *(_BYTE *)(a2 + 20) = v14 & 1;
    *(_BYTE *)(a2 + 21) = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B8AEC48C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1B8AEC494()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1B8AEC49C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_1B8AEC4A4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t sub_1B8AEC4AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t sub_1B8AEC4B4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t sub_1B8AEC4BC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t sub_1B8AEC4C4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t sub_1B8AEC4CC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 15);
}

uint64_t sub_1B8AEC4D4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1B8AEC4DC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1B8AEC4E4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t sub_1B8AEC4EC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t sub_1B8AEC4F4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t sub_1B8AEC4FC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t sub_1B8AEC504()
{
  sub_1B8B9C968();
  EventSourceConstraintsModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AEC5C0()
{
  sub_1B8B9C968();
  EventSourceConstraintsModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AEC674@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EventSourceConstraintsModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8AEC688(_QWORD *a1)
{
  return EventSourceConstraintsModelObject.encode(to:)(a1);
}

BOOL _s13CalendarUIKit33EventSourceConstraintsModelObjectV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return ((*(_QWORD *)a1 != *(_QWORD *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a1 + 9) ^ *(_BYTE *)(a2 + 9))) & 1 | ((*(_BYTE *)(a1 + 10) ^ *(_BYTE *)(a2 + 10) | *(_BYTE *)(a1 + 11) ^ *(_BYTE *)(a2 + 11)) | (*(_BYTE *)(a1 + 12) ^ *(_BYTE *)(a2 + 12))) & 1 | ((*(_BYTE *)(a1 + 13) ^ *(_BYTE *)(a2 + 13) | *(_BYTE *)(a1 + 14) ^ *(_BYTE *)(a2 + 14) | *(_BYTE *)(a1 + 15) ^ *(_BYTE *)(a2 + 15)) | (*(_BYTE *)(a1 + 16) ^ *(_BYTE *)(a2 + 16))) & 1 | ((*(_BYTE *)(a1 + 17) ^ *(_BYTE *)(a2 + 17) | *(_BYTE *)(a1 + 18) ^ *(_BYTE *)(a2 + 18) | *(_BYTE *)(a1 + 19) ^ *(_BYTE *)(a2 + 19) | *(_BYTE *)(a1 + 20) ^ *(_BYTE *)(a2 + 20)) | (*(_BYTE *)(a2 + 21) ^ *(_BYTE *)(a1 + 21))) & 1) == 0;
}

unint64_t sub_1B8AEC79C()
{
  unint64_t result;

  result = qword_1EF1BC220;
  if (!qword_1EF1BC220)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA75F8, &type metadata for EventSourceConstraintsModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC220);
  }
  return result;
}

unint64_t sub_1B8AEC7E4()
{
  unint64_t result;

  result = qword_1EF1BC230;
  if (!qword_1EF1BC230)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventSourceConstraintsModelObject, &type metadata for EventSourceConstraintsModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BC230);
  }
  return result;
}

__n128 __swift_memcpy22_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for EventSourceConstraintsModelObject(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 22))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventSourceConstraintsModelObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 22) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 22) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventSourceConstraintsModelObject()
{
  return &type metadata for EventSourceConstraintsModelObject;
}

uint64_t getEnumTagSinglePayload for EventSourceConstraintsModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventSourceConstraintsModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1B8AEC9C4 + 4 * byte_1B8BA73F4[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1B8AEC9F8 + 4 * byte_1B8BA73EF[v4]))();
}

uint64_t sub_1B8AEC9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AECA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AECA08);
  return result;
}

uint64_t sub_1B8AECA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AECA1CLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1B8AECA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AECA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventSourceConstraintsModelObject.CodingKeys()
{
  return &type metadata for EventSourceConstraintsModelObject.CodingKeys;
}

unint64_t sub_1B8AECA48()
{
  unint64_t result;

  result = qword_1EF1BC238;
  if (!qword_1EF1BC238)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA75D0, &type metadata for EventSourceConstraintsModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC238);
  }
  return result;
}

unint64_t sub_1B8AECA90()
{
  unint64_t result;

  result = qword_1EF1BC240;
  if (!qword_1EF1BC240)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7540, &type metadata for EventSourceConstraintsModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC240);
  }
  return result;
}

unint64_t sub_1B8AECAD8()
{
  unint64_t result;

  result = qword_1EF1BC248;
  if (!qword_1EF1BC248)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7568, &type metadata for EventSourceConstraintsModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC248);
  }
  return result;
}

uint64_t sub_1B8AECB1C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB6D20 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000002CLL && a2 == 0x80000001B8BB6D40 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000002CLL && a2 == 0x80000001B8BB6D70 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001B8BB6DA0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B8BB6DD0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001B8BB6DF0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001B8BB6E10 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x80000001B8BB6E30 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB6E60 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B8BB6E80 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x80000001B8BB6EA0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000029 && a2 == 0x80000001B8BB6ED0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001B8BB6F00 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B8BB6F30 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B8BB6F50)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v5 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

id EKLocationModelWrapper.ekStructuredLocation.getter()
{
  id *v0;

  return *v0;
}

void EKLocationModelWrapper.ekStructuredLocation.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKLocationModelWrapper.ekStructuredLocation.modify())()
{
  return nullsub_1;
}

uint64_t EKLocationModelWrapper.title.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_title);
}

id EKLocationModelWrapper.geoLocation.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_geoLocation);
}

id EKLocationModelWrapper.radius.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_radius);
}

uint64_t EKLocationModelWrapper.address.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_address);
}

uint64_t EKLocationModelWrapper.contactLabel.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_contactLabel);
}

uint64_t sub_1B8AED0FC(SEL *a1)
{
  id *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(*v1, *a1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_1B8B9C17C();

  return v4;
}

uint64_t EKLocationModelWrapper.mapKitHandle.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_mapKitHandle);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9B084();

  return v3;
}

id EKLocationModelWrapper.isImprecise.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isImprecise);
}

id EKLocationModelWrapper.predictedLOI.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_predictedLOI);
  *a1 = result;
  return result;
}

CalendarUIKit::EKLocationModelWrapper __swiftcall EKLocationModelWrapper.init(_:)(CalendarUIKit::EKLocationModelWrapper result)
{
  CalendarUIKit::EKLocationModelWrapper *v1;

  v1->ekStructuredLocation.super.super.isa = result.ekStructuredLocation.super.super.isa;
  return result;
}

CalendarUIKit::EKLocationModelWrapper_optional __swiftcall EKLocationModelWrapper.init(_:)(CalendarUIKit::EKLocationModelWrapper_optional result)
{
  Class *v1;

  *v1 = result.value.ekStructuredLocation.super.super.isa;
  return result;
}

uint64_t sub_1B8AED22C(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_title);
}

id sub_1B8AED238()
{
  id *v0;

  return objc_msgSend(*v0, sel_geoLocation);
}

id sub_1B8AED25C()
{
  id *v0;

  return objc_msgSend(*v0, sel_radius);
}

uint64_t sub_1B8AED26C(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_address);
}

uint64_t sub_1B8AED278(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_contactLabel);
}

uint64_t sub_1B8AED284(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = sub_1B8B9C17C();

  return v6;
}

uint64_t sub_1B8AED2E4()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_mapKitHandle);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9B084();

  return v3;
}

id sub_1B8AED348()
{
  id *v0;

  return objc_msgSend(*v0, sel_isImprecise);
}

id sub_1B8AED368@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_predictedLOI);
  *a1 = result;
  return result;
}

_UNKNOWN **sub_1B8AED3A0()
{
  return &protocol witness table for EKLocationPredictedLOIModelWrapper;
}

ValueMetadata *type metadata accessor for EKLocationModelWrapper()
{
  return &type metadata for EKLocationModelWrapper;
}

uint64_t sub_1B8AED3BC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v7;
    v8 = a3[5];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1B8B9B4A4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)(v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)(v4 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1B8AED4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1B8B9B4A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B8AED590(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_1B8B9B4A4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1B8AED690(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_1B8ADE894(a1 + v7, &qword_1EF1BC250);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_1B8B9B4A4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_retain();
  swift_release();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_retain();
  swift_release();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1B8AED7EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_1B8B9B4A4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1B8AED8C0(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_release();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_1B8ADE894(a1 + v7, &qword_1EF1BC250);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1B8B9B4A4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_release();
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = *v17;
  swift_release();
  *(_QWORD *)(v16 + 8) = v17[1];
  swift_release();
  return a1;
}

uint64_t sub_1B8AED9F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8AEDA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC258);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1B8AEDA88()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8AEDA94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC258);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CreateFamilyCalendarShareeView()
{
  uint64_t result;

  result = qword_1EF1BC260;
  if (!qword_1EF1BC260)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B8AEDB50()
{
  unint64_t v0;

  sub_1B8AEDBD8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1B8AEDBD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF1BC270)
  {
    sub_1B8B9B4A4();
    v0 = sub_1B8B9B414();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF1BC270);
  }
}

uint64_t sub_1B8AEDC2C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AEDC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = v0;
  type metadata accessor for CreateFamilyCalendarShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2F0);
  sub_1B8B9BE88();
  v12 = MEMORY[0x1E0DEE9D8];
  if (!(v13 >> 62))
  {
    v2 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = sub_1B8AF13B8(v8);
    swift_bridgeObjectRelease();
    v10 = *(_BYTE *)(v1 + 8);
    v11 = swift_retain();
    sub_1B8B17464(v11, v10);
    swift_release();
    sub_1B8B1D67C(v9);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  result = sub_1B8B9C728();
  v2 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x1BCCB6800](i);
      }
      else
      {
        v5 = *(_QWORD *)(v13 + 8 * i + 32);
        swift_retain();
      }
      v6 = objc_msgSend(*(id *)(v5 + 16), sel_duplicate);
      v7 = swift_release();
      if (v6)
      {
        MEMORY[0x1BCCB6464](v7);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B8B9C314();
        sub_1B8B9C338();
        sub_1B8B9C2FC();
      }
    }
    swift_bridgeObjectRelease();
    v8 = v12;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8AEDE40(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a3 >> 62)
    goto LABEL_17;
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1B8B9C728())
  {
    for (i = 4; ; ++i)
    {
      v7 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCB6800](i - 4, a3) : *(id *)(a3 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v12)
      {
        MEMORY[0x1BCCB6464]();
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B8B9C314();
        sub_1B8B9C338();
        sub_1B8B9C2FC();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B8AEDFD8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = swift_retain();
  v4 = sub_1B8B17464(v3, v2);
  swift_release();
  swift_getKeyPath();
  v15 = v4;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v5 = *(void **)(v4 + 120);
  v6 = v5;
  result = swift_release();
  if (v5)
  {
    v8 = sub_1B8B9C464();

    MEMORY[0x1E0C80A78](v9);
    v14[2] = v1;
    v10 = sub_1B8AEDE40((void (*)(uint64_t *__return_ptr, id *))sub_1B8AF1C80, (uint64_t)v14, v8);
    swift_bridgeObjectRelease();
    v11 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CreateFamilyCalendarShareeView() + 24));
    v13 = *v11;
    v12 = v11[1];
    v15 = v13;
    v16 = v12;
    v14[4] = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2F0);
    return sub_1B8B9BE94();
  }
  return result;
}

uint64_t sub_1B8AEE128@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v4 = *a1;
  v5 = objc_msgSend(*a1, sel_fullName);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1B8B9C17C();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = objc_msgSend(v4, sel_appleID);
  if (v10)
  {
    v11 = v10;
    v12 = sub_1B8B9C17C();
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = objc_msgSend(v4, sel_memberPhoneNumbers);
  if (v15)
  {
    v16 = v15;
    v17 = sub_1B8B9C17C();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  sub_1B8AF1C98();
  result = (uint64_t)sub_1B8AEE430(v7, v9, v12, v14, v17, v19);
  if (result)
  {
    v21 = (void *)result;
    v22 = objc_msgSend(v4, sel_firstName);
    objc_msgSend(v21, sel_setFirstName_, v22);

    v23 = objc_msgSend(v4, sel_lastName);
    objc_msgSend(v21, sel_setLastName_, v23);

    v24 = *(_BYTE *)(a2 + 8);
    v25 = swift_retain();
    v26 = sub_1B8B17464(v25, v24);
    swift_release();
    swift_getKeyPath();
    sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
    sub_1B8B9B2D0();
    swift_release();
    v27 = *(void **)(v26 + 112);
    swift_unknownObjectRetain();
    swift_release();
    if (v27)
    {
      v28 = objc_msgSend(v27, sel_profilePictureForFamilyMember_pictureDiameter_, v4, 38.0);
      swift_unknownObjectRelease();
      v29 = a3;
      if (v28)
      {
        v27 = (void *)sub_1B8B9B084();
        v31 = v30;

      }
      else
      {
        v27 = 0;
        v31 = 0xF000000000000000;
      }
    }
    else
    {
      v31 = 0xF000000000000000;
      v29 = a3;
    }
    type metadata accessor for EKShareeWithData();
    v32 = swift_allocObject();
    sub_1B8AF1CDC((uint64_t)v27, v31);
    sub_1B8B9B2DC();
    *(_QWORD *)(v32 + 16) = v21;
    *(_QWORD *)(v32 + 24) = v27;
    *(_QWORD *)(v32 + 32) = v31;
    *(_BYTE *)(v32 + 40) = objc_msgSend(v21, sel_shareeAccessLevel) == (id)2;
    result = sub_1B8ADDBD0((uint64_t)v27, v31);
    *v29 = v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1B8AEE430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (a2)
  {
    v8 = (void *)sub_1B8B9C14C();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    v9 = 0;
    if (a6)
      goto LABEL_4;
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v9 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_7;
LABEL_4:
  v10 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
LABEL_8:
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_shareeWithName_emailAddress_phoneNumber_, v8, v9, v10);

  return v11;
}

uint64_t sub_1B8AEE514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t FamilyCalendarShareeView;
  uint64_t v30;
  __int128 v31;

  v30 = a1;
  v28 = sub_1B8B9C3A4();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v4 = *(_QWORD *)(FamilyCalendarShareeView - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](FamilyCalendarShareeView);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC290);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC298);
  v27 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = sub_1B8B9B7A4();
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v13 = (uint64_t *)&v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2A0) + 44)];
  v24 = v1;
  sub_1B8AEE870(v1, v13);
  sub_1B8AF0438(v1, (uint64_t)v6);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v25 = v14 + v5;
  v15 = swift_allocObject();
  sub_1B8AF0480((uint64_t)v6, v15 + v14);
  sub_1B8B9C38C();
  v16 = &v12[*(int *)(v10 + 36)];
  v17 = sub_1B8B9B4C8();
  v18 = v26;
  v19 = v28;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(&v16[*(int *)(v17 + 20)], v3, v28);
  *(_QWORD *)v16 = &unk_1EF1BC2B0;
  *((_QWORD *)v16 + 1) = v15;
  sub_1B8ADE850((uint64_t)v9, (uint64_t)v12, &qword_1EF1BC290);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v19);
  sub_1B8ADE894((uint64_t)v9, &qword_1EF1BC290);
  v20 = v24;
  v31 = *(_OWORD *)(v24 + *(int *)(FamilyCalendarShareeView + 28));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2B8);
  sub_1B8B9BEA0();
  sub_1B8AF0438(v20, (uint64_t)v6);
  v21 = swift_allocObject();
  sub_1B8AF0480((uint64_t)v6, v21 + v14);
  type metadata accessor for EKShareeWithData();
  type metadata accessor for EditShareeView();
  sub_1B8AF0580();
  sub_1B8ADBDEC(&qword_1EF1BC2D8, (uint64_t (*)(uint64_t))type metadata accessor for EKShareeWithData, (uint64_t)&unk_1B8BAD524);
  sub_1B8ADBDEC(&qword_1EF1BC2E0, (uint64_t (*)(uint64_t))type metadata accessor for EditShareeView, (uint64_t)&unk_1B8BABB88);
  sub_1B8B9BCE4();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_1B8ADE894((uint64_t)v12, &qword_1EF1BC298);
}

uint64_t sub_1B8AEE870@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t FamilyCalendarShareeView;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v83 = a2;
  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v80 = *(_QWORD *)(FamilyCalendarShareeView - 8);
  v81 = *(_QWORD *)(v80 + 64);
  MEMORY[0x1E0C80A78](FamilyCalendarShareeView);
  v79 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC300);
  v84 = *(_QWORD *)(v5 - 8);
  v85 = v5;
  MEMORY[0x1E0C80A78](v5);
  v82 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC308);
  v8 = MEMORY[0x1E0C80A78](v7);
  v90 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v91 = (uint64_t)&v66 - v10;
  v74 = sub_1B8B9B570();
  v77 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC310);
  v70 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC318);
  v75 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC320);
  v89 = *(_QWORD *)(v72 - 8);
  v17 = MEMORY[0x1E0C80A78](v72);
  v87 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v88 = (char *)&v66 - v19;
  v20 = sub_1B8B9C128();
  MEMORY[0x1E0C80A78](v20);
  v21 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v21);
  v22 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v22);
  v78 = sub_1B8B9BE04();
  v76 = sub_1B8B9BA20();
  KeyPath = swift_getKeyPath();
  sub_1B8B9C0F8();
  v23 = CUIKBundle();
  sub_1B8B9B15C();
  v68 = sub_1B8B9C1A0();
  v67 = v24;
  sub_1B8B9C11C();
  sub_1B8B9C110();
  v25 = *(_BYTE *)(a1 + 8);
  v26 = swift_retain();
  v27 = sub_1B8B17464(v26, v25);
  swift_release();
  swift_getKeyPath();
  v93 = v27;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  swift_bridgeObjectRetain();
  swift_release();
  sub_1B8B9C104();
  swift_bridgeObjectRelease();
  sub_1B8B9C110();
  sub_1B8B9C134();
  v28 = CUIKBundle();
  sub_1B8B9B15C();
  v66 = sub_1B8B9C1A0();
  v86 = v29;
  v30 = sub_1B8B9B9F0();
  sub_1B8B9B3E4();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v92 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC328);
  sub_1B8AF1D30();
  sub_1B8B9BAEC();
  sub_1B8B9C044();
  v39 = sub_1B8ADE950(&qword_1EF1BC388, &qword_1EF1BC310, MEMORY[0x1E0CDD8A0]);
  v40 = sub_1B8ADBDEC(&qword_1EF1BC390, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9E80], MEMORY[0x1E0CD9E70]);
  v41 = v69;
  v42 = v74;
  sub_1B8B9BD38();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v12, v42);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v14, v41);
  v93 = v41;
  v94 = v42;
  v95 = v39;
  v96 = v40;
  swift_getOpaqueTypeConformance2();
  v43 = v87;
  v44 = v73;
  sub_1B8B9BCB4();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v44);
  v45 = v88;
  v46 = v89;
  v47 = v72;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v43, v72);
  v48 = a1;
  v49 = v79;
  sub_1B8AF0438(v48, v79);
  v50 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  v51 = swift_allocObject();
  sub_1B8AF0480(v49, v51 + v50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC398);
  sub_1B8AF1F88();
  v52 = v82;
  sub_1B8B9BEB8();
  v54 = v84;
  v53 = v85;
  v55 = v90;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v90, v52, v85);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v53);
  v56 = v91;
  sub_1B8AF1FEC(v55, v91);
  v57 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v57(v43, v45, v47);
  sub_1B8ADE850(v56, v55, &qword_1EF1BC308);
  v58 = v83;
  v59 = KeyPath;
  *v83 = v78;
  v58[1] = v59;
  v60 = v68;
  v58[2] = v76;
  v58[3] = v60;
  v61 = v66;
  v58[4] = v67;
  v58[5] = v61;
  v58[6] = v86;
  *((_BYTE *)v58 + 56) = v30;
  v58[8] = v32;
  v58[9] = v34;
  v58[10] = v36;
  v58[11] = v38;
  *((_BYTE *)v58 + 96) = 0;
  v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3A8);
  v57((char *)v58 + v62[12], v43, v47);
  v63 = (char *)v58 + v62[16];
  *(_QWORD *)v63 = 0;
  v63[8] = 1;
  sub_1B8ADE850(v55, (uint64_t)v58 + v62[20], &qword_1EF1BC308);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_1B8ADE894(v91, &qword_1EF1BC308);
  v64 = *(void (**)(char *, uint64_t))(v89 + 8);
  v64(v88, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8ADE894(v90, &qword_1EF1BC308);
  v64(v87, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B8AEF188(uint64_t a1)
{
  uint64_t FamilyCalendarShareeView;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v3 = *(_QWORD *)(FamilyCalendarShareeView - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (uint64_t *)(a1 + *(int *)(MEMORY[0x1E0C80A78](FamilyCalendarShareeView) + 24));
  v7 = *v5;
  v6 = v5[1];
  v11[2] = v7;
  v11[3] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2F0);
  sub_1B8B9BE88();
  swift_getKeyPath();
  sub_1B8AF0438(a1, (uint64_t)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = swift_allocObject();
  sub_1B8AF0480((uint64_t)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC280);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC340);
  sub_1B8ADE950(&qword_1EF1BC3C0, &qword_1EF1BC280, MEMORY[0x1E0DEAF48]);
  sub_1B8AF21A0();
  sub_1B8AF1D94();
  return sub_1B8B9BF84();
}

void sub_1B8AEF2F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_emailAddress);
  if (v3)
  {
    v4 = v3;
    v5 = sub_1B8B9C17C();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_1B8AEF354@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FamilyCalendarShareeView;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a3;
  v5 = sub_1B8B9B8DC();
  v6 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  v37 = v6;
  MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v9 = *(_QWORD *)(FamilyCalendarShareeView - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](FamilyCalendarShareeView);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC360);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC348);
  MEMORY[0x1E0C80A78](v32);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3D8);
  v33 = *(_QWORD *)(v18 - 8);
  v34 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  sub_1B8AF0438(a2, (uint64_t)v11);
  v22 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject();
  sub_1B8AF0480((uint64_t)v11, v24 + v22);
  *(_QWORD *)(v24 + v23) = v21;
  sub_1B8AF2368();
  swift_retain();
  sub_1B8B9BEB8();
  v25 = objc_msgSend((id)objc_opt_self(), sel_cuik_tertiaryGroupedBackgroundColor);
  v39 = MEMORY[0x1BCCB5F78](v25);
  swift_retain();
  v26 = sub_1B8B9BF30();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v15, v12);
  swift_release();
  *(_QWORD *)&v17[*(int *)(v32 + 36)] = v26;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v27 = v35;
  sub_1B8B9B8D0();
  sub_1B8AF1E6C();
  sub_1B8ADBDEC(&qword_1EF1BC378, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBC98], MEMORY[0x1E0CDBC78]);
  v28 = v36;
  sub_1B8B9BBF4();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
  sub_1B8ADE894((uint64_t)v17, &qword_1EF1BC348);
  v30 = v33;
  v29 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v38, v20, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v20, v29);
}

uint64_t sub_1B8AEF674()
{
  type metadata accessor for CreateFamilyCalendarShareeView();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2B8);
  return sub_1B8B9BE94();
}

id sub_1B8AEF6D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = (void *)a1[2];
  result = objc_msgSend(v4, sel_name);
  if (result)
  {
    v6 = result;
    v7 = sub_1B8B9C17C();
    v9 = v8;

    v11 = a1[3];
    v10 = a1[4];
    sub_1B8AF1CDC(v11, v10);
    result = objc_msgSend(v4, sel_shareeAccessLevel);
    *a2 = v7;
    a2[1] = v9;
    a2[2] = v11;
    a2[3] = v10;
    a2[4] = (uint64_t)result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 sub_1B8AEF76C@<Q0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  _OWORD v21[9];

  sub_1B8B9B780();
  v2 = CUIKBundle();
  v3 = sub_1B8B9BBA0();
  v5 = v4;
  v7 = v6 & 1;
  v8 = sub_1B8B9BB88();
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  sub_1B8ADDA88(v3, v5, v7);
  swift_bridgeObjectRelease();
  v15 = sub_1B8B9C014();
  sub_1B8AEF8F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v21, 0.0, 1, 0.0, 1, v15, v16, v8, v10, v14, v12);
  sub_1B8ADDA88(v8, v10, v14);
  swift_bridgeObjectRelease();
  v17 = v21[7];
  *(_OWORD *)(a1 + 96) = v21[6];
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 128) = v21[8];
  v18 = v21[3];
  *(_OWORD *)(a1 + 32) = v21[2];
  *(_OWORD *)(a1 + 48) = v18;
  v19 = v21[5];
  *(_OWORD *)(a1 + 64) = v21[4];
  *(_OWORD *)(a1 + 80) = v19;
  result = (__n128)v21[1];
  *(_OWORD *)a1 = v21[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B8AEF8F8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v20 = a19;
  v21 = a18;
  v22 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1B8B9C458();
    v31 = (void *)sub_1B8B9B9A8();
    sub_1B8B9B2F4();

    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  sub_1B8B9B5AC();
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_1B8ADD7C0(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8AEFAD8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  sub_1B8B9C380();
  *(_QWORD *)(v1 + 32) = sub_1B8B9C374();
  sub_1B8B9C368();
  return swift_task_switch();
}

uint64_t sub_1B8AEFB44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release();
  sub_1B8AEDFD8();
  v2 = *(_BYTE *)(v1 + 8);
  v3 = swift_retain();
  v4 = sub_1B8B17464(v3, v2);
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 16) = v4;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  swift_release();
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    v8 = **(_QWORD **)(v0 + 24);
    v9 = *(_BYTE *)(v1 + 8);
    v10 = swift_retain();
    v11 = sub_1B8B17464(v10, v9);
    v12 = sub_1B8B17464(v8, v9);
    swift_release();
    v13 = *(_QWORD *)(v12 + 24);
    v14 = *(_QWORD *)(v12 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    swift_getKeyPath();
    v15 = (_QWORD *)swift_task_alloc();
    v15[2] = v11;
    v15[3] = v13;
    v15[4] = v14;
    *(_QWORD *)(v0 + 16) = v11;
    sub_1B8B9B2C4();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B8AEFD04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t FamilyCalendarShareeView;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  char *v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v7 = *(_QWORD *)(FamilyCalendarShareeView - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](FamilyCalendarShareeView);
  v9 = *a1;
  sub_1B8AF0438(a2, (uint64_t)&v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  sub_1B8AF0480((uint64_t)&v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10);
  *(_QWORD *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
  *a3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  swift_storeEnumTagMultiPayload();
  v12 = type metadata accessor for EditShareeView();
  type metadata accessor for EKShareeWithData();
  sub_1B8ADBDEC((unint64_t *)&qword_1EF1BC2E8, (uint64_t (*)(uint64_t))type metadata accessor for EKShareeWithData, (uint64_t)&unk_1B8BAD508);
  swift_retain_n();
  sub_1B8B9BFE4();
  v13 = (uint64_t (**)())((char *)a3 + *(int *)(v12 + 24));
  *v13 = sub_1B8AF0620;
  v13[1] = (uint64_t (*)())v11;
  v14 = (char *)a3 + *(int *)(v12 + 28);
  v17[15] = 0;
  result = sub_1B8B9BE7C();
  v16 = v18;
  *v14 = v17[16];
  *((_QWORD *)v14 + 1) = v16;
  return result;
}

uint64_t sub_1B8AEFE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v14[0] = sub_1B8B9B4A4();
  v4 = *(_QWORD *)(v14[0] - 8);
  MEMORY[0x1E0C80A78](v14[0]);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CreateFamilyCalendarShareeView() + 24));
  v8 = *v7;
  v9 = v7[1];
  v15 = *v7;
  v16 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC2F0);
  sub_1B8B9BE88();
  v10 = sub_1B8AF1628(&v17, a2);
  swift_release();
  if (!(v17 >> 62))
  {
    v11 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v10)
      goto LABEL_3;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v11 = sub_1B8B9C728();
  swift_bridgeObjectRelease();
  if (v11 < v10)
    goto LABEL_9;
LABEL_3:
  sub_1B8AF195C(v10, v11);
  v15 = v8;
  v16 = v9;
  v14[1] = v17;
  sub_1B8B9BE94();
  swift_release();
  swift_bridgeObjectRelease();
  v15 = v8;
  v16 = v9;
  sub_1B8B9BE88();
  if (!(v17 >> 62))
  {
    v12 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  v12 = sub_1B8B9C728();
  swift_bridgeObjectRelease();
LABEL_5:
  result = swift_bridgeObjectRelease();
  if (!v12)
  {
    sub_1B8B17628((uint64_t)v6);
    sub_1B8B9B498();
    return (*(uint64_t (**)(char *, _QWORD))(v4 + 8))(v6, v14[0]);
  }
  return result;
}

double sub_1B8AF0094@<D0>(uint64_t a1@<X8>)
{
  char v2;
  int *FamilyCalendarShareeView;
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  double result;
  __int128 v8;

  type metadata accessor for CreateFamilyCalendarViewModel();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  *(_QWORD *)a1 = sub_1B8B9B420();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  FamilyCalendarShareeView = (int *)type metadata accessor for CreateFamilyCalendarShareeView();
  v4 = (uint64_t *)(a1 + FamilyCalendarShareeView[5]);
  *v4 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  swift_storeEnumTagMultiPayload();
  v5 = (_OWORD *)(a1 + FamilyCalendarShareeView[6]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC280);
  sub_1B8B9BE7C();
  *v5 = v8;
  v6 = FamilyCalendarShareeView[7];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC288);
  sub_1B8B9BE7C();
  result = *(double *)&v8;
  *(_OWORD *)(a1 + v6) = v8;
  return result;
}

uint64_t sub_1B8AF01AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 112);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B8AF023C()
{
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  swift_unknownObjectRetain();
  sub_1B8B9B2C4();
  swift_release();
  return swift_unknownObjectRelease();
}

id sub_1B8AF02F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v4 = *(void **)(v3 + 120);
  *a2 = v4;
  return v4;
}

void sub_1B8AF0380(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  v2 = v1;
  sub_1B8B9B2C4();
  swift_release();

}

uint64_t sub_1B8AF0438(uint64_t a1, uint64_t a2)
{
  uint64_t FamilyCalendarShareeView;

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FamilyCalendarShareeView - 8) + 16))(a2, a1, FamilyCalendarShareeView);
  return a2;
}

uint64_t sub_1B8AF0480(uint64_t a1, uint64_t a2)
{
  uint64_t FamilyCalendarShareeView;

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FamilyCalendarShareeView - 8) + 32))(a2, a1, FamilyCalendarShareeView);
  return a2;
}

uint64_t sub_1B8AF04C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CreateFamilyCalendarShareeView() - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1B8AF0528;
  return sub_1B8AEFAD8(v3);
}

uint64_t sub_1B8AF0528()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B8AF0574(uint64_t a1)
{
  return sub_1B8AF2144(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AEFD04);
}

unint64_t sub_1B8AF0580()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC2C0;
  if (!qword_1EF1BC2C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC298);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC2C8, &qword_1EF1BC290, MEMORY[0x1E0CDFCB8]);
    v2[1] = sub_1B8ADBDEC(&qword_1EF1BC2D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9170], MEMORY[0x1E0CD9160]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC2C0);
  }
  return result;
}

uint64_t sub_1B8AF0620()
{
  return sub_1B8AF2310((uint64_t (*)(unint64_t, _QWORD))sub_1B8AEFE98);
}

uint64_t sub_1B8AF062C(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1B8B9C5E4();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1B8AF1C98();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1B8B9C5D8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1B8AF08A8(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_1B8AF0A8C();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_1B8AF0D28((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_1B8B9C4C4();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_1B8AF1C98();
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_1B8B9C4D0();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_1B8B9C4D0();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1B8AF0DA8((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1B8AF08A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3B8);
    v2 = sub_1B8B9C620();
    v14 = v2;
    sub_1B8B9C5CC();
    if (sub_1B8B9C5F0())
    {
      sub_1B8AF1C98();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_1B8AF0A8C();
          v2 = v14;
        }
        result = sub_1B8B9C4C4();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_1B8B9C5F0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1B8AF0A8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3B8);
  v3 = sub_1B8B9C614();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_1B8B9C4C4();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1B8AF0D28(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1B8B9C4C4();
  result = sub_1B8B9C5C0();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1B8AF0DA8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1B8AF0A8C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1B8AF0F1C();
      goto LABEL_14;
    }
    sub_1B8AF10C4();
  }
  v8 = *v3;
  v9 = sub_1B8B9C4C4();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1B8AF1C98();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1B8B9C4D0();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1B8B9C920();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1B8B9C4D0();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

id sub_1B8AF0F1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3B8);
  v2 = *v0;
  v3 = sub_1B8B9C608();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B8AF10C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3B8);
  v3 = sub_1B8B9C614();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_1B8B9C4C4();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1B8AF133C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1BCCB680CLL);
}

uint64_t sub_1B8AF13A4(unint64_t a1)
{
  return sub_1B8B860D0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1B8AF13B8(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  sub_1B8AF1C98();
  sub_1B8ADBDEC(&qword_1EF1BC3B0, (uint64_t (*)(uint64_t))sub_1B8AF1C98, MEMORY[0x1E0DEFCF8]);
  result = sub_1B8B9C3D4();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1B8B9C728();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1BCCB6800](i, a1);
        sub_1B8AF062C(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_1B8AF062C(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8AF1518(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;

  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    v4 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
    v5 = 0;
    if (!v4)
      return v5;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = 0;
    if (!v4)
      return v5;
  }
  a2 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x1BCCB6800](v5, a1);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
      swift_retain();
    }
    v7 = objc_msgSend(*(id *)(v6 + 16), sel_isEqualToSharee_, a2);
    swift_release();
    if ((v7 & 1) != 0)
      return v5;
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v8 == v4)
      return 0;
  }
}

unint64_t sub_1B8AF1628(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B8AF1518(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if ((v8 & 1) != 0)
    {
      v21 = *a1;
      if (v21 >> 62)
      {
        swift_bridgeObjectRetain();
        v6 = sub_1B8B9C728();
        swift_bridgeObjectRelease();
      }
      else
      {
        return *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_54;
      if (*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        v23 = sub_1B8B9C728();
        swift_bridgeObjectRelease();
        if (v9 != v23)
          goto LABEL_6;
      }
      else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        a2 = *(_QWORD *)(a2 + 16);
        v10 = v6 + 5;
        v11 = &selRef_setLayoutDirectionOverride_;
        while (1)
        {
          v12 = v10 - 4;
          v13 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v14 = MEMORY[0x1BCCB6800](v10 - 4);
          }
          else
          {
            if ((v12 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_45;
            v14 = *(_QWORD *)(v13 + 8 * v10);
            swift_retain();
          }
          v9 = (unint64_t)objc_msgSend(*(id *)(v14 + 16), v11[194], a2);
          swift_release();
          if ((v9 & 1) == 0)
            break;
LABEL_32:
          v9 = v10 - 3;
          if (__OFADD__(v12, 1))
            goto LABEL_46;
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            v20 = sub_1B8B9C728();
            swift_bridgeObjectRelease();
          }
          else
          {
            v20 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v10;
          if (v9 == v20)
            return v6;
        }
        if (v12 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1))
            goto LABEL_47;
          goto LABEL_32;
        }
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v15 = MEMORY[0x1BCCB6800](v6, *a1);
          v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v12 & 0x8000000000000000) != 0)
              goto LABEL_50;
            if (v12 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_51;
            v16 = *(_QWORD *)(v9 + 8 * v10);
            swift_retain();
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_48;
          if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_49;
          v15 = *(_QWORD *)(v9 + 8 * v6 + 32);
          swift_retain();
          if ((v9 & 0xC000000000000001) == 0)
            goto LABEL_17;
        }
        v16 = MEMORY[0x1BCCB6800](v10 - 4, v9);
        v9 = *a1;
LABEL_20:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v9 & 0x8000000000000000) != 0
          || (v9 & 0x4000000000000000) != 0)
        {
          sub_1B8AF133C(v9);
        }
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v16;
        swift_release();
        sub_1B8B9C2FC();
        v9 = *a1;
        v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v18 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
          sub_1B8AF133C(v9);
        v11 = &selRef_setLayoutDirectionOverride_;
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_52;
        if (v12 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_53;
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v10) = v15;
        swift_release();
        sub_1B8B9C2FC();
        goto LABEL_31;
      }
    }
  }
  return v6;
}

uint64_t sub_1B8AF195C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = sub_1B8B9C728();
  swift_bridgeObjectRelease();
  if (v21 < v2)
    goto LABEL_31;
LABEL_4:
  v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v7 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62)
    goto LABEL_34;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 - v6;
  if (__OFADD__(v7, v5))
    goto LABEL_36;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x1BCCB680C](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for EKShareeWithData();
  swift_arrayDestroy();
  if (!v5)
    return sub_1B8B9C2FC();
  if (!(*v3 >> 62))
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = sub_1B8B9C728();
  swift_bridgeObjectRelease();
  v16 = v22 - v2;
  if (__OFSUB__(v22, v2))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v17[8 * v16])
      memmove(v14, v17, 8 * v16);
    if (!(*v3 >> 62))
    {
      v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v18 + v5;
      if (!__OFADD__(v18, v5))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v19;
        return sub_1B8B9C2FC();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
    v19 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8AF1C5C()
{
  uint64_t *v0;

  return sub_1B8B1E590(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B8AF1C80@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B8AEE128(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1B8AF1C98()
{
  unint64_t result;

  result = qword_1EF1BC2F8;
  if (!qword_1EF1BC2F8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1BC2F8);
  }
  return result;
}

uint64_t sub_1B8AF1CDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1B8ADC5E4(a1, a2);
  return a1;
}

uint64_t sub_1B8AF1CF0()
{
  uint64_t v0;

  return sub_1B8B1E678(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1B8AF1D08()
{
  uint64_t v0;

  sub_1B8B1E6B0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1B8AF1D28()
{
  uint64_t v0;

  return sub_1B8AEF188(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1B8AF1D30()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BC330;
  if (!qword_1EF1BC330)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC328);
    v2 = sub_1B8AF1D94();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFEE0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC330);
  }
  return result;
}

unint64_t sub_1B8AF1D94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  _QWORD v5[6];

  result = qword_1EF1BC338;
  if (!qword_1EF1BC338)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC340);
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC348);
    v3 = sub_1B8B9B8DC();
    v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBC98];
    v5[2] = v2;
    v5[3] = v3;
    v5[4] = sub_1B8AF1E6C();
    v5[5] = sub_1B8ADBDEC(&qword_1EF1BC378, v4, MEMORY[0x1E0CDBC78]);
    v5[0] = swift_getOpaqueTypeConformance2();
    v5[1] = sub_1B8AF1F08();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v5);
    atomic_store(result, (unint64_t *)&qword_1EF1BC338);
  }
  return result;
}

unint64_t sub_1B8AF1E6C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC350;
  if (!qword_1EF1BC350)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC348);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC358, &qword_1EF1BC360, MEMORY[0x1E0CDFA50]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BC368, &qword_1EF1BC370, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC350);
  }
  return result;
}

unint64_t sub_1B8AF1F08()
{
  unint64_t result;

  result = qword_1EF1BC380;
  if (!qword_1EF1BC380)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAF4CC, &type metadata for FamilyRowInsetAppearance);
    atomic_store(result, (unint64_t *)&qword_1EF1BC380);
  }
  return result;
}

uint64_t sub_1B8AF1F50()
{
  type metadata accessor for CreateFamilyCalendarShareeView();
  return sub_1B8AEDC3C();
}

unint64_t sub_1B8AF1F88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC3A0;
  if (!qword_1EF1BC3A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC398);
    v2[0] = MEMORY[0x1E0CDDD50];
    v2[1] = MEMORY[0x1E0CDA220];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC3A0);
  }
  return result;
}

uint64_t sub_1B8AF1FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *keypath_get_selector_emailAddress()
{
  return sel_emailAddress;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t FamilyCalendarShareeView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(FamilyCalendarShareeView - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(FamilyCalendarShareeView - 8) + 80));
  swift_release();
  v3 = v2 + *(int *)(FamilyCalendarShareeView + 20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1B8B9B4A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8AF2138(uint64_t a1)
{
  return sub_1B8AF2144(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AEF354);
}

uint64_t sub_1B8AF2144(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CreateFamilyCalendarShareeView() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1B8AF21A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF1BC3C8;
  if (!qword_1EF1BC3C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC3D0);
    v2 = MEMORY[0x1E0DEA978];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC3C8);
  }
  return result;
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v0;
  uint64_t FamilyCalendarShareeView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  FamilyCalendarShareeView = type metadata accessor for CreateFamilyCalendarShareeView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(FamilyCalendarShareeView - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(FamilyCalendarShareeView - 8) + 80));
  swift_release();
  v3 = v2 + *(int *)(FamilyCalendarShareeView + 20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1B8B9B4A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8AF2304()
{
  return sub_1B8AF2310((uint64_t (*)(unint64_t, _QWORD))sub_1B8AEF674);
}

uint64_t sub_1B8AF2310(uint64_t (*a1)(unint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(type metadata accessor for CreateFamilyCalendarShareeView() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(v1 + v3, *(_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)));
}

id sub_1B8AF2360@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_1B8AEF6D8(v1, a1);
}

unint64_t sub_1B8AF2368()
{
  unint64_t result;

  result = qword_1EF1BC3E0;
  if (!qword_1EF1BC3E0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA8A3C, &type metadata for ShareeWithAccessItemView);
    atomic_store(result, (unint64_t *)&qword_1EF1BC3E0);
  }
  return result;
}

uint64_t sub_1B8AF23AC()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC298);
  type metadata accessor for EKShareeWithData();
  type metadata accessor for EditShareeView();
  sub_1B8AF0580();
  sub_1B8ADBDEC(&qword_1EF1BC2D8, (uint64_t (*)(uint64_t))type metadata accessor for EKShareeWithData, (uint64_t)&unk_1B8BAD524);
  sub_1B8ADBDEC(&qword_1EF1BC2E0, (uint64_t (*)(uint64_t))type metadata accessor for EditShareeView, (uint64_t)&unk_1B8BABB88);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AF2470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1B8AF2488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v2 = sub_1B8B9B3FC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B8B9B180();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F00);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1B8B38D00((uint64_t)&unk_1E6EB4010);
  swift_arrayDestroy();
  sub_1B8B9B18C();
  sub_1B8B9B174();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14 = sub_1B8B9B150();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1B8ADE894((uint64_t)v12, &qword_1EF1B8F00);
    return sub_1B8B9BDB0();
  }
  v16 = sub_1B8B9B144();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  LOBYTE(v16) = sub_1B8AF2700(v16, v18, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    return sub_1B8B9BDB0();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v19 == *MEMORY[0x1E0CD86D8])
    return sub_1B8B9BDB0();
  if (v19 == *MEMORY[0x1E0CD86C8])
    return sub_1B8B9BD8C();
  result = sub_1B8B9C710();
  __break(1u);
  return result;
}

uint64_t sub_1B8AF2700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1B8B9C968();
    sub_1B8B9C1E8();
    v6 = sub_1B8B9C998();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1B8B9C8D8() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1B8B9C8D8() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1B8AF2834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = sub_1B8B9B180();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F00);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B8B38D00((uint64_t)&unk_1E6EB3C10);
  swift_arrayDestroy();
  sub_1B8B9B18C();
  sub_1B8B9B174();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v8 = sub_1B8B9B150();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1B8ADE894((uint64_t)v6, &qword_1EF1B8F00);
  }
  else
  {
    v10 = sub_1B8B9B144();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    LOBYTE(v10) = sub_1B8AF2700(v10, v12, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return sub_1B8B9BD74();
  }
  return sub_1B8B9BD8C();
}

BOOL static CUIKMonthDimmingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CUIKMonthDimmingMode.hash(into:)()
{
  return sub_1B8B9C974();
}

uint64_t CUIKMonthDimmingMode.hashValue.getter()
{
  sub_1B8B9C968();
  sub_1B8B9C974();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AF2A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, unsigned __int8 *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  id v73;
  uint64_t v74;
  void (*v75)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void (*v102)(unint64_t, uint64_t);
  char v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  NSObject *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  unint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  unint64_t v123;
  void (*v124)(unint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  void (*v131)(uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unsigned int (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  void *v146;
  void *v147;
  char *v148;
  void *v149;
  id v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t);
  char *v160;
  uint64_t v161;
  char v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  char v169;
  char *v170;
  uint64_t v171;
  char v172;
  char v173;
  void (*v174)(char *, uint64_t);
  char *v175;
  char *v176;
  char v177;
  char *v178;
  char v179;
  BOOL v180;
  BOOL v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  void (*v187)(char *, uint64_t, uint64_t);
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  uint64_t result;
  char v192;
  uint64_t v193;
  uint64_t *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  void (*v202)(uint64_t, uint64_t, uint64_t);
  char *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  void (*v209)(char *, uint64_t);
  char *v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  void (*v213)(char *, uint64_t);
  void (*v214)(char *, uint64_t);
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  void (*v224)(char *, uint64_t, uint64_t, uint64_t);
  char *v225;
  char *v226;
  char *v227;
  unsigned int v228;
  int v229;
  char *v230;
  char *v231;
  uint64_t v232;
  int v233;
  void (*v234)(char *, char *, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  char *v254;
  __int128 v255;
  char *v256;
  char *v257;
  uint64_t *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(uint64_t);
  void (*v271)(char *, char *, uint64_t);
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;

  v250 = a8;
  v243 = a7;
  v232 = a6;
  v248 = a4;
  v246 = a3;
  v245 = a2;
  v235 = a1;
  v11 = sub_1B8B9B270();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v265 = (char *)&v215 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = sub_1B8B9B2B8();
  v237 = *(_QWORD *)(v260 - 8);
  MEMORY[0x1E0C80A78](v260);
  v231 = (char *)&v215 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = sub_1B8B9B288();
  v236 = *(_QWORD *)(v247 - 8);
  v15 = MEMORY[0x1E0C80A78](v247);
  v223 = (char *)&v215 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v222 = (char *)&v215 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F70);
  MEMORY[0x1E0C80A78](v18);
  v276 = (char *)&v215 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F68);
  v21 = MEMORY[0x1E0C80A78](v20);
  v230 = (char *)&v215 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v272 = (char *)&v215 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v25 = MEMORY[0x1E0C80A78](v24);
  v259 = (char *)&v215 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v242 = (uint64_t)&v215 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v244 = (uint64_t)&v215 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v256 = (char *)&v215 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v215 - v33;
  v253 = sub_1B8B9B0F0();
  v275 = *(_QWORD *)(v253 - 8);
  v35 = MEMORY[0x1E0C80A78](v253);
  *(_QWORD *)&v255 = (char *)&v215 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v227 = (char *)&v215 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v226 = (char *)&v215 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v274 = (char *)&v215 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v219 = (char *)&v215 - v44;
  MEMORY[0x1E0C80A78](v43);
  v225 = (char *)&v215 - v45;
  v46 = sub_1B8B9AF4C();
  v47 = *(_QWORD *)(v46 - 8);
  v268 = v46;
  v269 = v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v277 = (unint64_t)&v215 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v254 = (char *)&v215 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v257 = (char *)&v215 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v217 = (char *)&v215 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v216 = (char *)&v215 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v221 = (char *)&v215 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v62 = (char *)&v215 - v61;
  v63 = MEMORY[0x1E0C80A78](v60);
  v220 = (char *)&v215 - v64;
  MEMORY[0x1E0C80A78](v63);
  v66 = (char *)&v215 - v65;
  v67 = type metadata accessor for WeekDayViewModel(0);
  v238 = *(_QWORD *)(v67 - 8);
  v68 = MEMORY[0x1E0C80A78](v67);
  v258 = (uint64_t *)((char *)&v215 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v68);
  v71 = (char *)&v215 - v70;
  v241 = *a10;
  v72 = (void *)sub_1B8B9B1E0();
  v73 = objc_msgSend(v72, sel_daysInWeek);

  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v75 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
  v240 = v74;
  v239 = v75;
  ((void (*)(char *, uint64_t, uint64_t))v75)(v71, 1, 1);
  v267 = sub_1B8AF4230((uint64_t)v71, (uint64_t)v73);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94A8);
  v77 = *(_QWORD *)(v12 + 72);
  v78 = *(unsigned __int8 *)(v12 + 80);
  v79 = (v78 + 32) & ~v78;
  v80 = 2 * v77;
  v264 = v76;
  v261 = v78 | 7;
  v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_1B8BA7860;
  v262 = v79;
  v82 = v81 + v79;
  v83 = *MEMORY[0x1E0CB1160];
  v266 = v12;
  v84 = *(void (**)(uint64_t))(v12 + 104);
  v228 = v83;
  v84(v82);
  v263 = v77;
  ((void (*)(uint64_t, _QWORD, uint64_t))v84)(v82 + v77, *MEMORY[0x1E0CB1158], v11);
  v85 = *MEMORY[0x1E0CB1138];
  v270 = v84;
  ((void (*)(uint64_t, uint64_t, uint64_t))v84)(v82 + 2 * v77, v85, v11);
  sub_1B8B38EA0(v81);
  swift_setDeallocating();
  v273 = v11;
  swift_arrayDestroy();
  v86 = v66;
  swift_deallocClassInstance();
  sub_1B8B9B1C8();
  v87 = v275;
  v88 = v253;
  swift_bridgeObjectRelease();
  sub_1B8B9B204();
  v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
  if (v89(v34, 1, v88) == 1)
  {
    sub_1B8ADE894((uint64_t)v34, &qword_1ED1B2D18);
    v90 = sub_1B8B9C44C();
    v92 = v268;
    v91 = v269;
    (*(void (**)(unint64_t, char *, uint64_t))(v269 + 16))(v277, v86, v268);
    sub_1B8B05B9C(0, &qword_1EF1BC778);
    v93 = v86;
    v94 = sub_1B8B9C500();
    v95 = v90;
    if (os_log_type_enabled(v94, v90))
    {
      v96 = (uint8_t *)swift_slowAlloc();
      v97 = swift_slowAlloc();
      v218 = v93;
      v98 = v97;
      v279 = v97;
      *(_DWORD *)v96 = 136315138;
      sub_1B8ADBDEC(&qword_1EF1BC780, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
      v99 = v277;
      v100 = sub_1B8B9C8C0();
      v278 = sub_1B8B17B04(v100, v101, (uint64_t *)&v279);
      sub_1B8B9C524();
      swift_bridgeObjectRelease();
      v102 = *(void (**)(unint64_t, uint64_t))(v91 + 8);
      v102(v99, v92);
      _os_log_impl(&dword_1B8A6A000, v94, v95, "Couldn't generate startOfMonth from components: %s", v96, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v98, -1, -1);
      MEMORY[0x1BCCB7A9C](v96, -1, -1);

      v102((unint64_t)v218, v92);
    }
    else
    {
      v124 = *(void (**)(unint64_t, uint64_t))(v91 + 8);
      v124(v277, v92);

      v124((unint64_t)v93, v92);
    }
    return v267;
  }
  v271 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
  v271(v225, v34, v88);
  v224 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56);
  v224(v272, 1, 1, v247);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v237 + 56))(v276, 1, 1, v260);
  v277 = sub_1B8B9AEEC();
  v252 = v103 & 1;
  v251 = sub_1B8B9AF04();
  v249 = v104 & 1;
  v218 = v86;
  sub_1B8B9AF1C();
  sub_1B8B9B1B0();
  v105 = v220;
  v106 = v253;
  sub_1B8B9AF40();
  v107 = (uint64_t)v256;
  sub_1B8B9B204();
  v272 = (char *)v89;
  if (v89((char *)v107, 1, v106) == 1)
  {
    sub_1B8ADE894(v107, &qword_1ED1B2D18);
    v108 = sub_1B8B9C44C();
    v110 = v268;
    v109 = v269;
    v111 = v254;
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v254, v105, v268);
    v112 = v255;
    v113 = v225;
    (*(void (**)(_QWORD, char *, uint64_t))(v275 + 16))(v255, v225, v106);
    sub_1B8B05B9C(0, &qword_1EF1BC778);
    v114 = sub_1B8B9C500();
    v115 = v108;
    if (os_log_type_enabled(v114, v108))
    {
      v116 = swift_slowAlloc();
      v277 = swift_slowAlloc();
      v279 = v277;
      *(_DWORD *)v116 = 136315394;
      sub_1B8ADBDEC(&qword_1EF1BC780, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
      LODWORD(v276) = v115;
      v117 = sub_1B8B9C8C0();
      v278 = sub_1B8B17B04(v117, v118, (uint64_t *)&v279);
      sub_1B8B9C524();
      swift_bridgeObjectRelease();
      v119 = *(void (**)(char *, uint64_t))(v269 + 8);
      v119(v111, v110);
      *(_WORD *)(v116 + 12) = 2080;
      sub_1B8ADBDEC(&qword_1EF1BC788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v120 = sub_1B8B9C8C0();
      v278 = sub_1B8B17B04(v120, v121, (uint64_t *)&v279);
      sub_1B8B9C524();
      swift_bridgeObjectRelease();
      v122 = *(void (**)(uint64_t, uint64_t))(v275 + 8);
      v122(v112, v106);
      _os_log_impl(&dword_1B8A6A000, v114, (os_log_type_t)v276, "Couldn't find a week starting with components: %s after date: %s", (uint8_t *)v116, 0x16u);
      v123 = v277;
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v123, -1, -1);
      MEMORY[0x1BCCB7A9C](v116, -1, -1);

      v119(v220, v110);
      v122((uint64_t)v225, v106);
      v119(v218, v110);
    }
    else
    {

      v212 = *(void (**)(uint64_t, uint64_t))(v275 + 8);
      v212(v112, v106);
      v213 = *(void (**)(char *, uint64_t))(v109 + 8);
      v213(v111, v110);
      v213(v105, v110);
      v212((uint64_t)v113, v106);
      v213(v218, v110);
    }
    return v267;
  }
  v125 = v219;
  v271(v219, (char *)v107, v106);
  v234 = *(void (**)(char *, char *, uint64_t))(v275 + 16);
  v234(v274, v125, v106);
  v126 = v262;
  v256 = (char *)(v262 + v80);
  v127 = swift_allocObject();
  v255 = xmmword_1B8BA4AB0;
  *(_OWORD *)(v127 + 16) = xmmword_1B8BA4AB0;
  v128 = v127 + v126;
  v129 = *MEMORY[0x1E0CB1130];
  v130 = v127 + v126;
  v131 = v270;
  ((void (*)(uint64_t, _QWORD, uint64_t))v270)(v130, *MEMORY[0x1E0CB1130], v273);
  v252 = *MEMORY[0x1E0CB1108];
  v131(v128 + v263);
  sub_1B8B38EA0(v127);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B8B9B1C8();
  swift_bridgeObjectRelease();
  v132 = v267;
  v251 = *(_QWORD *)(v267 + 16);
  if (!v251)
  {
    v211 = v268;
    v209 = *(void (**)(char *, uint64_t))(v269 + 8);
    v133 = v253;
LABEL_65:
    v209(v62, v211);
    v214 = *(void (**)(char *, uint64_t))(v275 + 8);
    v214(v274, v133);
    v214(v219, v133);
    v209(v220, v211);
    v214(v225, v133);
    v209(v218, v211);
    return v132;
  }
  LODWORD(v254) = v129;
  v276 = a5;
  v277 = 0;
  v249 = a9;
  v233 = v250 & 1;
  v133 = v253;
  while (1)
  {
    v134 = sub_1B8B9AEC8();
    if ((v135 & 1) != 0)
    {
      v136 = v260;
      v137 = v273;
      v138 = v274;
    }
    else
    {
      v136 = v260;
      v137 = v273;
      v138 = v274;
      if (v134 == v248)
        goto LABEL_16;
    }
    if ((v249 & 1) == 0)
    {
      v139 = v259;
      goto LABEL_57;
    }
LABEL_16:
    v140 = v244;
    sub_1B8ADE850(v245, v244, &qword_1ED1B2D18);
    v141 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v272;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v272)(v140, 1, v133) == 1)
    {
      sub_1B8ADE894(v140, &qword_1ED1B2D18);
      LODWORD(v142) = 0;
    }
    else
    {
      v143 = v226;
      v271(v226, (char *)v140, v133);
      LODWORD(v142) = sub_1B8B9B228();
      v141 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v272;
      (*(void (**)(char *, uint64_t))(v275 + 8))(v143, v133);
    }
    v144 = v242;
    sub_1B8ADE850(v246, v242, &qword_1ED1B2D18);
    if (v141(v144, 1, v133) == 1)
    {
      sub_1B8ADE894(v144, &qword_1ED1B2D18);
      v250 = v142;
    }
    else
    {
      v145 = v227;
      v271(v227, (char *)v144, v133);
      v250 = sub_1B8B9B228();
      (*(void (**)(char *, uint64_t))(v275 + 8))(v145, v133);
    }
    if (!v243)
    {
      v181 = 0;
      if (v241 != 1)
      {
        v180 = 0;
        v169 = 0;
        if (v241 == 2)
        {
          v180 = 0;
          v169 = 0;
          v181 = 1;
        }
        goto LABEL_52;
      }
      v229 = v142;
      v180 = 0;
      v169 = 0;
LABEL_51:
      v142 = v273;
      v185 = v265;
      v186 = v228;
      v187 = (void (*)(char *, uint64_t, uint64_t))v270;
      ((void (*)(char *, _QWORD, uint64_t))v270)(v265, v228, v273);
      v188 = sub_1B8B9B27C();
      v189 = *(void (**)(char *, uint64_t))(v266 + 8);
      v189(v185, v142);
      v187(v185, v186, v142);
      v190 = sub_1B8B9B27C();
      v189(v185, v142);
      v181 = v188 != v190;
      LOBYTE(v142) = v229;
      goto LABEL_52;
    }
    v146 = (void *)objc_opt_self();
    v147 = (void *)sub_1B8B9C14C();
    v148 = v231;
    sub_1B8B9B258();
    v149 = (void *)sub_1B8B9B2A0();
    (*(void (**)(char *, uint64_t))(v237 + 8))(v148, v136);
    v150 = objc_msgSend(v146, sel_overlayCalendarForCalendarIdentifier_timezone_, v147, v149);

    if (!v150)
    {
      v154 = (uint64_t)v230;
      v224(v230, 1, 1, v247);
LABEL_39:
      sub_1B8ADE894(v154, &qword_1EF1B8F68);
      v180 = 0;
      if (v241 != 1)
      {
        if (v241 == 2)
        {
          v181 = 1;
        }
        else
        {
          v181 = 0;
          v180 = 0;
        }
        v169 = 0;
        goto LABEL_52;
      }
      v229 = v142;
      v169 = 0;
      goto LABEL_51;
    }
    v151 = v223;
    sub_1B8B9B1F8();

    v152 = v236;
    v153 = *(void (**)(char *, char *, uint64_t))(v236 + 32);
    v154 = (uint64_t)v230;
    v155 = v247;
    v153(v230, v151, v247);
    v224((char *)v154, 0, 1, v155);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v154, 1, v155) == 1)
      goto LABEL_39;
    v229 = v142;
    v153(v222, (char *)v154, v155);
    v156 = swift_allocObject();
    *(_OWORD *)(v156 + 16) = v255;
    v157 = v156 + v262;
    v158 = v273;
    v159 = v270;
    ((void (*)(uint64_t, _QWORD, uint64_t))v270)(v156 + v262, v254, v273);
    ((void (*)(uint64_t, _QWORD, uint64_t))v159)(v157 + v263, v228, v158);
    sub_1B8B38EA0(v156);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v160 = v221;
    sub_1B8B9B1C8();
    swift_bridgeObjectRelease();
    v161 = sub_1B8B9AED4();
    v163 = (v162 & 1) == 0 && v161 == 1;
    v165 = v268;
    v164 = v269;
    v166 = v163;
    v167 = *(void (**)(char *, char *, uint64_t))(v269 + 16);
    v168 = v216;
    v167(v216, v160, v268);
    v169 = v166;
    if (v166 != 1)
    {
      v174 = *(void (**)(char *, uint64_t))(v164 + 8);
      v174(v168, v165);
LABEL_47:
      v175 = v217;
      v176 = v221;
      LOBYTE(v142) = v229;
      v167(v217, v221, v165);
      goto LABEL_48;
    }
    v170 = v168;
    v171 = sub_1B8B9AF1C();
    v173 = v172;
    v174 = *(void (**)(char *, uint64_t))(v164 + 8);
    v174(v170, v165);
    if ((v173 & 1) != 0)
      goto LABEL_47;
    v175 = v217;
    v176 = v221;
    v167(v217, v221, v165);
    LOBYTE(v142) = v229;
    if (v171 == 1)
    {
      v177 = sub_1B8B9AEBC();
      v178 = v175;
      v179 = v177;
      v174(v178, v165);
      v174(v176, v165);
      (*(void (**)(char *, uint64_t))(v236 + 8))(v222, v247);
      v180 = (v179 & 1) == 0;
      goto LABEL_49;
    }
LABEL_48:
    v182 = v175;
    v183 = v247;
    v184 = v236;
    v174(v182, v165);
    v174(v176, v165);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v222, v183);
    v180 = 0;
LABEL_49:
    if (v241 == 2)
    {
      v181 = 1;
    }
    else
    {
      if (v241 == 1)
        goto LABEL_51;
      v181 = 0;
    }
LABEL_52:
    result = sub_1B8B9AED4();
    if ((v192 & 1) != 0)
      goto LABEL_69;
    v193 = v240;
    v194 = v258;
    v195 = (char *)v258 + *(int *)(v240 + 160);
    *v258 = result;
    v196 = v274;
    *((_BYTE *)v194 + 8) = sub_1B8B9B1D4() & 1;
    *((_BYTE *)v194 + 9) = v142 & 1;
    *((_BYTE *)v194 + 10) = v250 & 1;
    *((_BYTE *)v194 + 11) = v233;
    *((_BYTE *)v194 + 12) = v169;
    *((_BYTE *)v194 + 13) = v180;
    v138 = v196;
    *((_BYTE *)v194 + 14) = v181;
    v133 = v253;
    v234(v195, v196, v253);
    v239(v194, 0, 1, v193);
    v197 = v267;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1B8AF13A4(v197);
      v197 = result;
    }
    v139 = v259;
    if (v277 >= *(_QWORD *)(v197 + 16))
      break;
    v198 = (*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80);
    v267 = v197;
    sub_1B8B05BD4((uint64_t)v258, v197 + v198 + *(_QWORD *)(v238 + 72) * v277);
    v137 = v273;
LABEL_57:
    v199 = v62;
    v200 = v265;
    v201 = v254;
    v202 = (void (*)(uint64_t, uint64_t, uint64_t))v270;
    ((void (*)(char *, _QWORD, uint64_t))v270)(v265, v254, v137);
    sub_1B8B9B210();
    (*(void (**)(char *, uint64_t))(v266 + 8))(v200, v137);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v272)(v139, 1, v133);
    if ((_DWORD)result == 1)
      goto LABEL_68;
    v203 = v139;
    v204 = v277 + 1;
    (*(void (**)(char *, uint64_t))(v275 + 8))(v138, v133);
    v271(v138, v203, v133);
    v205 = swift_allocObject();
    *(_OWORD *)(v205 + 16) = v255;
    v206 = v205 + v262;
    v202(v205 + v262, v201, v137);
    v202(v206 + v263, v252, v137);
    sub_1B8B38EA0(v205);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v207 = v257;
    sub_1B8B9B1C8();
    swift_bridgeObjectRelease();
    v208 = v269;
    v209 = *(void (**)(char *, uint64_t))(v269 + 8);
    v62 = v199;
    v210 = v199;
    v211 = v268;
    v209(v210, v268);
    (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v62, v207, v211);
    v277 = v204;
    if (v251 == v204)
    {
      v132 = v267;
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_1B8AF4230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1B8B9C704();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for WeekDayViewModel(0);
      v5 = sub_1B8B9C320();
      *(_QWORD *)(v5 + 16) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      sub_1B8AE7B90(a1, v5 + v7, type metadata accessor for WeekDayViewModel);
      v8 = a2 - 1;
      if (a2 != 1)
      {
        v9 = *(_QWORD *)(v6 + 72);
        v10 = v5 + v9 + v7;
        do
        {
          sub_1B8AE7B90(a1, v10, type metadata accessor for WeekDayViewModel);
          v10 += v9;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
    }
    sub_1B8AE7BD4(a1, type metadata accessor for WeekDayViewModel);
    return v5;
  }
  return result;
}

id sub_1B8AF4360()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  qword_1EF1CF260 = (uint64_t)result;
  return result;
}

id sub_1B8AF4390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v0, (uint64_t)v3, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
    return 0;
  v7 = *(int *)(v5 + 160);
  if ((v3[11] & 1) != 0)
  {
    v6 = 9666786;
LABEL_9:
    v11 = sub_1B8B9B0F0();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(&v3[v7], v11);
    return (id)v6;
  }
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)v3);
  if (qword_1EF1BB4C0 != -1)
    swift_once();
  result = objc_msgSend((id)qword_1EF1CF260, sel_stringFromNumber_, v8);
  if (result)
  {
    v10 = result;
    v6 = sub_1B8B9C17C();

    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8AF4510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;

  v5 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v2, (uint64_t)v7, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
    return sub_1B8B9BD98();
  v11 = v7[10];
  v12 = &v7[*(int *)(v9 + 160)];
  if (v11 == 1 && (v7[11] & 1) == 0)
  {
    v13 = sub_1B8AF2488(a1, a2);
LABEL_15:
    v10 = v13;
    v16 = sub_1B8B9B0F0();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v12, v16);
    return v10;
  }
  if (!(v11 & 1 | ((v7[9] & 1) == 0) | v7[11] & 1))
  {
    v13 = sub_1B8AF46B0(a1);
    goto LABEL_15;
  }
  if (!v7[14])
  {
    if (v7[8])
      v13 = sub_1B8B9BDD4();
    else
      v13 = sub_1B8B9BDC8();
    goto LABEL_15;
  }
  if (qword_1EF1BB4D8 != -1)
    swift_once();
  v10 = qword_1EF1CF270;
  v14 = sub_1B8B9B0F0();
  v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  swift_retain();
  v15(v12, v14);
  return v10;
}

uint64_t sub_1B8AF46B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v2, (uint64_t)v9, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) == 1)
    return sub_1B8B9BD98();
  v13 = &v9[*(int *)(v11 + 160)];
  if (v9[9] != 1 || (v9[11] & 1) != 0)
  {
    if (v9[11] & 1 | ((v9[10] & 1) == 0))
      v16 = sub_1B8B9BD98();
    else
      v16 = sub_1B8AF2834();
    v12 = v16;
  }
  else
  {
    v14 = sub_1B8B9B198();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v6, a1, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
    v12 = sub_1B8B6D8CC((uint64_t)v6);
    sub_1B8ADE894((uint64_t)v6, &qword_1ED1B3018);
  }
  v17 = sub_1B8B9B0F0();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v13, v17);
  return v12;
}

uint64_t sub_1B8AF4860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  int v11;
  int v12;
  _DWORD v13[4];

  v1 = sub_1B8B9B0F0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (unsigned __int8 *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v0, (uint64_t)v7, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
    return sub_1B8B9C974();
  v11 = v7[12];
  v13[0] = v7[11];
  v13[1] = v11;
  v12 = v7[14];
  v13[2] = v7[13];
  v13[3] = v12;
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, &v7[*(int *)(v9 + 160)], v1);
  sub_1B8B9C974();
  sub_1B8B9C974();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8ADBDEC(&qword_1EF1B8F38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1B8B9C0C8();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1B8AF4A2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8AF4A68 + 4 * byte_1B8BA7890[a1]))(0x6F706D6F43796164, 0xEC000000746E656ELL);
}

uint64_t sub_1B8AF4A68()
{
  return 0x6E656B6565576E69;
}

uint64_t sub_1B8AF4A84()
{
  return 0x7961646F547369;
}

uint64_t sub_1B8AF4A9C()
{
  return 0x7463656C65537369;
}

uint64_t sub_1B8AF4AB8()
{
  return 0x686563616C507369;
}

unint64_t sub_1B8AF4ADC()
{
  return 0xD000000000000011;
}

unint64_t sub_1B8AF4AFC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B8AF4B18()
{
  return 0x747865546D6964;
}

uint64_t sub_1B8AF4B30()
{
  return 1702125924;
}

uint64_t sub_1B8AF4B40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[6];
  char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94A0);
  v30 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1B8B9B0F0();
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9498);
  v4 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (unsigned __int8 *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9490);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B03D64();
  sub_1B8B9C9C8();
  sub_1B8AE7B90(v36, (uint64_t)v9, type metadata accessor for WeekDayViewModel);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    v39 = 0;
    sub_1B8B03DEC();
    sub_1B8B9C83C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v36 = v11;
    LODWORD(v31) = v9[8];
    v16 = v9[9];
    v28 = v9[10];
    v29 = v16;
    v27 = v9[11];
    v17 = v9[12];
    v18 = v9[13];
    v19 = v9[14];
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v32 + 32))(v33, &v9[*(int *)(v14 + 160)], v34);
    v49 = 1;
    sub_1B8B03DA8();
    sub_1B8B9C83C();
    v48 = 0;
    v20 = v35;
    sub_1B8B9C890();
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v38);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v13, v10);
    }
    else
    {
      v26 = v13;
      v35 = v10;
      v25[4] = v18;
      v25[5] = v17;
      v25[3] = v19;
      v22 = v33;
      v21 = v34;
      v47 = 1;
      sub_1B8B9C878();
      v46 = 2;
      sub_1B8B9C878();
      v45 = 3;
      sub_1B8B9C878();
      v44 = 4;
      sub_1B8B9C878();
      v23 = v36;
      v43 = 5;
      sub_1B8B9C878();
      v24 = v32;
      v42 = 6;
      sub_1B8B9C878();
      v41 = 7;
      sub_1B8B9C878();
      v40 = 8;
      sub_1B8ADBDEC(&qword_1EF1B8F30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
      sub_1B8B9C8A8();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v38);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v35);
    }
  }
}

BOOL sub_1B8AF503C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1B8AF5054()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C6269736956;
  else
    return 0x6E6564646948;
}

uint64_t sub_1B8AF508C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B060B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AF50B0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B8AF50BC()
{
  sub_1B8B03D64();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AF50E4()
{
  sub_1B8B03D64();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8AF510C()
{
  return 0;
}

uint64_t sub_1B8AF5118@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_1B8AF5144(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1B8AF5150()
{
  sub_1B8B03DEC();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AF5178()
{
  sub_1B8B03DEC();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8AF51A0()
{
  unsigned __int8 *v0;

  return sub_1B8AF4A2C(*v0);
}

uint64_t sub_1B8AF51A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B061A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8AF51CC(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1B8AF51D8()
{
  sub_1B8B03DA8();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8AF5200()
{
  sub_1B8B03DA8();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8AF5228()
{
  sub_1B8B9C968();
  sub_1B8AF4860();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AF5268()
{
  sub_1B8B9C968();
  sub_1B8AF4860();
  return sub_1B8B9C998();
}

uint64_t sub_1B8AF52A0(_QWORD *a1)
{
  return sub_1B8AF4B40(a1);
}

void sub_1B8AF52B8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

__n128 CUIKWeekLabelRow.init(currentDate:styling:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v17 = a2[6];
  v18 = a2[7];
  v19 = *((_BYTE *)a2 + 128);
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  v11 = *a2;
  v12 = (__n128)a2[1];
  v5 = (int *)type metadata accessor for CUIKWeekLabelRow(0);
  v6 = (uint64_t *)(a3 + v5[6]);
  *v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  swift_storeEnumTagMultiPayload();
  v7 = (uint64_t *)(a3 + v5[7]);
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  swift_storeEnumTagMultiPayload();
  v8 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a3, a1, v8);
  v9 = a3 + v5[5];
  *(_OWORD *)(v9 + 96) = v17;
  *(_OWORD *)(v9 + 112) = v18;
  *(_BYTE *)(v9 + 128) = v19;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v15;
  *(_OWORD *)(v9 + 80) = v16;
  result = v12;
  *(_OWORD *)v9 = v11;
  *(__n128 *)(v9 + 16) = v12;
  return result;
}

uint64_t type metadata accessor for CUIKWeekLabelRow(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B8F98);
}

uint64_t sub_1B8AF53F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;

  v1 = v0;
  v2 = type metadata accessor for WeekDayViewModel(0);
  v46 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v54 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v55 = (uint64_t)&v45 - v5;
  v6 = sub_1B8B9B588();
  v49 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v45 - v10;
  v53 = sub_1B8B9B288();
  v50 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v45 - v18;
  v20 = sub_1B8B9B0F0();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, v1, v20);
  v51 = v21;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v22(v19, 0, 1, v20);
  v52 = v20;
  v22(v17, 1, 1, v20);
  v23 = type metadata accessor for CUIKWeekLabelRow(0);
  sub_1B8B1765C((uint64_t)v13);
  v24 = v1 + *(int *)(v23 + 20);
  v25 = *(_QWORD *)(v24 + 80);
  v47 = *(_QWORD *)(v24 + 88);
  v48 = v25;
  sub_1B8B178BC((uint64_t)v11);
  sub_1B8B9B57C();
  sub_1B8ADBDEC(&qword_1EF1B9240, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA030]);
  LOBYTE(v22) = sub_1B8B9C5A8();
  v26 = *(void (**)(char *, uint64_t))(v49 + 8);
  v26(v9, v6);
  v26(v11, v6);
  v56 = 0;
  v27 = sub_1B8AF2A44(v1, (uint64_t)v19, (uint64_t)v17, 2, v13, v48, v47, v22 & 1, 0, &v56);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v53);
  sub_1B8ADE894((uint64_t)v17, &qword_1ED1B2D18);
  sub_1B8ADE894((uint64_t)v19, &qword_1ED1B2D18);
  result = sub_1B8B21248();
  v29 = *(_QWORD *)(result + 16);
  v49 = v27;
  v50 = result;
  if (!v29)
  {
    v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v33;
  }
  if (v29 <= *(_QWORD *)(v27 + 16))
  {
    v30 = 0;
    v31 = v27 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v53 = *(_QWORD *)(v46 + 72);
    v32 = (uint64_t *)(result + 40);
    v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v34 = *(v32 - 1);
      v35 = *v32;
      v36 = v55;
      sub_1B8AE7B90(v31, v55, type metadata accessor for WeekDayViewModel);
      v37 = v54;
      sub_1B8AE7B90(v36, v54, type metadata accessor for WeekDayViewModel);
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) == 1)
      {
        swift_bridgeObjectRetain();
        v39 = sub_1B8B9BD98();
      }
      else
      {
        v40 = *(_BYTE *)(v37 + 8);
        swift_bridgeObjectRetain();
        if ((v40 & 1) != 0)
          v41 = sub_1B8B9BDD4();
        else
          v41 = sub_1B8B9BDC8();
        v39 = v41;
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v37 + *(int *)(v38 + 160), v52);
      }
      sub_1B8AE7BD4(v55, type metadata accessor for WeekDayViewModel);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = sub_1B8B861F0(0, v33[2] + 1, 1, v33);
      v43 = v33[2];
      v42 = v33[3];
      if (v43 >= v42 >> 1)
        v33 = sub_1B8B861F0((_QWORD *)(v42 > 1), v43 + 1, 1, v33);
      v44 = &v33[4 * v43];
      v44[6] = v39;
      v44[7] = v30;
      v32 += 2;
      v33[2] = v43 + 1;
      v44[4] = v34;
      v44[5] = v35;
      v31 += v53;
      ++v30;
    }
    while (v29 != v30);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

double CUIKWeekLabelRow.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = type metadata accessor for CUIKWeekLabelRow(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v1, (uint64_t)v6, type metadata accessor for CUIKWeekLabelRow);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v6, v8 + v7, type metadata accessor for CUIKWeekLabelRow);
  sub_1B8B9C014();
  sub_1B8B9B474();
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a1 = sub_1B8AFDFB8;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  return result;
}

uint64_t sub_1B8AF59B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_1B8B9B4BC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = type metadata accessor for CUIKWeekLabelRow(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)a3 = sub_1B8B9B738();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v16[0] = a3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9068) + 44);
  v16[1] = sub_1B8AF53F4();
  sub_1B8AE7B90(a2, (uint64_t)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CUIKWeekLabelRow);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (v11 + *(unsigned __int8 *)(v7 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v12, type metadata accessor for CUIKWeekLabelRow);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9430);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9230);
  sub_1B8ADE950(&qword_1EF1B9438, &qword_1EF1B9430, MEMORY[0x1E0DEAF48]);
  sub_1B8B056B8(&qword_1EF1B9228, &qword_1EF1B9230, (uint64_t (*)(void))sub_1B8B05E3C, MEMORY[0x1E0CD8D78]);
  sub_1B8B06030();
  return sub_1B8B9BF90();
}

uint64_t sub_1B8AF5BC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void (*v38)(char *, uint64_t);
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  v79 = a3;
  v81 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9388);
  MEMORY[0x1E0C80A78](v6);
  v74 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B8B9B588();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v62 - v13;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93A0);
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9130);
  MEMORY[0x1E0C80A78](v63);
  v69 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9198);
  MEMORY[0x1E0C80A78](v68);
  v72 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B91D8);
  MEMORY[0x1E0C80A78](v70);
  v73 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9200);
  MEMORY[0x1E0C80A78](v71);
  v77 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9230);
  MEMORY[0x1E0C80A78](v75);
  v76 = (uint64_t)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v22 = a1[1];
  v24 = a1[2];
  v62 = type metadata accessor for CUIKWeekLabelRow(0);
  v25 = *(int *)(v62 + 28);
  v80 = a2;
  v65 = a2 + v25;
  sub_1B8B178BC((uint64_t)v14);
  sub_1B8B9B57C();
  v64 = sub_1B8ADBDEC(&qword_1EF1B9240, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA030]);
  LOBYTE(a1) = sub_1B8B9C5A8();
  v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v12, v8);
  v78 = v8;
  v26(v14, v8);
  if ((a1 & 1) != 0)
  {
    v22 = 0xA300000000000000;
    v23 = 9666786;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v82 = v23;
  *((_QWORD *)&v82 + 1) = v22;
  sub_1B8ADDBE4();
  v27 = sub_1B8B9BBAC();
  v29 = v28;
  *(_QWORD *)&v82 = v27;
  *((_QWORD *)&v82 + 1) = v28;
  v31 = v30 & 1;
  LOBYTE(v83) = v30 & 1;
  *((_QWORD *)&v83 + 1) = v32;
  sub_1B8B9BBE8();
  sub_1B8ADDA88(v27, v29, v31);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v34 = v66;
  v35 = (uint64_t)v69;
  v36 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v69, v16, v67);
  v37 = (uint64_t *)(v35 + *(int *)(v63 + 36));
  *v37 = KeyPath;
  v37[1] = v24;
  v38 = *(void (**)(char *, uint64_t))(v34 + 8);
  swift_retain();
  v38(v16, v36);
  v39 = (__int128 *)(v80 + *(int *)(v62 + 20));
  v40 = v39[7];
  v88 = v39[6];
  v89 = v40;
  v90 = *((_BYTE *)v39 + 128);
  v41 = v39[3];
  v84 = v39[2];
  v85 = v41;
  v42 = v39[5];
  v86 = v39[4];
  v87 = v42;
  v43 = *v39;
  v83 = v39[1];
  v82 = v43;
  sub_1B8B04E3C((uint64_t)&v82);
  sub_1B8B9BA5C();
  v44 = *MEMORY[0x1E0CDD540];
  v45 = sub_1B8B9BA44();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 104))(v74, v44, v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
  v48 = sub_1B8B9BA68();
  sub_1B8ADE894(v47, &qword_1EF1B9388);
  sub_1B8B05B4C((uint64_t)&v82);
  v49 = swift_getKeyPath();
  v50 = v72;
  sub_1B8ADE850(v35, v72, &qword_1EF1B9130);
  v51 = (uint64_t *)(v50 + *(int *)(v68 + 36));
  *v51 = v49;
  v51[1] = v48;
  sub_1B8ADE894(v35, &qword_1EF1B9130);
  sub_1B8B178BC((uint64_t)v14);
  sub_1B8B9B57C();
  v52 = v78;
  LOBYTE(v48) = sub_1B8B9C5A8();
  v26(v12, v52);
  v26(v14, v52);
  if ((v48 & 1) != 0)
    v53 = 0.8;
  else
    v53 = 1.0;
  v54 = v73;
  sub_1B8ADE850(v50, v73, &qword_1EF1B9198);
  *(double *)(v54 + *(int *)(v70 + 36)) = v53;
  sub_1B8ADE894(v50, &qword_1EF1B9198);
  v55 = swift_getKeyPath();
  v56 = v77;
  sub_1B8ADE850(v54, v77, &qword_1EF1B91D8);
  v57 = v56 + *(int *)(v71 + 36);
  *(_QWORD *)v57 = v55;
  *(_QWORD *)(v57 + 8) = 1;
  *(_BYTE *)(v57 + 16) = 0;
  sub_1B8ADE894(v54, &qword_1EF1B91D8);
  sub_1B8B9B4B0();
  sub_1B8AF53F4();
  swift_bridgeObjectRelease();
  sub_1B8B9C014();
  sub_1B8B9B474();
  v58 = v76;
  sub_1B8ADE850(v56, v76, &qword_1EF1B9200);
  v59 = (_OWORD *)(v58 + *(int *)(v75 + 36));
  v60 = v92;
  *v59 = v91;
  v59[1] = v60;
  v59[2] = v93;
  sub_1B8ADE894(v56, &qword_1EF1B9200);
  return sub_1B8B06074(v58, v81, &qword_1EF1B9230);
}

double sub_1B8AF62FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v2, (uint64_t)v6, type metadata accessor for CUIKWeekLabelRow);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v6, v8 + v7, type metadata accessor for CUIKWeekLabelRow);
  sub_1B8B9C014();
  sub_1B8B9B474();
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a2 = sub_1B8AFDFB8;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a2 + 48) = v18;
  return result;
}

uint64_t View.reverseMask<A>(alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];

  sub_1B8B9C014();
  sub_1B8B9B5A0();
  v9 = sub_1B8B9B540();
  v15[0] = a8;
  v15[1] = MEMORY[0x1E0CDA1B8];
  v10 = MEMORY[0x1E0CD9C18];
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v9, v15);
  v11 = sub_1B8B9B5B8();
  v12 = sub_1B8B9B540();
  v14[0] = sub_1B8AFDFE0();
  v14[1] = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDA288], v11);
  MEMORY[0x1BCCB79D0](v10, v12, v14);
  return sub_1B8B9BCCC();
}

uint64_t sub_1B8AF654C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];

  v27 = a7;
  v28 = a4;
  v26 = a3;
  v29 = a1;
  v30 = a2;
  v31 = a9;
  sub_1B8B9B5A0();
  v12 = sub_1B8B9B540();
  v39[0] = a8;
  v39[1] = MEMORY[0x1E0CDA1B8];
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v12, v39);
  v13 = sub_1B8B9B5B8();
  v14 = sub_1B8B9B540();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v26 - v19;
  v32 = a5;
  v33 = a6;
  v34 = v27;
  v35 = a8;
  v36 = v26;
  v37 = v28;
  v21 = sub_1B8AFDFE0();
  sub_1B8B9BCF0();
  v22 = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDA288], v13);
  v38[0] = v21;
  v38[1] = v22;
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v14, v38);
  v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v23(v20, v18, v14);
  v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v18, v14);
  v23(v31, v20, v14);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v14);
}

uint64_t sub_1B8AF6710@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  char *v29;
  _QWORD v30[2];

  v26 = a3;
  v27 = a1;
  v29 = a4;
  v5 = sub_1B8B9C038();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B9B5A0();
  v12 = sub_1B8B9B540();
  v25 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v24 - v17;
  v27(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CE0370], v5);
  v19 = v26;
  sub_1B8B9BD2C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, a2);
  v30[0] = v19;
  v30[1] = MEMORY[0x1E0CDA1B8];
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v12, v30);
  v20 = v25;
  v21 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v21(v18, v15, v12);
  v22 = *(void (**)(char *, uint64_t))(v20 + 8);
  v22(v15, v12);
  v21(v29, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, v12);
}

__n128 CUIKWeekRow.init(displayedDate:currentDate:selectedDate:weekIndex:styling:tapAction:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 result;
  _QWORD *v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v29 = a5[6];
  v30 = a5[7];
  v31 = *((_BYTE *)a5 + 128);
  v25 = a5[2];
  v26 = a5[3];
  v27 = a5[4];
  v28 = a5[5];
  v23 = *a5;
  v24 = (__n128)a5[1];
  v15 = (int *)type metadata accessor for CUIKWeekRow(0);
  v16 = (uint64_t *)(a8 + v15[10]);
  *v16 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  swift_storeEnumTagMultiPayload();
  v17 = (uint64_t *)(a8 + v15[11]);
  *v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  swift_storeEnumTagMultiPayload();
  v18 = (uint64_t *)(a8 + v15[12]);
  *v18 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  swift_storeEnumTagMultiPayload();
  v19 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a8, a1, v19);
  sub_1B8B06074(a2, a8 + v15[5], &qword_1ED1B2D18);
  sub_1B8B06074(a3, a8 + v15[6], &qword_1ED1B2D18);
  *(_QWORD *)(a8 + v15[7]) = a4;
  v20 = a8 + v15[8];
  *(_OWORD *)(v20 + 96) = v29;
  *(_OWORD *)(v20 + 112) = v30;
  *(_BYTE *)(v20 + 128) = v31;
  *(_OWORD *)(v20 + 32) = v25;
  *(_OWORD *)(v20 + 48) = v26;
  *(_OWORD *)(v20 + 64) = v27;
  *(_OWORD *)(v20 + 80) = v28;
  result = v24;
  *(_OWORD *)v20 = v23;
  *(__n128 *)(v20 + 16) = v24;
  v22 = (_QWORD *)(a8 + v15[9]);
  *v22 = a6;
  v22[1] = a7;
  return result;
}

uint64_t sub_1B8AF6ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t KeyPath;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  int v151;
  _BYTE *v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _BYTE v278[24];
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  char v289;
  __int128 v290;
  uint64_t v291;
  unsigned __int8 v292;
  uint64_t v293;
  unsigned __int8 v294;
  uint64_t v295;
  char *v296;

  v3 = v2;
  v271 = a1;
  v247 = a2;
  v232 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9290);
  MEMORY[0x1E0C80A78](v232);
  v233 = (uint64_t)&v204 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B91F0);
  MEMORY[0x1E0C80A78](v235);
  v230 = (uint64_t)&v204 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9220);
  v6 = MEMORY[0x1E0C80A78](v231);
  v220 = (uint64_t)&v204 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v221 = (uint64_t)&v204 - v8;
  v246 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B92E0);
  MEMORY[0x1E0C80A78](v246);
  v234 = (char *)&v204 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B92A0);
  MEMORY[0x1E0C80A78](v240);
  v241 = (uint64_t)&v204 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_1B8B9C038();
  v216 = *(_QWORD *)(v217 - 8);
  MEMORY[0x1E0C80A78](v217);
  v214 = (char *)&v204 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B91E0);
  MEMORY[0x1E0C80A78](v208);
  v211 = (char *)&v204 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9258);
  MEMORY[0x1E0C80A78](v209);
  v210 = (uint64_t)&v204 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9268);
  MEMORY[0x1E0C80A78](v14);
  v215 = (char *)&v204 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B91A8);
  v16 = MEMORY[0x1E0C80A78](v227);
  v18 = (char *)&v204 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v218 = (uint64_t)&v204 - v19;
  v223 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9288);
  MEMORY[0x1E0C80A78](v223);
  v225 = (uint64_t)&v204 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9210);
  MEMORY[0x1E0C80A78](v224);
  v207 = (uint64_t)&v204 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B92D0);
  MEMORY[0x1E0C80A78](v239);
  v226 = (char *)&v204 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for WeekDayViewModel(0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v219 = (uint64_t)&v204 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v229 = (char *)&v204 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v222 = (uint64_t)&v204 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v236 = (uint64_t)&v204 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v237 = (uint64_t)&v204 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v269 = (uint64_t)&v204 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v228 = (uint64_t)&v204 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v238 = (uint64_t)&v204 - v39;
  MEMORY[0x1E0C80A78](v38);
  v242 = (uint64_t)&v204 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9300);
  MEMORY[0x1E0C80A78](v41);
  v245 = (char *)&v204 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = sub_1B8B9B588();
  v262 = *(_QWORD *)(v263 - 8);
  v43 = MEMORY[0x1E0C80A78](v263);
  v261 = (char *)&v204 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43);
  v260 = (uint64_t)&v204 - v45;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9388);
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)&v204 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93A0);
  v253 = *(_QWORD *)(v254 - 8);
  MEMORY[0x1E0C80A78](v254);
  v252 = (char *)&v204 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9120);
  MEMORY[0x1E0C80A78](v250);
  v257 = (char *)&v204 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9188);
  MEMORY[0x1E0C80A78](v255);
  v258 = (uint64_t)&v204 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B91C8);
  MEMORY[0x1E0C80A78](v52);
  v272 = (uint64_t)&v204 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = sub_1B8B9B3FC();
  v266 = *(_QWORD *)(v267 - 8);
  MEMORY[0x1E0C80A78](v267);
  v265 = (uint64_t)&v204 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  v56 = MEMORY[0x1E0C80A78](v55);
  v206 = (char *)&v204 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = MEMORY[0x1E0C80A78](v56);
  v259 = (char *)&v204 - v59;
  MEMORY[0x1E0C80A78](v58);
  v61 = (char *)&v204 - v60;
  v62 = sub_1B8B9B288();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = MEMORY[0x1E0C80A78](v62);
  v205 = (uint64_t)&v204 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = MEMORY[0x1E0C80A78](v64);
  v249 = (uint64_t)&v204 - v67;
  MEMORY[0x1E0C80A78](v66);
  v69 = (char *)&v204 - v68;
  v244 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9390);
  v243 = *(_QWORD *)(v244 - 8);
  MEMORY[0x1E0C80A78](v244);
  v270 = (char *)&v204 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for CUIKWeekRow(0);
  v72 = *(int *)(v71 + 32);
  v268 = v3;
  v73 = (char *)(v3 + v72);
  v74 = *v73 == 1;
  v213 = v14;
  v212 = v18;
  v264 = v62;
  v256 = v52;
  v251 = v63;
  if (v74)
  {
    sub_1B8B1765C((uint64_t)v69);
    sub_1B8B9B234();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v69, v62);
    v75 = sub_1B8B9B198();
    v76 = *(_QWORD *)(v75 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48))(v61, 1, v75);
    if ((_DWORD)result == 1)
      goto LABEL_43;
    v78 = v265;
    sub_1B8B178E8(v265);
    v79 = sub_1B8AF46B0((uint64_t)v61);
    (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v78, v267);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v61, v75);
  }
  else
  {
    v79 = sub_1B8B9BDC8();
  }
  v80 = *((_QWORD *)v73 + 3);
  sub_1B8B9C014();
  sub_1B8B9B474();
  v273 = v79;
  LOWORD(v274) = 256;
  *((_QWORD *)&v274 + 1) = v286;
  LOBYTE(v275) = v287;
  v276 = v288;
  LOBYTE(v277) = v289;
  *(_OWORD *)v278 = v290;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B90D0);
  sub_1B8B05AC8();
  sub_1B8B9BBB8();
  swift_release();
  v273 = (uint64_t)sub_1B8AF4390();
  *(_QWORD *)&v274 = v81;
  sub_1B8ADDBE4();
  v82 = sub_1B8B9BBAC();
  v84 = v83;
  v273 = v82;
  *(_QWORD *)&v274 = v83;
  v86 = v85 & 1;
  BYTE8(v274) = v85 & 1;
  v275 = v87;
  v88 = v252;
  sub_1B8B9BBE8();
  sub_1B8ADDA88(v82, v84, v86);
  swift_bridgeObjectRelease();
  v89 = *((_QWORD *)v73 + 4);
  v90 = *((_QWORD *)v73 + 5);
  v91 = v73[48];
  v92 = v73[49];
  v93 = v73[50];
  v94 = *((_QWORD *)v73 + 9);
  v95 = *((_QWORD *)v73 + 12);
  v96 = v73[104];
  v97 = *((_QWORD *)v73 + 14);
  v98 = *((_QWORD *)v73 + 15);
  v99 = v73[128];
  LOBYTE(v273) = *v73;
  v248 = *(_OWORD *)(v73 + 8);
  v274 = v248;
  v275 = v80;
  v276 = v89;
  v277 = v90;
  v278[0] = v91;
  v278[1] = v92;
  v278[2] = v93;
  *(_OWORD *)&v278[8] = *(_OWORD *)(v73 + 56);
  v279 = v94;
  v280 = *((_OWORD *)v73 + 5);
  v281 = v95;
  v282 = v96;
  v283 = v97;
  v284 = v98;
  v285 = v99;
  sub_1B8B04E3C((uint64_t)&v273);
  sub_1B8B9BA5C();
  v100 = *MEMORY[0x1E0CDD540];
  v101 = sub_1B8B9BA44();
  v102 = *(_QWORD *)(v101 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 104))(v48, v100, v101);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v48, 0, 1, v101);
  v103 = sub_1B8B9BA68();
  sub_1B8ADE894((uint64_t)v48, &qword_1EF1B9388);
  sub_1B8B05B4C((uint64_t)&v273);
  KeyPath = swift_getKeyPath();
  v105 = v253;
  v106 = (uint64_t)v257;
  v107 = v254;
  (*(void (**)(char *, char *, uint64_t))(v253 + 16))(v257, v88, v254);
  v108 = (uint64_t *)(v106 + *(int *)(v250 + 36));
  *v108 = KeyPath;
  v108[1] = v103;
  (*(void (**)(char *, uint64_t))(v105 + 8))(v88, v107);
  v109 = v268;
  v110 = v260;
  sub_1B8B178BC(v260);
  v111 = v261;
  sub_1B8B9B57C();
  sub_1B8ADBDEC(&qword_1EF1B9240, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA030]);
  v112 = v263;
  LOBYTE(v103) = sub_1B8B9C5A8();
  v113 = *(void (**)(char *, uint64_t))(v262 + 8);
  v113(v111, v112);
  v113((char *)v110, v112);
  if ((v103 & 1) != 0)
    v114 = 0.8;
  else
    v114 = 1.0;
  v115 = v258;
  sub_1B8ADE850(v106, v258, &qword_1EF1B9120);
  *(double *)(v115 + *(int *)(v255 + 36)) = v114;
  sub_1B8ADE894(v106, &qword_1EF1B9120);
  v116 = swift_getKeyPath();
  v117 = v272;
  sub_1B8ADE850(v115, v272, &qword_1EF1B9188);
  v118 = v117 + *(int *)(v256 + 36);
  *(_QWORD *)v118 = v116;
  *(_QWORD *)(v118 + 8) = 1;
  *(_BYTE *)(v118 + 16) = 0;
  sub_1B8ADE894(v115, &qword_1EF1B9188);
  v119 = v249;
  v263 = v109 + *(int *)(v71 + 40);
  sub_1B8B1765C(v249);
  v120 = (uint64_t)v259;
  sub_1B8B9B234();
  v262 = *(_QWORD *)(v251 + 8);
  ((void (*)(uint64_t, uint64_t))v262)(v119, v264);
  v121 = sub_1B8B9B198();
  v122 = *(_QWORD *)(v121 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121);
  if ((_DWORD)result != 1)
  {
    v123 = v265;
    sub_1B8B178E8(v265);
    v124 = v271;
    v125 = sub_1B8AF4510(v120, v123);
    (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v123, v267);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v120, v121);
    v126 = v242;
    sub_1B8AE7B90(v124, v242, type metadata accessor for WeekDayViewModel);
    v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
    v128 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 48);
    v129 = v128(v126, 1, v127);
    v130 = v124;
    v268 = v125;
    if (v129 == 1)
    {
      v131 = v238;
      sub_1B8AE7B90(v124, v238, type metadata accessor for WeekDayViewModel);
      v132 = v269;
    }
    else
    {
      v133 = *(unsigned __int8 *)(v126 + 9);
      v134 = v126 + *(int *)(v127 + 160);
      v135 = sub_1B8B9B0F0();
      v136 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 8);
      v136(v134, v135);
      v131 = v238;
      sub_1B8AE7B90(v130, v238, type metadata accessor for WeekDayViewModel);
      v74 = v133 == 1;
      v132 = v269;
      if (v74)
      {
        v137 = v228;
        sub_1B8AE7B90(v131, v228, type metadata accessor for WeekDayViewModel);
        if (v128(v137, 1, v127) != 1)
        {
          v156 = *(_BYTE *)(v228 + 10);
          v136(v228 + *(int *)(v127 + 160), v135);
          sub_1B8AE7BD4(v131, type metadata accessor for WeekDayViewModel);
          sub_1B8AE7B90(v130, v132, type metadata accessor for WeekDayViewModel);
          if ((v156 & 1) != 0)
            goto LABEL_30;
          goto LABEL_15;
        }
      }
    }
    sub_1B8AE7BD4(v131, type metadata accessor for WeekDayViewModel);
    sub_1B8AE7B90(v130, v132, type metadata accessor for WeekDayViewModel);
LABEL_15:
    v138 = v237;
    sub_1B8AE7B90(v132, v237, type metadata accessor for WeekDayViewModel);
    if (v128(v138, 1, v127) == 1)
    {
      v139 = v236;
      sub_1B8AE7B90(v132, v236, type metadata accessor for WeekDayViewModel);
LABEL_21:
      sub_1B8AE7BD4(v139, type metadata accessor for WeekDayViewModel);
      sub_1B8AE7BD4(v132, type metadata accessor for WeekDayViewModel);
      goto LABEL_22;
    }
    v140 = *(unsigned __int8 *)(v138 + 10);
    v141 = v138 + *(int *)(v127 + 160);
    v142 = sub_1B8B9B0F0();
    v143 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 8);
    v143(v141, v142);
    v139 = v236;
    sub_1B8AE7B90(v269, v236, type metadata accessor for WeekDayViewModel);
    v74 = v140 == 1;
    v132 = v269;
    if (!v74)
      goto LABEL_21;
    v144 = v222;
    sub_1B8AE7B90(v139, v222, type metadata accessor for WeekDayViewModel);
    if (v128(v144, 1, v127) != 1)
    {
      v157 = v139;
      v158 = *(_BYTE *)(v144 + 9);
      v143(v144 + *(int *)(v127 + 160), v142);
      sub_1B8AE7BD4(v157, type metadata accessor for WeekDayViewModel);
      sub_1B8AE7BD4(v132, type metadata accessor for WeekDayViewModel);
      if ((v158 & 1) != 0)
      {
LABEL_22:
        v145 = v229;
        sub_1B8AE7B90(v130, (uint64_t)v229, type metadata accessor for WeekDayViewModel);
        if (v128((uint64_t)v145, 1, v127) == 1
          || (v149 = v145[9],
              v150 = v145[11],
              v151 = v145[12],
              v152 = &v145[*(int *)(v127 + 160)],
              v153 = sub_1B8B9B0F0(),
              v154 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 8),
              v154((uint64_t)v152, v153),
              v151 != 1)
          || (v150 & 1) != 0
          || (v149 & 1) != 0)
        {
          v146 = v230;
          sub_1B8ADE850(v272, v230, &qword_1EF1B91C8);
          *(_QWORD *)(v146 + *(int *)(v235 + 36)) = v268;
          sub_1B8ADE850(v146, v233, &qword_1EF1B91F0);
          swift_storeEnumTagMultiPayload();
          sub_1B8B05744();
          sub_1B8B05480();
          swift_retain();
          v147 = (uint64_t)v234;
          sub_1B8B9B870();
          sub_1B8ADE894(v146, &qword_1EF1B91F0);
          v148 = v247;
        }
        else
        {
          v155 = v219;
          sub_1B8AE7B90(v271, v219, type metadata accessor for WeekDayViewModel);
          if (v128(v155, 1, v127) != 1)
            v154(v155 + *(int *)(v127 + 160), v153);
          sub_1B8B9C014();
          sub_1B8B9B474();
          v190 = *v73;
          v191 = v268;
          v271 = v291;
          LODWORD(v269) = v292;
          v267 = v293;
          LODWORD(v266) = v294;
          v265 = v295;
          v261 = v296;
          if ((v190 & 1) != 0)
          {
            v192 = v205;
            sub_1B8B1765C(v205);
            v193 = (uint64_t)v206;
            sub_1B8B9B234();
            ((void (*)(uint64_t, uint64_t))v262)(v192, v264);
            v194 = sub_1B8B6D8CC(v193);
            sub_1B8ADE894(v193, &qword_1ED1B3018);
          }
          else
          {
            v194 = sub_1B8B9BDC8();
          }
          v148 = v247;
          v195 = swift_getKeyPath();
          v196 = v230;
          sub_1B8ADE850(v272, v230, &qword_1EF1B91C8);
          *(_QWORD *)(v196 + *(int *)(v235 + 36)) = v191;
          swift_retain();
          v197 = sub_1B8B9C008();
          v199 = v198;
          v200 = v220;
          sub_1B8ADE850(v196, v220, &qword_1EF1B91F0);
          v201 = v200 + *(int *)(v231 + 36);
          *(_QWORD *)v201 = v271;
          *(_BYTE *)(v201 + 8) = v269;
          *(_QWORD *)(v201 + 16) = v267;
          *(_BYTE *)(v201 + 24) = v266;
          v202 = v261;
          *(_QWORD *)(v201 + 32) = v265;
          *(_QWORD *)(v201 + 40) = v202;
          *(_QWORD *)(v201 + 48) = v195;
          *(_QWORD *)(v201 + 56) = v194;
          *(_OWORD *)(v201 + 64) = xmmword_1B8BA7870;
          *(_QWORD *)(v201 + 80) = v197;
          *(_QWORD *)(v201 + 88) = v199;
          swift_retain();
          swift_retain();
          sub_1B8ADE894(v196, &qword_1EF1B91F0);
          v203 = v221;
          sub_1B8B06074(v200, v221, &qword_1EF1B9220);
          sub_1B8ADE850(v203, v233, &qword_1EF1B9220);
          swift_storeEnumTagMultiPayload();
          sub_1B8B05744();
          sub_1B8B05480();
          v147 = (uint64_t)v234;
          sub_1B8B9B870();
          swift_release();
          swift_release();
          sub_1B8ADE894(v203, &qword_1EF1B9220);
        }
        sub_1B8ADE850(v147, v241, &qword_1EF1B92E0);
        swift_storeEnumTagMultiPayload();
        sub_1B8B05368();
        sub_1B8B05720();
        v168 = (uint64_t)v245;
        sub_1B8B9B870();
        swift_release();
        sub_1B8ADE894(v147, &qword_1EF1B92E0);
        v165 = v244;
        v164 = v243;
        goto LABEL_41;
      }
LABEL_32:
      if (*v73 == 1)
      {
        v159 = v207;
        sub_1B8ADE850(v272, v207, &qword_1EF1B91C8);
        *(_QWORD *)(v159 + *(int *)(v235 + 36)) = v268;
        swift_retain();
        v160 = sub_1B8B9C014();
        v162 = v161;
        v163 = v159 + *(int *)(v224 + 36);
        v164 = v243;
        v165 = v244;
        (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v163, v270, v244);
        v166 = (uint64_t *)(v163 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9278) + 36));
        *v166 = v160;
        v166[1] = v162;
        sub_1B8ADE850(v159, v225, &qword_1EF1B9210);
        swift_storeEnumTagMultiPayload();
        sub_1B8B053FC();
        sub_1B8B05614();
        v167 = (uint64_t)v226;
        sub_1B8B9B870();
        sub_1B8ADE894(v159, &qword_1EF1B9210);
      }
      else
      {
        sub_1B8B9C014();
        sub_1B8B9B474();
        v271 = v291;
        LODWORD(v269) = v292;
        v267 = v293;
        LODWORD(v266) = v294;
        v265 = v295;
        v264 = (uint64_t)v296;
        v263 = sub_1B8B9C014();
        v262 = v169;
        v170 = sub_1B8B9C014();
        v172 = v171;
        v261 = (char *)sub_1B8B9C014();
        v174 = v173;
        v175 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F28);
        v176 = (uint64_t)v215;
        v177 = &v215[*(int *)(v175 + 36)];
        v178 = (uint64_t)&v177[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9308) + 36)];
        v179 = v216;
        v180 = v214;
        v181 = v217;
        (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v214, *MEMORY[0x1E0CE0370], v217);
        v182 = (uint64_t)v211;
        (*(void (**)(char *, char *, uint64_t))(v179 + 16))(&v211[*(int *)(v208 + 36)], v180, v181);
        sub_1B8ADE850(v272, v182, &qword_1EF1B91C8);
        (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
        v183 = v210;
        sub_1B8B06074(v182, v210, &qword_1EF1B91E0);
        v184 = (uint64_t *)(v183 + *(int *)(v209 + 36));
        *v184 = v170;
        v184[1] = v172;
        sub_1B8ADE850(v183, v178, &qword_1EF1B9258);
        sub_1B8ADE894(v183, &qword_1EF1B9258);
        *(_QWORD *)v177 = v261;
        *((_QWORD *)v177 + 1) = v174;
        v164 = v243;
        v165 = v244;
        (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v176, v270, v244);
        v185 = (uint64_t *)(v176 + *(int *)(v213 + 36));
        v186 = v262;
        *v185 = v263;
        v185[1] = v186;
        v187 = (uint64_t)v212;
        sub_1B8ADE850(v176, (uint64_t)&v212[*(int *)(v227 + 36)], &qword_1EF1B9268);
        *(_QWORD *)v187 = v271;
        *(_BYTE *)(v187 + 8) = v269;
        *(_QWORD *)(v187 + 16) = v267;
        *(_BYTE *)(v187 + 24) = v266;
        v188 = v264;
        *(_QWORD *)(v187 + 32) = v265;
        *(_QWORD *)(v187 + 40) = v188;
        sub_1B8ADE894(v176, &qword_1EF1B9268);
        v189 = v218;
        sub_1B8B06074(v187, v218, &qword_1EF1B91A8);
        sub_1B8ADE850(v189, v225, &qword_1EF1B91A8);
        swift_storeEnumTagMultiPayload();
        sub_1B8B053FC();
        sub_1B8B05614();
        v167 = (uint64_t)v226;
        sub_1B8B9B870();
        sub_1B8ADE894(v189, &qword_1EF1B91A8);
      }
      v148 = v247;
      v168 = (uint64_t)v245;
      sub_1B8ADE850(v167, v241, &qword_1EF1B92D0);
      swift_storeEnumTagMultiPayload();
      sub_1B8B05368();
      sub_1B8B05720();
      sub_1B8B9B870();
      swift_release();
      sub_1B8ADE894(v167, &qword_1EF1B92D0);
LABEL_41:
      sub_1B8B06074(v168, v148, &qword_1EF1B9300);
      sub_1B8ADE894(v272, &qword_1EF1B91C8);
      return (*(uint64_t (**)(char *, uint64_t))(v164 + 8))(v270, v165);
    }
    sub_1B8AE7BD4(v139, type metadata accessor for WeekDayViewModel);
LABEL_30:
    sub_1B8AE7BD4(v132, type metadata accessor for WeekDayViewModel);
    goto LABEL_32;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

double CUIKWeekRow.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = type metadata accessor for CUIKWeekRow(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v1, (uint64_t)v6, type metadata accessor for CUIKWeekRow);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v6, v8 + v7, type metadata accessor for CUIKWeekRow);
  sub_1B8B9C014();
  sub_1B8B9B474();
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a1 = sub_1B8AFE140;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  return result;
}

uint64_t sub_1B8AF8824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];

  v50 = a2;
  v52 = a3;
  v4 = sub_1B8B9B4BC();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v51 = *(_QWORD *)(v48 + 64);
  MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CUIKWeekRow(0);
  v7 = *(_QWORD *)(*((_QWORD *)v6 - 1) + 64);
  v45 = *((_QWORD *)v6 - 1);
  v46 = v7;
  MEMORY[0x1E0C80A78](v6);
  v44 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B8B9B588();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v38 - v14;
  KeyPath = sub_1B8B9B288();
  v16 = *(_QWORD *)(KeyPath - 8);
  MEMORY[0x1E0C80A78](KeyPath);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v6[6];
  v41 = a1 + v6[5];
  v42 = a1 + v19;
  v40 = *(_QWORD *)(a1 + v6[7]);
  sub_1B8B1765C((uint64_t)v18);
  v20 = a1 + v6[8];
  v21 = *(_QWORD *)(v20 + 80);
  v38 = *(_QWORD *)(v20 + 88);
  v39 = v21;
  sub_1B8B178BC((uint64_t)v15);
  sub_1B8B9B57C();
  sub_1B8ADBDEC(&qword_1EF1B9240, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA030]);
  v22 = sub_1B8B9C5A8();
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v13, v9);
  v23(v15, v9);
  v24 = *(_BYTE *)(v20 + 50);
  LOBYTE(v53[0]) = *(_BYTE *)(v20 + 128);
  v25 = sub_1B8AF2A44(a1, v41, v42, v40, v18, v39, v38, v22 & 1, v24, (unsigned __int8 *)v53);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, KeyPath);
  v53[2] = v25;
  KeyPath = swift_getKeyPath();
  v26 = v44;
  sub_1B8AE7B90(a1, v44, type metadata accessor for CUIKWeekRow);
  v28 = v47;
  v27 = v48;
  v29 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v50, v49);
  v30 = (*(unsigned __int8 *)(v45 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  v31 = v27;
  v32 = (v46 + *(unsigned __int8 *)(v27 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v33 = (v51 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject();
  sub_1B8AFE0FC(v26, v34 + v30, type metadata accessor for CUIKWeekRow);
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v34 + v32, v28, v29);
  *(_QWORD *)(v34 + v33) = v25;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9440);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93B0);
  sub_1B8ADE950(&qword_1EF1B9448, &qword_1EF1B9440, MEMORY[0x1E0DEAF48]);
  sub_1B8ADBDEC(&qword_1EF1B8FF0, type metadata accessor for WeekDayViewModel, (uint64_t)&unk_1B8BA7D30);
  v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B90C0);
  v36 = sub_1B8B052DC();
  v53[0] = v35;
  v53[1] = v36;
  swift_getOpaqueTypeConformance2();
  return sub_1B8B9BF84();
}

uint64_t sub_1B8AF8C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v24[1] = a3;
  v24[2] = a4;
  v27 = a5;
  v7 = type metadata accessor for WeekDayViewModel(0);
  v26 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v26 + 64);
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for CUIKWeekRow(0);
  v25 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v25 + 64);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9300);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B90C0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AF6ABC(a1, (uint64_t)v14);
  sub_1B8B9B4B0();
  sub_1B8B9C014();
  sub_1B8B9B474();
  sub_1B8ADE850((uint64_t)v14, (uint64_t)v17, &qword_1EF1B9300);
  v18 = &v17[*(int *)(v15 + 36)];
  v19 = v29;
  *(_OWORD *)v18 = v28;
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v30;
  sub_1B8ADE894((uint64_t)v14, &qword_1EF1B9300);
  sub_1B8AE7B90(a2, (uint64_t)v11, type metadata accessor for CUIKWeekRow);
  sub_1B8AE7B90(a1, (uint64_t)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WeekDayViewModel);
  v20 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v21 = (v10 + *(unsigned __int8 *)(v26 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v22 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v11, v22 + v20, type metadata accessor for CUIKWeekRow);
  sub_1B8AFE0FC((uint64_t)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for WeekDayViewModel);
  sub_1B8B052DC();
  sub_1B8B9BC24();
  swift_release();
  return sub_1B8ADE894((uint64_t)v17, &qword_1EF1B90C0);
}

uint64_t sub_1B8AF8E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  void (*v12)(char *);
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = type metadata accessor for CUIKWeekRow(0);
  v12 = *(void (**)(char *))(a1 + *(int *)(result + 36));
  if (v12)
  {
    sub_1B8AE7B90(a2, (uint64_t)v10, type metadata accessor for WeekDayViewModel);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v10, 1, v13);
    if ((_DWORD)result != 1)
    {
      v14 = v10[11];
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v10[*(int *)(v13 + 160)], v4);
      if ((v14 & 1) == 0)
      {
        swift_retain();
        v12(v7);
        sub_1B8B05AB8((uint64_t)v12);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return result;
}

double sub_1B8AF8FE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE7B90(v2, (uint64_t)v6, type metadata accessor for CUIKWeekRow);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  sub_1B8AFE0FC((uint64_t)v6, v8 + v7, type metadata accessor for CUIKWeekRow);
  sub_1B8B9C014();
  sub_1B8B9B474();
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a2 = sub_1B8AFE140;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a2 + 48) = v18;
  return result;
}

uint64_t sub_1B8AF9100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v50 = a1;
  v58 = a2;
  v3 = sub_1B8B9B528();
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v55 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v54 = (char *)&v45 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC600);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC608);
  MEMORY[0x1E0C80A78](v47);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC610);
  MEMORY[0x1E0C80A78](v48);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC618);
  v51 = *(_QWORD *)(v14 - 8);
  v52 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC620);
  MEMORY[0x1E0C80A78](v49);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC628);
  MEMORY[0x1E0C80A78](v53);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v2;
  v21 = *v2;
  KeyPath = swift_getKeyPath();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC630);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v9, v50, v23);
  v24 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *v24 = KeyPath;
  v24[1] = v21;
  v25 = v2[1];
  v26 = swift_getKeyPath();
  sub_1B8ADE850((uint64_t)v9, (uint64_t)v11, &qword_1EF1BC600);
  v27 = (uint64_t *)&v11[*(int *)(v47 + 36)];
  *v27 = v26;
  v27[1] = v25;
  swift_retain();
  swift_retain();
  sub_1B8ADE894((uint64_t)v9, &qword_1EF1BC600);
  v28 = swift_getKeyPath();
  sub_1B8ADE850((uint64_t)v11, (uint64_t)v13, &qword_1EF1BC608);
  v29 = &v13[*(int *)(v48 + 36)];
  *(_QWORD *)v29 = v28;
  *((_QWORD *)v29 + 1) = 1;
  v29[16] = 0;
  sub_1B8ADE894((uint64_t)v11, &qword_1EF1BC608);
  v30 = type metadata accessor for MonthTextStyleModifier(0);
  v31 = v46;
  sub_1B8B044CC();
  sub_1B8B9BC30();
  sub_1B8ADE894((uint64_t)v13, &qword_1EF1BC610);
  v32 = (_QWORD *)((char *)v31 + *(int *)(v30 + 28));
  v34 = *v32;
  v33 = v32[1];
  v36 = v51;
  v35 = v52;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v18, v16, v52);
  v37 = &v18[*(int *)(v49 + 52)];
  *(_QWORD *)v37 = v34;
  *((_QWORD *)v37 + 1) = v33;
  v38 = *(void (**)(char *, uint64_t))(v36 + 8);
  swift_bridgeObjectRetain();
  v38(v16, v35);
  v39 = v54;
  sub_1B8B9B51C();
  v40 = v56;
  v41 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v39, v57);
  sub_1B8ADBDEC(&qword_1EF1B9090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9580], MEMORY[0x1E0CD9578]);
  v42 = v41;
  v43 = sub_1B8B9B48C();
  sub_1B8ADE850((uint64_t)v18, (uint64_t)v20, &qword_1EF1BC620);
  *(_QWORD *)&v20[*(int *)(v53 + 36)] = v43;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v42);
  sub_1B8ADE894((uint64_t)v18, &qword_1EF1BC620);
  sub_1B8B04670();
  sub_1B8B9BBB8();
  return sub_1B8ADE894((uint64_t)v20, &qword_1EF1BC628);
}

uint64_t sub_1B8AF9558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a1;
  v48 = a2;
  v3 = sub_1B8B9B528();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v45 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v44 = (char *)&v39 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5A8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5B0);
  MEMORY[0x1E0C80A78](v39);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5B8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5C0);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5C8);
  MEMORY[0x1E0C80A78](v40);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v2;
  KeyPath = swift_getKeyPath();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5D0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v9, v42, v21);
  v22 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *v22 = KeyPath;
  v22[1] = v19;
  swift_retain();
  LODWORD(v7) = sub_1B8B9B8F4();
  sub_1B8ADE850((uint64_t)v9, (uint64_t)v11, &qword_1EF1BC5A8);
  *(_DWORD *)&v11[*(int *)(v39 + 36)] = v7;
  sub_1B8ADE894((uint64_t)v9, &qword_1EF1BC5A8);
  v23 = swift_getKeyPath();
  sub_1B8ADE850((uint64_t)v11, (uint64_t)v14, &qword_1EF1BC5B0);
  v24 = &v14[*(int *)(v12 + 36)];
  *(_QWORD *)v24 = v23;
  *((_QWORD *)v24 + 1) = 1;
  v24[16] = 0;
  sub_1B8ADE894((uint64_t)v11, &qword_1EF1BC5B0);
  v25 = type metadata accessor for AltCalendarDateStyleModifier(0);
  sub_1B8B042D8();
  sub_1B8B9BC30();
  sub_1B8ADE894((uint64_t)v14, &qword_1EF1BC5B8);
  v26 = (uint64_t *)((char *)v2 + *(int *)(v25 + 24));
  v28 = *v26;
  v27 = v26[1];
  v29 = v41;
  v30 = v43;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v18, v16, v43);
  v31 = &v18[*(int *)(v40 + 52)];
  *(_QWORD *)v31 = v28;
  *((_QWORD *)v31 + 1) = v27;
  v32 = *(void (**)(char *, uint64_t))(v29 + 8);
  swift_bridgeObjectRetain();
  v32(v16, v30);
  v33 = v44;
  sub_1B8B9B51C();
  v34 = v46;
  v35 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v45, v33, v47);
  sub_1B8ADBDEC(&qword_1EF1B9090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9580], MEMORY[0x1E0CD9578]);
  v36 = sub_1B8B9B48C();
  v37 = v48;
  sub_1B8ADE850((uint64_t)v18, v48, &qword_1EF1BC5C8);
  *(_QWORD *)(v37 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC5F8) + 36)) = v36;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
  return sub_1B8ADE894((uint64_t)v18, &qword_1EF1BC5C8);
}

__n128 CUIKMonthView.init(currentDate:styling:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v25 = a2[7];
  v26 = *((_BYTE *)a2 + 128);
  v20 = a2[2];
  v21 = a2[3];
  v23 = a2[5];
  v24 = a2[6];
  v22 = a2[4];
  v18 = *a2;
  v19 = (__n128)a2[1];
  strcpy((char *)(a3 + 136), "EEEE, MMMM dd");
  *(_WORD *)(a3 + 150) = -4864;
  v5 = (int *)type metadata accessor for CUIKMonthView(0);
  v6 = (_QWORD *)(a3 + v5[9]);
  sub_1B8B9BE7C();
  *v6 = v16;
  v6[1] = v17;
  v7 = (uint64_t *)(a3 + v5[10]);
  *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  swift_storeEnumTagMultiPayload();
  v8 = (uint64_t *)(a3 + v5[11]);
  *v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  swift_storeEnumTagMultiPayload();
  v9 = (uint64_t *)(a3 + v5[12]);
  *v9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  swift_storeEnumTagMultiPayload();
  v10 = a3 + v5[6];
  v11 = sub_1B8B9B0F0();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  v13 = a3 + v5[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, a1, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
  *(_OWORD *)(a3 + 96) = v24;
  *(_OWORD *)(a3 + 112) = v25;
  *(_BYTE *)(a3 + 128) = v26;
  *(_OWORD *)(a3 + 32) = v20;
  *(_OWORD *)(a3 + 48) = v21;
  *(_OWORD *)(a3 + 64) = v22;
  *(_OWORD *)(a3 + 80) = v23;
  result = v19;
  *(_OWORD *)a3 = v18;
  *(__n128 *)(a3 + 16) = v19;
  v15 = (_QWORD *)(a3 + v5[8]);
  *v15 = 0;
  v15[1] = 0;
  return result;
}

uint64_t CUIKMonthView.init(displayedDate:todayDate:styling:tapAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v29 = a3[7];
  v30 = *((_BYTE *)a3 + 128);
  v24 = a3[2];
  v25 = a3[3];
  v27 = a3[5];
  v28 = a3[6];
  v26 = a3[4];
  v22 = *a3;
  v23 = a3[1];
  strcpy((char *)(a6 + 136), "EEEE, MMMM dd");
  *(_WORD *)(a6 + 150) = -4864;
  v11 = (int *)type metadata accessor for CUIKMonthView(0);
  v12 = (_QWORD *)(a6 + v11[9]);
  sub_1B8B9BE7C();
  *v12 = v20;
  v12[1] = v21;
  v13 = (uint64_t *)(a6 + v11[10]);
  *v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  swift_storeEnumTagMultiPayload();
  v14 = (uint64_t *)(a6 + v11[11]);
  *v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  swift_storeEnumTagMultiPayload();
  v15 = (uint64_t *)(a6 + v11[12]);
  *v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  swift_storeEnumTagMultiPayload();
  v16 = a6 + v11[6];
  v17 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a1, v17);
  *(_OWORD *)(a6 + 96) = v28;
  *(_OWORD *)(a6 + 112) = v29;
  *(_BYTE *)(a6 + 128) = v30;
  *(_OWORD *)(a6 + 32) = v24;
  *(_OWORD *)(a6 + 48) = v25;
  *(_OWORD *)(a6 + 64) = v26;
  *(_OWORD *)(a6 + 80) = v27;
  *(_OWORD *)a6 = v22;
  *(_OWORD *)(a6 + 16) = v23;
  result = sub_1B8B06074(a2, a6 + v11[7], &qword_1ED1B2D18);
  v19 = (_QWORD *)(a6 + v11[8]);
  *v19 = a4;
  v19[1] = a5;
  return result;
}

uint64_t CUIKMonthView.Styling.init(fullColor:gridFontSize:gridRowHeight:todayCircleSize:dateLabelFont:dateLabelPadding:allowKashida:showHeader:showOutOfMonthDays:dividerPadding:dividerHeight:altCalendarUnderlineWidth:altCalendarID:altCalendarFont:hideAltCalendarLabel:monthNameFormat:dimmingMode:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char v20;

  v20 = *a20;
  *(_BYTE *)a9 = result;
  *(double *)(a9 + 8) = a10;
  *(double *)(a9 + 16) = a11;
  *(double *)(a9 + 24) = a12;
  *(_QWORD *)(a9 + 32) = a2;
  *(double *)(a9 + 40) = a13;
  *(_BYTE *)(a9 + 48) = a3;
  *(_BYTE *)(a9 + 49) = a4;
  *(_BYTE *)(a9 + 50) = a5;
  *(double *)(a9 + 56) = a14;
  *(double *)(a9 + 64) = a15;
  *(double *)(a9 + 72) = a16;
  *(_QWORD *)(a9 + 80) = a6;
  *(_QWORD *)(a9 + 88) = a7;
  *(_QWORD *)(a9 + 96) = a8;
  *(_BYTE *)(a9 + 104) = a17;
  *(_QWORD *)(a9 + 112) = a18;
  *(_QWORD *)(a9 + 120) = a19;
  *(_BYTE *)(a9 + 128) = v20;
  return result;
}

uint64_t sub_1B8AF9D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a1;
  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1B8B9B2B8();
  v6 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B8B9B288();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - v14;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v33 = type metadata accessor for CUIKMonthView(0);
  v36 = v2;
  sub_1B8B1765C((uint64_t)v15);
  v17 = (void *)sub_1B8B9B1E0();
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v15, v9);
  objc_msgSend(v16, sel_setCalendar_, v17);

  sub_1B8B1765C((uint64_t)v15);
  sub_1B8B9B258();
  v18(v15, v9);
  v19 = (void *)sub_1B8B9B2A0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v32);
  objc_msgSend(v16, sel_setTimeZone_, v19);

  sub_1B8B1765C((uint64_t)v13);
  sub_1B8B9B234();
  v18(v13, v9);
  v20 = sub_1B8B9B198();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v20) != 1)
  {
    v22 = (void *)sub_1B8B9B138();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v20);
  }
  objc_msgSend(v16, sel_setLocale_, v22);

  v23 = (void *)sub_1B8B9C14C();
  objc_msgSend(v16, sel_setLocalizedDateFormatFromTemplate_, v23);

  v24 = (void *)sub_1B8B9B0C0();
  v25 = objc_msgSend(v16, sel_stringFromDate_, v24);

  v26 = sub_1B8B9C17C();
  v28 = v27;

  v37 = v26;
  v38 = v28;
  sub_1B8ADDBE4();
  v29 = sub_1B8B9C548();
  swift_bridgeObjectRelease();

  return v29;
}

void sub_1B8AFA08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = sub_1B8B9B2B8();
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B8B9B288();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F68);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v29 - v13;
  MEMORY[0x1E0C80A78](v12);
  v34 = (uint64_t)&v29 - v15;
  v16 = (void *)objc_opt_self();
  v17 = (void *)sub_1B8B9C14C();
  type metadata accessor for CUIKMonthView(0);
  v33 = v0;
  sub_1B8B1765C((uint64_t)v7);
  sub_1B8B9B258();
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v7, v4);
  v18 = (void *)sub_1B8B9B2A0();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v3, v32);
  v19 = objc_msgSend(v16, sel_overlayCalendarForCalendarIdentifier_timezone_, v17, v18);

  if (v19)
  {
    sub_1B8B9B1F8();

    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, v20, 1, v4);
  v21 = (uint64_t)v14;
  v22 = v34;
  sub_1B8B06074(v21, v34, &qword_1EF1B8F68);
  v23 = (void *)sub_1B8B9B0C0();
  sub_1B8ADE850(v22, (uint64_t)v11, &qword_1EF1B8F68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    v24 = 0;
  }
  else
  {
    v24 = (void *)sub_1B8B9B1E0();
    v30(v11, v4);
  }
  v25 = objc_msgSend((id)objc_opt_self(), sel_monthDayStringForDate_inCalendar_, v23, v24);

  if (v25)
  {
    v26 = sub_1B8B9C17C();
    v28 = v27;

    v35 = v26;
    v36 = v28;
    sub_1B8ADDBE4();
    sub_1B8B9C548();
    swift_bridgeObjectRelease();
    sub_1B8ADE894(v22, &qword_1EF1B8F68);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1B8AFA3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = sub_1B8B9B270();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v26 - v7;
  v9 = sub_1B8B9B288();
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CUIKMonthView(0);
  sub_1B8B1765C((uint64_t)v11);
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v13(v8, *MEMORY[0x1E0CB1108], v2);
  v13(v6, *MEMORY[0x1E0CB1160], v2);
  v14 = sub_1B8B9B21C();
  v16 = v15;
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v19(v8, v2);
  result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  if ((v18 & 1) != 0)
    v21 = 0;
  else
    v21 = v16;
  if ((v18 & 1) != 0)
    v22 = 0;
  else
    v22 = v14;
  if (__OFSUB__(v21, v22))
  {
    __break(1u);
  }
  else if (*(_BYTE *)(v1 + 49) == 1)
  {
    v23 = (uint64_t *)(v1 + *(int *)(v12 + 36));
    v24 = *v23;
    v25 = v23[1];
    v29 = v24;
    v30 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93C0);
    return sub_1B8B9BE88();
  }
  return result;
}

uint64_t sub_1B8AFA5B4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v0 = sub_1B8B9B12C();
  v36 = *(_QWORD *)(v0 - 8);
  v37 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F50);
  MEMORY[0x1E0C80A78](v34);
  v35 = (uint64_t)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F48);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v33 - v11;
  v13 = sub_1B8B9B180();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1B8B9B198();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v38[48] == 1)
  {
    v33 = v2;
    v38 = v7;
    sub_1B8B9B15C();
    sub_1B8B9B18C();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    sub_1B8B9B168();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_1B8B9B120();
    v22 = v36;
    v21 = v37;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v10, 0, 1, v37);
    v23 = v35;
    v24 = v35 + *(int *)(v34 + 48);
    sub_1B8ADE850((uint64_t)v12, v35, &qword_1EF1B8F48);
    sub_1B8ADE850((uint64_t)v10, v24, &qword_1EF1B8F48);
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
    if (v25(v23, 1, v21) == 1)
    {
      sub_1B8ADE894((uint64_t)v10, &qword_1EF1B8F48);
      sub_1B8ADE894((uint64_t)v12, &qword_1EF1B8F48);
      v26 = v25(v24, 1, v21);
      if (v26 == 1)
        v27 = &qword_1EF1B8F48;
      else
        v27 = &qword_1EF1B8F50;
      if (v26 == 1)
        v28 = -1;
      else
        v28 = 0;
    }
    else
    {
      v29 = (uint64_t)v38;
      sub_1B8ADE850(v23, (uint64_t)v38, &qword_1EF1B8F48);
      if (v25(v24, 1, v21) == 1)
      {
        sub_1B8ADE894((uint64_t)v10, &qword_1EF1B8F48);
        sub_1B8ADE894((uint64_t)v12, &qword_1EF1B8F48);
        v28 = 0;
        v27 = &qword_1EF1B8F50;
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v29, v21);
      }
      else
      {
        v30 = v33;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v33, v24, v21);
        sub_1B8ADBDEC(&qword_1EF1B8F40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
        v28 = sub_1B8B9C0EC();
        v31 = *(void (**)(char *, uint64_t))(v22 + 8);
        v31(v30, v21);
        v27 = &qword_1EF1B8F48;
        sub_1B8ADE894((uint64_t)v10, &qword_1EF1B8F48);
        sub_1B8ADE894((uint64_t)v12, &qword_1EF1B8F48);
        v31((char *)v29, v21);
      }
    }
    sub_1B8ADE894(v23, v27);
  }
  else
  {
    v28 = 0;
  }
  return v28 & 1;
}

double sub_1B8AFA968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  const __CTFont *v4;
  CTFontDescriptorRef v5;
  double Size;
  id v7;
  uint64_t inited;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  const __CFAttributedString *v16;
  const __CTFramesetter *v17;
  id v18;
  double v19;
  uint64_t v21;
  CFRange v22;
  CGSize v23;

  v0 = sub_1B8B9BA98();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CUIKMonthView(0);
  sub_1B8B17918((uint64_t)v3);
  v4 = (const __CTFont *)sub_1B8B9BA14();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v5 = CTFontCopyFontDescriptor(v4);
  Size = CTFontGetSize(v4);
  v7 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v5, Size);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6A0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B8BA6070;
  v9 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 64) = sub_1B8B05B9C(0, &qword_1EF1BC6A8);
  *(_QWORD *)(inited + 40) = v7;
  swift_bridgeObjectRetain();
  v10 = v9;
  v11 = v7;
  sub_1B8AFABE8(inited);
  v12 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v13 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1B8ADBDEC(&qword_1EF1BBA48, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B8BA5E80);
  v14 = (void *)sub_1B8B9C0B0();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);

  v16 = (const __CFAttributedString *)v15;
  v17 = CTFramesetterCreateWithAttributedString(v16);
  v18 = -[__CFAttributedString length](v16, sel_length);

  v23.width = 1.79769313e308;
  v22.location = 0;
  v22.length = (CFIndex)v18;
  v23.height = 1.79769313e308;
  *(_QWORD *)&v19 = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v17, v22, 0, v23, 0);

  return v19;
}

unint64_t sub_1B8AFABE8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6B0);
  v2 = sub_1B8B9C758();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1B8ADE850(v6, (uint64_t)&v13, &qword_1EF1BC6B8);
    v7 = v13;
    result = sub_1B8B37004(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1B8B04E90(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1B8AFAD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = sub_1B8B9B738();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return a4(a2, a1);
}

uint64_t sub_1B8AFAD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;

  v94 = a2;
  v123 = a3;
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6C8);
  MEMORY[0x1E0C80A78](v110);
  v95 = (uint64_t *)((char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6D0);
  MEMORY[0x1E0C80A78](v106);
  v108 = (uint64_t)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6D8);
  MEMORY[0x1E0C80A78](v107);
  v93 = (uint64_t *)((char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6E0);
  MEMORY[0x1E0C80A78](v122);
  v109 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1B8B9B528();
  v104 = *(_QWORD *)(v105 - 8);
  v8 = MEMORY[0x1E0C80A78](v105);
  v102 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v103 = (char *)&v93 - v10;
  v99 = sub_1B8B9BF78();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v97 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6E8);
  MEMORY[0x1E0C80A78](v96);
  v101 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6F0);
  MEMORY[0x1E0C80A78](v100);
  v111 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6F8);
  MEMORY[0x1E0C80A78](v118);
  v119 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC700);
  v16 = MEMORY[0x1E0C80A78](v15);
  v121 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v120 = (char *)&v93 - v18;
  v19 = type metadata accessor for MonthTextStyleModifier(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (uint64_t *)((char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = sub_1B8B9B720();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1B8B9B288();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC708);
  MEMORY[0x1E0C80A78](v124);
  v125 = (uint64_t)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v132 = sub_1B8AF9D84(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  *((_QWORD *)&v132 + 1) = v32;
  sub_1B8ADDBE4();
  v33 = sub_1B8B9BBAC();
  v34 = *(_BYTE *)a1 == 1;
  v115 = v35;
  v114 = v33;
  v113 = v36;
  v38 = v37;
  if (v34)
  {
    type metadata accessor for CUIKMonthView(0);
    sub_1B8B1765C((uint64_t)v30);
    sub_1B8B9B234();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v39 = sub_1B8B6D8CC((uint64_t)v26);
    sub_1B8ADE894((uint64_t)v26, &qword_1ED1B3018);
  }
  else
  {
    v39 = sub_1B8B9BDC8();
  }
  v40 = *(_QWORD *)(a1 + 32);
  if ((sub_1B8AFA5B4() & 1) != 0)
    sub_1B8B9B714();
  else
    sub_1B8B9B708();
  v112 = v23;
  v41 = sub_1B8AF9D84(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  v43 = v42;
  v44 = (char *)v21 + *(int *)(v19 + 24);
  v45 = v116;
  v46 = v23;
  v47 = v21;
  v48 = v117;
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v44, v46, v117);
  *v47 = v39;
  v47[1] = v40;
  v49 = (uint64_t *)((char *)v47 + *(int *)(v19 + 28));
  *v49 = v41;
  v49[1] = v43;
  v50 = v125;
  sub_1B8AE7B90((uint64_t)v47, v125 + *(int *)(v124 + 36), type metadata accessor for MonthTextStyleModifier);
  v51 = v114;
  *(_QWORD *)v50 = v114;
  *(_QWORD *)(v50 + 8) = v38;
  v52 = v113 & 1;
  *(_BYTE *)(v50 + 16) = v113 & 1;
  *(_QWORD *)(v50 + 24) = v115;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B8ADD7C0(v51, v38, v52);
  sub_1B8AE7BD4((uint64_t)v47, type metadata accessor for MonthTextStyleModifier);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v112, v48);
  sub_1B8ADDA88(v51, v38, v52);
  swift_bridgeObjectRelease();
  sub_1B8B9C014();
  sub_1B8B9B474();
  v53 = v126;
  v54 = v127;
  v117 = v128;
  LODWORD(v116) = v129;
  v55 = v130;
  v115 = v131;
  if (*(_QWORD *)(a1 + 88) && *(_BYTE *)(a1 + 104) != 1)
  {
    v113 = v127;
    v114 = v126;
    sub_1B8AFA08C();
    v112 = (char *)v58;
    v60 = v59;
    v61 = v97;
    sub_1B8B9BF6C();
    sub_1B8B9C014();
    sub_1B8B9B474();
    v62 = v98;
    v63 = (uint64_t)v101;
    v64 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v101, v61, v99);
    v65 = (_OWORD *)(v63 + *(int *)(v96 + 36));
    v66 = v133;
    *v65 = v132;
    v65[1] = v66;
    v65[2] = v134;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v64);
    v67 = v103;
    sub_1B8B9B51C();
    v68 = v104;
    v69 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v102, v67, v105);
    sub_1B8ADBDEC(&qword_1EF1B9090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9580], MEMORY[0x1E0CD9578]);
    v70 = sub_1B8B9B48C();
    v71 = v111;
    sub_1B8ADE850(v63, v111, &qword_1EF1BC6E8);
    *(_QWORD *)(v71 + *(int *)(v100 + 36)) = v70;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
    sub_1B8ADE894(v63, &qword_1EF1BC6E8);
    LOBYTE(v69) = sub_1B8AFA5B4();
    v72 = a1;
    v73 = *(_QWORD *)(a1 + 56);
    v74 = sub_1B8B9B738();
    if ((v69 & 1) != 0)
    {
      v75 = (uint64_t)v93;
      *v93 = v74;
      *(_QWORD *)(v75 + 8) = v73;
      *(_BYTE *)(v75 + 16) = 0;
      v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC748);
      sub_1B8AFB930(a1, v94, v71, (uint64_t)v112, v60, v75 + *(int *)(v76 + 44));
      swift_bridgeObjectRelease();
      sub_1B8ADE850(v75, v108, &qword_1EF1BC6D8);
      swift_storeEnumTagMultiPayload();
      v77 = MEMORY[0x1E0CDFB08];
      sub_1B8ADE950(&qword_1EF1BC718, &qword_1EF1BC6D8, MEMORY[0x1E0CDFB08]);
      sub_1B8ADE950(&qword_1EF1BC720, &qword_1EF1BC6C8, v77);
      v78 = (uint64_t)v109;
      sub_1B8B9B870();
      v79 = v75;
      v80 = &qword_1EF1BC6D8;
    }
    else
    {
      v81 = (uint64_t)v95;
      *v95 = v74;
      *(_QWORD *)(v81 + 8) = v73;
      *(_BYTE *)(v81 + 16) = 0;
      v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC740);
      sub_1B8AFC410(v125, v111, (uint64_t)v112, v60, a1, v81 + *(int *)(v82 + 44));
      swift_bridgeObjectRelease();
      sub_1B8ADE850(v81, v108, &qword_1EF1BC6C8);
      swift_storeEnumTagMultiPayload();
      v83 = MEMORY[0x1E0CDFB08];
      sub_1B8ADE950(&qword_1EF1BC718, &qword_1EF1BC6D8, MEMORY[0x1E0CDFB08]);
      sub_1B8ADE950(&qword_1EF1BC720, &qword_1EF1BC6C8, v83);
      v78 = (uint64_t)v109;
      sub_1B8B9B870();
      v79 = v81;
      v71 = v111;
      v80 = &qword_1EF1BC6C8;
    }
    sub_1B8ADE894(v79, v80);
    a1 = v72;
    sub_1B8ADE850(v78, v119, &qword_1EF1BC6E0);
    swift_storeEnumTagMultiPayload();
    sub_1B8B04EA0();
    sub_1B8B04F44();
    v57 = v120;
    sub_1B8B9B870();
    sub_1B8ADE894(v78, &qword_1EF1BC6E0);
    sub_1B8ADE894(v71, &qword_1EF1BC6F0);
    v56 = v125;
    v53 = v114;
    v54 = v113;
  }
  else
  {
    v56 = v125;
    sub_1B8ADE850(v125, v119, &qword_1EF1BC708);
    swift_storeEnumTagMultiPayload();
    sub_1B8B04EA0();
    sub_1B8B04F44();
    v57 = v120;
    sub_1B8B9B870();
  }
  v84 = *(_QWORD *)(a1 + 40);
  v85 = (uint64_t)v57;
  v86 = (uint64_t)v57;
  v87 = v121;
  sub_1B8ADE850(v85, v121, &qword_1EF1BC700);
  v88 = v123;
  *v123 = 0;
  *((_BYTE *)v88 + 8) = 1;
  v88[2] = v53;
  *((_BYTE *)v88 + 24) = v54;
  v88[4] = v117;
  *((_BYTE *)v88 + 40) = v116;
  v89 = v115;
  v88[6] = v55;
  v88[7] = v89;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC738);
  sub_1B8ADE850(v87, (uint64_t)v88 + *(int *)(v90 + 48), &qword_1EF1BC700);
  v91 = (char *)v88 + *(int *)(v90 + 64);
  *(_QWORD *)v91 = v84;
  v91[8] = 0;
  sub_1B8ADE894(v86, &qword_1EF1BC700);
  sub_1B8ADE894(v56, &qword_1EF1BC708);
  return sub_1B8ADE894(v87, &qword_1EF1BC700);
}

uint64_t sub_1B8AFB930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  unint64_t v140;
  uint64_t v141;

  v128 = a5;
  v118 = a4;
  v114 = a3;
  v123 = a6;
  v98 = type metadata accessor for AltCalendarDateStyleModifier(0);
  MEMORY[0x1E0C80A78](v98);
  v115 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC750);
  v9 = MEMORY[0x1E0C80A78](v116);
  v122 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v119 = (char *)&v95 - v12;
  MEMORY[0x1E0C80A78](v11);
  v120 = (uint64_t)&v95 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6F0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v121 = (uint64_t)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v129 = (uint64_t)&v95 - v17;
  v111 = type metadata accessor for MonthTextStyleModifier(0);
  MEMORY[0x1E0C80A78](v111);
  v19 = (uint64_t *)((char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v127 = sub_1B8B9B720();
  v113 = *(_QWORD *)(v127 - 8);
  v20 = MEMORY[0x1E0C80A78](v127);
  v125 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v124 = (char *)&v95 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v23);
  v97 = (void (*)(char *, char *, uint64_t))((char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = sub_1B8B9B288();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC758);
  v27 = MEMORY[0x1E0C80A78](v109);
  v117 = (uint64_t)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v95 - v30;
  MEMORY[0x1E0C80A78](v29);
  v126 = (uint64_t)&v95 - v32;
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(_QWORD *)(a1 + 120);
  v136 = sub_1B8AF9D84(v33, v34);
  v137 = v35;
  v110 = sub_1B8ADDBE4();
  v107 = sub_1B8B9BBAC();
  v106 = v36;
  v105 = v37;
  v108 = v38;
  sub_1B8B9B4B0();
  sub_1B8AF9D84(v33, v34);
  sub_1B8AFA968();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 88) && (*(_BYTE *)(a1 + 104) & 1) == 0)
  {
    sub_1B8AFA08C();
    sub_1B8AFA968();
    swift_bridgeObjectRelease();
  }
  sub_1B8AF9D84(v33, v34);
  sub_1B8AFA968();
  swift_bridgeObjectRelease();
  sub_1B8B9C020();
  sub_1B8B9B474();
  v39 = *(_BYTE *)a1 == 1;
  v104 = v130;
  v103 = v131;
  v102 = v132;
  v101 = v133;
  v100 = v134;
  v99 = v135;
  if (v39)
  {
    type metadata accessor for CUIKMonthView(0);
    sub_1B8B1765C((uint64_t)v26);
    v40 = (uint64_t)v97;
    sub_1B8B9B234();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v26, v96);
    v41 = sub_1B8B6D8CC(v40);
    sub_1B8ADE894(v40, &qword_1ED1B3018);
  }
  else
  {
    v41 = sub_1B8B9BDC8();
  }
  v42 = *(_QWORD *)(a1 + 32);
  v43 = sub_1B8AFA5B4();
  v112 = a2;
  v44 = v19;
  v45 = v124;
  if ((v43 & 1) != 0)
    sub_1B8B9B714();
  else
    sub_1B8B9B708();
  v46 = sub_1B8AF9D84(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  v48 = v47;
  v49 = v111;
  v50 = (char *)v44 + *(int *)(v111 + 24);
  v51 = v113;
  v52 = v45;
  v53 = v127;
  v97 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
  v97(v50, v52, v127);
  *v44 = v41;
  v44[1] = v42;
  v54 = (uint64_t *)((char *)v44 + *(int *)(v49 + 28));
  *v54 = v46;
  v54[1] = v48;
  sub_1B8AE7B90((uint64_t)v44, (uint64_t)&v31[*(int *)(v109 + 36)], type metadata accessor for MonthTextStyleModifier);
  v55 = v107;
  v56 = v106;
  *(_QWORD *)v31 = v107;
  *((_QWORD *)v31 + 1) = v56;
  v57 = v105 & 1;
  v31[16] = v105 & 1;
  v58 = v104;
  *((_QWORD *)v31 + 3) = v108;
  *((_QWORD *)v31 + 4) = v58;
  v31[40] = v103;
  *((_QWORD *)v31 + 6) = v102;
  v31[56] = v101;
  v59 = v99;
  *((_QWORD *)v31 + 8) = v100;
  *((_QWORD *)v31 + 9) = v59;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B8ADD7C0(v55, v56, v57);
  sub_1B8AE7BD4((uint64_t)v44, type metadata accessor for MonthTextStyleModifier);
  v60 = v124;
  v124 = *(char **)(v51 + 8);
  ((void (*)(char *, uint64_t))v124)(v60, v53);
  sub_1B8ADDA88(v55, v56, v57);
  swift_bridgeObjectRelease();
  sub_1B8B06074((uint64_t)v31, v126, &qword_1EF1BC758);
  sub_1B8ADE850(v114, v129, &qword_1EF1BC6F0);
  v61 = v118;
  v136 = v118;
  v137 = v128;
  swift_bridgeObjectRetain();
  v62 = sub_1B8B9BBAC();
  v114 = v63;
  v65 = v64;
  v67 = v66;
  sub_1B8B9B4B0();
  sub_1B8AF9D84(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_1B8AFA968();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 88))
  {
    v68 = v125;
    if ((*(_BYTE *)(a1 + 104) & 1) == 0)
    {
      sub_1B8AFA08C();
      sub_1B8AFA968();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v68 = v125;
  }
  v69 = *(_QWORD *)(a1 + 96);
  sub_1B8AFA968();
  sub_1B8B9C02C();
  sub_1B8B9B474();
  v70 = v136;
  v71 = v137;
  v112 = v138;
  LODWORD(v111) = v139;
  v110 = v140;
  v109 = v141;
  v72 = sub_1B8AFA5B4();
  LODWORD(v113) = v71;
  v73 = v62;
  v74 = v67;
  if ((v72 & 1) != 0)
    sub_1B8B9B714();
  else
    sub_1B8B9B708();
  v75 = v98;
  v76 = v65 & 1;
  v77 = v115;
  v78 = v68;
  v79 = v127;
  v97(&v115[*(int *)(v98 + 20)], v78, v127);
  *v77 = v69;
  v80 = (_QWORD *)((char *)v77 + *(int *)(v75 + 24));
  v81 = (uint64_t)v77;
  v82 = v128;
  *v80 = v61;
  v80[1] = v82;
  v83 = (uint64_t)v119;
  sub_1B8AE7B90(v81, (uint64_t)&v119[*(int *)(v116 + 36)], type metadata accessor for AltCalendarDateStyleModifier);
  v84 = v114;
  *(_QWORD *)v83 = v73;
  *(_QWORD *)(v83 + 8) = v84;
  *(_BYTE *)(v83 + 16) = v76;
  *(_QWORD *)(v83 + 24) = v74;
  *(_QWORD *)(v83 + 32) = v70;
  *(_BYTE *)(v83 + 40) = v113;
  *(_QWORD *)(v83 + 48) = v112;
  *(_BYTE *)(v83 + 56) = v111;
  v85 = v109;
  *(_QWORD *)(v83 + 64) = v110;
  *(_QWORD *)(v83 + 72) = v85;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B8ADD7C0(v73, v84, v76);
  swift_bridgeObjectRetain();
  sub_1B8AE7BD4(v81, type metadata accessor for AltCalendarDateStyleModifier);
  ((void (*)(char *, uint64_t))v124)(v125, v79);
  sub_1B8ADDA88(v73, v84, v76);
  swift_bridgeObjectRelease();
  v86 = v120;
  sub_1B8B06074(v83, v120, &qword_1EF1BC750);
  v87 = v126;
  v88 = v117;
  sub_1B8ADE850(v126, v117, &qword_1EF1BC758);
  v89 = v129;
  v90 = v121;
  sub_1B8ADE850(v129, v121, &qword_1EF1BC6F0);
  v91 = v122;
  sub_1B8ADE850(v86, v122, &qword_1EF1BC750);
  v92 = v123;
  sub_1B8ADE850(v88, v123, &qword_1EF1BC758);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC760);
  sub_1B8ADE850(v90, v92 + *(int *)(v93 + 48), &qword_1EF1BC6F0);
  sub_1B8ADE850(v91, v92 + *(int *)(v93 + 64), &qword_1EF1BC750);
  sub_1B8ADE894(v86, &qword_1EF1BC750);
  sub_1B8ADE894(v89, &qword_1EF1BC6F0);
  sub_1B8ADE894(v87, &qword_1EF1BC758);
  sub_1B8ADE894(v91, &qword_1EF1BC750);
  sub_1B8ADE894(v90, &qword_1EF1BC6F0);
  return sub_1B8ADE894(v88, &qword_1EF1BC758);
}

uint64_t sub_1B8AFC410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v60 = (char *)a1;
  v65 = a6;
  v56 = type metadata accessor for AltCalendarDateStyleModifier(0);
  MEMORY[0x1E0C80A78](v56);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1B8B9B720();
  v66 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC768);
  v14 = MEMORY[0x1E0C80A78](v54);
  v64 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v53 - v17;
  MEMORY[0x1E0C80A78](v16);
  v62 = (uint64_t)&v53 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC6F0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v63 = (uint64_t)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v53 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC708);
  v26 = MEMORY[0x1E0C80A78](v25);
  v61 = (uint64_t)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v57 = (uint64_t)&v53 - v28;
  sub_1B8ADE850((uint64_t)v60, (uint64_t)&v53 - v28, &qword_1EF1BC708);
  v60 = v24;
  sub_1B8ADE850(a2, (uint64_t)v24, &qword_1EF1BC6F0);
  v58 = a3;
  v67 = a3;
  v68 = a4;
  sub_1B8ADDBE4();
  v55 = a4;
  swift_bridgeObjectRetain();
  v29 = sub_1B8B9BBAC();
  v31 = v30;
  v33 = v32;
  v53 = v34;
  v35 = *(_QWORD *)(a5 + 96);
  if ((sub_1B8AFA5B4() & 1) != 0)
    sub_1B8B9B714();
  else
    sub_1B8B9B708();
  v36 = v56;
  v37 = &v11[*(int *)(v56 + 20)];
  v38 = v11;
  v39 = v13;
  v40 = v13;
  v41 = v59;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v37, v40, v59);
  *v38 = v35;
  v42 = (_QWORD *)((char *)v38 + *(int *)(v36 + 24));
  v43 = v55;
  *v42 = v58;
  v42[1] = v43;
  sub_1B8AE7B90((uint64_t)v38, (uint64_t)&v18[*(int *)(v54 + 36)], type metadata accessor for AltCalendarDateStyleModifier);
  *(_QWORD *)v18 = v29;
  *((_QWORD *)v18 + 1) = v31;
  v18[16] = v33 & 1;
  *((_QWORD *)v18 + 3) = v53;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B8ADD7C0(v29, v31, v33 & 1);
  swift_bridgeObjectRetain();
  sub_1B8AE7BD4((uint64_t)v38, type metadata accessor for AltCalendarDateStyleModifier);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v41);
  sub_1B8ADDA88(v29, v31, v33 & 1);
  swift_bridgeObjectRelease();
  v44 = v62;
  sub_1B8B06074((uint64_t)v18, v62, &qword_1EF1BC768);
  v45 = v57;
  v46 = v61;
  sub_1B8ADE850(v57, v61, &qword_1EF1BC708);
  v47 = (uint64_t)v60;
  v48 = v63;
  sub_1B8ADE850((uint64_t)v60, v63, &qword_1EF1BC6F0);
  v49 = v64;
  sub_1B8ADE850(v44, v64, &qword_1EF1BC768);
  v50 = v65;
  sub_1B8ADE850(v46, v65, &qword_1EF1BC708);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC770);
  sub_1B8ADE850(v48, v50 + *(int *)(v51 + 48), &qword_1EF1BC6F0);
  sub_1B8ADE850(v49, v50 + *(int *)(v51 + 64), &qword_1EF1BC768);
  sub_1B8ADE894(v44, &qword_1EF1BC768);
  sub_1B8ADE894(v47, &qword_1EF1BC6F0);
  sub_1B8ADE894(v45, &qword_1EF1BC708);
  sub_1B8ADE894(v49, &qword_1EF1BC768);
  sub_1B8ADE894(v48, &qword_1EF1BC6F0);
  return sub_1B8ADE894(v46, &qword_1EF1BC708);
}

uint64_t sub_1B8AFC888@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC670);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(double *)(a1 + 16);
  v8 = 0;
  if (v7 >= 1.0)
  {
    sub_1B8B9B4B0();
    sub_1B8AFA3A8();
    v8 = v9;
  }
  *(_QWORD *)v6 = sub_1B8B9B7A4();
  *((_QWORD *)v6 + 1) = v8;
  v6[16] = v7 < 1.0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC678);
  sub_1B8AFC970(a1, (uint64_t)&v6[*(int *)(v10 + 44)]);
  return sub_1B8B06074((uint64_t)v6, a2, &qword_1EF1BC670);
}

uint64_t sub_1B8AFC970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;

  v112 = a2;
  v106 = sub_1B8B9B270();
  v105 = *(_QWORD *)(v106 - 8);
  v3 = MEMORY[0x1E0C80A78](v106);
  v104 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v101 = (char *)&v84 - v5;
  v103 = sub_1B8B9B288();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v100 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93E0);
  v109 = *(_QWORD *)(v111 - 8);
  v7 = MEMORY[0x1E0C80A78](v111);
  v110 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v107 = (char *)&v84 - v10;
  MEMORY[0x1E0C80A78](v9);
  v108 = (char *)&v84 - v11;
  v12 = sub_1B8B9B0F0();
  v96 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v95 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CUIKWeekLabelRow(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v84 - v18;
  v20 = type metadata accessor for CUIKMonthView(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC680);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v113 = (uint64_t)&v84 - v28;
  v29 = *(_BYTE *)(a1 + 49) == 1;
  v99 = v22;
  v98 = v21;
  v97 = v23;
  if (v29)
  {
    v85 = v14;
    sub_1B8AE7B90(a1, (uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CUIKMonthView);
    v30 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v94 = v20;
    v93 = swift_allocObject();
    sub_1B8AFE0FC((uint64_t)v23, v93 + v30, type metadata accessor for CUIKMonthView);
    v31 = *(_QWORD *)(a1 + 112);
    v32 = *(_QWORD *)(a1 + 120);
    v92 = v19;
    sub_1B8AF9D84(v31, v32);
    v84 = v12;
    sub_1B8AFA968();
    swift_bridgeObjectRelease();
    sub_1B8B9C014();
    sub_1B8B9B474();
    v86 = v123;
    v91 = v124;
    v90 = v125;
    v89 = v126;
    v88 = v127;
    v87 = v128;
    sub_1B8AE7B90(a1, (uint64_t)v23, type metadata accessor for CUIKMonthView);
    v33 = v94;
    v34 = swift_allocObject();
    sub_1B8AFE0FC((uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v34 + v30, type metadata accessor for CUIKMonthView);
    v35 = v96;
    v36 = v95;
    v37 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, a1 + *(int *)(v33 + 24), v84);
    v38 = *(_OWORD *)(a1 + 112);
    v120 = *(_OWORD *)(a1 + 96);
    v121 = v38;
    v122 = *(_BYTE *)(a1 + 128);
    v39 = *(_OWORD *)(a1 + 48);
    v116 = *(_OWORD *)(a1 + 32);
    v117 = v39;
    v40 = *(_OWORD *)(a1 + 80);
    v118 = *(_OWORD *)(a1 + 64);
    v119 = v40;
    v41 = *(_OWORD *)a1;
    v115 = *(_OWORD *)(a1 + 16);
    v114 = v41;
    v42 = v85;
    v43 = (uint64_t *)&v17[*(int *)(v85 + 24)];
    *v43 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    swift_storeEnumTagMultiPayload();
    v44 = (uint64_t *)&v17[*(int *)(v42 + 28)];
    *v44 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v17, v36, v37);
    v45 = &v17[*(int *)(v42 + 20)];
    v46 = v121;
    *((_OWORD *)v45 + 6) = v120;
    *((_OWORD *)v45 + 7) = v46;
    v45[128] = v122;
    v47 = v117;
    *((_OWORD *)v45 + 2) = v116;
    *((_OWORD *)v45 + 3) = v47;
    v48 = v119;
    *((_OWORD *)v45 + 4) = v118;
    *((_OWORD *)v45 + 5) = v48;
    v49 = v115;
    *(_OWORD *)v45 = v114;
    *((_OWORD *)v45 + 1) = v49;
    v50 = (uint64_t)v92;
    sub_1B8AFE0FC((uint64_t)v17, (uint64_t)v92, type metadata accessor for CUIKWeekLabelRow);
    sub_1B8AE7B90(v50, (uint64_t)v17, type metadata accessor for CUIKWeekLabelRow);
    v51 = v93;
    *(_QWORD *)v27 = sub_1B8B04DE0;
    *((_QWORD *)v27 + 1) = v51;
    *((_QWORD *)v27 + 2) = v86;
    v27[24] = v91;
    *((_QWORD *)v27 + 4) = v90;
    v27[40] = v89;
    v52 = v87;
    *((_QWORD *)v27 + 6) = v88;
    *((_QWORD *)v27 + 7) = v52;
    *((_QWORD *)v27 + 8) = sub_1B8AFD304;
    *((_QWORD *)v27 + 9) = 0;
    *((_QWORD *)v27 + 10) = sub_1B8B04E00;
    *((_QWORD *)v27 + 11) = v34;
    v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC698);
    sub_1B8AE7B90((uint64_t)v17, (uint64_t)&v27[*(int *)(v53 + 48)], type metadata accessor for CUIKWeekLabelRow);
    swift_retain();
    swift_retain();
    sub_1B8B04E3C((uint64_t)&v114);
    sub_1B8AE7BD4(v50, type metadata accessor for CUIKWeekLabelRow);
    sub_1B8AE7BD4((uint64_t)v17, type metadata accessor for CUIKWeekLabelRow);
    swift_release();
    swift_release();
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC688);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v27, 0, 1, v54);
    sub_1B8B06074((uint64_t)v27, v113, &qword_1EF1BC680);
  }
  else
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC688);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v113, 1, 1, v55);
  }
  v56 = v100;
  sub_1B8B1765C(v100);
  v57 = v105;
  v58 = *(void (**)(char *, _QWORD, uint64_t))(v105 + 104);
  v59 = v101;
  v60 = v106;
  v58(v101, *MEMORY[0x1E0CB1108], v106);
  v61 = v104;
  v58(v104, *MEMORY[0x1E0CB1160], v60);
  v62 = sub_1B8B9B21C();
  v64 = v63;
  v66 = v65;
  v67 = *(void (**)(char *, uint64_t))(v57 + 8);
  v67(v61, v60);
  v67(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v56, v103);
  if ((v66 & 1) != 0)
    v68 = 0;
  else
    v68 = v64;
  if ((v66 & 1) != 0)
    v69 = 0;
  else
    v69 = v62;
  *(_QWORD *)&v114 = v69;
  *((_QWORD *)&v114 + 1) = v68;
  swift_getKeyPath();
  v70 = (uint64_t)v97;
  sub_1B8AE7B90(a1, (uint64_t)v97, type metadata accessor for CUIKMonthView);
  v71 = (*(unsigned __int8 *)(v98 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
  v72 = swift_allocObject();
  sub_1B8AFE0FC(v70, v72 + v71, type metadata accessor for CUIKMonthView);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9460);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93F8);
  sub_1B8B04D2C();
  sub_1B8ADE950(&qword_1EF1B93F0, &qword_1EF1B93F8, MEMORY[0x1E0CE0678]);
  v73 = v107;
  sub_1B8B9BF84();
  v74 = v109;
  v75 = v108;
  v76 = v111;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v73, v111);
  v77 = v113;
  sub_1B8ADE850(v113, (uint64_t)v27, &qword_1EF1BC680);
  v78 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  v79 = v110;
  v78(v110, v75, v76);
  v80 = v112;
  sub_1B8ADE850((uint64_t)v27, v112, &qword_1EF1BC680);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC690);
  v78((char *)(v80 + *(int *)(v81 + 48)), v79, v76);
  v82 = *(void (**)(char *, uint64_t))(v74 + 8);
  v82(v75, v76);
  sub_1B8ADE894(v77, &qword_1EF1BC680);
  v82(v79, v76);
  return sub_1B8ADE894((uint64_t)v27, &qword_1EF1BC680);
}

uint64_t sub_1B8AFD304@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1B8B9B4B0();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B8AFD32C()
{
  type metadata accessor for CUIKMonthView(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B93C0);
  return sub_1B8B9BE94();
}

uint64_t sub_1B8AFD398@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;

  v46 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v43 - v9;
  v11 = sub_1B8B9B0F0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for CUIKWeekRow(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v43 - v19;
  v45 = *a1;
  v21 = (int *)type metadata accessor for CUIKMonthView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, (uint64_t)a2 + v21[6], v11);
  sub_1B8ADE850((uint64_t)a2 + v21[7], (uint64_t)v10, &qword_1ED1B2D18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
  v22 = a2[3];
  v49 = a2[2];
  v50 = v22;
  v55 = *((_BYTE *)a2 + 128);
  v23 = a2[7];
  v53 = a2[6];
  v54 = v23;
  v24 = a2[5];
  v51 = a2[4];
  v52 = v24;
  v25 = a2[1];
  v47 = *a2;
  v48 = v25;
  v26 = (uint64_t *)((char *)a2 + v21[8]);
  v27 = *v26;
  v43 = v26[1];
  v44 = v27;
  v28 = (uint64_t *)&v18[v15[10]];
  *v28 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  swift_storeEnumTagMultiPayload();
  v29 = (uint64_t *)&v18[v15[11]];
  *v29 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  swift_storeEnumTagMultiPayload();
  v30 = (uint64_t *)&v18[v15[12]];
  *v30 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v14, v11);
  sub_1B8B06074((uint64_t)v10, (uint64_t)&v18[v15[5]], &qword_1ED1B2D18);
  sub_1B8B06074((uint64_t)v8, (uint64_t)&v18[v15[6]], &qword_1ED1B2D18);
  *(_QWORD *)&v18[v15[7]] = v45;
  v31 = &v18[v15[8]];
  v32 = v54;
  *((_OWORD *)v31 + 6) = v53;
  *((_OWORD *)v31 + 7) = v32;
  v31[128] = v55;
  v33 = v50;
  *((_OWORD *)v31 + 2) = v49;
  *((_OWORD *)v31 + 3) = v33;
  v34 = v52;
  *((_OWORD *)v31 + 4) = v51;
  *((_OWORD *)v31 + 5) = v34;
  v35 = v48;
  *(_OWORD *)v31 = v47;
  *((_OWORD *)v31 + 1) = v35;
  v36 = &v18[v15[9]];
  v38 = v43;
  v37 = v44;
  *(_QWORD *)v36 = v44;
  *((_QWORD *)v36 + 1) = v38;
  sub_1B8AFE0FC((uint64_t)v18, (uint64_t)v20, type metadata accessor for CUIKWeekRow);
  v39 = *((double *)a2 + 2);
  LOBYTE(v30) = v39 >= 1.0;
  LOBYTE(a2) = v39 < 1.0;
  sub_1B8AE7B90((uint64_t)v20, (uint64_t)v18, type metadata accessor for CUIKWeekRow);
  v40 = v46;
  sub_1B8AE7B90((uint64_t)v18, v46, type metadata accessor for CUIKWeekRow);
  v41 = v40 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F88) + 48);
  *(_QWORD *)v41 = 0;
  *(_BYTE *)(v41 + 8) = (_BYTE)a2;
  *(_BYTE *)(v41 + 9) = (_BYTE)v30;
  sub_1B8B04E3C((uint64_t)&v47);
  sub_1B8B04FC8(v37);
  sub_1B8AE7BD4((uint64_t)v20, type metadata accessor for CUIKWeekRow);
  return sub_1B8AE7BD4((uint64_t)v18, type metadata accessor for CUIKWeekRow);
}

uint64_t CUIKMonthView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v2 = v1;
  v24 = a1;
  v3 = sub_1B8B9B90C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3F0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3F8);
  v23 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC400);
  MEMORY[0x1E0C80A78](v22);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AFD980(v2, (uint64_t)v9);
  sub_1B8B9B900();
  v15 = sub_1B8AFE1F8();
  sub_1B8B9BC9C();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1B8ADE894((uint64_t)v9, &qword_1EF1BC3F0);
  v25 = sub_1B8AF9D84(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
  v26 = v16;
  sub_1B8ADDBE4();
  v17 = sub_1B8B9BBAC();
  v19 = v18;
  LOBYTE(v4) = v20 & 1;
  v25 = v7;
  v26 = v15;
  swift_getOpaqueTypeConformance2();
  sub_1B8B9BC78();
  sub_1B8ADDA88(v17, v19, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  sub_1B8B9B534();
  return sub_1B8ADE894((uint64_t)v14, &qword_1EF1BC400);
}

uint64_t sub_1B8AFD980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9B054();
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC438);
  v33 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC668);
  MEMORY[0x1E0C80A78](v38);
  v9 = (uint64_t (**)(uint64_t))((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CUIKMonthView(0);
  v34 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v34 + 64);
  MEMORY[0x1E0C80A78](v10);
  v12 = sub_1B8B9B588();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v31 - v17;
  v19 = a1;
  sub_1B8B178BC((uint64_t)&v31 - v17);
  sub_1B8B9B57C();
  sub_1B8ADBDEC(&qword_1EF1B9240, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA030]);
  LOBYTE(a1) = sub_1B8B9C5A8();
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v20(v18, v12);
  if ((a1 & 1) != 0)
  {
    sub_1B8AE7B90(v19, (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CUIKMonthView);
    v21 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    v22 = swift_allocObject();
    sub_1B8AFE0FC((uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for CUIKMonthView);
    *v9 = sub_1B8B04ACC;
    v9[1] = (uint64_t (*)(uint64_t))v22;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC428);
    sub_1B8ADE950(&qword_1EF1BC420, &qword_1EF1BC428, MEMORY[0x1E0CD9310]);
    sub_1B8ADE950(&qword_1EF1BC430, &qword_1EF1BC438, MEMORY[0x1E0CDD910]);
    return sub_1B8B9B870();
  }
  else
  {
    v24 = v39;
    v41 = 0;
    v42 = 0xE000000000000000;
    sub_1B8B9C218();
    sub_1B8B9B09C();
    sub_1B8B9C3B0();
    v25 = v37;
    sub_1B8B9B048();
    swift_bridgeObjectRelease();
    v27 = v35;
    v26 = v36;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v25, 1, v36);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v31, v25, v26);
      MEMORY[0x1E0C80A78](v28);
      *(&v31 - 2) = (char *)v19;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC428);
      sub_1B8ADE950(&qword_1EF1BC420, &qword_1EF1BC428, MEMORY[0x1E0CD9310]);
      v29 = v32;
      sub_1B8B9BAF8();
      v30 = v33;
      (*(void (**)(uint64_t (**)(uint64_t), char *, uint64_t))(v33 + 16))(v9, v29, v24);
      swift_storeEnumTagMultiPayload();
      sub_1B8ADE950(&qword_1EF1BC430, &qword_1EF1BC438, MEMORY[0x1E0CDD910]);
      sub_1B8B9B870();
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v24);
    }
  }
  return result;
}

uint64_t sub_1B8AFDE34@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for CUIKMonthView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  sub_1B8AE7B90(a1, (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CUIKMonthView);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  result = sub_1B8AFE0FC((uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for CUIKMonthView);
  *a2 = sub_1B8B04ACC;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_1B8AFDEF8()
{
  return sub_1B8B9B69C();
}

uint64_t sub_1B8AFDF18()
{
  return sub_1B8B9B69C();
}

uint64_t sub_1B8AFDF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B8AFE058(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CDA978]);
}

uint64_t sub_1B8AFDF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B8AFE058(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CDA978]);
}

uint64_t sub_1B8AFDF70()
{
  return sub_1B8B9B618();
}

uint64_t sub_1B8AFDF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B8AFE058(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CDA000], MEMORY[0x1E0CDA6B8]);
}

uint64_t sub_1B8AFDFB8(uint64_t a1)
{
  return sub_1B8B04A64(a1, type metadata accessor for CUIKWeekLabelRow, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AF59B0);
}

uint64_t sub_1B8AFDFCC@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1B8AF654C(v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_1B8AFDFE0()
{
  unint64_t result;

  result = qword_1EF1B93E8;
  if (!qword_1EF1B93E8)
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE0550], MEMORY[0x1E0CE0588]);
    atomic_store(result, (unint64_t *)&qword_1EF1B93E8);
  }
  return result;
}

uint64_t type metadata accessor for CUIKWeekRow(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B8F78);
}

uint64_t sub_1B8AFE038()
{
  return sub_1B8B9B5DC();
}

uint64_t sub_1B8AFE058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1B8AFE0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B8AFE058(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD86F0], MEMORY[0x1E0CDA4F0]);
}

uint64_t sub_1B8AFE0FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B8AFE140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B8AFE15C(a1, type metadata accessor for CUIKWeekRow, &qword_1EF1B9060, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AF8824, a2);
}

uint64_t sub_1B8AFE15C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;

  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return sub_1B8AFAD14(a1, v5 + ((v10 + 16) & ~v10), a3, a4, a5);
}

uint64_t type metadata accessor for CUIKMonthView(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B8F18);
}

uint64_t sub_1B8AFE1D8()
{
  return sub_1B8B9B63C();
}

unint64_t sub_1B8AFE1F8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BC408;
  if (!qword_1EF1BC408)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC3F0);
    v2 = sub_1B8AFE25C();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDF698], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC408);
  }
  return result;
}

unint64_t sub_1B8AFE25C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC410;
  if (!qword_1EF1BC410)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC418);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC420, &qword_1EF1BC428, MEMORY[0x1E0CD9310]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BC430, &qword_1EF1BC438, MEMORY[0x1E0CDD910]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC410);
  }
  return result;
}

unint64_t sub_1B8AFE2FC()
{
  unint64_t result;

  result = qword_1EF1BC440;
  if (!qword_1EF1BC440)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for CUIKMonthDimmingMode, &type metadata for CUIKMonthDimmingMode);
    atomic_store(result, (unint64_t *)&qword_1EF1BC440);
  }
  return result;
}

uint64_t sub_1B8AFE340()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AFE350()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8AFE360()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CUIKMonthDimmingMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKMonthDimmingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B8AFE44C + 4 * byte_1B8BA789E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B8AFE480 + 4 * byte_1B8BA7899[v4]))();
}

uint64_t sub_1B8AFE480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AFE488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8AFE490);
  return result;
}

uint64_t sub_1B8AFE49C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8AFE4A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B8AFE4A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8AFE4B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CUIKMonthDimmingMode()
{
  return &type metadata for CUIKMonthDimmingMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for CUIKWeekLabelRow(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1B8B9B0F0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *v10 = *v11;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
    v12 = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 3) = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 4) = v12;
    *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
    v10[48] = v11[48];
    *(_WORD *)(v10 + 49) = *(_WORD *)(v11 + 49);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 72) = *(_OWORD *)(v11 + 72);
    v13 = *((_QWORD *)v11 + 12);
    *((_QWORD *)v10 + 11) = *((_QWORD *)v11 + 11);
    *((_QWORD *)v10 + 12) = v13;
    v10[104] = v11[104];
    v10[128] = v11[128];
    v14 = *((_QWORD *)v11 + 15);
    *((_QWORD *)v10 + 14) = *((_QWORD *)v11 + 14);
    *((_QWORD *)v10 + 15) = v14;
    v15 = (uint64_t *)((char *)a1 + v9);
    v16 = (uint64_t *)((char *)a2 + v9);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_1B8B9B288();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v19 = a3[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_1B8B9B588();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CUIKWeekLabelRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = a1 + *(int *)(a2 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v8 = sub_1B8B9B588();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for CUIKWeekLabelRow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 8);
  v11 = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  *(_WORD *)(v9 + 49) = *(_WORD *)(v10 + 49);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 96);
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(v10 + 88);
  *(_QWORD *)(v9 + 96) = v12;
  *(_BYTE *)(v9 + 104) = *(_BYTE *)(v10 + 104);
  *(_BYTE *)(v9 + 128) = *(_BYTE *)(v10 + 128);
  v13 = *(_QWORD *)(v10 + 120);
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 + 112);
  *(_QWORD *)(v9 + 120) = v13;
  v14 = (_QWORD *)(a1 + v8);
  v15 = (_QWORD *)(a2 + v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_1B8B9B288();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_1B8B9B588();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CUIKWeekLabelRow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + v7 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  *(_BYTE *)(v8 + 49) = *(_BYTE *)(v9 + 49);
  *(_BYTE *)(v8 + 50) = *(_BYTE *)(v9 + 50);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(v8 + 104) = *(_BYTE *)(v9 + 104);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(v9 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 128) = *(_BYTE *)(v9 + 128);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_1B8ADE894(a1 + v10, &qword_1EF1B9028);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_1B8B9B288();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v14 = a3[7];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    sub_1B8ADE894(a1 + v14, &qword_1EF1B9048);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_1B8B9B588();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CUIKWeekLabelRow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)(v9 + 128) = *(_BYTE *)(v10 + 128);
  v11 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v11;
  v12 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v12;
  v13 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v13;
  v14 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v14;
  v15 = (void *)(a1 + v8);
  v16 = (const void *)(a2 + v8);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = sub_1B8B9B288();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[7];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = sub_1B8B9B588();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for CUIKWeekLabelRow(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + v7 + 8);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + v7 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
  swift_release();
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  *(_BYTE *)(v8 + 49) = *(_BYTE *)(v9 + 49);
  *(_BYTE *)(v8 + 50) = *(_BYTE *)(v9 + 50);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  v10 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  swift_release();
  *(_BYTE *)(v8 + 104) = *(_BYTE *)(v9 + 104);
  v11 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v8 + 120) = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 128) = *(_BYTE *)(v9 + 128);
  if (a1 != a2)
  {
    v12 = a3[6];
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_1B8ADE894(a1 + v12, &qword_1EF1B9028);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = sub_1B8B9B288();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    v17 = a3[7];
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_1B8ADE894(a1 + v17, &qword_1EF1B9048);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = sub_1B8B9B588();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CUIKWeekLabelRow()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8AFEF9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[7];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 32);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKWeekLabelRow()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8AFF080(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B8B9B0F0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 32) = (a2 - 1);
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B8AFF154()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1B8B9B0F0();
  if (v0 <= 0x3F)
  {
    sub_1B8B021E0(319, (unint64_t *)&qword_1EF1B9030, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
    if (v1 <= 0x3F)
    {
      sub_1B8B021E0(319, &qword_1EF1B9050, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CUIKWeekRow(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1B8B9B0F0();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13((char *)a2 + v10, 1, v7))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = a3[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v7))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v17, (uint64_t *)v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v20 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    *v21 = *v22;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
    v23 = *((_QWORD *)v22 + 4);
    *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 4) = v23;
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    *((_WORD *)v21 + 24) = *((_WORD *)v22 + 24);
    v21[50] = v22[50];
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 72) = *(_OWORD *)(v22 + 72);
    v24 = *((_QWORD *)v22 + 12);
    *((_QWORD *)v21 + 11) = *((_QWORD *)v22 + 11);
    *((_QWORD *)v21 + 12) = v24;
    v21[104] = v22[104];
    v25 = *((_QWORD *)v22 + 15);
    *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
    *((_QWORD *)v21 + 15) = v25;
    v21[128] = v22[128];
    v26 = a3[9];
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (char *)a2 + v26;
    v29 = *(uint64_t *)((char *)a2 + v26);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      v30 = *((_QWORD *)v28 + 1);
      *v27 = v29;
      v27[1] = v30;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    v31 = a3[10];
    v32 = (uint64_t *)((char *)a1 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v34 = sub_1B8B9B288();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    }
    else
    {
      *v32 = *v33;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v35 = a3[11];
    v36 = (uint64_t *)((char *)a1 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v38 = sub_1B8B9B588();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    }
    else
    {
      *v36 = *v37;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v39 = a3[12];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v42 = sub_1B8B9B3FC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    }
    else
    {
      *v40 = *v41;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CUIKWeekRow(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4))
    v6(v7, v4);
  v9 = a1 + a2[6];
  if (!v8(v9, 1, v4))
    v6(v9, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[9]))
    swift_release();
  v10 = a1 + a2[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = a1 + a2[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = a1 + a2[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v15 = sub_1B8B9B3FC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
}

char *initializeWithCopy for CUIKWeekRow(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
  v21 = *((_QWORD *)v20 + 4);
  *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
  *((_QWORD *)v19 + 4) = v21;
  *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
  *((_WORD *)v19 + 24) = *((_WORD *)v20 + 24);
  v19[50] = v20[50];
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(v20 + 72);
  v22 = *((_QWORD *)v20 + 12);
  *((_QWORD *)v19 + 11) = *((_QWORD *)v20 + 11);
  *((_QWORD *)v19 + 12) = v22;
  v19[104] = v20[104];
  v23 = *((_QWORD *)v20 + 15);
  *((_QWORD *)v19 + 14) = *((_QWORD *)v20 + 14);
  *((_QWORD *)v19 + 15) = v23;
  v19[128] = v20[128];
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)&a2[v24];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    v28 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = v27;
    *((_QWORD *)v25 + 1) = v28;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = &a2[v29];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v32 = sub_1B8B9B288();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  }
  else
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v33 = a3[11];
  v34 = &a1[v33];
  v35 = &a2[v33];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v36 = sub_1B8B9B588();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v37 = a3[12];
  v38 = &a1[v37];
  v39 = &a2[v37];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v40 = sub_1B8B9B3FC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
  }
  else
  {
    *(_QWORD *)v38 = *(_QWORD *)v39;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for CUIKWeekRow(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v8(v17, v18, v6);
LABEL_13:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *v23 = a2[v22];
  *((_QWORD *)v23 + 1) = *(_QWORD *)&a2[v22 + 8];
  *((_QWORD *)v23 + 2) = *(_QWORD *)&a2[v22 + 16];
  *((_QWORD *)v23 + 3) = *(_QWORD *)&a2[v22 + 24];
  *((_QWORD *)v23 + 4) = *(_QWORD *)&a2[v22 + 32];
  swift_retain();
  swift_release();
  *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
  v23[48] = v24[48];
  v23[49] = v24[49];
  v23[50] = v24[50];
  *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
  *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
  *((_QWORD *)v23 + 9) = *((_QWORD *)v24 + 9);
  *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
  *((_QWORD *)v23 + 11) = *((_QWORD *)v24 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v23 + 12) = *((_QWORD *)v24 + 12);
  swift_retain();
  swift_release();
  v23[104] = v24[104];
  *((_QWORD *)v23 + 14) = *((_QWORD *)v24 + 14);
  *((_QWORD *)v23 + 15) = *((_QWORD *)v24 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[128] = v24[128];
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)&a1[v25];
  v29 = *(_QWORD *)&a2[v25];
  if (v28)
  {
    if (v29)
    {
      v30 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = v29;
      *((_QWORD *)v26 + 1) = v30;
      swift_retain();
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v29)
  {
    v31 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v31;
    swift_retain();
    goto LABEL_20;
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_20:
  if (a1 != a2)
  {
    v32 = a3[10];
    v33 = &a1[v32];
    v34 = &a2[v32];
    sub_1B8ADE894((uint64_t)&a1[v32], &qword_1EF1B9028);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v35 = sub_1B8B9B288();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    }
    else
    {
      *(_QWORD *)v33 = *(_QWORD *)v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v36 = a3[11];
    v37 = &a1[v36];
    v38 = &a2[v36];
    sub_1B8ADE894((uint64_t)&a1[v36], &qword_1EF1B9048);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v39 = sub_1B8B9B588();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    }
    else
    {
      *(_QWORD *)v37 = *(_QWORD *)v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v40 = a3[12];
    v41 = &a1[v40];
    v42 = &a2[v40];
    sub_1B8ADE894((uint64_t)&a1[v40], &qword_1EF1B9038);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v43 = sub_1B8B9B3FC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    }
    else
    {
      *(_QWORD *)v41 = *(_QWORD *)v42;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for CUIKWeekRow(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *((_OWORD *)v20 + 7);
  *((_OWORD *)v19 + 6) = *((_OWORD *)v20 + 6);
  *((_OWORD *)v19 + 7) = v21;
  v19[128] = v20[128];
  v22 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v22;
  v23 = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 4) = *((_OWORD *)v20 + 4);
  *((_OWORD *)v19 + 5) = v23;
  v24 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v24;
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v28 = *v27;
  if (*v27)
  {
    v29 = v27[1];
    *(_QWORD *)v26 = v28;
    *((_QWORD *)v26 + 1) = v29;
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  v30 = a3[10];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = sub_1B8B9B288();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  v35 = a3[11];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v39 = sub_1B8B9B588();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v36, v37, v39);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  v40 = a3[12];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v44 = sub_1B8B9B3FC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for CUIKWeekRow(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v8(v17, v18, v6);
LABEL_13:
  v22 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *v23 = a2[v22];
  *(_OWORD *)(v23 + 8) = *(_OWORD *)&a2[v22 + 8];
  *((_QWORD *)v23 + 3) = *(_QWORD *)&a2[v22 + 24];
  *((_QWORD *)v23 + 4) = *(_QWORD *)&a2[v22 + 32];
  swift_release();
  *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
  v23[48] = v24[48];
  v23[49] = v24[49];
  v23[50] = v24[50];
  *(_OWORD *)(v23 + 56) = *(_OWORD *)(v24 + 56);
  *((_QWORD *)v23 + 9) = *((_QWORD *)v24 + 9);
  v25 = *((_QWORD *)v24 + 11);
  *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
  *((_QWORD *)v23 + 11) = v25;
  swift_bridgeObjectRelease();
  *((_QWORD *)v23 + 12) = *((_QWORD *)v24 + 12);
  swift_release();
  v23[104] = v24[104];
  v26 = *((_QWORD *)v24 + 15);
  *((_QWORD *)v23 + 14) = *((_QWORD *)v24 + 14);
  *((_QWORD *)v23 + 15) = v26;
  swift_bridgeObjectRelease();
  v23[128] = v24[128];
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *(_QWORD *)&a1[v27];
  v31 = *(_QWORD *)&a2[v27];
  if (v30)
  {
    if (v31)
    {
      v32 = *((_QWORD *)v29 + 1);
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v32;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v31)
  {
    v33 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = v31;
    *((_QWORD *)v28 + 1) = v33;
    goto LABEL_20;
  }
  *(_OWORD *)v28 = *(_OWORD *)v29;
LABEL_20:
  if (a1 != a2)
  {
    v34 = a3[10];
    v35 = &a1[v34];
    v36 = &a2[v34];
    sub_1B8ADE894((uint64_t)&a1[v34], &qword_1EF1B9028);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v38 = sub_1B8B9B288();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    v39 = a3[11];
    v40 = &a1[v39];
    v41 = &a2[v39];
    sub_1B8ADE894((uint64_t)&a1[v39], &qword_1EF1B9048);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v43 = sub_1B8B9B588();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    v44 = a3[12];
    v45 = &a1[v44];
    v46 = &a2[v44];
    sub_1B8ADE894((uint64_t)&a1[v44], &qword_1EF1B9038);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v48 = sub_1B8B9B3FC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v45, v46, v48);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CUIKWeekRow()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B00778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_14:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
    v12 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v13 = a3[10];
    }
    else
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
      v12 = *(_QWORD *)(v17 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v17;
        v13 = a3[11];
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC458);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[12];
      }
    }
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(a1 + a3[8] + 32);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKWeekRow()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B008AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_1B8B9B0F0();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[8] + 32) = (a2 - 1);
        return result;
      }
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[10];
      }
      else
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[11];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC458);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[12];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B8B009D0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_1B8B9B0F0();
  if (v0 <= 0x3F)
  {
    sub_1B8B021E0(319, (unint64_t *)&qword_1ED1B2D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
    {
      sub_1B8B021E0(319, (unint64_t *)&qword_1EF1B9030, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
      if (v2 <= 0x3F)
      {
        sub_1B8B021E0(319, &qword_1EF1B9050, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
        if (v3 <= 0x3F)
        {
          sub_1B8B021E0(319, &qword_1EF1B9040, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CUIKMonthView(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    v7 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v7;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v8 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v8;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v9 = a2[18];
    v10 = a3[6];
    v41 = a1 + v10;
    v40 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v9;
    v11 = sub_1B8B9B0F0();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v41, v40, v11);
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))((uint64_t)a2 + v14, 1, v11))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v13((uint64_t)v15, (uint64_t)v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v19 = a3[8];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    if (*v21)
    {
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    v23 = a3[9];
    v24 = a3[10];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (_QWORD *)((char *)v4 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v30 = sub_1B8B9B288();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    }
    else
    {
      *v28 = *v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v31 = a3[11];
    v32 = (_QWORD *)((char *)v4 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v34 = sub_1B8B9B588();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    }
    else
    {
      *v32 = *v33;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v35 = a3[12];
    v36 = (_QWORD *)((char *)v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v38 = sub_1B8B9BA98();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    }
    else
    {
      *v36 = *v37;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t destroy for CUIKMonthView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1B8B9B0F0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + a2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  if (*(_QWORD *)(a1 + a2[8]))
    swift_release();
  swift_release();
  v9 = a1 + a2[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  v11 = a1 + a2[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  v13 = a1 + a2[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v14 = sub_1B8B9BA98();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for CUIKMonthView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  const void *v39;
  void *v40;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  v9 = a3[6];
  v39 = (const void *)(a2 + v9);
  v40 = (void *)(a1 + v9);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  v10 = sub_1B8B9B0F0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v40, v39, v10);
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  if (*v19)
  {
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  v21 = a3[9];
  v22 = a3[10];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)(a1 + v22);
  v27 = (_QWORD *)(a2 + v22);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28 = sub_1B8B9B288();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  }
  else
  {
    *v26 = *v27;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v29 = a3[11];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v32 = sub_1B8B9B588();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  }
  else
  {
    *v30 = *v31;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v33 = a3[12];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v36 = sub_1B8B9BA98();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  }
  else
  {
    *v34 = *v35;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CUIKMonthView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1B8B9B0F0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15((const void *)(a1 + v12), 1, v9);
  v17 = v15(v14, 1, v9);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v13, v14, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v11(v13, v14, v9);
LABEL_7:
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19);
  v23 = *(_QWORD *)(a2 + v19);
  if (v22)
  {
    if (v23)
    {
      v24 = *(_QWORD *)(v21 + 8);
      *v20 = v23;
      v20[1] = v24;
      swift_retain();
      swift_release();
      goto LABEL_14;
    }
    swift_release();
  }
  else if (v23)
  {
    v25 = *(_QWORD *)(v21 + 8);
    *v20 = v23;
    v20[1] = v25;
    swift_retain();
    goto LABEL_14;
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
LABEL_14:
  v26 = a3[9];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v29 = a3[10];
    v30 = (_QWORD *)(a1 + v29);
    v31 = (_QWORD *)(a2 + v29);
    sub_1B8ADE894(a1 + v29, &qword_1EF1B9028);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v32 = sub_1B8B9B288();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    }
    else
    {
      *v30 = *v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v33 = a3[11];
    v34 = (_QWORD *)(a1 + v33);
    v35 = (_QWORD *)(a2 + v33);
    sub_1B8ADE894(a1 + v33, &qword_1EF1B9048);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v36 = sub_1B8B9B588();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    }
    else
    {
      *v34 = *v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v37 = a3[12];
    v38 = (_QWORD *)(a1 + v37);
    v39 = (_QWORD *)(a2 + v37);
    sub_1B8ADE894(a1 + v37, &qword_1EF1BC3E8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v40 = sub_1B8B9BA98();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    }
    else
    {
      *v38 = *v39;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CUIKMonthView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *, const void *, uint64_t);
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = a3[6];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v13 = sub_1B8B9B0F0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(void *, const void *, uint64_t))(v14 + 32);
  v15(v11, v12, v13);
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a2 + v16, 1, v13))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v15(v17, v18, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  if (*v22)
  {
    v24 = v22[1];
    *v21 = v23;
    v21[1] = v24;
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  v25 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = sub_1B8B9B288();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[11];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = sub_1B8B9B588();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  v35 = a3[12];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v39 = sub_1B8B9BA98();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v36, v37, v39);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for CUIKMonthView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t (*v18)(const void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_1B8B9B0F0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  v19 = v18((const void *)(a1 + v15), 1, v12);
  v20 = v18(v17, 1, v12);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v14(v16, v17, v12);
LABEL_7:
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *(_QWORD *)(a2 + v22);
  if (v25)
  {
    if (v26)
    {
      v27 = *(_QWORD *)(v24 + 8);
      *v23 = v26;
      v23[1] = v27;
      swift_release();
      goto LABEL_14;
    }
    swift_release();
  }
  else if (v26)
  {
    v28 = *(_QWORD *)(v24 + 8);
    *v23 = v26;
    v23[1] = v28;
    goto LABEL_14;
  }
  *(_OWORD *)v23 = *(_OWORD *)v24;
LABEL_14:
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_release();
  if (a1 != a2)
  {
    v32 = a3[10];
    v33 = (void *)(a1 + v32);
    v34 = (const void *)(a2 + v32);
    sub_1B8ADE894(a1 + v32, &qword_1EF1B9028);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v36 = sub_1B8B9B288();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v37 = a3[11];
    v38 = (void *)(a1 + v37);
    v39 = (const void *)(a2 + v37);
    sub_1B8ADE894(a1 + v37, &qword_1EF1B9048);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v41 = sub_1B8B9B588();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    v42 = a3[12];
    v43 = (void *)(a1 + v42);
    v44 = (const void *)(a2 + v42);
    sub_1B8ADE894(a1 + v42, &qword_1EF1BC3E8);
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v46 = sub_1B8B9BA98();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CUIKMonthView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B01E48(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1B8B9B0F0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[10];
        }
        else
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[11];
          }
          else
          {
            v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC460);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a3[12];
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CUIKMonthView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B01F70(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = sub_1B8B9B0F0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC448);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[10];
        }
        else
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC450);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[11];
          }
          else
          {
            v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC460);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a4[12];
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1B8B02088()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_1B8B9B0F0();
  if (v0 <= 0x3F)
  {
    sub_1B8B021E0(319, (unint64_t *)&qword_1ED1B2D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
    {
      sub_1B8B021E0(319, (unint64_t *)&qword_1EF1B9030, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
      if (v2 <= 0x3F)
      {
        sub_1B8B021E0(319, &qword_1EF1B9050, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA000], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
        if (v3 <= 0x3F)
        {
          sub_1B8B021E0(319, &qword_1EF1BC468, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_1B8B021E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t destroy for CUIKMonthView.Styling()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CUIKMonthView.Styling(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CUIKMonthView.Styling(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for CUIKMonthView.Styling(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for CUIKMonthView.Styling(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKMonthView.Styling(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIKMonthView.Styling()
{
  return &type metadata for CUIKMonthView.Styling;
}

unint64_t sub_1B8B025C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B90D8;
  if (!qword_1EF1B90D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B90E0);
    v2[0] = sub_1B8ADE950(&qword_1EF1B9070, &qword_1EF1B9078, MEMORY[0x1E0CD9310]);
    v2[1] = MEMORY[0x1E0CD8D78];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B90D8);
  }
  return result;
}

uint64_t sub_1B8B0264C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  sub_1B8B9B5A0();
  v3 = sub_1B8B9B540();
  v12[0] = v1;
  v12[1] = MEMORY[0x1E0CDA1B8];
  v4 = MEMORY[0x1E0CD9C18];
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v3, v12);
  v5 = sub_1B8B9B5B8();
  v6 = sub_1B8B9B540();
  v11[0] = sub_1B8AFDFE0();
  v11[1] = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDA288], v5);
  MEMORY[0x1BCCB79D0](v4, v6, v11);
  v7 = sub_1B8B9B8C4();
  v8 = sub_1B8B9B540();
  v10[0] = v2;
  v10[1] = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDBC28], v7);
  return MEMORY[0x1BCCB79D0](v4, v8, v10);
}

unint64_t sub_1B8B0276C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B90E8;
  if (!qword_1EF1B90E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B90F0);
    v2[0] = sub_1B8ADE950(&qword_1EF1B9080, &qword_1EF1B9088, MEMORY[0x1E0CD9310]);
    v2[1] = MEMORY[0x1E0CD8D78];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B90E8);
  }
  return result;
}

unint64_t sub_1B8B027F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1EF1BC470;
  if (!qword_1EF1BC470)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC400);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC3F0);
    v2[3] = sub_1B8AFE1F8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_1B8ADBDEC(&qword_1EF1B9380, MEMORY[0x1E0CDCFC8], MEMORY[0x1E0CDCFC0]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC470);
  }
  return result;
}

uint64_t *sub_1B8B028A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
      *(_WORD *)((char *)a1 + 13) = *(_WORD *)((char *)a2 + 13);
      v10 = *(int *)(v7 + 160);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_1B8B9B0F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1B8B029A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = a1 + *(int *)(v2 + 160);
    v5 = sub_1B8B9B0F0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

_QWORD *sub_1B8B02A18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
    *(_WORD *)((char *)a1 + 13) = *(_WORD *)((char *)a2 + 13);
    v8 = *(int *)(v6 + 160);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B8B9B0F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

_BYTE *sub_1B8B02AF8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      a1[11] = a2[11];
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      v16 = *(int *)(v6 + 160);
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_1B8B9B0F0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
      return a1;
    }
    sub_1B8ADE894((uint64_t)a1, &qword_1EF1BAD50);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  v11 = *(int *)(v6 + 160);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_1B8B9B0F0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

_QWORD *sub_1B8B02C9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_BYTE *)a1 + 12) = *((_BYTE *)a2 + 12);
    *(_WORD *)((char *)a1 + 13) = *(_WORD *)((char *)a2 + 13);
    v8 = *(int *)(v6 + 160);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B8B9B0F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1B8B02D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
      *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
      *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
      *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
      *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
      *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
      v16 = *(int *)(v6 + 160);
      v17 = a1 + v16;
      v18 = a2 + v16;
      v19 = sub_1B8B9B0F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
      return a1;
    }
    sub_1B8ADE894(a1, &qword_1EF1BAD50);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  v11 = *(int *)(v6 + 160);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1B8B02F00()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B02F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_1B8B02F5C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B02F68(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1B8B02FBC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_1B8B02FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata accessor for WeekDayViewModel(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B9000);
}

uint64_t sub_1B8B03050()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B8B9B0F0();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t destroy for WeekLabelData()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for WeekLabelData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for WeekLabelData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for WeekLabelData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for WeekLabelData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WeekLabelData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeekLabelData()
{
  return &type metadata for WeekLabelData;
}

uint64_t *sub_1B8B032AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B8B9B720();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B8B0336C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1B8B9B720();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B8B033CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1B8B03464(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1B8B0350C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1B8B03584(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B03614()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B03620(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1B8B9B720();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1B8B0369C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B8B036A8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1B8B9B720();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AltCalendarDateStyleModifier(uint64_t a1)
{
  return sub_1B8AE85C4(a1, qword_1EF1BC4D0);
}

uint64_t sub_1B8B03730()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B8B9B720();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B8B037B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B8B9B720();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B8B03888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1B8B9B720();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B8B038F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B8B9B720();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1B8B03998(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1B8B03A58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_1B8B03AD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B8B9B720();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B03B70()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B03B7C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1B8B9B720();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1B8B03BF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B8B03C04(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1B8B9B720();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MonthTextStyleModifier(uint64_t a1)
{
  return sub_1B8AE85C4(a1, qword_1EF1BC568);
}

uint64_t sub_1B8B03C8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B8B9B720();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B8B03D0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B03D1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B03D2C()
{
  return MEMORY[0x1E0DEB428];
}

uint64_t sub_1B8B03D38()
{
  return sub_1B8ADBDEC(&qword_1EF1B8FF8, type metadata accessor for WeekDayViewModel, (uint64_t)&unk_1B8BA7CE0);
}

unint64_t sub_1B8B03D64()
{
  unint64_t result;

  result = qword_1EF1B8FA8;
  if (!qword_1EF1B8FA8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA80E4, &type metadata for WeekDayViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FA8);
  }
  return result;
}

unint64_t sub_1B8B03DA8()
{
  unint64_t result;

  result = qword_1EF1B8FD8;
  if (!qword_1EF1B8FD8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA8094, &type metadata for WeekDayViewModel.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FD8);
  }
  return result;
}

unint64_t sub_1B8B03DEC()
{
  unint64_t result;

  result = qword_1EF1B8FC0;
  if (!qword_1EF1B8FC0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA8044, &type metadata for WeekDayViewModel.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FC0);
  }
  return result;
}

uint64_t sub_1B8B03E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1B8B9B6C0();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1B8B03E60()
{
  return sub_1B8B9B6CC();
}

uint64_t sub_1B8B03E8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B8B9B600();
  *a1 = result;
  return result;
}

uint64_t sub_1B8B03EB4()
{
  swift_retain();
  return sub_1B8B9B60C();
}

uint64_t sub_1B8B03EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v39;
  _BYTE *v40;
  void (*v41)(_BYTE *, uint64_t);
  _BYTE *v42;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t);
  _BYTE v48[12];
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;

  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v48[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v48[-v9];
  v11 = type metadata accessor for WeekDayViewModel(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v48[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9010);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = &v48[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_1B8AE7B90(a1, (uint64_t)v17, type metadata accessor for WeekDayViewModel);
  sub_1B8AE7B90(a2, v18, type metadata accessor for WeekDayViewModel);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (v20((uint64_t)v17, 1, v19) != 1)
  {
    v64 = v4;
    v65 = v5;
    v62 = v8;
    v63 = v10;
    sub_1B8AE7B90((uint64_t)v17, (uint64_t)v13, type metadata accessor for WeekDayViewModel);
    v22 = v13[8];
    v60 = v13[9];
    v61 = v22;
    v23 = v13[10];
    v58 = v13[11];
    v59 = v23;
    v24 = v13[12];
    v25 = v13[13];
    v26 = v13[14];
    v27 = *(int *)(v19 + 160);
    v28 = &v13[v27];
    if (v20(v18, 1, v19) != 1)
    {
      v50 = v25;
      v51 = v24;
      v49 = v26;
      v29 = *(_QWORD *)v13;
      v30 = *(_QWORD *)v18;
      v31 = *(unsigned __int8 *)(v18 + 8);
      v56 = *(unsigned __int8 *)(v18 + 9);
      v57 = v31;
      v32 = *(unsigned __int8 *)(v18 + 10);
      v54 = *(unsigned __int8 *)(v18 + 11);
      v55 = v32;
      v33 = *(unsigned __int8 *)(v18 + 12);
      v52 = *(unsigned __int8 *)(v18 + 13);
      v53 = v33;
      v34 = *(unsigned __int8 *)(v18 + 14);
      v35 = (_BYTE *)(v18 + v27);
      v37 = v64;
      v36 = v65;
      v38 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 32);
      v39 = v63;
      v38(v63, v28, v64);
      v40 = v62;
      v38(v62, v35, v37);
      if (v29 == v30)
      {
        if (v61 == v57 && v60 == v56 && v59 == v55 && v58 == v54 && v51 == v53 && v50 == v52)
        {
          v44 = v65;
          if (v49 == v34)
          {
            v45 = v63;
            v46 = v37;
            v21 = sub_1B8B9B0CC();
            v47 = *(void (**)(_BYTE *, uint64_t))(v44 + 8);
            v47(v40, v46);
            v47(v45, v46);
            sub_1B8AE7BD4((uint64_t)v17, type metadata accessor for WeekDayViewModel);
            return v21 & 1;
          }
        }
        v41 = *(void (**)(_BYTE *, uint64_t))(v65 + 8);
        v41(v40, v37);
        v42 = v63;
      }
      else
      {
        v41 = *(void (**)(_BYTE *, uint64_t))(v36 + 8);
        v41(v40, v37);
        v42 = v39;
      }
      v41(v42, v37);
      sub_1B8AE7BD4((uint64_t)v17, type metadata accessor for WeekDayViewModel);
      goto LABEL_17;
    }
    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(&v13[v27], v64);
LABEL_6:
    sub_1B8ADE894((uint64_t)v17, &qword_1EF1B9010);
LABEL_17:
    v21 = 0;
    return v21 & 1;
  }
  if (v20(v18, 1, v19) != 1)
    goto LABEL_6;
  sub_1B8AE7BD4((uint64_t)v17, type metadata accessor for WeekDayViewModel);
  v21 = 1;
  return v21 & 1;
}

uint64_t sub_1B8B0427C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1B8B9B6C0();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1B8B042AC()
{
  return sub_1B8B9B6CC();
}

unint64_t sub_1B8B042D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC5D8;
  if (!qword_1EF1BC5D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC5B8);
    v2[0] = sub_1B8B0435C();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC5D8);
  }
  return result;
}

unint64_t sub_1B8B0435C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC5E0;
  if (!qword_1EF1BC5E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC5B0);
    v2[0] = sub_1B8B043E0();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9320, &qword_1EF1B9328, MEMORY[0x1E0CDC720]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC5E0);
  }
  return result;
}

unint64_t sub_1B8B043E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC5E8;
  if (!qword_1EF1BC5E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC5A8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC5F0, &qword_1EF1BC5D0, MEMORY[0x1E0CDBF18]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9350, &qword_1EF1B9358, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC5E8);
  }
  return result;
}

uint64_t sub_1B8B0447C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B8B9B600();
  *a1 = result;
  return result;
}

uint64_t sub_1B8B044A4()
{
  swift_retain();
  return sub_1B8B9B60C();
}

unint64_t sub_1B8B044CC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC638;
  if (!qword_1EF1BC638)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC610);
    v2[0] = sub_1B8B04550();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC638);
  }
  return result;
}

unint64_t sub_1B8B04550()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC640;
  if (!qword_1EF1BC640)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC608);
    v2[0] = sub_1B8B045D4();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9350, &qword_1EF1B9358, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC640);
  }
  return result;
}

unint64_t sub_1B8B045D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC648;
  if (!qword_1EF1BC648)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC600);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC650, &qword_1EF1BC630, MEMORY[0x1E0CDBF18]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9360, &qword_1EF1B9368, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC648);
  }
  return result;
}

unint64_t sub_1B8B04670()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC658;
  if (!qword_1EF1BC658)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC628);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC660, &qword_1EF1BC620, MEMORY[0x1E0CDFB38]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9310, &qword_1EF1B9318, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC658);
  }
  return result;
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for CUIKWeekRow(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v7 = v3 + v1[5];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4))
    v6(v7, v4);
  v9 = v3 + v1[6];
  if (!v8(v9, 1, v4))
    v6(v9, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + v1[9]))
    swift_release();
  v10 = v3 + v1[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = v3 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v3 + v1[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_1B8B9B3FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for CUIKWeekLabelRow(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_1B8B9B0F0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  v7 = v3 + *(int *)(v1 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1B8B04A64(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_1B8B04AC0@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;

  return sub_1B8AFDE34(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1B8B04ACC(uint64_t a1)
{
  return sub_1B8B04A64(a1, type metadata accessor for CUIKMonthView, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AFC888);
}

uint64_t objectdestroy_50Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for CUIKMonthView(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + v1[6];
  v5 = sub_1B8B9B0F0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = v3 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  if (*(_QWORD *)(v3 + v1[8]))
    swift_release();
  swift_release();
  v9 = v3 + v1[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  v11 = v3 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  v13 = v3 + v1[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_1B8B9BA98();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1B8B04CE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CUIKMonthView(0) - 8) + 80);
  return sub_1B8AFD398(a1, (__int128 *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1B8B04D2C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1B9468;
  if (!qword_1EF1B9468)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9460);
    v2 = sub_1B8B04D98();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEB8B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1B9468);
  }
  return result;
}

unint64_t sub_1B8B04D98()
{
  unint64_t result;

  result = qword_1EF1B9428;
  if (!qword_1EF1B9428)
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF1B9428);
  }
  return result;
}

uint64_t sub_1B8B04DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B8AFE15C(a1, type metadata accessor for CUIKMonthView, &qword_1EF1BC6C0, (uint64_t (*)(uint64_t, uint64_t))sub_1B8AFAD78, a2);
}

uint64_t sub_1B8B04E00()
{
  type metadata accessor for CUIKMonthView(0);
  return sub_1B8AFD32C();
}

uint64_t sub_1B8B04E3C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_OWORD *sub_1B8B04E90(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1B8B04EA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BC710;
  if (!qword_1EF1BC710)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC6E0);
    v2 = MEMORY[0x1E0CDFB08];
    v3[0] = sub_1B8ADE950(&qword_1EF1BC718, &qword_1EF1BC6D8, MEMORY[0x1E0CDFB08]);
    v3[1] = sub_1B8ADE950(&qword_1EF1BC720, &qword_1EF1BC6C8, v2);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BC710);
  }
  return result;
}

unint64_t sub_1B8B04F44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BC728;
  if (!qword_1EF1BC728)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC708);
    v2 = sub_1B8ADBDEC(&qword_1EF1BC730, type metadata accessor for MonthTextStyleModifier, (uint64_t)&unk_1B8BA7C08);
    v3[0] = MEMORY[0x1E0CDDD50];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BC728);
  }
  return result;
}

uint64_t sub_1B8B04FC8(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1B8B04FDC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t);
  unint64_t v9;
  unsigned int (*v10)(unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for CUIKWeekRow(0);
  v2 = *((_QWORD *)v1 - 1);
  v19 = *(_QWORD *)(v2 + 64);
  v20 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v21 = sub_1B8B9B4BC();
  v3 = *(_QWORD *)(v21 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = v0 + v20;
  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
  v8(v0 + v20, v6);
  v9 = v0 + v20 + v1[5];
  v10 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v10(v9, 1, v6))
    v8(v9, v6);
  v11 = v5 + v1[6];
  if (!v10(v11, 1, v6))
    v8(v11, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + v1[9]))
    swift_release();
  v12 = v5 + v1[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v5 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  v16 = v5 + v1[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_1B8B9B3FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + ((v20 + v19 + v4) & ~v4), v21);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B8B05250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(type metadata accessor for CUIKWeekRow(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_1B8B9B4BC() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_1B8AF8C00(a1, v2 + v6, v2 + v9, *(_QWORD *)(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t sub_1B8B052DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B90B8;
  if (!qword_1EF1B90B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B90C0);
    v2[0] = sub_1B8B0538C(&qword_1EF1B92F8, &qword_1EF1B9300, sub_1B8B05368, sub_1B8B05720);
    v2[1] = MEMORY[0x1E0CD8D78];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B90B8);
  }
  return result;
}

uint64_t sub_1B8B05368()
{
  return sub_1B8B0538C(&qword_1EF1B92C8, &qword_1EF1B92D0, (uint64_t (*)(void))sub_1B8B053FC, (uint64_t (*)(void))sub_1B8B05614);
}

uint64_t sub_1B8B0538C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B053FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B9208;
  if (!qword_1EF1B9208)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9210);
    v2[0] = sub_1B8B05480();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9270, &qword_1EF1B9278, MEMORY[0x1E0CDB840]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B9208);
  }
  return result;
}

unint64_t sub_1B8B05480()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B91E8;
  if (!qword_1EF1B91E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B91F0);
    v2[0] = sub_1B8B05504();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9330, &qword_1EF1B9338, MEMORY[0x1E0CDC720]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B91E8);
  }
  return result;
}

unint64_t sub_1B8B05504()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B91C0;
  if (!qword_1EF1B91C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B91C8);
    v2[0] = sub_1B8B05588();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B91C0);
  }
  return result;
}

unint64_t sub_1B8B05588()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B9180;
  if (!qword_1EF1B9180)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9188);
    v2[0] = sub_1B8B05F84(&qword_1EF1B9118, &qword_1EF1B9120, &qword_1EF1B9350, &qword_1EF1B9358);
    v2[1] = MEMORY[0x1E0CD9730];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B9180);
  }
  return result;
}

unint64_t sub_1B8B05614()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B91A0;
  if (!qword_1EF1B91A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B91A8);
    v2[0] = sub_1B8B056B8(&qword_1EF1B9160, &qword_1EF1B9168, (uint64_t (*)(void))sub_1B8AFDFE0, MEMORY[0x1E0CD8D78]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9260, &qword_1EF1B9268, MEMORY[0x1E0CDB840]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B91A0);
  }
  return result;
}

uint64_t sub_1B8B056B8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8B05720()
{
  return sub_1B8B0538C(&qword_1EF1B92D8, &qword_1EF1B92E0, (uint64_t (*)(void))sub_1B8B05744, (uint64_t (*)(void))sub_1B8B05480);
}

unint64_t sub_1B8B05744()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B9218;
  if (!qword_1EF1B9218)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9220);
    v2[0] = sub_1B8B05480();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9248, &qword_1EF1B9250, MEMORY[0x1E0CDA288]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B9218);
  }
  return result;
}

uint64_t sub_1B8B057C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int (*v10)(unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v23)(unint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CUIKWeekRow(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeekDayViewModel(0) - 8) + 80);
  v6 = v0 + v3;
  v7 = sub_1B8B9B0F0();
  v8 = *(_QWORD *)(v7 - 8);
  v23 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v23(v0 + v3, v7);
  v9 = v0 + v3 + v1[5];
  v10 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v10(v9, 1, v7))
    v23(v9, v7);
  v11 = v6 + v1[6];
  if (!v10(v11, 1, v7))
    v23(v11, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + v1[9]))
    swift_release();
  v12 = v4 + v5;
  v13 = v6 + v1[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_1B8B9B288();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  v15 = v3 + v12;
  v16 = v6 + v1[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_1B8B9B588();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release();
  }
  v18 = v15 & ~v5;
  v19 = v6 + v1[12];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9038);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_1B8B9B3FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  }
  else
  {
    swift_release();
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BAD50);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v0 + v18, 1, v21))
    v23(v0 + v18 + *(int *)(v21 + 160), v7);
  return swift_deallocObject();
}

uint64_t sub_1B8B05A58()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for CUIKWeekRow(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeekDayViewModel(0) - 8) + 80);
  return sub_1B8AF8E90(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1B8B05AB8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t sub_1B8B05AC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B90C8;
  if (!qword_1EF1B90C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B90D0);
    v2[0] = sub_1B8ADE950(&qword_1EF1B9018, &qword_1EF1B9020, MEMORY[0x1E0CD8670]);
    v2[1] = MEMORY[0x1E0CD8D78];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B90C8);
  }
  return result;
}

uint64_t sub_1B8B05B4C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B05B9C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1B8B05BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeekDayViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B05C18@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1B8AF6710(*(void (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1B8B05C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for CUIKWeekLabelRow(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v13 = *(_QWORD *)(v2 + 64);
  v4 = sub_1B8B9B4BC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = sub_1B8B9B0F0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v8 = v0 + v3 + *(int *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9028);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1B8B9B288();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  v10 = v0 + v3 + *(int *)(v1 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9048);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1B8B9B588();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v13 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t sub_1B8B05DC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for CUIKWeekLabelRow(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_1B8B9B4BC() - 8) + 80);
  return sub_1B8AF5BC0(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_1B8B05E3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B91F8;
  if (!qword_1EF1B91F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9200);
    v2[0] = sub_1B8B056B8(&qword_1EF1B91D0, &qword_1EF1B91D8, (uint64_t (*)(void))sub_1B8B05EE0, MEMORY[0x1E0CD9730]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B91F8);
  }
  return result;
}

unint64_t sub_1B8B05EE0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1B9190;
  if (!qword_1EF1B9190)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1B9198);
    v2[0] = sub_1B8B05F84(&qword_1EF1B9128, &qword_1EF1B9130, &qword_1EF1B9360, &qword_1EF1B9368);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9350, &qword_1EF1B9358, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1B9190);
  }
  return result;
}

uint64_t sub_1B8B05F84(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[4];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[2] = MEMORY[0x1E0CDDD70];
    v9[3] = MEMORY[0x1E0CDDD50];
    v9[0] = swift_getOpaqueTypeConformance2();
    v9[1] = sub_1B8ADE950(a3, a4, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B06030()
{
  unint64_t result;

  result = qword_1EF1B8F90;
  if (!qword_1EF1B8F90)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7CA8, &type metadata for WeekLabelData);
    atomic_store(result, (unint64_t *)&qword_1EF1B8F90);
  }
  return result;
}

uint64_t sub_1B8B06074(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B8B060B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6564646948 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6269736956 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B8B061A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F706D6F43796164 && a2 == 0xEC000000746E656ELL;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6565576E69 && a2 == 0xE900000000000064 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7961646F547369 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7463656C65537369 && a2 == 0xEA00000000006465 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x686563616C507369 && a2 == 0xED00007265646C6FLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB7220 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB7240 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x747865546D6964 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t storeEnumTagSinglePayload for WeekDayViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B8B065CC + 4 * byte_1B8BA78A8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B8B06600 + 4 * byte_1B8BA78A3[v4]))();
}

uint64_t sub_1B8B06600(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B06608(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B06610);
  return result;
}

uint64_t sub_1B8B0661C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B06624);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B8B06628(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B06630(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeekDayViewModel.CodingKeys()
{
  return &type metadata for WeekDayViewModel.CodingKeys;
}

ValueMetadata *type metadata accessor for WeekDayViewModel.HiddenCodingKeys()
{
  return &type metadata for WeekDayViewModel.HiddenCodingKeys;
}

uint64_t getEnumTagSinglePayload for WeekDayViewModel.VisibleCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WeekDayViewModel.VisibleCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B8B06738 + 4 * byte_1B8BA78B2[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B8B0676C + 4 * byte_1B8BA78AD[v4]))();
}

uint64_t sub_1B8B0676C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B06774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B0677CLL);
  return result;
}

uint64_t sub_1B8B06788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B06790);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B8B06794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B0679C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeekDayViewModel.VisibleCodingKeys()
{
  return &type metadata for WeekDayViewModel.VisibleCodingKeys;
}

unint64_t sub_1B8B067BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC790;
  if (!qword_1EF1BC790)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC5F8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC798, &qword_1EF1BC5C8, MEMORY[0x1E0CDFB38]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9310, &qword_1EF1B9318, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC790);
  }
  return result;
}

uint64_t sub_1B8B06858()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC628);
  sub_1B8B04670();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B8B068A8()
{
  unint64_t result;

  result = qword_1EF1BC7A0;
  if (!qword_1EF1BC7A0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7F14, &type metadata for WeekDayViewModel.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC7A0);
  }
  return result;
}

unint64_t sub_1B8B068F0()
{
  unint64_t result;

  result = qword_1EF1BC7A8;
  if (!qword_1EF1BC7A8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA801C, &type metadata for WeekDayViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BC7A8);
  }
  return result;
}

unint64_t sub_1B8B06938()
{
  unint64_t result;

  result = qword_1EF1B8FD0;
  if (!qword_1EF1B8FD0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7F3C, &type metadata for WeekDayViewModel.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FD0);
  }
  return result;
}

unint64_t sub_1B8B06980()
{
  unint64_t result;

  result = qword_1EF1B8FC8;
  if (!qword_1EF1B8FC8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7F64, &type metadata for WeekDayViewModel.HiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FC8);
  }
  return result;
}

unint64_t sub_1B8B069C8()
{
  unint64_t result;

  result = qword_1EF1B8FE8;
  if (!qword_1EF1B8FE8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7E84, &type metadata for WeekDayViewModel.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FE8);
  }
  return result;
}

unint64_t sub_1B8B06A10()
{
  unint64_t result;

  result = qword_1EF1B8FE0;
  if (!qword_1EF1B8FE0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7EAC, &type metadata for WeekDayViewModel.VisibleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FE0);
  }
  return result;
}

unint64_t sub_1B8B06A58()
{
  unint64_t result;

  result = qword_1EF1B8FB8;
  if (!qword_1EF1B8FB8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7F8C, &type metadata for WeekDayViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FB8);
  }
  return result;
}

unint64_t sub_1B8B06AA0()
{
  unint64_t result;

  result = qword_1EF1B8FB0;
  if (!qword_1EF1B8FB0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA7FB4, &type metadata for WeekDayViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1B8FB0);
  }
  return result;
}

void sub_1B8B06AF4(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC830);
  MEMORY[0x1BCCB60C8](&v16, v3);
  if (v16 == 1)
  {
    sub_1B8B0746C();
    v14 = *v1;
    v15 = *((_QWORD *)v1 + 2);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC840);
    MEMORY[0x1BCCB60C8](&v16, v4);
    v5 = (void *)sub_1B8B9C4B8();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC848);
    sub_1B8B9B99C();
    v6 = (void *)v14;
    v7 = objc_msgSend(a1, sel_view);
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
      objc_msgSend(v9, sel_setSelectedColor_, v5);
      objc_msgSend(v9, sel_setSupportsAlpha_, 0);
      objc_msgSend(v9, sel_setDelegate_, (_QWORD)v14);
      objc_msgSend(v9, sel_setModalPresentationStyle_, 7);
      v10 = objc_msgSend(v9, sel_popoverPresentationController);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_setSourceView_, v8);

      }
      v12 = objc_msgSend(v9, sel_popoverPresentationController, v14, v15);
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, sel_setPermittedArrowDirections_, 12);

      }
      objc_msgSend(a1, sel_presentViewController_animated_completion_, v9, 1, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1B8B06E54()
{
  return sub_1B8B07144(type metadata accessor for ColorPickerView.ColorPickerCoordinator);
}

uint64_t type metadata accessor for ColorPickerView.ColorPickerCoordinator()
{
  return objc_opt_self();
}

id sub_1B8B06ED8()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ColorPickerViewController()), sel_init);
}

id sub_1B8B06F04@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id result;
  objc_super v13;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = *((_BYTE *)v1 + 40);
  v9 = (objc_class *)type metadata accessor for ColorPickerView.ColorPickerCoordinator();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtCV13CalendarUIKit15ColorPickerView22ColorPickerCoordinator_colorPickerView];
  *(_QWORD *)v11 = v3;
  *((_QWORD *)v11 + 1) = v4;
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = v6;
  *((_QWORD *)v11 + 4) = v7;
  v11[40] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  result = objc_msgSendSuper2(&v13, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_1B8B06FBC()
{
  return sub_1B8B9B948();
}

uint64_t sub_1B8B06FF4()
{
  sub_1B8B074A8();
  return sub_1B8B9B984();
}

uint64_t sub_1B8B07044()
{
  sub_1B8B074A8();
  return sub_1B8B9B954();
}

void sub_1B8B07094()
{
  sub_1B8B074A8();
  sub_1B8B9B978();
  __break(1u);
}

id sub_1B8B07138()
{
  return sub_1B8B07144(type metadata accessor for ColorPickerViewController);
}

id sub_1B8B07144(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ColorPickerViewController()
{
  return objc_opt_self();
}

uint64_t destroy for ColorPickerView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ColorPickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ColorPickerView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ColorPickerView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorPickerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorPickerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorPickerView()
{
  return &type metadata for ColorPickerView;
}

uint64_t sub_1B8B07418()
{
  return MEMORY[0x1E0CE0780];
}

unint64_t sub_1B8B07428()
{
  unint64_t result;

  result = qword_1EF1BC828;
  if (!qword_1EF1BC828)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA818C, &type metadata for ColorPickerView);
    atomic_store(result, (unint64_t *)&qword_1EF1BC828);
  }
  return result;
}

unint64_t sub_1B8B0746C()
{
  unint64_t result;

  result = qword_1EF1BC838;
  if (!qword_1EF1BC838)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1BC838);
  }
  return result;
}

unint64_t sub_1B8B074A8()
{
  unint64_t result;

  result = qword_1EF1BC850;
  if (!qword_1EF1BC850)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA81DC, &type metadata for ColorPickerView);
    atomic_store(result, (unint64_t *)&qword_1EF1BC850);
  }
  return result;
}

uint64_t sub_1B8B074EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;

  v40 = a6;
  v38 = a4;
  v39 = a5;
  v33 = a1;
  v12 = sub_1B8B9B0F0();
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v35 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v34 = (char *)&v33 - v15;
  v16 = (int *)type metadata accessor for TimeAndDateView();
  v17 = a7 + v16[7];
  *(_QWORD *)v17 = swift_getKeyPath();
  *(_BYTE *)(v17 + 8) = 0;
  v18 = a7 + v16[8];
  LOBYTE(v44) = 0;
  sub_1B8B9BE7C();
  v19 = v42;
  *(_BYTE *)v18 = v41;
  *(_QWORD *)(v18 + 8) = v19;
  v20 = v16[10];
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3590]), sel_init);
  objc_msgSend(v21, sel_setDateStyle_, 4);
  objc_msgSend(v21, sel_setTimeStyle_, 0);
  *(_QWORD *)(a7 + v20) = v21;
  v22 = v16[11];
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3590]), sel_init);
  objc_msgSend(v23, sel_setDateStyle_, 4);
  objc_msgSend(v23, sel_setTimeStyle_, 1);
  *(_QWORD *)(a7 + v22) = v23;
  v24 = v33;
  sub_1B8ADE850(v33, a7, &qword_1EF1BBF08);
  v25 = a7 + v16[5];
  *(_QWORD *)v25 = a2;
  *(_QWORD *)(v25 + 8) = a3;
  *(double *)(v25 + 16) = a8;
  v41 = a2;
  v42 = a3;
  v43 = a8;
  swift_retain();
  swift_retain();
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC860);
  MEMORY[0x1BCCB60C8](&v44, v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1BCCB60C8](v27);
  v28 = v34;
  sub_1B8B9B0A8();
  swift_release();
  swift_release();
  sub_1B8ADE894(v24, &qword_1EF1BBF08);
  v29 = a7 + v16[9];
  *(_QWORD *)(v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868) + 28)) = 0;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v29, v28, v37);
  v31 = a7 + v16[6];
  v32 = v39;
  *(_QWORD *)v31 = v38;
  *(_QWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 16) = v40;
  return result;
}

uint64_t type metadata accessor for TimeAndDateView()
{
  uint64_t result;

  result = qword_1EF1BC870;
  if (!qword_1EF1BC870)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *sub_1B8B077BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void (*v39)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B8B9B0F0();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v39(v9, v10, v11);
    v12 = a3[5];
    v13 = a3[6];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v14[2] = v15[2];
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v17[16] = v18[16];
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = v22[8];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B8AE20B0(v23, v24);
    *(_QWORD *)v21 = v23;
    v21[8] = v24;
    v25 = a3[8];
    v26 = a3[9];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *v27 = *v28;
    *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    swift_retain();
    v39(v29, v30, v11);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
    *(_QWORD *)&v29[*(int *)(v31 + 28)] = *(_QWORD *)&v30[*(int *)(v31 + 28)];
    v32 = a3[10];
    v33 = a3[11];
    v34 = *(void **)((char *)a2 + v32);
    *(uint64_t *)((char *)a1 + v32) = (uint64_t)v34;
    v35 = *(void **)((char *)a2 + v33);
    *(uint64_t *)((char *)a1 + v33) = (uint64_t)v35;
    swift_retain();
    v36 = v34;
    v37 = v35;
  }
  return a1;
}

void sub_1B8B07978(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v5 = sub_1B8B9B0F0();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8AE20FC(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  swift_release();
  v6(a1 + a2[9], v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  swift_release();

}

_QWORD *sub_1B8B07A80(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void (*v38)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_retain();
  v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B8B9B0F0();
  v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v38(v8, v9, v10);
  v11 = a3[5];
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v13[2] = v14[2];
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  v16[16] = v17[16];
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B8AE20B0(v22, v23);
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  v24 = a3[8];
  v25 = a3[9];
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  *v26 = *v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  v28 = (char *)a1 + v25;
  v29 = (char *)a2 + v25;
  swift_retain();
  v38(v28, v29, v10);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  *(_QWORD *)&v28[*(int *)(v30 + 28)] = *(_QWORD *)&v29[*(int *)(v30 + 28)];
  v31 = a3[10];
  v32 = a3[11];
  v33 = *(void **)((char *)a2 + v31);
  *(_QWORD *)((char *)a1 + v31) = v33;
  v34 = *(void **)((char *)a2 + v32);
  *(_QWORD *)((char *)a1 + v32) = v34;
  swift_retain();
  v35 = v33;
  v36 = v34;
  return a1;
}

char *sub_1B8B07C10(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_retain();
  swift_release();
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B8B9B0F0();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_retain();
  swift_release();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_retain();
  swift_release();
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_retain();
  swift_release();
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_retain();
  swift_release();
  v15[16] = v16[16];
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v15) = v19[8];
  sub_1B8AE20B0(*(_QWORD *)v19, (char)v15);
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v15;
  sub_1B8AE20FC(v21, v22);
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *v24 = *v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_retain();
  swift_release();
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v10(&a1[v26], &a2[v26], v9);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  *(_QWORD *)&v27[*(int *)(v29 + 28)] = *(_QWORD *)&v28[*(int *)(v29 + 28)];
  swift_retain();
  swift_release();
  v30 = a3[10];
  v31 = *(void **)&a2[v30];
  v32 = *(void **)&a1[v30];
  *(_QWORD *)&a1[v30] = v31;
  v33 = v31;

  v34 = a3[11];
  v35 = *(void **)&a2[v34];
  v36 = *(void **)&a1[v34];
  *(_QWORD *)&a1[v34] = v35;
  v37 = v35;

  return a1;
}

char *sub_1B8B07E18(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_1B8B9B0F0();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_OWORD *)&a2[v19];
  v20[8] = v21[8];
  *(_OWORD *)&a1[v19] = v22;
  v23 = a3[9];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v11(&a1[v23], &a2[v23], v10);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  *(_QWORD *)&v24[*(int *)(v26 + 28)] = *(_QWORD *)&v25[*(int *)(v26 + 28)];
  v27 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  return a1;
}

char *sub_1B8B07F3C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release();
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B8B9B0F0();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_release();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_release();
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release();
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release();
  v15[16] = v16[16];
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_1B8AE20FC(v21, v22);
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *v24 = *v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_release();
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v10(&a1[v26], &a2[v26], v9);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  *(_QWORD *)&v27[*(int *)(v29 + 28)] = *(_QWORD *)&v28[*(int *)(v29 + 28)];
  swift_release();
  v30 = a3[10];
  v31 = *(void **)&a1[v30];
  *(_QWORD *)&a1[v30] = *(_QWORD *)&a2[v30];

  v32 = a3[11];
  v33 = *(void **)&a1[v32];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];

  return a1;
}

uint64_t sub_1B8B080F0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B080FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1B8B081B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B081BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B8B0826C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1B8B08348(319, &qword_1EF1BC880, MEMORY[0x1E0CDFDC0]);
  if (v0 <= 0x3F)
  {
    sub_1B8B08348(319, &qword_1EF1BC888, MEMORY[0x1E0CDF9A0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1B8B08348(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B8B9B0F0();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B8B083A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B083B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[24];
  _OWORD v46[2];
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;

  v42 = a2;
  v41 = sub_1B8B9B0F0();
  v3 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B8B9B774();
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC930);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8C8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for TimeAndDateView();
  v14 = a1 + v13[8];
  v15 = *(_BYTE *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  LOBYTE(v49) = v15;
  *((_QWORD *)&v49 + 1) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  sub_1B8B9BE88();
  if (v43 == 1)
  {
    *(_QWORD *)v12 = sub_1B8B9B7A4();
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 1;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC938);
    sub_1B8B088E4(a1, &v12[*(int *)(v17 + 44)]);
    sub_1B8ADE850((uint64_t)v12, (uint64_t)v9, &qword_1EF1BC8C8);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8D8);
    sub_1B8ADE950(&qword_1EF1BC8C0, &qword_1EF1BC8C8, MEMORY[0x1E0CDFCB8]);
    sub_1B8B0A538();
    sub_1B8B9B870();
    return sub_1B8ADE894((uint64_t)v12, &qword_1EF1BC8C8);
  }
  else
  {
    v40[0] = v7;
    v40[1] = v10;
    v19 = a1 + v13[6];
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    LOBYTE(v19) = *(_BYTE *)(v19 + 16);
    *(_QWORD *)&v49 = v20;
    *((_QWORD *)&v49 + 1) = v21;
    LOBYTE(v50) = v19;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC830);
    MEMORY[0x1BCCB60C8](&v43, v22);
    if (v43 == 1)
    {
      v23 = sub_1B8B9B7B0();
      sub_1B8B0998C(a1, (uint64_t)&v49);
      v43 = v23;
      v44 = xmmword_1B8BA8260;
      *(_OWORD *)v45 = v49;
      *(_QWORD *)&v45[16] = v50;
      *(_QWORD *)&v46[0] = *((_QWORD *)&v50 + 1);
      *(_OWORD *)((char *)v46 + 8) = v51;
      *((_QWORD *)&v46[1] + 1) = v52;
      v47 = *((_QWORD *)&v52 + 1);
      v48 = 0;
    }
    else
    {
      sub_1B8B9B768();
      sub_1B8B9B75C();
      v24 = *(void **)(a1 + v13[11]);
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
      MEMORY[0x1BCCB60C8](v25);
      v26 = (void *)sub_1B8B9B0C0();
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28 = v41;
      v27(v5, v41);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
      sub_1B8B9BE88();
      v29 = (void *)sub_1B8B9B0C0();
      v27(v5, v28);
      v30 = objc_msgSend(v24, sel_stringFromDate_toDate_, v26, v29);

      sub_1B8B9C17C();
      sub_1B8B9B750();
      swift_bridgeObjectRelease();
      sub_1B8B9B75C();
      sub_1B8B9B78C();
      v43 = sub_1B8B9BBA0();
      *(_QWORD *)&v44 = v31;
      *((_QWORD *)&v44 + 1) = v32 & 1;
      *(_QWORD *)v45 = v33;
      *(_OWORD *)&v45[8] = 0u;
      memset(v46, 0, sizeof(v46));
      v47 = 0;
      v48 = 1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8E8);
    sub_1B8ADE950(&qword_1EF1BC8E0, &qword_1EF1BC8E8, MEMORY[0x1E0CDFCB8]);
    sub_1B8B9B870();
    v34 = v50;
    v35 = v51;
    v36 = v52;
    v37 = v53;
    v38 = v54;
    v39 = v55;
    *(_OWORD *)v9 = v49;
    *((_OWORD *)v9 + 1) = v34;
    *((_OWORD *)v9 + 2) = v35;
    *((_OWORD *)v9 + 3) = v36;
    *((_OWORD *)v9 + 4) = v37;
    *((_QWORD *)v9 + 10) = v38;
    v9[88] = v39;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8D8);
    sub_1B8ADE950(&qword_1EF1BC8C0, &qword_1EF1BC8C8, MEMORY[0x1E0CDFCB8]);
    sub_1B8B0A538();
    return sub_1B8B9B870();
  }
}

uint64_t sub_1B8B088E4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, uint64_t);
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;

  v70 = a2;
  v3 = type metadata accessor for TimeAndDateView();
  v62 = *(_QWORD *)(v3 - 8);
  v4 = v3;
  v61 = v3;
  v5 = *(_QWORD *)(v62 + 64);
  MEMORY[0x1E0C80A78](v3);
  v71 = (uint64_t)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  MEMORY[0x1E0C80A78](v6);
  v60 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC940);
  MEMORY[0x1E0C80A78](v57);
  v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC948);
  v74 = *(_QWORD *)(v63 - 8);
  v11 = MEMORY[0x1E0C80A78](v63);
  v69 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v66 = (char *)v56 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v76 = (char *)v56 - v16;
  MEMORY[0x1E0C80A78](v15);
  v73 = (char *)v56 - v17;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC950);
  v75 = *(_QWORD *)(v68 - 8);
  v18 = MEMORY[0x1E0C80A78](v68);
  v67 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v72 = (char *)v56 - v20;
  sub_1B8B9B780();
  v21 = a1 + *(int *)(v4 + 24);
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  LOBYTE(v21) = *(_BYTE *)(v21 + 16);
  v77 = v22;
  v78 = v23;
  v79 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC830);
  sub_1B8B9BF60();
  sub_1B8B9BF0C();
  *(_QWORD *)v10 = sub_1B8B9B738();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC958);
  v24 = a1;
  sub_1B8B08EC4(a1, &v10[*(int *)(v59 + 44)]);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  v26 = v60;
  MEMORY[0x1BCCB60C8](v25);
  v27 = a1;
  v28 = v71;
  sub_1B8AE2160(v27, v71);
  v29 = *(unsigned __int8 *)(v62 + 80);
  v30 = (v29 + 16) & ~v29;
  v62 = v30 + v5;
  v58 = v29 | 7;
  v31 = swift_allocObject();
  sub_1B8B0A5C0(v28, v31 + v30);
  v56[2] = sub_1B8ADE950(&qword_1EF1BC960, &qword_1EF1BC940, MEMORY[0x1E0CDFB08]);
  v56[1] = sub_1B8B0A7E8();
  v32 = v76;
  v33 = v26;
  v34 = v64;
  sub_1B8B9BD14();
  swift_release();
  v35 = *(void (**)(char *, uint64_t))(v65 + 8);
  v36 = v33;
  v35(v33, v34);
  sub_1B8ADE894((uint64_t)v10, &qword_1EF1BC940);
  v37 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v38 = v63;
  v37(v73, v32, v63);
  *(_QWORD *)v10 = sub_1B8B9B738();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  sub_1B8B093F0(v24, &v10[*(int *)(v59 + 44)]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  sub_1B8B9BE88();
  v39 = v71;
  sub_1B8AE2160(v24, v71);
  v40 = swift_allocObject();
  sub_1B8B0A5C0(v39, v40 + v30);
  v41 = v66;
  sub_1B8B9BD14();
  swift_release();
  v35(v36, v34);
  sub_1B8ADE894((uint64_t)v10, &qword_1EF1BC940);
  v42 = v76;
  v37(v76, v41, v38);
  v43 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v45 = v67;
  v44 = v68;
  v43(v67, v72, v68);
  v46 = v73;
  v47 = v74;
  v48 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  v49 = v41;
  v48(v41, v73, v38);
  v50 = v69;
  v48(v69, v42, v38);
  v51 = v70;
  v43(v70, v45, v44);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC970);
  v48(&v51[*(int *)(v52 + 48)], v49, v38);
  v48(&v51[*(int *)(v52 + 64)], v50, v38);
  v53 = *(void (**)(char *, uint64_t))(v47 + 8);
  v53(v76, v38);
  v53(v46, v38);
  v54 = *(void (**)(char *, uint64_t))(v75 + 8);
  v54(v72, v44);
  v53(v50, v38);
  v53(v49, v38);
  return ((uint64_t (*)(char *, uint64_t))v54)(v45, v44);
}

uint64_t sub_1B8B08EC4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v39 = a1;
  v46 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC978);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  MEMORY[0x1E0C80A78](v2);
  v38 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC980);
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (uint64_t)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v42 = (char *)v37 - v7;
  v8 = sub_1B8B9B894();
  MEMORY[0x1E0C80A78](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC990);
  v40 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v37 - v14;
  sub_1B8B9B780();
  v37[1] = v9;
  v16 = v39;
  sub_1B8B9BF60();
  sub_1B8B9B888();
  v41 = v15;
  sub_1B8B9B3CC();
  v17 = (uint64_t *)(v16 + *(int *)(type metadata accessor for TimeAndDateView() + 24));
  v18 = *v17;
  v19 = v17[1];
  LOBYTE(v17) = *((_BYTE *)v17 + 16);
  v47 = v18;
  v48 = v19;
  v49 = (char)v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC830);
  MEMORY[0x1BCCB60C8](&v50, v20);
  if ((v50 & 1) != 0)
  {
    v21 = 1;
    v23 = (uint64_t)v42;
    v22 = v43;
    v24 = v44;
    v25 = v40;
  }
  else
  {
    sub_1B8B9B780();
    sub_1B8B9BF60();
    sub_1B8B9B87C();
    sub_1B8B9B3CC();
    sub_1B8ADE950(&qword_1EF1BC998, &qword_1EF1BC990, MEMORY[0x1E0CD8398]);
    v26 = v38;
    sub_1B8B9BC18();
    v25 = v40;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v10);
    v23 = (uint64_t)v42;
    v27 = v43;
    v28 = v26;
    v29 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v28, v44);
    v21 = 0;
    v24 = v29;
    v22 = v27;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, v21, 1, v24);
  v30 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v31 = v41;
  v30(v13, v41, v10);
  v32 = v45;
  sub_1B8ADE850(v23, v45, &qword_1EF1BC980);
  v33 = v46;
  v30(v46, v13, v10);
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BC9A0);
  sub_1B8ADE850(v32, (uint64_t)&v33[*(int *)(v34 + 48)], &qword_1EF1BC980);
  sub_1B8ADE894(v23, &qword_1EF1BC980);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v31, v10);
  sub_1B8ADE894(v32, &qword_1EF1BC980);
  return ((uint64_t (*)(char *, uint64_t))v35)(v13, v10);
}

uint64_t sub_1B8B092A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  _QWORD v18[3];
  uint64_t v19;

  v5 = sub_1B8B9B0F0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v18 - v10;
  v12 = (_QWORD *)(a3 + *(int *)(type metadata accessor for TimeAndDateView() + 20));
  v13 = v12[1];
  v14 = v12[2];
  v18[0] = *v12;
  v18[1] = v13;
  v18[2] = v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC860);
  MEMORY[0x1BCCB60C8](&v19, v15);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v16(v9, a2, v5);
  sub_1B8B9B0A8();
  v16(v9, (uint64_t)v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  sub_1B8B9BE94();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_1B8B093F0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD v43[3];
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v47 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC978);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  MEMORY[0x1E0C80A78](v3);
  v43[0] = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC980);
  v6 = MEMORY[0x1E0C80A78](v5);
  v46 = (uint64_t)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v52 = (char *)v43 - v8;
  v9 = sub_1B8B9B894();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC988);
  MEMORY[0x1E0C80A78](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1E0C80A78](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC990);
  v49 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v48 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v43 - v17;
  v19 = sub_1B8B9B780();
  v54 = v20;
  v55 = (char *)v19;
  v53 = v21;
  v22 = type metadata accessor for TimeAndDateView();
  v23 = a1 + *(int *)(v22 + 36);
  v43[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  v43[2] = v23;
  sub_1B8B9BEA0();
  v44 = v13;
  v56 = a1;
  MEMORY[0x1BCCB60C8](v13);
  sub_1B8B9B0F0();
  sub_1B8B0A7E8();
  result = sub_1B8B9C0EC();
  if ((result & 1) != 0)
  {
    sub_1B8B9B888();
    v45 = v18;
    sub_1B8B9B3D8();
    v25 = (uint64_t *)(v56 + *(int *)(v22 + 24));
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v25) = *((_BYTE *)v25 + 16);
    v57 = v26;
    v58 = v27;
    v59 = (char)v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC830);
    MEMORY[0x1BCCB60C8](&v60, v28);
    if ((v60 & 1) != 0)
    {
      v29 = 1;
      v30 = v51;
      v31 = (uint64_t)v52;
      v33 = v49;
      v32 = v50;
      v34 = v48;
LABEL_6:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v31, v29, 1, v30);
      v37 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
      v38 = v45;
      v37(v34, v45, v14);
      v39 = v46;
      sub_1B8ADE850(v31, v46, &qword_1EF1BC980);
      v40 = v47;
      v37(v47, v34, v14);
      v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BC9A0);
      sub_1B8ADE850(v39, (uint64_t)&v40[*(int *)(v41 + 48)], &qword_1EF1BC980);
      sub_1B8ADE894(v31, &qword_1EF1BC980);
      v42 = *(void (**)(char *, uint64_t))(v33 + 8);
      v42(v38, v14);
      sub_1B8ADE894(v39, &qword_1EF1BC980);
      return ((uint64_t (*)(char *, uint64_t))v42)(v34, v14);
    }
    v55 = v11;
    sub_1B8B9B780();
    sub_1B8B9BEA0();
    MEMORY[0x1BCCB60C8](v44);
    result = sub_1B8B9C0EC();
    if ((result & 1) != 0)
    {
      sub_1B8B9B87C();
      v34 = v48;
      sub_1B8B9B3D8();
      sub_1B8ADE950(&qword_1EF1BC998, &qword_1EF1BC990, MEMORY[0x1E0CD8398]);
      v35 = v43[0];
      sub_1B8B9BC18();
      v33 = v49;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v14);
      v32 = v50;
      v31 = (uint64_t)v52;
      v36 = v35;
      v30 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v52, v36, v51);
      v29 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8B0989C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1BCCB60C8](v8);
  sub_1B8B9B0B4();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = (_QWORD *)(a3 + *(int *)(type metadata accessor for TimeAndDateView() + 20));
  v12 = v11[1];
  v13 = v11[2];
  v15[1] = *v11;
  v15[2] = v12;
  v15[3] = v13;
  v15[0] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC860);
  return sub_1B8B9BF48();
}

uint64_t sub_1B8B0998C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = sub_1B8B9B0F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B8B9B774();
  MEMORY[0x1E0C80A78](v8);
  sub_1B8B9B780();
  v9 = sub_1B8B9BBA0();
  v33 = v10;
  v34 = v9;
  v32 = v11;
  v31 = v12 & 1;
  sub_1B8B9B768();
  sub_1B8B9B75C();
  v13 = *(void **)(a1 + *(int *)(type metadata accessor for TimeAndDateView() + 40));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08);
  MEMORY[0x1BCCB60C8](v14);
  v15 = (void *)sub_1B8B9B0C0();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v7, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  sub_1B8B9BE88();
  v17 = (void *)sub_1B8B9B0C0();
  v16(v7, v4);
  v18 = objc_msgSend(v13, sel_stringFromDate_toDate_, v15, v17);

  sub_1B8B9C17C();
  sub_1B8B9B750();
  swift_bridgeObjectRelease();
  sub_1B8B9B75C();
  sub_1B8B9B78C();
  v19 = sub_1B8B9BBA0();
  v21 = v20;
  v22 = v31;
  v35 = v31;
  LOBYTE(v15) = v23 & 1;
  v25 = v33;
  v24 = v34;
  v26 = v32;
  *(_QWORD *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + 48) = v23 & 1;
  *(_QWORD *)(a2 + 56) = v27;
  v28 = v24;
  sub_1B8ADD7C0(v24, v26, v22);
  swift_bridgeObjectRetain();
  sub_1B8ADD7C0(v19, v21, (char)v15);
  swift_bridgeObjectRetain();
  sub_1B8ADDA88(v19, v21, (char)v15);
  swift_bridgeObjectRelease();
  sub_1B8ADDA88(v28, v26, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B09C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC900);
  MEMORY[0x1E0C80A78](v4);
  v53 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeAndDateView();
  v50 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v50 + 64);
  MEMORY[0x1E0C80A78](v6);
  v51 = (uint64_t)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC908);
  v8 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v55 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC910);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v54 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC918);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v46 - v17;
  sub_1B8B9B780();
  v19 = sub_1B8B9BBA0();
  v57 = v20;
  v58 = v19;
  v56 = v21;
  v59 = v22;
  v23 = a1 + *(int *)(v6 + 32);
  v24 = *(_BYTE *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v60 = v24;
  v61 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  sub_1B8B9BE88();
  v26 = 1;
  if (v62 == 1)
  {
    v46[1] = sub_1B8B9B780();
    v47 = v8;
    v48 = v16;
    v49 = v11;
    v27 = (uint64_t)v53;
    v28 = v51;
    sub_1B8AE2160(a1, v51);
    v29 = v10;
    v30 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    v31 = swift_allocObject() + v30;
    v10 = v29;
    sub_1B8B0A5C0(v28, v31);
    v32 = v55;
    v11 = v49;
    sub_1B8B9BEC4();
    v33 = sub_1B8B9BB7C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v27, 1, 1, v33);
    KeyPath = swift_getKeyPath();
    v35 = (uint64_t)v54;
    v36 = (uint64_t *)&v54[*(int *)(v10 + 36)];
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC928);
    sub_1B8ADE850(v27, (uint64_t)v36 + *(int *)(v37 + 28), &qword_1EF1BC900);
    *v36 = KeyPath;
    v38 = v47;
    v39 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v35, v32, v52);
    v40 = v27;
    v16 = v48;
    sub_1B8ADE894(v40, &qword_1EF1BC900);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v39);
    sub_1B8B0A790(v35, (uint64_t)v18);
    v26 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v18, v26, 1, v10);
  v41 = v56 & 1;
  sub_1B8ADE850((uint64_t)v18, (uint64_t)v16, &qword_1EF1BC918);
  v43 = v57;
  v42 = v58;
  *(_QWORD *)a2 = v58;
  *(_QWORD *)(a2 + 8) = v43;
  *(_BYTE *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v59;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC920);
  sub_1B8ADE850((uint64_t)v16, a2 + *(int *)(v44 + 64), &qword_1EF1BC918);
  sub_1B8ADD7C0(v42, v43, v41);
  swift_bridgeObjectRetain();
  sub_1B8ADE894((uint64_t)v18, &qword_1EF1BC918);
  sub_1B8ADE894((uint64_t)v16, &qword_1EF1BC918);
  sub_1B8ADDA88(v42, v43, v41);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B0A0B4()
{
  type metadata accessor for TimeAndDateView();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  sub_1B8B9BE88();
  sub_1B8B9BE94();
  return swift_release();
}

uint64_t sub_1B8B0A154(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v17[8];
  char v18;
  uint64_t v19;
  char v20;

  v2 = type metadata accessor for TimeAndDateView();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + *(int *)(v3 + 28);
  v7 = *(_QWORD *)v6;
  v8 = *(_BYTE *)(v6 + 8);
  sub_1B8AE20B0(*(_QWORD *)v6, v8);
  v9 = sub_1B8B17940(v7, v8);
  sub_1B8AE20FC(v7, v8);
  sub_1B8AE2160(a1, (uint64_t)v5);
  if ((v9 & 1) == 0)
    return sub_1B8AE21A4((uint64_t)v5);
  v11 = &v5[*(int *)(v2 + 32)];
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  v18 = v12;
  v19 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  sub_1B8B9BE88();
  result = sub_1B8AE21A4((uint64_t)v5);
  if ((v20 & 1) == 0)
  {
    v14 = a1 + *(int *)(v2 + 32);
    v16 = *(_QWORD *)(v14 + 8);
    v18 = *(_BYTE *)v14;
    v15 = v18;
    v19 = v16;
    swift_retain();
    sub_1B8B9BE88();
    v18 = v15;
    v19 = v16;
    v17[7] = (v20 & 1) == 0;
    sub_1B8B9BE94();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B8B0A2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;

  v15[1] = a2;
  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](a1);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC890);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC898);
  v15[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v2;
  *(_QWORD *)v7 = sub_1B8B9B738();
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8A0);
  sub_1B8B09C68(v2, (uint64_t)&v7[*(int *)(v11 + 44)]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8A8);
  sub_1B8ADE950(&qword_1EF1BC8B0, &qword_1EF1BC890, MEMORY[0x1E0CDFB08]);
  sub_1B8B0A4B4();
  sub_1B8B9BFA8();
  sub_1B8AE2160(v2, (uint64_t)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  sub_1B8B0A5C0((uint64_t)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  sub_1B8B0A610();
  sub_1B8B9BC24();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v15[0] + 8))(v10, v8);
}

uint64_t sub_1B8B0A4AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B083B0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1B8B0A4B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC8B8;
  if (!qword_1EF1BC8B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC8A8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC8C0, &qword_1EF1BC8C8, MEMORY[0x1E0CDFCB8]);
    v2[1] = sub_1B8B0A538();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC8B8);
  }
  return result;
}

unint64_t sub_1B8B0A538()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BC8D0;
  if (!qword_1EF1BC8D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC8D8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC8E0, &qword_1EF1BC8E8, MEMORY[0x1E0CDFCB8]);
    v2[1] = MEMORY[0x1E0CDDD50];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC8D0);
  }
  return result;
}

uint64_t sub_1B8B0A5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeAndDateView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B0A604()
{
  return sub_1B8B0A6B0(sub_1B8B0A154);
}

unint64_t sub_1B8B0A610()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = qword_1EF1BC8F0;
  if (!qword_1EF1BC8F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC898);
    v2[0] = sub_1B8ADE950(&qword_1EF1BC8B0, &qword_1EF1BC890, MEMORY[0x1E0CDFB08]);
    v2[1] = sub_1B8B0A4B4();
    v2[2] = MEMORY[0x1E0CE0408];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFFA0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BC8F0);
  }
  return result;
}

uint64_t sub_1B8B0A6A4()
{
  return sub_1B8B0A6B0((uint64_t (*)(uint64_t))sub_1B8B0A0B4);
}

uint64_t sub_1B8B0A6B0(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeAndDateView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1B8B0A6EC()
{
  return sub_1B8B9B6A8();
}

uint64_t sub_1B8B0A70C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC900);
  MEMORY[0x1E0C80A78](v2);
  sub_1B8ADE850(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1EF1BC900);
  return sub_1B8B9B6B4();
}

uint64_t sub_1B8B0A790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B0A7DC(uint64_t a1, uint64_t a2)
{
  return sub_1B8B0A984(a1, a2, sub_1B8B092A8);
}

unint64_t sub_1B8B0A7E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BC968;
  if (!qword_1EF1BC968)
  {
    v1 = sub_1B8B9B0F0();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CB08B8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BC968);
  }
  return result;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for TimeAndDateView();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  v4 = v3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF08) + 32);
  v5 = sub_1B8B9B0F0();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8AE20FC(*(_QWORD *)(v3 + v1[7]), *(_BYTE *)(v3 + v1[7] + 8));
  swift_release();
  v6(v3 + v1[9], v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC868);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B8B0A978(uint64_t a1, uint64_t a2)
{
  return sub_1B8B0A984(a1, a2, sub_1B8B0989C);
}

uint64_t sub_1B8B0A984(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeAndDateView() - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1B8B0A9E0()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC898);
  sub_1B8B0A610();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B0AA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_viewControllerDelegate;
  v2 = MEMORY[0x1BCCB7B38](v0 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_viewControllerDelegate);
  swift_unknownObjectRelease();
  if (v2)
    return MEMORY[0x1BCCB7B38](v1);
  v1 = v0 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_editViewControllerDelegate;
  v3 = MEMORY[0x1BCCB7B38](v0 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_editViewControllerDelegate);
  swift_unknownObjectRelease();
  if (v3)
    return MEMORY[0x1BCCB7B38](v1);
  else
    return 0;
}

id CUIKEventViewControllerManagerImpl.__allocating_init(viewControllerDelegate:)()
{
  objc_class *v0;
  char *v1;
  id v2;
  objc_super v4;

  v1 = (char *)objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v4.receiver = v1;
  v4.super_class = v0;
  v2 = objc_msgSendSuper2(&v4, sel_init);
  swift_unknownObjectRelease();
  return v2;
}

id CUIKEventViewControllerManagerImpl.init(viewControllerDelegate:)()
{
  char *v0;
  id v1;
  objc_super v3;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CUIKEventViewControllerManagerImpl();
  v1 = objc_msgSendSuper2(&v3, sel_init);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t type metadata accessor for CUIKEventViewControllerManagerImpl()
{
  return objc_opt_self();
}

id CUIKEventViewControllerManagerImpl.__allocating_init(editViewControllerDelegate:)()
{
  objc_class *v0;
  char *v1;
  id v2;
  objc_super v4;

  v1 = (char *)objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v4.receiver = v1;
  v4.super_class = v0;
  v2 = objc_msgSendSuper2(&v4, sel_init);
  swift_unknownObjectRelease();
  return v2;
}

id CUIKEventViewControllerManagerImpl.init(editViewControllerDelegate:)()
{
  char *v0;
  id v1;
  objc_super v3;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CUIKEventViewControllerManagerImpl();
  v1 = objc_msgSendSuper2(&v3, sel_init);
  swift_unknownObjectRelease();
  return v1;
}

id sub_1B8B0AEC4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController);
  }
  else
  {
    v4 = (void *)sub_1B8B0AF58(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1B8B0AF58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)sub_1B8B0AA2C();
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel_eventForViewControllerManager);
    v9 = MEMORY[0x1BCCB7B38](a1 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_editViewControllerDelegate);
    v21[0] = v3;
    v11 = 0;
    if (v9)
    {
      v10 = v9;
      swift_unknownObjectRelease();
      if ((void *)v10 == v7)
        v11 = 1;
    }
    swift_unknownObjectWeakInit();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v7;
    type metadata accessor for CUIKEventEditorViewModel(0);
    swift_allocObject();
    v13 = v8;
    swift_unknownObjectRetain();
    v14 = sub_1B8B8D700(v13, (uint64_t)sub_1B8B0B5E0, v12, v11, 0);
    swift_unknownObjectWeakDestroy();
    sub_1B8AE2010();
    swift_retain();
    v21[1] = sub_1B8B9B4F8();
    v21[2] = v15;
    v16 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9E8));
    swift_retain();
    v17 = sub_1B8B9B7D4();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9F0);
    sub_1B8B9B354();
    swift_endAccess();
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v14;
    sub_1B8B0B65C();
    swift_retain();
    sub_1B8B9B390();
    swift_release();
    (*(void (**)(char *, uint64_t))(v21[0] + 8))(v5, v2);
    swift_beginAccess();
    sub_1B8B9B324();
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    return v17;
  }
  else
  {
    result = sub_1B8B9C710();
    __break(1u);
  }
  return result;
}

void sub_1B8B0B27C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B8B0B2B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  swift_beginAccess();
  v1 = MEMORY[0x1BCCB7B38](v0);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = (void *)MEMORY[0x1BCCB7B38](v1 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl_viewControllerDelegate);

    if (v3)
    {
      objc_msgSend(v3, sel_requestOrganizerDetailPresentation);
      swift_unknownObjectRelease();
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1B8B9B36C();
}

id CUIKEventViewControllerManagerImpl.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CUIKEventViewControllerManagerImpl.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CUIKEventViewControllerManagerImpl.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CUIKEventViewControllerManagerImpl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1B8B0B4A4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B8B0AEC4();
  *a1 = result;
  return result;
}

void sub_1B8B0B4CC(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController);
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC13CalendarUIKit34CUIKEventViewControllerManagerImpl____lazy_storage___viewController) = *a1;
  v3 = v2;

}

uint64_t method lookup function for CUIKEventViewControllerManagerImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CUIKEventViewControllerManagerImpl.__allocating_init(viewControllerDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of CUIKEventViewControllerManagerImpl.__allocating_init(editViewControllerDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CUIKEventViewControllerManagerImpl.viewController.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t sub_1B8B0B598(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1B8B0B5BC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id sub_1B8B0B5E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_editorForViewControllerManager);
}

uint64_t sub_1B8B0B604()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B8B0B628()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1B8B0B654(uint64_t a1)
{
  sub_1B8B0B27C(a1);
}

unint64_t sub_1B8B0B65C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BC9F8;
  if (!qword_1EF1BC9F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC9D8);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0C96190], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BC9F8);
  }
  return result;
}

uint64_t static LocationDescriptionGenerator.locationString(for:options:incomplete:leadingImageName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, id *a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v46;
  _BYTE v47[12];
  int v48;
  id *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t AssociatedConformanceWitness;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B8ADE850(a1, (uint64_t)&v61, &qword_1ED1B2FF8);
  if (!*((_QWORD *)&v62 + 1))
  {
    sub_1B8ADE894((uint64_t)&v61, &qword_1ED1B2FF8);
    v19 = sub_1B8B9AF94();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a5, 1, 1, v19);
  }
  sub_1B8B0BBC8(&v61, (uint64_t)v64);
  v14 = v65;
  v15 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 248))(v14, v15);
  v56 = v16;
  v17 = (_QWORD *)sub_1B8B0F450(v64);
  if (v17[2])
  {
    v18 = v17[5];
    v57 = v17[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    v57 = 0;
    v18 = 0;
  }
  swift_bridgeObjectRelease();
  v53 = v5;
  v54 = a5;
  v50 = a3;
  v49 = a4;
  if ((a2 & 0x10) == 0)
    goto LABEL_28;
  v21 = v65;
  v22 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 392))(v21, v22))
    goto LABEL_28;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA00);
  v23 = sub_1B8B9C6EC();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v25 = v23 + 32;
  v26 = v57;
  while (1)
  {
    sub_1B8B0FC88(v25, (uint64_t)&v61);
    v27 = *((_QWORD *)&v62 + 1);
    v28 = AssociatedConformanceWitness;
    __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v62 + 1));
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
    sub_1B8B0FC88((uint64_t)&v61, (uint64_t)v58);
    if (v29 != 2)
      goto LABEL_11;
    v30 = v59;
    v31 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v31 + 8) + 24))(v30);
    if (!v33)
    {
      if (!v18)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        goto LABEL_27;
      }
      goto LABEL_11;
    }
    if (!v18)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      goto LABEL_12;
    }
    if (v32 == v26 && v33 == v18)
      break;
    v35 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    if ((v35 & 1) != 0)
      goto LABEL_26;
LABEL_12:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
    v25 += 40;
    if (!--v24)
      goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_27:
  swift_bridgeObjectRelease();
  v18 = v56;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
  v57 = v55;
LABEL_28:
  sub_1B8B0FC88((uint64_t)v64, (uint64_t)&v61);
  v51 = v13;
  v52 = a2;
  v48 = sub_1B8B0BBE0(v13, (uint64_t)&v61, a2);
  sub_1B8ADE894((uint64_t)&v61, &qword_1ED1B2FF8);
  v36 = v65;
  v37 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  v38 = *(void (**)(uint64_t, uint64_t))(v37 + 288);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = sub_1B8B9C50C();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v43 = &v47[-v42];
  swift_bridgeObjectRetain();
  v38(v36, v37);
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48))(v43, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v43, v40);
    AssociatedConformanceWitness = 0;
    v61 = 0u;
    v62 = 0u;
  }
  else
  {
    *((_QWORD *)&v62 + 1) = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v44 + 32))(boxed_opaque_existential_1, v43, AssociatedTypeWitness);
  }
  v46 = (uint64_t)v51;
  sub_1B8B0C3DC(v55, v56, v57, v18, &v61, (uint64_t)v51, v48 & 1, v52, v54, v50, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B8ADE894(v46, &qword_1ED1B3020);
  swift_bridgeObjectRelease();
  sub_1B8ADE894((uint64_t)&v61, &qword_1ED1B3038);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
}

uint64_t sub_1B8B0BBC8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B8B0BBE0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD v86[3];
  uint64_t v87;
  uint64_t v88;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v73 - v10;
  v12 = sub_1B8B9B054();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v73 - v17;
  sub_1B8ADE850(a2, (uint64_t)&v83, &qword_1ED1B2FF8);
  if (*((_QWORD *)&v84 + 1))
  {
    v75 = a3;
    v76 = v9;
    v74 = v16;
    v73 = v18;
    v77 = a1;
    v78 = v12;
    v79 = v13;
    sub_1B8B0BBC8(&v83, (uint64_t)v86);
    v19 = v87;
    v20 = v88;
    __swift_project_boxed_opaque_existential_1(v86, v87);
    v21 = *(void (**)(uint64_t, uint64_t))(v20 + 240);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v23 = sub_1B8B9C50C();
    v24 = *(_QWORD *)(v23 - 8);
    MEMORY[0x1E0C80A78](v23);
    v26 = (char *)&v73 - v25;
    v21(v19, v20);
    v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
LABEL_9:
      v37 = v78;
      v34 = v79;
      v35 = v75;
      v36 = (uint64_t)v76;
LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v11, 1, 1, v37);
      goto LABEL_11;
    }
    v81 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v82 = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
    (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 32))(boxed_opaque_existential_1, v26, AssociatedTypeWitness);
    v30 = v81;
    v31 = v82;
    __swift_project_boxed_opaque_existential_1(v80, v81);
    if (!(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v30, v31))
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      goto LABEL_9;
    }
    swift_getAssociatedTypeWitness();
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA30);
    v33 = sub_1B8B9C6EC();
    swift_bridgeObjectRelease();
    v34 = v79;
    v35 = v75;
    v36 = (uint64_t)v76;
    if (*(_QWORD *)(v33 + 16))
    {
      sub_1B8B0FC88(v33 + 32, (uint64_t)&v83);
    }
    else
    {
      v85 = 0;
      v83 = 0u;
      v84 = 0u;
    }
    v37 = v78;
    swift_bridgeObjectRelease();
    v50 = *((_QWORD *)&v84 + 1);
    if (!*((_QWORD *)&v84 + 1))
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      sub_1B8ADE894((uint64_t)&v83, &qword_1EF1BCA38);
      goto LABEL_10;
    }
    v51 = v85;
    __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
    (*(void (**)(uint64_t, uint64_t))(v51 + 16))(v50, v51);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1, v37) == 1)
    {
LABEL_11:
      sub_1B8ADE894((uint64_t)v11, &qword_1ED1B3020);
      if (v35 < 0)
        v38 = objc_msgSend((id)objc_opt_self(), sel_isMainThread) ^ 1;
      else
        v38 = 1;
      v39 = v87;
      v40 = v88;
      __swift_project_boxed_opaque_existential_1(v86, v87);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v40 + 432))(v39, v40) & 1) != 0 || v38)
      {
        v41 = v87;
        v42 = v88;
        __swift_project_boxed_opaque_existential_1(v86, v87);
        (*(void (**)(uint64_t, uint64_t))(v42 + 440))(v41, v42);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v37) == 1)
        {
          sub_1B8ADE894(v36, &qword_1ED1B3020);
        }
        else
        {
          v45 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
          v45(v74, v36, v37);
          v46 = sub_1B8B9B03C();
          if (!v47
            || (*(_QWORD *)&v83 = v46,
                *((_QWORD *)&v83 + 1) = v47,
                v80[0] = 7103860,
                v80[1] = 0xE300000000000000,
                sub_1B8ADDBE4(),
                v48 = sub_1B8B9C56C(),
                swift_bridgeObjectRelease(),
                v48))
          {
            v49 = v77;
            v45(v77, (uint64_t)v74, v37);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v49, 0, 1, v37);
            goto LABEL_19;
          }
          (*(void (**)(char *, uint64_t))(v34 + 8))(v74, v37);
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v77, 1, 1, v37);
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
      goto LABEL_20;
    }
    v76 = (char *)v32;
    v52 = v73;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v73, v11, v37);
    v53 = v77;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v77, v52, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v53, 0, 1, v37);
    v54 = v87;
    v55 = v88;
    __swift_project_boxed_opaque_existential_1(v86, v87);
    v56 = *(void (**)(uint64_t, uint64_t))(v55 + 240);
    v57 = swift_getAssociatedTypeWitness();
    v58 = sub_1B8B9C50C();
    v59 = *(_QWORD *)(v58 - 8);
    MEMORY[0x1E0C80A78](v58);
    v61 = (char *)&v73 - v60;
    v56(v54, v55);
    v62 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v61, 1, v57) == 1)
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v52, v78);
LABEL_41:
      v43 = 0;
      goto LABEL_42;
    }
    v81 = v57;
    v63 = swift_getAssociatedConformanceWitness();
    v82 = v63;
    v64 = __swift_allocate_boxed_opaque_existential_1(v80);
    (*(void (**)(uint64_t *, char *, uint64_t))(v62 + 32))(v64, v61, v57);
    v65 = v81;
    v66 = v82;
    __swift_project_boxed_opaque_existential_1(v80, v81);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 32))(v65, v66);
    v43 = v67;
    if (v67)
    {
      swift_getAssociatedTypeWitness();
      v68 = sub_1B8B9C6EC();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v68 + 16))
      {
        sub_1B8B0FC88(v68 + 32, (uint64_t)&v83);
      }
      else
      {
        v85 = 0;
        v83 = 0u;
        v84 = 0u;
      }
      swift_bridgeObjectRelease();
      v69 = *((_QWORD *)&v84 + 1);
      v70 = v78;
      v71 = v79;
      if (!*((_QWORD *)&v84 + 1))
      {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v73, v78);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
        sub_1B8ADE894((uint64_t)&v83, &qword_1EF1BCA38);
        goto LABEL_41;
      }
      v72 = v85;
      __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 24))(v69, v72);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v79 + 8))(v73, v78);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
LABEL_42:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    return v43 & 1;
  }
  sub_1B8ADE894((uint64_t)&v83, &qword_1ED1B2FF8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
LABEL_20:
  v43 = 0;
  return v43 & 1;
}

uint64_t sub_1B8B0C3DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, _BYTE *a10, id *a11)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t AssociatedConformanceWitness;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  unsigned int (*v150)(uint64_t, uint64_t, _QWORD *);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  void (*v154)(char *, char *, _QWORD *);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  id v162;
  id v163;
  id v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  void (*v170)(char *, _QWORD *);
  uint64_t v171;
  char *v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t, _QWORD *);
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  void (*v182)(char *, _QWORD *);
  uint64_t v183;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  _BOOL4 v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  _BYTE *v203;
  int v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  id *v211;
  _QWORD *v212;
  char *v213;
  _QWORD *v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  id v222[2];
  uint64_t v223;
  uint64_t v224;
  char v225[8];
  uint64_t v226;

  v204 = a7;
  v209 = a6;
  v212 = a5;
  v205 = a9;
  v211 = a11;
  v203 = a10;
  v226 = *MEMORY[0x1E0C80C00];
  v16 = (_QWORD *)sub_1B8B9AF94();
  v214 = (_QWORD *)*(v16 - 1);
  v17 = MEMORY[0x1E0C80A78](v16);
  v191 = (char *)&v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v201 = (char *)&v185 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v194 = (char *)&v185 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v195 = (char *)&v185 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v185 - v26;
  MEMORY[0x1E0C80A78](v25);
  v202 = (char *)&v185 - v28;
  v29 = sub_1B8B9AFE8();
  MEMORY[0x1E0C80A78](v29);
  v197 = (char *)&v185 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v31);
  v199 = (uint64_t)&v185 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  v34 = MEMORY[0x1E0C80A78](v33);
  v198 = (uint64_t)&v185 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v185 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v193 = (char *)&v185 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v200 = (char *)&v185 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v185 - v44;
  v46 = MEMORY[0x1E0C80A78](v43);
  v213 = (char *)&v185 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v208 = (char *)&v185 - v49;
  MEMORY[0x1E0C80A78](v48);
  v215 = (uint64_t)&v185 - v50;
  v51 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v51);
  v190 = (char *)&v185 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v53);
  v189 = (char *)&v185 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = v38;
  v207 = a8;
  v196 = v27;
  if ((a8 & 8) == 0)
  {
    if (!a4)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (!a4)
  {
LABEL_8:
    sub_1B8ADE850((uint64_t)v212, (uint64_t)v225, &qword_1ED1B3038);
    a4 = 0;
    goto LABEL_16;
  }
  if (!a2)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  if ((sub_1B8B9C278() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a3 = 0;
    goto LABEL_8;
  }
LABEL_10:
  v55 = v16;
  v56 = a1;
  v57 = a2;
  v58 = v45;
  v59 = a8;
  v60 = a4 & 0x2000000000000000;
  v61 = HIBYTE(a4) & 0xF;
  v206 = a3;
  v62 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v63 = HIBYTE(a4) & 0xF;
  else
    v63 = v62;
  sub_1B8ADE850((uint64_t)v212, (uint64_t)v225, &qword_1ED1B3038);
  if (v63)
  {
    sub_1B8ADE894((uint64_t)v225, &qword_1ED1B3038);
    v192 = 0;
    a8 = v59;
    v45 = v58;
    a2 = v57;
    a1 = v56;
    v16 = v55;
    v38 = v210;
    goto LABEL_21;
  }
  a8 = v59;
  v45 = v58;
  a2 = v57;
  a3 = v206;
  a1 = v56;
  v16 = v55;
  v38 = v210;
LABEL_16:
  sub_1B8ADE850((uint64_t)v225, (uint64_t)v222, &qword_1ED1B3038);
  v64 = v223;
  if (v223)
  {
    v65 = v224;
    __swift_project_boxed_opaque_existential_1(v222, v223);
    v192 = sub_1B8B1AE08(v64, v65);
    sub_1B8ADE894((uint64_t)v225, &qword_1ED1B3038);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v222);
  }
  else
  {
    sub_1B8ADE894((uint64_t)v225, &qword_1ED1B3038);
    sub_1B8ADE894((uint64_t)v222, &qword_1ED1B3038);
    v192 = 0;
  }
  v206 = a3;
  if (!a4)
  {
LABEL_25:
    sub_1B8ADE850((uint64_t)v212, (uint64_t)&v219, &qword_1ED1B3038);
    if (!v220)
    {
      sub_1B8ADE894((uint64_t)&v219, &qword_1ED1B3038);
      v76 = (uint64_t)v208;
      v77 = v215;
      v78 = v211;
      v79 = v214;
      if (!a4)
      {
LABEL_90:
        v85 = (uint64_t)v38;
        goto LABEL_91;
      }
LABEL_30:
      v60 = a4 & 0x2000000000000000;
      v61 = HIBYTE(a4) & 0xF;
      v62 = v206 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }
    v187 = a2;
    v186 = a1;
    v188 = v45;
    v212 = v16;
    sub_1B8B0BBC8(&v219, (uint64_t)v222);
    v68 = v223;
    v67 = v224;
    __swift_project_boxed_opaque_existential_1(v222, v223);
    v69 = *(void (**)(uint64_t, uint64_t))(v67 + 80);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v71 = sub_1B8B9C50C();
    v72 = *(_QWORD *)(v71 - 8);
    MEMORY[0x1E0C80A78](v71);
    v74 = (char *)&v185 - v73;
    v69(v68, v67);
    v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v74, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v71);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v222);
      a8 = v207;
      v16 = v212;
      v76 = (uint64_t)v208;
      v77 = v215;
      v78 = v211;
      v79 = v214;
      v38 = v210;
      v45 = v188;
      if (!a4)
        goto LABEL_90;
      goto LABEL_30;
    }
    v217 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v218 = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v216);
    (*(void (**)(uint64_t *, char *, uint64_t))(v75 + 32))(boxed_opaque_existential_1, v74, AssociatedTypeWitness);
    sub_1B8B0BBC8(&v216, (uint64_t)&v219);
    v95 = v220;
    v96 = v221;
    __swift_project_boxed_opaque_existential_1(&v219, v220);
    v97 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v95, v96);
    if (v97)
    {
      a8 = v207;
      v16 = v212;
      v76 = (uint64_t)v208;
      v77 = v215;
      v78 = v211;
      v79 = v214;
      v38 = v210;
      v45 = v188;
      if (v97 == 1 && (v207 & 4) != 0)
        goto LABEL_89;
    }
    else
    {
      a8 = v207;
      v16 = v212;
      v76 = (uint64_t)v208;
      v77 = v215;
      v78 = v211;
      v79 = v214;
      v38 = v210;
      v45 = v188;
      if ((v207 & 2) != 0)
        goto LABEL_89;
    }
    sub_1B8B0FC88((uint64_t)v222, (uint64_t)&v216);
    v98 = sub_1B8B0F714((uint64_t)&v216);
    v100 = v99;
    sub_1B8ADE894((uint64_t)&v216, &qword_1ED1B3038);
    if (v100)
    {
      v101 = HIBYTE(v100) & 0xF;
      if ((v100 & 0x2000000000000000) == 0)
        v101 = v98 & 0xFFFFFFFFFFFFLL;
      if (v101)
        goto LABEL_50;
      swift_bridgeObjectRelease();
    }
    v103 = (char *)v76;
    v104 = v187;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v105 = v220;
    v106 = v221;
    __swift_project_boxed_opaque_existential_1(&v219, v220);
    v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 32))(v105, v106);
    if (v108)
    {
      if (v107 == 21333 && v108 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v109 = sub_1B8B9C8D8();
        swift_bridgeObjectRelease();
        if ((v109 & 1) == 0)
        {
          v100 = v187;
          v76 = (uint64_t)v208;
          v78 = v211;
          goto LABEL_84;
        }
      }
      v110 = v77;
      v111 = v220;
      v112 = v221;
      __swift_project_boxed_opaque_existential_1(&v219, v220);
      v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 40))(v111, v112);
      if (v114)
      {
        v115 = v113;
        v116 = v114;
        v117 = HIBYTE(v114) & 0xF;
        if ((v114 & 0x2000000000000000) == 0)
          v117 = v113 & 0xFFFFFFFFFFFFLL;
        if (v117)
        {
          v118 = v220;
          v119 = v221;
          __swift_project_boxed_opaque_existential_1(&v219, v220);
          v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 48))(v118, v119);
          if (v121)
          {
            v122 = v120;
            v123 = v121;
            v124 = HIBYTE(v121) & 0xF;
            if ((v121 & 0x2000000000000000) == 0)
              v124 = v120 & 0xFFFFFFFFFFFFLL;
            if (v124)
            {
              sub_1B8B9C0F8();
              v125 = CUIKBundle();
              sub_1B8B9B15C();
              v206 = sub_1B8B9C194();
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA08);
              v126 = swift_allocObject();
              *(_OWORD *)(v126 + 16) = xmmword_1B8BA4AB0;
              v127 = MEMORY[0x1E0DEA968];
              *(_QWORD *)(v126 + 56) = MEMORY[0x1E0DEA968];
              v128 = sub_1B8B0FBFC();
              *(_QWORD *)(v126 + 32) = v115;
              *(_QWORD *)(v126 + 40) = v116;
              *(_QWORD *)(v126 + 96) = v127;
              *(_QWORD *)(v126 + 104) = v128;
              v45 = v188;
              *(_QWORD *)(v126 + 64) = v128;
              *(_QWORD *)(v126 + 72) = v122;
              *(_QWORD *)(v126 + 80) = v123;
              v129 = sub_1B8B9C158();
              v100 = v130;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v16 = v212;
              swift_bridgeObjectRelease();
              v78 = v211;
              v77 = v110;
              v76 = (uint64_t)v208;
              v102 = v129;
              goto LABEL_85;
            }
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
      }
      v131 = v220;
      v132 = v221;
      __swift_project_boxed_opaque_existential_1(&v219, v220);
      v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 48))(v131, v132);
      v103 = v208;
      v77 = v110;
      if (v134)
      {
        v135 = v133;
        v100 = v134;
        v136 = HIBYTE(v134) & 0xF;
        if ((v134 & 0x2000000000000000) == 0)
          v136 = v133 & 0xFFFFFFFFFFFFLL;
        if (v136)
        {
          swift_bridgeObjectRelease();
          v102 = v135;
          v78 = v211;
          v76 = (uint64_t)v103;
          goto LABEL_85;
        }
        swift_bridgeObjectRelease();
      }
      v137 = v220;
      v138 = v221;
      __swift_project_boxed_opaque_existential_1(&v219, v220);
      v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 40))(v137, v138);
      if (v140)
      {
        v98 = v139;
        v100 = v140;
        v141 = HIBYTE(v140) & 0xF;
        if ((v140 & 0x2000000000000000) == 0)
          v141 = v139 & 0xFFFFFFFFFFFFLL;
        v78 = v211;
        v76 = (uint64_t)v103;
        if (v141)
        {
LABEL_50:
          swift_bridgeObjectRelease();
          v102 = v98;
          goto LABEL_85;
        }
        swift_bridgeObjectRelease();
        v100 = v187;
        goto LABEL_84;
      }
      v100 = v187;
    }
    else
    {
      v100 = v104;
    }
    v78 = v211;
    v76 = (uint64_t)v103;
LABEL_84:
    v102 = v186;
LABEL_85:
    v79 = v214;
    if ((a8 & 1) != 0)
    {
      v206 = v102;
      a4 = v100;
    }
    else
    {
      if (!v100)
      {
        v85 = (uint64_t)v38;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v219);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v222);
        a4 = 0;
        goto LABEL_91;
      }
      v142 = v102;
      swift_bridgeObjectRetain();
      sub_1B8B9C0F8();
      v143 = CUIKBundle();
      sub_1B8B9B15C();
      sub_1B8B9C1A0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA08);
      v144 = v142;
      v145 = v77;
      v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = xmmword_1B8BA6070;
      *(_QWORD *)(v146 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v146 + 64) = sub_1B8B0FBFC();
      *(_QWORD *)(v146 + 32) = v144;
      *(_QWORD *)(v146 + 40) = v100;
      v79 = v214;
      v206 = sub_1B8B9C158();
      a4 = v147;
      swift_bridgeObjectRelease();
      v77 = v145;
      v76 = (uint64_t)v208;
      swift_bridgeObjectRelease();
      v78 = v211;
      swift_bridgeObjectRelease();
    }
LABEL_89:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v219);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v222);
    if (!a4)
      goto LABEL_90;
    goto LABEL_30;
  }
  v60 = a4 & 0x2000000000000000;
  v61 = HIBYTE(a4) & 0xF;
  v62 = a3 & 0xFFFFFFFFFFFFLL;
LABEL_21:
  if (v60)
    v66 = v61;
  else
    v66 = v62;
  if (!v66)
    goto LABEL_25;
LABEL_31:
  if (v60)
    v80 = v61;
  else
    v80 = v62;
  if (v80)
  {
    v81 = v199;
    sub_1B8ADE850(v209, v199, &qword_1ED1B3020);
    v82 = sub_1B8B9B054();
    v83 = *(_QWORD *)(v82 - 8);
    v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82);
    swift_bridgeObjectRetain();
    v76 = (uint64_t)v208;
    if (v84 == 1)
    {
      sub_1B8ADE894(v81, &qword_1ED1B3020);
      v78 = v211;
      v85 = (uint64_t)v210;
LABEL_40:
      sub_1B8B9AFDC();
      v90 = v76;
      v91 = v215;
      sub_1B8B9AFA0();
      v79 = v214;
      v212 = (_QWORD *)v214[7];
      ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v212)(v91, 0, 1, v16);
      v92 = v207;
      v77 = v91;
      v76 = v90;
      goto LABEL_92;
    }
    v86 = (void *)sub_1B8B9B018();
    v88 = v87;
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v81, v82);
    v222[0] = v86;
    v222[1] = v88;
    *(_QWORD *)&v219 = v206;
    *((_QWORD *)&v219 + 1) = a4;
    sub_1B8ADDBE4();
    v89 = sub_1B8B9C584();
    swift_bridgeObjectRelease();
    v78 = v211;
    v85 = (uint64_t)v210;
    if ((v89 & 1) == 0)
      goto LABEL_40;
    swift_bridgeObjectRelease();
    v77 = v215;
    v79 = v214;
    a8 = v207;
  }
  else
  {
    v85 = (uint64_t)v38;
    v76 = (uint64_t)v208;
    v77 = v215;
    v78 = v211;
    v79 = v214;
  }
LABEL_91:
  v212 = (_QWORD *)v79[7];
  ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))v212)(v77, 1, 1, v16);
  v92 = a8;
LABEL_92:
  v222[0] = 0;
  v148 = v92;
  sub_1B8B0D8B0(v209, v204 & 1, v92, v222, v203, v76);
  if (v78)
  {
    v149 = *v78;
    *v78 = 0;

  }
  ((void (*)(char *, uint64_t, uint64_t, _QWORD *))v212)(v213, 1, 1, v16);
  sub_1B8ADE850(v77, (uint64_t)v45, &qword_1ED1B3030);
  v150 = (unsigned int (*)(uint64_t, uint64_t, _QWORD *))v79[6];
  if (v150((uint64_t)v45, 1, v16) == 1)
  {
    v209 = a4;
    v151 = v76;
    v152 = v148;
    v153 = v205;
LABEL_98:
    v156 = (uint64_t)v213;
    sub_1B8ADE894((uint64_t)v213, &qword_1ED1B3030);
    sub_1B8ADE894((uint64_t)v45, &qword_1ED1B3030);
    sub_1B8ADE850(v151, v85, &qword_1ED1B3030);
    if (v150(v85, 1, v16) == 1)
    {
      sub_1B8ADE894(v85, &qword_1ED1B3030);
      v157 = v198;
      sub_1B8ADE850(v215, v198, &qword_1ED1B3030);
      if (v150(v157, 1, v16) == 1)
      {
        sub_1B8ADE894(v157, &qword_1ED1B3030);
        v156 = (uint64_t)v213;
        v158 = (uint64_t)v213;
        v159 = 1;
      }
      else
      {
        v176 = v157;
        v177 = (void (*)(char *, uint64_t, _QWORD *))v214[4];
        v178 = v191;
        v177(v191, v176, v16);
        v156 = (uint64_t)v213;
        v177(v213, (uint64_t)v178, v16);
        v158 = v156;
        v159 = 0;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))v212)(v158, v159, 1, v16);
    }
    else
    {
      v160 = v214;
      v161 = v201;
      ((void (*)(char *, uint64_t, _QWORD *))v214[4])(v201, v85, v16);
      ((void (*)(uint64_t, char *, _QWORD *))v160[2])(v156, v161, v16);
      ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v212)(v156, 0, 1, v16);
      if (v211)
      {
        v162 = v222[0];
        v163 = *v211;
        *v211 = v222[0];
        v164 = v162;

        v160 = v214;
      }
      ((void (*)(char *, _QWORD *))v160[1])(v201, v16);
    }
    v76 = v151;
    goto LABEL_113;
  }
  v154 = (void (*)(char *, char *, _QWORD *))v79[4];
  v155 = v202;
  v154(v202, v45, v16);
  v45 = v200;
  sub_1B8ADE850(v76, (uint64_t)v200, &qword_1ED1B3030);
  if (v150((uint64_t)v45, 1, v16) == 1)
  {
    v209 = a4;
    v151 = v76;
    ((void (*)(char *, _QWORD *))v79[1])(v155, v16);
    v153 = v205;
    v152 = v207;
    v85 = (uint64_t)v210;
    goto LABEL_98;
  }
  v165 = v196;
  v154(v196, v45, v16);
  v166 = v194;
  sub_1B8B9AF58();
  if (v192)
  {
    v167 = v195;
    sub_1B8B9AF7C();
    v168 = v165;
    v169 = v166;
    v170 = (void (*)(char *, _QWORD *))v214[1];
    v170(v169, v16);
    v171 = (uint64_t)v193;
    v172 = v202;
    sub_1B8B9AF7C();
    v170(v167, v16);
    v156 = (uint64_t)v213;
    sub_1B8ADE894((uint64_t)v213, &qword_1ED1B3030);
    ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v212)(v171, 0, 1, v16);
    sub_1B8B0FC40(v171, v156);
    v153 = v205;
    if (v211)
    {
      v173 = v222[0];
      v174 = *v211;
      *v211 = v222[0];
      v175 = v173;

    }
    v170(v168, v16);
    v170(v172, v16);
  }
  else
  {
    v179 = v195;
    v180 = v202;
    sub_1B8B9AF7C();
    v181 = v166;
    v182 = (void (*)(char *, _QWORD *))v214[1];
    v182(v181, v16);
    v183 = (uint64_t)v193;
    sub_1B8B9AF7C();
    v182(v179, v16);
    v182(v165, v16);
    v182(v180, v16);
    v156 = (uint64_t)v213;
    sub_1B8ADE894((uint64_t)v213, &qword_1ED1B3030);
    ((void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v212)(v183, 0, 1, v16);
    sub_1B8B0FC40(v183, v156);
    v153 = v205;
  }
  v152 = v207;
LABEL_113:
  sub_1B8B0E0A8(v156, v152, v153);
  sub_1B8ADE894(v156, &qword_1ED1B3030);
  sub_1B8ADE894(v76, &qword_1ED1B3030);
  sub_1B8ADE894(v215, &qword_1ED1B3030);

  return swift_bridgeObjectRelease();
}

void sub_1B8B0D8B0(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  char *v92;
  _BYTE *v93;
  char *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  unint64_t v99;
  __int16 v100;
  uint64_t v101;

  v93 = a5;
  v95 = a4;
  LODWORD(v91) = a2;
  v101 = *MEMORY[0x1E0C80C00];
  v9 = sub_1B8B9AFE8();
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v10);
  v90 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B8B9B198();
  v88 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  MEMORY[0x1E0C80A78](v12);
  v87 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_1B8B9AF94();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v92 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1B8B9B054();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v94 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x20) == 0)
    goto LABEL_15;
  v85 = v15;
  v86 = v16;
  v84 = a6;
  sub_1B8ADE850(a1, (uint64_t)v20, &qword_1ED1B3020);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_1B8ADE894((uint64_t)v20, &qword_1ED1B3020);
LABEL_14:
    a6 = v84;
    v15 = v85;
    v16 = v86;
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a6, 1, 1, v15);
    return;
  }
  v24 = v21;
  v25 = v94;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v94, v20, v21);
  v26 = sub_1B8B9B018();
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v29 = v26 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
    goto LABEL_14;
  }
  v100 = 0;
  if (v95)
  {
    v30 = *(void **)v95;
    *(_QWORD *)v95 = 0;

  }
  v31 = (void *)objc_opt_self();
  v32 = (void *)sub_1B8B9B024();
  v33 = v31;
  v34 = objc_msgSend(v31, sel_synchronousTitleForURL_incomplete_, v32, (char *)&v100 + 1);

  v83 = v22;
  if (v34)
  {
    v82 = sub_1B8B9C17C();
    v36 = v35;

    v37 = (a3 & 0x40) == 0;
    if (!((unint64_t)v95 | a3 & 0x40))
    {
      if (v36)
      {
        sub_1B8B9AFDC();
        v38 = v92;
        sub_1B8B9AFA0();
        goto LABEL_27;
      }
      goto LABEL_34;
    }
  }
  else
  {
    v37 = (a3 & 0x40) == 0;
    if (!((unint64_t)v95 | a3 & 0x40))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v36 = 0;
    v82 = 0;
  }
  v39 = (void *)sub_1B8B9B024();
  v98 = 0;
  v40 = objc_msgSend(v33, sel_synchronousOutlineIconForURL_isBroadcast_outImageName_incomplete_, v39, v91 & 1, &v98, &v100);

  v41 = v98;
  v91 = v98;
  if (v95)
  {
    v42 = *(void **)v95;
    *(_QWORD *)v95 = v98;
    v43 = v41;

  }
  else
  {
    v44 = v98;
  }
  if (v40)
    v45 = v37;
  else
    v45 = 1;
  if ((v45 & 1) != 0)
  {
    if (v36)
    {
      sub_1B8B9AFDC();
      v38 = v92;
      sub_1B8B9AFA0();

LABEL_27:
      v46 = v84;
      v47 = v85;
      v48 = v93;
      v49 = v86;
      if (!v93)
      {
LABEL_29:
        (*(void (**)(char *, uint64_t))(v83 + 8))(v25, v24);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v46, v38, v47);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v47);
        return;
      }
LABEL_28:
      *v48 = (HIBYTE(v100) | v100) & 1;
      goto LABEL_29;
    }
    goto LABEL_35;
  }
  if (!v36)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v50 = objc_allocWithZone(MEMORY[0x1E0DC12B0]);
  v51 = v40;
  v81 = objc_msgSend(v50, sel_init);
  v95 = v51;
  objc_msgSend(v81, sel_setImage_, v51);
  v98 = 0;
  v99 = 0xE000000000000000;
  sub_1B8B9C9D4();
  v52 = (uint64_t)v98;
  v53 = v99;
  sub_1B8B9C0F8();
  v54 = CUIKBundle();
  sub_1B8B9B15C();
  sub_1B8B9C1A0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA08);
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1B8BA4AB0;
  v56 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v55 + 56) = MEMORY[0x1E0DEA968];
  v57 = sub_1B8B0FBFC();
  *(_QWORD *)(v55 + 32) = v52;
  *(_QWORD *)(v55 + 40) = v53;
  *(_QWORD *)(v55 + 96) = v56;
  *(_QWORD *)(v55 + 104) = v57;
  v58 = v82;
  *(_QWORD *)(v55 + 64) = v57;
  *(_QWORD *)(v55 + 72) = v58;
  *(_QWORD *)(v55 + 80) = v36;
  swift_bridgeObjectRetain();
  sub_1B8B9C158();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v59 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v60 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  v61 = objc_msgSend(v59, sel_initWithString_, v60);

  v62 = objc_msgSend(v61, sel_string);
  v63 = (void *)sub_1B8B9C17C();
  v65 = v64;

  v98 = v63;
  v99 = v65;
  v96 = v52;
  v97 = v53;
  v66 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v90, 1, 1, v89);
  sub_1B8ADDBE4();
  v67 = (void *)sub_1B8B9C578();
  v69 = v68;
  LOBYTE(v65) = v70;
  sub_1B8ADE894(v66, &qword_1ED1B3018);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
    v98 = v67;
    v99 = v69;
    v71 = objc_msgSend(v61, sel_string);
    v72 = sub_1B8B9C17C();
    v74 = v73;

    v96 = v72;
    v97 = v74;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA18);
    sub_1B8ADE950(&qword_1EF1BCA20, &qword_1EF1BCA18, MEMORY[0x1E0DEB8A8]);
    v75 = sub_1B8B9C4E8();
    v76 = v81;
    objc_msgSend(v61, sel_addAttribute_value_range_, *MEMORY[0x1E0DC10F8], v81, v75, v77);
    v78 = v61;
    v38 = v92;
    sub_1B8B9AFB8();

    v79 = v95;
    v46 = v84;
    v47 = v85;
    v48 = v93;
    v25 = v94;
    v49 = v86;
    if (!v93)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_1B8B0E0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, _QWORD);
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t result;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[40];

  v71 = a2;
  v72 = a3;
  v4 = sub_1B8B9AFF4();
  MEMORY[0x1E0C80A78](v4);
  v66 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3040);
  MEMORY[0x1E0C80A78](v65);
  v64 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B8B9AE80();
  v73 = *(_QWORD *)(v7 - 8);
  v74 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B8B9AF88();
  v75 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v59 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v59 - v16;
  v18 = sub_1B8B9AF70();
  v69 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3028);
  v22 = MEMORY[0x1E0C80A78](v21);
  v70 = (uint64_t)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v68 = (char *)&v59 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1B8B9AF94();
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  v33 = v32;
  v35 = v34;
  sub_1B8ADE850(v31, (uint64_t)v27, &qword_1ED1B3030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v27, 1, v33) == 1)
  {
    sub_1B8ADE894((uint64_t)v27, &qword_1ED1B3030);
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v37 = v72;
    v38 = 1;
    return v36((uint64_t)v37, v38, 1, v33);
  }
  v63 = v10;
  v39 = v35;
  v40 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v40(v30, v27, v33);
  v41 = v72;
  if ((v71 & 0x100) == 0)
  {
LABEL_12:
    v40(v41, v30, v33);
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
    v37 = v41;
    v38 = 0;
    return v36((uint64_t)v37, v38, 1, v33);
  }
  v60 = v40;
  v61 = v30;
  v71 = v39;
  v62 = v33;
  sub_1B8B9AF64();
  sub_1B8ADBDEC(&qword_1ED1B2FE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEFA0], MEMORY[0x1E0CAEFA8]);
  sub_1B8B9C3F8();
  v42 = v63;
  while (1)
  {
    sub_1B8B9C404();
    sub_1B8ADBDEC(&qword_1ED1B2FF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
    v43 = sub_1B8B9C0EC();
    v44 = *(void (**)(char *, uint64_t))(v75 + 8);
    v44(v15, v42);
    if ((v43 & 1) != 0)
    {
      v44(v17, v42);
      v47 = 1;
      v48 = v75;
      v49 = (uint64_t)v68;
      goto LABEL_10;
    }
    v45 = (void (*)(char *, _QWORD))sub_1B8B9C434();
    v45(v76, 0);
    sub_1B8B9AE74();
    v46 = sub_1B8B9AE68();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v9, v74);
    if ((v46 & 1) != 0)
      break;
    sub_1B8B9C410();
  }
  v48 = v75;
  v49 = (uint64_t)v68;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v68, v17, v42);
  v47 = 0;
LABEL_10:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, v47, 1, v42);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v20, v18);
  v50 = v70;
  sub_1B8ADE850(v49, v70, &qword_1ED1B3028);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v50, 1, v42);
  v52 = v71;
  if (v51 == 1)
  {
    sub_1B8ADE894(v49, &qword_1ED1B3028);
    sub_1B8ADE894(v50, &qword_1ED1B3028);
    v41 = v72;
    v30 = v61;
    v33 = v62;
    v39 = v52;
    v40 = v60;
    goto LABEL_12;
  }
  v54 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v67, v50, v42);
  result = sub_1B8B9C0EC();
  if ((result & 1) != 0)
  {
    v55 = (uint64_t)v64;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v64, v54, v42);
    sub_1B8ADE950(&qword_1ED1B3000, &qword_1ED1B3040, MEMORY[0x1E0DEC940]);
    v56 = v61;
    sub_1B8B9AFAC();
    sub_1B8ADE894(v55, &qword_1ED1B3040);
    v57 = v72;
    sub_1B8B9AFC4();
    v44(v54, v42);
    sub_1B8ADE894(v49, &qword_1ED1B3028);
    v58 = v62;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v62);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v57, 0, 1, v58);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B0E6A8(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v6 = *a1;
  v5 = a1[1];
  v7 = *a1 == a2 && v5 == a3;
  if (!v7 && (sub_1B8B9C8D8() & 1) == 0)
    return 1;
  v8 = a4[3];
  v9 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v8);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 392))(v8, v9))
    return 1;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA00);
  v10 = sub_1B8B9C6EC();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 1;
  }
  v12 = v10 + 32;
  while (1)
  {
    sub_1B8B0FC88(v12, (uint64_t)v28);
    v13 = v29;
    v14 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    sub_1B8B0FC88((uint64_t)v28, (uint64_t)v25);
    if (v15 != 2)
      goto LABEL_10;
    v16 = v26;
    v17 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 24);
    swift_bridgeObjectRetain();
    v20 = v19(v16, v18);
    if (!v21)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      goto LABEL_11;
    }
    if (v6 == v20 && v21 == v5)
      break;
    v23 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if ((v23 & 1) != 0)
      goto LABEL_23;
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    v12 += 40;
    if (!--v11)
      goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
LABEL_23:
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return 0;
}

uint64_t sub_1B8B0E8D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = a3;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v5 = (uint64_t (*)(_QWORD *))result;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = MEMORY[0x1E0DEE9D8];
    v15 = (uint64_t (*)(_QWORD *))result;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v19 = v8;
        if ((result & 1) == 0)
        {
          result = sub_1B8B3733C(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v13 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        if (v13 >= v12 >> 1)
        {
          result = sub_1B8B3733C(v12 > 1, v13 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v13 + 1;
        v14 = v8 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v10;
        *(_QWORD *)(v14 + 40) = v9;
        v4 = a3;
        v5 = v15;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

id LocationDescriptionGenerator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LocationDescriptionGenerator.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationDescriptionGenerator();
  return objc_msgSendSuper2(&v2, sel_init);
}

id LocationDescriptionGenerator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationDescriptionGenerator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static LocationDescriptionGenerator.locationString(for:options:incomplete:leadingImageName:)(void *a1, uint64_t a2, _BYTE *a3, id *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id *v20;
  id v21;
  id v22;
  uint64_t v23;
  _BYTE *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;

  v26 = a2;
  v7 = sub_1B8B9AF94();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v25 - v18;
  if (a1)
  {
    v25 = a3;
    v20 = a4;
    v21 = a1;
    v22 = objc_msgSend(v21, sel_uniqueID);

    if (v22)
    {

      *((_QWORD *)&v28 + 1) = &type metadata for EKEventModelWrapper;
      v29 = sub_1B8B0F6D0();
      *(_QWORD *)&v27 = v21;
      a4 = v20;
      a3 = v25;
      goto LABEL_6;
    }

    a4 = v20;
    a3 = v25;
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
LABEL_6:
  static LocationDescriptionGenerator.locationString(for:options:incomplete:leadingImageName:)((uint64_t)&v27, v26, a3, a4, v19);
  sub_1B8ADE894((uint64_t)&v27, &qword_1ED1B2FF8);
  sub_1B8ADE850((uint64_t)v19, (uint64_t)v17, &qword_1ED1B3030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1)
  {
    v23 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v17, v7);
    sub_1B8B0F694();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    v23 = sub_1B8B9C494();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  sub_1B8ADE894((uint64_t)v19, &qword_1ED1B3030);
  return v23;
}

uint64_t static LocationDescriptionGenerator.locationString(for:locationWithoutPrediction:preferredLocation:conferenceURL:conferenceURLIsBroadcast:options:incomplete:leadingImageName:)(void *a1, void *a2, void *a3, uint64_t a4, int a5, uint64_t a6, _BYTE *a7, id *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  int v34;
  id *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _UNKNOWN **v41;

  v38 = a6;
  v35 = a8;
  v36 = a7;
  v34 = a5;
  v37 = a4;
  v11 = sub_1B8B9AF94();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v33 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v32 - v21;
  if (a1)
  {
    v23 = a1;
    v24 = sub_1B8B9C1AC();
    a1 = v25;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v27 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_7;
  }
  v24 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v26 = a2;
  v27 = sub_1B8B9C1AC();
  a2 = v28;
  if (a3)
  {
LABEL_4:
    *((_QWORD *)&v40 + 1) = &type metadata for EKLocationModelWrapper;
    v41 = &protocol witness table for EKLocationModelWrapper;
    *(_QWORD *)&v39 = a3;
    goto LABEL_8;
  }
LABEL_7:
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
LABEL_8:
  v29 = a3;
  sub_1B8B0C3DC(v24, (unint64_t)a1, v27, (unint64_t)a2, &v39, v37, v34 & 1, v38, v22, v36, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B8ADE894((uint64_t)&v39, &qword_1ED1B3038);
  sub_1B8ADE850((uint64_t)v22, (uint64_t)v20, &qword_1ED1B3030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11) == 1)
  {
    v30 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v20, v11);
    sub_1B8B0F694();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v33, v16, v11);
    v30 = sub_1B8B9C494();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  sub_1B8ADE894((uint64_t)v22, &qword_1ED1B3030);
  return v30;
}

uint64_t static LocationDescriptionGenerator.conferenceString(for:conferenceURLIsBroadcast:options:outImageName:incomplete:)(uint64_t a1, int a2, char a3, void *a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v23;
  _BYTE *v24;

  v23 = a4;
  v24 = a5;
  v8 = sub_1B8B9AF94();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v23 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v23 - v19;
  sub_1B8B0D8B0(a1, a2, a3, v23, v24, (uint64_t)&v23 - v19);
  sub_1B8ADE850((uint64_t)v20, (uint64_t)v18, &qword_1ED1B3030);
  v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v18, v8);
    sub_1B8B0F694();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v21 = sub_1B8B9C494();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  sub_1B8ADE894((uint64_t)v20, &qword_1ED1B3030);
  return v21;
}

uint64_t sub_1B8B0F450(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[6];
  _QWORD v22[3];
  uint64_t v23[5];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 264))(v2, v3);
  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  v5 = v4;
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 240);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1B8B9C50C();
  v22[1] = v22;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v22 - v12;
  v8(v6, v7);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v23[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v23[4] = AssociatedConformanceWitness;
    __swift_allocate_boxed_opaque_existential_1(v23);
    (*(void (**)(void))(v14 + 32))();
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v18 = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if (v18)
    {
      v19 = sub_1B8B9C1F4();
      if (v19 < 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        MEMORY[0x1E0C80A78](v19);
        v21[2] = v16;
        v21[3] = v18;
        v21[4] = a1;
        v5 = sub_1B8B0E8D0((uint64_t)sub_1B8B0FCCC, (uint64_t)v21, v5);
        swift_bridgeObjectRelease();
      }
    }
  }
  return v5;
}

uint64_t type metadata accessor for LocationDescriptionGenerator()
{
  return objc_opt_self();
}

unint64_t sub_1B8B0F694()
{
  unint64_t result;

  result = qword_1ED1B3008;
  if (!qword_1ED1B3008)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED1B3008);
  }
  return result;
}

unint64_t sub_1B8B0F6D0()
{
  unint64_t result;

  result = qword_1EF1B9590;
  if (!qword_1EF1B9590)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKEventModelWrapper, &type metadata for EKEventModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1B9590);
  }
  return result;
}

uint64_t sub_1B8B0F714(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t AssociatedConformanceWitness;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v2 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v5);
  sub_1B8ADE850(a1, (uint64_t)v31, &qword_1ED1B3038);
  v6 = v32;
  if (!v32)
  {
    sub_1B8ADE894((uint64_t)v31, &qword_1ED1B3038);
    v28 = 0u;
    v29 = 0u;
    AssociatedConformanceWitness = 0;
LABEL_10:
    sub_1B8ADE894((uint64_t)&v28, &qword_1EF1BCA28);
    return 0;
  }
  v27[0] = v4;
  v7 = v33;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1B8B9C50C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v27 - v12;
  v8(v6, v7);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    AssociatedConformanceWitness = 0;
    v28 = 0u;
    v29 = 0u;
  }
  else
  {
    *((_QWORD *)&v29 + 1) = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
    (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_10;
  sub_1B8B0BBC8(&v28, (uint64_t)v31);
  v16 = v32;
  v17 = v33;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = v32;
  v21 = v33;
  __swift_project_boxed_opaque_existential_1(v31, v32);
  if (v19)
  {
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  }
  else
  {
    switch((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        sub_1B8B9C0F8();
        CUIKBundle();
        sub_1B8B9B15C();
        v22 = sub_1B8B9C1A0();
        break;
      default:
        v25 = v32;
        v26 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
        break;
    }
  }
  v23 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return v23;
}

uint64_t _s13CalendarUIKit28LocationDescriptionGeneratorC5label3forSo8NSStringCSgSo012EKStructuredC0CSg_tFZ_0(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _UNKNOWN **v8;

  if (a1)
  {
    *((_QWORD *)&v7 + 1) = &type metadata for EKLocationModelWrapper;
    v8 = &protocol witness table for EKLocationModelWrapper;
    *(_QWORD *)&v6 = a1;
  }
  else
  {
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
  }
  v1 = a1;
  sub_1B8B0F714((uint64_t)&v6);
  v3 = v2;
  sub_1B8ADE894((uint64_t)&v6, &qword_1ED1B3038);
  if (!v3)
    return 0;
  v4 = sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_1B8B0FBFC()
{
  unint64_t result;

  result = qword_1EF1BCA10;
  if (!qword_1EF1BCA10)
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF1BCA10);
  }
  return result;
}

uint64_t sub_1B8B0FC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B0FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B8B0FCCC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B8B0E6A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32)) & 1;
}

uint64_t sub_1B8B0FCEC()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  v1 = (void *)sub_1B8B9C14C();
  v2 = objc_msgSend(v0, sel_initWithPath_, v1);

  if (v2)
  {
    v3 = (void *)sub_1B8B9C14C();
    v4 = (objc_class *)objc_msgSend(v2, sel_classNamed_, v3);

    if (v4)
    {
      swift_getObjCClassMetadata();
      v5 = &unk_1EF207CA0;
      class_addProtocol(v4, (Protocol *)v5);

      return swift_dynamicCastTypeToObjCProtocolConditional();
    }

  }
  if (qword_1EF1BB4E8 != -1)
    swift_once();
  v7 = sub_1B8B9B318();
  __swift_project_value_buffer(v7, (uint64_t)qword_1EF1CF290);
  v8 = sub_1B8B9B300();
  v9 = sub_1B8B9C440();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B8A6A000, v8, v9, "FAProfilePictureStore not available", v10, 2u);
    MEMORY[0x1BCCB7A9C](v10, -1, -1);
  }

  return 0;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t EventCalendarModelObject.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.id.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t EventCalendarModelObject.type.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.type.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.externalID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.externalID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.externalID.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.title.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.displayOrder.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t EventCalendarModelObject.displayOrder.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.displayOrder.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.color.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.color.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.color.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.allowsContentModifications.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t EventCalendarModelObject.allowsContentModifications.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.allowsContentModifications.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.sharingStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t EventCalendarModelObject.sharingStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.sharingStatus.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[136];

  sub_1B8B10154(v1 + 96, (uint64_t)v4);
  sub_1B8B10154((uint64_t)v4, a1);
  return sub_1B8B10240((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B1019C);
}

uint64_t sub_1B8B10154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B1019C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t EventCalendarModelObject.source.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[136];
  _BYTE v4[144];

  sub_1B8B10154(a1, (uint64_t)v3);
  sub_1B8B10154(v1 + 96, (uint64_t)v4);
  sub_1B8B10240((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B102AC);
  return sub_1B8B10154((uint64_t)v3, v1 + 96);
}

uint64_t sub_1B8B10240(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int16 *)(a1 + 132) << 32));
  return a1;
}

uint64_t sub_1B8B102AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*EventCalendarModelObject.source.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.isSubscribed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 230);
}

uint64_t EventCalendarModelObject.isSubscribed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 230) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.isSubscribed.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.isHolidayCalendar.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 231);
}

uint64_t EventCalendarModelObject.isHolidayCalendar.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 231) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.isHolidayCalendar.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.isSubscribedHolidayCalendar.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 232);
}

uint64_t EventCalendarModelObject.isSubscribedHolidayCalendar.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 232) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.isSubscribedHolidayCalendar.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.isSuggestedEventCalendar.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 233);
}

uint64_t EventCalendarModelObject.isSuggestedEventCalendar.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 233) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.isSuggestedEventCalendar.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.allowsEvents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 234);
}

uint64_t EventCalendarModelObject.allowsEvents.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 234) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.allowsEvents.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.allowsScheduling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 235);
}

uint64_t EventCalendarModelObject.allowsScheduling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 235) = result;
  return result;
}

uint64_t (*EventCalendarModelObject.allowsScheduling.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.sharedOwnerAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.sharedOwnerAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 240) = a1;
  *(_QWORD *)(v2 + 248) = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.sharedOwnerAddress.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.sharedOwnerAddresses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EventCalendarModelObject.sharedOwnerAddresses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 256) = a1;
  return result;
}

uint64_t (*EventCalendarModelObject.sharedOwnerAddresses.modify())()
{
  return nullsub_1;
}

uint64_t EventCalendarModelObject.ownerIdentityAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EventCalendarModelObject();
  return sub_1B8ADE850(v1 + *(int *)(v3 + 84), a1, &qword_1ED1B3020);
}

uint64_t type metadata accessor for EventCalendarModelObject()
{
  uint64_t result;

  result = qword_1EF1BCAE8;
  if (!qword_1EF1BCAE8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EventCalendarModelObject.ownerIdentityAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for EventCalendarModelObject() + 84);
  return sub_1B8AE3654(a1, v3);
}

uint64_t (*EventCalendarModelObject.ownerIdentityAddress.modify())()
{
  type metadata accessor for EventCalendarModelObject();
  return nullsub_1;
}

uint64_t EventCalendarModelObject.ownerIdentityEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventCalendarModelObject() + 88));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.ownerIdentityEmail.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for EventCalendarModelObject() + 88));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.ownerIdentityEmail.modify())()
{
  type metadata accessor for EventCalendarModelObject();
  return nullsub_1;
}

uint64_t EventCalendarModelObject.ownerIdentityPhoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EventCalendarModelObject() + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventCalendarModelObject.ownerIdentityPhoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for EventCalendarModelObject() + 92));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*EventCalendarModelObject.ownerIdentityPhoneNumber.modify())()
{
  type metadata accessor for EventCalendarModelObject();
  return nullsub_1;
}

uint64_t EventCalendarModelObject.isDefaultCalendarForNewEvents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EventCalendarModelObject() + 96));
}

uint64_t EventCalendarModelObject.isDefaultCalendarForNewEvents.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for EventCalendarModelObject();
  *(_BYTE *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*EventCalendarModelObject.isDefaultCalendarForNewEvents.modify())()
{
  type metadata accessor for EventCalendarModelObject();
  return nullsub_1;
}

int8x16_t EventCalendarModelObject.constraints.getter@<Q0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  int32x2_t v5;
  int64x2_t v6;
  int8x16_t result;
  _BYTE v8[136];
  _BYTE v9[112];
  int8x16_t v10;
  unsigned int v11;
  unsigned __int16 v12;

  sub_1B8B10154(v1 + 96, (uint64_t)v8);
  sub_1B8B10154((uint64_t)v8, (uint64_t)v9);
  v3 = sub_1B8B1079C((uint64_t)v9);
  v4 = v11 | ((unint64_t)v12 << 32);
  if (v3 == 1)
    v4 = 0;
  v5 = vdup_n_s32(v3 == 1);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), (int8x16_t)xmmword_1B8BA8480, v10);
  *a1 = result;
  a1[1].i32[0] = v4;
  a1[1].i16[2] = WORD2(v4);
  return result;
}

uint64_t sub_1B8B1079C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t EventCalendarModelObject.init(id:type:externalID:title:displayOrder:color:allowsContentModifications:sharingStatus:source:isSubscribed:isHolidayCalendar:isSubscribedHolidayCalendar:isSuggestedEventCalendar:allowsEvents:allowsScheduling:sharedOwnerAddress:sharedOwnerAddresses:ownerIdentityAddress:ownerIdentityEmail:ownerIdentityPhoneNumber:isDefaultCalendarForNewEvents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, char a16, char a17, char a18, char a19, char a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  int *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t result;
  _BYTE v43[144];

  sub_1B8B10154(a14, (uint64_t)v43);
  v29 = (int *)type metadata accessor for EventCalendarModelObject();
  v30 = a9 + v29[21];
  v31 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = (_QWORD *)(a9 + v29[22]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(a9 + v29[23]);
  *v33 = 0;
  v33[1] = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = a13;
  sub_1B8B10154((uint64_t)v43, a9 + 96);
  *(_BYTE *)(a9 + 230) = a15;
  *(_BYTE *)(a9 + 231) = a16;
  *(_BYTE *)(a9 + 232) = a17;
  *(_BYTE *)(a9 + 233) = a18;
  *(_BYTE *)(a9 + 234) = a19;
  *(_BYTE *)(a9 + 235) = a20;
  *(_OWORD *)(a9 + 240) = a21;
  *(_QWORD *)(a9 + 256) = a22;
  sub_1B8AE3654(a23, v30);
  swift_bridgeObjectRelease();
  *v32 = a24;
  v32[1] = a25;
  result = swift_bridgeObjectRelease();
  *v33 = a26;
  v33[1] = a27;
  *(_BYTE *)(a9 + v29[24]) = a28;
  return result;
}

uint64_t EventCalendarModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AssociatedTypeWitness;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v83;
  char *v84;
  char *v85;
  int *v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  _QWORD v91[5];
  _BYTE v92[136];
  __int128 v93;
  uint64_t v94;
  _BYTE v95[136];
  __int128 v96;
  __int128 v97;
  uint64_t AssociatedConformanceWitness;
  _BYTE v99[144];

  v87 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v3);
  v85 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for EventCalendarModelObject();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 9) = 0;
  sub_1B8B11044((uint64_t)v99);
  v83 = v7 + 96;
  sub_1B8B10154((uint64_t)v99, (uint64_t)(v7 + 96));
  *((_QWORD *)v7 + 30) = 0;
  *((_QWORD *)v7 + 31) = 0;
  v8 = (uint64_t)&v7[v5[21]];
  v9 = sub_1B8B9B054();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v89 = v8;
  v10(v8, 1, 1, v9);
  v11 = &v7[v5[22]];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v90 = v11;
  v86 = v5;
  v12 = &v7[v5[23]];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v84 = v12;
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  *(_QWORD *)v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14);
  *((_QWORD *)v7 + 1) = v15;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  *((_QWORD *)v7 + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(v16, v17);
  v18 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  *((_QWORD *)v7 + 3) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
  *((_QWORD *)v7 + 4) = v20;
  v21 = a1[3];
  v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  *((_QWORD *)v7 + 5) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 64))(v21, v22);
  *((_QWORD *)v7 + 6) = v23;
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  *((_QWORD *)v7 + 7) = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 72))(v24, v25);
  v26 = a1[3];
  v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  *((_QWORD *)v7 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 80))(v26, v27);
  *((_QWORD *)v7 + 9) = v28;
  v29 = a1[3];
  v30 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v29);
  v7[80] = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v29, v30) & 1;
  v31 = a1[3];
  v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  *((_QWORD *)v7 + 11) = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 96))(v31, v32);
  v34 = a1[3];
  v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  v88 = *(void (**)(uint64_t, uint64_t))(v33 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = sub_1B8B9C50C();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v83 - v38;
  v88(v34, v33);
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v39, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    AssociatedConformanceWitness = 0;
    v96 = 0u;
    v97 = 0u;
  }
  else
  {
    *((_QWORD *)&v97 + 1) = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v96);
    (*(void (**)(uint64_t *, char *, uint64_t))(v40 + 32))(boxed_opaque_existential_1, v39, AssociatedTypeWitness);
  }
  v43 = v86;
  v42 = v87;
  v45 = (uint64_t *)v84;
  v44 = (uint64_t)v85;
  v46 = (uint64_t)v83;
  sub_1B8ADE850((uint64_t)&v96, (uint64_t)&v93, &qword_1EF1BCA48);
  if (v94)
  {
    sub_1B8B0BBC8(&v93, (uint64_t)v95);
    sub_1B8B0FC88((uint64_t)v95, (uint64_t)v91);
    EventSourceModelObject.init(_:)(v91, (uint64_t)v92);
    nullsub_1(v92);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    v47 = v92;
  }
  else
  {
    v47 = v99;
  }
  sub_1B8B10154((uint64_t)v47, (uint64_t)v95);
  sub_1B8ADE894((uint64_t)&v96, &qword_1EF1BCA48);
  sub_1B8B10154(v46, (uint64_t)v92);
  sub_1B8B10240((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B102AC);
  sub_1B8B10154((uint64_t)v95, v46);
  v48 = a1[3];
  v49 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v48);
  v7[230] = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 112))(v48, v49) & 1;
  v50 = a1[3];
  v51 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v50);
  v7[231] = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 120))(v50, v51) & 1;
  v52 = a1[3];
  v53 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v52);
  v7[232] = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 128))(v52, v53) & 1;
  v54 = a1[3];
  v55 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v54);
  v7[233] = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 136))(v54, v55) & 1;
  v56 = a1[3];
  v57 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v56);
  v7[234] = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 144))(v56, v57) & 1;
  v58 = a1[3];
  v59 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v58);
  v7[235] = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 152))(v58, v59) & 1;
  v60 = a1[3];
  v61 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v60);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 160))(v60, v61);
  v64 = v63;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 30) = v62;
  *((_QWORD *)v7 + 31) = v64;
  v65 = a1[3];
  v66 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v65);
  *((_QWORD *)v7 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 168))(v65, v66);
  v67 = a1[3];
  v68 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v67);
  (*(void (**)(uint64_t, uint64_t))(v68 + 176))(v67, v68);
  sub_1B8AE3654(v44, v89);
  v69 = a1[3];
  v70 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v69);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 184))(v69, v70);
  v73 = v72;
  v74 = (uint64_t *)v90;
  swift_bridgeObjectRelease();
  *v74 = v71;
  v74[1] = v73;
  v75 = a1[3];
  v76 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v75);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 192))(v75, v76);
  v79 = v78;
  swift_bridgeObjectRelease();
  *v45 = v77;
  v45[1] = v79;
  v80 = a1[3];
  v81 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v80);
  v7[v43[24]] = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 200))(v80, v81) & 1;
  sub_1B8B11060((uint64_t)v7, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1B8B110A4((uint64_t)v7);
}

double sub_1B8B11044(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 126) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B8B11060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventCalendarModelObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B110A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventCalendarModelObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EventCalendarModelObject.hash(into:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[22];
  _OWORD v26[7];
  _BYTE v27[22];
  _BYTE v28[136];
  _BYTE v29[152];

  v1 = v0;
  v2 = sub_1B8B9B054();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v6);
  v17 = (uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C974();
  if (v0[4])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C974();
  if (v0[9])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  sub_1B8B9C980();
  sub_1B8B9C974();
  sub_1B8B10154((uint64_t)(v0 + 12), (uint64_t)v28);
  sub_1B8B10154((uint64_t)v28, (uint64_t)v29);
  if (sub_1B8B1079C((uint64_t)v29) == 1)
  {
    sub_1B8B9C980();
  }
  else
  {
    sub_1B8B10154((uint64_t)v28, (uint64_t)v26);
    v24 = v26[6];
    *(_OWORD *)v25 = *(_OWORD *)v27;
    *(_QWORD *)&v25[14] = *(_QWORD *)&v27[14];
    v20 = v26[2];
    v21 = v26[3];
    v22 = v26[4];
    v23 = v26[5];
    v18 = v26[0];
    v19 = v26[1];
    sub_1B8B9C980();
    EventSourceModelObject.hash(into:)();
  }
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  sub_1B8B9C980();
  if (v0[31])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  v8 = v0[32];
  sub_1B8B9C974();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v16 = v5;
    v10 = v2;
    v11 = v3;
    swift_bridgeObjectRetain();
    v12 = v8 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B8B9C1E8();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    v3 = v11;
    v2 = v10;
    v5 = v16;
  }
  v13 = (int *)type metadata accessor for EventCalendarModelObject();
  v14 = v17;
  sub_1B8ADE850((uint64_t)v1 + v13[21], v17, &qword_1ED1B3020);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
  {
    sub_1B8B9C980();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v14, v2);
    sub_1B8B9C980();
    sub_1B8ADBDEC(&qword_1EF1BC010, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    sub_1B8B9C0C8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(_QWORD *)((char *)v1 + v13[22] + 8))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  if (*(_QWORD *)((char *)v1 + v13[23] + 8))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  return sub_1B8B9C980();
}

uint64_t sub_1B8B11588(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B115B0 + 4 * byte_1B8BA8490[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1B8B115B0()
{
  return 1701869940;
}

uint64_t sub_1B8B115C0()
{
  return 0x6C616E7265747865;
}

uint64_t sub_1B8B115DC()
{
  return 0x656C746974;
}

uint64_t sub_1B8B115F0()
{
  return 0x4F79616C70736964;
}

uint64_t sub_1B8B11610()
{
  return 0x726F6C6F63;
}

unint64_t sub_1B8B11624()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B8B117A8()
{
  unsigned __int8 *v0;

  return sub_1B8B11588(*v0);
}

uint64_t sub_1B8B117B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B146F4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8B117D4(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_1B8B117E0()
{
  sub_1B8B1320C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B11808()
{
  sub_1B8B1320C();
  return sub_1B8B9C9EC();
}

uint64_t EventCalendarModelObject.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  _QWORD v12[17];
  _QWORD v13[16];
  char v14;
  uint64_t v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B1320C();
  sub_1B8B9C9C8();
  LOBYTE(v13[0]) = 0;
  sub_1B8B9C86C();
  if (!v2)
  {
    v13[0] = v3[2];
    LOBYTE(v12[0]) = 1;
    type metadata accessor for EKCalendarType(0);
    sub_1B8ADBDEC(&qword_1EF1BCA60, (uint64_t (*)(uint64_t))type metadata accessor for EKCalendarType, (uint64_t)&protocol conformance descriptor for EKCalendarType);
    sub_1B8B9C8A8();
    LOBYTE(v13[0]) = 2;
    sub_1B8B9C848();
    LOBYTE(v13[0]) = 3;
    sub_1B8B9C86C();
    LOBYTE(v13[0]) = 4;
    sub_1B8B9C890();
    LOBYTE(v13[0]) = 5;
    sub_1B8B9C848();
    LOBYTE(v13[0]) = 6;
    sub_1B8B9C878();
    v15 = v3[11];
    v14 = 7;
    type metadata accessor for EKSharingStatus(0);
    sub_1B8ADBDEC(&qword_1EF1BCA68, (uint64_t (*)(uint64_t))type metadata accessor for EKSharingStatus, (uint64_t)&protocol conformance descriptor for EKSharingStatus);
    sub_1B8B9C8A8();
    sub_1B8B10154((uint64_t)(v3 + 12), (uint64_t)v13);
    sub_1B8B10154((uint64_t)v13, (uint64_t)v12);
    v11 = 8;
    sub_1B8B13250();
    sub_1B8B9C860();
    LOBYTE(v12[0]) = 9;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 10;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 11;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 12;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 13;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 14;
    sub_1B8B9C878();
    LOBYTE(v12[0]) = 15;
    sub_1B8B9C848();
    v12[0] = v3[32];
    v11 = 16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA78);
    sub_1B8B132D8(&qword_1EF1BCA80, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1B8B9C8A8();
    type metadata accessor for EventCalendarModelObject();
    LOBYTE(v12[0]) = 17;
    sub_1B8B9B054();
    sub_1B8ADBDEC(&qword_1EF1BC028, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1B8B9C860();
    LOBYTE(v12[0]) = 18;
    sub_1B8B9C848();
    LOBYTE(v12[0]) = 19;
    sub_1B8B9C848();
    LOBYTE(v12[0]) = 20;
    sub_1B8B9C878();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t EventCalendarModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventCalendarModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t EventCalendarModelObject.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  _BYTE v55[136];
  _QWORD v56[17];
  _BYTE v57[144];
  uint64_t *v58;

  v45 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v3);
  v44 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA88);
  v5 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for EventCalendarModelObject();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10[3] = 0;
  v10[4] = 0;
  v10[8] = 0;
  v10[9] = 0;
  sub_1B8B11044((uint64_t)v57);
  v52 = v10 + 12;
  sub_1B8B10154((uint64_t)v57, (uint64_t)(v10 + 12));
  v10[30] = 0;
  v10[31] = 0;
  v11 = (uint64_t)v10 + v8[21];
  v12 = sub_1B8B9B054();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v51 = v11;
  v13(v11, 1, 1, v12);
  v14 = (uint64_t *)((char *)v10 + v8[22]);
  *v14 = 0;
  v14[1] = 0;
  v50 = v14;
  v15 = v8[23];
  v58 = v10;
  v16 = (uint64_t *)((char *)v10 + v15);
  *v16 = 0;
  v16[1] = 0;
  v49 = v16;
  v17 = *(_QWORD *)(a1 + 24);
  v47 = a1;
  v18 = (_QWORD *)a1;
  v19 = v7;
  __swift_project_boxed_opaque_existential_1(v18, v17);
  sub_1B8B1320C();
  v20 = v48;
  sub_1B8B9C9B0();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1(v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8B10154((uint64_t)v52, (uint64_t)v56);
    sub_1B8B10240((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B102AC);
    swift_bridgeObjectRelease();
    sub_1B8ADE894(v51, &qword_1ED1B3020);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v48 = v12;
    v21 = v5;
    LOBYTE(v56[0]) = 0;
    v22 = sub_1B8B9C7DC();
    v23 = v58;
    *v58 = v22;
    v23[1] = v24;
    type metadata accessor for EKCalendarType(0);
    v55[0] = 1;
    sub_1B8ADBDEC(&qword_1EF1BCA90, (uint64_t (*)(uint64_t))type metadata accessor for EKCalendarType, (uint64_t)&protocol conformance descriptor for EKCalendarType);
    sub_1B8B9C818();
    v23[2] = v56[0];
    LOBYTE(v56[0]) = 2;
    v23[3] = sub_1B8B9C7A0();
    v23[4] = v25;
    LOBYTE(v56[0]) = 3;
    v23[5] = sub_1B8B9C7DC();
    v23[6] = v26;
    LOBYTE(v56[0]) = 4;
    v23[7] = sub_1B8B9C800();
    LOBYTE(v56[0]) = 5;
    v23[8] = sub_1B8B9C7A0();
    v23[9] = v27;
    LOBYTE(v56[0]) = 6;
    *((_BYTE *)v23 + 80) = sub_1B8B9C7E8() & 1;
    type metadata accessor for EKSharingStatus(0);
    v55[0] = 7;
    sub_1B8ADBDEC(&qword_1EF1BCA98, (uint64_t (*)(uint64_t))type metadata accessor for EKSharingStatus, (uint64_t)&protocol conformance descriptor for EKSharingStatus);
    sub_1B8B9C818();
    v23[11] = v56[0];
    v55[135] = 8;
    sub_1B8B13294();
    sub_1B8B9C7D0();
    sub_1B8B10154((uint64_t)v56, (uint64_t)v55);
    sub_1B8B10154((uint64_t)v55, (uint64_t)v52);
    LOBYTE(v54) = 9;
    v28 = v19;
    *((_BYTE *)v58 + 230) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 10;
    *((_BYTE *)v58 + 231) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 11;
    *((_BYTE *)v58 + 232) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 12;
    *((_BYTE *)v58 + 233) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 13;
    *((_BYTE *)v58 + 234) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 14;
    *((_BYTE *)v58 + 235) = sub_1B8B9C7E8() & 1;
    LOBYTE(v54) = 15;
    v29 = sub_1B8B9C7A0();
    v30 = v58;
    v58[30] = v29;
    v30[31] = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA78);
    v53 = 16;
    sub_1B8B132D8(&qword_1EF1BCAA8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1B8B9C818();
    v58[32] = v54;
    LOBYTE(v54) = 17;
    sub_1B8ADBDEC(&qword_1EF1BC038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    sub_1B8B9C7D0();
    sub_1B8AE3654(v44, v51);
    LOBYTE(v54) = 18;
    v32 = sub_1B8B9C7A0();
    v34 = v33;
    v35 = v50;
    swift_bridgeObjectRelease();
    *v35 = v32;
    v35[1] = v34;
    LOBYTE(v54) = 19;
    v36 = sub_1B8B9C7A0();
    v38 = v37;
    v39 = v49;
    swift_bridgeObjectRelease();
    *v39 = v36;
    v39[1] = v38;
    LOBYTE(v54) = 20;
    LOBYTE(v36) = sub_1B8B9C7E8();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v46);
    v40 = v36 & 1;
    v41 = (uint64_t)v58;
    *((_BYTE *)v58 + v8[24]) = v40;
    sub_1B8B11060(v41, v45);
    __swift_destroy_boxed_opaque_existential_1(v47);
    return sub_1B8B110A4(v41);
  }
}

uint64_t sub_1B8B125F0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1B8B125F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B12624()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B12650()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_1B8B12658()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B12684()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t sub_1B8B1268C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t sub_1B8B12694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[136];

  sub_1B8B10154(v1 + 96, (uint64_t)v4);
  sub_1B8B10154((uint64_t)v4, a1);
  return sub_1B8B10240((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B1019C);
}

uint64_t sub_1B8B126E0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 230);
}

uint64_t sub_1B8B126E8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 231);
}

uint64_t sub_1B8B126F0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 232);
}

uint64_t sub_1B8B126F8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 233);
}

uint64_t sub_1B8B12700()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 234);
}

uint64_t sub_1B8B12708()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 235);
}

uint64_t sub_1B8B12710()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B1273C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B12744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B8ADE850(v2 + *(int *)(a1 + 84), a2, &qword_1ED1B3020);
}

uint64_t sub_1B8B1276C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 88));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1B8B127A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 92));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1B8B127D4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_1B8B127E0()
{
  sub_1B8B9C968();
  EventCalendarModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B12820()
{
  sub_1B8B9C968();
  EventCalendarModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B12858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EventCalendarModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8B1286C(_QWORD *a1)
{
  return EventCalendarModelObject.encode(to:)(a1);
}

uint64_t sub_1B8B12880@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

int8x16_t sub_1B8B1288C@<Q0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  int32x2_t v5;
  int64x2_t v6;
  int8x16_t result;
  _BYTE v8[136];
  _BYTE v9[112];
  int8x16_t v10;
  unsigned int v11;
  unsigned __int16 v12;

  sub_1B8B10154(v1 + 96, (uint64_t)v8);
  sub_1B8B10154((uint64_t)v8, (uint64_t)v9);
  v3 = sub_1B8B1079C((uint64_t)v9);
  v4 = v11 | ((unint64_t)v12 << 32);
  if (v3 == 1)
    v4 = 0;
  v5 = vdup_n_s32(v3 == 1);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), (int8x16_t)xmmword_1B8BA8480, v10);
  *a1 = result;
  a1[1].i32[0] = v4;
  a1[1].i16[2] = WORD2(v4);
  return result;
}

uint64_t sub_1B8B1291C()
{
  sub_1B8ADBDEC(&qword_1EF1BCB18, (uint64_t (*)(uint64_t))type metadata accessor for EKSharingStatus, (uint64_t)&unk_1B8BA55CC);
  return sub_1B8B9C2CC();
}

uint64_t sub_1B8B12990()
{
  sub_1B8ADBDEC(&qword_1EF1BCB18, (uint64_t (*)(uint64_t))type metadata accessor for EKSharingStatus, (uint64_t)&unk_1B8BA55CC);
  return sub_1B8B9C2B4();
}

uint64_t sub_1B8B129F4()
{
  sub_1B8ADBDEC(&qword_1EF1BCB10, (uint64_t (*)(uint64_t))type metadata accessor for EKCalendarType, (uint64_t)&unk_1B8BA5528);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8B12A68()
{
  sub_1B8ADBDEC(&qword_1EF1BCB10, (uint64_t (*)(uint64_t))type metadata accessor for EKCalendarType, (uint64_t)&unk_1B8BA5528);
  return sub_1B8B9C2A8();
}

uint64_t _s13CalendarUIKit05EventA11ModelObjectV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[7];
  _BYTE v52[22];
  _OWORD v53[7];
  _BYTE v54[22];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[22];
  _BYTE v63[136];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[22];
  uint64_t v72[17];
  uint64_t v73;
  _BYTE v74[136];
  _BYTE v75[136];
  _BYTE v76[152];

  v4 = sub_1B8B9B054();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC208);
  MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v47 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v47 - v17;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v19 = sub_1B8B9C8D8(), v20 = 0, (v19 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      goto LABEL_38;
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a2 + 32);
    if (v21)
    {
      if (!v22)
        goto LABEL_38;
      if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24) || v21 != v22)
      {
        v23 = sub_1B8B9C8D8();
        v20 = 0;
        if ((v23 & 1) == 0)
          return v20 & 1;
      }
    }
    else if (v22)
    {
      goto LABEL_38;
    }
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
    {
      v24 = sub_1B8B9C8D8();
      v20 = 0;
      if ((v24 & 1) == 0)
        return v20 & 1;
    }
    if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
    {
LABEL_38:
      v20 = 0;
      return v20 & 1;
    }
    v25 = *(_QWORD *)(a1 + 72);
    v26 = *(_QWORD *)(a2 + 72);
    if (v25)
    {
      if (!v26)
        goto LABEL_38;
      if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64) || v25 != v26)
      {
        v27 = sub_1B8B9C8D8();
        v20 = 0;
        if ((v27 & 1) == 0)
          return v20 & 1;
      }
    }
    else if (v26)
    {
      goto LABEL_38;
    }
    if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80) || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      goto LABEL_38;
    sub_1B8B10154(a1 + 96, (uint64_t)v74);
    sub_1B8B10154(a2 + 96, (uint64_t)v75);
    sub_1B8B10154((uint64_t)v74, (uint64_t)v76);
    if (sub_1B8B1079C((uint64_t)v76) == 1)
    {
      sub_1B8B10154((uint64_t)v75, (uint64_t)v72);
      if (sub_1B8B1079C((uint64_t)v72) == 1)
        goto LABEL_32;
    }
    else
    {
      sub_1B8B10154((uint64_t)v74, (uint64_t)&v64);
      sub_1B8B10154((uint64_t)v75, (uint64_t)v72);
      if (sub_1B8B1079C((uint64_t)v72) != 1)
      {
        sub_1B8B10154((uint64_t)v75, (uint64_t)v53);
        v51[6] = v53[6];
        *(_OWORD *)v52 = *(_OWORD *)v54;
        *(_QWORD *)&v52[14] = *(_QWORD *)&v54[14];
        v51[2] = v53[2];
        v51[3] = v53[3];
        v51[4] = v53[4];
        v51[5] = v53[5];
        v51[0] = v53[0];
        v51[1] = v53[1];
        LODWORD(v49) = _s13CalendarUIKit22EventSourceModelObjectV2eeoiySbAC_ACtFZ_0((uint64_t)&v64, (uint64_t)v51);
        v61 = v70;
        *(_OWORD *)v62 = *(_OWORD *)v71;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v71[14];
        v57 = v66;
        v58 = v67;
        v59 = v68;
        v60 = v69;
        v55 = v64;
        v56 = v65;
        sub_1B8B10154((uint64_t)v74, (uint64_t)v63);
        sub_1B8B15004((uint64_t)v63);
        sub_1B8B15058((uint64_t)&v55);
        if ((v49 & 1) == 0)
          goto LABEL_38;
LABEL_32:
        if (*(unsigned __int8 *)(a1 + 230) != *(unsigned __int8 *)(a2 + 230)
          || *(unsigned __int8 *)(a1 + 231) != *(unsigned __int8 *)(a2 + 231)
          || *(unsigned __int8 *)(a1 + 232) != *(unsigned __int8 *)(a2 + 232)
          || *(unsigned __int8 *)(a1 + 233) != *(unsigned __int8 *)(a2 + 233)
          || *(unsigned __int8 *)(a1 + 234) != *(unsigned __int8 *)(a2 + 234)
          || *(unsigned __int8 *)(a1 + 235) != *(unsigned __int8 *)(a2 + 235))
        {
          goto LABEL_38;
        }
        v29 = *(_QWORD *)(a1 + 248);
        v30 = *(_QWORD *)(a2 + 248);
        if (v29)
        {
          if (!v30 || (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a2 + 240) || v29 != v30) && (sub_1B8B9C8D8() & 1) == 0)
            goto LABEL_38;
        }
        else if (v30)
        {
          goto LABEL_38;
        }
        if ((sub_1B8B88A5C(*(_QWORD **)(a1 + 256), *(_QWORD **)(a2 + 256)) & 1) == 0)
          goto LABEL_38;
        v48 = (int *)type metadata accessor for EventCalendarModelObject();
        sub_1B8ADE850(a1 + v48[21], (uint64_t)v18, &qword_1ED1B3020);
        sub_1B8ADE850(a2 + v48[21], (uint64_t)v16, &qword_1ED1B3020);
        v31 = *(int *)(v8 + 48);
        v32 = v50;
        v49 = v50 + v31;
        sub_1B8ADE850((uint64_t)v18, v50, &qword_1ED1B3020);
        sub_1B8ADE850((uint64_t)v16, v49, &qword_1ED1B3020);
        v33 = v32;
        v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v34(v33, 1, v4) == 1)
        {
          sub_1B8ADE894((uint64_t)v16, &qword_1ED1B3020);
          sub_1B8ADE894((uint64_t)v18, &qword_1ED1B3020);
          if (v34(v49, 1, v4) == 1)
          {
            sub_1B8ADE894(v50, &qword_1ED1B3020);
LABEL_55:
            v37 = v48[22];
            v38 = (_QWORD *)(a1 + v37);
            v39 = *(_QWORD *)(a1 + v37 + 8);
            v40 = (_QWORD *)(a2 + v37);
            v41 = v40[1];
            if (v39)
            {
              if (!v41 || (*v38 != *v40 || v39 != v41) && (sub_1B8B9C8D8() & 1) == 0)
                goto LABEL_38;
            }
            else if (v41)
            {
              goto LABEL_38;
            }
            v42 = v48[23];
            v43 = (_QWORD *)(a1 + v42);
            v44 = *(_QWORD *)(a1 + v42 + 8);
            v45 = (_QWORD *)(a2 + v42);
            v46 = v45[1];
            if (v44)
            {
              if (!v46 || (*v43 != *v45 || v44 != v46) && (sub_1B8B9C8D8() & 1) == 0)
                goto LABEL_38;
LABEL_69:
              v20 = *(_BYTE *)(a1 + v48[24]) ^ *(_BYTE *)(a2 + v48[24]) ^ 1;
              return v20 & 1;
            }
            if (!v46)
              goto LABEL_69;
            goto LABEL_38;
          }
        }
        else
        {
          sub_1B8ADE850(v50, (uint64_t)v13, &qword_1ED1B3020);
          if (v34(v49, 1, v4) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v49, v4);
            sub_1B8ADBDEC(&qword_1EF1BC210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
            v35 = sub_1B8B9C0EC();
            v36 = *(void (**)(char *, uint64_t))(v5 + 8);
            v36(v7, v4);
            sub_1B8ADE894((uint64_t)v16, &qword_1ED1B3020);
            sub_1B8ADE894((uint64_t)v18, &qword_1ED1B3020);
            v36(v13, v4);
            sub_1B8ADE894(v50, &qword_1ED1B3020);
            if ((v35 & 1) == 0)
              goto LABEL_38;
            goto LABEL_55;
          }
          sub_1B8ADE894((uint64_t)v16, &qword_1ED1B3020);
          sub_1B8ADE894((uint64_t)v18, &qword_1ED1B3020);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
        }
        sub_1B8ADE894(v50, &qword_1EF1BC208);
        goto LABEL_38;
      }
      v61 = v70;
      *(_OWORD *)v62 = *(_OWORD *)v71;
      *(_QWORD *)&v62[14] = *(_QWORD *)&v71[14];
      v57 = v66;
      v58 = v67;
      v59 = v68;
      v60 = v69;
      v55 = v64;
      v56 = v65;
      sub_1B8B10154((uint64_t)v74, (uint64_t)v63);
      sub_1B8B15004((uint64_t)v63);
      sub_1B8B15004((uint64_t)v63);
      sub_1B8B15058((uint64_t)&v55);
    }
    sub_1B8B10154((uint64_t)v74, (uint64_t)v72);
    sub_1B8B10154((uint64_t)v75, (uint64_t)&v73);
    sub_1B8B10240((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1B8B1019C);
    sub_1B8B14F00(v72);
    goto LABEL_38;
  }
  return v20 & 1;
}

unint64_t sub_1B8B1320C()
{
  unint64_t result;

  result = qword_1EF1BCA58;
  if (!qword_1EF1BCA58)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA8834, &type metadata for EventCalendarModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCA58);
  }
  return result;
}

unint64_t sub_1B8B13250()
{
  unint64_t result;

  result = qword_1EF1BCA70;
  if (!qword_1EF1BCA70)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventSourceModelObject, &type metadata for EventSourceModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BCA70);
  }
  return result;
}

unint64_t sub_1B8B13294()
{
  unint64_t result;

  result = qword_1EF1BCAA0;
  if (!qword_1EF1BCAA0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventSourceModelObject, &type metadata for EventSourceModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BCAA0);
  }
  return result;
}

uint64_t sub_1B8B132D8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCA78);
    v8 = a2;
    result = MEMORY[0x1BCCB79D0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B1333C()
{
  unint64_t result;

  result = qword_1EF1BCAB0;
  if (!qword_1EF1BCAB0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventSourceModelObject, &type metadata for EventSourceModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BCAB0);
  }
  return result;
}

uint64_t sub_1B8B13380(uint64_t a1)
{
  uint64_t result;

  result = sub_1B8ADBDEC(&qword_1EF1BCAB8, (uint64_t (*)(uint64_t))type metadata accessor for EventCalendarModelObject, (uint64_t)&protocol conformance descriptor for EventCalendarModelObject);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B8B133BC()
{
  return sub_1B8ADBDEC(&qword_1EF1BCAC0, (uint64_t (*)(uint64_t))type metadata accessor for EventCalendarModelObject, (uint64_t)&protocol conformance descriptor for EventCalendarModelObject);
}

_UNKNOWN **sub_1B8B133E8()
{
  return &protocol witness table for EventSourceConstraintsModelObject;
}

uint64_t initializeBufferWithCopyOfBuffer for EventCalendarModelObject(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(a1 + 88) = a2[11];
    v9 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v9;
      v10 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v10;
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
      *(_BYTE *)(a1 + 156) = *((_BYTE *)a2 + 156);
      v11 = a2[21];
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_QWORD *)(a1 + 168) = v11;
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
      *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
      *(_QWORD *)(a1 + 222) = *(uint64_t *)((char *)a2 + 222);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *((_OWORD *)a2 + 13);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 208) = v13;
      *(_QWORD *)(a1 + 222) = *(uint64_t *)((char *)a2 + 222);
      v14 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v14;
      v15 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 176) = v15;
      v16 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v16;
    }
    *(_DWORD *)(a1 + 230) = *(_DWORD *)((char *)a2 + 230);
    *(_WORD *)(a1 + 234) = *((_WORD *)a2 + 117);
    v17 = a2[31];
    *(_QWORD *)(a1 + 240) = a2[30];
    *(_QWORD *)(a1 + 248) = v17;
    v18 = a3[21];
    v19 = (void *)(a1 + v18);
    v20 = (char *)a2 + v18;
    *(_QWORD *)(a1 + 256) = a2[32];
    v21 = sub_1B8B9B054();
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v25 = a3[22];
    v26 = a3[23];
    v27 = (_QWORD *)(a1 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (_QWORD *)(a1 + v26);
    v31 = (uint64_t *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    *(_BYTE *)(a1 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for EventCalendarModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 84);
  v5 = sub_1B8B9B054();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventCalendarModelObject(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v8;
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v9;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
    v10 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v10;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v13;
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
  }
  *(_DWORD *)(a1 + 230) = *(_DWORD *)(a2 + 230);
  *(_WORD *)(a1 + 234) = *(_WORD *)(a2 + 234);
  v15 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v15;
  v16 = a3[21];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v19 = sub_1B8B9B054();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v23 = a3[22];
  v24 = a3[23];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(a1 + v24);
  v29 = (_QWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EventCalendarModelObject(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = (_OWORD *)(a1 + 96);
  v7 = (_OWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v9 = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v9;
      v10 = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v10;
      v11 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
      *(_OWORD *)(a1 + 208) = v11;
    }
    else
    {
      sub_1B8B13E54(a1 + 96);
      *v6 = *v7;
      v15 = *(_OWORD *)(a2 + 160);
      v17 = *(_OWORD *)(a2 + 112);
      v16 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v15;
      *(_OWORD *)(a1 + 112) = v17;
      *(_OWORD *)(a1 + 128) = v16;
      v19 = *(_OWORD *)(a2 + 192);
      v18 = *(_OWORD *)(a2 + 208);
      v20 = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
      *(_OWORD *)(a1 + 192) = v19;
      *(_OWORD *)(a1 + 208) = v18;
      *(_OWORD *)(a1 + 176) = v20;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
    *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v12 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v12;
    v13 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v13;
    v14 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
    *(_OWORD *)(a1 + 208) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *v6 = *v7;
    v21 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v23;
    *(_OWORD *)(a1 + 112) = v21;
    *(_OWORD *)(a1 + 128) = v22;
    v24 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 192);
    v26 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 176) = v24;
  }
  *(_BYTE *)(a1 + 230) = *(_BYTE *)(a2 + 230);
  *(_BYTE *)(a1 + 231) = *(_BYTE *)(a2 + 231);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
  *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[21];
  v28 = (void *)(a1 + v27);
  v29 = (void *)(a2 + v27);
  v30 = sub_1B8B9B054();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 24))(v28, v29, v30);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_13;
  }
  if (v34)
  {
LABEL_13:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_14:
  v36 = a3[22];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = a3[23];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  return a1;
}

uint64_t sub_1B8B13E54(uint64_t a1)
{
  destroy for EventSourceModelObject();
  return a1;
}

uint64_t initializeWithTake for EventCalendarModelObject(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(_DWORD *)(a1 + 230) = *(_DWORD *)(a2 + 230);
  *(_WORD *)(a1 + 234) = *(_WORD *)(a2 + 234);
  v13 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v14 = a3[21];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  *(_OWORD *)(a1 + 240) = v13;
  v17 = sub_1B8B9B054();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[23];
  *(_OWORD *)(a1 + a3[22]) = *(_OWORD *)(a2 + a3[22]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  return a1;
}

uint64_t assignWithTake for EventCalendarModelObject(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 104))
  {
    v8 = *(_QWORD *)(a2 + 104);
    if (v8)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v8;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v9;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v10;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
      goto LABEL_6;
    }
    sub_1B8B13E54(a1 + 96);
  }
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
  v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v12;
  v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
LABEL_6:
  *(_BYTE *)(a1 + 230) = *(_BYTE *)(a2 + 230);
  *(_BYTE *)(a1 + 231) = *(_BYTE *)(a2 + 231);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
  *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
  v15 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  v16 = a3[21];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = sub_1B8B9B054();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_11;
  }
  if (v23)
  {
LABEL_11:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_12:
  v25 = a3[22];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[23];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCalendarModelObject()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B142EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 84), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EventCalendarModelObject()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B14378(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 84), a2, a2, v7);
  }
  return result;
}

void sub_1B8B143F0()
{
  unint64_t v0;

  sub_1B8AE8FDC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for EventCalendarModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCalendarModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_1B8B1459C + 4 * byte_1B8BA84AA[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_1B8B145D0 + 4 * byte_1B8BA84A5[v4]))();
}

uint64_t sub_1B8B145D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B145D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B145E0);
  return result;
}

uint64_t sub_1B8B145EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B145F4);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_1B8B145F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B14600(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventCalendarModelObject.CodingKeys()
{
  return &type metadata for EventCalendarModelObject.CodingKeys;
}

unint64_t sub_1B8B14620()
{
  unint64_t result;

  result = qword_1EF1BCAF8;
  if (!qword_1EF1BCAF8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA880C, &type metadata for EventCalendarModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCAF8);
  }
  return result;
}

unint64_t sub_1B8B14668()
{
  unint64_t result;

  result = qword_1EF1BCB00;
  if (!qword_1EF1BCB00)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA877C, &type metadata for EventCalendarModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCB00);
  }
  return result;
}

unint64_t sub_1B8B146B0()
{
  unint64_t result;

  result = qword_1EF1BCB08;
  if (!qword_1EF1BCB08)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA87A4, &type metadata for EventCalendarModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCB08);
  }
  return result;
}

uint64_t sub_1B8B146F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616E7265747865 && a2 == 0xEA00000000004449 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4F79616C70736964 && a2 == 0xEC00000072656472 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B8BB79E0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x53676E6972616873 && a2 == 0xED00007375746174 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7263736275537369 && a2 == 0xEC00000064656269 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB7A00 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001B8BB7A20 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B8BB7A40 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x764573776F6C6C61 && a2 == 0xEC00000073746E65 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB7A60 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B8BB7A80 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B8BB7AA0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B8BB7AC0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B8BB7AE0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B8BB7B00 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001B8BB7B20)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 20;
    else
      return 21;
  }
}

uint64_t *sub_1B8B14F00(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[18];
  v4 = a1[17];
  sub_1B8B102AC(*a1, a1[1]);
  sub_1B8B102AC(v4, v3);
  return a1;
}

uint64_t sub_1B8B15004(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B15058(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

id EKEventIntegrationModelWrapper.ekEvent.getter()
{
  id *v0;

  return *v0;
}

void EKEventIntegrationModelWrapper.ekEvent.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKEventIntegrationModelWrapper.ekEvent.modify())()
{
  return nullsub_1;
}

id EKEventIntegrationModelWrapper.isCompleted.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_completed);
}

id EKEventIntegrationModelWrapper.color.getter()
{
  id *v0;
  id result;
  void *v2;
  id v3;

  result = objc_msgSend(*v0, sel_color);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_CUIK_color);

    if (v3)
      return (id)MEMORY[0x1BCCB5F78](v3);
    else
      return 0;
  }
  return result;
}

uint64_t EKEventIntegrationModelWrapper.reminderListTitle.getter()
{
  return 0;
}

CalendarUIKit::EKEventIntegrationModelWrapper_optional __swiftcall EKEventIntegrationModelWrapper.init(_:)(EKEvent a1)
{
  Class *v1;
  Class isa;
  Class *v3;
  objc_class *v4;
  Swift::Bool v5;
  CalendarUIKit::EKEventIntegrationModelWrapper_optional result;

  isa = a1.super.super.super.isa;
  v3 = v1;
  v4 = (objc_class *)-[objc_class isIntegrationEvent](a1.super.super.super.isa, sel_isIntegrationEvent);
  if (!(_DWORD)v4)
  {

    isa = 0;
  }
  *v3 = isa;
  result.value.ekEvent.super.super.super.isa = v4;
  result.is_nil = v5;
  return result;
}

id sub_1B8B151BC()
{
  id *v0;

  return objc_msgSend(*v0, sel_completed);
}

id sub_1B8B151DC()
{
  id *v0;
  id result;
  void *v2;
  id v3;

  result = objc_msgSend(*v0, sel_color);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_CUIK_color);

    if (v3)
      return (id)MEMORY[0x1BCCB5F78](v3);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B8B15244()
{
  return 0;
}

ValueMetadata *type metadata accessor for EKEventIntegrationModelWrapper()
{
  return &type metadata for EKEventIntegrationModelWrapper;
}

uint64_t destroy for CreateFamilyCalendarView()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CreateFamilyCalendarView(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CreateFamilyCalendarView(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CreateFamilyCalendarView(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateFamilyCalendarView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateFamilyCalendarView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateFamilyCalendarView()
{
  return &type metadata for CreateFamilyCalendarView;
}

uint64_t sub_1B8B15454()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B15464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v60 = a5;
  v59 = a4;
  v58 = a3;
  v57 = a2;
  v56 = a1;
  v66 = a6;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBC0);
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v61 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBC8);
  v7 = MEMORY[0x1E0C80A78](v63);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v62 = (uint64_t)&v55 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBD0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBD8);
  v15 = MEMORY[0x1E0C80A78](v55);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v67 = (uint64_t)&v55 - v18;
  sub_1B8B9B780();
  v19 = CUIKBundle();
  v73 = sub_1B8B9BBA0();
  v74 = v20;
  v75 = v21 & 1;
  v76 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBE0);
  v23 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCBE8);
  v24 = sub_1B8B9B7C8();
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB4C8];
  v26 = sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
  v27 = sub_1B8ADBDEC(&qword_1EF1BCBF8, v25, MEMORY[0x1E0CDB4A8]);
  v83 = v23;
  v84 = v24;
  v85 = v26;
  v86 = v27;
  swift_getOpaqueTypeConformance2();
  v28 = v56;
  sub_1B8B9BFA8();
  v29 = (void *)objc_opt_self();
  v73 = MEMORY[0x1BCCB5F78](objc_msgSend(v29, sel_cuik_tertiaryGroupedBackgroundColor));
  swift_retain();
  v30 = sub_1B8B9BF30();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  swift_release();
  *(_QWORD *)&v17[*(int *)(v55 + 36)] = v30;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1B8B06074((uint64_t)v17, v67, &qword_1EF1BCBD8);
  v68 = v57;
  v69 = v58 & 1;
  v70 = v59;
  v71 = v60;
  v72 = v28;
  sub_1B8B9B780();
  v31 = CUIKBundle();
  v32 = sub_1B8B9BBA0();
  v34 = v33;
  LOBYTE(v14) = v35;
  v37 = v36;
  LOBYTE(v28) = sub_1B8B9B9E4();
  sub_1B8B9B3E4();
  v73 = v32;
  v74 = v34;
  v75 = v14 & 1;
  v76 = v37;
  v77 = v28;
  v78 = v38;
  v79 = v39;
  v80 = v40;
  v81 = v41;
  v82 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC08);
  sub_1B8B182E0();
  v42 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCC18);
  v43 = type metadata accessor for FamilyCalendarColorSelectionView();
  v44 = sub_1B8ADE950(&qword_1EF1BCC20, &qword_1EF1BCC18, MEMORY[0x1E0CDFA50]);
  v45 = sub_1B8ADBDEC(&qword_1EF1BCC28, (uint64_t (*)(uint64_t))type metadata accessor for FamilyCalendarColorSelectionView, (uint64_t)&unk_1B8BAD9A0);
  v83 = v42;
  v84 = v43;
  v85 = v44;
  v86 = v45;
  swift_getOpaqueTypeConformance2();
  v46 = v61;
  sub_1B8B9BFA8();
  v73 = MEMORY[0x1BCCB5F78](objc_msgSend(v29, sel_cuik_tertiaryGroupedBackgroundColor));
  swift_retain();
  v47 = sub_1B8B9BF30();
  v48 = v64;
  v49 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v9, v46, v65);
  swift_release();
  *(_QWORD *)&v9[*(int *)(v63 + 36)] = v47;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v49);
  v50 = v62;
  sub_1B8B06074((uint64_t)v9, v62, &qword_1EF1BCBC8);
  v51 = v67;
  sub_1B8ADE850(v67, (uint64_t)v17, &qword_1EF1BCBD8);
  sub_1B8ADE850(v50, (uint64_t)v9, &qword_1EF1BCBC8);
  v52 = v66;
  sub_1B8ADE850((uint64_t)v17, v66, &qword_1EF1BCBD8);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC30);
  sub_1B8ADE850((uint64_t)v9, v52 + *(int *)(v53 + 48), &qword_1EF1BCBC8);
  sub_1B8ADE894(v50, &qword_1EF1BCBC8);
  sub_1B8ADE894(v51, &qword_1EF1BCBD8);
  sub_1B8ADE894((uint64_t)v9, &qword_1EF1BCBC8);
  return sub_1B8ADE894((uint64_t)v17, &qword_1EF1BCBD8);
}

uint64_t sub_1B8B15B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a1;
  v30 = a2;
  v2 = sub_1B8B9B7C8();
  v3 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  v29 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB98);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v13 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v13);
  v14 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBE8);
  v27 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B9C0F8();
  v18 = CUIKBundle();
  sub_1B8B9B15C();
  v19 = sub_1B8B9C1A0();
  v21 = v20;
  v22 = swift_projectBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v22, v6);
  sub_1B8B9BFD8();
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  swift_getKeyPath();
  sub_1B8B9BFF0();
  swift_release();
  v23(v12, v6);
  v31 = v19;
  v32 = v21;
  sub_1B8ADDBE4();
  sub_1B8B9C050();
  sub_1B8B9B7BC();
  sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
  sub_1B8ADBDEC(&qword_1EF1BCBF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB4C8], MEMORY[0x1E0CDB4A8]);
  v24 = v28;
  sub_1B8B9BC48();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v17, v15);
}

uint64_t sub_1B8B15E60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v4 = *(_QWORD *)(v3 + 48);
  *a2 = *(_QWORD *)(v3 + 40);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B15EF0()
{
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  swift_bridgeObjectRetain();
  sub_1B8B9B2C4();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B15FAC@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v15 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC18);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = a2 & 1;
  *(_BYTE *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC38);
  sub_1B8ADE950(&qword_1EF1BCC40, &qword_1EF1BCC38, (uint64_t)&unk_1B8BADC68);
  sub_1B8B9BEB8();
  v16 = a3;
  v17 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  sub_1B8B9BEA0();
  type metadata accessor for FamilyCalendarColorSelectionView();
  sub_1B8ADE950(&qword_1EF1BCC20, &qword_1EF1BCC18, MEMORY[0x1E0CDFA50]);
  sub_1B8ADBDEC(&qword_1EF1BCC28, (uint64_t (*)(uint64_t))type metadata accessor for FamilyCalendarColorSelectionView, (uint64_t)&unk_1B8BAD9A0);
  sub_1B8B9BCD8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1B8B161A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB98);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_projectBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  sub_1B8B9BFCC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v7 = v18;
  swift_getKeyPath();
  v18 = v7;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v8 = v7[9];
  v9 = v7[10];
  v10 = v7[11];
  v11 = v7[12];
  v12 = v7[13];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  v13 = sub_1B8B9BE04();
  v14 = sub_1B8B9BAB0();
  KeyPath = swift_getKeyPath();
  result = sub_1B8B9BDD4();
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = KeyPath;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

uint64_t sub_1B8B1634C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v8 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v8);
  v9 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v9);
  sub_1B8B9C0F8();
  v10 = CUIKBundle();
  sub_1B8B9B15C();
  sub_1B8B9C194();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_BYTE *)(v11 + 24) = a2 & 1;
  *(_BYTE *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  sub_1B8ADDBE4();
  swift_retain();
  swift_retain();
  return sub_1B8B9BED0();
}

uint64_t sub_1B8B164E4(uint64_t a1, char a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);

  v2 = a2 & 1;
  v3 = swift_retain();
  v4 = sub_1B8B17464(v3, v2);
  swift_release();
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v5 = *(void (**)(_QWORD, _QWORD))(v4 + 128);
  swift_retain();
  swift_release();
  v5(0, 0);
  return swift_release();
}

uint64_t sub_1B8B165A8@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int *FamilyCalendarShareeView;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;

  v68 = a4;
  v66 = a3;
  v7 = a2 & 1;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB78);
  MEMORY[0x1E0C80A78](v76);
  v65 = (uint64_t *)((char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB80);
  v10 = MEMORY[0x1E0C80A78](v9);
  v75 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v80 = (uint64_t)&v61 - v12;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB88);
  v64 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v61 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB90);
  v81 = *(_QWORD *)(v62 - 8);
  v14 = MEMORY[0x1E0C80A78](v62);
  v77 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v78 = (char *)&v61 - v16;
  v17 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v17);
  v18 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v18);
  v74 = sub_1B8B9BE04();
  v73 = sub_1B8B9BA20();
  KeyPath = swift_getKeyPath();
  sub_1B8B9C0F8();
  v19 = CUIKBundle();
  sub_1B8B9B15C();
  v71 = sub_1B8B9C1A0();
  v70 = v20;
  sub_1B8B9C0F8();
  v21 = CUIKBundle();
  sub_1B8B9B15C();
  v69 = sub_1B8B9C1A0();
  v79 = v22;
  v67 = sub_1B8B9B9F0();
  sub_1B8B9B3E4();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB98);
  v31 = swift_allocBox();
  v32 = swift_retain();
  sub_1B8B17464(v32, v7);
  swift_release();
  type metadata accessor for CreateFamilyCalendarViewModel();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9BFE4();
  v82 = v31;
  v83 = a1;
  v84 = v7;
  v85 = v66;
  v86 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBA0);
  sub_1B8ADE950(&qword_1EF1BCBA8, &qword_1EF1BCBA0, MEMORY[0x1E0CE0678]);
  v33 = v61;
  sub_1B8B9BB04();
  swift_release();
  sub_1B8ADE950(&qword_1EF1BCBB0, &qword_1EF1BCB88, MEMORY[0x1E0CDD958]);
  v34 = v77;
  v35 = v63;
  sub_1B8B9BCB4();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v33, v35);
  v36 = v78;
  v37 = v62;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v78, v34, v62);
  sub_1B8B9C0F8();
  v38 = CUIKBundle();
  sub_1B8B9B15C();
  v39 = sub_1B8B9C194();
  v41 = v40;
  v42 = sub_1B8B9B420();
  v43 = (uint64_t)v65;
  *v65 = v42;
  *(_BYTE *)(v43 + 8) = v44 & 1;
  FamilyCalendarShareeView = (int *)type metadata accessor for CreateFamilyCalendarShareeView();
  v46 = (uint64_t *)(v43 + FamilyCalendarShareeView[5]);
  *v46 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  swift_storeEnumTagMultiPayload();
  v47 = (_QWORD *)(v43 + FamilyCalendarShareeView[6]);
  v87 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC280);
  sub_1B8B9BE7C();
  v48 = *((_QWORD *)&v88 + 1);
  *v47 = v88;
  v47[1] = v48;
  v49 = FamilyCalendarShareeView[7];
  v87 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC288);
  sub_1B8B9BE7C();
  *(_OWORD *)(v43 + v49) = v88;
  v50 = (uint64_t *)(v43 + *(int *)(v76 + 36));
  *v50 = v39;
  v50[1] = v41;
  v51 = v75;
  sub_1B8ADE850(v43, v75, &qword_1EF1BCB78);
  sub_1B8ADE894(v43, &qword_1EF1BCB78);
  v52 = v80;
  sub_1B8B06074(v51, v80, &qword_1EF1BCB80);
  v53 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v53(v34, v36, v37);
  sub_1B8ADE850(v52, v51, &qword_1EF1BCB80);
  *(_QWORD *)a5 = v74;
  v54 = v73;
  *(_QWORD *)(a5 + 8) = KeyPath;
  *(_QWORD *)(a5 + 16) = v54;
  v55 = v70;
  *(_QWORD *)(a5 + 24) = v71;
  *(_QWORD *)(a5 + 32) = v55;
  v56 = v79;
  *(_QWORD *)(a5 + 40) = v69;
  *(_QWORD *)(a5 + 48) = v56;
  *(_BYTE *)(a5 + 56) = v67;
  *(_QWORD *)(a5 + 64) = v24;
  *(_QWORD *)(a5 + 72) = v26;
  *(_QWORD *)(a5 + 80) = v28;
  *(_QWORD *)(a5 + 88) = v30;
  *(_BYTE *)(a5 + 96) = 0;
  v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBB8);
  v53((char *)(a5 + v57[12]), v34, v37);
  v58 = a5 + v57[16];
  *(_QWORD *)v58 = 0;
  *(_BYTE *)(v58 + 8) = 1;
  sub_1B8ADE850(v51, a5 + v57[20], &qword_1EF1BCB80);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_1B8ADE894(v80, &qword_1EF1BCB80);
  v59 = *(void (**)(char *, uint64_t))(v81 + 8);
  v59(v78, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1B8ADE894(v51, &qword_1EF1BCB80);
  v59(v77, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B8B16DD8@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = a4;
  v25 = a5;
  v23 = a3;
  v7 = sub_1B8B9B8B8();
  MEMORY[0x1E0C80A78](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB50);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB48);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v18 = &v22[-v17];
  sub_1B8B9B8A0();
  v26 = a1;
  v27 = a2 & 1;
  v28 = v23;
  v29 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC908);
  sub_1B8ADE950(&qword_1EF1BCB68, &qword_1EF1BC908, MEMORY[0x1E0CDFA50]);
  sub_1B8B9B438();
  v19 = sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
  MEMORY[0x1BCCB5A74](v11, v8, v19);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v18, v16, v12);
  v30 = v8;
  v31 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  MEMORY[0x1BCCB5A74](v18, v12, OpaqueTypeConformance2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t sub_1B8B16FF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB20);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v1;
  v10 = *(_BYTE *)(v1 + 8);
  v11 = *(unsigned __int8 *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)v4 = sub_1B8B9B7A4();
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB30);
  sub_1B8B165A8(v9, v10, v11, v12, (uint64_t)&v4[*(int *)(v13 + 44)]);
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB38);
  sub_1B8ADE950(&qword_1EF1BCB40, &qword_1EF1BCB20, MEMORY[0x1E0CDFCB8]);
  v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB48);
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB50);
  v16 = sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
  v28 = v15;
  v29 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v28 = v14;
  v29 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1B8B9BD08();
  sub_1B8ADE894((uint64_t)v4, &qword_1EF1BCB20);
  v18 = sub_1B8B9B564();
  LOBYTE(v15) = sub_1B8B9B9F0();
  v19 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v23, v8, v5);
  v20 = v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB60) + 36);
  *(_QWORD *)v20 = v18;
  *(_BYTE *)(v20 + 8) = v15;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1B8B17230()
{
  return sub_1B8B17248((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B16DD8);
}

uint64_t sub_1B8B1723C()
{
  return sub_1B8B17248((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B1634C);
}

uint64_t sub_1B8B17248(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B8B1726C()
{
  uint64_t v0;

  return sub_1B8B164E4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1B8B17288@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v5 = *(_QWORD *)(v3 + 72);
  v4 = *(_QWORD *)(v3 + 80);
  v7 = *(_QWORD *)(v3 + 88);
  v6 = *(_QWORD *)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 104);
  *(_BYTE *)a2 = *(_BYTE *)(v3 + 64);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B17340(_OWORD *a1)
{
  __int128 v2;
  _BYTE v3[32];
  _BYTE v4[24];
  uint64_t v5;
  _BYTE v6[16];
  __int128 v7;
  uint64_t v8;

  v2 = *a1;
  *(_OWORD *)v3 = a1[1];
  *(_OWORD *)&v3[16] = a1[2];
  *(_QWORD *)v4 = *((_QWORD *)a1 + 2);
  *(_OWORD *)&v4[8] = *(_OWORD *)&v3[8];
  v5 = *(_QWORD *)&v3[24];
  v8 = *((_QWORD *)&v2 + 1);
  v7 = *(_OWORD *)v4;
  sub_1B8B06074((uint64_t)&v4[16], (uint64_t)v6, &qword_1EF1BC3D0);
  swift_getKeyPath();
  sub_1B8B183F0((uint64_t)&v8);
  sub_1B8B18418((uint64_t)&v7);
  sub_1B8B18418((uint64_t)v6);
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2C4();
  sub_1B8B18440((uint64_t)&v8);
  sub_1B8B18468((uint64_t)&v7);
  sub_1B8B18468((uint64_t)v6);
  return swift_release();
}

uint64_t sub_1B8B17464(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1B8B9B6E4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    v8 = sub_1B8B9C458();
    v9 = sub_1B8B9B9A8();
    v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = sub_1B8B17B04(0xD00000000000001DLL, 0x80000001B8BB7B90, &v15);
      sub_1B8B9C524();
      _os_log_impl(&dword_1B8A6A000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v12, -1, -1);
      MEMORY[0x1BCCB7A9C](v11, -1, -1);
    }

    sub_1B8B9B6D8();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t sub_1B8B17628@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B17684(&qword_1EF1BC250, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD8E88], 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_1B8B1765C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B17684(&qword_1EF1B9028, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB11F0], 0x7261646E656C6143, 0xE800000000000000, a1);
}

uint64_t sub_1B8B17684@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v9 = v5;
  v11 = sub_1B8B9B6E4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8ADE850(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = sub_1B8B9C458();
    v21 = sub_1B8B9B9A8();
    if (os_log_type_enabled(v21, v20))
    {
      v26 = a4;
      v22 = swift_slowAlloc();
      v27 = a5;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v30 = v24;
      *(_DWORD *)v23 = 136315138;
      v29 = sub_1B8B17B04(v28, v26, &v30);
      sub_1B8B9C524();
      _os_log_impl(&dword_1B8A6A000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v24, -1, -1);
      MEMORY[0x1BCCB7A9C](v23, -1, -1);
    }

    sub_1B8B9B6D8();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1B8B178BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B17684(&qword_1EF1B9048, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA000], 0xD000000000000010, 0x80000001B8BB7FA0, a1);
}

uint64_t sub_1B8B178E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B17684(&qword_1EF1B9038, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD86F0], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_1B8B17918@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B17684(&qword_1EF1BC3E8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDD6B8], 0x747865746E6F43, 0xE700000000000000, a1);
}

uint64_t sub_1B8B17940(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1B8B9B6E4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v8 = sub_1B8B9C458();
  v9 = sub_1B8B9B9A8();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v15 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = sub_1B8B17B04(0xD000000000000015, 0x80000001B8BB7FC0, &v15);
    sub_1B8B9C524();
    _os_log_impl(&dword_1B8A6A000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCB7A9C](v12, -1, -1);
    MEMORY[0x1BCCB7A9C](v11, -1, -1);
  }

  sub_1B8B9B6D8();
  swift_getAtKeyPath();
  sub_1B8AE20FC(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_1B8B17B04(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1B8B17BD4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1B8B17D8C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1B8B17D8C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1B8B17BD4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1B8B9C530();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1B8B17DC8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1B8B9C6B0();
  if (!v8)
  {
    sub_1B8B9C704();
    __break(1u);
LABEL_17:
    result = sub_1B8B9C764();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1B8B17D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B8B17DC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1B8B17E5C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B8B180AC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1B8B180AC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1B8B17E5C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1B8B17FD0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1B8B9C644();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1B8B9C704();
      __break(1u);
LABEL_10:
      v2 = sub_1B8B9C230();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1B8B9C764();
    __break(1u);
LABEL_14:
    result = sub_1B8B9C704();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1B8B17FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB70);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1B8B18034(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1B8B9C26C();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1BCCB63D4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1B8B180AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB70);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B181FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B8B9B660();
  *a1 = result;
  return result;
}

uint64_t sub_1B8B18224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B8B9B660();
  *a1 = result;
  return result;
}

uint64_t sub_1B8B1824C()
{
  swift_retain();
  return sub_1B8B9B66C();
}

uint64_t sub_1B8B18274()
{
  swift_retain();
  return sub_1B8B9B66C();
}

uint64_t sub_1B8B1829C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B15464(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1B8B182BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B15B1C(v1, a1);
}

uint64_t sub_1B8B182C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B15FAC(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

unint64_t sub_1B8B182E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BCC10;
  if (!qword_1EF1BCC10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCC00);
    v2[0] = MEMORY[0x1E0CDDD50];
    v2[1] = MEMORY[0x1E0CD9750];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCC10);
  }
  return result;
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8B18374()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC8F8);
  return sub_1B8B9BE94();
}

uint64_t sub_1B8B183C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B161A4(a1);
}

uint64_t sub_1B8B183D8()
{
  uint64_t v0;

  return sub_1B8B1E5C8(*(_OWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1B8B183F0(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B8B18418(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B18440(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B8B18468(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B8B1849C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  result = qword_1EF1BCC48;
  if (!qword_1EF1BCC48)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB60);
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB20);
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB38);
    v4 = sub_1B8ADE950(&qword_1EF1BCB40, &qword_1EF1BCB20, MEMORY[0x1E0CDFCB8]);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB48);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB50);
    sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
    swift_getOpaqueTypeConformance2();
    v5[2] = v2;
    v5[3] = v3;
    v5[4] = v4;
    v5[5] = swift_getOpaqueTypeConformance2();
    v5[0] = swift_getOpaqueTypeConformance2();
    v5[1] = MEMORY[0x1E0CDCF98];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v5);
    atomic_store(result, (unint64_t *)&qword_1EF1BCC48);
  }
  return result;
}

uint64_t destroy for ShareeWithAccessItemView(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >> 60 != 15)
    return sub_1B8ADC698(*(_QWORD *)(a1 + 16), v3);
  return result;
}

uint64_t initializeWithCopy for ShareeWithAccessItemView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1B8ADC5E4(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  return a1;
}

_QWORD *assignWithCopy for ShareeWithAccessItemView(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1B8ADC5E4(*v4, a2[3]);
      v8 = a1[2];
      v9 = a1[3];
      a1[2] = v7;
      a1[3] = v5;
      sub_1B8ADC698(v8, v9);
      goto LABEL_8;
    }
    sub_1B8B18778((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1B8ADC5E4(*v4, a2[3]);
  a1[2] = v6;
  a1[3] = v5;
LABEL_8:
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_1B8B18778(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for ShareeWithAccessItemView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  v6 = a1[3];
  if (v6 >> 60 != 15)
  {
    v7 = a2[3];
    if (v7 >> 60 != 15)
    {
      v8 = a1[2];
      a1[2] = *v5;
      a1[3] = v7;
      sub_1B8ADC698(v8, v6);
      goto LABEL_6;
    }
    sub_1B8B18778((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
LABEL_6:
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareeWithAccessItemView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareeWithAccessItemView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareeWithAccessItemView()
{
  return &type metadata for ShareeWithAccessItemView;
}

uint64_t sub_1B8B188F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B18900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v2);
  v3 = *(_QWORD *)(v0 + 32);
  if (v3 == 2 || (result = 0, v3 == 1))
  {
    sub_1B8B9C0F8();
    CUIKBundle();
    sub_1B8B9B15C();
    return sub_1B8B9C1A0();
  }
  return result;
}

uint64_t sub_1B8B18A60@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t result;

  v3 = v1[1];
  v4 = *v1;
  sub_1B8AF1CDC(v3, *((unint64_t *)&v3 + 1));
  swift_bridgeObjectRetain();
  v5 = sub_1B8B18900();
  v7 = v6;
  v8 = sub_1B8B9BE04();
  v9 = sub_1B8B9BAB0();
  KeyPath = swift_getKeyPath();
  result = sub_1B8B9BDD4();
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = KeyPath;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 80) = 0x4043000000000000;
  return result;
}

unint64_t sub_1B8B18B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BCC50;
  if (!qword_1EF1BCC50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCC58);
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA5FB8, v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BCC50);
  }
  return result;
}

id EKCalendarModelWrapper.ekCalendar.getter()
{
  id *v0;

  return *v0;
}

void EKCalendarModelWrapper.ekCalendar.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKCalendarModelWrapper.ekCalendar.modify())()
{
  return nullsub_1;
}

uint64_t EKCalendarModelWrapper.id.getter()
{
  return sub_1B8B18C0C((SEL *)&selRef_calendarIdentifier);
}

id EKCalendarModelWrapper.type.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_type);
}

uint64_t EKCalendarModelWrapper.externalID.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_externalID);
}

uint64_t EKCalendarModelWrapper.title.getter()
{
  return sub_1B8B18C0C((SEL *)&selRef_title);
}

uint64_t sub_1B8B18C0C(SEL *a1)
{
  id *v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*v1, *a1);
  v3 = sub_1B8B9C17C();

  return v3;
}

uint64_t EKCalendarModelWrapper.displayOrder.getter()
{
  id *v0;

  return (int)objc_msgSend(*v0, sel_displayOrder);
}

uint64_t EKCalendarModelWrapper.color.getter()
{
  id *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  id v10;
  void *v11;

  v1 = *v0;
  v2 = objc_msgSend(*v0, sel_symbolicColorName);
  if (v2)
  {
    v3 = v2;
    v4 = sub_1B8B9C17C();
    v6 = v5;

    if (v4 == sub_1B8B9C17C() && v6 == v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        return v4;
    }
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend(v1, sel_colorStringRaw);
  if (!v10)
    return 0;
  v11 = v10;
  v4 = sub_1B8B9C17C();

  return v4;
}

id EKCalendarModelWrapper.allowsContentModifications.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowsContentModifications);
}

id EKCalendarModelWrapper.sharingStatus.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_sharingStatus);
}

id EKCalendarModelWrapper.source.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_source);
  if (result)
    *a1 = result;
  else
    __break(1u);
  return result;
}

id EKCalendarModelWrapper.isSubscribed.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSubscribed);
}

id EKCalendarModelWrapper.isHolidayCalendar.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isHolidayCalendar);
}

id EKCalendarModelWrapper.isSubscribedHolidayCalendar.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSubscribedHolidayCalendar);
}

id EKCalendarModelWrapper.isSuggestedEventCalendar.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSuggestedEventCalendar);
}

id EKCalendarModelWrapper.allowsEvents.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowEvents);
}

id EKCalendarModelWrapper.allowsScheduling.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowsScheduling);
}

uint64_t EKCalendarModelWrapper.sharedOwnerAddress.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_sharedOwnerAddress);
}

uint64_t EKCalendarModelWrapper.sharedOwnerAddresses.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_sharedOwnerAddresses);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = v1;
  v3 = sub_1B8B9C2F0();

  return v3;
}

uint64_t EKCalendarModelWrapper.ownerIdentityAddress.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_ownerIdentityAddress);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B030();

    v5 = sub_1B8B9B054();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B054();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t EKCalendarModelWrapper.ownerIdentityEmail.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_ownerIdentityEmail);
}

uint64_t EKCalendarModelWrapper.ownerIdentityPhoneNumber.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_ownerIdentityPhoneNumber);
}

uint64_t EKCalendarModelWrapper.isDefaultCalendarForNewEvents.getter()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t result;

  v1 = *v0;
  v2 = objc_msgSend(v1, sel_calendarIdentifier);
  v3 = sub_1B8B9C17C();
  v5 = v4;

  v6 = objc_msgSend(v1, sel_eventStore);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel_defaultCalendarForNewEvents);

    if (v8)
    {
      v9 = objc_msgSend(v8, sel_calendarIdentifier);

      v10 = sub_1B8B9C17C();
      v12 = v11;

      if (v3 == v10 && v5 == v12)
        v14 = 1;
      else
        v14 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = 0;
    }
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void EKCalendarModelWrapper.constraints.getter(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = *v1;
  v4 = objc_msgSend(v3, sel_source);
  if (v4)
  {
    v5 = v4;

    v6 = objc_msgSend(v5, sel_constraints);
    *a1 = v6;
  }
  else
  {
    __break(1u);
  }
}

CalendarUIKit::EKCalendarModelWrapper __swiftcall EKCalendarModelWrapper.init(_:)(CalendarUIKit::EKCalendarModelWrapper result)
{
  CalendarUIKit::EKCalendarModelWrapper *v1;

  v1->ekCalendar.super.super.isa = result.ekCalendar.super.super.isa;
  return result;
}

unint64_t sub_1B8B19168()
{
  unint64_t result;

  result = qword_1ED1B2DB0;
  if (!qword_1ED1B2DB0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKSourceModelWrapper, &type metadata for EKSourceModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED1B2DB0);
  }
  return result;
}

uint64_t sub_1B8B191AC(uint64_t a1, uint64_t a2)
{
  return sub_1B8B191E0(a1, a2, (SEL *)&selRef_calendarIdentifier);
}

id sub_1B8B191B8()
{
  id *v0;

  return objc_msgSend(*v0, sel_type);
}

uint64_t sub_1B8B191C8(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_externalID);
}

uint64_t sub_1B8B191D4(uint64_t a1, uint64_t a2)
{
  return sub_1B8B191E0(a1, a2, (SEL *)&selRef_title);
}

uint64_t sub_1B8B191E0(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*v3, *a3);
  v5 = sub_1B8B9C17C();

  return v5;
}

uint64_t sub_1B8B19230()
{
  id *v0;

  return (int)objc_msgSend(*v0, sel_displayOrder);
}

id sub_1B8B19258()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowsContentModifications);
}

id sub_1B8B19278()
{
  id *v0;

  return objc_msgSend(*v0, sel_sharingStatus);
}

id sub_1B8B19288@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_source);
  if (result)
    *a1 = result;
  else
    __break(1u);
  return result;
}

id sub_1B8B192C8()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSubscribed);
}

id sub_1B8B192E8()
{
  id *v0;

  return objc_msgSend(*v0, sel_isHolidayCalendar);
}

id sub_1B8B19308()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSubscribedHolidayCalendar);
}

id sub_1B8B19328()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSuggestedEventCalendar);
}

id sub_1B8B19348()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowEvents);
}

id sub_1B8B19368()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowsScheduling);
}

uint64_t sub_1B8B19388(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_sharedOwnerAddress);
}

uint64_t sub_1B8B19394()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_sharedOwnerAddresses);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = v1;
  v3 = sub_1B8B9C2F0();

  return v3;
}

uint64_t sub_1B8B193F0@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_ownerIdentityAddress);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B030();

    v5 = sub_1B8B9B054();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B054();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_1B8B19474(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_ownerIdentityEmail);
}

uint64_t sub_1B8B19480(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_ownerIdentityPhoneNumber);
}

unint64_t sub_1B8B19490(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B194B4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1B8B194B4()
{
  unint64_t result;

  result = qword_1ED1B2DB8;
  if (!qword_1ED1B2DB8)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKCalendarModelWrapper, &type metadata for EKCalendarModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED1B2DB8);
  }
  return result;
}

void sub_1B8B194F8(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, sel_calendarIdentifier);
  v4 = sub_1B8B9C17C();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

_UNKNOWN **sub_1B8B1954C()
{
  return &protocol witness table for EKSourceConstraintsModelWrapper;
}

ValueMetadata *type metadata accessor for EKCalendarModelWrapper()
{
  return &type metadata for EKCalendarModelWrapper;
}

uint64_t destroy for AlertsView()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AlertsView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlertsView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AlertsView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for AlertsView()
{
  return &type metadata for AlertsView;
}

uint64_t sub_1B8B19718()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B19728@<X0>(__int128 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  __int128 v37;
  char v38;
  __int128 v39;
  char v40;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC80);
  v4 = MEMORY[0x1E0C80A78](v3);
  v34 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v29 = (char *)&v27 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC88);
  v31 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v32 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - v10;
  v12 = sub_1B8B9B780();
  v27 = v13;
  v28 = v12;
  v39 = *a1;
  v40 = *((_BYTE *)a1 + 16);
  v35 = *a1;
  v36 = *((_BYTE *)a1 + 16);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC90);
  sub_1B8B9BF60();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC98);
  sub_1B8B19BD8();
  sub_1B8B19C1C();
  v30 = v11;
  sub_1B8B9BEF4();
  v37 = v39;
  v38 = v40;
  MEMORY[0x1BCCB60C8](&v35, v14);
  if ((_BYTE)v35)
  {
    v28 = sub_1B8B9B780();
    v35 = *(__int128 *)((char *)a1 + 24);
    v36 = *((_BYTE *)a1 + 40);
    sub_1B8B9BF60();
    v15 = v29;
    sub_1B8B9BEF4();
    v16 = 0;
    v17 = (uint64_t)v15;
  }
  else
  {
    v16 = 1;
    v17 = (uint64_t)v29;
  }
  v18 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v17, v16, 1, v7);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v20 = v32;
  v21 = v30;
  v19(v32, v30, v7);
  v22 = v34;
  sub_1B8B19D88(v17, v34);
  v23 = v33;
  v19(v33, v20, v7);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCCF0);
  sub_1B8B19D88(v22, (uint64_t)&v23[*(int *)(v24 + 48)]);
  sub_1B8B19DD0(v17);
  v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  v25(v21, v7);
  sub_1B8B19DD0(v22);
  return ((uint64_t (*)(char *, uint64_t))v25)(v20, v7);
}

uint64_t sub_1B8B19A74()
{
  return sub_1B8B19A84();
}

uint64_t sub_1B8B19A84()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BE940);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCCB8);
  sub_1B8ADE950(&qword_1EF1BCCF8, &qword_1EF1BE940, MEMORY[0x1E0DEAF48]);
  sub_1B8B19C80();
  sub_1B8B19E10();
  return sub_1B8B9BF90();
}

uint64_t sub_1B8B19B44@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a1;
  sub_1B8B8D3AC(*a1);
  sub_1B8ADDBE4();
  result = sub_1B8B9BBAC();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v3;
  *(_BYTE *)(a2 + 33) = v3;
  return result;
}

uint64_t sub_1B8B19BA8@<X0>(char *a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v4;
  _OWORD v5[2];

  v2 = v1[1];
  v4 = *v1;
  v5[0] = v2;
  *(_OWORD *)((char *)v5 + 9) = *(__int128 *)((char *)v1 + 25);
  return sub_1B8B19728(&v4, a1);
}

unint64_t sub_1B8B19BD8()
{
  unint64_t result;

  result = qword_1EF1BCCA0;
  if (!qword_1EF1BCCA0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAEE70, &type metadata for AlarmRelativeOffset);
    atomic_store(result, (unint64_t *)&qword_1EF1BCCA0);
  }
  return result;
}

unint64_t sub_1B8B19C1C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BCCA8;
  if (!qword_1EF1BCCA8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCC98);
    v2 = sub_1B8B19C80();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFEE0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCCA8);
  }
  return result;
}

unint64_t sub_1B8B19C80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BCCB0;
  if (!qword_1EF1BCCB0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCCB8);
    v2[0] = sub_1B8B19D04();
    v2[1] = sub_1B8ADE950(&qword_1EF1BCCE0, &qword_1EF1BCCE8, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCCB0);
  }
  return result;
}

unint64_t sub_1B8B19D04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BCCC0;
  if (!qword_1EF1BCCC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCCC8);
    v2 = sub_1B8ADE950(&qword_1EF1BCCD0, &qword_1EF1BCCD8, MEMORY[0x1E0CDBEE8]);
    v3[0] = MEMORY[0x1E0CDDD50];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BCCC0);
  }
  return result;
}

uint64_t sub_1B8B19D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B19DD0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B8B19E10()
{
  unint64_t result;

  result = qword_1EF1BCD00;
  if (!qword_1EF1BCD00)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAEE00, &type metadata for AlarmRelativeOffset);
    atomic_store(result, (unint64_t *)&qword_1EF1BCD00);
  }
  return result;
}

unint64_t sub_1B8B19E58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF1BCD08;
  if (!qword_1EF1BCD08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCD10);
    v2 = sub_1B8ADE950(&qword_1EF1BCD18, &qword_1EF1BCD20, MEMORY[0x1E0CE0678]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDF698], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCD08);
  }
  return result;
}

CalendarUIKit::EKSourceModelWrapper __swiftcall EKSourceModelWrapper.init(_:)(CalendarUIKit::EKSourceModelWrapper result)
{
  CalendarUIKit::EKSourceModelWrapper *v1;

  v1->ekSource.super.super.isa = result.ekSource.super.super.isa;
  return result;
}

id EKSourceModelWrapper.constraints.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_constraints);
  *a1 = result;
  return result;
}

id EKSourceModelWrapper.ekSource.getter()
{
  id *v0;

  return *v0;
}

void EKSourceModelWrapper.ekSource.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKSourceModelWrapper.ekSource.modify())()
{
  return nullsub_1;
}

uint64_t EKSourceModelWrapper.id.getter()
{
  return sub_1B8B18C0C((SEL *)&selRef_sourceIdentifier);
}

id EKSourceModelWrapper.sourceType.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_sourceType);
}

uint64_t EKSourceModelWrapper.title.getter()
{
  return sub_1B8B18C0C((SEL *)&selRef_title);
}

id EKSourceModelWrapper.isDelegate.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isDelegate);
}

id EKSourceModelWrapper.isManaged.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id result;
  void *v3;
  id v4;

  v1 = *v0;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_sourceIsManaged_, v1);

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id EKSourceModelWrapper.isWritable.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isWritable);
}

id EKSourceModelWrapper.isPrimaryLocalSource.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isPrimaryLocalSource);
}

uint64_t EKSourceModelWrapper.appGroupID.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_appGroupIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9C17C();

  return v3;
}

_QWORD *EKSourceModelWrapper.ownerAddresses.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend(*v0, sel_ownerAddresses);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = v1;
  v3 = sub_1B8B9C3C8();

  v4 = sub_1B8B1A600(v3);
  swift_bridgeObjectRelease();
  return v4;
}

id EKSourceModelWrapper.preferredEventPrivateValue.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_preferredEventPrivateValue);
}

id EKSourceModelWrapper.defaultAlarmOffset.getter()
{
  return sub_1B8B1A150((SEL *)&selRef_defaultAlarmOffset, (SEL *)&selRef_defaultTimedAlarmOffset);
}

id EKSourceModelWrapper.defaultAllDayAlarmOffset.getter()
{
  return sub_1B8B1A150((SEL *)&selRef_defaultAllDayAlarmOffset, (SEL *)&selRef_defaultAllDayAlarmOffset);
}

id sub_1B8B1A150(SEL *a1, SEL *a2)
{
  id *v2;
  id v4;
  id v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *v2;
  v5 = objc_msgSend(*v2, *a1);
  if (v5)
    goto LABEL_4;
  result = objc_msgSend(v4, sel_eventStore);
  if (result)
  {
    v7 = result;
    v5 = objc_msgSend(result, *a2);

    if (v5)
    {
LABEL_4:
      objc_msgSend(v5, sel_doubleValue);
      v9 = v8;

      return (id)v9;
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B1A208(uint64_t a1, uint64_t a2)
{
  return sub_1B8B191E0(a1, a2, (SEL *)&selRef_sourceIdentifier);
}

uint64_t sub_1B8B1A214()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_appGroupIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9C17C();

  return v3;
}

id sub_1B8B1A278()
{
  id *v0;

  return objc_msgSend(*v0, sel_sourceType);
}

id sub_1B8B1A288()
{
  id *v0;

  return objc_msgSend(*v0, sel_isDelegate);
}

id sub_1B8B1A2A8()
{
  uint64_t *v0;
  uint64_t v1;
  id result;
  void *v3;
  id v4;

  v1 = *v0;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_sourceIsManaged_, v1);

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1B8B1A30C()
{
  id *v0;

  return objc_msgSend(*v0, sel_isWritable);
}

id sub_1B8B1A32C()
{
  id *v0;

  return objc_msgSend(*v0, sel_isPrimaryLocalSource);
}

_QWORD *sub_1B8B1A34C()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend(*v0, sel_ownerAddresses);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = v1;
  v3 = sub_1B8B9C3C8();

  v4 = sub_1B8B1A600(v3);
  swift_bridgeObjectRelease();
  return v4;
}

id sub_1B8B1A3C4()
{
  id *v0;

  return objc_msgSend(*v0, sel_preferredEventPrivateValue);
}

id sub_1B8B1A3D4()
{
  return EKSourceModelWrapper.defaultAlarmOffset.getter();
}

id sub_1B8B1A3EC()
{
  return EKSourceModelWrapper.defaultAllDayAlarmOffset.getter();
}

void sub_1B8B1A404(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, sel_sourceIdentifier);
  v4 = sub_1B8B9C17C();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

id sub_1B8B1A458@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_constraints);
  *a1 = result;
  return result;
}

uint64_t sub_1B8B1A490(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

_QWORD *sub_1B8B1A600(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1B8B1A75C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1B8B1A958();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

unint64_t sub_1B8B1A6E4(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B1A708();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1B8B1A708()
{
  unint64_t result;

  result = qword_1ED1B2DA8;
  if (!qword_1ED1B2DA8)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKSourceModelWrapper, &type metadata for EKSourceModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED1B2DA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EKSourceModelWrapper()
{
  return &type metadata for EKSourceModelWrapper;
}

uint64_t sub_1B8B1A75C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1B8B1A958()
{
  return swift_release();
}

uint64_t EventAlarmModel.isEquivalent(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v50;
  void (*v51)(char *, uint64_t);
  _QWORD v52[2];
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v52 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v52 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v52 - v17;
  v59 = sub_1B8B9B0F0();
  v19 = *(_QWORD **)(v59 - 8);
  v20 = MEMORY[0x1E0C80A78](v59);
  v58 = (char *)v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v52 - v22;
  sub_1B8B1AD60(a1, (uint64_t)&v60);
  if (v61)
  {
    v56 = v16;
    v57 = v13;
    v55 = v10;
    sub_1B8B0BBC8(&v60, (uint64_t)v63);
    v24 = a2;
    v25 = a3;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) & 1;
    v27 = v64;
    v28 = v65;
    __swift_project_boxed_opaque_existential_1(v63, v64);
    if (v26 == ((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 40))(v27, v28) & 1))
    {
      v53 = *(void (**)(uint64_t, uint64_t))(v25 + 32);
      v54 = v24;
      v53(v24, v25);
      v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19[6];
      v30 = v59;
      if (v29((uint64_t)v18, 1, v59) == 1)
      {
        v31 = (uint64_t)v18;
        v32 = (uint64_t)v57;
      }
      else
      {
        v52[0] = v19[4];
        v52[1] = v3;
        ((void (*)(char *, char *, uint64_t))v52[0])(v23, v18, v30);
        v33 = v64;
        v34 = v65;
        __swift_project_boxed_opaque_existential_1(v63, v64);
        v31 = (uint64_t)v56;
        (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
        v35 = v29(v31, 1, v30);
        v32 = (uint64_t)v57;
        if (v35 != 1)
        {
          v50 = v58;
          ((void (*)(char *, uint64_t, uint64_t))v52[0])(v58, v31, v30);
          v48 = sub_1B8B9B0CC();
          v51 = (void (*)(char *, uint64_t))v19[1];
          v51(v50, v30);
          v51(v23, v30);
          goto LABEL_16;
        }
        ((void (*)(char *, uint64_t))v19[1])(v23, v30);
      }
      sub_1B8ADE894(v31, &qword_1ED1B2D18);
      v36 = v54;
      v37 = v25;
      v53(v54, v25);
      v38 = v29;
      v39 = v29(v32, 1, v30);
      sub_1B8ADE894(v32, &qword_1ED1B2D18);
      sub_1B8B0FC88((uint64_t)v63, (uint64_t)&v60);
      if (v39 == 1)
      {
        v40 = v30;
        v41 = v61;
        v42 = v62;
        __swift_project_boxed_opaque_existential_1(&v60, v61);
        v43 = (uint64_t)v55;
        (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
        v44 = v38(v43, 1, v40);
        sub_1B8ADE894(v43, &qword_1ED1B2D18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        if (v44 == 1)
        {
          v45 = (*(double (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
          v46 = v64;
          v47 = v65;
          __swift_project_boxed_opaque_existential_1(v63, v64);
          v48 = v45 == (*(double (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
LABEL_16:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
          return v48 & 1;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  }
  else
  {
    sub_1B8ADE894((uint64_t)&v60, &qword_1EF1BCD48);
  }
  v48 = 0;
  return v48 & 1;
}

uint64_t sub_1B8B1AD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCD48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of EventAlarmModel.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventAlarmModel.relativeOffset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventAlarmModel.absoluteDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventAlarmModel.isDefaultAlarm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventLocationModel.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventLocationModel.geoLocation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventLocationModel.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventLocationModel.address.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of EventLocationModel.contactLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventLocationModel.mapKitHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EventLocationModel.isImprecise.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of EventLocationModel.predictedLOI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

BOOL sub_1B8B1AE08(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_1B8B9C50C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v8, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

ValueMetadata *type metadata accessor for TableViewChevron()
{
  return &type metadata for TableViewChevron;
}

uint64_t sub_1B8B1AEF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B1AF04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9388);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9BAD4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B8B9BE04();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CDD7D8], v5);
  v10 = sub_1B8B9BA44();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  sub_1B8B9BA74();
  sub_1B8B1B0C0((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1B8B9BA50();
  v11 = sub_1B8B9BA8C();
  swift_release();
  KeyPath = swift_getKeyPath();
  if (qword_1EF1BB4D0 != -1)
    swift_once();
  v13 = qword_1EF1CF268;
  v14 = swift_getKeyPath();
  *a1 = v9;
  a1[1] = KeyPath;
  a1[2] = v11;
  a1[3] = v14;
  a1[4] = v13;
  return swift_retain();
}

uint64_t sub_1B8B1B0C0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9388);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B8B1B114()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BCD50;
  if (!qword_1EF1BCD50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCD58);
    v2[0] = sub_1B8B1B190();
    v2[1] = sub_1B8B1B20C(&qword_1EF1B9360, &qword_1EF1B9368);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCD50);
  }
  return result;
}

unint64_t sub_1B8B1B190()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BCD60;
  if (!qword_1EF1BCD60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCD68);
    v2 = sub_1B8B1B20C(&qword_1EF1B9350, &qword_1EF1B9358);
    v3[0] = MEMORY[0x1E0CDF818];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BCD60);
  }
  return result;
}

uint64_t sub_1B8B1B20C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDCF88], v4);
    atomic_store(result, a1);
  }
  return result;
}

id CUIKProposedTimeEventViewControllerManagerImpl.__allocating_init(delegate:proposedTime:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v4 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v5 = &v4[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_proposedTime];
  v6 = sub_1B8B9B0F0();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  v10.receiver = v4;
  v10.super_class = v2;
  v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  return v8;
}

id CUIKProposedTimeEventViewControllerManagerImpl.init(delegate:proposedTime:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_subscribers] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v4 = &v2[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_proposedTime];
  v5 = sub_1B8B9B0F0();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a2, v5);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for CUIKProposedTimeEventViewControllerManagerImpl();
  v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  return v7;
}

uint64_t type metadata accessor for CUIKProposedTimeEventViewControllerManagerImpl()
{
  uint64_t result;

  result = qword_1EF1BCD98;
  if (!qword_1EF1BCD98)
    return swift_getSingletonMetadata();
  return result;
}

id sub_1B8B1B590()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController];
  }
  else
  {
    v4 = (void *)sub_1B8B1B624(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1B8B1B624(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9D8);
  v18[0] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9B0F0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)MEMORY[0x1BCCB7B38](&a1[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_delegate]);
  if (v9)
  {
    v10 = objc_msgSend(v9, sel_eventForViewControllerManager);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &a1[OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_proposedTime], v5);
    type metadata accessor for CUIKProposedTimeViewModel();
    swift_allocObject();
    v11 = v10;
    v12 = sub_1B8B4E370(v11, v8);

    sub_1B8AE2FAC();
    swift_retain();
    v18[1] = sub_1B8B9B4F8();
    v18[2] = v13;
    v14 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDB8));
    swift_retain();
    v15 = sub_1B8B9B7D4();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9F0);
    sub_1B8B9B354();
    swift_endAccess();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = v12;
    sub_1B8B0B65C();
    swift_retain();
    a1;
    sub_1B8B9B390();
    swift_release();
    (*(void (**)(char *, uint64_t))(v18[0] + 8))(v4, v2);
    swift_beginAccess();
    sub_1B8B9B324();
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    return v15;
  }
  else
  {
    result = sub_1B8B9C710();
    __break(1u);
  }
  return result;
}

_BYTE *sub_1B8B1B910(_BYTE *result, uint64_t a2)
{
  void *v2;

  if (*result == 1)
  {
    v2 = (void *)MEMORY[0x1BCCB7B38](a2 + OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl_delegate);
    if (v2)
    {
      objc_msgSend(v2, sel_requestOrganizerDetailPresentation);
      swift_unknownObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return (_BYTE *)sub_1B8B9B36C();
  }
  return result;
}

id CUIKProposedTimeEventViewControllerManagerImpl.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CUIKProposedTimeEventViewControllerManagerImpl.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CUIKProposedTimeEventViewControllerManagerImpl.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CUIKProposedTimeEventViewControllerManagerImpl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1B8B1BA60@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B8B1B590();
  *a1 = result;
  return result;
}

void sub_1B8B1BA88(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2
             + OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController);
  *(_QWORD *)(*a2
            + OBJC_IVAR____TtC13CalendarUIKit46CUIKProposedTimeEventViewControllerManagerImpl____lazy_storage___viewController) = *a1;
  v3 = v2;

}

uint64_t sub_1B8B1BB34()
{
  return type metadata accessor for CUIKProposedTimeEventViewControllerManagerImpl();
}

uint64_t sub_1B8B1BB3C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B8B9B0F0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for CUIKProposedTimeEventViewControllerManagerImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CUIKProposedTimeEventViewControllerManagerImpl.__allocating_init(delegate:proposedTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of CUIKProposedTimeEventViewControllerManagerImpl.viewController.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t sub_1B8B1BBFC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

_BYTE *sub_1B8B1BC28(_BYTE *a1)
{
  uint64_t v1;

  return sub_1B8B1B910(a1, *(_QWORD *)(v1 + 16));
}

uint64_t destroy for InviteesView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InviteesView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InviteesView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for InviteesView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for InviteesView()
{
  return &type metadata for InviteesView;
}

uint64_t sub_1B8B1BE14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B1BE24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  unint64_t v34;

  v31 = a1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDC0);
  v2 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDC8);
  v30 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v32[0] = *(_QWORD *)v1;
  v32[1] = v8;
  v32[2] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDD0);
  MEMORY[0x1BCCB60C8](&v34, v11);
  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v12)
  {
    v32[0] = v10;
    v33 = *(_QWORD *)(v1 + 24);
    v34 = v9;
    v13 = (_OWORD *)swift_allocObject();
    v14 = *(_OWORD *)(v1 + 16);
    v13[1] = *(_OWORD *)v1;
    v13[2] = v14;
    *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)(v1 + 25);
    MEMORY[0x1E0C80A78](v13);
    *(&v29 - 2) = v1;
    sub_1B8B183F0((uint64_t)&v34);
    swift_retain();
    sub_1B8B1CD9C((uint64_t)v32);
    sub_1B8B183F0((uint64_t)&v33);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDD8);
    sub_1B8ADE950(&qword_1EF1BCDE0, &qword_1EF1BCDD8, MEMORY[0x1E0CDFCB8]);
    sub_1B8B9BEB8();
    v15 = sub_1B8B9B9E4();
    sub_1B8B9B3E4();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v7, v4, v29);
    v25 = &v7[*(int *)(v5 + 36)];
    *v25 = v15;
    *((_QWORD *)v25 + 1) = v17;
    *((_QWORD *)v25 + 2) = v19;
    *((_QWORD *)v25 + 3) = v21;
    *((_QWORD *)v25 + 4) = v23;
    v25[40] = 0;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v24);
    v26 = v31;
    sub_1B8B1CDC4((uint64_t)v7, v31);
    v27 = 0;
  }
  else
  {
    v27 = 1;
    v26 = v31;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v26, v27, 1, v5);
}

uint64_t sub_1B8B1C0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = sub_1B8B9B7A4();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDE8);
  return sub_1B8B1C128(a1 + *(int *)(v2 + 44));
}

uint64_t sub_1B8B1C128@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDF0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v21 - v6;
  v27 = sub_1B8B9B738();
  sub_1B8B1C358((uint64_t)v29);
  v8 = v29[0];
  v9 = v29[1];
  v23 = v30;
  v10 = v31;
  v26 = v32;
  v25 = v33;
  v11 = v34;
  v22 = v34;
  v24 = v35;
  v12 = v36;
  v28 = v37;
  *(_QWORD *)v7 = sub_1B8B9B738();
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDF8);
  sub_1B8B1C69C((uint64_t)&v7[*(int *)(v13 + 44)]);
  sub_1B8ADE850((uint64_t)v7, (uint64_t)v5, &qword_1EF1BCDF0);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v21 = v8;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v14 = v23;
  *(_BYTE *)(a1 + 40) = v23;
  v15 = v26;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v15;
  *(_BYTE *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = v11;
  v16 = v24;
  *(_QWORD *)(a1 + 80) = v24;
  *(_BYTE *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v28;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE00);
  sub_1B8ADE850((uint64_t)v5, a1 + *(int *)(v17 + 48), &qword_1EF1BCDF0);
  v18 = a1 + *(int *)(v17 + 64);
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  sub_1B8ADD7C0(v8, v9, v14);
  swift_bridgeObjectRetain();
  v19 = v22;
  sub_1B8ADD7C0(v22, v16, v12);
  swift_bridgeObjectRetain();
  sub_1B8ADE894((uint64_t)v7, &qword_1EF1BCDF0);
  sub_1B8ADE894((uint64_t)v5, &qword_1EF1BCDF0);
  sub_1B8ADDA88(v21, v9, v14);
  swift_bridgeObjectRelease();
  sub_1B8ADDA88(v19, v16, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1C358@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];

  v2 = sub_1B8B9B774();
  MEMORY[0x1E0C80A78](v2);
  sub_1B8B9B780();
  v3 = sub_1B8B9BBA0();
  v5 = v4;
  v7 = v6 & 1;
  v8 = sub_1B8B9BB88();
  v10 = v9;
  v12 = v11 & 1;
  sub_1B8ADDA88(v3, v5, v7);
  swift_bridgeObjectRelease();
  sub_1B8B9BDC8();
  v13 = sub_1B8B9BB64();
  v33 = v14;
  v34 = v13;
  v16 = v15;
  v35 = v17;
  swift_release();
  sub_1B8ADDA88(v8, v10, v12);
  swift_bridgeObjectRelease();
  sub_1B8B9B768();
  sub_1B8B9B75C();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDD0);
  MEMORY[0x1BCCB60C8](v36, v18);
  if (v36[0] >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v32 = v16 & 1;
  sub_1B8B9B744();
  sub_1B8B9B75C();
  sub_1B8B9B78C();
  v19 = sub_1B8B9BBA0();
  v21 = v20;
  v23 = v22 & 1;
  sub_1B8B9BDD4();
  v24 = sub_1B8B9BB64();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release();
  v28 &= 1u;
  sub_1B8ADDA88(v19, v21, v23);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v32;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 56) = v26;
  *(_BYTE *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = v30;
  sub_1B8ADD7C0(v34, v33, v32);
  swift_bridgeObjectRetain();
  sub_1B8ADD7C0(v24, v26, v28);
  swift_bridgeObjectRetain();
  sub_1B8ADDA88(v24, v26, v28);
  swift_bridgeObjectRelease();
  sub_1B8ADDA88(v34, v33, v32);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1C69C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE08);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v17 - v7;
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v17 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  *(_QWORD *)v13 = sub_1B8B9B7A4();
  *((_QWORD *)v13 + 1) = 0x4008000000000000;
  v13[16] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE10);
  sub_1B8B1C850();
  *(_QWORD *)v11 = sub_1B8B9B7A4();
  *((_QWORD *)v11 + 1) = 0x4008000000000000;
  v11[16] = 0;
  sub_1B8B1C9D4();
  sub_1B8ADE850((uint64_t)v13, (uint64_t)v8, &qword_1EF1BCE08);
  sub_1B8ADE850((uint64_t)v11, (uint64_t)v5, &qword_1EF1BCE08);
  sub_1B8ADE850((uint64_t)v8, a1, &qword_1EF1BCE08);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE18);
  v15 = a1 + *(int *)(v14 + 48);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  sub_1B8ADE850((uint64_t)v5, a1 + *(int *)(v14 + 64), &qword_1EF1BCE08);
  sub_1B8ADE894((uint64_t)v11, &qword_1EF1BCE08);
  sub_1B8ADE894((uint64_t)v13, &qword_1EF1BCE08);
  sub_1B8ADE894((uint64_t)v5, &qword_1EF1BCE08);
  return sub_1B8ADE894((uint64_t)v8, &qword_1EF1BCE08);
}

uint64_t sub_1B8B1C850()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDD0);
  MEMORY[0x1BCCB60C8](&v5);
  v1 = v5;
  MEMORY[0x1BCCB60C8](&v5, v0);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v2 >= 0)
    v3 = v2;
  else
    v3 = v2 + 1;
  sub_1B8B1D3A0(v3 >> 1, v1);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE20);
  sub_1B8ADE950(&qword_1EF1BCE28, &qword_1EF1BCE20, MEMORY[0x1E0DEBF80]);
  sub_1B8B1CE48();
  sub_1B8B1CE90();
  return sub_1B8B9BF84();
}

uint64_t sub_1B8B1C9D4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDD0);
  MEMORY[0x1BCCB60C8](&v12);
  v1 = v12;
  MEMORY[0x1BCCB60C8](&v12, v0);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = swift_bridgeObjectRelease();
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  v5 = v4 >> 1;
  v6 = v1 >> 62;
  if (!(v1 >> 62))
  {
    v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= v5)
      goto LABEL_8;
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1B8B9C728();
  result = swift_bridgeObjectRelease();
  if (v7 < v5)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v11 = sub_1B8B9C728();
  result = swift_bridgeObjectRelease();
  if (v11 < v5)
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_8:
  if (v2 < -1)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1B8B9C728();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
    goto LABEL_28;
  if (v7 < 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((v1 & 0xC000000000000001) != 0 && v5 != v7)
  {
    if (v5 < v7)
    {
      sub_1B8B1CE0C();
      v9 = v5;
      do
      {
        v10 = v9 + 1;
        sub_1B8B9C65C();
        v9 = v10;
      }
      while (v7 != v10);
      goto LABEL_19;
    }
    goto LABEL_30;
  }
LABEL_19:
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C734();
    swift_bridgeObjectRelease_n();
  }
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCE20);
  sub_1B8ADE950(&qword_1EF1BCE28, &qword_1EF1BCE20, MEMORY[0x1E0DEBF80]);
  sub_1B8B1CE48();
  sub_1B8B1CE90();
  return sub_1B8B9BF84();
}

id sub_1B8B1CCB8@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t sub_1B8B1CCC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B1BE24(a1);
}

uint64_t sub_1B8B1CCFC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8B1CD40()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDC0);
  return sub_1B8B9BF48();
}

uint64_t sub_1B8B1CD94@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B1C0DC(a1);
}

uint64_t sub_1B8B1CD9C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B1CDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCDC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B8B1CE0C()
{
  unint64_t result;

  result = qword_1EF1B9580;
  if (!qword_1EF1B9580)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1B9580);
  }
  return result;
}

unint64_t sub_1B8B1CE48()
{
  unint64_t result;
  unint64_t v1;

  result = qword_1EF1BCE30;
  if (!qword_1EF1BCE30)
  {
    v1 = sub_1B8B1CE0C();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE30);
  }
  return result;
}

unint64_t sub_1B8B1CE90()
{
  unint64_t result;

  result = qword_1EF1BCE38;
  if (!qword_1EF1BCE38)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA8ED4, &type metadata for NameAndAvatarView);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE38);
  }
  return result;
}

id sub_1B8B1CED4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  char v41;
  char v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _BYTE v57[7];
  char v58;
  _BYTE v59[7];
  char v60;
  _BYTE v61[7];
  char v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;

  v4 = sub_1B8B9BAA4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B8BA6070;
  result = objc_msgSend(a1, sel_emailAddress);
  if (result)
  {
    v10 = result;
    v11 = sub_1B8B9C17C();
    v13 = v12;

    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v13;
    sub_1B8B9C014();
    sub_1B8B9B474();
    v14 = v64;
    LODWORD(v11) = v65;
    v15 = v66;
    v16 = v67;
    v48 = v68;
    v47 = v69;
    v17 = objc_msgSend(a1, sel_name);
    v52 = v14;
    v53 = v8;
    v51 = v11;
    v50 = v15;
    v49 = v16;
    if (v17)
    {
      v18 = v17;
      v19 = sub_1B8B9C17C();
    }
    else
    {
      v18 = CUIKBundle();
      v19 = sub_1B8B9AFD0();
    }
    v21 = v19;
    v22 = v20;

    v54 = v21;
    v55 = v22;
    sub_1B8ADDBE4();
    v23 = sub_1B8B9BBAC();
    v25 = v24;
    v27 = v26 & 1;
    sub_1B8B9BAC8();
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0CDD6E0], v4);
    sub_1B8B9BABC();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v28 = sub_1B8B9BB94();
    v30 = v29;
    v32 = v31;
    swift_release();
    v33 = v32 & 1;
    sub_1B8ADDA88(v23, v25, v27);
    swift_bridgeObjectRelease();
    sub_1B8B9BDC8();
    v34 = sub_1B8B9BB64();
    v36 = v35;
    LOBYTE(v22) = v37;
    v39 = v38;
    swift_release();
    sub_1B8ADDA88(v28, v30, v33);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath();
    v41 = v51;
    v63 = v51;
    v42 = v49;
    v62 = v49;
    v60 = v22 & 1;
    v58 = 0;
    v56 = 1;
    *(_DWORD *)(a2 + 17) = v54;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v54 + 3);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)v61;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)&v61[3];
    v43 = *(_DWORD *)v59;
    *(_DWORD *)(a2 + 76) = *(_DWORD *)&v59[3];
    *(_DWORD *)(a2 + 73) = v43;
    v44 = *(_DWORD *)v57;
    *(_DWORD *)(a2 + 108) = *(_DWORD *)&v57[3];
    *(_DWORD *)(a2 + 105) = v44;
    v45 = v52;
    *(_QWORD *)a2 = v53;
    *(_QWORD *)(a2 + 8) = v45;
    *(_BYTE *)(a2 + 16) = v41;
    *(_QWORD *)(a2 + 24) = v50;
    *(_BYTE *)(a2 + 32) = v42;
    *(_QWORD *)(a2 + 40) = v48;
    *(_QWORD *)(a2 + 48) = v47;
    *(_QWORD *)(a2 + 56) = v34;
    *(_QWORD *)(a2 + 64) = v36;
    *(_BYTE *)(a2 + 72) = v22 & 1;
    *(_QWORD *)(a2 + 80) = v39;
    *(_QWORD *)(a2 + 88) = KeyPath;
    *(_QWORD *)(a2 + 96) = 1;
    *(_BYTE *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 120) = 1;
    swift_bridgeObjectRetain();
    sub_1B8ADD7C0(v34, v36, v22 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B8ADDA88(v34, v36, v22 & 1);
    swift_bridgeObjectRelease();
    swift_release();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1B8B1D2C0@<D0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[6];
  _OWORD v11[2];
  _BYTE v12[119];

  v3 = *v1;
  v4 = sub_1B8B9B738();
  sub_1B8B1CED4(v3, (uint64_t)v10);
  *(_OWORD *)&v12[71] = v10[4];
  *(_OWORD *)&v12[87] = v10[5];
  *(_OWORD *)&v12[103] = v11[0];
  *(_OWORD *)&v12[7] = v10[0];
  *(_OWORD *)&v12[23] = v10[1];
  *(_OWORD *)&v12[39] = v10[2];
  *(_OWORD *)&v12[55] = v10[3];
  v5 = *(_OWORD *)&v12[96];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)((char *)v11 + 9);
  v6 = *(_OWORD *)&v12[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v12[64];
  *(_OWORD *)(a1 + 97) = v6;
  v7 = *(_OWORD *)&v12[32];
  *(_OWORD *)(a1 + 65) = *(_OWORD *)&v12[48];
  *(_OWORD *)(a1 + 49) = v7;
  result = *(double *)&v12[16];
  v9 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 17) = v9;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 113) = v5;
  return result;
}

uint64_t sub_1B8B1D3A0(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  v5 = sub_1B8B9C728();
  result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B8B9C728();
    result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v8 = sub_1B8B9C728();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1B8B1CE0C();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      sub_1B8B9C65C();
      v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1B8B9C734();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

ValueMetadata *type metadata accessor for NameAndAvatarView()
{
  return &type metadata for NameAndAvatarView;
}

unint64_t sub_1B8B1D54C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BCE40;
  if (!qword_1EF1BCE40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCE48);
    v2 = sub_1B8B1D5B0();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE07A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE40);
  }
  return result;
}

unint64_t sub_1B8B1D5B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BCE50;
  if (!qword_1EF1BCE50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCDC8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BCE58, &qword_1EF1BCDC0, MEMORY[0x1E0CDFA50]);
    v2[1] = MEMORY[0x1E0CD9750];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE50);
  }
  return result;
}

uint64_t sub_1B8B1D634()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B1D64C()
{
  return sub_1B8ADE950(&qword_1EF1BCE60, &qword_1EF1BCE68, MEMORY[0x1E0CDFB08]);
}

void sub_1B8B1D67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void (*v25)(void *, uint64_t);
  id v26;
  unint64_t v27;
  void *v28;
  _QWORD *v29;
  unsigned int v30;
  id v31;
  id v32;
  void (*v33)(uint64_t, _QWORD);
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void (*v46)(void *, uint64_t);
  id v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;

  v2 = v1;
  v54 = *MEMORY[0x1E0C80C00];
  v4 = sub_1B8B9AE80();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CAA078]), sel_init);
  v9 = objc_msgSend(v8, sel_primaryAppleAccountSource);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend((id)objc_opt_self(), sel_calendarForEntityType_eventStore_, 0, v8);
    v50 = v10;
    objc_msgSend(v11, sel_setSource_, v10);
    sub_1B8B1F444(a1);
    v12 = (void *)sub_1B8B9C3BC();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setSharees_, v12);

    swift_getKeyPath();
    v52 = (id)v2;
    sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
    sub_1B8B9B2D0();
    swift_release();
    v13 = *(_QWORD *)(v2 + 48);
    v52 = *(id *)(v2 + 40);
    v53 = v13;
    swift_bridgeObjectRetain();
    sub_1B8B9AE50();
    sub_1B8ADDBE4();
    v14 = sub_1B8B9C554();
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = v14 & 0xFFFFFFFFFFFFLL;
    if (!v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
    }
    v18 = (void *)sub_1B8B9C14C();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setTitle_, v18);

    swift_getKeyPath();
    v52 = (id)v2;
    sub_1B8B9B2D0();
    swift_release();
    LODWORD(v18) = *(unsigned __int8 *)(v2 + 64);
    swift_getKeyPath();
    if ((_DWORD)v18 == 1)
    {
      v52 = (id)v2;
      sub_1B8B9B2D0();
      swift_release();
      swift_retain();
      v19 = (void *)sub_1B8B9BD44();
      swift_release();
      objc_msgSend(v11, sel_setCGColor_, v19);
    }
    else
    {
      v52 = (id)v2;
      sub_1B8B9B2D0();
      swift_release();
      if (*(_QWORD *)(v2 + 104))
      {
        swift_bridgeObjectRetain();
        v19 = (void *)sub_1B8B9C14C();
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = 0;
      }
      objc_msgSend(v11, sel_setSymbolicColorName_, v19);
    }

    v52 = 0;
    v30 = objc_msgSend(v8, sel_saveCalendar_commit_error_, v11, 1, &v52);
    v31 = v52;
    if (v30)
    {
      swift_getKeyPath();
      v52 = (id)v2;
      v32 = v31;
      sub_1B8B9B2D0();
      swift_release();
      v33 = *(void (**)(uint64_t, _QWORD))(v2 + 128);
      swift_retain();
      v33(1, 0);
      swift_release();

    }
    else
    {
      v49 = v8;
      v34 = v52;
      v35 = (void *)sub_1B8B9B00C();

      swift_willThrow();
      if (qword_1EF1BB4E8 != -1)
        swift_once();
      v36 = sub_1B8B9B318();
      __swift_project_value_buffer(v36, (uint64_t)qword_1EF1CF290);
      v37 = v35;
      v38 = v35;
      v39 = sub_1B8B9B300();
      v40 = sub_1B8B9C44C();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc();
        v48 = (void *)swift_slowAlloc();
        v52 = v48;
        *(_DWORD *)v41 = 136315394;
        v51 = sub_1B8B17B04(0xD000000000000015, 0x80000001B8BB82E0, (uint64_t *)&v52);
        sub_1B8B9C524();
        *(_WORD *)(v41 + 12) = 2080;
        v51 = (uint64_t)v35;
        v42 = v35;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BE5C0);
        v43 = sub_1B8B9C1B8();
        v51 = sub_1B8B17B04(v43, v44, (uint64_t *)&v52);
        sub_1B8B9C524();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B8A6A000, v39, v40, "%s unable to save calendar with error: %s", (uint8_t *)v41, 0x16u);
        v45 = v48;
        swift_arrayDestroy();
        MEMORY[0x1BCCB7A9C](v45, -1, -1);
        MEMORY[0x1BCCB7A9C](v41, -1, -1);
      }
      else
      {

      }
      swift_getKeyPath();
      v52 = (id)v2;
      sub_1B8B9B2D0();
      swift_release();
      v46 = *(void (**)(void *, uint64_t))(v2 + 128);
      v47 = v35;
      swift_retain();
      v46(v35, 1);

      swift_release();
    }
  }
  else
  {
    if (qword_1EF1BB4E8 != -1)
      swift_once();
    v20 = sub_1B8B9B318();
    __swift_project_value_buffer(v20, (uint64_t)qword_1EF1CF290);
    v21 = sub_1B8B9B300();
    v22 = sub_1B8B9C44C();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = (void *)swift_slowAlloc();
      v52 = v24;
      *(_DWORD *)v23 = 136315138;
      v51 = sub_1B8B17B04(0xD000000000000015, 0x80000001B8BB82E0, (uint64_t *)&v52);
      sub_1B8B9C524();
      _os_log_impl(&dword_1B8A6A000, v21, v22, "%s Calendar data class is disabled in iCloud settings.)", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v24, -1, -1);
      MEMORY[0x1BCCB7A9C](v23, -1, -1);
    }

    swift_getKeyPath();
    v52 = (id)v2;
    sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
    sub_1B8B9B2D0();
    swift_release();
    v25 = *(void (**)(void *, uint64_t))(v2 + 128);
    v52 = 0;
    v53 = 0xE000000000000000;
    swift_retain();
    sub_1B8B9C638();
    sub_1B8B9C218();
    sub_1B8B9C218();
    v26 = v52;
    v27 = v53;
    sub_1B8B1FFD0();
    v28 = (void *)swift_allocError();
    *v29 = v26;
    v29[1] = v27;
    v25(v28, 1);

    swift_release();
  }
}

void *sub_1B8B1DF1C()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v1 = *(void **)(v0 + 120);
  v2 = v1;
  return v1;
}

uint64_t sub_1B8B1DFA8()
{
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  return swift_unknownObjectRetain();
}

uint64_t sub_1B8B1E030()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B1E0C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  swift_getKeyPath();
  v10 = v1;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v3 = *(_BYTE *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v10 + 96);
  v8 = *(_QWORD *)(v10 + 104);
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B1E17C()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  v1 = *(_QWORD *)(v0 + 128);
  swift_retain();
  return v1;
}

uint64_t sub_1B8B1E210()
{
  uint64_t v0;

  sub_1B8B9C968();
  swift_retain();
  sub_1B8B9BD80();
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B9C980();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B1E2D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B1E2E4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_1B8B200C4(v5, v7) & 1;
}

uint64_t sub_1B8B1E330()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  sub_1B8B9BD80();
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (!v1)
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1E3FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1B8B9C968();
  swift_retain();
  sub_1B8B9BD80();
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  sub_1B8B9C980();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B1E4D0()
{
  swift_getKeyPath();
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2D0();
  swift_release();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B1E558(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1E590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1E5C8(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  _BYTE v4[32];
  uint64_t v5;
  _BYTE v6[16];
  __int128 v7;
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 16);
  a1[4] = *(_OWORD *)a2;
  a1[5] = v2;
  a1[6] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v4[16] = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)v4;
  v7 = *(_OWORD *)&v4[8];
  sub_1B8B1FF60((uint64_t)&v4[24], (uint64_t)v6);
  sub_1B8B183F0((uint64_t)&v8);
  sub_1B8B18418((uint64_t)&v7);
  sub_1B8B18418((uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B1E678(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 112) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

void sub_1B8B1E6B0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = a2;
  v3 = a2;

}

uint64_t sub_1B8B1E6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  swift_retain();
  return swift_release();
}

uint64_t sub_1B8B1E718()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  id v50;
  id v51;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEA8);
  MEMORY[0x1E0C80A78](v1);
  v48 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v4);
  v0[2] = MEMORY[0x1E0DEE9D8];
  sub_1B8B9C0F8();
  v5 = CUIKBundle();
  sub_1B8B9B15C();
  v6 = sub_1B8B9C1A0();
  v8 = v7;
  v0[3] = v6;
  v0[4] = v7;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = nullsub_1;
  v0[17] = 0;
  sub_1B8B9B2DC();
  v0[5] = v6;
  v0[6] = v8;
  v49 = v0;
  v9 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v50 = v9;
  v10 = objc_msgSend(v9, sel_defaultCalendarColorNames);
  if (!v10)
    goto LABEL_32;
  v11 = v10;
  v12 = sub_1B8B9C2F0();

  v13 = sub_1B8B49320(v12);
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_32;
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v51 = (id)objc_opt_self();
    swift_bridgeObjectRetain();
    v47 = v13;
    v15 = (uint64_t *)(v13 + 40);
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v18 = *(v15 - 1);
      v17 = *v15;
      swift_bridgeObjectRetain();
      v19 = (void *)sub_1B8B9C14C();
      v20 = objc_msgSend(v51, sel_displayColorForSymbolicName_, v19, v47);

      if (v20)
      {
        v21 = v20;
        v22 = MEMORY[0x1BCCB5F78]();
        v23 = (void *)sub_1B8B9C14C();
        v24 = objc_msgSend(v50, sel_localizedColorNameForColorName_, v23);

        if (!v24)
        {
          __break(1u);
          goto LABEL_32;
        }
        v25 = sub_1B8B9C17C();
        v27 = v26;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = sub_1B8B86420(0, v16[2] + 1, 1, v16);
        v29 = v16[2];
        v28 = v16[3];
        if (v29 >= v28 >> 1)
          v16 = sub_1B8B86420((_QWORD *)(v28 > 1), v29 + 1, 1, v16);
        v16[2] = v29 + 1;
        v30 = &v16[5 * v29];
        v30[4] = v22;
        v30[5] = v25;
        v30[6] = v27;
        v30[7] = v18;
        v30[8] = v17;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v15 += 2;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
  }
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
  swift_bridgeObjectRelease();
  v49[7] = v16;
  v31 = v16[2];
  if (v31)
  {
    swift_bridgeObjectRetain_n();
    v32 = v16 + 8;
    do
    {
      v33 = *v32;
      if (*v32)
      {
        v34 = *(v32 - 4);
        v35 = *(v32 - 3);
        v36 = *(v32 - 2);
        v37 = *(v32 - 1);
        if (sub_1B8B9C1C4() == 0x6E65657267 && v38 == 0xE500000000000000)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        v40 = sub_1B8B9C8D8();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v40 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_30;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
      v32 += 5;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease_n();
    v41 = (_QWORD *)v49[7];
    if (!v41[2])
      goto LABEL_32;
    v34 = v41[4];
    v35 = v41[5];
    v36 = v41[6];
    v37 = v41[7];
    v33 = v41[8];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_30:
    v42 = v49;
    *((_BYTE *)v49 + 64) = 0;
    v42[9] = v34;
    v42[10] = v35;
    v42[11] = v36;
    v42[12] = v37;
    v42[13] = v33;
    v43 = sub_1B8B9C3A4();
    v44 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v48, 1, 1, v43);
    v45 = (_QWORD *)swift_allocObject();
    v45[2] = 0;
    v45[3] = 0;
    v45[4] = v42;
    swift_retain();
    sub_1B8B1F274(v44, (uint64_t)&unk_1EF1BCEB8, (uint64_t)v45);
    swift_release();
    return (uint64_t)v42;
  }
  else
  {
LABEL_32:
    result = sub_1B8B9C710();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B1ECEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1B8B20408;
  v6[16] = a4;
  return swift_task_switch();
}

uint64_t sub_1B8B1ED4C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_1B8B1ED64()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D20EB0]), sel_init);
  v0[17] = v1;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1B8B1EE1C;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1B8B1F3B8;
  v3[3] = &block_descriptor;
  v3[4] = v2;
  objc_msgSend(v1, sel_startRequestWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_1B8B1EE1C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1B8B1EE7C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v9;

  v2 = *(void **)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  swift_getKeyPath();
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v0 + 80) = v1;
  sub_1B8ADBDEC(&qword_1EF1BC278, (uint64_t (*)(uint64_t))type metadata accessor for CreateFamilyCalendarViewModel, (uint64_t)&unk_1B8BA9160);
  sub_1B8B9B2C4();

  swift_release();
  swift_task_dealloc();
  if (sub_1B8B0FCEC())
  {
    v4 = *(_QWORD *)(v0 + 128);
    v9 = *(void **)(v0 + 136);
    v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    swift_getKeyPath();
    *(_QWORD *)(v0 + 80) = v4;
    sub_1B8B9B2D0();
    swift_release();
    v6 = objc_msgSend(v5, sel_initWithFamilyCircle_, *(_QWORD *)(v4 + 120));
    swift_getKeyPath();
    v7 = swift_task_alloc();
    *(_QWORD *)(v7 + 16) = v4;
    *(_QWORD *)(v7 + 24) = v6;
    *(_QWORD *)(v0 + 80) = v4;
    sub_1B8B9B2C4();
    swift_unknownObjectRelease();
    swift_release();

    swift_task_dealloc();
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B8B1F030()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v15;
  uint64_t v16[2];

  swift_willThrow();
  if (qword_1EF1BB4E8 != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = sub_1B8B9B318();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EF1CF290);
  v3 = v1;
  v4 = v1;
  v5 = sub_1B8B9B300();
  v6 = sub_1B8B9C44C();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 144);
  if (v7)
  {
    v15 = *(void **)(v0 + 136);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16[0] = v10;
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v0 + 80) = sub_1B8B17B04(0xD000000000000012, 0x80000001B8BB8430, v16);
    sub_1B8B9C524();
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BE5C0);
    v12 = sub_1B8B9C1B8();
    *(_QWORD *)(v0 + 80) = sub_1B8B17B04(v12, v13, v16);
    sub_1B8B9C524();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B8A6A000, v5, v6, "%s unable to request family circle with error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCB7A9C](v10, -1, -1);
    MEMORY[0x1BCCB7A9C](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B8B1F274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1B8B9C3A4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1B8B9C398();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1B8B20214(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B8B9C368();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1B8B1F3B8(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BE5C0);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B1F444(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (sub_1B8B9C5D8())
      goto LABEL_3;
LABEL_6:
    v3 = MEMORY[0x1E0DEE9E8];
    if (v2)
      goto LABEL_4;
LABEL_7:
    v8 = -1 << *(_BYTE *)(v1 + 32);
    v30 = v1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain();
    result = swift_retain();
    v6 = 0;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_6;
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEA0);
  v3 = sub_1B8B9C62C();
  if (!v2)
    goto LABEL_7;
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B8B9C5CC();
  sub_1B8AF1C98();
  sub_1B8ADBDEC(&qword_1EF1BC3B0, (uint64_t (*)(uint64_t))sub_1B8AF1C98, MEMORY[0x1E0DEFCF8]);
  result = sub_1B8B9C3E0();
  v1 = v34;
  v30 = v35;
  v5 = v36;
  v6 = v37;
  v7 = v38;
LABEL_11:
  v29 = (unint64_t)(v5 + 64) >> 6;
  v11 = v3 + 56;
  while (v1 < 0)
  {
    v16 = sub_1B8B9C5F0();
    if (!v16)
      goto LABEL_45;
    *(_QWORD *)&v31 = v16;
    sub_1B8AF1C98();
    swift_dynamicCast();
LABEL_36:
    sub_1B8AF1C98();
    swift_dynamicCast();
    result = sub_1B8B9C5FC();
    v22 = -1 << *(_BYTE *)(v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = *(_QWORD *)(v3 + 48) + 40 * v12;
    *(_OWORD *)v13 = v31;
    *(_OWORD *)(v13 + 16) = v32;
    *(_QWORD *)(v13 + 32) = v33;
    ++*(_QWORD *)(v3 + 16);
  }
  if (v7)
  {
    v14 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v15 = v14 | (v6 << 6);
LABEL_35:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    goto LABEL_36;
  }
  v17 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v17 >= v29)
      goto LABEL_45;
    v18 = *(_QWORD *)(v30 + 8 * v17);
    v19 = v6 + 1;
    if (!v18)
    {
      v19 = v6 + 2;
      if (v6 + 2 >= v29)
        goto LABEL_45;
      v18 = *(_QWORD *)(v30 + 8 * v19);
      if (!v18)
      {
        v19 = v6 + 3;
        if (v6 + 3 >= v29)
          goto LABEL_45;
        v18 = *(_QWORD *)(v30 + 8 * v19);
        if (!v18)
        {
          v19 = v6 + 4;
          if (v6 + 4 >= v29)
            goto LABEL_45;
          v18 = *(_QWORD *)(v30 + 8 * v19);
          if (!v18)
          {
            v19 = v6 + 5;
            if (v6 + 5 >= v29)
              goto LABEL_45;
            v18 = *(_QWORD *)(v30 + 8 * v19);
            if (!v18)
            {
              v20 = v6 + 6;
              while (v29 != v20)
              {
                v18 = *(_QWORD *)(v30 + 8 * v20++);
                if (v18)
                {
                  v19 = v20 - 1;
                  goto LABEL_34;
                }
              }
LABEL_45:
              swift_release();
              sub_1B8B1A958();
              return v3;
            }
          }
        }
      }
    }
LABEL_34:
    v7 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v19 << 6);
    v6 = v19;
    goto LABEL_35;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_1B8B1F854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13CalendarUIKit29CreateFamilyCalendarViewModel___observationRegistrar;
  v2 = sub_1B8B9B2E8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1B8B1F8F8()
{
  sub_1B8B1F854();
  return swift_deallocClassInstance();
}

uint64_t sub_1B8B1F91C()
{
  return type metadata accessor for CreateFamilyCalendarViewModel();
}

uint64_t type metadata accessor for CreateFamilyCalendarViewModel()
{
  uint64_t result;

  result = qword_1EF1BCE78;
  if (!qword_1EF1BCE78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B8B1F960()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B8B9B2E8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for CalendarColor()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CalendarColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalendarColor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CalendarColor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarColor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarColor()
{
  return &type metadata for CalendarColor;
}

uint64_t destroy for ColorWithName()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ColorWithName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ColorWithName(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ColorWithName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorWithName(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorWithName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorWithName()
{
  return &type metadata for ColorWithName;
}

uint64_t storeEnumTagSinglePayload for FamilyCalendarScreens(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B8B1FE74 + 4 * byte_1B8BA8F60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B8B1FE94 + 4 * byte_1B8BA8F65[v4]))();
}

_BYTE *sub_1B8B1FE74(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B8B1FE94(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8B1FE9C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8B1FEA4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8B1FEAC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8B1FEB4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCalendarScreens()
{
  return &type metadata for FamilyCalendarScreens;
}

unint64_t sub_1B8B1FED4()
{
  unint64_t result;

  result = qword_1EF1BCE88;
  if (!qword_1EF1BCE88)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA90C0, &type metadata for ColorWithName);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE88);
  }
  return result;
}

unint64_t sub_1B8B1FF1C()
{
  unint64_t result;

  result = qword_1EF1BCE90;
  if (!qword_1EF1BCE90)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9058, &type metadata for FamilyCalendarScreens);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE90);
  }
  return result;
}

uint64_t sub_1B8B1FF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B8B1FFD0()
{
  unint64_t result;

  result = qword_1EF1BCE98;
  if (!qword_1EF1BCE98)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9280, &type metadata for CalendarError);
    atomic_store(result, (unint64_t *)&qword_1EF1BCE98);
  }
  return result;
}

uint64_t sub_1B8B20014(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B8B20078;
  return v6(a1);
}

uint64_t sub_1B8B20078()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B8B200C4(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if ((sub_1B8B9BD5C() & 1) == 0)
    return 0;
  v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (v5 = sub_1B8B9C8D8(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[4];
    v8 = a2[4];
    if (v7)
    {
      if (v8 && (a1[3] == a2[3] && v7 == v8 || (sub_1B8B9C8D8() & 1) != 0))
        return 1;
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B8B20168()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8B20194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1B8AF0528;
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1B8B20408;
  v4[16] = v2;
  return swift_task_switch();
}

uint64_t sub_1B8B20214(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8B20254()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B8B20278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B8AF0528;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF1BCEC0 + dword_1EF1BCEC0))(a1, v4);
}

void sub_1B8B202E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 120);
  *(_QWORD *)(v1 + 120) = v2;
  v4 = v2;

}

uint64_t sub_1B8B2031C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112) = *(_QWORD *)(v0 + 24);
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CalendarError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CalendarError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CalendarError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for CalendarError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CalendarError()
{
  return &type metadata for CalendarError;
}

uint64_t dispatch thunk of EventParticipantModel.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventParticipantModel.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventParticipantModel.emailAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventParticipantModel.url.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of EventParticipantModel.isCurrentUser.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventParticipantModel.contactID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.id.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.id.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.emailAddress.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.emailAddress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.phoneNumber.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.phoneNumber.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.url.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.url.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.isCurrentUser.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.isCurrentUser.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.contactID.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of MutableEventParticipantModel.contactID.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of EventAttendeeModel.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventAttendeeModel.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventAttendeeModel.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventAttendeeModel.comment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void sub_1B8B204D8()
{
  qword_1EF1BCED8 = 0x4069000000000000;
}

void sub_1B8B204E8(__n128 a1, __n128 a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20[5];

  v5 = a2.n128_f64[0];
  v6 = a1.n128_f64[0];
  if (a4 > a3)
    v7 = a4;
  else
    v7 = a3;
  v20[1] = MEMORY[0x1BCCB70F4](a1, a2, v7 * 3.5, v7 * 3.5);
  v20[2] = v8;
  *(double *)&v20[3] = v9;
  *(double *)&v20[4] = v10;
  v11 = v9 < 0.0 || v9 > 180.0;
  if (v11 || (v10 >= 0.0 ? (v12 = v10 > 360.0) : (v12 = 1), v12))
  {
    if (qword_1EF1BB4E0 != -1)
      swift_once();
    v13 = sub_1B8B9B318();
    __swift_project_value_buffer(v13, (uint64_t)qword_1EF1CF278);
    v14 = sub_1B8B9B300();
    v15 = sub_1B8B9C44C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v20[0] = v17;
      *(_DWORD *)v16 = 136315650;
      swift_beginAccess();
      type metadata accessor for MKCoordinateSpan(0);
      v18 = sub_1B8B9C1B8();
      sub_1B8B17B04(v18, v19, v20);
      sub_1B8B9C524();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2048;
      sub_1B8B9C524();
      *(_WORD *)(v16 + 22) = 2048;
      sub_1B8B9C524();
      _os_log_impl(&dword_1B8A6A000, v14, v15, "Coordinate span [%s] created with radius [%f] is invalid, falling back to minimum radius [%f]", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v17, -1, -1);
      MEMORY[0x1BCCB7A9C](v16, -1, -1);
    }

    MEMORY[0x1BCCB70F4](v6, v5, a4 * 3.5, a4 * 3.5);
  }
}

uint64_t sub_1B8B2073C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEE0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEE8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *v1;
  v24 = *((_QWORD *)v1 + 2);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEF0);
  MEMORY[0x1BCCB60C8](&v25, v12);
  v13 = v25;
  if (v25)
  {
    v22 = a1;
    v14 = *((_QWORD *)v1 + 3);
    v15 = *((_BYTE *)v2 + 32);
    sub_1B8AE20B0(v14, v15);
    v16 = sub_1B8B17940(v14, v15);
    v17 = sub_1B8AE20FC(v14, v15);
    if ((v16 & 1) != 0)
    {

      v19 = 1;
      a1 = v22;
    }
    else
    {
      v21 = (uint64_t)&v21;
      MEMORY[0x1E0C80A78](v17);
      *(&v21 - 2) = (uint64_t)v13;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEF8);
      sub_1B8ADE950(&qword_1EF1BCF00, &qword_1EF1BCEF8, MEMORY[0x1E0CDFD00]);
      sub_1B8B9BFB4();

      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v4);
      v18 = &v11[*(int *)(v8 + 36)];
      v18[32] = 0;
      *(_OWORD *)v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      a1 = v22;
      sub_1B8B20DA4((uint64_t)v11, v22);
      v19 = 0;
    }
  }
  else
  {
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v19, 1, v8);
}

double sub_1B8B20958@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  double result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  v4 = sub_1B8B9BFFC();
  v6 = v5;
  v7 = qword_1EF1BB4C8;
  v8 = a1;
  if (v7 != -1)
    swift_once();
  sub_1B8B9C014();
  sub_1B8B9B474();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v12;
  *(_BYTE *)(a2 + 48) = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a2 + 56) = v14;
  return result;
}

uint64_t CLLocationCoordinate2D.id.getter()
{
  sub_1B8B9C3B0();
  sub_1B8B9C218();
  sub_1B8B9C3B0();
  return 0;
}

uint64_t sub_1B8B20AAC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_1B8B9C3B0();
  sub_1B8B9C218();
  result = sub_1B8B9C3B0();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t destroy for MapView(uint64_t a1)
{
  swift_release();
  swift_release();

  return sub_1B8AE20FC(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for MapView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  v7 = v5;
  sub_1B8AE20B0(v4, v6);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for MapView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 16);
  v5 = (void *)v2[2];
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  v7 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  sub_1B8AE20B0(v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  sub_1B8AE20FC(v8, v9);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MapView(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v5;
  sub_1B8AE20FC(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapView()
{
  return &type metadata for MapView;
}

uint64_t sub_1B8B20D8C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1B8B20D9C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B20958(*(void **)(v1 + 16), a1);
}

uint64_t sub_1B8B20DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B8B20DF0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BCF08;
  if (!qword_1EF1BCF08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCF10);
    v2 = sub_1B8B20E54();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE07A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF08);
  }
  return result;
}

unint64_t sub_1B8B20E54()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BCF18;
  if (!qword_1EF1BCF18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCEE8);
    v2[0] = sub_1B8B20ED8();
    v2[1] = sub_1B8ADE950(&qword_1EF1BCF28, &qword_1EF1BCF30, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF18);
  }
  return result;
}

unint64_t sub_1B8B20ED8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = qword_1EF1BCF20;
  if (!qword_1EF1BCF20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCEE0);
    v2 = sub_1B8ADE950(&qword_1EF1BCF00, &qword_1EF1BCEF8, MEMORY[0x1E0CDFD00]);
    v3[0] = MEMORY[0x1E0CE0408];
    v3[1] = v2;
    v3[2] = MEMORY[0x1E0CE0408];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFFA0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF20);
  }
  return result;
}

uint64_t static CUIKSwiftUICrossPlatform.urlFor(date:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  sub_1B8B9C218();
  sub_1B8B9B09C();
  sub_1B8B9C3B0();
  sub_1B8B9B048();
  swift_bridgeObjectRelease();
  v5 = sub_1B8B9B054();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t static CUIKSwiftUICrossPlatform.calendar(useSystemTimeZone:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9B2B8();
  MEMORY[0x1E0C80A78](v5);
  sub_1B8B9B24C();
  if ((a1 & 1) != 0)
    goto LABEL_4;
  CUIKOneIndexedWeekStart();
  sub_1B8B9B1BC();
  result = CalCopyTimeZone();
  if (result)
  {
    v7 = (void *)result;
    sub_1B8B9B2AC();

    sub_1B8B9B264();
LABEL_4:
    sub_1B8B9B15C();
    v8 = sub_1B8B9B198();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
    return sub_1B8B9B240();
  }
  __break(1u);
  return result;
}

id static CUIKSwiftUICrossPlatform.overlayCalendarID()()
{
  id result;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_overlayCalendarID);

    if (v2)
    {
      v3 = sub_1B8B9C17C();
      v5 = v4;

      if (v3)
        v6 = 0;
      else
        v6 = v5 == 0xE000000000000000;
      if (!v6 && (sub_1B8B9C8D8() & 1) == 0)
        return (id)v3;
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CUIKSwiftUICrossPlatform()
{
  return &type metadata for CUIKSwiftUICrossPlatform;
}

uint64_t sub_1B8B21248()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1B8B9B2B8();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B8B9B288();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - v11;
  sub_1B8B9B24C();
  CUIKOneIndexedWeekStart();
  sub_1B8B9B1BC();
  result = CalCopyTimeZone();
  if (result)
  {
    v14 = (void *)result;
    sub_1B8B9B2AC();

    sub_1B8B9B264();
    sub_1B8B9B15C();
    v15 = sub_1B8B9B198();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v2, 0, 1, v15);
    sub_1B8B9B240();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v10, v6);
    v16 = sub_1B8B9B1EC();
    v17 = CUIKOneIndexedWeekStart();
    v18 = v17 - 1;
    if (__OFSUB__(v17, 1))
    {
      __break(1u);
    }
    else if ((v18 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(v16 + 16) >= v18)
      {
        v5 = (char *)(v16 + 32);
        sub_1B8B9C908();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        v19 = swift_dynamicCastClass();
        if (!v19)
        {
          swift_bridgeObjectRelease();
          v19 = MEMORY[0x1E0DEE9D8];
        }
        v20 = *(_QWORD *)(v19 + 16);
        swift_release();
        if (v20 == v18)
        {
          v21 = swift_dynamicCastClass();
          if (!v21)
          {
            swift_bridgeObjectRelease();
            v21 = MEMORY[0x1E0DEE9D8];
          }
LABEL_10:
          swift_bridgeObjectRelease();
          v22 = *(_QWORD *)(v16 + 16);
          if (v22 < v18)
          {
            __break(1u);
          }
          else
          {
            v27 = v5;
            swift_unknownObjectRetain_n();
            v23 = swift_dynamicCastClass();
            if (!v23)
            {
              swift_bridgeObjectRelease();
              v23 = MEMORY[0x1E0DEE9D8];
            }
            v24 = *(_QWORD *)(v23 + 16);
            swift_release();
            if (v24 == v22 - v18)
            {
              v25 = swift_dynamicCastClass();
              if (!v25)
              {
                swift_bridgeObjectRelease();
                v25 = MEMORY[0x1E0DEE9D8];
              }
              goto LABEL_16;
            }
          }
          swift_bridgeObjectRelease();
          v25 = sub_1B8B1A490(v16, (uint64_t)v27, v18, (2 * v22) | 1);
LABEL_16:
          swift_bridgeObjectRelease();
          v28 = v25;
          sub_1B8B9040C(v21);
          v26 = v28;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
          return v26;
        }
LABEL_20:
        swift_bridgeObjectRelease();
        v21 = sub_1B8B1A490(v16, (uint64_t)v5, 0, (2 * v18) | 1);
        goto LABEL_10;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t EventIntegrationModelObject.isCompleted.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t EventIntegrationModelObject.isCompleted.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*EventIntegrationModelObject.isCompleted.modify())()
{
  return nullsub_1;
}

uint64_t EventIntegrationModelObject.color.getter()
{
  return swift_retain();
}

uint64_t EventIntegrationModelObject.color.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*EventIntegrationModelObject.color.modify())()
{
  return nullsub_1;
}

uint64_t EventIntegrationModelObject.reminderListTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventIntegrationModelObject.reminderListTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*EventIntegrationModelObject.reminderListTitle.modify())()
{
  return nullsub_1;
}

uint64_t EventIntegrationModelObject.init(isCompleted:color:reminderListTitle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t EventIntegrationModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5) & 1;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t EventIntegrationModelObject.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1B8B9C980();
  if (v1)
  {
    sub_1B8B9C980();
    swift_retain();
    sub_1B8B9BD80();
    swift_release();
    if (v2)
    {
LABEL_3:
      sub_1B8B9C980();
      swift_bridgeObjectRetain();
      sub_1B8B9C1E8();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B8B9C980();
    if (v2)
      goto LABEL_3;
  }
  return sub_1B8B9C980();
}

uint64_t static EventIntegrationModelObject.StringCodedColor.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      v3 = sub_1B8B9BD5C();
      swift_release();
      swift_release();
      if ((v3 & 1) != 0)
        return 1;
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1B8B21844()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x726F6C6F63;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x656C706D6F437369;
}

uint64_t sub_1B8B218A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B22A0C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8B218CC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B8B218D8()
{
  sub_1B8B22940();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B21900()
{
  sub_1B8B22940();
  return sub_1B8B9C9EC();
}

uint64_t EventIntegrationModelObject.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCF38);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v10[1] = v1[2];
  v11 = v8;
  v10[0] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B22940();
  sub_1B8B9C9C8();
  v15 = 0;
  sub_1B8B9C878();
  if (!v2)
  {
    v12 = v11;
    v14 = 1;
    sub_1B8B22984();
    sub_1B8B9C8A8();
    v13 = 2;
    sub_1B8B9C848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t EventIntegrationModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventIntegrationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t EventIntegrationModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCF50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B22940();
  sub_1B8B9C9B0();
  if (!v2)
  {
    v20 = 0;
    v9 = sub_1B8B9C7E8();
    v19 = 1;
    sub_1B8B229C8();
    sub_1B8B9C818();
    v11 = v17[1];
    v18 = 2;
    swift_retain();
    v12 = sub_1B8B9C7A0();
    v14 = v13;
    v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16 = v12;
    v15(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v9 & 1;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v14;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B8B21CE8()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1B8B21CF0()
{
  return swift_retain();
}

uint64_t sub_1B8B21CF8()
{
  sub_1B8B9C968();
  EventIntegrationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B21D54()
{
  sub_1B8B9C968();
  EventIntegrationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B21DA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EventIntegrationModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8B21DBC(_QWORD *a1)
{
  return EventIntegrationModelObject.encode(to:)(a1);
}

uint64_t EventIntegrationModelObject.StringCodedColor.wrappedValue.getter()
{
  return swift_retain();
}

uint64_t EventIntegrationModelObject.StringCodedColor.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*EventIntegrationModelObject.StringCodedColor.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t EventIntegrationModelObject.StringCodedColor.init(wrappedValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static EventIntegrationModelObject.StringCodedColor.transformDecodedValue(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;
  _QWORD v14[3];
  char v15;

  v6 = sub_1B8B9BD50();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_bridgeObjectRetain();
    CUIKCalendarColor.init(_:)(a1, a2, (uint64_t)v14);
    if ((v15 & 1) == 0)
      __asm { BR              X10 }
    v11 = *(double *)&v14[1];
    v10 = *(double *)&v14[2];
    v12 = *(double *)v14;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0CDF3E8], v6);
    result = MEMORY[0x1BCCB5F6C](v9, v12, v11, v10, 1.0);
  }
  else
  {
    result = 1;
  }
  *a3 = result;
  return result;
}

uint64_t static EventIntegrationModelObject.StringCodedColor.transformValueForEncoding(_:)(_QWORD *a1)
{
  return sub_1B8B22B6C(a1);
}

uint64_t EventIntegrationModelObject.StringCodedColor.hash(into:)()
{
  _QWORD *v0;

  if (!*v0)
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_retain();
  sub_1B8B9BD80();
  return swift_release();
}

uint64_t EventIntegrationModelObject.StringCodedColor.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_retain();
    sub_1B8B9BD80();
    swift_release();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B220F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static EventIntegrationModelObject.StringCodedColor.transformDecodedValue(_:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2);
}

uint64_t sub_1B8B22114@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B8B22B6C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B8B2213C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_retain();
    sub_1B8B9BD80();
    swift_release();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B221AC()
{
  _QWORD *v0;

  if (!*v0)
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_retain();
  sub_1B8B9BD80();
  return swift_release();
}

uint64_t sub_1B8B22218()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_retain();
    sub_1B8B9BD80();
    swift_release();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B22284@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B8B22298(a1, a2);
}

uint64_t sub_1B8B22298@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7[4];
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B9C9A4();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3D0);
    sub_1B8B22D48(&qword_1EF1BCF68, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEE9A0]);
    sub_1B8B9C8E4();
    static EventIntegrationModelObject.StringCodedColor.transformDecodedValue(_:)(v7[2], (void *)v7[3], v7);
    v5 = v7[0];
    if (v7[0] == 1)
    {
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      sub_1B8B9C638();
      sub_1B8B9C218();
      sub_1B8B9C6F8();
      sub_1B8B9C218();
      sub_1B8B9C6A4();
      swift_allocError();
      sub_1B8B9C68C();
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      *a2 = v5;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B8B2247C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B8B22494(a1, *v1);
}

uint64_t sub_1B8B22494(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6[7];
  uint64_t v7;

  v7 = a2;
  result = sub_1B8B22B6C(&v7);
  if (!v2)
  {
    v6[5] = result;
    v6[6] = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B8B9C9BC();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v6[3]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC3D0);
    sub_1B8B22D48(&qword_1EF1BCF70, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
    sub_1B8B9C8F0();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return result;
}

uint64_t sub_1B8B2257C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      v3 = sub_1B8B9BD5C();
      swift_release();
      swift_release();
      if ((v3 & 1) != 0)
        return 1;
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1B8B225EC(void *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  double v14;
  double v15[5];

  v15[4] = *(double *)MEMORY[0x1E0C80C00];
  v14 = 0.0;
  v15[0] = 0.0;
  v13 = 0.0;
  objc_msgSend(a1, sel_cuik_getRed_green_blue_alpha_, v15, &v14, &v13, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA08);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B8BA7860;
  v4 = round(v15[0] * 255.0);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = MEMORY[0x1E0DEB418];
  v6 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v3 + 64) = v6;
  *(_QWORD *)(v3 + 32) = (uint64_t)v4;
  v7 = round(v14 * 255.0);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v3 + 96) = v5;
  *(_QWORD *)(v3 + 104) = v6;
  *(_QWORD *)(v3 + 72) = (uint64_t)v7;
  v8 = round(v13 * 255.0);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v8 >= 9.22337204e18)
    goto LABEL_19;
  *(_QWORD *)(v3 + 136) = v5;
  *(_QWORD *)(v3 + 144) = v6;
  *(_QWORD *)(v3 + 112) = (uint64_t)v8;
  v9 = sub_1B8B9C188();
  v11 = v10;
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v11;
  return swift_bridgeObjectRelease();
}

void sub_1B8B22818(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

BOOL _s13CalendarUIKit27EventIntegrationModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v3 = a1[2];
  v4 = a1[3];
  v6 = a2[1];
  v5 = a2[2];
  v7 = a2[3];
  if (a1[1])
  {
    if (!v6)
      return 0;
    swift_retain();
    swift_retain();
    v8 = sub_1B8B9BD5C();
    swift_release();
    swift_release();
    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  if (!v4)
    return !v7;
  return v7 && (v3 == v5 && v4 == v7 || (sub_1B8B9C8D8() & 1) != 0);
}

unint64_t sub_1B8B22940()
{
  unint64_t result;

  result = qword_1EF1BCF40;
  if (!qword_1EF1BCF40)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA96C4, &type metadata for EventIntegrationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF40);
  }
  return result;
}

unint64_t sub_1B8B22984()
{
  unint64_t result;

  result = qword_1EF1BCF48;
  if (!qword_1EF1BCF48)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventIntegrationModelObject.StringCodedColor, &type metadata for EventIntegrationModelObject.StringCodedColor);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF48);
  }
  return result;
}

unint64_t sub_1B8B229C8()
{
  unint64_t result;

  result = qword_1EF1BCF58;
  if (!qword_1EF1BCF58)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventIntegrationModelObject.StringCodedColor, &type metadata for EventIntegrationModelObject.StringCodedColor);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF58);
  }
  return result;
}

uint64_t sub_1B8B22A0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C706D6F437369 && a2 == 0xEB00000000646574;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB8450)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B8B22B6C(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[6];

  if (!*a1)
    return 0;
  v1 = swift_allocObject();
  sub_1B8B0746C();
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  swift_retain_n();
  v2 = (void *)sub_1B8B9C4B8();
  v6[4] = sub_1B8B233A0;
  v6[5] = v1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_1B8B22818;
  v6[3] = &block_descriptor_0;
  v3 = _Block_copy(v6);
  swift_retain();
  swift_release();
  CUIKPerformWithResolvedColorForDynamicColor(v2, 1, (void (**)(_QWORD, _QWORD))v3);
  swift_release();
  _Block_release(v3);

  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v4;
}

unint64_t sub_1B8B22CAC()
{
  unint64_t result;

  result = qword_1EF1BCF60;
  if (!qword_1EF1BCF60)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventIntegrationModelObject, &type metadata for EventIntegrationModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF60);
  }
  return result;
}

uint64_t sub_1B8B22CF0()
{
  return sub_1B8B22D48(&qword_1EF1BCF68, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEE9A0]);
}

uint64_t sub_1B8B22D1C()
{
  return sub_1B8B22D48(&qword_1EF1BCF70, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
}

uint64_t sub_1B8B22D48(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC3D0);
    v8 = a2;
    result = MEMORY[0x1BCCB79D0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B22DA8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1B8B229C8();
  result = sub_1B8B22984();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1B8B22DD8()
{
  unint64_t result;

  result = qword_1EF1BCF78;
  if (!qword_1EF1BCF78)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventIntegrationModelObject.StringCodedColor, &type metadata for EventIntegrationModelObject.StringCodedColor);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF78);
  }
  return result;
}

uint64_t sub_1B8B22E1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_retain();
}

uint64_t sub_1B8B22E28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t destroy for EventIntegrationModelObject()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventIntegrationModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EventIntegrationModelObject(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EventIntegrationModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventIntegrationModelObject(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventIntegrationModelObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventIntegrationModelObject()
{
  return &type metadata for EventIntegrationModelObject;
}

_QWORD *initializeBufferWithCopyOfBuffer for EventIntegrationModelObject.StringCodedColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for EventIntegrationModelObject.StringCodedColor()
{
  return swift_release();
}

_QWORD *assignWithCopy for EventIntegrationModelObject.StringCodedColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for EventIntegrationModelObject.StringCodedColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventIntegrationModelObject.StringCodedColor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventIntegrationModelObject.StringCodedColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventIntegrationModelObject.StringCodedColor()
{
  return &type metadata for EventIntegrationModelObject.StringCodedColor;
}

uint64_t storeEnumTagSinglePayload for EventIntegrationModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B8B231FC + 4 * byte_1B8BA9415[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B8B23230 + 4 * byte_1B8BA9410[v4]))();
}

uint64_t sub_1B8B23230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B23238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B23240);
  return result;
}

uint64_t sub_1B8B2324C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B23254);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B8B23258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B23260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventIntegrationModelObject.CodingKeys()
{
  return &type metadata for EventIntegrationModelObject.CodingKeys;
}

unint64_t sub_1B8B23280()
{
  unint64_t result;

  result = qword_1EF1BCF80;
  if (!qword_1EF1BCF80)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA969C, &type metadata for EventIntegrationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF80);
  }
  return result;
}

unint64_t sub_1B8B232C8()
{
  unint64_t result;

  result = qword_1EF1BCF88;
  if (!qword_1EF1BCF88)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA960C, &type metadata for EventIntegrationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF88);
  }
  return result;
}

unint64_t sub_1B8B23310()
{
  unint64_t result;

  result = qword_1EF1BCF90;
  if (!qword_1EF1BCF90)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9634, &type metadata for EventIntegrationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCF90);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1B8B2337C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B8B233A0(void *a1)
{
  uint64_t v1;

  return sub_1B8B225EC(a1, v1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for AvatarView()
{
  return &type metadata for AvatarView;
}

unint64_t sub_1B8B233D8()
{
  unint64_t result;

  result = qword_1EF1BCFA0;
  if (!qword_1EF1BCFA0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA97BC, &type metadata for AvatarView);
    atomic_store(result, (unint64_t *)&qword_1EF1BCFA0);
  }
  return result;
}

id sub_1B8B2341C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v3 = sub_1B8B9C080();
  v21 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B8B9C0A4();
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B8B9C08C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(), sel_createAvatarViewController);
  sub_1B8B05B9C(0, (unint64_t *)&qword_1EF1BCFB0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF530], v9);
  v14 = (void *)sub_1B8B9C488();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = v13;
  aBlock[4] = sub_1B8B23BFC;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B8B23A90;
  aBlock[3] = &block_descriptor_1;
  v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v17 = v13;
  sub_1B8B9C098();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1B8B23C1C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFC0);
  sub_1B8B23C64();
  sub_1B8B9C5B4();
  MEMORY[0x1BCCB6608](0, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  swift_release();
  return v17;
}

void sub_1B8B23694(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id aBlock[8];

  aBlock[7] = *(id *)MEMORY[0x1E0C80C00];
  v3 = sub_1B8B9C080();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B8B9C0A4();
  v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
  v11 = (void *)objc_opt_self();
  v12 = (void *)sub_1B8B9C2E4();
  v13 = objc_msgSend(v11, sel_cuik_predicateForContactsMatchingHandleStrings_, v12);

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFD0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B8BA9720;
  *(_QWORD *)(v14 + 32) = objc_msgSend(a2, sel_descriptorForRequiredKeys);
  aBlock[0] = (id)v14;
  sub_1B8B9C2FC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFD8);
  v15 = (void *)sub_1B8B9C2E4();
  swift_bridgeObjectRelease();
  aBlock[0] = 0;
  v16 = objc_msgSend(v10, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, v13, v15, aBlock);

  v17 = aBlock[0];
  if (v16)
  {
    sub_1B8B05B9C(0, (unint64_t *)&qword_1EF1BCFE0);
    v18 = sub_1B8B9C2F0();
    v28 = v7;
    v19 = v4;
    v20 = v18;
    v21 = v17;

    sub_1B8B05B9C(0, (unint64_t *)&qword_1EF1BCFB0);
    v22 = (void *)sub_1B8B9C470();
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = a2;
    v23[3] = v20;
    aBlock[4] = sub_1B8B23CDC;
    aBlock[5] = v23;
    aBlock[0] = (id)MEMORY[0x1E0C809B0];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1B8B23A90;
    aBlock[3] = &block_descriptor_6;
    v24 = _Block_copy(aBlock);
    v25 = a2;
    swift_release();
    sub_1B8B9C098();
    aBlock[0] = (id)MEMORY[0x1E0DEE9D8];
    sub_1B8B23C1C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFC0);
    sub_1B8B23C64();
    sub_1B8B9C5B4();
    MEMORY[0x1BCCB6608](0, v9, v6, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
  }
  else
  {
    v26 = aBlock[0];
    v27 = (void *)sub_1B8B9B00C();

    swift_willThrow();
  }
}

void sub_1B8B23A28(void *a1)
{
  id v2;

  sub_1B8B05B9C(0, (unint64_t *)&qword_1EF1BCFE0);
  v2 = (id)sub_1B8B9C2E4();
  objc_msgSend(a1, sel_setContacts_, v2);

}

uint64_t sub_1B8B23A90(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

id sub_1B8B23ABC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B8B2341C(a1, *v1);
}

uint64_t sub_1B8B23AC8()
{
  sub_1B8B23B8C();
  return sub_1B8B9B984();
}

uint64_t sub_1B8B23B18()
{
  sub_1B8B23B8C();
  return sub_1B8B9B954();
}

void sub_1B8B23B68()
{
  sub_1B8B23B8C();
  sub_1B8B9B978();
  __break(1u);
}

unint64_t sub_1B8B23B8C()
{
  unint64_t result;

  result = qword_1EF1BCFA8;
  if (!qword_1EF1BCFA8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9744, &type metadata for AvatarView);
    atomic_store(result, (unint64_t *)&qword_1EF1BCFA8);
  }
  return result;
}

uint64_t sub_1B8B23BD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1B8B23BFC()
{
  uint64_t v0;

  sub_1B8B23694(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_1B8B23C1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BCFB8;
  if (!qword_1EF1BCFB8)
  {
    v1 = sub_1B8B9C080();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BCFB8);
  }
  return result;
}

unint64_t sub_1B8B23C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BCFC8;
  if (!qword_1EF1BCFC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCFC0);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BCFC8);
  }
  return result;
}

uint64_t sub_1B8B23CB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1B8B23CDC()
{
  uint64_t v0;

  sub_1B8B23A28(*(void **)(v0 + 16));
}

uint64_t StringBackedURL.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 8))
    return sub_1B8B9B048();
  v4 = sub_1B8B9B054();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t sub_1B8B23D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRetain();
    sub_1B8B9B048();
  }
  else
  {
    v3 = sub_1B8B9B054();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B23DBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  sub_1B8AE3600(a1, (uint64_t)&v16 - v8);
  sub_1B8AE3600((uint64_t)v9, (uint64_t)v7);
  v10 = sub_1B8B9B054();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    sub_1B8B23FD4((uint64_t)v9);
    sub_1B8B23FD4((uint64_t)v7);
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v12 = sub_1B8B9B018();
    v13 = v14;
    sub_1B8B23FD4((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  }
  result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t StringBackedURL.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE3600(a1, (uint64_t)v6);
  v7 = sub_1B8B9B054();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1B8B23FD4(a1);
    sub_1B8B23FD4((uint64_t)v6);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = sub_1B8B9B018();
    v10 = v11;
    sub_1B8B23FD4(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  result = swift_bridgeObjectRelease();
  *v2 = v9;
  v2[1] = v10;
  return result;
}

uint64_t sub_1B8B23FD4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*StringBackedURL.wrappedValue.modify(_QWORD *a1))(uint64_t ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v5 = malloc(v4);
  v3[4] = v5;
  if (*(_QWORD *)(v1 + 8))
  {
    sub_1B8B9B048();
  }
  else
  {
    v6 = sub_1B8B9B054();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  return sub_1B8B240DC;
}

void sub_1B8B240DC(uint64_t ***a1, char a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = *a1;
  v3 = (uint64_t)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    v5 = (uint64_t)v2[1];
    v4 = (uint64_t)v2[2];
    sub_1B8AE3600(v3, v4);
    sub_1B8AE3600(v4, v5);
    v6 = sub_1B8B9B054();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
    v9 = (uint64_t)v2[1];
    v10 = (uint64_t)v2[2];
    if (v8 == 1)
    {
      sub_1B8B23FD4((uint64_t)v2[2]);
      sub_1B8B23FD4(v9);
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v11 = sub_1B8B9B018();
      v12 = v21;
      sub_1B8B23FD4(v10);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
    }
    v23 = v2[3];
    v22 = v2[4];
    v25 = v2[1];
    v24 = v2[2];
    v26 = *v2;
    swift_bridgeObjectRelease();
    *v26 = v11;
    v26[1] = v12;
    sub_1B8B23FD4((uint64_t)v22);
  }
  else
  {
    v13 = (uint64_t)v2[3];
    sub_1B8AE3600(v3, v13);
    v14 = sub_1B8B9B054();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    v17 = (uint64_t)v2[3];
    v18 = (uint64_t)v2[4];
    if (v16 == 1)
    {
      sub_1B8B23FD4((uint64_t)v2[4]);
      sub_1B8B23FD4(v17);
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = sub_1B8B9B018();
      v20 = v27;
      sub_1B8B23FD4(v18);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    }
    v23 = v2[3];
    v22 = v2[4];
    v25 = v2[1];
    v24 = v2[2];
    v28 = *v2;
    swift_bridgeObjectRelease();
    *v28 = v19;
    v28[1] = v20;
  }
  free(v22);
  free(v23);
  free(v24);
  free(v25);
  free(v2);
}

uint64_t StringBackedURL.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8AE3600(a1, (uint64_t)v6);
  v7 = sub_1B8B9B054();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1B8B23FD4(a1);
    result = sub_1B8B23FD4((uint64_t)v6);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = sub_1B8B9B018();
    v11 = v12;
    sub_1B8B23FD4(a1);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  *a2 = v10;
  a2[1] = v11;
  return result;
}

uint64_t StringBackedURL.hash(into:)()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t static StringBackedURL.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (sub_1B8B9C8D8() & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1B8B24438()
{
  return 0x65756C6176;
}

uint64_t sub_1B8B2444C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B8B9C8D8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B8B244D8()
{
  sub_1B8B24614();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B24500()
{
  sub_1B8B24614();
  return sub_1B8B9C9EC();
}

uint64_t StringBackedURL.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B24614();
  sub_1B8B9C9C8();
  sub_1B8B9C848();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1B8B24614()
{
  unint64_t result;

  result = qword_1EF1BCFF8;
  if (!qword_1EF1BCFF8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA99C0, &type metadata for StringBackedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BCFF8);
  }
  return result;
}

uint64_t StringBackedURL.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  return sub_1B8B9C998();
}

uint64_t StringBackedURL.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD000);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B24614();
  sub_1B8B9C9B0();
  if (!v2)
  {
    v9 = sub_1B8B9C7A0();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1B8B247F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  return sub_1B8B9C998();
}

uint64_t sub_1B8B2486C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_1B8B9C980();
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B248E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1B8B9C968();
  sub_1B8B9C980();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
  }
  return sub_1B8B9C998();
}

unint64_t sub_1B8B2495C()
{
  unint64_t result;

  result = qword_1EF1BD008;
  if (!qword_1EF1BD008)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for StringBackedURL, &type metadata for StringBackedURL);
    atomic_store(result, (unint64_t *)&qword_1EF1BD008);
  }
  return result;
}

uint64_t sub_1B8B249A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return StringBackedURL.init(from:)(a1, a2);
}

uint64_t sub_1B8B249B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B24614();
  sub_1B8B9C9C8();
  sub_1B8B9C848();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1B8B24AA0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (sub_1B8B9C8D8() & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

uint64_t getEnumTagSinglePayload for StringBackedURL(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StringBackedURL(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StringBackedURL()
{
  return &type metadata for StringBackedURL;
}

uint64_t storeEnumTagSinglePayload for StringBackedURL.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B8B24BFC + 4 * byte_1B8BA9820[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B8B24C1C + 4 * byte_1B8BA9825[v4]))();
}

_BYTE *sub_1B8B24BFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B8B24C1C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8B24C24(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8B24C2C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B8B24C34(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B8B24C3C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StringBackedURL.CodingKeys()
{
  return &type metadata for StringBackedURL.CodingKeys;
}

unint64_t sub_1B8B24C5C()
{
  unint64_t result;

  result = qword_1EF1BD010;
  if (!qword_1EF1BD010)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9998, &type metadata for StringBackedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD010);
  }
  return result;
}

unint64_t sub_1B8B24CA4()
{
  unint64_t result;

  result = qword_1EF1BD018;
  if (!qword_1EF1BD018)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9908, &type metadata for StringBackedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD018);
  }
  return result;
}

unint64_t sub_1B8B24CEC()
{
  unint64_t result;

  result = qword_1EF1BD020;
  if (!qword_1EF1BD020)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9930, &type metadata for StringBackedURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD020);
  }
  return result;
}

uint64_t sub_1B8B24D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v8 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD028);
  v9 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B9B780();
  v15 = *(_OWORD *)(v1 + 32);
  v16 = *(_QWORD *)(v1 + 48);
  v11 = *(_OWORD *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD030);
  sub_1B8B9BEA0();
  v10 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD038);
  sub_1B8B25FDC(&qword_1EF1BD040, &qword_1EF1BD038, (uint64_t (*)(void))sub_1B8B25F4C);
  sub_1B8B9BEF4();
  v13 = v15;
  v14 = v16;
  sub_1B8B9BE88();
  v13 = v11;
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v1 + 48);
  sub_1B8B2616C(v1);
  sub_1B8ADE950(&qword_1EF1BD0B8, &qword_1EF1BD028, MEMORY[0x1E0CDFBB0]);
  sub_1B8B9BD14();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v4, v2);
}

uint64_t sub_1B8B24F7C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 24);
  swift_getKeyPath();
  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 48);
  sub_1B8B1CD9C((uint64_t)&v5);
  sub_1B8B2616C(a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD0C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD050);
  sub_1B8ADE950(&qword_1EF1BD0D0, &qword_1EF1BD0C8, MEMORY[0x1E0DEAF48]);
  sub_1B8B25F4C();
  return sub_1B8B9BF84();
}

id sub_1B8B25084@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD050);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  result = objc_msgSend(v8, sel_title);
  if (result)
  {
    v10 = result;
    v11 = sub_1B8B9C17C();
    v13 = v12;

    v15[0] = v11;
    v15[1] = v13;
    MEMORY[0x1E0C80A78](v14);
    v15[-2] = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD060);
    sub_1B8B25FDC(&qword_1EF1BD058, &qword_1EF1BD060, (uint64_t (*)(void))sub_1B8B26040);
    sub_1B8ADDBE4();
    sub_1B8B9BF9C();
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B251E0(uint64_t a1, uint64_t a2)
{
  sub_1B8B2523C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBF10);
  return sub_1B8B9BF48();
}

id sub_1B8B2523C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id result;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v5 = *(_QWORD *)(v2 + 24);
  v23 = v5;
  v6 = (char **)MEMORY[0x1E0DEE9D8];
  v21 = MEMORY[0x1E0DEE9D8];
  if (v5 >> 62)
    goto LABEL_12;
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v7; v7 = sub_1B8B9C728())
  {
    v20 = a1;
    a1 = v5 & 0xC000000000000001;
    v8 = 4;
    v6 = &selRef_calendarEventLoader_occurrencesDidUpdateBetweenStart_end_generation_wasEmptyLoad_;
    while (1)
    {
      v9 = a1 ? (id)MEMORY[0x1BCCB6800](v8 - 4, v5) : *(id *)(v5 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      result = objc_msgSend(v9, sel_calendarInfos);
      if (!result)
        goto LABEL_29;
      v13 = result;
      sub_1B8B261D0();
      v14 = sub_1B8B9C2F0();

      sub_1B8B9055C(v14);
      ++v8;
      if (v11 == v7)
      {
        sub_1B8B2620C((uint64_t)&v23);
        sub_1B8B2620C((uint64_t)&v23);
        v15 = v21;
        a1 = v20;
        v6 = (char **)MEMORY[0x1E0DEE9D8];
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain_n();
  }
  sub_1B8B2620C((uint64_t)&v23);
  sub_1B8B2620C((uint64_t)&v23);
  v15 = MEMORY[0x1E0DEE9D8];
LABEL_14:
  v22 = (unint64_t)v6;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (id)sub_1B8B9C728();
    v16 = (uint64_t)result;
    if (result)
      goto LABEL_16;
LABEL_25:
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
    goto LABEL_26;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (id)swift_bridgeObjectRetain();
  if (!v16)
    goto LABEL_25;
LABEL_16:
  if (v16 < 1)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  for (i = 0; i != v16; ++i)
  {
    if (objc_msgSend(*(id *)(v15 + 8 * i + 32), sel_calendar, v20))
    {
      MEMORY[0x1BCCB6464]();
      if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B8B9C314();
      sub_1B8B9C338();
      sub_1B8B9C2FC();
    }
  }
  swift_bridgeObjectRelease();
  v18 = v22;
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19 = sub_1B8B26234(v18, a1, a2);
  swift_bridgeObjectRelease();
  result = (id)swift_bridgeObjectRelease();
  if (v19)
    return v19;
LABEL_30:
  __break(1u);
  return result;
}

id sub_1B8B254EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD060);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_calendarInfos);
  if (result)
  {
    v9 = result;
    sub_1B8B261D0();
    v10 = sub_1B8B9C2F0();

    v11[1] = v10;
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BEA50);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD070);
    sub_1B8ADE950(&qword_1EF1BD0D8, &qword_1EF1BEA50, MEMORY[0x1E0DEAF48]);
    sub_1B8B26040();
    sub_1B8B9BF84();
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1B8B2564C(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend(*a1, *a2);
  v5 = sub_1B8B9C17C();
  v7 = v6;

  *a3 = v5;
  a3[1] = v7;
}

id sub_1B8B2569C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id result;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v22 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD080);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD090);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD070);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v24 = v12;
  v23 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD0E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD0E8);
  sub_1B8ADE950(&qword_1EF1BD0F0, &qword_1EF1BD0E0, MEMORY[0x1E0CD84A8]);
  sub_1B8B26548();
  sub_1B8B9BE28();
  result = objc_msgSend(v12, sel_calendar);
  if (result)
  {
    v14 = result;
    v15 = objc_msgSend(result, sel_calendarIdentifier);

    v16 = sub_1B8B9C17C();
    v18 = v17;

    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    v19 = (uint64_t *)&v4[*(int *)(v21 + 36)];
    *v19 = v16;
    v19[1] = v18;
    sub_1B8B265CC((uint64_t)v4, (uint64_t)v11);
    v20 = (uint64_t *)&v11[*(int *)(v9 + 36)];
    *v20 = v16;
    v20[1] = v18;
    swift_bridgeObjectRetain();
    sub_1B8B26614((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (id)sub_1B8B26654((uint64_t)v11, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B258D4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD110);
  sub_1B8ADE950(&qword_1EF1BD118, &qword_1EF1BD110, MEMORY[0x1E0CE0678]);
  return sub_1B8B9B3F0();
}

id sub_1B8B2594C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  result = objc_msgSend(a1, sel_title);
  if (result)
  {
    v5 = result;
    v6 = sub_1B8B9C17C();
    v8 = v7;

    v24 = v6;
    v25 = v8;
    sub_1B8ADDBE4();
    v9 = sub_1B8B9BBAC();
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v16 = objc_msgSend(a1, sel_stringForSharedCalendar, v24, v25);
    if (v16)
    {
      sub_1B8B9C17C();

      v16 = (id)sub_1B8B9BBAC();
      v18 = v17;
      v20 = v19;
      v22 = v21 & 1;
    }
    else
    {
      v18 = 0;
      v22 = 0;
      v20 = 0;
    }
    v23 = v13 & 1;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v23;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 40) = v18;
    *(_QWORD *)(a2 + 48) = v22;
    *(_QWORD *)(a2 + 56) = v20;
    sub_1B8ADD7C0(v9, v11, v23);
    swift_bridgeObjectRetain();
    sub_1B8B266A4((uint64_t)v16, v18, v22, v20);
    sub_1B8B266D4((uint64_t)v16, v18, v22, v20);
    sub_1B8ADDA88(v9, v11, v23);
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1B8B25AD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  id result;
  uint64_t v6;

  v4 = sub_1B8B9BE04();
  result = objc_msgSend(a1, sel_color);
  if (result)
  {
    v6 = MEMORY[0x1BCCB5F78]();
    result = (id)sub_1B8B9BD98();
    *a2 = v4;
    a2[1] = v6;
    a2[2] = (uint64_t)result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B25B4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B24D30(a1);
}

void (*sub_1B8B25B8C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1B8B25C0C(v6, a2, a3);
  return sub_1B8B25BE0;
}

void sub_1B8B25BE0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1B8B25C0C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1BCCB6800](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1B8B25C78;
  }
  __break(1u);
  return result;
}

void sub_1B8B25C78(id *a1)
{

}

uint64_t destroy for CalendarView(uint64_t a1)
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for CalendarView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = (void *)a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  swift_retain();
  swift_retain();
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CalendarView(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CalendarView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarView()
{
  return &type metadata for CalendarView;
}

uint64_t sub_1B8B25F34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B25F44()
{
  uint64_t v0;

  return sub_1B8B24F7C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1B8B25F4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = qword_1EF1BD048;
  if (!qword_1EF1BD048)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD050);
    v2 = sub_1B8B25FDC(&qword_1EF1BD058, &qword_1EF1BD060, (uint64_t (*)(void))sub_1B8B26040);
    v3[0] = MEMORY[0x1E0CDDD50];
    v3[1] = v2;
    v3[2] = MEMORY[0x1E0CE0408];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFFA0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BD048);
  }
  return result;
}

uint64_t sub_1B8B25FDC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDFEE0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B26040()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD068;
  if (!qword_1EF1BD068)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD070);
    v2[0] = sub_1B8B260C4();
    v2[1] = sub_1B8ADE950(&qword_1EF1BD0A8, &qword_1EF1BD0B0, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD068);
  }
  return result;
}

unint64_t sub_1B8B260C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD078;
  if (!qword_1EF1BD078)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD080);
    v2[0] = sub_1B8ADE950(&qword_1EF1BD088, &qword_1EF1BD090, MEMORY[0x1E0CDF8D0]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BD098, &qword_1EF1BD0A0, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD078);
  }
  return result;
}

uint64_t sub_1B8B26164(uint64_t a1, uint64_t a2)
{
  return sub_1B8B251E0(a1, a2);
}

uint64_t sub_1B8B2616C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B8B261D0()
{
  unint64_t result;

  result = qword_1EF1BD0C0;
  if (!qword_1EF1BD0C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1BD0C0);
  }
  return result;
}

uint64_t sub_1B8B2620C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1B8B26234(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    v8 = sub_1B8B9C728();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v22 = v4;
      v23 = v7;
      v24 = v7 & 0xC000000000000001;
      v4 = 4;
      do
      {
        v9 = v4 - 4;
        if (v24)
        {
          v10 = (id)MEMORY[0x1BCCB6800](v4 - 4, v7);
          v11 = v4 - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_19;
        }
        else
        {
          v10 = *(id *)(v7 + 8 * v4);
          v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v12 = v8;
        v13 = v10;
        v14 = a3;
        v15 = objc_msgSend(v10, sel_calendarIdentifier, v22);
        v16 = sub_1B8B9C17C();
        v18 = v17;

        a3 = v14;
        v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        v20 = sub_1B8B9C8D8();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_18;

        ++v4;
        v8 = v12;
        v19 = v11 == v12;
        v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

char *keypath_get_selector_source()
{
  return sel_source;
}

id sub_1B8B263E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_source);
  *a2 = result;
  return result;
}

id sub_1B8B2641C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSource_, *a1);
}

char *keypath_get_selector_sourceIdentifier()
{
  return sel_sourceIdentifier;
}

void sub_1B8B2643C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1B8B2564C(a1, (SEL *)&selRef_sourceIdentifier, a2);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id sub_1B8B264A8@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B8B25084(a1, a2);
}

id sub_1B8B264B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B254EC(*(void **)(v1 + 16), a1);
}

char *keypath_get_selector_calendar()
{
  return sel_calendar;
}

id sub_1B8B264C4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_calendar);
  *a2 = result;
  return result;
}

id sub_1B8B264FC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCalendar_, *a1);
}

char *keypath_get_selector_calendarIdentifier()
{
  return sel_calendarIdentifier;
}

void sub_1B8B2651C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1B8B2564C(a1, (SEL *)&selRef_calendarIdentifier, a2);
}

uint64_t sub_1B8B26538()
{
  return sub_1B8B258D4();
}

id sub_1B8B26540@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B25AD0(*(void **)(v1 + 16), a1);
}

unint64_t sub_1B8B26548()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BD0F8;
  if (!qword_1EF1BD0F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD0E8);
    v2 = sub_1B8ADE950(&qword_1EF1BD100, &qword_1EF1BD108, MEMORY[0x1E0CDC910]);
    v3[0] = MEMORY[0x1E0CDF818];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BD0F8);
  }
  return result;
}

uint64_t sub_1B8B265CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B26614(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8B26654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1B8B2669C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B2594C(*(void **)(v1 + 16), a1);
}

uint64_t sub_1B8B266A4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1B8ADD7C0(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B8B266D4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1B8ADDA88(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B8B26704()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD028);
  sub_1B8ADE950(&qword_1EF1BD0B8, &qword_1EF1BD028, MEMORY[0x1E0CDFBB0]);
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MapItemView()
{
  return &type metadata for MapItemView;
}

void sub_1B8B2678C(void *a1, id a2)
{
  id v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  __n128 v11;
  __n128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  BOOL v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  double *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  double aBlock;
  uint64_t v56;
  void (*v57)(uint64_t, void *, void *);
  void *v58;
  id (*v59)(void *, void *);
  double *v60;
  uint64_t v61;

  v4 = objc_msgSend(a2, sel_geoLocation);
  if (!v4)
    return;
  v54 = v4;
  objc_msgSend(v4, sel_coordinate);
  v6 = v5;
  v8 = v7;
  objc_msgSend(a2, sel_radius);
  v10 = v9;
  if (objc_msgSend(a2, sel_isImprecise))
    v13 = 50.0;
  else
    v13 = 804.67;
  v11.n128_u64[0] = v6;
  v12.n128_u64[0] = v8;
  sub_1B8B204E8(v11, v12, v10, v13);
  v16 = v14;
  v17 = v15;
  v18 = v14 < 0.0 || v14 > 180.0;
  if (v18 || (v15 >= 0.0 ? (v19 = v15 > 360.0) : (v19 = 1), v19))
  {
    if (qword_1EF1BB4E0 != -1)
      swift_once();
    v33 = sub_1B8B9B318();
    __swift_project_value_buffer(v33, (uint64_t)qword_1EF1CF278);
    v34 = sub_1B8B9B300();
    v35 = sub_1B8B9C44C();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v61 = v37;
      *(_DWORD *)v36 = 136315394;
      v56 = *(_QWORD *)&v17;
      type metadata accessor for MKCoordinateSpan(0);
      v38 = sub_1B8B9C1B8();
      sub_1B8B17B04(v38, v39, &v61);
      sub_1B8B9C524();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2048;
      aBlock = v10;
      sub_1B8B9C524();
      _os_log_impl(&dword_1B8A6A000, v34, v35, "Fallback coordinate span [%s] created with radius [%f] is invalid, nothing to fall back to, halting further loading of map view", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v37, -1, -1);
      MEMORY[0x1BCCB7A9C](v36, -1, -1);

      return;
    }

    goto LABEL_29;
  }
  v20 = objc_msgSend(a2, sel_mapKitHandle);
  if (!v20)
  {
    if (qword_1EF1BB4E0 != -1)
      swift_once();
    v40 = sub_1B8B9B318();
    __swift_project_value_buffer(v40, (uint64_t)qword_1EF1CF278);
    v41 = sub_1B8B9B300();
    v42 = sub_1B8B9C44C();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1B8A6A000, v41, v42, "Did not find mapKitHandle, falling back to load MKMapItemView with geoLocation", v43, 2u);
      MEMORY[0x1BCCB7A9C](v43, -1, -1);
    }

    v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC1828]), sel_initWithCLLocation_, v54);
    if (v44)
    {
      v45 = v44;
      v46 = objc_msgSend(a2, sel_title);
      objc_msgSend(v45, sel_setName_, v46);

      sub_1B8B2769C(v45, a1, v16, v17);
    }
LABEL_29:

    return;
  }
  v21 = v20;
  v22 = sub_1B8B9B084();
  v24 = v23;

  if (qword_1EF1BB4E0 != -1)
    swift_once();
  v25 = sub_1B8B9B318();
  __swift_project_value_buffer(v25, (uint64_t)qword_1EF1CF278);
  sub_1B8ADC5E4(v22, v24);
  sub_1B8ADC5E4(v22, v24);
  v26 = sub_1B8B9B300();
  v27 = sub_1B8B9C440();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    aBlock = *(double *)&v29;
    *(_DWORD *)v28 = 136315138;
    sub_1B8ADC5E4(v22, v24);
    v30 = sub_1B8B9B06C();
    v32 = v31;
    sub_1B8ADC698(v22, v24);
    v61 = sub_1B8B17B04(v30, v32, (uint64_t *)&aBlock);
    sub_1B8B9C524();
    swift_bridgeObjectRelease();
    sub_1B8ADC698(v22, v24);
    sub_1B8ADC698(v22, v24);
    _os_log_impl(&dword_1B8A6A000, v26, v27, "Found mapKitHandle, loading MKMapItemView with mapKitHandle: %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCB7A9C](v29, -1, -1);
    MEMORY[0x1BCCB7A9C](v28, -1, -1);
  }
  else
  {
    sub_1B8ADC698(v22, v24);
    sub_1B8ADC698(v22, v24);
  }

  v47 = (void *)objc_opt_self();
  v48 = (void *)sub_1B8B9B078();
  v49 = (double *)swift_allocObject();
  *((_QWORD *)v49 + 2) = v54;
  *((_QWORD *)v49 + 3) = a2;
  v49[4] = v16;
  v49[5] = v17;
  *((_QWORD *)v49 + 6) = a1;
  v59 = sub_1B8B27978;
  v60 = v49;
  aBlock = MEMORY[0x1E0C809B0];
  v56 = 1107296256;
  v57 = sub_1B8B27230;
  v58 = &block_descriptor_2;
  v50 = _Block_copy(&aBlock);
  v51 = v54;
  v52 = a2;
  v53 = a1;
  swift_release();
  objc_msgSend(v47, sel__mapItemFromHandle_completionHandler_, v48, v50);

  _Block_release(v50);
  sub_1B8ADC698(v22, v24);
}

id sub_1B8B26E14(void *a1, void *a2, uint64_t a3, void *a4, void *a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  id result;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  _QWORD v47[2];
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t aBlock[6];

  v14 = sub_1B8B9C080();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1B8B9C0A4();
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v19;
  v54 = v15;
  v52 = v22;
  if (a1)
  {
    v23 = a1;
LABEL_10:
    sub_1B8B279A0();
    v39 = a1;
    v40 = (void *)sub_1B8B9C470();
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = a4;
    *(_QWORD *)(v41 + 24) = v23;
    *(double *)(v41 + 32) = a6;
    *(double *)(v41 + 40) = a7;
    *(_QWORD *)(v41 + 48) = a5;
    aBlock[4] = (uint64_t)sub_1B8B27A14;
    aBlock[5] = v41;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1B8B23A90;
    aBlock[3] = (uint64_t)&block_descriptor_6_0;
    v42 = a5;
    v43 = _Block_copy(aBlock);
    v44 = a4;
    v45 = v23;
    v46 = v42;
    swift_release();
    sub_1B8B9C098();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    sub_1B8B23C1C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCFC0);
    sub_1B8B23C64();
    sub_1B8B9C5B4();
    MEMORY[0x1BCCB6608](0, v21, v17, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v14);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v21, v53);
  }
  v50 = a3;
  v51 = a5;
  if (qword_1EF1BB4E0 != -1)
    swift_once();
  v24 = sub_1B8B9B318();
  __swift_project_value_buffer(v24, (uint64_t)qword_1EF1CF278);
  v25 = a2;
  v26 = a2;
  v27 = sub_1B8B9B300();
  v28 = sub_1B8B9C44C();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v49 = swift_slowAlloc();
    v55 = (uint64_t)a2;
    aBlock[0] = v49;
    v48 = v29;
    *(_DWORD *)v29 = 136315138;
    v47[1] = v29 + 4;
    v30 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD128);
    v31 = sub_1B8B9C1B8();
    v55 = sub_1B8B17B04(v31, v32, aBlock);
    sub_1B8B9C524();
    swift_bridgeObjectRelease();

    v33 = v28;
    v34 = v48;
    _os_log_impl(&dword_1B8A6A000, v27, v33, "Received error while recreating mapItem from mapKitHandle: %s. Falling back to load MKMapItemView with geoLocation.", v48, 0xCu);
    v35 = v49;
    swift_arrayDestroy();
    MEMORY[0x1BCCB7A9C](v35, -1, -1);
    MEMORY[0x1BCCB7A9C](v34, -1, -1);
  }
  else
  {

  }
  v36 = objc_allocWithZone(MEMORY[0x1E0CC1828]);
  result = objc_msgSend(v36, sel_initWithCLLocation_, v50);
  a5 = v51;
  if (result)
  {
    v23 = result;
    v38 = objc_msgSend(a4, sel_title);
    objc_msgSend(v23, sel_setName_, v38);

    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_1B8B27230(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void sub_1B8B272A4(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  NSObject *oslog;
  uint64_t v12;

  if (a1)
  {
    v3 = a1;
    if (qword_1EF1BB4E0 != -1)
      swift_once();
    v4 = sub_1B8B9B318();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EF1CF278);
    v5 = a1;
    v6 = a1;
    oslog = sub_1B8B9B300();
    v7 = sub_1B8B9C44C();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = a1;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      sub_1B8B9C524();
      *v9 = v12;

      _os_log_impl(&dword_1B8A6A000, oslog, v7, "Received error while loading MKMapItemView: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD130);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v9, -1, -1);
      MEMORY[0x1BCCB7A9C](v8, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    objc_msgSend(a2, sel_triggerAnimation);
  }
}

void sub_1B8B274A8(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

id sub_1B8B274FC()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC1840]), sel_init);
  sub_1B8B2678C(v2, v1);
  return v2;
}

uint64_t sub_1B8B27550()
{
  return sub_1B8B9B7F8();
}

uint64_t sub_1B8B27590()
{
  sub_1B8B27A50();
  return sub_1B8B9B858();
}

uint64_t sub_1B8B275E0()
{
  sub_1B8B27A50();
  return sub_1B8B9B804();
}

void sub_1B8B27630()
{
  sub_1B8B27A50();
  sub_1B8B9B84C();
  __break(1u);
}

unint64_t sub_1B8B27658()
{
  unint64_t result;

  result = qword_1EF1BD120;
  if (!qword_1EF1BD120)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9B58, &type metadata for MapItemView);
    atomic_store(result, (unint64_t *)&qword_1EF1BD120);
  }
  return result;
}

void sub_1B8B2769C(void *a1, void *a2, double a3, double a4)
{
  double v8;
  double v9;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t aBlock;
  uint64_t v26;
  void (*v27)(uint64_t, void *);
  void *v28;
  void (*v29)(void *);
  uint64_t v30;
  uint64_t v31;

  objc_msgSend(a1, sel__coordinate);
  if (v9 < -180.0 || v9 > 180.0 || v8 < -90.0 || v8 > 90.0)
  {
    if (qword_1EF1BB4E0 != -1)
      swift_once();
    v13 = sub_1B8B9B318();
    __swift_project_value_buffer(v13, (uint64_t)qword_1EF1CF278);
    v24 = a1;
    v14 = sub_1B8B9B300();
    v15 = sub_1B8B9C44C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v31 = v17;
      *(_DWORD *)v16 = 136315138;
      objc_msgSend(v24, sel__coordinate);
      v26 = v18;
      type metadata accessor for CLLocationCoordinate2D(0);
      v19 = sub_1B8B9C1B8();
      aBlock = sub_1B8B17B04(v19, v20, &v31);
      sub_1B8B9C524();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B8A6A000, v14, v15, "Map item coordinate %s is invalid, halting further loading of map view", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCB7A9C](v17, -1, -1);
      MEMORY[0x1BCCB7A9C](v16, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a2;
    v29 = sub_1B8B27A48;
    v30 = v21;
    aBlock = MEMORY[0x1E0C809B0];
    v26 = 1107296256;
    v27 = sub_1B8B274A8;
    v28 = &block_descriptor_12;
    v22 = _Block_copy(&aBlock);
    v23 = a2;
    swift_release();
    objc_msgSend(v23, sel_loadMapItem_coordinateSpan_completionHandler_, a1, v22, a3, a4);
    _Block_release(v22);
  }
}

id sub_1B8B27978(void *a1, void *a2)
{
  uint64_t v2;

  return sub_1B8B26E14(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 48), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t sub_1B8B279A0()
{
  unint64_t result;

  result = qword_1EF1BCFB0;
  if (!qword_1EF1BCFB0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1BCFB0);
  }
  return result;
}

uint64_t objectdestroyTm_4()
{
  id *v0;

  return swift_deallocObject();
}

void sub_1B8B27A14()
{
  uint64_t v0;

  sub_1B8B2769C(*(void **)(v0 + 24), *(void **)(v0 + 48), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1B8B27A24()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1B8B27A48(void *a1)
{
  uint64_t v1;

  sub_1B8B272A4(a1, *(id *)(v1 + 16));
}

unint64_t sub_1B8B27A50()
{
  unint64_t result;

  result = qword_1EF1BD138;
  if (!qword_1EF1BD138)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9BA8, &type metadata for MapItemView);
    atomic_store(result, (unint64_t *)&qword_1EF1BD138);
  }
  return result;
}

void sub_1B8B27AA4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B8B27AE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B8B27B70 + 4 * byte_1B8BA9C47[a2]))(0x65676E61726FLL);
}

uint64_t sub_1B8B27B70(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65676E61726FLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B8B9C8D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t CUIKCalendarColor.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::String v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t result;
  double v28;
  double v29;
  char v30;
  unsigned __int8 v31;

  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  CUIKCalendarColor.Symbolic.init(rawValue:)(v6);
  *(_QWORD *)&v7 = v31;
  if (v31 == 7)
  {
    v8 = sub_1B8B9C278();
    v9 = v8 & 1;
    v10 = sub_1B8B9C1F4();
    v11 = 6;
    if ((v8 & 1) != 0)
      v11 = 7;
    if (v10 == v11)
      goto LABEL_8;
    v12 = sub_1B8B9C1F4();
    v13 = 8;
    if ((v8 & 1) != 0)
      v13 = 9;
    if (v12 == v13)
    {
LABEL_8:
      v14 = sub_1B8B28568(v9, 2);
      v16 = v15;
      v17 = (double)v14;
      if ((_DWORD)v9)
        v18 = 3;
      else
        v18 = 2;
      if ((_DWORD)v9)
        v19 = 5;
      else
        v19 = 4;
      v20 = sub_1B8B28568(v18, 2);
      v22 = v21;
      v23 = (double)v20;
      v24 = sub_1B8B28568(v19, 2);
      v26 = v25;
      result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        v7 = 0.0;
      else
        v7 = v17 / 255.0;
      if ((v22 & 1) != 0)
        v28 = 0.0;
      else
        v28 = v23 / 255.0;
      if ((v26 & 1) != 0)
        v29 = 0.0;
      else
        v29 = (double)v24 / 255.0;
      v30 = 1;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v28 = 0.0;
      v29 = 0.0;
      v30 = 0;
      *(_QWORD *)&v7 = 6;
    }
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0;
  }
  *(double *)a3 = v7;
  *(double *)(a3 + 8) = v28;
  *(double *)(a3 + 16) = v29;
  *(_BYTE *)(a3 + 24) = v30;
  return result;
}

uint64_t CUIKCalendarColor.displayColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v9;

  v1 = sub_1B8B9BD50();
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    __asm { BR              X10 }
  v6 = *(double *)(v0 + 8);
  v5 = *(double *)(v0 + 16);
  v7 = *(double *)v0;
  (*(void (**)(char *, _QWORD))(v2 + 104))(v4, *MEMORY[0x1E0CDF3E8]);
  return MEMORY[0x1BCCB5F6C](v4, v7, v6, v5, 1.0);
}

void sub_1B8B27ED4()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  v1 = CUIKSymbolicColorWithName(v0);

  JUMPOUT(0x1BCCB5F78);
}

CalendarUIKit::CUIKCalendarColor::Symbolic_optional __swiftcall CUIKCalendarColor.Symbolic.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CalendarUIKit::CUIKCalendarColor::Symbolic_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1B8B9C77C();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t CUIKCalendarColor.Symbolic.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B28024 + 4 * byte_1B8BA9C4E[*v0]))(6579570, 0xE300000000000000);
}

uint64_t sub_1B8B28024()
{
  return 0x65676E61726FLL;
}

uint64_t sub_1B8B28038()
{
  return 0x776F6C6C6579;
}

uint64_t sub_1B8B2804C()
{
  return 0x6E65657267;
}

uint64_t sub_1B8B28060()
{
  return 1702194274;
}

uint64_t sub_1B8B28070()
{
  return 0x656C70727570;
}

uint64_t sub_1B8B28084()
{
  return 0x6E776F7262;
}

void sub_1B8B28098(char *a1)
{
  sub_1B8B27AA4(*a1);
}

void sub_1B8B280A4()
{
  char *v0;

  sub_1B8B28170(0, *v0);
}

void sub_1B8B280B0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B8B280E4()
{
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

void sub_1B8B28168(uint64_t a1)
{
  char *v1;

  sub_1B8B28170(a1, *v1);
}

void sub_1B8B28170(uint64_t a1, char a2)
{
  sub_1B8B9C968();
  __asm { BR              X10 }
}

uint64_t sub_1B8B281B4()
{
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  return sub_1B8B9C998();
}

CalendarUIKit::CUIKCalendarColor::Symbolic_optional sub_1B8B2824C(Swift::String *a1)
{
  return CUIKCalendarColor.Symbolic.init(rawValue:)(*a1);
}

uint64_t sub_1B8B28258()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B8B28280 + 4 * byte_1B8BA9C63[*v0]))();
}

void sub_1B8B28280(_QWORD *a1@<X8>)
{
  *a1 = 0x65676E61726FLL;
  a1[1] = 0xE600000000000000;
}

void sub_1B8B28298(_QWORD *a1@<X8>)
{
  *a1 = 0x776F6C6C6579;
  a1[1] = 0xE600000000000000;
}

void sub_1B8B282B0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65657267;
  a1[1] = 0xE500000000000000;
}

uint64_t CUIKCalendarColor.description.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    __asm { BR              X10 }
  v2 = *(double *)(v0 + 8);
  v1 = *(double *)(v0 + 16);
  v3 = *(double *)v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA08);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B8BA7860;
  v5 = round(v3 * 255.0);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = MEMORY[0x1E0DEB418];
  v7 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 32) = (uint64_t)v5;
  v8 = round(v2 * 255.0);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_QWORD *)(v4 + 96) = v6;
  *(_QWORD *)(v4 + 104) = v7;
  *(_QWORD *)(v4 + 72) = (uint64_t)v8;
  v9 = round(v1 * 255.0);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    JUMPOUT(0x1B8B2854CLL);
  }
  *(_QWORD *)(v4 + 136) = v6;
  *(_QWORD *)(v4 + 144) = v7;
  *(_QWORD *)(v4 + 112) = (uint64_t)v9;
  return sub_1B8B9C188();
}

uint64_t sub_1B8B28568(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 v26;
  char v27;
  _QWORD v28[3];

  if (a1 < 0)
    return 0;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (sub_1B8B9C1F4() < a1 + a2)
    return 0;
  v3 = sub_1B8B9C20C();
  if ((unint64_t)sub_1B8B9C20C() >> 14 < v3 >> 14)
    goto LABEL_57;
  v4 = sub_1B8B9C290();
  v5 = MEMORY[0x1BCCB635C](v4);
  v7 = v6;
  result = swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  v9 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v7) & 0xF;
  else
    v10 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_58;
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((v7 & 0x2000000000000000) == 0)
    {
      if ((v5 & 0x1000000000000000) != 0)
        v11 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v11 = (unsigned __int8 *)sub_1B8B9C6B0();
      v12 = (uint64_t)sub_1B8B28B78(v11, v9, 16);
      v14 = v13 & 1;
      goto LABEL_53;
    }
    v28[0] = v5;
    v28[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (v8)
      {
        v20 = v8 - 1;
        if (v20)
        {
          v12 = 0;
          v21 = (unsigned __int8 *)v28 + 1;
          while (1)
          {
            v22 = *v21;
            v23 = v22 - 48;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 65) < 6)
              {
                v23 = v22 - 55;
              }
              else
              {
                if ((v22 - 97) > 5)
                  goto LABEL_52;
                v23 = v22 - 87;
              }
            }
            if ((unint64_t)(v12 - 0x800000000000000) >> 60 != 15)
              break;
            v19 = __OFADD__(16 * v12, v23);
            v12 = 16 * v12 + v23;
            if (v19)
              break;
            ++v21;
            if (!--v20)
            {
LABEL_51:
              v14 = 0;
              goto LABEL_53;
            }
          }
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (v5 != 45)
      {
        if (v8)
        {
          v12 = 0;
          v24 = (unsigned __int8 *)v28;
          while (1)
          {
            v25 = *v24;
            v26 = v25 - 48;
            if ((v25 - 48) >= 0xA)
            {
              if ((v25 - 65) < 6)
              {
                v26 = v25 - 55;
              }
              else
              {
                if ((v25 - 97) > 5)
                  goto LABEL_52;
                v26 = v25 - 87;
              }
            }
            if ((unint64_t)(v12 - 0x800000000000000) >> 60 != 15)
              break;
            v19 = __OFADD__(16 * v12, v26);
            v12 = 16 * v12 + v26;
            if (v19)
              break;
            ++v24;
            if (!--v8)
              goto LABEL_51;
          }
        }
        goto LABEL_52;
      }
      if (v8)
      {
        v15 = v8 - 1;
        if (v15)
        {
          v12 = 0;
          v16 = (unsigned __int8 *)v28 + 1;
          while (1)
          {
            v17 = *v16;
            v18 = v17 - 48;
            if ((v17 - 48) >= 0xA)
            {
              if ((v17 - 65) < 6)
              {
                v18 = v17 - 55;
              }
              else
              {
                if ((v17 - 97) > 5)
                  break;
                v18 = v17 - 87;
              }
            }
            if ((unint64_t)(v12 - 0x800000000000000) >> 60 != 15)
              break;
            v19 = __OFSUB__(16 * v12, v18);
            v12 = 16 * v12 - v18;
            if (v19)
              break;
            ++v16;
            if (!--v15)
              goto LABEL_51;
          }
        }
LABEL_52:
        v12 = 0;
        v14 = 1;
        goto LABEL_53;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v12 = (uint64_t)sub_1B8B28A94(v5, v7, 16);
  v14 = v27;
LABEL_53:
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    return 0;
  else
    return v12;
}

uint64_t CUIKCalendarColor.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if ((v0[3] & 1) == 0)
  {
    sub_1B8B9C974();
    __asm { BR              X10 }
  }
  sub_1B8B9C974();
  sub_1B8B9C98C();
  sub_1B8B9C98C();
  return sub_1B8B9C98C();
}

uint64_t sub_1B8B288F4()
{
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t CUIKCalendarColor.hashValue.getter()
{
  sub_1B8B9C968();
  CUIKCalendarColor.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B289DC()
{
  sub_1B8B9C968();
  CUIKCalendarColor.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B28A38()
{
  sub_1B8B9C968();
  CUIKCalendarColor.hash(into:)();
  return sub_1B8B9C998();
}

unsigned __int8 *sub_1B8B28A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1B8B9C284();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1B8B28DF4();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1B8B9C6B0();
  }
LABEL_7:
  v11 = sub_1B8B28B78(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1B8B28B78(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1B8B28DF4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1B8B9C290();
  v4 = sub_1B8B28E70(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B8B28E70(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1B8B28FB4(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1B8B17FD0(v9, 0);
      v12 = sub_1B8B290A0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1BCCB6368](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1BCCB6368);
LABEL_9:
      sub_1B8B9C6B0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1BCCB6368]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1B8B28FB4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1B8B18034(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1B8B18034(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1B8B9C254();
  }
  __break(1u);
  return result;
}

unint64_t sub_1B8B290A0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1B8B18034(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1B8B9C260();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1B8B9C6B0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1B8B18034(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1B8B9C23C();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void _s13CalendarUIKit17CUIKCalendarColorO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((a1[3] & 1) == 0 && (*(_BYTE *)(a2 + 24) & 1) == 0)
    sub_1B8B27AA4(v3);
}

unint64_t sub_1B8B29310()
{
  unint64_t result;

  result = qword_1EF1BD140;
  if (!qword_1EF1BD140)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for CUIKCalendarColor.Symbolic, &type metadata for CUIKCalendarColor.Symbolic);
    atomic_store(result, (unint64_t *)&qword_1EF1BD140);
  }
  return result;
}

unint64_t sub_1B8B29358()
{
  unint64_t result;

  result = qword_1EF1BD148;
  if (!qword_1EF1BD148)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for CUIKCalendarColor, &type metadata for CUIKCalendarColor);
    atomic_store(result, (unint64_t *)&qword_1EF1BD148);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CUIKCalendarColor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIKCalendarColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B8B2942C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1B8B29434(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CUIKCalendarColor()
{
  return &type metadata for CUIKCalendarColor;
}

uint64_t storeEnumTagSinglePayload for CUIKCalendarColor.Symbolic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B8B2949C + 4 * byte_1B8BA9C76[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B8B294D0 + 4 * byte_1B8BA9C71[v4]))();
}

uint64_t sub_1B8B294D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B294D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B294E0);
  return result;
}

uint64_t sub_1B8B294EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B294F4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B8B294F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B29500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CUIKCalendarColor.Symbolic()
{
  return &type metadata for CUIKCalendarColor.Symbolic;
}

uint64_t CodableViaTransform.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[4];
  _QWORD *v30;

  v24 = a4;
  v23 = sub_1B8B9C50C();
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v9 = (char *)&v20 - v8;
  v25 = a3;
  v26 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v20 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = v30;
  sub_1B8B9C9A4();
  if (!v14)
  {
    v21 = v7;
    v22 = v11;
    v30 = a1;
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    v15 = v25;
    swift_getAssociatedConformanceWitness();
    sub_1B8B9C8E4();
    (*(void (**)(char *))(v15 + 48))(v13);
    v16 = v22;
    v17 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 48))(v9, 1) != 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, AssociatedTypeWitness);
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24, v9, v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      v18 = (uint64_t)v30;
      return __swift_destroy_boxed_opaque_existential_1(v18);
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v23);
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_1B8B9C638();
    sub_1B8B9C218();
    sub_1B8B9C8CC();
    sub_1B8B9C218();
    sub_1B8B9C6A4();
    swift_allocError();
    sub_1B8B9C68C();
    swift_bridgeObjectRelease();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, AssociatedTypeWitness);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    a1 = v30;
  }
  v18 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

uint64_t CodableViaTransform.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v14[-v10 - 8];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v3, a2, a3);
  if (!v4)
  {
    v16 = v9;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1B8B9C9BC();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
    swift_getAssociatedConformanceWitness();
    sub_1B8B9C8F0();
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v11, AssociatedTypeWitness);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return result;
}

uint64_t dispatch thunk of static CodableViaTransform.transformDecodedValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static CodableViaTransform.transformValueForEncoding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t EventLocationPredictedLOIModelObject.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EventLocationPredictedLOIModelObject.type.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.type.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationPredictedLOIModelObject.customLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationPredictedLOIModelObject.customLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.customLabel.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationPredictedLOIModelObject.mapItemName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationPredictedLOIModelObject.mapItemName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.mapItemName.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationPredictedLOIModelObject.addressCountryCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationPredictedLOIModelObject.addressCountryCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.addressCountryCode.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationPredictedLOIModelObject.addressThoroughfare.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationPredictedLOIModelObject.addressThoroughfare.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.addressThoroughfare.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationPredictedLOIModelObject.addressLocality.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationPredictedLOIModelObject.addressLocality.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*EventLocationPredictedLOIModelObject.addressLocality.modify())()
{
  return nullsub_1;
}

__n128 EventLocationPredictedLOIModelObject.init(type:customLabel:mapItemName:addressCountryCode:addressThoroughfare:addressLocality:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11)
{
  __n128 result;

  result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  return result;
}

uint64_t EventLocationPredictedLOIModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  v35 = v9;
  v36 = v8;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
  swift_bridgeObjectRetain();
  v34 = v12(v10, v11);
  v14 = v13;
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 32);
  swift_bridgeObjectRetain();
  v33 = v17(v15, v16);
  v19 = v18;
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 40);
  swift_bridgeObjectRetain();
  v23 = v22(v20, v21);
  v25 = v24;
  v26 = a1[3];
  v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  v29 = v28(v26, v27);
  v31 = v30;
  swift_bridgeObjectRetain();
  *a2 = v37;
  a2[1] = v36;
  a2[2] = v35;
  a2[3] = v34;
  a2[4] = v14;
  a2[5] = v33;
  a2[6] = v19;
  a2[7] = v23;
  a2[8] = v25;
  a2[9] = v29;
  a2[10] = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventLocationPredictedLOIModelObject.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = v0[4];
  v3 = v0[6];
  v4 = v0[8];
  v5 = v0[10];
  sub_1B8B9C974();
  if (v1)
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    sub_1B8B9C980();
    if (v2)
    {
LABEL_3:
      sub_1B8B9C980();
      swift_bridgeObjectRetain();
      sub_1B8B9C1E8();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  sub_1B8B9C980();
  if (v3)
  {
LABEL_4:
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_5;
LABEL_10:
    sub_1B8B9C980();
    if (v5)
      goto LABEL_6;
    return sub_1B8B9C980();
  }
LABEL_9:
  sub_1B8B9C980();
  if (!v4)
    goto LABEL_10;
LABEL_5:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_6:
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    return swift_bridgeObjectRelease();
  }
  return sub_1B8B9C980();
}

uint64_t sub_1B8B29F34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B29F60
                                                            + 4 * asc_1B8BA9E10[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B8B29F60()
{
  return 0x614C6D6F74737563;
}

uint64_t sub_1B8B29F80()
{
  return 0x4E6D65744970616DLL;
}

unint64_t sub_1B8B29FA0()
{
  return 0xD000000000000012;
}

unint64_t sub_1B8B29FBC()
{
  return 0xD000000000000013;
}

uint64_t sub_1B8B29FDC()
{
  return 0x4C73736572646461;
}

uint64_t sub_1B8B2A000()
{
  unsigned __int8 *v0;

  return sub_1B8B29F34(*v0);
}

uint64_t sub_1B8B2A008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B2B148(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8B2A02C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1B8B2A038()
{
  sub_1B8B2AB7C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B2A060()
{
  sub_1B8B2AB7C();
  return sub_1B8B9C9EC();
}

uint64_t EventLocationPredictedLOIModelObject.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[11];
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD150);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v15[9] = v1[2];
  v15[10] = v8;
  v10 = v1[3];
  v15[7] = v1[4];
  v15[8] = v10;
  v11 = v1[5];
  v12 = v1[6];
  v13 = v1[7];
  v15[3] = v1[8];
  v15[4] = v11;
  v15[5] = v1[9];
  v15[6] = v12;
  v15[1] = v1[10];
  v15[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B2AB7C();
  sub_1B8B9C9C8();
  v22 = v9;
  v21 = 0;
  type metadata accessor for RTLocationOfInterestType(0);
  sub_1B8B2B400(&qword_1EF1BD160, (uint64_t)&protocol conformance descriptor for RTLocationOfInterestType);
  sub_1B8B9C8A8();
  if (!v2)
  {
    v20 = 1;
    sub_1B8B9C848();
    v19 = 2;
    sub_1B8B9C848();
    v18 = 3;
    sub_1B8B9C848();
    v17 = 4;
    sub_1B8B9C848();
    v16 = 5;
    sub_1B8B9C848();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t EventLocationPredictedLOIModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventLocationPredictedLOIModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t EventLocationPredictedLOIModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD168);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B2AB7C();
  sub_1B8B9C9B0();
  if (!v2)
  {
    type metadata accessor for RTLocationOfInterestType(0);
    v46 = 0;
    sub_1B8B2B400(&qword_1EF1BD170, (uint64_t)&protocol conformance descriptor for RTLocationOfInterestType);
    sub_1B8B9C818();
    v9 = v47;
    v45 = 1;
    v10 = sub_1B8B9C7A0();
    v13 = v12;
    v39 = v10;
    v44 = 2;
    swift_bridgeObjectRetain();
    v40 = v13;
    v14 = sub_1B8B9C7A0();
    v16 = v15;
    v37 = v14;
    v38 = v9;
    v43 = 3;
    swift_bridgeObjectRetain();
    v17 = sub_1B8B9C7A0();
    v19 = v18;
    v35 = v17;
    v36 = a2;
    v42 = 4;
    swift_bridgeObjectRetain();
    v20 = sub_1B8B9C7A0();
    v22 = v21;
    v34 = v20;
    v41 = 5;
    swift_bridgeObjectRetain();
    v23 = sub_1B8B9C7A0();
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27 = v23;
    v26(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = v36;
    v29 = v39;
    v30 = v40;
    *v36 = v38;
    v28[1] = v29;
    v31 = v37;
    v28[2] = v30;
    v28[3] = v31;
    v32 = v35;
    v28[4] = v16;
    v28[5] = v32;
    v33 = v34;
    v28[6] = v19;
    v28[7] = v33;
    v28[8] = v22;
    v28[9] = v27;
    v28[10] = v25;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B2A6E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B2A710()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B2A73C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B2A768()
{
  sub_1B8B9C968();
  EventLocationPredictedLOIModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B2A7CC()
{
  sub_1B8B9C968();
  EventLocationPredictedLOIModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B2A828@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return EventLocationPredictedLOIModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8B2A83C(_QWORD *a1)
{
  return EventLocationPredictedLOIModelObject.encode(to:)(a1);
}

uint64_t sub_1B8B2A854()
{
  sub_1B8B2B400(&qword_1EF1BD198, (uint64_t)&unk_1B8BA566C);
  return sub_1B8B9C2C0();
}

uint64_t sub_1B8B2A8C0()
{
  sub_1B8B2B400(&qword_1EF1BD198, (uint64_t)&unk_1B8BA566C);
  return sub_1B8B9C2A8();
}

uint64_t _s13CalendarUIKit36EventLocationPredictedLOIModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (*a1 != *a2)
    return 0;
  v3 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  v9 = a1[9];
  v11 = a1[10];
  v12 = a2[2];
  v13 = a2[3];
  v15 = a2[4];
  v14 = a2[5];
  v17 = a2[6];
  v16 = a2[7];
  v18 = a2[8];
  v19 = a2[9];
  v20 = a2[10];
  if (!v3)
  {
    if (v12)
      return 0;
    goto LABEL_9;
  }
  if (!v12)
    return 0;
  if (a1[1] == a2[1] && v3 == v12)
    goto LABEL_9;
  v49 = a1[8];
  v51 = a2[8];
  v47 = a2[9];
  v48 = a1[7];
  v45 = a1[10];
  v46 = a2[10];
  v21 = a1[9];
  v22 = a2[7];
  v23 = a1[5];
  v24 = a1[6];
  v25 = a2[6];
  v26 = a2[5];
  v27 = a2[3];
  v28 = sub_1B8B9C8D8();
  v13 = v27;
  v14 = v26;
  v17 = v25;
  v7 = v24;
  v5 = v23;
  v16 = v22;
  v9 = v21;
  v11 = v45;
  v20 = v46;
  v19 = v47;
  v8 = v48;
  v10 = v49;
  v18 = v51;
  v29 = v28;
  result = 0;
  if ((v29 & 1) != 0)
  {
LABEL_9:
    if (v6)
    {
      if (!v15)
        return 0;
      if (v4 != v13 || v6 != v15)
      {
        v50 = v9;
        v52 = v17;
        v31 = v16;
        v32 = v5;
        v33 = v7;
        v34 = v14;
        v35 = sub_1B8B9C8D8();
        v14 = v34;
        v9 = v50;
        v17 = v52;
        v7 = v33;
        v5 = v32;
        v16 = v31;
        v36 = v35;
        result = 0;
        if ((v36 & 1) == 0)
          return result;
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v7)
    {
      if (!v17)
        return 0;
      if (v5 != v14 || v7 != v17)
      {
        v37 = v18;
        v38 = v9;
        v39 = v16;
        v40 = sub_1B8B9C8D8();
        v16 = v39;
        v9 = v38;
        v18 = v37;
        v41 = v40;
        result = 0;
        if ((v41 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v10)
    {
      if (!v18)
        return 0;
      if (v8 != v16 || v10 != v18)
      {
        v42 = v9;
        v43 = sub_1B8B9C8D8();
        v9 = v42;
        v44 = v43;
        result = 0;
        if ((v44 & 1) == 0)
          return result;
      }
    }
    else if (v18)
    {
      return 0;
    }
    if (v11)
    {
      if (v20 && (v9 == v19 && v11 == v20 || (sub_1B8B9C8D8() & 1) != 0))
        return 1;
    }
    else if (!v20)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1B8B2AB7C()
{
  unint64_t result;

  result = qword_1EF1BD158;
  if (!qword_1EF1BD158)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA048, &type metadata for EventLocationPredictedLOIModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD158);
  }
  return result;
}

unint64_t sub_1B8B2ABC4()
{
  unint64_t result;

  result = qword_1EF1BD178;
  if (!qword_1EF1BD178)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventLocationPredictedLOIModelObject, &type metadata for EventLocationPredictedLOIModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BD178);
  }
  return result;
}

uint64_t destroy for EventLocationPredictedLOIModelObject()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventLocationPredictedLOIModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EventLocationPredictedLOIModelObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for EventLocationPredictedLOIModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventLocationPredictedLOIModelObject(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventLocationPredictedLOIModelObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventLocationPredictedLOIModelObject()
{
  return &type metadata for EventLocationPredictedLOIModelObject;
}

uint64_t getEnumTagSinglePayload for EventLocationPredictedLOIModelObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventLocationPredictedLOIModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B8B2AFF0 + 4 * byte_1B8BA9E1B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B8B2B024 + 4 * byte_1B8BA9E16[v4]))();
}

uint64_t sub_1B8B2B024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B2B02C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B2B034);
  return result;
}

uint64_t sub_1B8B2B040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B2B048);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B8B2B04C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B2B054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventLocationPredictedLOIModelObject.CodingKeys()
{
  return &type metadata for EventLocationPredictedLOIModelObject.CodingKeys;
}

unint64_t sub_1B8B2B074()
{
  unint64_t result;

  result = qword_1EF1BD180;
  if (!qword_1EF1BD180)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA020, &type metadata for EventLocationPredictedLOIModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD180);
  }
  return result;
}

unint64_t sub_1B8B2B0BC()
{
  unint64_t result;

  result = qword_1EF1BD188;
  if (!qword_1EF1BD188)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9F90, &type metadata for EventLocationPredictedLOIModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD188);
  }
  return result;
}

unint64_t sub_1B8B2B104()
{
  unint64_t result;

  result = qword_1EF1BD190;
  if (!qword_1EF1BD190)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BA9FB8, &type metadata for EventLocationPredictedLOIModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD190);
  }
  return result;
}

uint64_t sub_1B8B2B148(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614C6D6F74737563 && a2 == 0xEB000000006C6562 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4E6D65744970616DLL && a2 == 0xEB00000000656D61 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B8BB8530 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B8BB8550 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4C73736572646461 && a2 == 0xEF7974696C61636FLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B8B2B400(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for RTLocationOfInterestType(255);
    result = MEMORY[0x1BCCB79D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8B2B440(uint64_t a1)
{
  return sub_1B8B2B468(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_1EF1CF268);
}

uint64_t sub_1B8B2B454(uint64_t a1)
{
  return sub_1B8B2B468(a1, (SEL *)&selRef_quaternaryLabelColor, &qword_1EF1CF270);
}

uint64_t sub_1B8B2B468(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(), *a2);
  result = MEMORY[0x1BCCB5F78](v4);
  *a3 = result;
  return result;
}

uint64_t dispatch thunk of EventIntegrationModel.isCompleted.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventIntegrationModel.color.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventIntegrationModel.reminderListTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for TitleView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_1B8AE20FC(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for TitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B8AE20B0(v5, v6);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for TitleView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_1B8AE20B0(v4, (char)v2);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  sub_1B8AE20FC(v5, v6);
  return a1;
}

uint64_t assignWithTake for TitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v5;
  sub_1B8AE20FC(v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for TitleView()
{
  return &type metadata for TitleView;
}

uint64_t sub_1B8B2B68C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B2B69C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1A0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1A8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1B0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1B8);
  MEMORY[0x1E0C80A78](v23);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B2B904(v1, (uint64_t)v4);
  v14 = sub_1B8B9BA20();
  KeyPath = swift_getKeyPath();
  sub_1B8ADE850((uint64_t)v4, (uint64_t)v7, &qword_1EF1BD1A0);
  v16 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  *v16 = KeyPath;
  v16[1] = v14;
  sub_1B8ADE894((uint64_t)v4, &qword_1EF1BD1A0);
  sub_1B8B2BBC4();
  sub_1B8B9BCC0();
  sub_1B8ADE894((uint64_t)v7, &qword_1EF1BD1A8);
  v17 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v8);
  v18 = &v13[*(int *)(v23 + 36)];
  *(_QWORD *)v18 = v17;
  *((_QWORD *)v18 + 1) = 2;
  v18[16] = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v25 = sub_1B8B9BD98();
  swift_retain();
  v19 = sub_1B8B9BF30();
  v20 = v24;
  sub_1B8ADE850((uint64_t)v13, v24, &qword_1EF1BD1B8);
  swift_release();
  *(_QWORD *)(v20 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1E0) + 36)) = v19;
  return sub_1B8ADE894((uint64_t)v13, &qword_1EF1BD1B8);
}

uint64_t sub_1B8B2B904@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v20;
  _QWORD v21[2];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1E8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBE8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 4);
  v12 = *((_BYTE *)a1 + 40);
  sub_1B8AE20B0(v11, v12);
  v13 = sub_1B8B17940(v11, v12);
  sub_1B8AE20FC(v11, v12);
  if ((v13 & 1) != 0)
  {
    sub_1B8B9B780();
    v21[1] = a2;
    v20 = a1[1];
    v22[0] = *a1;
    v22[1] = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1F0);
    sub_1B8B9BF60();
    sub_1B8B9C05C();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    swift_storeEnumTagMultiPayload();
    sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
    sub_1B8B9B870();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v14 = a1[1];
    v23 = *a1;
    v24 = v14;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1F0);
    MEMORY[0x1BCCB60C8](v22, v15);
    v23 = v22[0];
    sub_1B8ADDBE4();
    *(_QWORD *)v6 = sub_1B8B9BBAC();
    *((_QWORD *)v6 + 1) = v16;
    v6[16] = v17 & 1;
    *((_QWORD *)v6 + 3) = v18;
    swift_storeEnumTagMultiPayload();
    sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
    return sub_1B8B9B870();
  }
}

uint64_t sub_1B8B2BB84@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B2B69C(a1);
}

unint64_t sub_1B8B2BBC4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD1C0;
  if (!qword_1EF1BD1C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1A8);
    v2[0] = sub_1B8B2BC48();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9350, &qword_1EF1B9358, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD1C0);
  }
  return result;
}

unint64_t sub_1B8B2BC48()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BD1C8;
  if (!qword_1EF1BD1C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1A0);
    v2 = sub_1B8B2BCAC();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDF698], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD1C8);
  }
  return result;
}

unint64_t sub_1B8B2BCAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD1D0;
  if (!qword_1EF1BD1D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1D8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
    v2[1] = MEMORY[0x1E0CDDD50];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD1D0);
  }
  return result;
}

unint64_t sub_1B8B2BD3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD1F8;
  if (!qword_1EF1BD1F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1E0);
    v2[0] = sub_1B8B2BDC0();
    v2[1] = sub_1B8ADE950(&qword_1EF1BC368, &qword_1EF1BC370, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD1F8);
  }
  return result;
}

unint64_t sub_1B8B2BDC0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1EF1BD200;
  if (!qword_1EF1BD200)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1B8);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD1A8);
    v2[3] = sub_1B8B2BBC4();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD200);
  }
  return result;
}

uint64_t EventLocationModelObject.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationModelObject.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventLocationModelObject.title.modify())()
{
  return nullsub_1;
}

void *EventLocationModelObject.geoLocation.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void EventLocationModelObject.geoLocation.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*EventLocationModelObject.geoLocation.modify())()
{
  return nullsub_1;
}

double EventLocationModelObject.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void EventLocationModelObject.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*EventLocationModelObject.radius.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationModelObject.address.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationModelObject.address.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*EventLocationModelObject.address.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationModelObject.contactLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventLocationModelObject.contactLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*EventLocationModelObject.contactLabel.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationModelObject.mapKitHandle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1B8AF1CDC(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t EventLocationModelObject.mapKitHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B8ADDBD0(*(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*EventLocationModelObject.mapKitHandle.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationModelObject.isImprecise.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t EventLocationModelObject.isImprecise.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*EventLocationModelObject.isImprecise.modify())()
{
  return nullsub_1;
}

uint64_t EventLocationModelObject.predictedLOI.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1[11];
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  v9 = v1[18];
  v10 = v1[19];
  v11 = v1[20];
  v12 = v1[21];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  return sub_1B8B2C120(v2, v3, v4);
}

uint64_t sub_1B8B2C120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 EventLocationModelObject.predictedLOI.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v5 = a1[3];
  v6 = a1[2];
  v4 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  sub_1B8B2C214(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
  *(_OWORD *)(v1 + 88) = v8;
  *(_OWORD *)(v1 + 104) = v7;
  *(_OWORD *)(v1 + 120) = v6;
  *(_OWORD *)(v1 + 136) = v5;
  result = v4;
  *(__n128 *)(v1 + 152) = v4;
  *(_QWORD *)(v1 + 168) = v2;
  return result;
}

uint64_t sub_1B8B2C214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*EventLocationModelObject.predictedLOI.modify())()
{
  return nullsub_1;
}

__n128 EventLocationModelObject.init(title:geoLocation:radius:address:contactLabel:mapKitHandle:isImprecise:predictedLOI:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, char a12, uint64_t a13)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __n128 result;

  *(double *)(a9 + 24) = a10;
  v13 = *(_OWORD *)(a13 + 16);
  *(_OWORD *)(a9 + 88) = *(_OWORD *)a13;
  *(_OWORD *)(a9 + 104) = v13;
  v14 = *(_OWORD *)(a13 + 48);
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a13 + 32);
  v15 = *(_QWORD *)(a13 + 80);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_QWORD *)(a9 + 64) = a8;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 136) = v14;
  result = *(__n128 *)(a13 + 64);
  *(__n128 *)(a9 + 152) = result;
  *(_QWORD *)(a9 + 168) = v15;
  return result;
}

_QWORD *EventLocationModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[5];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t AssociatedConformanceWitness;
  char v112;

  v70 = a2;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  v58 = v6;
  v59 = v5;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
  v55 = v15;
  v56 = v14;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
  v53 = v19;
  v54 = v18;
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  v71 = v23;
  v72 = v22;
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 72))(v24, v25) & 1;
  v26 = a1[3];
  v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  v28 = *(void (**)(uint64_t, uint64_t))(v27 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = sub_1B8B9C50C();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v53 - v32;
  v28(v26, v27);
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    AssociatedConformanceWitness = 0;
    v109 = 0u;
    v110 = 0u;
  }
  else
  {
    *((_QWORD *)&v110 + 1) = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v109);
    (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 32))(boxed_opaque_existential_1, v33, AssociatedTypeWitness);
  }
  v36 = (_OWORD *)v70;
  sub_1B8B2C78C((uint64_t)&v109, (uint64_t)&v107);
  if (v108)
  {
    sub_1B8B0BBC8(&v107, (uint64_t)&v74);
    sub_1B8B0FC88((uint64_t)&v74, (uint64_t)v73);
    EventLocationPredictedLOIModelObject.init(_:)(v73, &v85);
    v69 = v86;
    v70 = v85;
    v68 = v88;
    v66 = v87;
    v67 = v89;
    v64 = v91;
    v65 = v90;
    v62 = v93;
    v63 = v92;
    v60 = v95;
    v61 = v94;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
  }
  else
  {
    v69 = 0;
    v70 = 0;
    v67 = 0;
    v68 = 0.0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v63 = 0;
    v60 = 0;
    v61 = 0;
    v66 = 1;
  }
  sub_1B8B2C7D4((uint64_t)&v109);
  sub_1B8B2C214(0, 0, 1);
  v38 = v58;
  v37 = v59;
  *(_QWORD *)&v74 = v59;
  *((_QWORD *)&v74 + 1) = v58;
  v40 = v56;
  v39 = v57;
  *(_QWORD *)&v75 = v57;
  *((double *)&v75 + 1) = v11;
  v42 = v54;
  v41 = v55;
  *(_QWORD *)&v76 = v56;
  *((_QWORD *)&v76 + 1) = v55;
  v43 = v53;
  *(_QWORD *)&v77 = v54;
  *((_QWORD *)&v77 + 1) = v53;
  *(_QWORD *)&v78 = v72;
  *((_QWORD *)&v78 + 1) = v71;
  LOBYTE(v79) = v112;
  *((_QWORD *)&v79 + 1) = v70;
  *(_QWORD *)&v80 = v69;
  *((_QWORD *)&v80 + 1) = v66;
  *(double *)&v81 = v68;
  *((_QWORD *)&v81 + 1) = v67;
  *(_QWORD *)&v82 = v65;
  *((_QWORD *)&v82 + 1) = v64;
  *(_QWORD *)&v83 = v63;
  *((_QWORD *)&v83 + 1) = v62;
  *(_QWORD *)&v84 = v61;
  *((_QWORD *)&v84 + 1) = v60;
  v44 = v79;
  v36[4] = v78;
  v36[5] = v44;
  v45 = v74;
  v46 = v75;
  v47 = v77;
  v36[2] = v76;
  v36[3] = v47;
  *v36 = v45;
  v36[1] = v46;
  v48 = v80;
  v49 = v81;
  v50 = v84;
  v36[9] = v83;
  v36[10] = v50;
  v51 = v82;
  v36[7] = v49;
  v36[8] = v51;
  v36[6] = v48;
  sub_1B8B2C814(&v74);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v85 = v37;
  v86 = v38;
  v87 = v39;
  v88 = v11;
  v89 = v40;
  v90 = v41;
  v91 = v42;
  v92 = v43;
  v93 = v72;
  v94 = v71;
  LOBYTE(v95) = v112;
  *(_DWORD *)((char *)&v95 + 1) = v73[0];
  HIDWORD(v95) = *(_DWORD *)((char *)v73 + 3);
  v96 = v70;
  v97 = v69;
  v98 = v66;
  v99 = v68;
  v100 = v67;
  v101 = v65;
  v102 = v64;
  v103 = v63;
  v104 = v62;
  v105 = v61;
  v106 = v60;
  return sub_1B8B2C8E8(&v85);
}

uint64_t sub_1B8B2C78C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B2C7D4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1B8B2C814(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;
  uint64_t v9;

  v2 = (void *)a1[2];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[13];
  v8 = a1[12];
  v9 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v2;
  swift_bridgeObjectRetain();
  sub_1B8AF1CDC(v3, v4);
  sub_1B8B2C120(v9, v8, v5);
  return a1;
}

_QWORD *sub_1B8B2C8E8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)a1[2];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[13];
  v7 = a1[12];
  v8 = a1[11];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B8ADDBD0(v3, v4);
  sub_1B8B2C214(v8, v7, v5);
  return a1;
}

uint64_t EventLocationModelObject.hash(into:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v7;
  __int128 v8;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 72);
  v8 = *(_OWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 64);
  if (*(_QWORD *)(v0 + 8))
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      sub_1B8B9C980();
      v5 = v1;
      sub_1B8B9C4DC();

      goto LABEL_6;
    }
  }
  else
  {
    sub_1B8B9C980();
    if (v1)
      goto LABEL_3;
  }
  sub_1B8B9C980();
LABEL_6:
  sub_1B8B9C98C();
  if (v2)
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_8:
      sub_1B8B9C980();
      swift_bridgeObjectRetain();
      sub_1B8B9C1E8();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  else
  {
    sub_1B8B9C980();
    if (v3)
      goto LABEL_8;
  }
  sub_1B8B9C980();
LABEL_11:
  sub_1B8B9C980();
  if (v4 >> 60 != 15)
  {
    sub_1B8ADC5E4(v7, v4);
    sub_1B8B9B090();
    sub_1B8ADDBD0(v7, v4);
  }
  sub_1B8B9C980();
  if ((_QWORD)v8 == 1)
    return sub_1B8B9C980();
  sub_1B8B9C980();
  return EventLocationPredictedLOIModelObject.hash(into:)();
}

uint64_t sub_1B8B2CC14()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B2CC40 + 4 * byte_1B8BAA170[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1B8B2CC40()
{
  return 0x7461636F4C6F6567;
}

uint64_t sub_1B8B2CC60()
{
  return 0x737569646172;
}

uint64_t sub_1B8B2CC74()
{
  return 0x73736572646461;
}

uint64_t sub_1B8B2CC8C()
{
  return 0x4C746361746E6F63;
}

uint64_t sub_1B8B2CCAC()
{
  return 0x614874694B70616DLL;
}

uint64_t sub_1B8B2CCCC()
{
  return 0x636572706D497369;
}

uint64_t sub_1B8B2CCEC()
{
  return 0x6574636964657270;
}

uint64_t sub_1B8B2CD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B2F210(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B2CD30()
{
  sub_1B8B2E6E4();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B2CD58()
{
  sub_1B8B2E6E4();
  return sub_1B8B9C9EC();
}

uint64_t EventLocationModelObject.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v34 = *(_QWORD *)(v1 + 32);
  v35 = v7;
  v8 = *(_QWORD *)(v1 + 40);
  v32 = *(_QWORD *)(v1 + 48);
  v33 = v8;
  v9 = *(_QWORD *)(v1 + 56);
  v28 = *(_QWORD *)(v1 + 64);
  v29 = *(_QWORD *)(v1 + 72);
  v30 = v9;
  v27 = *(unsigned __int8 *)(v1 + 80);
  v31 = *(_QWORD *)(v1 + 88);
  v18 = *(_QWORD *)(v1 + 96);
  v19 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 112);
  v26 = *(_QWORD *)(v1 + 120);
  v25 = *(_QWORD *)(v1 + 128);
  v24 = *(_QWORD *)(v1 + 136);
  v23 = *(_QWORD *)(v1 + 144);
  v22 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 168);
  v21 = *(_QWORD *)(v1 + 160);
  v11 = a1[3];
  v12 = a1;
  v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_1B8B2E6E4();
  sub_1B8B9C9C8();
  LOBYTE(v37) = 0;
  v15 = v36;
  sub_1B8B9C848();
  if (!v15)
  {
    v36 = v10;
    v17 = v31;
    v37 = v35;
    v48 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD218);
    sub_1B8B2E7B0(&qword_1EF1BD220, (uint64_t)&protocol conformance descriptor for CodableViaNSSecureCoding<A>);
    sub_1B8B9C8A8();
    LOBYTE(v37) = 2;
    sub_1B8B9C884();
    LOBYTE(v37) = 3;
    sub_1B8B9C848();
    LOBYTE(v37) = 4;
    sub_1B8B9C848();
    v37 = v28;
    v38 = v29;
    v48 = 5;
    sub_1B8B2E728();
    sub_1B8B9C860();
    LOBYTE(v37) = 6;
    sub_1B8B9C878();
    v37 = v17;
    v38 = v18;
    v39 = v19;
    v40 = v20;
    v41 = v26;
    v42 = v25;
    v43 = v24;
    v44 = v23;
    v45 = v22;
    v46 = v21;
    v47 = v36;
    v48 = 7;
    sub_1B8B2E76C();
    sub_1B8B9C860();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v14);
}

uint64_t EventLocationModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventLocationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

_QWORD *EventLocationModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  void *v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD230);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B8B2E6E4();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8ADDBD0(0, 0xF000000000000000);
    return (_QWORD *)sub_1B8B2C214(0, 0, 1);
  }
  else
  {
    LOBYTE(v72) = 0;
    v10 = sub_1B8B9C7A0();
    v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD218);
    LOBYTE(v61) = 1;
    sub_1B8B2E7B0(&qword_1EF1BD238, (uint64_t)&protocol conformance descriptor for CodableViaNSSecureCoding<A>);
    swift_bridgeObjectRetain();
    sub_1B8B9C818();
    *(_QWORD *)&v58 = v10;
    *((_QWORD *)&v58 + 1) = v12;
    v13 = v72;
    LOBYTE(v72) = 2;
    v59 = v13;
    v14 = v13;
    sub_1B8B9C7F4();
    v16 = v15;
    LOBYTE(v72) = 3;
    v17 = sub_1B8B9C7A0();
    v19 = v18;
    v57 = v17;
    LOBYTE(v72) = 4;
    swift_bridgeObjectRetain();
    v20 = sub_1B8B9C7A0();
    v22 = v21;
    v55 = v20;
    v56 = v19;
    LOBYTE(v61) = 5;
    sub_1B8B2E7F4();
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    v53 = v14;
    v54 = v22;
    v23 = (uint64_t)v72;
    v24 = v73;
    LOBYTE(v72) = 6;
    sub_1B8AF1CDC(v23, v73);
    LODWORD(v52) = sub_1B8B9C7E8();
    v93 = 7;
    sub_1B8B2E838();
    sub_1B8B9C7D0();
    v50 = v52 & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = v94;
    v26 = v95;
    v27 = v96;
    v28 = v99;
    v46 = v98;
    v47 = v97;
    v44 = v100;
    v51 = v101;
    v52 = v102;
    v49 = v103;
    v45 = v94;
    v48 = v95;
    sub_1B8B2C120(v94, v95, v96);
    sub_1B8B2C214(0, 0, 1);
    v61 = v58;
    *(_QWORD *)&v62 = v59;
    *((_QWORD *)&v62 + 1) = v16;
    *(_QWORD *)&v63 = v57;
    *((_QWORD *)&v63 + 1) = v56;
    *(_QWORD *)&v64 = v55;
    *((_QWORD *)&v64 + 1) = v54;
    v41 = v23;
    v42 = v28;
    *(_QWORD *)&v65 = v23;
    *((_QWORD *)&v65 + 1) = v24;
    LOBYTE(v66) = v50;
    *((_QWORD *)&v66 + 1) = v25;
    *(_QWORD *)&v67 = v26;
    v43 = v27;
    *((_QWORD *)&v67 + 1) = v27;
    *(_QWORD *)&v68 = v47;
    *((_QWORD *)&v68 + 1) = v46;
    *(_QWORD *)&v69 = v28;
    *((_QWORD *)&v69 + 1) = v44;
    v70 = v51;
    *(_QWORD *)&v71 = v52;
    *((_QWORD *)&v71 + 1) = v49;
    sub_1B8B2C814(&v61);
    v29 = v44;
    sub_1B8B2C214(v45, v48, v27);
    v30 = v41;
    sub_1B8ADDBD0(v41, v24);
    v31 = *((_QWORD *)&v58 + 1);
    swift_bridgeObjectRelease();

    v32 = v56;
    swift_bridgeObjectRelease();
    v33 = v54;
    swift_bridgeObjectRelease();
    v34 = v70;
    a2[8] = v69;
    a2[9] = v34;
    a2[10] = v71;
    v35 = v66;
    a2[4] = v65;
    a2[5] = v35;
    v36 = v68;
    a2[6] = v67;
    a2[7] = v36;
    v37 = v62;
    *a2 = v61;
    a2[1] = v37;
    v38 = v64;
    a2[2] = v63;
    a2[3] = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    v72 = (void *)v58;
    v73 = v31;
    v74 = v59;
    v75 = v16;
    v76 = v57;
    v77 = v32;
    v78 = v55;
    v79 = v33;
    v80 = v30;
    v81 = v24;
    v82 = v50;
    v83 = v45;
    v84 = v48;
    v85 = v43;
    v86 = v47;
    v87 = v46;
    v88 = v42;
    v89 = v29;
    v90 = v51;
    v91 = v52;
    v92 = v49;
    return sub_1B8B2C8E8(&v72);
  }
}

void *sub_1B8B2D8C0()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

double sub_1B8B2D8E4()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_1B8B2D8EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B8B2D918()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1B8AF1CDC(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t sub_1B8B2D948@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1[11];
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  v9 = v1[18];
  v10 = v1[19];
  v11 = v1[20];
  v12 = v1[21];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  return sub_1B8B2C120(v2, v3, v4);
}

uint64_t sub_1B8B2D99C()
{
  sub_1B8B9C968();
  EventLocationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B2D9DC()
{
  sub_1B8B9C968();
  EventLocationModelObject.hash(into:)();
  return sub_1B8B9C998();
}

_QWORD *sub_1B8B2DA14@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return EventLocationModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8B2DA28(_QWORD *a1)
{
  return EventLocationModelObject.encode(to:)(a1);
}

void sub_1B8B2DA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B8B2DAA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1B8B2DC84);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1B8B2DCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1B8B2DA40((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1B8B2DD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1B8B9AE98();
  v11 = result;
  if (result)
  {
    result = sub_1B8B9AEB0();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1B8B9AEA4();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1B8B2DA40(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1B8B2DE30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B8B2DE7C()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1B8B2DEB0 + *((int *)qword_1B8B2E088 + (v0 >> 62))))();
}

uint64_t sub_1B8B2DEC0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL _s13CalendarUIKit24EventLocationModelObjectV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _BOOL8 result;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[11];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v86 = *(_QWORD *)(a1 + 32);
  v92 = *(_QWORD *)(a1 + 40);
  v84 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v88 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v80 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 160);
  v78 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(void **)(a2 + 16);
  v16 = *(double *)(a2 + 24);
  v85 = *(_QWORD *)(a2 + 32);
  v89 = *(_QWORD *)(a2 + 40);
  v87 = *(_QWORD *)(a2 + 56);
  v81 = *(_QWORD *)(a2 + 64);
  v82 = *(_QWORD *)(a2 + 72);
  v83 = *(_QWORD *)(a2 + 48);
  v79 = *(unsigned __int8 *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 152);
  v77 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 168);
  if (!v3)
  {
    v71 = *(_QWORD *)(a2 + 104);
    v72 = *(_QWORD *)(a1 + 104);
    v63 = *(_QWORD *)(a2 + 112);
    v64 = *(_QWORD *)(a2 + 120);
    v65 = *(_QWORD *)(a2 + 128);
    v66 = *(_QWORD *)(a2 + 136);
    v67 = *(_QWORD *)(a2 + 144);
    v68 = *(_QWORD *)(a1 + 120);
    v69 = *(_QWORD *)(a1 + 136);
    v70 = *(_QWORD *)(a1 + 152);
    if (v14)
      return 0;
    goto LABEL_8;
  }
  if (!v14)
    return 0;
  v71 = *(_QWORD *)(a2 + 104);
  v72 = *(_QWORD *)(a1 + 104);
  v63 = *(_QWORD *)(a2 + 112);
  v64 = *(_QWORD *)(a2 + 120);
  v65 = *(_QWORD *)(a2 + 128);
  v66 = *(_QWORD *)(a2 + 136);
  v67 = *(_QWORD *)(a2 + 144);
  v68 = *(_QWORD *)(a1 + 120);
  v69 = *(_QWORD *)(a1 + 136);
  v70 = *(_QWORD *)(a1 + 152);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v14)
    goto LABEL_8;
  v73 = *(_QWORD *)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 144);
  v59 = *(_QWORD *)(a1 + 112);
  v61 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 160);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = sub_1B8B9C8D8();
  v6 = v23;
  v13 = v22;
  v12 = v21;
  v7 = v73;
  v10 = v59;
  v11 = v61;
  v25 = v24;
  result = 0;
  if ((v25 & 1) != 0)
  {
LABEL_8:
    if (v4)
    {
      if (!v15)
        return 0;
      v56 = v6;
      v57 = v12;
      v74 = v7;
      v27 = v13;
      v60 = v17;
      sub_1B8B2F67C();
      v28 = v15;
      v29 = v4;
      v30 = sub_1B8B9C4D0();

      result = 0;
      if ((v30 & 1) == 0)
        return result;
      v17 = v60;
      v6 = v56;
      v12 = v57;
      v13 = v27;
      v7 = v74;
      if (v5 != v16)
        return result;
    }
    else
    {
      result = 0;
      if (v15 || v5 != v16)
        return result;
    }
    if (v92)
    {
      if (!v89)
        return 0;
      if (v86 != v85 || v92 != v89)
      {
        v75 = v7;
        v31 = v12;
        v32 = v13;
        v33 = v6;
        v34 = sub_1B8B9C8D8();
        v6 = v33;
        v13 = v32;
        v12 = v31;
        v7 = v75;
        v35 = v34;
        result = 0;
        if ((v35 & 1) == 0)
          return result;
      }
    }
    else if (v89)
    {
      return 0;
    }
    if (v88)
    {
      if (!v87)
        return 0;
      if (v84 != v83 || v88 != v87)
      {
        v76 = v7;
        v36 = v12;
        v37 = v13;
        v38 = v6;
        v39 = sub_1B8B9C8D8();
        v6 = v38;
        v13 = v37;
        v12 = v36;
        v7 = v76;
        v40 = v39;
        result = 0;
        if ((v40 & 1) == 0)
          return result;
      }
    }
    else if (v87)
    {
      return 0;
    }
    if (v7 >> 60 == 15)
    {
      v41 = v82;
      if (v82 >> 60 == 15)
      {
        if (v80 != v79)
          return 0;
        goto LABEL_39;
      }
    }
    else
    {
      v41 = v82;
      if (v82 >> 60 != 15)
      {
        v90 = v13;
        v58 = v12;
        v62 = v11;
        v43 = v20;
        v44 = v7;
        v45 = v19;
        v46 = v6;
        sub_1B8AF1CDC(v6, v44);
        sub_1B8AF1CDC(v81, v82);
        sub_1B8B2DE30(v46, v44);
        v48 = v47;
        sub_1B8ADDBD0(v81, v82);
        sub_1B8ADDBD0(v46, v44);
        result = 0;
        if ((v48 & 1) == 0)
          return result;
        v19 = v45;
        v20 = v43;
        v13 = v90;
        v11 = v62;
        v12 = v58;
        if (((v80 ^ v79) & 1) != 0)
          return result;
LABEL_39:
        v49 = v72;
        if (v72 == 1)
        {
          v50 = v71;
          if (v71 == 1)
            return 1;
          goto LABEL_44;
        }
        v94 = v8;
        v95 = v9;
        v96 = v72;
        v97 = v10;
        v98 = v68;
        v99 = v11;
        v100 = v69;
        v101 = v12;
        v102 = v70;
        v103 = v13;
        v104 = v78;
        if (v71 == 1)
        {
          v91 = v19;
          v51 = v10;
          v52 = v20;
          v53 = v12;
          v54 = v13;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v13 = v54;
          v12 = v53;
          v20 = v52;
          v10 = v51;
          v50 = 1;
          v49 = v72;
          v19 = v91;
LABEL_44:
          v94 = v8;
          v95 = v9;
          v96 = v49;
          v97 = v10;
          v98 = v68;
          v99 = v11;
          v100 = v69;
          v101 = v12;
          v102 = v70;
          v103 = v13;
          v104 = v78;
          v105 = v17;
          v106 = v18;
          v107 = v50;
          v108 = v63;
          v109 = v64;
          v110 = v65;
          v111 = v66;
          v112 = v67;
          v113 = v19;
          v114 = v77;
          v115 = v20;
          sub_1B8B2C120(v17, v18, v50);
          sub_1B8B2F5C0(&v94);
          return 0;
        }
        v93[0] = v17;
        v93[1] = v18;
        v93[2] = v71;
        v93[3] = v63;
        v93[4] = v64;
        v93[5] = v65;
        v93[6] = v66;
        v93[7] = v67;
        v93[8] = v19;
        v93[9] = v77;
        v93[10] = v20;
        v55 = _s13CalendarUIKit36EventLocationPredictedLOIModelObjectV2eeoiySbAC_ACtFZ_0(&v94, v93);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (v55 & 1) != 0;
      }
    }
    v42 = v6;
    sub_1B8AF1CDC(v6, v7);
    sub_1B8AF1CDC(v81, v41);
    sub_1B8ADDBD0(v42, v7);
    sub_1B8ADDBD0(v81, v41);
    return 0;
  }
  return result;
}

unint64_t sub_1B8B2E6E4()
{
  unint64_t result;

  result = qword_1EF1BD210;
  if (!qword_1EF1BD210)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA34C, &type metadata for EventLocationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD210);
  }
  return result;
}

unint64_t sub_1B8B2E728()
{
  unint64_t result;

  result = qword_1EF1BDD70[0];
  if (!qword_1EF1BDD70[0])
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, qword_1EF1BDD70);
  }
  return result;
}

unint64_t sub_1B8B2E76C()
{
  unint64_t result;

  result = qword_1EF1BD228;
  if (!qword_1EF1BD228)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventLocationPredictedLOIModelObject, &type metadata for EventLocationPredictedLOIModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BD228);
  }
  return result;
}

uint64_t sub_1B8B2E7B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD218);
    result = MEMORY[0x1BCCB79D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B2E7F4()
{
  unint64_t result;

  result = qword_1EF1BDD60;
  if (!qword_1EF1BDD60)
  {
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF1BDD60);
  }
  return result;
}

unint64_t sub_1B8B2E838()
{
  unint64_t result;

  result = qword_1EF1BD240;
  if (!qword_1EF1BD240)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventLocationPredictedLOIModelObject, &type metadata for EventLocationPredictedLOIModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BD240);
  }
  return result;
}

_UNKNOWN **sub_1B8B2E87C()
{
  return &protocol witness table for EventLocationPredictedLOIModelObject;
}

unint64_t sub_1B8B2E88C()
{
  unint64_t result;

  result = qword_1EF1BD248;
  if (!qword_1EF1BD248)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventLocationModelObject, &type metadata for EventLocationModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BD248);
  }
  return result;
}

id sub_1B8B2E8D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  *a2 = v2;
  return v2;
}

void sub_1B8B2E8DC(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 16);
  v5 = *a1;

  *(_QWORD *)(a2 + 16) = v3;
}

uint64_t destroy for EventLocationModelObject(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >> 60 != 15)
    sub_1B8ADC698(*(_QWORD *)(a1 + 64), v2);
  result = *(_QWORD *)(a1 + 104);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for EventLocationModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = (uint64_t *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  v9 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v7;
  }
  else
  {
    v10 = *v7;
    sub_1B8ADC5E4(*v7, v8);
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v8;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v12;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 104) = v11;
    *(_QWORD *)(a1 + 112) = v14;
    v16 = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = v16;
    v18 = *(_QWORD *)(a2 + 144);
    v19 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = v18;
    v20 = *(_QWORD *)(a2 + 160);
    v21 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 152) = v19;
    *(_QWORD *)(a1 + 160) = v20;
    *(_QWORD *)(a1 + 168) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for EventLocationModelObject(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      v9 = *v7;
      sub_1B8ADC5E4(*v7, *(_QWORD *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_1B8B18778(a1 + 64);
LABEL_6:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v7;
    goto LABEL_8;
  }
  v10 = *v7;
  sub_1B8ADC5E4(*v7, *(_QWORD *)(a2 + 72));
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v8;
  sub_1B8ADC698(v11, v12);
LABEL_8:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v13 = (_OWORD *)(a1 + 88);
  v14 = (_OWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 104);
      *v13 = *v14;
      *(_OWORD *)(a1 + 104) = v16;
      v17 = *(_OWORD *)(a2 + 120);
      v18 = *(_OWORD *)(a2 + 136);
      v19 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v18;
      *(_OWORD *)(a1 + 152) = v19;
      *(_OWORD *)(a1 + 120) = v17;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v15 == 1)
  {
    sub_1B8B2EDB4(a1 + 88);
    v20 = *(_OWORD *)(a2 + 104);
    *v13 = *v14;
    *(_OWORD *)(a1 + 104) = v20;
    v22 = *(_OWORD *)(a2 + 136);
    v21 = *(_OWORD *)(a2 + 152);
    v23 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v22;
    *(_OWORD *)(a1 + 152) = v21;
    *(_OWORD *)(a1 + 120) = v23;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1B8B2EDB4(uint64_t a1)
{
  destroy for EventLocationPredictedLOIModelObject();
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for EventLocationModelObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 72);
  if (v10 >> 60 == 15)
  {
    sub_1B8B18778(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 72) = v10;
  sub_1B8ADC698(v11, v9);
LABEL_6:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  if (*(_QWORD *)(a1 + 104) != 1)
  {
    v12 = *(_QWORD *)(a2 + 104);
    if (v12 != 1)
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = v12;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v15;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v16;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v17;
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v18;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1B8B2EDB4(a1 + 88);
  }
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v14 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for EventLocationModelObject(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventLocationModelObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventLocationModelObject()
{
  return &type metadata for EventLocationModelObject;
}

uint64_t storeEnumTagSinglePayload for EventLocationModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B8B2F0B8 + 4 * byte_1B8BAA17D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B8B2F0EC + 4 * byte_1B8BAA178[v4]))();
}

uint64_t sub_1B8B2F0EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B2F0F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B2F0FCLL);
  return result;
}

uint64_t sub_1B8B2F108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B2F110);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B8B2F114(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B2F11C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventLocationModelObject.CodingKeys()
{
  return &type metadata for EventLocationModelObject.CodingKeys;
}

unint64_t sub_1B8B2F13C()
{
  unint64_t result;

  result = qword_1EF1BD250;
  if (!qword_1EF1BD250)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA324, &type metadata for EventLocationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD250);
  }
  return result;
}

unint64_t sub_1B8B2F184()
{
  unint64_t result;

  result = qword_1EF1BD258;
  if (!qword_1EF1BD258)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA294, &type metadata for EventLocationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD258);
  }
  return result;
}

unint64_t sub_1B8B2F1CC()
{
  unint64_t result;

  result = qword_1EF1BD260;
  if (!qword_1EF1BD260)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA2BC, &type metadata for EventLocationModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD260);
  }
  return result;
}

uint64_t sub_1B8B2F210(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461636F4C6F6567 && a2 == 0xEB000000006E6F69 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4C746361746E6F63 && a2 == 0xEC0000006C656261 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614874694B70616DLL && a2 == 0xEC000000656C646ELL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x636572706D497369 && a2 == 0xEB00000000657369 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6574636964657270 && a2 == 0xEC000000494F4C64)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t *sub_1B8B2F5C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[13];
  sub_1B8B2C214(*a1, a1[1], a1[2]);
  sub_1B8B2C214(v2, v3, v4);
  return a1;
}

unint64_t sub_1B8B2F67C()
{
  unint64_t result;

  result = qword_1EF1BD268;
  if (!qword_1EF1BD268)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF1BD268);
  }
  return result;
}

uint64_t sub_1B8B2F6B8(uint64_t a1)
{
  return sub_1B8B2F704(a1, qword_1EF1CF278);
}

uint64_t sub_1B8B2F6D8(uint64_t a1)
{
  return sub_1B8B2F704(a1, qword_1EF1CF290);
}

uint64_t sub_1B8B2F704(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1B8B9B318();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1B8B9B30C();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

ValueMetadata *type metadata accessor for NotesView()
{
  return &type metadata for NotesView;
}

uint64_t sub_1B8B2F7C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B2F7D8@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  uint64_t KeyPath;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;

  v2 = v1;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD270);
  MEMORY[0x1E0C80A78](v42);
  v43 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD278);
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCBE8);
  v7 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD280);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v38 - v14;
  v16 = *((_QWORD *)v1 + 4);
  v17 = *((_BYTE *)v2 + 40);
  sub_1B8AE20B0(v16, v17);
  v18 = sub_1B8B17940(v16, v17);
  sub_1B8AE20FC(v16, v17);
  if ((v18 & 1) != 0)
  {
    sub_1B8B9B780();
    v38 = v30;
    v39 = a1;
    v31 = v2[1];
    v44[0] = *v2;
    v44[1] = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1F0);
    sub_1B8B9BF60();
    sub_1B8B9C05C();
    KeyPath = swift_getKeyPath();
    v33 = v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v40);
    v34 = &v13[*(int *)(v10 + 36)];
    *(_QWORD *)v34 = KeyPath;
    *((_QWORD *)v34 + 1) = 10;
    v34[16] = 0;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v33);
    sub_1B8B06074((uint64_t)v13, (uint64_t)v15, &qword_1EF1BD280);
    sub_1B8B2FC88((uint64_t)v15, v43);
    swift_storeEnumTagMultiPayload();
    sub_1B8B2FBE4();
    v35 = (uint64_t)v41;
    sub_1B8B9B870();
    sub_1B8B2FCD0((uint64_t)v15);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD290);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
    return sub_1B8B06074(v35, v39, &qword_1EF1BD278);
  }
  else
  {
    v19 = v43;
    v20 = v2[1];
    v45 = *v2;
    v46 = v20;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD1F0);
    MEMORY[0x1BCCB60C8](v44);
    v22 = v44[0];
    swift_bridgeObjectRelease();
    v23 = HIBYTE(*((_QWORD *)&v22 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v22 + 1) & 0x2000000000000000) == 0)
      v23 = v22 & 0xFFFFFFFFFFFFLL;
    if (v23)
    {
      v24 = v2[1];
      v45 = *v2;
      v46 = v24;
      MEMORY[0x1BCCB60C8](v44, v21);
      v45 = v44[0];
      sub_1B8ADDBE4();
      *(_QWORD *)v19 = sub_1B8B9BBAC();
      *(_QWORD *)(v19 + 8) = v25;
      *(_BYTE *)(v19 + 16) = v26 & 1;
      *(_QWORD *)(v19 + 24) = v27;
      swift_storeEnumTagMultiPayload();
      sub_1B8B2FBE4();
      sub_1B8B9B870();
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD290);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a1, 0, 1, v28);
    }
    else
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD290);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a1, 1, 1, v37);
    }
  }
}

unint64_t sub_1B8B2FBE4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD288;
  if (!qword_1EF1BD288)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD280);
    v2[0] = sub_1B8ADE950(&qword_1EF1BCBF0, &qword_1EF1BCBE8, MEMORY[0x1E0CE0630]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD288);
  }
  return result;
}

uint64_t sub_1B8B2FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B2FCD0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD280);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B8B2FD14()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF1BD298;
  if (!qword_1EF1BD298)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD278);
    v2 = sub_1B8B2FD78();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CE07A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD298);
  }
  return result;
}

unint64_t sub_1B8B2FD78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD2A0;
  if (!qword_1EF1BD2A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD290);
    v2[0] = sub_1B8B2FBE4();
    v2[1] = MEMORY[0x1E0CDDD50];
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD2A0);
  }
  return result;
}

uint64_t FakeDataReader.datasetName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

CalendarUIKit::FakeDataReader __swiftcall FakeDataReader.init(datasetName:)(CalendarUIKit::FakeDataReader datasetName)
{
  CalendarUIKit::FakeDataReader *v1;

  *v1 = datasetName;
  return datasetName;
}

CalendarUIKit::FakeDataReader::Dataset __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FakeDataReader.readData()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t i;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char isUniquelyReferenced_nonNull_native;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  _BOOL8 v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t (*v129)(_QWORD);
  char v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  char v134;
  int v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD v159[7];
  _OWORD v160[2];
  _QWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _OWORD v169[2];
  _OWORD v170[3];
  _OWORD v171[3];
  uint64_t v172;
  CalendarUIKit::FakeDataReader::Dataset result;

  v152 = v0;
  v1 = type metadata accessor for EventModelObject();
  v150 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v158 = (uint64_t)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v154 = (uint64_t *)((char *)&v143 - v4);
  v5 = type metadata accessor for EventCalendarModelObject();
  v151 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v172 = (uint64_t)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v155 = (uint64_t *)((char *)&v143 - v8);
  v9 = sub_1B8B9B054();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v13);
  v15 = (unint64_t)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  strcpy((char *)&v162, "FakeDatasets/");
  HIWORD(v162) = -4864;
  swift_bridgeObjectRetain();
  sub_1B8B9C218();
  swift_bridgeObjectRelease();
  v17 = (void *)sub_1B8B9C14C();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_1B8B9C14C();
  v19 = objc_msgSend(v16, sel_URLForResource_withExtension_, v17, v18);

  if (!v19)
    goto LABEL_70;
  sub_1B8B9B030();

  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15, v12, v9);
  (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    v23 = (void *)sub_1B8B9C92C();
    __break(1u);
  }
  else
  {
    v20 = v157;
    v21 = sub_1B8B9B060();
    if (v20)
    {
      v23 = (void *)(*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(v15, v9);
      goto LABEL_73;
    }
    v26 = v21;
    v27 = v22;
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v15, v9);
    sub_1B8B9AE2C();
    swift_allocObject();
    sub_1B8B9AE20();
    sub_1B8B30A84();
    sub_1B8B9AE14();
    v28 = 0;
    swift_release();
    v153 = v162;
    v145 = v163;
    v146 = *((_QWORD *)&v162 + 1);
    v29 = *(_QWORD *)(v162 + 16);
    v30 = MEMORY[0x1E0DEE9D8];
    v147 = v26;
    v148 = v27;
    v149 = 0;
    if (v29)
    {
      *(_QWORD *)&v159[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1B8B373DC(0, v29, 0);
      v31 = v153;
      v32 = *(_QWORD *)&v159[0];
      v33 = v29 - 1;
      for (i = 32; ; i += 72)
      {
        v35 = v31 + i;
        v170[0] = *(_OWORD *)v35;
        v36 = *(_OWORD *)(v35 + 16);
        v37 = *(_OWORD *)(v35 + 32);
        v38 = *(_OWORD *)(v35 + 48);
        *(_DWORD *)((char *)v171 + 15) = *(_DWORD *)(v35 + 63);
        v170[2] = v37;
        v171[0] = v38;
        v170[1] = v36;
        sub_1B8B373F8((uint64_t)v170);
        sub_1B8B30AC8((uint64_t)&v162);
        sub_1B8B3744C((uint64_t)v170);
        v39 = v32;
        *(_QWORD *)&v159[0] = v32;
        v41 = *(_QWORD *)(v32 + 16);
        v40 = *(_QWORD *)(v32 + 24);
        if (v41 >= v40 >> 1)
        {
          sub_1B8B373DC(v40 > 1, v41 + 1, 1);
          v39 = *(_QWORD *)&v159[0];
        }
        *(_QWORD *)(v39 + 16) = v41 + 1;
        v32 = v39;
        v42 = v39 + 136 * v41;
        *(_OWORD *)(v42 + 32) = v162;
        v43 = v163;
        v44 = v164;
        v45 = v166;
        *(_OWORD *)(v42 + 80) = v165;
        *(_OWORD *)(v42 + 96) = v45;
        *(_OWORD *)(v42 + 48) = v43;
        *(_OWORD *)(v42 + 64) = v44;
        v46 = v167;
        v47 = v168;
        v48 = v169[0];
        *(_QWORD *)(v42 + 158) = *(_QWORD *)((char *)v169 + 14);
        *(_OWORD *)(v42 + 128) = v47;
        *(_OWORD *)(v42 + 144) = v48;
        *(_OWORD *)(v42 + 112) = v46;
        if (!v33)
          break;
        --v33;
        v31 = v153;
      }
      swift_bridgeObjectRelease();
      v28 = v149;
      v30 = v32;
      v26 = v147;
      v27 = v148;
    }
    v49 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    if (*(_QWORD *)(v30 + 16))
    {
      v157 = *(_QWORD *)(v30 + 16);
      v50 = swift_bridgeObjectRetain();
      v51 = *(_OWORD *)(v50 + 128);
      v167 = *(_OWORD *)(v50 + 112);
      v168 = v51;
      v169[0] = *(_OWORD *)(v50 + 144);
      *(_QWORD *)((char *)v169 + 14) = *(_QWORD *)(v50 + 158);
      v52 = *(_OWORD *)(v50 + 48);
      v53 = *(_OWORD *)(v50 + 80);
      v54 = *(_OWORD *)(v50 + 96);
      v164 = *(_OWORD *)(v50 + 64);
      v165 = v53;
      v166 = v54;
      v156 = v50;
      v162 = *(_OWORD *)(v50 + 32);
      v163 = v52;
      v10 = *((_QWORD *)&v162 + 1);
      v15 = v162;
      sub_1B8B15004((uint64_t)&v162);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v161 = v49;
      v57 = sub_1B8B37084(v15, v10);
      v58 = v49[2];
      v59 = (v56 & 1) == 0;
      v60 = v58 + v59;
      if (!__OFADD__(v58, v59))
      {
        v61 = v56;
        v9 = 168;
        do
        {
          if (v49[3] >= v60)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v61 & 1) != 0)
                goto LABEL_21;
            }
            else
            {
              sub_1B8B38AF8();
              if ((v61 & 1) != 0)
                goto LABEL_21;
            }
          }
          else
          {
            sub_1B8B383D4(v60, isUniquelyReferenced_nonNull_native & 1);
            v62 = sub_1B8B37084(v15, v10);
            if ((v61 & 1) != (v63 & 1))
              goto LABEL_72;
            v57 = v62;
            if ((v61 & 1) != 0)
            {
LABEL_21:
              v49 = v161;
              v64 = v161[7] + 136 * v57;
              v159[0] = *(_OWORD *)v64;
              v65 = *(_OWORD *)(v64 + 64);
              v67 = *(_OWORD *)(v64 + 16);
              v66 = *(_OWORD *)(v64 + 32);
              v159[3] = *(_OWORD *)(v64 + 48);
              v159[4] = v65;
              v159[1] = v67;
              v159[2] = v66;
              v69 = *(_OWORD *)(v64 + 96);
              v68 = *(_OWORD *)(v64 + 112);
              v70 = *(_OWORD *)(v64 + 80);
              *(_QWORD *)((char *)v160 + 14) = *(_QWORD *)(v64 + 126);
              v159[6] = v69;
              v160[0] = v68;
              v159[5] = v70;
              *(_OWORD *)v64 = v162;
              v71 = v163;
              v72 = v164;
              v73 = v166;
              *(_OWORD *)(v64 + 48) = v165;
              *(_OWORD *)(v64 + 64) = v73;
              *(_OWORD *)(v64 + 16) = v71;
              *(_OWORD *)(v64 + 32) = v72;
              v74 = v167;
              v75 = v168;
              v76 = v169[0];
              *(_QWORD *)(v64 + 126) = *(_QWORD *)((char *)v169 + 14);
              *(_OWORD *)(v64 + 96) = v75;
              *(_OWORD *)(v64 + 112) = v76;
              *(_OWORD *)(v64 + 80) = v74;
              sub_1B8B15058((uint64_t)v159);
              goto LABEL_25;
            }
          }
          v49 = v161;
          v161[(v57 >> 6) + 8] |= 1 << v57;
          v77 = (unint64_t *)(v49[6] + 16 * v57);
          *v77 = v15;
          v77[1] = v10;
          v78 = v49[7] + 136 * v57;
          v79 = *(_QWORD *)((char *)v169 + 14);
          v81 = v168;
          v80 = v169[0];
          *(_OWORD *)(v78 + 80) = v167;
          *(_OWORD *)(v78 + 96) = v81;
          *(_OWORD *)(v78 + 112) = v80;
          *(_QWORD *)(v78 + 126) = v79;
          v83 = v165;
          v82 = v166;
          v84 = v164;
          *(_OWORD *)(v78 + 16) = v163;
          *(_OWORD *)(v78 + 32) = v84;
          *(_OWORD *)(v78 + 48) = v83;
          *(_OWORD *)(v78 + 64) = v82;
          *(_OWORD *)v78 = v162;
          v85 = v49[2];
          v86 = __OFADD__(v85, 1);
          v87 = v85 + 1;
          if (v86)
          {
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
            goto LABEL_71;
          }
          v49[2] = v87;
          swift_bridgeObjectRetain();
LABEL_25:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v157 == 1)
            goto LABEL_29;
          --v157;
          v162 = *(_OWORD *)(v156 + v9);
          v88 = *(_OWORD *)(v156 + v9 + 16);
          v89 = *(_OWORD *)(v156 + v9 + 32);
          v90 = *(_OWORD *)(v156 + v9 + 64);
          v165 = *(_OWORD *)(v156 + v9 + 48);
          v166 = v90;
          v163 = v88;
          v164 = v89;
          v91 = *(_OWORD *)(v156 + v9 + 80);
          v92 = *(_OWORD *)(v156 + v9 + 96);
          v93 = *(_OWORD *)(v156 + v9 + 112);
          *(_QWORD *)((char *)v169 + 14) = *(_QWORD *)(v156 + v9 + 126);
          v168 = v92;
          v169[0] = v93;
          v167 = v91;
          v10 = *((_QWORD *)&v162 + 1);
          v15 = v162;
          sub_1B8B15004((uint64_t)&v162);
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v161 = v49;
          v57 = sub_1B8B37084(v15, v10);
          v61 = v94;
          v95 = v49[2];
          v96 = (v94 & 1) == 0;
          v9 += 136;
          v60 = v95 + v96;
        }
        while (!__OFADD__(v95, v96));
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRelease();
      v26 = v147;
      v27 = v148;
      v28 = v149;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v97 = swift_bridgeObjectRetain();
    v98 = sub_1B8B390F8(v97, (uint64_t)v49);
    swift_bridgeObjectRelease();
    v144 = v49;
    swift_bridgeObjectRelease();
    v99 = *(_QWORD *)(v98 + 16);
    v100 = v155;
    if (v99)
    {
      v149 = v28;
      v101 = v98 + ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80));
      v102 = *(_QWORD *)(v151 + 72);
      v151 = v98;
      swift_bridgeObjectRetain();
      v103 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      v15 = (unint64_t)type metadata accessor for EventCalendarModelObject;
      while (1)
      {
        v156 = v101;
        v157 = v99;
        sub_1B8AE7B90(v101, (uint64_t)v100, (uint64_t (*)(_QWORD))v15);
        v105 = *v100;
        v106 = v100[1];
        v10 = v15;
        sub_1B8AE7B90((uint64_t)v100, v172, (uint64_t (*)(_QWORD))v15);
        swift_bridgeObjectRetain();
        v107 = v103;
        v9 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v162 = v107;
        v15 = sub_1B8B37084(v105, v106);
        v109 = v107[2];
        v110 = (v108 & 1) == 0;
        v111 = v109 + v110;
        if (__OFADD__(v109, v110))
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        v112 = v108;
        if (v107[3] >= v111)
        {
          if ((v9 & 1) != 0)
          {
            v115 = (_QWORD *)v162;
            if ((v108 & 1) == 0)
              goto LABEL_41;
          }
          else
          {
            sub_1B8B388D4((uint64_t (*)(_QWORD))v10, &qword_1EF1BD358);
            v115 = (_QWORD *)v162;
            if ((v112 & 1) == 0)
              goto LABEL_41;
          }
        }
        else
        {
          sub_1B8B3808C(v111, v9, (uint64_t (*)(_QWORD))v10, &qword_1EF1BD358);
          v113 = sub_1B8B37084(v105, v106);
          if ((v112 & 1) != (v114 & 1))
            goto LABEL_72;
          v15 = v113;
          v115 = (_QWORD *)v162;
          if ((v112 & 1) == 0)
          {
LABEL_41:
            v115[(v15 >> 6) + 8] |= 1 << v15;
            v116 = (uint64_t *)(v115[6] + 16 * v15);
            *v116 = v105;
            v116[1] = v106;
            v117 = v115[7] + v15 * v102;
            v15 = v10;
            sub_1B8AFE0FC(v172, v117, (uint64_t (*)(_QWORD))v10);
            v118 = v115[2];
            v86 = __OFADD__(v118, 1);
            v119 = v118 + 1;
            if (v86)
              goto LABEL_68;
            v103 = v115;
            v115[2] = v119;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          }
        }
        v103 = v115;
        v104 = v115[7] + v15 * v102;
        v15 = v10;
        sub_1B8B393D4(v172, v104, (uint64_t (*)(_QWORD))v10);
LABEL_33:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v100 = v155;
        sub_1B8AE7BD4((uint64_t)v155, (uint64_t (*)(_QWORD))v15);
        v101 = v156 + v102;
        v99 = v157 - 1;
        if (v157 == 1)
        {
          swift_bridgeObjectRelease();
          v26 = v147;
          v27 = v148;
          v120 = (uint64_t)v103;
          v28 = v149;
          goto LABEL_47;
        }
      }
    }
    v120 = MEMORY[0x1E0DEE9E0];
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v121 = swift_bridgeObjectRetain();
    v122 = sub_1B8B39270(v121, v120);
    v149 = v28;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v156 = v120;
    swift_bridgeObjectRelease();
    v123 = *(_QWORD *)(v122 + 16);
    v124 = v154;
    if (v123)
    {
      v125 = v122 + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
      v126 = *(_QWORD *)(v150 + 72);
      v155 = (uint64_t *)v122;
      swift_bridgeObjectRetain();
      v127 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      v9 = (uint64_t)type metadata accessor for EventModelObject;
      while (1)
      {
        v172 = v123;
        v157 = v125;
        sub_1B8AE7B90(v125, (uint64_t)v124, (uint64_t (*)(_QWORD))v9);
        v128 = *v124;
        v10 = v124[1];
        v129 = (uint64_t (*)(_QWORD))v9;
        sub_1B8AE7B90((uint64_t)v124, v158, (uint64_t (*)(_QWORD))v9);
        swift_bridgeObjectRetain();
        v9 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v162 = v127;
        v15 = sub_1B8B37084(v128, v10);
        v131 = v127[2];
        v132 = (v130 & 1) == 0;
        v133 = v131 + v132;
        if (__OFADD__(v131, v132))
          goto LABEL_66;
        v134 = v130;
        if (v127[3] >= v133)
        {
          if ((v9 & 1) != 0)
          {
            v9 = (uint64_t)v129;
            v127 = (_QWORD *)v162;
            if ((v130 & 1) == 0)
              goto LABEL_58;
          }
          else
          {
            v9 = (uint64_t)v129;
            sub_1B8B388D4(v129, &qword_1EF1BD360);
            v127 = (_QWORD *)v162;
            if ((v134 & 1) == 0)
              goto LABEL_58;
          }
        }
        else
        {
          v135 = v9;
          v9 = (uint64_t)v129;
          sub_1B8B3808C(v133, v135, v129, &qword_1EF1BD360);
          v136 = sub_1B8B37084(v128, v10);
          if ((v134 & 1) != (v137 & 1))
            goto LABEL_72;
          v15 = v136;
          v127 = (_QWORD *)v162;
          if ((v134 & 1) == 0)
          {
LABEL_58:
            v127[(v15 >> 6) + 8] |= 1 << v15;
            v138 = (uint64_t *)(v127[6] + 16 * v15);
            *v138 = v128;
            v138[1] = v10;
            sub_1B8AFE0FC(v158, v127[7] + v15 * v126, (uint64_t (*)(_QWORD))v9);
            v139 = v127[2];
            v86 = __OFADD__(v139, 1);
            v140 = v139 + 1;
            if (v86)
              goto LABEL_69;
            v127[2] = v140;
            swift_bridgeObjectRetain();
            goto LABEL_50;
          }
        }
        sub_1B8B393D4(v158, v127[7] + v15 * v126, (uint64_t (*)(_QWORD))v9);
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v124 = v154;
        sub_1B8AE7BD4((uint64_t)v154, (uint64_t (*)(_QWORD))v9);
        v125 = v157 + v126;
        v123 = v172 - 1;
        if (v172 == 1)
        {
          swift_bridgeObjectRelease();
          v26 = v147;
          v27 = v148;
          goto LABEL_64;
        }
      }
    }
    v127 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_64:
    sub_1B8ADC698(v26, v27);
    v23 = (void *)swift_bridgeObjectRelease();
    v141 = v152;
    v142 = v156;
    *v152 = v144;
    v141[1] = v142;
    v141[2] = v127;
  }
LABEL_73:
  result.events._rawValue = v25;
  result.calendars._rawValue = v24;
  result.sources._rawValue = v23;
  return result;
}

unint64_t sub_1B8B30A84()
{
  unint64_t result;

  result = qword_1EF1BD2A8;
  if (!qword_1EF1BD2A8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA528, &type metadata for FakeDataReader.Document);
    atomic_store(result, (unint64_t *)&qword_1EF1BD2A8);
  }
  return result;
}

uint64_t sub_1B8B30AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  _BYTE v21[16];
  _QWORD v22[2];

  sub_1B8B06074((uint64_t)(v1 + 6), (uint64_t)v21, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v21, (uint64_t)v22, &qword_1EF1BC3D0);
  if (!v22[1])
    goto LABEL_8;
  v3 = sub_1B8B9C1C4();
  if (v3 != 0x6C61636F6CLL || v4 != 0xE500000000000000)
  {
    v6 = v3;
    v7 = v4;
    if ((sub_1B8B9C8D8() & 1) == 0)
    {
      if (v6 == 0x65676E6168637865 && v7 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v8 = 1;
        goto LABEL_9;
      }
      if (v6 == 0x7661646C6163 && v7 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v8 = 2;
        goto LABEL_9;
      }
      if (v6 == 0x656D656C69626F6DLL && v7 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v8 = 3;
        goto LABEL_9;
      }
      if (v6 == 0x6269726373627573 && v7 == 0xEA00000000006465 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v8 = 4;
        goto LABEL_9;
      }
      if (v6 == 0x7961646874726962 && v7 == 0xE900000000000073)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = sub_1B8B9C8D8();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
          goto LABEL_8;
      }
      v8 = 5;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
LABEL_8:
  v8 = 0;
LABEL_9:
  v9 = v1[8] & 1;
  v10 = (*((_BYTE *)v1 + 65) == 2) | *((_BYTE *)v1 + 65);
  v11 = *((_BYTE *)v1 + 66) & 1;
  v12 = *v1;
  v13 = v1[1];
  v15 = v1[4];
  v14 = v1[5];
  v16 = v1[2];
  v17 = v1[3];
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 57) = 0;
  *(_BYTE *)(a1 + 58) = v10 & 1;
  *(_BYTE *)(a1 + 59) = v11;
  v18 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 112) = xmmword_1B8BA8480;
  *(_WORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B30E40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  __int128 v30[9];
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v5 = v4;
  v28 = a3;
  v29 = a4;
  v27 = a2;
  v7 = type metadata accessor for EventAttendeeModelObject(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v41 = MEMORY[0x1E0DEE9D8];
    sub_1B8B374F8(0, v11, 0);
    v12 = v41;
    v13 = a1 + 32;
    for (i = v11 - 1; ; --i)
    {
      v15 = *(_OWORD *)(v13 + 112);
      v16 = *(_OWORD *)(v13 + 80);
      v37 = *(_OWORD *)(v13 + 96);
      v38 = v15;
      v17 = *(_OWORD *)(v13 + 112);
      v39 = *(_OWORD *)(v13 + 128);
      v18 = *(_OWORD *)(v13 + 48);
      v19 = *(_OWORD *)(v13 + 16);
      v33 = *(_OWORD *)(v13 + 32);
      v34 = v18;
      v20 = *(_OWORD *)(v13 + 48);
      v21 = *(_OWORD *)(v13 + 80);
      v35 = *(_OWORD *)(v13 + 64);
      v36 = v21;
      v22 = *(_OWORD *)(v13 + 16);
      v32[0] = *(_OWORD *)v13;
      v32[1] = v22;
      v30[6] = v37;
      v30[7] = v17;
      v30[8] = *(_OWORD *)(v13 + 128);
      v30[2] = v33;
      v30[3] = v20;
      v30[4] = v35;
      v30[5] = v16;
      v40 = *(_QWORD *)(v13 + 144);
      v31 = *(_QWORD *)(v13 + 144);
      v30[0] = v32[0];
      v30[1] = v19;
      sub_1B8B3A714((uint64_t)v32);
      sub_1B8B343FC(v30, v27, v28, v29, (uint64_t)v10);
      if (v5)
        break;
      v5 = 0;
      sub_1B8B3A7BC((uint64_t)v32);
      v41 = v12;
      v24 = *(_QWORD *)(v12 + 16);
      v23 = *(_QWORD *)(v12 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1B8B374F8(v23 > 1, v24 + 1, 1);
        v12 = v41;
      }
      *(_QWORD *)(v12 + 16) = v24 + 1;
      sub_1B8AFE0FC((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v24, type metadata accessor for EventAttendeeModelObject);
      if (!i)
        return v12;
      v13 += 152;
    }
    sub_1B8B3A7BC((uint64_t)v32);
    swift_release();
  }
  return v12;
}

uint64_t sub_1B8B31018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  _BYTE *i;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  v17[0] = a1;
  v17[1] = a2;
  v6 = type metadata accessor for EventAlarmModelObject();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B8B374CC(0, v10, 0);
    v11 = v20;
    for (i = (_BYTE *)(a3 + 40); ; i += 16)
    {
      v13 = *i;
      v18 = *((_QWORD *)i - 1);
      v19 = v13;
      ((void (*)(uint64_t *))v17[0])(&v18);
      if (v4)
        break;
      v4 = 0;
      v20 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B8B374CC(v14 > 1, v15 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_1B8AFE0FC((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, (uint64_t (*)(_QWORD))type metadata accessor for EventAlarmModelObject);
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_1B8B31178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD v53[7];
  _BYTE v54[22];
  _BYTE v55[136];
  _BYTE v56[136];
  _BYTE v57[16];
  _BYTE v58[16];
  _QWORD v59[2];
  _QWORD v60[3];

  v3 = v2;
  v52 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v5);
  v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B06074(v2 + 104, (uint64_t)v58, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v58, (uint64_t)v59, &qword_1EF1BC3D0);
  if (!v59[1])
    goto LABEL_8;
  v7 = sub_1B8B9C1C4();
  v9 = v7 == 1701736302 && v8 == 0xE400000000000000;
  if (v9 || (v10 = v7, v11 = v8, (sub_1B8B9C8D8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v46 = 0;
    goto LABEL_9;
  }
  if (v10 == 1701670772 && v11 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v41 = 2;
  }
  else
  {
    if (v10 == 0x656D6D6F7266 && v11 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0)
        goto LABEL_8;
    }
    v41 = 1;
  }
  v46 = v41;
LABEL_9:
  sub_1B8B06074(v2 + 16, (uint64_t)v57, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v57, (uint64_t)v60, &qword_1EF1BC3D0);
  if (!v60[1])
  {
LABEL_14:
    v45 = 0;
    goto LABEL_15;
  }
  v13 = sub_1B8B9C1C4();
  v14 = v12;
  if (v13 == 0x6C61636F6CLL && v12 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v13 == 0x7661646C6163 && v14 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v42 = 1;
  }
  else if (v13 == 0x65676E6168637865 && v14 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v42 = 2;
  }
  else if (v13 == 0x7069726373627573 && v14 == 0xEC0000006E6F6974 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v42 = 3;
  }
  else
  {
    if (v13 == 0x7961646874726962 && v14 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
        goto LABEL_14;
    }
    v42 = 4;
  }
  v45 = v42;
LABEL_15:
  v15 = a1;
  v16 = sub_1B8B9C1C4();
  v49 = v17;
  v50 = v16;
  v18 = *(unsigned __int8 *)(v3 + 96);
  v19 = *(_QWORD *)v3;
  v20 = *(_QWORD *)(v3 + 8);
  v21 = *(_QWORD *)(v3 + 56);
  v47 = *(_QWORD *)(v3 + 48);
  v48 = v19;
  v22 = *(_QWORD *)(v3 + 64);
  v23 = *(_QWORD *)(v3 + 72);
  if (*(_QWORD *)(v15 + 16))
  {
    v24 = *(_QWORD *)(v3 + 32);
    v25 = *(_QWORD *)(v3 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = sub_1B8B37084(v24, v25);
    if ((v27 & 1) != 0)
    {
      v28 = (char *)(*(_QWORD *)(v15 + 56) + 136 * v26);
      v53[0] = *(_OWORD *)v28;
      v29 = *((_OWORD *)v28 + 4);
      v31 = *((_OWORD *)v28 + 1);
      v30 = *((_OWORD *)v28 + 2);
      v53[3] = *((_OWORD *)v28 + 3);
      v53[4] = v29;
      v53[1] = v31;
      v53[2] = v30;
      v33 = *((_OWORD *)v28 + 6);
      v32 = *((_OWORD *)v28 + 7);
      v34 = *((_OWORD *)v28 + 5);
      *(_QWORD *)&v54[14] = *(_QWORD *)(v28 + 126);
      v53[6] = v33;
      *(_OWORD *)v54 = v32;
      v53[5] = v34;
      memmove(v55, v28, 0x86uLL);
      nullsub_1(v55);
      sub_1B8B15004((uint64_t)v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B8B11044((uint64_t)v55);
    }
  }
  else
  {
    sub_1B8B11044((uint64_t)v55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_1B8B06074((uint64_t)v55, (uint64_t)v56, &qword_1EF1BCA40);
  v35 = (v18 == 2) | v18;
  sub_1B8B06074((uint64_t)v56, (uint64_t)v55, &qword_1EF1BCA40);
  v36 = *(_BYTE *)(v3 + 120);
  v37 = *(_BYTE *)(v3 + 121);
  v38 = sub_1B8B9B054();
  v39 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v51, 1, 1, v38);
  return EventCalendarModelObject.init(id:type:externalID:title:displayOrder:color:allowsContentModifications:sharingStatus:source:isSubscribed:isHolidayCalendar:isSubscribedHolidayCalendar:isSuggestedEventCalendar:allowsEvents:allowsScheduling:sharedOwnerAddress:sharedOwnerAddresses:ownerIdentityAddress:ownerIdentityEmail:ownerIdentityPhoneNumber:isDefaultCalendarForNewEvents:)(v48, v20, v45, v47, v21, v22, v23, 1, v52, v50, v49, v35 & 1, v46, (uint64_t)v55, 0, v36 & 1, 0, v37 & 1, 1,
           1,
           0,
           MEMORY[0x1E0DEE9D8],
           v39,
           0,
           0,
           0,
           0,
           0);
}

uint64_t sub_1B8B3177C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  char v122;
  unsigned __int8 v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  char v131;
  char v132;
  char v133;
  _QWORD v134[4];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  void (*v151)(_QWORD, _QWORD, _QWORD);
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE v183[176];
  _BYTE v184[176];
  _BYTE v185[176];
  _BYTE v186[176];
  _OWORD v187[10];
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _BYTE v212[168];
  _OWORD v213[10];
  uint64_t v214;
  _OWORD v215[11];
  _QWORD v216[22];
  _BYTE v217[168];
  _OWORD v218[10];
  uint64_t v219;
  _BYTE v220[24];
  _BYTE v221[112];
  _BYTE v222[16];
  _BYTE v223[16];
  _BYTE v224[16];
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _OWORD v229[3];
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  _QWORD v282[2];
  _QWORD v283[2];
  _QWORD v284[2];
  _OWORD v285[7];
  char v286[8];
  uint64_t v287;

  v3 = v2;
  v154 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v5);
  v163 = (uint64_t)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD368);
  MEMORY[0x1E0C80A78](v10);
  v172 = (uint64_t)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD370);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F70);
  v16 = MEMORY[0x1E0C80A78](v15);
  v162 = (uint64_t)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v161 = (uint64_t)&v135 - v18;
  v19 = sub_1B8B9B114();
  v158 = *(_QWORD *)(v19 - 8);
  v159 = v19;
  MEMORY[0x1E0C80A78](v19);
  v157 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD378);
  v22 = MEMORY[0x1E0C80A78](v21);
  v165 = (uint64_t)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v135 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD380);
  v27 = MEMORY[0x1E0C80A78](v26);
  v164 = (uint64_t)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v135 - v29;
  v31 = sub_1B8B9B0F0();
  v175 = *(_QWORD **)(v31 - 8);
  v176 = v31;
  v32 = MEMORY[0x1E0C80A78](v31);
  v168 = (uint64_t)&v135 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v166 = (uint64_t)&v135 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v135 - v37;
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v135 - v39;
  v41 = *(unsigned __int8 *)(v2 + 144);
  v42 = v2 + 32;
  v43 = (__int128 *)(v2 + 88);
  v174 = (char *)&v135 - v39;
  LODWORD(v145) = v41;
  v155 = a2;
  v44 = *(_OWORD *)(v42 + 16);
  v229[0] = *(_OWORD *)v42;
  v229[1] = v44;
  v229[2] = *(_OWORD *)(v42 + 32);
  v230 = *(_QWORD *)(v42 + 48);
  if ((v41 & 1) != 0)
  {
    sub_1B8B33AEC((uint64_t)v229, (uint64_t)v40);
    v46 = v43[1];
    v225 = *v43;
    v226 = v46;
    v227 = v43[2];
    v228 = *((_QWORD *)v43 + 6);
    sub_1B8B33DA8(&v225, (uint64_t)v38);
  }
  else
  {
    sub_1B8B33654((uint64_t)v229, (uint64_t)v40);
    v45 = v43[1];
    v225 = *v43;
    v226 = v45;
    v227 = v43[2];
    v228 = *((_QWORD *)v43 + 6);
    sub_1B8B33654((uint64_t)&v225, (uint64_t)v38);
  }
  sub_1B8B06074(v3 + 632, (uint64_t)v224, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v224, (uint64_t)v282, &qword_1EF1BC3D0);
  v167 = v38;
  if (!v282[1])
    goto LABEL_9;
  v48 = sub_1B8B9C1C4();
  v49 = v47;
  if (v48 == 0x6C616D726F6ELL && v47 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v137 = 0;
    goto LABEL_10;
  }
  if (v48 == 0x6C616E6F73726570 && v49 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v58 = 1;
  }
  else if (v48 == 0x65746176697270 && v49 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v58 = 2;
  }
  else
  {
    if (v48 == 0x6E656469666E6F63 && v49 == 0xEC0000006C616974)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v131 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
      if ((v131 & 1) == 0)
        goto LABEL_9;
    }
    v58 = 3;
  }
  v137 = v58;
LABEL_10:
  sub_1B8B06074(v3 + 648, (uint64_t)v223, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v223, (uint64_t)v283, &qword_1EF1BC3D0);
  if (!v283[1])
  {
LABEL_15:
    v136 = 0;
    goto LABEL_16;
  }
  v51 = sub_1B8B9C1C4();
  v52 = v50;
  if (v51 == 1701736302 && v50 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v51 == 0x656D7269666E6F63 && v52 == 0xE900000000000064 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v59 = 1;
  }
  else if (v51 == 0x76697461746E6574 && v52 == 0xE900000000000065 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v59 = 2;
  }
  else
  {
    if (v51 == 0x64656C65636E6163 && v52 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v132 = sub_1B8B9C8D8();
      swift_bridgeObjectRelease();
      if ((v132 & 1) == 0)
        goto LABEL_15;
    }
    v59 = 3;
  }
  v136 = v59;
LABEL_16:
  sub_1B8B06074(v3 + 688, (uint64_t)v222, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v222, (uint64_t)v284, &qword_1EF1BC3D0);
  v171 = v30;
  if (v284[1])
  {
    v54 = sub_1B8B9C1C4();
    v55 = v53;
    if (v54 == 0x726F707075736E75 && v53 == 0xEB00000000646574)
    {
      swift_bridgeObjectRelease();
      v135 = -1;
      v30 = v171;
      goto LABEL_41;
    }
    v56 = sub_1B8B9C8D8();
    v30 = v171;
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v57 = -1;
LABEL_22:
      v135 = v57;
      goto LABEL_41;
    }
    if ((v54 != 2037609826 || v55 != 0xE400000000000000) && (sub_1B8B9C8D8() & 1) == 0)
    {
      if (v54 == 1701147238 && v55 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v57 = 1;
        goto LABEL_22;
      }
      if (v54 == 0x76697461746E6574 && v55 == 0xE900000000000065 || (sub_1B8B9C8D8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v57 = 2;
        goto LABEL_22;
      }
      if (v54 == 0x616C696176616E75 && v55 == 0xEB00000000656C62)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v133 = sub_1B8B9C8D8();
        swift_bridgeObjectRelease();
        if ((v133 & 1) == 0)
          goto LABEL_40;
      }
      v57 = 3;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }
LABEL_40:
  v135 = 0;
LABEL_41:
  sub_1B8B06074(v3 + 264, (uint64_t)v217, &qword_1EF1BD388);
  sub_1B8B06074((uint64_t)v217, (uint64_t)v218, &qword_1EF1BD388);
  if (sub_1B8B3A3FC((uint64_t)v218) == 1)
  {
    sub_1B8B3A420(v215);
    sub_1B8B06074((uint64_t)v215, (uint64_t)v216, &qword_1EF1BD390);
    v160 = 0;
    v173 = 0;
  }
  else
  {
    v278 = v218[7];
    v279 = v218[8];
    v280 = v218[9];
    v281 = v219;
    v274 = v218[3];
    v275 = v218[4];
    v276 = v218[5];
    v277 = v218[6];
    v271 = v218[0];
    v272 = v218[1];
    v273 = v218[2];
    sub_1B8B3409C((uint64_t)&v201);
    v215[8] = v209;
    v215[9] = v210;
    v215[10] = v211;
    v215[4] = v205;
    v215[5] = v206;
    v215[6] = v207;
    v215[7] = v208;
    v215[0] = v201;
    v215[1] = v202;
    v215[2] = v203;
    v215[3] = v204;
    nullsub_1(v215);
    sub_1B8B06074((uint64_t)v217, (uint64_t)&v189, &qword_1EF1BD388);
    v267 = v196;
    v268 = v197;
    v269 = v198;
    v263 = v192;
    v264 = v193;
    v265 = v194;
    v266 = v195;
    v260 = v189;
    v261 = v190;
    v270 = v199;
    v262 = v191;
    v160 = sub_1B8B34248();
    v173 = v60;
    sub_1B8B06074((uint64_t)v215, (uint64_t)v216, &qword_1EF1BD390);
  }
  sub_1B8B06074(v3 + 432, (uint64_t)v212, &qword_1EF1BD388);
  sub_1B8B06074((uint64_t)v212, (uint64_t)v213, &qword_1EF1BD388);
  if (sub_1B8B3A3FC((uint64_t)v213) == 1)
  {
    sub_1B8B3A420(&v201);
    sub_1B8B06074((uint64_t)&v201, (uint64_t)v215, &qword_1EF1BD390);
    v156 = 0;
    v170 = 0;
  }
  else
  {
    v256 = v213[7];
    v257 = v213[8];
    v258 = v213[9];
    v252 = v213[3];
    v253 = v213[4];
    v254 = v213[5];
    v255 = v213[6];
    v249 = v213[0];
    v250 = v213[1];
    v259 = v214;
    v251 = v213[2];
    sub_1B8B3409C((uint64_t)&v189);
    v209 = v197;
    v210 = v198;
    v211 = v199;
    v205 = v193;
    v206 = v194;
    v207 = v195;
    v208 = v196;
    v201 = v189;
    v202 = v190;
    v203 = v191;
    v204 = v192;
    nullsub_1(&v201);
    sub_1B8B06074((uint64_t)v212, (uint64_t)v187, &qword_1EF1BD388);
    v245 = v187[7];
    v246 = v187[8];
    v247 = v187[9];
    v241 = v187[3];
    v242 = v187[4];
    v243 = v187[5];
    v244 = v187[6];
    v238 = v187[0];
    v239 = v187[1];
    v248 = v188;
    v240 = v187[2];
    v156 = sub_1B8B34248();
    v170 = v61;
    sub_1B8B06074((uint64_t)&v201, (uint64_t)v215, &qword_1EF1BD390);
  }
  v62 = type metadata accessor for EventOrganizerModelObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v30, 1, 1, v62);
  v63 = type metadata accessor for EventAttendeeModelObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v25, 1, 1, v63);
  v200 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v3 + 736))
  {
    v64 = swift_bridgeObjectRetain();
    v141 = sub_1B8B30E40(v64, (uint64_t)v30, (uint64_t)v25, (unint64_t *)&v200);
    v147 = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    v141 = 0;
    v147 = 0;
  }
  v65 = v174;
  if (*(_QWORD *)(v3 + 8))
  {
    v66 = *(_QWORD *)v3;
    v142 = *(_QWORD *)(v3 + 8);
    v143 = v66;
  }
  else
  {
    v67 = v157;
    sub_1B8B9B108();
    v68 = sub_1B8B9B0FC();
    v142 = v69;
    v143 = v68;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v67, v159);
    v65 = v174;
  }
  v169 = v25;
  v70 = v176;
  v71 = (void (*)(uint64_t, char *, uint64_t))v175[2];
  v71(v166, v65, v176);
  v71(v168, v167, v70);
  v150 = *(unsigned __int8 *)(v3 + 146);
  v72 = *(_QWORD *)(v3 + 16);
  v151 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v152 = v72;
  if (*(_QWORD *)(v3 + 80))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B8B9B294();
  }
  else
  {
    v73 = sub_1B8B9B2B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v161, 1, 1, v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v74 = v173;
  if (*(_QWORD *)(v3 + 136))
  {
    sub_1B8B9B294();
  }
  else
  {
    v75 = sub_1B8B9B2B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v162, 1, 1, v75);
  }
  v76 = *(unsigned __int8 *)(v3 + 145);
  sub_1B8B06074(v3 + 152, (uint64_t)v221, &qword_1EF1BD398);
  sub_1B8B06074((uint64_t)v221, (uint64_t)v285, &qword_1EF1BD398);
  if (*((_QWORD *)&v285[0] + 1) == 1)
  {
    v77 = type metadata accessor for EventVirtualConferenceModelObject(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v14, 1, 1, v77);
  }
  else
  {
    v234 = v285[3];
    v235 = v285[4];
    v236 = v285[5];
    v237 = v285[6];
    v231 = v285[0];
    v232 = v285[1];
    v233 = v285[2];
    sub_1B8B353B0((uint64_t)v14);
    v78 = type metadata accessor for EventVirtualConferenceModelObject(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v14, 0, 1, v78);
  }
  v79 = v154;
  v80 = v172;
  v153 = v14;
  if (!v170)
  {
    swift_bridgeObjectRetain();
    v156 = v160;
    v170 = v74;
  }
  v149 = v76;
  if (v74)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_1B8BA6070;
    *(_QWORD *)(v81 + 32) = v160;
    *(_QWORD *)(v81 + 40) = v74;
    v140 = v81;
  }
  else
  {
    v140 = 0;
  }
  v82 = v215;
  sub_1B8B06074((uint64_t)v215, (uint64_t)&v201, &qword_1EF1BD390);
  if (sub_1B8B3A3FC((uint64_t)&v201) == 1)
  {
    v82 = v216;
    sub_1B8B3A53C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
  }
  v83 = (uint64_t)v9;
  sub_1B8B06074((uint64_t)v82, (uint64_t)&v189, &qword_1EF1BD390);
  sub_1B8B06074((uint64_t)&v189, (uint64_t)v185, &qword_1EF1BD390);
  sub_1B8B06074((uint64_t)v216, (uint64_t)v184, &qword_1EF1BD390);
  v84 = v215;
  sub_1B8B06074((uint64_t)v215, (uint64_t)v187, &qword_1EF1BD390);
  if (sub_1B8B3A3FC((uint64_t)v187) == 1)
  {
    v84 = v216;
    sub_1B8B3A53C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
  }
  sub_1B8B06074((uint64_t)v84, (uint64_t)v186, &qword_1EF1BD390);
  sub_1B8B06074((uint64_t)v186, (uint64_t)v183, &qword_1EF1BD390);
  v85 = *(double *)(v3 + 600);
  v148 = *(unsigned __int8 *)(v3 + 608);
  if (*(_QWORD *)(v79 + 16))
  {
    v86 = *(_QWORD *)(v3 + 616);
    v87 = *(_QWORD *)(v3 + 624);
    sub_1B8B3A53C(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
    swift_bridgeObjectRetain();
    sub_1B8B3A53C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
    sub_1B8B3A53C(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
    swift_bridgeObjectRetain();
    v88 = sub_1B8B37084(v86, v87);
    if ((v89 & 1) != 0)
    {
      v90 = v88;
      v91 = *(_QWORD *)(v79 + 56);
      v92 = type metadata accessor for EventCalendarModelObject();
      v93 = *(_QWORD *)(v92 - 8);
      sub_1B8AE7B90(v91 + *(_QWORD *)(v93 + 72) * v90, v172, (uint64_t (*)(_QWORD))type metadata accessor for EventCalendarModelObject);
      v94 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56);
      v30 = v171;
      v94(v172, 0, 1, v92);
    }
    else
    {
      v98 = type metadata accessor for EventCalendarModelObject();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v172, 1, 1, v98);
    }
    v96 = swift_bridgeObjectRelease();
    v97 = *(_QWORD *)(v3 + 664);
    if (v97)
      goto LABEL_78;
LABEL_75:
    v139 = 0;
    goto LABEL_79;
  }
  v95 = type metadata accessor for EventCalendarModelObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v80, 1, 1, v95);
  sub_1B8B3A53C(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
  swift_bridgeObjectRetain();
  sub_1B8B3A53C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
  v96 = (uint64_t)sub_1B8B3A53C(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A448);
  v97 = *(_QWORD *)(v3 + 664);
  if (!v97)
    goto LABEL_75;
LABEL_78:
  MEMORY[0x1E0C80A78](v96);
  v134[2] = v174;
  swift_bridgeObjectRetain();
  v139 = sub_1B8B31018((uint64_t)sub_1B8B3A694, (uint64_t)v134, v97);
  swift_bridgeObjectRelease();
LABEL_79:
  v99 = *(_QWORD *)(v3 + 672);
  v100 = *(_QWORD *)(v3 + 680);
  v101 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v175[7];
  v154 = v83;
  v101(v83, 1, 1, v176);
  v102 = *(_QWORD *)(v3 + 712);
  v146 = v100;
  v147 = v99;
  if (v102)
  {
    v103 = *(_QWORD *)(v3 + 720);
    v104 = *(_QWORD *)(v3 + 704);
    v105 = *(_BYTE *)(v3 + 728) & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD320);
    v106 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventRecurrenceRuleModelObject(0) - 8) + 80);
    v107 = (v106 + 32) & ~v106;
    v108 = swift_allocObject();
    *(_OWORD *)(v108 + 16) = xmmword_1B8BA6070;
    v138 = v108;
    v109 = v108 + v107;
    swift_bridgeObjectRetain();
    v110 = v104;
    v30 = v171;
    sub_1B8B35C14(v110, v102, v103, v105, v109);
  }
  else
  {
    swift_bridgeObjectRetain();
    v138 = 0;
  }
  v111 = v145;
  sub_1B8ADE850((uint64_t)v30, v164, &qword_1EF1BD380);
  v112 = v200;
  sub_1B8ADE850((uint64_t)v169, v165, &qword_1EF1BD378);
  v113 = *(_BYTE *)(v3 + 760);
  v114 = *(_BYTE *)(v3 + 761);
  v115 = *(_QWORD *)(v3 + 744);
  v116 = *(_QWORD *)(v3 + 752);
  if (*(_QWORD *)(v3 + 776))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B8B9B048();
  }
  else
  {
    v117 = sub_1B8B9B054();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v163, 1, 1, v117);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v145 = v116;
  sub_1B8B06074(v3 + 784, (uint64_t)v220, &qword_1EF1BD3A0);
  sub_1B8B06074((uint64_t)v220, (uint64_t)v286, &qword_1EF1BD3A0);
  v144 = v112;
  if (v287)
  {
    v118 = v286[0] & 1;
    v119 = sub_1B8B9C1C4();
    CUIKCalendarColor.init(_:)(v119, v120, (uint64_t)&v180);
    v177 = v180;
    v178 = v181;
    v179 = v182;
    v121 = CUIKCalendarColor.displayColor.getter();
  }
  else
  {
    v118 = 0;
    v121 = 1;
  }
  v122 = v111 | v149;
  v123 = v111 & 1;
  *(_QWORD *)&v180 = v118;
  *((_QWORD *)&v180 + 1) = v121;
  if (v148)
    v85 = 0.0;
  v181 = 0;
  v182 = 0;
  v124 = v157;
  sub_1B8B9B108();
  v125 = sub_1B8B9B0FC();
  v127 = v126;
  (*(void (**)(char *, uint64_t))(v158 + 8))(v124, v159);
  EventModelObject.init(id:uniqueID:title:startDate:endDate:isAllDay:isProposedTime:startTimeZone:endTimeZone:isFloating:virtualConference:location:locationWithoutPrediction:locationsWithoutPrediction:structuredLocation:structuredLocationWithoutPrediction:preferredLocation:travelTime:travelRoutingMode:calendar:privacyLevel:status:alarms:notes:availability:recurrenceDate:recurrenceRules:organizer:attendees:attendeesNotIncludingOrganizerOrLocationsOrResources:selfAttendee:urlString:hasAttachment:conferenceURLForDisplayCached:conferenceURLForDisplay:integration:isEditable:isNew:isSuggestedEvent:)(v143, v142, v125, v127, v152, v151, v166, v168, v155, v85, v123, v150 & 1, v161, v162, v122 & 1, (uint64_t)v153, v156, v170, v160,
    v173,
    v140,
    (uint64_t)v185,
    (uint64_t)v184,
    (uint64_t)v183,
    0,
    v172,
    v137,
    v136,
    v139,
    v147,
    v146,
    v135,
    v154,
    v138,
    v164,
    v141,
    v144,
    v165,
    v115,
    v145,
    v113 & 1,
    v114 & 1,
    v163,
    (uint64_t *)&v180,
    1,
    0,
    0);
  sub_1B8B3A53C(v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A5A0);
  sub_1B8B3A53C(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A5A0);
  v128 = v176;
  v129 = (void (*)(char *, uint64_t))v175[1];
  v129(v167, v176);
  v129(v174, v128);
  swift_bridgeObjectRelease();
  sub_1B8ADE894((uint64_t)v169, &qword_1EF1BD378);
  return sub_1B8ADE894((uint64_t)v171, &qword_1EF1BD380);
}

uint64_t FakeDataReader.Dataset.sources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FakeDataReader.Dataset.sources.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FakeDataReader.Dataset.sources.modify())()
{
  return nullsub_1;
}

uint64_t FakeDataReader.Dataset.calendars.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FakeDataReader.Dataset.calendars.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*FakeDataReader.Dataset.calendars.modify())()
{
  return nullsub_1;
}

uint64_t FakeDataReader.Dataset.events.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FakeDataReader.Dataset.events.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*FakeDataReader.Dataset.events.modify())()
{
  return nullsub_1;
}

uint64_t sub_1B8B32F48()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7261646E656C6163;
  if (*v0 != 1)
    v1 = 0x73746E657665;
  if (*v0)
    return v1;
  else
    return 0x73656372756F73;
}

uint64_t sub_1B8B32FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B39624(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B32FC8()
{
  sub_1B8B39A38();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B32FF0()
{
  sub_1B8B39A38();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8B33018@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B8B3977C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B8B33044(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B3306C + 4 * byte_1B8BAA440[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1B8B3306C()
{
  return 0x656C746974;
}

uint64_t sub_1B8B33080()
{
  return 0x70756F7247707061;
}

uint64_t sub_1B8B3309C()
{
  return 1701869940;
}

uint64_t sub_1B8B330AC()
{
  return 0x6167656C65447369;
}

uint64_t sub_1B8B330CC()
{
  return 0x6261746972577369;
}

unint64_t sub_1B8B330E8()
{
  return 0xD000000000000014;
}

uint64_t sub_1B8B33104()
{
  unsigned __int8 *v0;

  return sub_1B8B33044(*v0);
}

uint64_t sub_1B8B3310C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3D9B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B33130()
{
  sub_1B8B3E04C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B33158()
{
  sub_1B8B3E04C();
  return sub_1B8B9C9EC();
}

__n128 sub_1B8B33180@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[3];
  _BYTE v7[19];

  sub_1B8B3DC84(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_DWORD *)(a2 + 63) = *(_DWORD *)&v7[15];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B8B331D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B331F8 + 4 * byte_1B8BAA447[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1B8B331F8()
{
  return 1701869940;
}

uint64_t sub_1B8B33208()
{
  return 0x4449656372756F73;
}

uint64_t sub_1B8B33220()
{
  return 0x6C616E7265747865;
}

uint64_t sub_1B8B3323C()
{
  return 0x656C746974;
}

uint64_t sub_1B8B33250()
{
  return 0x726F6C6F63;
}

unint64_t sub_1B8B33264()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B8B332DC()
{
  unsigned __int8 *v0;

  return sub_1B8B331D0(*v0);
}

uint64_t sub_1B8B332E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3E090(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8B33308(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1B8B33314()
{
  sub_1B8B3EB18();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B3333C()
{
  sub_1B8B3EB18();
  return sub_1B8B9C9EC();
}

double sub_1B8B33364@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  sub_1B8B3E488(a1, v8);
  if (!v2)
  {
    v5 = v12;
    a2[4] = v11;
    a2[5] = v5;
    a2[6] = v13[0];
    *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v13 + 10);
    v6 = v8[1];
    *a2 = v8[0];
    a2[1] = v6;
    result = *(double *)&v9;
    v7 = v10;
    a2[2] = v9;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B8B333BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  _QWORD v27[2];

  v24 = a1;
  v25 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F70);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3018);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B8B9B2B8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v23 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = sub_1B8B9B288();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B9B24C();
  CUIKOneIndexedWeekStart();
  sub_1B8B9B1BC();
  result = CalCopyTimeZone();
  if (result)
  {
    v20 = (void *)result;
    sub_1B8B9B2AC();

    sub_1B8B9B264();
    sub_1B8B9B15C();
    v21 = sub_1B8B9B198();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
    sub_1B8B9B240();
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v25, v18, v15);
    sub_1B8B06074(v24 + 40, (uint64_t)v26, &qword_1EF1BC3D0);
    result = sub_1B8B06074((uint64_t)v26, (uint64_t)v27, &qword_1EF1BC3D0);
    if (v27[1])
    {
      sub_1B8B9B294();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
      {
        return sub_1B8ADE894((uint64_t)v4, &qword_1EF1B8F70);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v4, v8);
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v23, v14, v8);
        sub_1B8B9B264();
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B33654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  id v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *);
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t (*v53)(char *, uint64_t, uint64_t);

  v45 = a2;
  v3 = sub_1B8B9AF4C();
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x1E0C80A78](v3);
  v49 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B8B9B270();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v10 = MEMORY[0x1E0C80A78](v9);
  v48 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v38 - v15;
  v17 = sub_1B8B9B0F0();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v47 = (char *)&v38 - v22;
  v23 = sub_1B8B9B288();
  v41 = *(_QWORD *)(v23 - 8);
  v42 = v23;
  MEMORY[0x1E0C80A78](v23);
  v50 = (uint64_t)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  sub_1B8B333BC(a1, v50);
  v25 = *(void (**)(char *))(v6 + 104);
  v46 = *MEMORY[0x1E0CB1130];
  v25(v8);
  v26 = objc_msgSend((id)objc_opt_self(), sel_CalSimulatedDateForNow);
  if (!v26)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v17);
    goto LABEL_7;
  }
  v27 = v26;
  v40 = v25;
  sub_1B8B9B0D8();

  v52 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v52(v14, v21, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  result = v53(v14, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v29 = v50;
  sub_1B8B9B210();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v39 = *(void (**)(char *, uint64_t))(v18 + 8);
  v39(v14, v17);
  result = v53(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v30 = v47;
  v52(v47, v16, v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94A8);
  v31 = *(_QWORD *)(v6 + 72);
  v32 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1B8BA7860;
  v34 = v33 + v32;
  v35 = v40;
  ((void (*)(unint64_t, _QWORD, uint64_t))v40)(v34, *MEMORY[0x1E0CB1158], v5);
  ((void (*)(unint64_t, _QWORD, uint64_t))v35)(v34 + v31, *MEMORY[0x1E0CB1160], v5);
  ((void (*)(unint64_t, _QWORD, uint64_t))v35)(v34 + 2 * v31, v46, v5);
  sub_1B8B38EA0(v33);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v36 = v49;
  sub_1B8B9B1C8();
  swift_bridgeObjectRelease();
  sub_1B8B9AEF8();
  sub_1B8B9AF34();
  v37 = v48;
  sub_1B8B9B204();
  result = v53(v37, 1, v17);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v44);
    v39(v30, v17);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v29, v42);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v52)(v45, v37, v17);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1B8B33AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a2;
  v3 = sub_1B8B9B270();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v34 = (char *)&v31 - v11;
  v12 = sub_1B8B9B0F0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v31 - v17;
  v19 = sub_1B8B9B288();
  v31 = *(_QWORD *)(v19 - 8);
  v32 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  sub_1B8B333BC(a1, (uint64_t)v21);
  v22 = *MEMORY[0x1E0CB1130];
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v36 = v3;
  v23(v6, v22, v3);
  v24 = objc_msgSend((id)objc_opt_self(), sel_CalSimulatedDateForNow);
  if (!v24)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v10, 1, 1, v12);
    goto LABEL_6;
  }
  v25 = v24;
  sub_1B8B9B0D8();

  v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v26(v10, v16, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  result = v27(v10, 1, v12);
  if ((_DWORD)result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v29 = v34;
  sub_1B8B9B210();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v36);
  v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v10, v12);
  result = v27(v29, 1, v12);
  if ((_DWORD)result != 1)
  {
    v26(v18, v29, v12);
    sub_1B8B9B1A4();
    v30(v18, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B8B33DA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a2;
  v3 = sub_1B8B9B270();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v30 - v11;
  v13 = sub_1B8B9B0F0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v33 = (char *)&v30 - v18;
  v19 = sub_1B8B9B288();
  v31 = *(_QWORD *)(v19 - 8);
  v32 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B333BC((uint64_t)a1, (uint64_t)v21);
  v22 = *MEMORY[0x1E0CB1130];
  v35 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 104))(v6, v22, v3);
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  v30 = v3;
  v23 = objc_msgSend((id)objc_opt_self(), sel_CalSimulatedDateForNow);
  if (!v23)
  {
LABEL_7:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, 1, 1, v13);
    goto LABEL_8;
  }
  v24 = v23;
  sub_1B8B9B0D8();

  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v25(v10, v17, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  result = v26(v10, 1, v13);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1B8B9B210();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v30);
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v10, v13);
  result = v26(v12, 1, v13);
  if ((_DWORD)result != 1)
  {
    v29 = v33;
    v25(v33, v12, v13);
    sub_1B8B9B1A4();
    sub_1B8B9B0E4();
    v28(v17, v13);
    v28(v29, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1B8B3409C@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  double *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[5];
  uint64_t v24;
  _BYTE v25[96];
  _BYTE v26[24];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];
  char v34;
  _OWORD v35[6];

  v2 = v1;
  v5 = *(_QWORD *)v1;
  v4 = *((_QWORD *)v1 + 1);
  sub_1B8B06074((uint64_t)(v1 + 4), (uint64_t)v26, &qword_1EF1BD3B8);
  sub_1B8B06074((uint64_t)v26, (uint64_t)v33, &qword_1EF1BD3B8);
  if ((v34 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
  }
  else
  {
    v7 = *(double *)v33;
    v8 = *(double *)&v33[1];
    v9 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(v9, sel_initWithLatitude_longitude_, v7, v8);
  }
  v10 = v2[7];
  v11 = *((unsigned __int8 *)v2 + 64);
  v12 = *((_BYTE *)v2 + 65);
  sub_1B8B06074((uint64_t)(v2 + 9), (uint64_t)v25, &qword_1EF1BD3C0);
  sub_1B8B06074((uint64_t)v25, (uint64_t)v35, &qword_1EF1BD3C0);
  v13 = *((_QWORD *)&v35[0] + 1);
  if (*((_QWORD *)&v35[0] + 1))
  {
    v29 = v35[2];
    v30 = v35[3];
    v31 = v35[4];
    v32 = v35[5];
    v27 = v35[0];
    v28 = v35[1];
    sub_1B8B35F54((uint64_t)v23);
    v15 = v23[0];
    v14 = v23[1];
    v16 = v23[2];
    v17 = v23[3];
    v18 = v23[4];
    v13 = v24;
  }
  else
  {
    v14 = xmmword_1B8BAA430;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v19 = 50.0;
  v21 = *((_QWORD *)v2 + 2);
  v20 = *((_QWORD *)v2 + 3);
  if (!v11)
    v19 = v10;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(double *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0xF000000000000000;
  *(_BYTE *)(a1 + 80) = v12 & 1;
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v13;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B34248()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD3A8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B8BA4AB0;
  v3 = *v0;
  v2 = v0[1];
  *(_QWORD *)(inited + 32) = *v0;
  *(_QWORD *)(inited + 40) = v2;
  v5 = v0[2];
  v4 = v0[3];
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  if (!v2)
  {
    swift_bridgeObjectRetain();
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!v4)
      goto LABEL_12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v6 = sub_1B8B860E4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_1B8B860E4((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[2 * v8];
  v9[4] = v3;
  v9[5] = v2;
  if (v4)
  {
LABEL_7:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B8B860E4(0, v6[2] + 1, 1, v6);
    v11 = v6[2];
    v10 = v6[3];
    if (v11 >= v10 >> 1)
      v6 = sub_1B8B860E4((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
    v6[2] = v11 + 1;
    v12 = &v6[2 * v11];
    v12[4] = v5;
    v12[5] = v4;
  }
LABEL_12:
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCA78);
  sub_1B8B3A6C8();
  v13 = sub_1B8B9C0E0();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1B8B343FC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v38 = a4;
  v40 = a2;
  v8 = type metadata accessor for EventAttendeeModelObject(0);
  v39 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v37 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v37 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v37 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD380);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[7];
  v47 = a1[6];
  v48 = v19;
  v49 = a1[8];
  v50 = *((_QWORD *)a1 + 18);
  v20 = a1[3];
  v43 = a1[2];
  v44 = v20;
  v21 = a1[5];
  v45 = a1[4];
  v46 = v21;
  v22 = a1[1];
  v41 = *a1;
  v42 = v22;
  sub_1B8B347C4(a5);
  v23 = v45;
  v24 = BYTE1(v45);
  if (BYTE1(v45) == 2)
  {
    if ((v45 & 1) != 0)
    {
      sub_1B8B3506C((uint64_t)v18);
      v25 = type metadata accessor for EventOrganizerModelObject(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v18, 0, 1, v25);
      sub_1B8B3A864((uint64_t)v18, v40, &qword_1EF1BD380);
LABEL_8:
      sub_1B8AE7B90(a5, (uint64_t)v15, type metadata accessor for EventAttendeeModelObject);
LABEL_17:
      sub_1B8AE7BD4((uint64_t)v15, type metadata accessor for EventAttendeeModelObject);
      sub_1B8AE7B90(a5, (uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
      return sub_1B8AE7BD4((uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
    }
    goto LABEL_6;
  }
  if ((v45 & 1) != 0)
  {
    sub_1B8B3506C((uint64_t)v18);
    v26 = type metadata accessor for EventOrganizerModelObject(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v18, 0, 1, v26);
    sub_1B8B3A864((uint64_t)v18, v40, &qword_1EF1BD380);
    if ((v24 & 1) == 0)
      goto LABEL_8;
  }
  else if ((BYTE1(v45) & 1) == 0)
  {
LABEL_6:
    sub_1B8AE7B90(a5, (uint64_t)v15, type metadata accessor for EventAttendeeModelObject);
    goto LABEL_10;
  }
  sub_1B8ADE894(a3, &qword_1EF1BD378);
  sub_1B8AE7B90(a5, a3, type metadata accessor for EventAttendeeModelObject);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(a3, 0, 1, v8);
  sub_1B8AE7B90(a5, (uint64_t)v15, type metadata accessor for EventAttendeeModelObject);
  if ((v23 & 1) != 0)
    goto LABEL_17;
LABEL_10:
  v27 = *(_QWORD *)&v15[*(int *)(v8 + 52)];
  sub_1B8AE7BD4((uint64_t)v15, type metadata accessor for EventAttendeeModelObject);
  sub_1B8AE7B90(a5, (uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
  if (v27 == 2)
    return sub_1B8AE7BD4((uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
  v28 = *(_QWORD *)&v13[*(int *)(v8 + 52)];
  result = sub_1B8AE7BD4((uint64_t)v13, type metadata accessor for EventAttendeeModelObject);
  if (v28 != 3)
  {
    v30 = a5;
    v31 = v37;
    sub_1B8AE7B90(v30, v37, type metadata accessor for EventAttendeeModelObject);
    v32 = v38;
    v33 = *v38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v32 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = sub_1B8B86540(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
      *v32 = v33;
    }
    v36 = *(_QWORD *)(v33 + 16);
    v35 = *(_QWORD *)(v33 + 24);
    if (v36 >= v35 >> 1)
    {
      v33 = sub_1B8B86540(v35 > 1, v36 + 1, 1, v33);
      *v32 = v33;
    }
    *(_QWORD *)(v33 + 16) = v36 + 1;
    return sub_1B8AFE0FC(v31, v33+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v36, type metadata accessor for EventAttendeeModelObject);
  }
  return result;
}

uint64_t sub_1B8B347C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  _BYTE v38[16];
  _BYTE v39[16];
  _BYTE v40[16];
  _BYTE v41[16];

  v2 = v1;
  v4 = sub_1B8B9B114();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + 80);
  if (!v11)
    goto LABEL_7;
  v12 = *(_QWORD *)(v2 + 72);
  v13 = v12 == 0x6E776F6E6B6E75 && v11 == 0xE700000000000000;
  if (v13 || (sub_1B8B9C8D8() & 1) != 0)
    goto LABEL_7;
  if (v12 == 0x676E69646E6570 && v11 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 1;
  }
  else if (v12 == 0x6465747065636361 && v11 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 2;
  }
  else if (v12 == 0x64656E696C636564 && v11 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 3;
  }
  else if (v12 == 0x76697461746E6574 && v11 == 0xE900000000000065 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 4;
  }
  else if (v12 == 0x65746167656C6564 && v11 == 0xE900000000000064 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 5;
  }
  else if (v12 == 0x6574656C706D6F63 && v11 == 0xE900000000000064 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v33 = 6;
  }
  else
  {
    if ((v12 != 0x7365636F72506E69 || v11 != 0xE900000000000073) && (sub_1B8B9C8D8() & 1) == 0)
    {
LABEL_7:
      v33 = 0;
      goto LABEL_8;
    }
    v33 = 7;
  }
LABEL_8:
  v14 = *(_QWORD *)(v2 + 96);
  if (!v14)
    goto LABEL_21;
  v15 = *(_QWORD *)(v2 + 88);
  if ((v15 != 0x6E776F6E6B6E75 || v14 != 0xE700000000000000) && (sub_1B8B9C8D8() & 1) == 0)
  {
    if (v15 == 0x6465726975716572 && v14 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
      goto LABEL_21;
    if (v15 == 0x6C616E6F6974706FLL && v14 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v17 = 2;
      goto LABEL_22;
    }
    if (v15 == 0x7269616863 && v14 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v17 = 3;
      goto LABEL_22;
    }
    if (v15 == 0x69747261506E6F6ELL && v14 == 0xEE00746E61706963 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v17 = 4;
LABEL_22:
      v35 = v17;
      v16 = *(_QWORD *)(v2 + 112);
      if (!v16)
        goto LABEL_30;
      goto LABEL_23;
    }
LABEL_21:
    v17 = 1;
    goto LABEL_22;
  }
  v35 = 0;
  v16 = *(_QWORD *)(v2 + 112);
  if (!v16)
    goto LABEL_30;
LABEL_23:
  v18 = *(_QWORD *)(v2 + 104);
  if (v18 == 0x6E776F6E6B6E75 && v16 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v34 = 0;
    goto LABEL_32;
  }
  if ((v18 != 0x6E6F73726570 || v16 != 0xE600000000000000) && (sub_1B8B9C8D8() & 1) == 0)
  {
    if (v18 == 1836019570 && v16 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v19 = 2;
      goto LABEL_31;
    }
    if (v18 == 0x656372756F736572 && v16 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v19 = 3;
      goto LABEL_31;
    }
    if (v18 == 0x70756F7267 && v16 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v19 = 4;
      goto LABEL_31;
    }
  }
LABEL_30:
  v19 = 1;
LABEL_31:
  v34 = v19;
LABEL_32:
  sub_1B8B06074(v2, (uint64_t)v41, &qword_1EF1BC3D0);
  sub_1B8B06074(v2 + 16, (uint64_t)v40, &qword_1EF1BC3D0);
  sub_1B8B06074(v2 + 32, (uint64_t)v39, &qword_1EF1BC3D0);
  v20 = *(_QWORD *)(v2 + 56);
  v36 = v10;
  if (v20)
  {
    sub_1B8B18418((uint64_t)v41);
    sub_1B8B18418((uint64_t)v40);
    sub_1B8B18418((uint64_t)v39);
    sub_1B8B9B048();
  }
  else
  {
    v21 = sub_1B8B9B054();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
    sub_1B8B18418((uint64_t)v41);
    sub_1B8B18418((uint64_t)v40);
    sub_1B8B18418((uint64_t)v39);
  }
  v37 = *(_BYTE *)(v2 + 65) & 1;
  sub_1B8B06074(v2 + 120, (uint64_t)v38, &qword_1EF1BC3D0);
  sub_1B8B18418((uint64_t)v38);
  sub_1B8B9B108();
  v22 = sub_1B8B9B0FC();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v25 = (int *)type metadata accessor for EventAttendeeModelObject(0);
  v26 = a1 + v25[7];
  v27 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = (_QWORD *)(a1 + v25[10]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_QWORD *)(a1 + v25[14]);
  *v29 = 0;
  v29[1] = 0;
  sub_1B8B06074((uint64_t)v41, a1, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v40, a1 + 16, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v39, a1 + 32, &qword_1EF1BC3D0);
  sub_1B8B3A864((uint64_t)v36, v26, &qword_1ED1B3020);
  v30 = (uint64_t *)(a1 + v25[8]);
  *v30 = v22;
  v30[1] = v24;
  *(_BYTE *)(a1 + v25[9]) = v37;
  swift_bridgeObjectRelease();
  *v28 = 0;
  v28[1] = 0;
  *(_QWORD *)(a1 + v25[11]) = v33;
  *(_QWORD *)(a1 + v25[12]) = v35;
  *(_QWORD *)(a1 + v25[13]) = v34;
  return sub_1B8B3A864((uint64_t)v38, (uint64_t)v29, &qword_1EF1BC3D0);
}

uint64_t sub_1B8B3506C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];

  v3 = sub_1B8B9B114();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 144);
  if (!v10)
    goto LABEL_7;
  v11 = *(_QWORD *)(v1 + 136);
  v12 = v11 == 1701736302 && v10 == 0xE400000000000000;
  if (v12 || (sub_1B8B9C8D8() & 1) != 0)
    goto LABEL_7;
  if (v11 == 0x746E65696C63 && v10 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    if ((v11 != 0x726576726573 || v10 != 0xE600000000000000) && (sub_1B8B9C8D8() & 1) == 0)
    {
LABEL_7:
      v23 = 0;
      goto LABEL_8;
    }
    v23 = 2;
  }
LABEL_8:
  sub_1B8B06074(v1, (uint64_t)v27, &qword_1EF1BC3D0);
  sub_1B8B06074(v1 + 16, (uint64_t)v26, &qword_1EF1BC3D0);
  sub_1B8B06074(v1 + 32, (uint64_t)v25, &qword_1EF1BC3D0);
  if (*(_QWORD *)(v1 + 56))
  {
    sub_1B8B18418((uint64_t)v27);
    sub_1B8B18418((uint64_t)v26);
    sub_1B8B18418((uint64_t)v25);
    sub_1B8B9B048();
  }
  else
  {
    v13 = sub_1B8B9B054();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    sub_1B8B18418((uint64_t)v27);
    sub_1B8B18418((uint64_t)v26);
    sub_1B8B18418((uint64_t)v25);
  }
  v24 = *(_BYTE *)(v1 + 65) & 1;
  sub_1B8B9B108();
  v14 = sub_1B8B9B0FC();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v17 = (int *)type metadata accessor for EventOrganizerModelObject(0);
  v18 = a1 + v17[7];
  v19 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = (_QWORD *)(a1 + v17[10]);
  *v20 = 0;
  v20[1] = 0;
  sub_1B8B06074((uint64_t)v27, a1, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v26, a1 + 16, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v25, a1 + 32, &qword_1EF1BC3D0);
  sub_1B8B3A864((uint64_t)v9, v18, &qword_1ED1B3020);
  v21 = (uint64_t *)(a1 + v17[8]);
  *v21 = v14;
  v21[1] = v16;
  *(_BYTE *)(a1 + v17[9]) = v24;
  result = swift_bridgeObjectRelease();
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)(a1 + v17[11]) = v23;
  return result;
}

uint64_t sub_1B8B353B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  _QWORD v57[2];
  char v58[8];
  _BYTE v59[16];
  _BYTE v60[16];
  _QWORD v61[2];
  uint64_t v62;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B3020);
  v5 = MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v50 = (uint64_t)&v47 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for EventVirtualConferenceJoinMethodModelObject(0);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v53 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v47 - v14;
  sub_1B8B06074(v1 + 64, (uint64_t)v60, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v60, (uint64_t)v61, &qword_1EF1BC3D0);
  v51 = v1;
  if (v61[1])
  {
    v17 = sub_1B8B9C1C4();
    v18 = v16;
    if (v17 == 0x656C707061 && v16 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48 = 0;
      v2 = v51;
      goto LABEL_12;
    }
    v2 = v51;
    if (v17 == 0x656C676F6F67 && v18 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      v48 = 1;
      goto LABEL_12;
    }
    v19 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      goto LABEL_10;
  }
  v48 = 0;
LABEL_12:
  sub_1B8B06074(v2, (uint64_t)v59, &qword_1EF1BC3D0);
  sub_1B8B06074(v2 + 16, (uint64_t)v58, &qword_1EF1BD3C8);
  sub_1B8B06074((uint64_t)v58, (uint64_t)&v62, &qword_1EF1BD3C8);
  v20 = v62;
  if (v62)
  {
    v47 = a1;
    v21 = *(_QWORD *)(v62 + 16);
    if (v21)
    {
      sub_1B8B18418((uint64_t)v59);
      sub_1B8B1CD9C((uint64_t)v58);
      v57[0] = MEMORY[0x1E0DEE9D8];
      sub_1B8B374A0(0, v21, 0);
      v22 = (_BYTE *)(v20 + 64);
      v52 = v15;
      v23 = v55;
      v24 = v53;
      do
      {
        v26 = *((_QWORD *)v22 - 4);
        v25 = *((_QWORD *)v22 - 3);
        v27 = *v22;
        if (*((_QWORD *)v22 - 1))
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_1B8B9B048();
        }
        else
        {
          v28 = sub_1B8B9B054();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
          swift_bridgeObjectRetain_n();
        }
        v29 = (uint64_t)v24 + *(int *)(v23 + 20);
        v30 = sub_1B8B9B054();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
        *v24 = v26;
        v24[1] = v25;
        sub_1B8ADE894(v29, &qword_1ED1B3020);
        sub_1B8B06074((uint64_t)v10, v29, &qword_1ED1B3020);
        *((_BYTE *)v24 + *(int *)(v23 + 24)) = v27 & 1;
        v31 = (uint64_t)v52;
        sub_1B8AFE0FC((uint64_t)v24, (uint64_t)v52, type metadata accessor for EventVirtualConferenceJoinMethodModelObject);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = v57[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B8B374A0(0, *(_QWORD *)(v32 + 16) + 1, 1);
          v32 = v57[0];
        }
        v34 = *(_QWORD *)(v32 + 16);
        v33 = *(_QWORD *)(v32 + 24);
        if (v34 >= v33 >> 1)
        {
          sub_1B8B374A0(v33 > 1, v34 + 1, 1);
          v32 = v57[0];
        }
        v22 += 40;
        *(_QWORD *)(v32 + 16) = v34 + 1;
        sub_1B8AFE0FC(v31, v32+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v34, type metadata accessor for EventVirtualConferenceJoinMethodModelObject);
        --v21;
      }
      while (v21);
      sub_1B8B2620C((uint64_t)v58);
      a1 = v47;
      v2 = v51;
    }
    else
    {
      sub_1B8B18418((uint64_t)v59);
      v32 = MEMORY[0x1E0DEE9D8];
      a1 = v47;
    }
  }
  else
  {
    sub_1B8B18418((uint64_t)v59);
    v32 = 0;
  }
  v35 = *(unsigned __int8 *)(v2 + 56);
  sub_1B8B06074(v2 + 24, (uint64_t)v57, &qword_1EF1BC3D0);
  sub_1B8B06074(v2 + 40, (uint64_t)v56, &qword_1EF1BC3D0);
  v36 = (uint64_t)v49;
  if (!*(_QWORD *)(v2 + 88))
  {
    v38 = sub_1B8B9B054();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v50, 1, 1, v38);
    sub_1B8B18418((uint64_t)v57);
    sub_1B8B18418((uint64_t)v56);
    if (*(_QWORD *)(v2 + 104))
      goto LABEL_28;
LABEL_30:
    v39 = sub_1B8B9B054();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v36, 1, 1, v39);
    goto LABEL_31;
  }
  sub_1B8B18418((uint64_t)v57);
  sub_1B8B18418((uint64_t)v56);
  v37 = v51;
  sub_1B8B9B048();
  if (!*(_QWORD *)(v37 + 104))
    goto LABEL_30;
LABEL_28:
  sub_1B8B9B048();
LABEL_31:
  v40 = (v35 == 2) | v35;
  v41 = type metadata accessor for EventVirtualConferenceModelObject(0);
  v42 = a1 + *(int *)(v41 + 40);
  v43 = sub_1B8B9B054();
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v44(v42, 1, 1, v43);
  v45 = a1 + *(int *)(v41 + 44);
  v44(v45, 1, 1, v43);
  sub_1B8B06074((uint64_t)v59, a1, &qword_1EF1BC3D0);
  *(_QWORD *)(a1 + 16) = v32;
  sub_1B8B06074((uint64_t)v57, a1 + 24, &qword_1EF1BC3D0);
  sub_1B8B06074((uint64_t)v56, a1 + 40, &qword_1EF1BC3D0);
  *(_BYTE *)(a1 + 56) = v40 & 1;
  *(_QWORD *)(a1 + 64) = v48;
  sub_1B8B3A864(v50, v42, &qword_1ED1B3020);
  return sub_1B8B3A864(v36, v45, &qword_1ED1B3020);
}

uint64_t sub_1B8B359EC@<X0>(char a1@<W1>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v5 = type metadata accessor for EventAlarmModelObject();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B8B9B114();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED1B2D18);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    sub_1B8B9B0E4();
    v21 = sub_1B8B9B0F0();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(v14, 0, 1, v21);
    sub_1B8B9B108();
    v17 = sub_1B8B9B0FC();
    v19 = v23;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v20 = (uint64_t)&v7[*(int *)(v5 + 24)];
    v22((char *)v20, 1, 1, v21);
    a3 = 0.0;
  }
  else
  {
    v15 = sub_1B8B9B0F0();
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    sub_1B8B9B108();
    v17 = sub_1B8B9B0FC();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v20 = (uint64_t)&v7[*(int *)(v5 + 24)];
    v16((char *)v20, 1, 1, v15);
  }
  *(_QWORD *)v7 = v17;
  *((_QWORD *)v7 + 1) = v19;
  *((double *)v7 + 2) = a3;
  sub_1B8B3A864((uint64_t)v14, v20, &qword_1ED1B2D18);
  v7[*(int *)(v5 + 28)] = 0;
  return sub_1B8AFE0FC((uint64_t)v7, v26, (uint64_t (*)(_QWORD))type metadata accessor for EventAlarmModelObject);
}

uint64_t sub_1B8B35C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD3D0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x796C696164 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v13 = 0;
  }
  else if (a1 == 0x796C6B656577 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v13 = 1;
  }
  else if (a1 == 0x796C68746E6F6DLL && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v13 = 2;
  }
  else if (a1 == 0x796C72616579 && a2 == 0xE600000000000000)
  {
    v13 = 3;
  }
  else if ((sub_1B8B9C8D8() & 1) != 0)
  {
    v13 = 3;
  }
  else
  {
    v13 = 0;
  }
  v14 = type metadata accessor for EventRecurrenceEndModelObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  if ((a4 & 1) != 0)
    v15 = 1;
  else
    v15 = a3;
  return EventRecurrenceRuleModelObject.init(recurrenceEnd:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:daysOfTheYear:weeksOfTheYear:monthsOfTheYear:setPositions:)((uint64_t)v12, v13, v15, 0, 1, 0, 0, 0, a5, 0, 0, 0);
}

uint64_t sub_1B8B35E30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B35E58 + 4 * byte_1B8BAA451[*v0]))(7954788, 0xE300000000000000);
}

uint64_t sub_1B8B35E58()
{
  return 1920298856;
}

uint64_t sub_1B8B35E68()
{
  return 0x6574756E696DLL;
}

uint64_t sub_1B8B35E7C()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_1B8B35E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3EB5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B35EB8()
{
  sub_1B8B457C4();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B35EE0()
{
  sub_1B8B457C4();
  return sub_1B8B9C9EC();
}

double sub_1B8B35F08@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B8B3ECEC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B8B35F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  BOOL v12;
  char v13;

  v3 = *v1;
  v4 = v1[1];
  v5 = *v1 == 0x6E776F6E6B6E75 && v4 == 0xE700000000000000;
  if (v5 || (sub_1B8B9C8D8() & 1) != 0)
  {
    v6 = -1;
  }
  else
  {
    v12 = v3 == 1701670760 && v4 == 0xE400000000000000;
    if (v12 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v6 = 0;
    }
    else if (v3 == 1802661751 && v4 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v6 = 1;
    }
    else if (v3 == 0x6C6F6F686373 && v4 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
    {
      v6 = 2;
    }
    else if (v3 == 7174503 && v4 == 0xE300000000000000)
    {
      v6 = 3;
    }
    else
    {
      v13 = sub_1B8B9C8D8();
      v6 = 3;
      if ((v13 & 1) == 0)
        v6 = -1;
    }
  }
  v7 = v1[2];
  v8 = v1[11];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v9 = *(_OWORD *)(v1 + 5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 3);
  *(_OWORD *)(a1 + 32) = v9;
  v10 = *(_OWORD *)(v1 + 9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 7);
  *(_OWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B8B36140()
{
  _BYTE *v0;

  if (*v0)
    return 0x64757469676E6F6CLL;
  else
    return 0x656475746974616CLL;
}

uint64_t sub_1B8B36180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3EEC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B361A4()
{
  sub_1B8B43DE8();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B361CC()
{
  sub_1B8B43DE8();
  return sub_1B8B9C9EC();
}

void sub_1B8B361F4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_1B8B3EFBC(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1B8B3621C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B36248 + 4 * byte_1B8BAA455[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B8B36248()
{
  return 0x614C6D6F74737563;
}

uint64_t sub_1B8B36268()
{
  return 0x4E6D65744970616DLL;
}

unint64_t sub_1B8B36288()
{
  return 0xD000000000000012;
}

unint64_t sub_1B8B362A4()
{
  return 0xD000000000000013;
}

uint64_t sub_1B8B362C4()
{
  return 0x4C73736572646461;
}

uint64_t sub_1B8B362E8()
{
  unsigned __int8 *v0;

  return sub_1B8B3621C(*v0);
}

uint64_t sub_1B8B362F0()
{
  sub_1B8B43DA4();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36318()
{
  sub_1B8B43DA4();
  return sub_1B8B9C9EC();
}

double sub_1B8B36340@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1B8B3F114(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1B8B36388()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B363B4 + 4 * byte_1B8BAA45B[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1B8B363B4()
{
  return 0x73736572646461;
}

uint64_t sub_1B8B363CC()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_1B8B363EC()
{
  return 0x737569646172;
}

uint64_t sub_1B8B36400()
{
  return 0x636572706D497369;
}

uint64_t sub_1B8B36420()
{
  return 0x6574636964657270;
}

uint64_t sub_1B8B36440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3F52C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B36464()
{
  sub_1B8B43F5C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B3648C()
{
  sub_1B8B43F5C();
  return sub_1B8B9C9EC();
}

__n128 sub_1B8B364B4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[10];
  uint64_t v10;

  sub_1B8B3F7E4(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_QWORD *)(a2 + 160) = v10;
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B8B36528()
{
  _BYTE *v0;

  if (*v0)
    return 0x756C6F7362417369;
  else
    return 0x74657366666FLL;
}

uint64_t sub_1B8B36564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3FC34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B36588()
{
  sub_1B8B45808();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B365B0()
{
  sub_1B8B45808();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8B365D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B8B3FD28(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_1B8B36604(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B36634 + 4 * byte_1B8BAA461[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1B8B36634()
{
  return 0x6874654D6E696F6ALL;
}

uint64_t sub_1B8B36654()
{
  return 0x736C6961746564;
}

unint64_t sub_1B8B3666C()
{
  return 0xD000000000000017;
}

uint64_t sub_1B8B366F0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7107189;
  if (*v0 != 1)
    v1 = 0x6364616F72427369;
  if (*v0)
    return v1;
  else
    return 0x656C746974;
}

uint64_t sub_1B8B36748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B3FE7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B3676C()
{
  sub_1B8B43D60();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36794()
{
  sub_1B8B43D60();
  return sub_1B8B9C9EC();
}

double sub_1B8B367BC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B8B3FFD0(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B8B36800()
{
  unsigned __int8 *v0;

  return sub_1B8B36604(*v0);
}

uint64_t sub_1B8B36808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B40194(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B3682C()
{
  sub_1B8B43E70();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36854()
{
  sub_1B8B43E70();
  return sub_1B8B9C9EC();
}

__n128 sub_1B8B3687C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_1B8B404D4(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B8B368CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B368F8 + 4 * byte_1B8BAA469[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B8B368F8()
{
  return 0x6C69616D65;
}

uint64_t sub_1B8B3690C()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_1B8B3692C()
{
  return 7107189;
}

uint64_t sub_1B8B3693C()
{
  return 0x696E6167724F7369;
}

uint64_t sub_1B8B36960()
{
  return 0x6E65727275437369;
}

uint64_t sub_1B8B36984()
{
  return 0x737574617473;
}

uint64_t sub_1B8B36998()
{
  return 1701605234;
}

uint64_t sub_1B8B369A4()
{
  return 0x746E656D6D6F63;
}

uint64_t sub_1B8B369BC()
{
  return 0x656C756465686373;
}

uint64_t sub_1B8B369E0()
{
  return 1701869940;
}

uint64_t sub_1B8B369EC()
{
  unsigned __int8 *v0;

  return sub_1B8B368CC(*v0);
}

uint64_t sub_1B8B369F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B40A34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B36A18()
{
  sub_1B8B45890();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36A40()
{
  sub_1B8B45890();
  return sub_1B8B9C9EC();
}

double sub_1B8B36A68@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  sub_1B8B40EBC(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_QWORD *)(a2 + 144) = v10;
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_1B8B36AD8()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F6C6F63;
  else
    return 0x656C706D6F437369;
}

uint64_t sub_1B8B36B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B4178C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B36B3C()
{
  sub_1B8B43E2C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36B64()
{
  sub_1B8B43E2C();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8B36B8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B8B4188C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B8B36BB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B36BE0 + 4 * byte_1B8BAA474[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1B8B36BE0()
{
  return 0x656C746974;
}

uint64_t sub_1B8B36BF4()
{
  return 0x7472617473;
}

uint64_t sub_1B8B36C08()
{
  return 6581861;
}

uint64_t sub_1B8B36C18()
{
  return 0x7961446C6C417369;
}

uint64_t sub_1B8B36C30()
{
  return 0x6974616F6C467369;
}

uint64_t sub_1B8B36C50()
{
  return 0x736F706F72507369;
}

unint64_t sub_1B8B36C6C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B8B36CAC()
{
  return 0x69546C6576617274;
}

uint64_t sub_1B8B36CD0()
{
  return 0x7261646E656C6163;
}

uint64_t sub_1B8B36CEC()
{
  return 0x4C79636176697270;
}

uint64_t sub_1B8B36D0C()
{
  return 0x737574617473;
}

uint64_t sub_1B8B36D20()
{
  return 0x736D72616C61;
}

uint64_t sub_1B8B36D34()
{
  return 0x7365746F6ELL;
}

uint64_t sub_1B8B36D48()
{
  return 0x6962616C69617661;
}

uint64_t sub_1B8B36D68()
{
  return 0x6E65727275636572;
}

uint64_t sub_1B8B36D8C()
{
  return 0x6565646E65747461;
}

uint64_t sub_1B8B36DAC()
{
  return 0x6E697274536C7275;
}

uint64_t sub_1B8B36DC8()
{
  return 0x6361747441736168;
}

unint64_t sub_1B8B36DEC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B8B36E24()
{
  return 0x7461726765746E69;
}

uint64_t sub_1B8B36E44()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61767265746E69;
  else
    return 0x636E657571657266;
}

uint64_t sub_1B8B36E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B419E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B36EA8()
{
  sub_1B8B4584C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36ED0()
{
  sub_1B8B4584C();
  return sub_1B8B9C9EC();
}

uint64_t sub_1B8B36EF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1B8B41ADC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1B8B36F2C()
{
  unsigned __int8 *v0;

  return sub_1B8B36BB8(*v0);
}

uint64_t sub_1B8B36F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B41C78(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B8B36F58(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_1B8B36F64()
{
  sub_1B8B43ADC();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B36F8C()
{
  sub_1B8B43ADC();
  return sub_1B8B9C9EC();
}

void *sub_1B8B36FB4@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[808];

  result = sub_1B8B42630(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x328uLL);
  return result;
}

unint64_t sub_1B8B37004(uint64_t a1)
{
  uint64_t v2;

  sub_1B8B9C17C();
  sub_1B8B9C968();
  sub_1B8B9C1E8();
  v2 = sub_1B8B9C998();
  swift_bridgeObjectRelease();
  return sub_1B8B370E8(a1, v2);
}

unint64_t sub_1B8B37084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B8B9C968();
  sub_1B8B9C1E8();
  v4 = sub_1B8B9C998();
  return sub_1B8B3725C(a1, a2, v4);
}

unint64_t sub_1B8B370E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1B8B9C17C();
    v8 = v7;
    if (v6 == sub_1B8B9C17C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1B8B9C17C();
          v15 = v14;
          if (v13 == sub_1B8B9C17C() && v15 == v16)
            break;
          v18 = sub_1B8B9C8D8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1B8B3725C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B8B9C8D8() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B8B9C8D8() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1B8B3733C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37628(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B37358(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37BBC(a1, a2, a3, *v3, &qword_1EF1BD308);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B37384(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD3D8, (uint64_t (*)(_QWORD))type metadata accessor for EventModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B373B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD3E0, (uint64_t (*)(_QWORD))type metadata accessor for EventCalendarModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B373DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37790(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B373F8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B3744C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B374A0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD338, type metadata accessor for EventVirtualConferenceJoinMethodModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B374CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD318, (uint64_t (*)(_QWORD))type metadata accessor for EventAlarmModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B374F8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD328, type metadata accessor for EventAttendeeModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B37524(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37BBC(a1, a2, a3, *v3, &qword_1EF1BD348);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B37550(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37904(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B3756C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37A60(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B37588(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37BBC(a1, a2, a3, *v3, &qword_1EF1BD310);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B375B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37BBC(a1, a2, a3, *v3, &qword_1EF1B94D8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B375E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1B8B37D28(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1B8B375FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1B8B37EAC(a1, a2, a3, (_QWORD *)*v3, &qword_1EF1BD320, type metadata accessor for EventRecurrenceRuleModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_1B8B37628(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B94B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37790(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD3E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 136 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37904(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD340);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37A60(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD330);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37BBC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37D28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9588);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B37EAC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1B8B9C764();
  __break(1u);
  return result;
}

uint64_t sub_1B8B3808C(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(_QWORD);

  v6 = v4;
  v47 = a3;
  v8 = a3(0);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v41 - v9;
  v11 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v46 = a2;
  v12 = sub_1B8B9C74C();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v42 = v4;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 64);
    v44 = (_QWORD *)(v11 + 64);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v43 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 64;
    result = swift_retain();
    v20 = 0;
    while (1)
    {
      if (v17)
      {
        v23 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v24 = v23 | (v20 << 6);
      }
      else
      {
        if (__OFADD__(v20++, 1))
          goto LABEL_39;
        if (v20 >= v43)
        {
LABEL_32:
          swift_release();
          v6 = v42;
          if ((v46 & 1) != 0)
          {
            v40 = 1 << *(_BYTE *)(v11 + 32);
            if (v40 >= 64)
              bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v44 = -1 << v40;
            *(_QWORD *)(v11 + 16) = 0;
          }
          break;
        }
        v26 = v44[v20];
        if (!v26)
        {
          v27 = v20 + 1;
          if (v20 + 1 >= v43)
            goto LABEL_32;
          v26 = v44[v27];
          if (!v26)
          {
            while (1)
            {
              v20 = v27 + 1;
              if (__OFADD__(v27, 1))
                break;
              if (v20 >= v43)
                goto LABEL_32;
              v26 = v44[v20];
              ++v27;
              if (v26)
                goto LABEL_19;
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v20;
        }
LABEL_19:
        v17 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v28 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
      v30 = *v28;
      v29 = v28[1];
      v31 = *(_QWORD *)(v45 + 72);
      v32 = *(_QWORD *)(v11 + 56) + v31 * v24;
      if ((v46 & 1) != 0)
      {
        sub_1B8AFE0FC(v32, (uint64_t)v10, v47);
      }
      else
      {
        sub_1B8AE7B90(v32, (uint64_t)v10, v47);
        swift_bridgeObjectRetain();
      }
      sub_1B8B9C968();
      sub_1B8B9C1E8();
      result = sub_1B8B9C998();
      v33 = -1 << *(_BYTE *)(v13 + 32);
      v34 = result & ~v33;
      v35 = v34 >> 6;
      if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v36 = 0;
        v37 = (unint64_t)(63 - v33) >> 6;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v38 = v35 == v37;
          if (v35 == v37)
            v35 = 0;
          v36 |= v38;
          v39 = *(_QWORD *)(v18 + 8 * v35);
        }
        while (v39 == -1);
        v21 = __clz(__rbit64(~v39)) + (v35 << 6);
      }
      *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
      *v22 = v30;
      v22[1] = v29;
      result = sub_1B8AFE0FC((uint64_t)v10, *(_QWORD *)(v13 + 56) + v31 * v21, v47);
      ++*(_QWORD *)(v13 + 16);
    }
  }
  result = swift_release();
  *v6 = v13;
  return result;
}

uint64_t sub_1B8B383D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t i;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD350);
  v50 = a2;
  v6 = sub_1B8B9C74C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v48 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v46 = v2;
  v47 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      if ((v50 & 1) != 0)
        goto LABEL_10;
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1))
      goto LABEL_40;
    if (v13 >= v47)
      break;
    v27 = v48;
    v28 = v48[v13];
    if (!v28)
    {
      v29 = v13 + 1;
      if (v13 + 1 >= v47)
      {
LABEL_31:
        swift_release();
        v3 = v46;
        if ((v50 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v28 = v48[v29];
      if (!v28)
      {
        while (1)
        {
          v13 = v29 + 1;
          if (__OFADD__(v29, 1))
            break;
          if (v13 >= v47)
            goto LABEL_31;
          v28 = v48[v13];
          ++v29;
          if (v28)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    v10 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if ((v50 & 1) != 0)
    {
LABEL_10:
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 136 * v18;
      v51 = *(_QWORD *)(v22 + 8);
      v52 = *(_QWORD *)(v22 + 24);
      v53 = *(_QWORD *)v22;
      v55 = *(_QWORD *)(v22 + 32);
      v56 = *(_QWORD *)(v22 + 16);
      v57 = *(_QWORD *)(v22 + 40);
      v54 = *(_QWORD *)(v22 + 48);
      v58 = *(_BYTE *)(v22 + 56);
      v59 = *(_BYTE *)(v22 + 57);
      v60 = *(_BYTE *)(v22 + 58);
      v61 = *(_BYTE *)(v22 + 59);
      v62 = *(_BYTE *)(v22 + 60);
      v63 = *(_OWORD *)(v22 + 64);
      v23 = *(_BYTE *)(v22 + 88);
      v64 = *(_QWORD *)(v22 + 80);
      v65 = *(_QWORD *)(v22 + 96);
      v24 = *(_BYTE *)(v22 + 104);
      v66 = *(_QWORD *)(v22 + 120);
      v67 = *(_QWORD *)(v22 + 112);
      v25 = *(unsigned int *)(v22 + 128) | ((unint64_t)*(unsigned __int16 *)(v22 + 132) << 32);
      goto LABEL_22;
    }
LABEL_21:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v20 = *v30;
    v21 = v30[1];
    v31 = *(_QWORD *)(v5 + 56) + 136 * v18;
    v68[0] = *(_OWORD *)v31;
    v32 = *(_OWORD *)(v31 + 64);
    v34 = *(_OWORD *)(v31 + 16);
    v33 = *(_OWORD *)(v31 + 32);
    v70 = *(_OWORD *)(v31 + 48);
    v71 = v32;
    v68[1] = v34;
    v69 = v33;
    v36 = *(_OWORD *)(v31 + 96);
    v35 = *(_OWORD *)(v31 + 112);
    v37 = *(_OWORD *)(v31 + 80);
    *(_QWORD *)&v74[14] = *(_QWORD *)(v31 + 126);
    v73 = v36;
    *(_OWORD *)v74 = v35;
    v72 = v37;
    v66 = *((_QWORD *)&v35 + 1);
    v67 = v35;
    v25 = *(unsigned int *)&v74[16] | ((unint64_t)*(unsigned __int16 *)&v74[20] << 32);
    v24 = BYTE8(v36);
    v64 = v37;
    v65 = v36;
    v23 = BYTE8(v37);
    v63 = v71;
    v61 = BYTE11(v70);
    v62 = BYTE12(v70);
    v59 = BYTE9(v70);
    v60 = BYTE10(v70);
    v58 = BYTE8(v70);
    v54 = v70;
    v55 = v69;
    v56 = v34;
    v57 = *((_QWORD *)&v69 + 1);
    v52 = *((_QWORD *)&v34 + 1);
    v51 = *((_QWORD *)&v68[0] + 1);
    v53 = *(_QWORD *)&v68[0];
    swift_bridgeObjectRetain();
    sub_1B8B15004((uint64_t)v68);
LABEL_22:
    sub_1B8B9C968();
    sub_1B8B9C1E8();
    result = sub_1B8B9C998();
    v38 = -1 << *(_BYTE *)(v7 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v11 + 8 * (v39 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v11 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v11 + 8 * v40);
      }
      while (v44 == -1);
      v14 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    LOBYTE(v68[0]) = v23;
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v20;
    v15[1] = v21;
    v16 = *(_QWORD *)(v7 + 56) + 136 * v14;
    *(_QWORD *)v16 = v53;
    *(_QWORD *)(v16 + 8) = v51;
    *(_QWORD *)(v16 + 16) = v56;
    *(_QWORD *)(v16 + 24) = v52;
    *(_QWORD *)(v16 + 32) = v55;
    *(_QWORD *)(v16 + 40) = v57;
    *(_QWORD *)(v16 + 48) = v54;
    *(_BYTE *)(v16 + 56) = v58;
    *(_BYTE *)(v16 + 57) = v59;
    *(_BYTE *)(v16 + 58) = v60;
    *(_BYTE *)(v16 + 59) = v61;
    *(_BYTE *)(v16 + 60) = v62;
    *(_OWORD *)(v16 + 64) = v63;
    *(_QWORD *)(v16 + 80) = v64;
    *(_BYTE *)(v16 + 88) = v68[0];
    *(_QWORD *)(v16 + 96) = v65;
    *(_BYTE *)(v16 + 104) = v24;
    *(_QWORD *)(v16 + 112) = v67;
    *(_QWORD *)(v16 + 120) = v66;
    *(_WORD *)(v16 + 132) = WORD2(v25);
    *(_DWORD *)(v16 + 128) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v46;
  v27 = v48;
  if ((v50 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v45 = 1 << *(_BYTE *)(v5 + 32);
  if (v45 >= 64)
    bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v45;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1B8B388D4(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;

  v5 = v2;
  v6 = a1(0);
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v30 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = sub_1B8B9C740();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_26:
    *v5 = v11;
    return result;
  }
  v30 = v5;
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v31 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v32 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_28;
    if (v15 >= v32)
    {
LABEL_24:
      result = (void *)swift_release();
      v5 = v30;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v31 + 8 * v15);
    if (!v28)
      break;
LABEL_23:
    v18 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v15 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v20);
    v23 = *v22;
    v24 = v22[1];
    v25 = *(_QWORD *)(v33 + 72) * v20;
    sub_1B8AE7B90(*(_QWORD *)(v9 + 56) + v25, (uint64_t)v8, a1);
    v26 = (_QWORD *)(*(_QWORD *)(v11 + 48) + v21);
    *v26 = v23;
    v26[1] = v24;
    sub_1B8AFE0FC((uint64_t)v8, *(_QWORD *)(v11 + 56) + v25, a1);
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v15 + 1;
  if (v15 + 1 >= v32)
    goto LABEL_24;
  v28 = *(_QWORD *)(v31 + 8 * v29);
  if (v28)
  {
    ++v15;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v15 >= v32)
      goto LABEL_24;
    v28 = *(_QWORD *)(v31 + 8 * v15);
    ++v29;
    if (v28)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B8B38AF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v37;
  int64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[22];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD350);
  v2 = *v0;
  v3 = sub_1B8B9C740();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v37 = *(_QWORD *)(v6 + 8 * v9);
    if (!v37)
      break;
LABEL_23:
    v12 = (v37 - 1) & v37;
    v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 136 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v23 = *(_OWORD *)(v21 + 16);
    v22 = *(_OWORD *)(v21 + 32);
    v24 = *(_OWORD *)(v21 + 64);
    v42 = *(_OWORD *)(v21 + 48);
    v43 = v24;
    v26 = *(_OWORD *)(v21 + 96);
    v25 = *(_OWORD *)(v21 + 112);
    v27 = *(_OWORD *)(v21 + 80);
    *(_QWORD *)&v46[14] = *(_QWORD *)(v21 + 126);
    v45 = v26;
    *(_OWORD *)v46 = v25;
    v44 = v27;
    v39 = *(_OWORD *)v21;
    v40 = v23;
    v41 = v22;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v19;
    v28[1] = v18;
    v29 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v43;
    *(_OWORD *)(v29 + 48) = v42;
    *(_OWORD *)(v29 + 64) = v32;
    *(_OWORD *)(v29 + 16) = v30;
    *(_OWORD *)(v29 + 32) = v31;
    v33 = v44;
    v34 = v45;
    v35 = *(_OWORD *)v46;
    *(_QWORD *)(v29 + 126) = *(_QWORD *)&v46[14];
    *(_OWORD *)(v29 + 96) = v34;
    *(_OWORD *)(v29 + 112) = v35;
    *(_OWORD *)(v29 + 80) = v33;
    swift_bridgeObjectRetain();
    result = (void *)sub_1B8B15004((uint64_t)&v39);
  }
  v38 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v37 = *(_QWORD *)(v6 + 8 * v38);
  if (v37)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v37 = *(_QWORD *)(v6 + 8 * v9);
    ++v38;
    if (v37)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1B8B38D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9488);
    v3 = sub_1B8B9C62C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1B8B9C968();
      swift_bridgeObjectRetain();
      sub_1B8B9C1E8();
      result = sub_1B8B9C998();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1B8B9C8D8(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1B8B9C8D8();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B8B38EA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1B8B9B270();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B9480);
    v10 = sub_1B8B9C62C();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1B8B3A8A8(&qword_1EF1B8F58, MEMORY[0x1E0CB11D0]);
      v14 = sub_1B8B9C0BC();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1B8B3A8A8(&qword_1EF1B8F60, MEMORY[0x1E0CB11D8]);
          v20 = sub_1B8B9C0EC();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1B8B390F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  _OWORD v19[6];
  _OWORD v20[2];
  uint64_t v21;

  v5 = type metadata accessor for EventCalendarModelObject();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v18[1] = v2;
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1B8B373B0(0, v9, 0);
    v10 = v21;
    v11 = (_OWORD *)(a1 + 32);
    do
    {
      v12 = v11[5];
      v19[4] = v11[4];
      v19[5] = v12;
      v20[0] = v11[6];
      *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)((char *)v11 + 106);
      v13 = v11[1];
      v19[0] = *v11;
      v19[1] = v13;
      v14 = v11[3];
      v19[2] = v11[2];
      v19[3] = v14;
      sub_1B8B3A8E8((uint64_t)v19);
      sub_1B8B31178(a2, (uint64_t)v8);
      sub_1B8B3A970((uint64_t)v19);
      v21 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B8B373B0(v15 > 1, v16 + 1, 1);
        v10 = v21;
      }
      *(_QWORD *)(v10 + 16) = v16 + 1;
      sub_1B8AFE0FC((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for EventCalendarModelObject);
      v11 += 8;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_1B8B39270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[816];
  uint64_t v17;

  v15 = a2;
  v4 = type metadata accessor for EventModelObject();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v14 = v2;
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1B8B37384(0, v8, 0);
    v9 = v17;
    v10 = (char *)(a1 + 32);
    do
    {
      memcpy(v16, v10, 0x328uLL);
      sub_1B8B39B48((uint64_t)v16);
      sub_1B8B3177C(v15, v7);
      sub_1B8B39FA4((uint64_t)v16);
      v17 = v9;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1B8B37384(v11 > 1, v12 + 1, 1);
        v9 = v17;
      }
      *(_QWORD *)(v9 + 16) = v12 + 1;
      sub_1B8AFE0FC((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, (uint64_t (*)(_QWORD))type metadata accessor for EventModelObject);
      v10 += 808;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_1B8B393D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for FakeDataReader()
{
  return &type metadata for FakeDataReader;
}

ValueMetadata *type metadata accessor for FakeDataReader.Dataset()
{
  return &type metadata for FakeDataReader.Dataset;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV7DatasetVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13CalendarUIKit14FakeDataReaderV7DatasetVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s13CalendarUIKit14FakeDataReaderV7DatasetVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV7DatasetVwta_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV7DatasetVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B8B395D4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Document()
{
  return &type metadata for FakeDataReader.Document;
}

uint64_t sub_1B8B39624(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656372756F73 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE900000000000073 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B8B3977C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD2B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1B8B39A38();
  sub_1B8B9C9B0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD2C0);
    v10 = 0;
    sub_1B8B43EB4(&qword_1EF1BD2C8, &qword_1EF1BD2C0, (uint64_t (*)(void))sub_1B8B39A7C);
    sub_1B8B9C818();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD2D8);
    v10 = 1;
    sub_1B8B43EB4(&qword_1EF1BD2E0, &qword_1EF1BD2D8, (uint64_t (*)(void))sub_1B8B39AC0);
    swift_bridgeObjectRetain();
    sub_1B8B9C818();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD2F0);
    v10 = 2;
    sub_1B8B43EB4(&qword_1EF1BD2F8, &qword_1EF1BD2F0, (uint64_t (*)(void))sub_1B8B39B04);
    swift_bridgeObjectRetain();
    sub_1B8B9C818();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1B8B39A38()
{
  unint64_t result;

  result = qword_1EF1BD2B8;
  if (!qword_1EF1BD2B8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA7DC, &type metadata for FakeDataReader.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD2B8);
  }
  return result;
}

unint64_t sub_1B8B39A7C()
{
  unint64_t result;

  result = qword_1EF1BD2D0;
  if (!qword_1EF1BD2D0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA7B4, &type metadata for FakeDataReader.Source);
    atomic_store(result, (unint64_t *)&qword_1EF1BD2D0);
  }
  return result;
}

unint64_t sub_1B8B39AC0()
{
  unint64_t result;

  result = qword_1EF1BD2E8;
  if (!qword_1EF1BD2E8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA78C, &type metadata for FakeDataReader.Calendar);
    atomic_store(result, (unint64_t *)&qword_1EF1BD2E8);
  }
  return result;
}

unint64_t sub_1B8B39B04()
{
  unint64_t result;

  result = qword_1EF1BD300;
  if (!qword_1EF1BD300)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA764, &type metadata for FakeDataReader.Event);
    atomic_store(result, (unint64_t *)&qword_1EF1BD300);
  }
  return result;
}

uint64_t sub_1B8B39B48(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 272);
  v17 = *(_QWORD *)(a1 + 264);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *(_QWORD *)(a1 + 280);
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(_QWORD *)(a1 + 296);
  v10 = *(_QWORD *)(a1 + 320);
  v11 = *(_QWORD *)(a1 + 312);
  v4 = *(_OWORD *)(a1 + 328);
  v3 = *(_OWORD *)(a1 + 344);
  v23 = *(_QWORD *)(a1 + 440);
  v24 = *(_QWORD *)(a1 + 432);
  v21 = *(_QWORD *)(a1 + 456);
  v22 = *(_QWORD *)(a1 + 448);
  v19 = *(_QWORD *)(a1 + 472);
  v20 = *(_QWORD *)(a1 + 464);
  v18 = *(_QWORD *)(a1 + 480);
  v8 = *(_OWORD *)(a1 + 496);
  v5 = *(_OWORD *)(a1 + 512);
  v9 = *(_QWORD *)(a1 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B8B39E04(v7, v6);
  sub_1B8B39E84(v17, v16, v15, v14, v13, v12, v11, v10, v4, *((uint64_t *)&v4 + 1), v3);
  sub_1B8B39E84(v24, v23, v22, v21, v20, v19, v18, v9, v8, *((uint64_t *)&v8 + 1), v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B39E04(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1B8B39E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B8B39F34(a10, a11);
  }
}

uint64_t sub_1B8B39F34(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B8B39FA4(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 272);
  v17 = *(_QWORD *)(a1 + 264);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *(_QWORD *)(a1 + 280);
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(_QWORD *)(a1 + 296);
  v10 = *(_QWORD *)(a1 + 320);
  v11 = *(_QWORD *)(a1 + 312);
  v4 = *(_OWORD *)(a1 + 328);
  v3 = *(_OWORD *)(a1 + 344);
  v23 = *(_QWORD *)(a1 + 440);
  v24 = *(_QWORD *)(a1 + 432);
  v21 = *(_QWORD *)(a1 + 456);
  v22 = *(_QWORD *)(a1 + 448);
  v19 = *(_QWORD *)(a1 + 472);
  v20 = *(_QWORD *)(a1 + 464);
  v18 = *(_QWORD *)(a1 + 480);
  v8 = *(_OWORD *)(a1 + 496);
  v5 = *(_OWORD *)(a1 + 512);
  v9 = *(_QWORD *)(a1 + 488);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B8B3A25C(v7, v6);
  sub_1B8B3A2DC(v17, v16, v15, v14, v13, v12, v11, v10, v4, *((uint64_t *)&v4 + 1), v3);
  sub_1B8B3A2DC(v24, v23, v22, v21, v20, v19, v18, v9, v8, *((uint64_t *)&v8 + 1), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B3A25C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B8B3A2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8B3A38C(a10, a11);
  }
}

uint64_t sub_1B8B3A38C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B8B3A3FC(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

double sub_1B8B3A420(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1B8BA8260;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  return result;
}

uint64_t sub_1B8B3A448(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v15;
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = a3;
    swift_bridgeObjectRetain();
    sub_1B8AF1CDC(a9, a10);
    return sub_1B8B2C120(a12, a13, a14);
  }
  return result;
}

_QWORD *sub_1B8B3A53C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

uint64_t sub_1B8B3A5A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8ADDBD0(a9, a10);
    return sub_1B8B2C214(a12, a13, a14);
  }
  return result;
}

uint64_t sub_1B8B3A694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B8B359EC(*(_BYTE *)(a1 + 8), a2, *(double *)a1);
}

unint64_t sub_1B8B3A6C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BD3B0;
  if (!qword_1EF1BD3B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCA78);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BD3B0);
  }
  return result;
}

uint64_t sub_1B8B3A714(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B3A7BC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B3A864(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B8B3A8A8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1B8B9B270();
    result = MEMORY[0x1BCCB79D0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8B3A8E8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B3A970(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for FakeDataReader.Event.VirtualConference.JoinMethod()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Event.VirtualConference.JoinMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.VirtualConference.JoinMethod(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for FakeDataReader.Event.VirtualConference.JoinMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.VirtualConference.JoinMethod(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.VirtualConference.JoinMethod(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.VirtualConference.JoinMethod()
{
  return &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod;
}

uint64_t destroy for FakeDataReader.Event.Location.PredictedLOI()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FakeDataReader.Event.Location.PredictedLOI(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FakeDataReader.Event.Location.PredictedLOI(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for FakeDataReader.Event.Location.PredictedLOI(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Location.PredictedLOI(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Location.PredictedLOI(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location.PredictedLOI()
{
  return &type metadata for FakeDataReader.Event.Location.PredictedLOI;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location.Coordinates()
{
  return &type metadata for FakeDataReader.Event.Location.Coordinates;
}

uint64_t destroy for FakeDataReader.Event.Integration()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13CalendarUIKit14FakeDataReaderV5EventV11IntegrationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.Integration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FakeDataReader.Event.Integration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Integration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Integration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Integration()
{
  return &type metadata for FakeDataReader.Event.Integration;
}

uint64_t destroy for FakeDataReader.Event.VirtualConference()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Event.VirtualConference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.VirtualConference(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for FakeDataReader.Event.VirtualConference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.VirtualConference(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.VirtualConference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.VirtualConference()
{
  return &type metadata for FakeDataReader.Event.VirtualConference;
}

uint64_t destroy for FakeDataReader.Event.Location(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FakeDataReader.Event.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v6;
    v7 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v7;
    v8 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v8;
    v9 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v9;
    v10 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v10;
    v11 = *(_QWORD *)(a2 + 152);
    v12 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v11;
    *(_QWORD *)(a1 + 160) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
    v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v14;
    v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.Location(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v6 = (_OWORD *)(a1 + 72);
  v7 = (_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B8B3B7B4(a1 + 72);
      v9 = *(_OWORD *)(a2 + 88);
      *v6 = *v7;
      *(_OWORD *)(a1 + 88) = v9;
      v10 = *(_OWORD *)(a2 + 152);
      v12 = *(_OWORD *)(a2 + 104);
      v11 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v10;
      *(_OWORD *)(a1 + 104) = v12;
      *(_OWORD *)(a1 + 120) = v11;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 88);
    *v6 = *v7;
    *(_OWORD *)(a1 + 88) = v13;
    v14 = *(_OWORD *)(a2 + 104);
    v15 = *(_OWORD *)(a2 + 120);
    v16 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v16;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 120) = v15;
  }
  return a1;
}

uint64_t sub_1B8B3B7B4(uint64_t a1)
{
  destroy for FakeDataReader.Event.Location.PredictedLOI();
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for FakeDataReader.Event.Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 80);
  if (!v6)
  {
    sub_1B8B3B7B4(a1 + 72);
LABEL_5:
    v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v12;
    v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v13;
    v14 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v14;
    return a1;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Location(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 168))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 168) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location()
{
  return &type metadata for FakeDataReader.Event.Location;
}

ValueMetadata *type metadata accessor for FakeDataReader.Document.CodingKeys()
{
  return &type metadata for FakeDataReader.Document.CodingKeys;
}

uint64_t destroy for FakeDataReader.Event(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[20] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[34] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[43])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (a1[55] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[64])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  v10 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    v11 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v11;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    v12 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v12;
    v13 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v10;
    v14 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v14;
    v15 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v15;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v16 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v16;
    v17 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v17;
    v18 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v19 = *(_QWORD *)(a2 + 272);
  if (v19 == 1)
  {
    v20 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v20;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    v21 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v21;
    v22 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v22;
    v23 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v23;
    v24 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v19;
    v25 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = v25;
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
    v26 = *(_QWORD *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26)
    {
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v26;
      v27 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = v27;
      v28 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 376) = v28;
      v29 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = v29;
      v30 = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = v30;
      v31 = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v32 = *(_OWORD *)(a2 + 384);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 384) = v32;
      v33 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v33;
      v34 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v34;
    }
  }
  v35 = *(_QWORD *)(a2 + 440);
  if (v35 == 1)
  {
    v36 = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 576) = v36;
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    v37 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v37;
    v38 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v38;
    v39 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v39;
    v40 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v40;
  }
  else
  {
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v35;
    v41 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = v41;
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_WORD *)(a1 + 496) = *(_WORD *)(a2 + 496);
    v42 = *(_QWORD *)(a2 + 512);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42)
    {
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 512) = v42;
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v43 = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
      *(_OWORD *)(a1 + 552) = v43;
      v44 = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 584) = v44;
      v45 = *(_OWORD *)(a2 + 520);
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 520) = v45;
    }
  }
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_WORD *)(a1 + 760) = *(_WORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  v8 = (__int128 *)(a1 + 152);
  v9 = (__int128 *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160) == 1)
  {
    if (v10 == 1)
    {
      v11 = *v9;
      v12 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v12;
      *v8 = v11;
      v13 = *(_OWORD *)(a2 + 200);
      v14 = *(_OWORD *)(a2 + 216);
      v15 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 248) = v15;
      *(_OWORD *)(a1 + 200) = v13;
      *(_OWORD *)(a1 + 216) = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v10 == 1)
  {
    sub_1B8B3CBA8(a1 + 152);
    v17 = *(_OWORD *)(a2 + 168);
    v16 = *(_OWORD *)(a2 + 184);
    *v8 = *v9;
    *(_OWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 184) = v16;
    v18 = *(_OWORD *)(a2 + 248);
    v20 = *(_OWORD *)(a2 + 200);
    v19 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v18;
    *(_OWORD *)(a1 + 200) = v20;
    *(_OWORD *)(a1 + 216) = v19;
  }
  else
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v21 = (__int128 *)(a1 + 264);
  v22 = (__int128 *)(a2 + 264);
  v23 = *(_QWORD *)(a2 + 272);
  if (*(_QWORD *)(a1 + 272) == 1)
  {
    if (v23 == 1)
    {
      v24 = *v22;
      v25 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v25;
      *v21 = v24;
      v26 = *(_OWORD *)(a2 + 312);
      v27 = *(_OWORD *)(a2 + 328);
      v28 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = v28;
      *(_OWORD *)(a1 + 312) = v26;
      *(_OWORD *)(a1 + 328) = v27;
      v29 = *(_OWORD *)(a2 + 376);
      v30 = *(_OWORD *)(a2 + 392);
      v31 = *(_OWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_OWORD *)(a1 + 392) = v30;
      *(_OWORD *)(a1 + 408) = v31;
      *(_OWORD *)(a1 + 376) = v29;
      goto LABEL_22;
    }
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    v40 = *(_OWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v40;
    v41 = *(_QWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v41;
    *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
    v42 = *(_QWORD *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v42)
    {
      v43 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v43;
      v44 = *(_OWORD *)(a2 + 368);
      v45 = *(_OWORD *)(a2 + 384);
      v46 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v46;
      *(_OWORD *)(a1 + 368) = v44;
      *(_OWORD *)(a1 + 384) = v45;
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  if (v23 == 1)
  {
    sub_1B8B3CBD4(a1 + 264);
    v33 = *(_OWORD *)(a2 + 280);
    v32 = *(_OWORD *)(a2 + 296);
    *v21 = *v22;
    *(_OWORD *)(a1 + 280) = v33;
    *(_OWORD *)(a1 + 296) = v32;
    v34 = *(_OWORD *)(a2 + 360);
    v36 = *(_OWORD *)(a2 + 312);
    v35 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v34;
    *(_OWORD *)(a1 + 312) = v36;
    *(_OWORD *)(a1 + 328) = v35;
    v38 = *(_OWORD *)(a2 + 392);
    v37 = *(_OWORD *)(a2 + 408);
    v39 = *(_OWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 392) = v38;
    *(_OWORD *)(a1 + 408) = v37;
    *(_OWORD *)(a1 + 376) = v39;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = *(_OWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v47;
  v48 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v48;
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  v49 = (_OWORD *)(a1 + 336);
  v50 = (_OWORD *)(a2 + 336);
  v51 = *(_QWORD *)(a2 + 344);
  if (*(_QWORD *)(a1 + 344))
  {
    if (v51)
    {
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B8B3B7B4(a1 + 336);
      v52 = *(_OWORD *)(a2 + 352);
      *v49 = *v50;
      *(_OWORD *)(a1 + 352) = v52;
      v53 = *(_OWORD *)(a2 + 416);
      v55 = *(_OWORD *)(a2 + 368);
      v54 = *(_OWORD *)(a2 + 384);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v53;
      *(_OWORD *)(a1 + 368) = v55;
      *(_OWORD *)(a1 + 384) = v54;
    }
  }
  else
  {
    if (v51)
    {
LABEL_19:
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
    v56 = *(_OWORD *)(a2 + 352);
    *v49 = *v50;
    *(_OWORD *)(a1 + 352) = v56;
    v57 = *(_OWORD *)(a2 + 368);
    v58 = *(_OWORD *)(a2 + 384);
    v59 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v59;
    *(_OWORD *)(a1 + 368) = v57;
    *(_OWORD *)(a1 + 384) = v58;
  }
LABEL_22:
  v60 = (__int128 *)(a1 + 432);
  v61 = (__int128 *)(a2 + 432);
  v62 = *(_QWORD *)(a2 + 440);
  if (*(_QWORD *)(a1 + 440) == 1)
  {
    if (v62 == 1)
    {
      v63 = *v61;
      v64 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 464) = v64;
      *v60 = v63;
      v65 = *(_OWORD *)(a2 + 480);
      v66 = *(_OWORD *)(a2 + 496);
      v67 = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
      *(_OWORD *)(a1 + 528) = v67;
      *(_OWORD *)(a1 + 480) = v65;
      *(_OWORD *)(a1 + 496) = v66;
      v68 = *(_OWORD *)(a2 + 544);
      v69 = *(_OWORD *)(a2 + 560);
      v70 = *(_OWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 560) = v69;
      *(_OWORD *)(a1 + 576) = v70;
      *(_OWORD *)(a1 + 544) = v68;
      goto LABEL_36;
    }
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    v79 = *(_OWORD *)(a2 + 464);
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = v79;
    v80 = *(_QWORD *)(a2 + 488);
    *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = v80;
    *(_BYTE *)(a1 + 497) = *(_BYTE *)(a2 + 497);
    v81 = *(_QWORD *)(a2 + 512);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v81)
    {
      v82 = *(_OWORD *)(a2 + 520);
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 520) = v82;
      v83 = *(_OWORD *)(a2 + 536);
      v84 = *(_OWORD *)(a2 + 552);
      v85 = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 584) = v85;
      *(_OWORD *)(a1 + 536) = v83;
      *(_OWORD *)(a1 + 552) = v84;
      goto LABEL_36;
    }
LABEL_33:
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_36;
  }
  if (v62 == 1)
  {
    sub_1B8B3CBD4(a1 + 432);
    v72 = *(_OWORD *)(a2 + 448);
    v71 = *(_OWORD *)(a2 + 464);
    *v60 = *v61;
    *(_OWORD *)(a1 + 448) = v72;
    *(_OWORD *)(a1 + 464) = v71;
    v73 = *(_OWORD *)(a2 + 528);
    v75 = *(_OWORD *)(a2 + 480);
    v74 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v73;
    *(_OWORD *)(a1 + 480) = v75;
    *(_OWORD *)(a1 + 496) = v74;
    v77 = *(_OWORD *)(a2 + 560);
    v76 = *(_OWORD *)(a2 + 576);
    v78 = *(_OWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 560) = v77;
    *(_OWORD *)(a1 + 576) = v76;
    *(_OWORD *)(a1 + 544) = v78;
    goto LABEL_36;
  }
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v86;
  v87 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v87;
  *(_BYTE *)(a1 + 497) = *(_BYTE *)(a2 + 497);
  v88 = (_OWORD *)(a1 + 504);
  v89 = (_OWORD *)(a2 + 504);
  v90 = *(_QWORD *)(a2 + 512);
  if (!*(_QWORD *)(a1 + 512))
  {
    if (!v90)
    {
      v95 = *(_OWORD *)(a2 + 520);
      *v88 = *v89;
      *(_OWORD *)(a1 + 520) = v95;
      v96 = *(_OWORD *)(a2 + 536);
      v97 = *(_OWORD *)(a2 + 552);
      v98 = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 584) = v98;
      *(_OWORD *)(a1 + 536) = v96;
      *(_OWORD *)(a1 + 552) = v97;
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  if (v90)
  {
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B8B3B7B4(a1 + 504);
    v91 = *(_OWORD *)(a2 + 520);
    *v88 = *v89;
    *(_OWORD *)(a1 + 520) = v91;
    v92 = *(_OWORD *)(a2 + 584);
    v94 = *(_OWORD *)(a2 + 536);
    v93 = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 584) = v92;
    *(_OWORD *)(a1 + 536) = v94;
    *(_OWORD *)(a1 + 552) = v93;
  }
LABEL_36:
  v99 = *(_QWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_QWORD *)(a1 + 600) = v99;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v100 = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 720) = v100;
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
  *(_BYTE *)(a1 + 761) = *(_BYTE *)(a2 + 761);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B3CBA8(uint64_t a1)
{
  destroy for FakeDataReader.Event.VirtualConference();
  return a1;
}

uint64_t sub_1B8B3CBD4(uint64_t a1)
{
  destroy for FakeDataReader.Event.Location(a1);
  return a1;
}

void *__swift_memcpy808_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x328uLL);
}

uint64_t assignWithTake for FakeDataReader.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  if (*(_QWORD *)(a1 + 160) == 1)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 160);
  if (v10 == 1)
  {
    sub_1B8B3CBA8(a1 + 152);
LABEL_4:
    v11 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v11;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    v12 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v12;
    v13 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v13;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v15;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(_QWORD *)(a1 + 272) == 1)
  {
LABEL_9:
    v20 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v20;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    v21 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v21;
    v22 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v22;
    v23 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v23;
    v24 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v24;
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(a2 + 272);
  if (v19 == 1)
  {
    sub_1B8B3CBD4(a1 + 264);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v19;
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v32;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 344))
  {
    v33 = *(_QWORD *)(a2 + 344);
    if (v33)
    {
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v33;
      swift_bridgeObjectRelease();
      v34 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 360) = v34;
      swift_bridgeObjectRelease();
      v35 = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 376) = v35;
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = v36;
      swift_bridgeObjectRelease();
      v37 = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = v37;
      swift_bridgeObjectRelease();
      v38 = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = v38;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_1B8B3B7B4(a1 + 336);
  }
  v41 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v41;
  v42 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v42;
  v43 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v43;
LABEL_10:
  if (*(_QWORD *)(a1 + 440) != 1)
  {
    v25 = *(_QWORD *)(a2 + 440);
    if (v25 != 1)
    {
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 440) = v25;
      swift_bridgeObjectRelease();
      v39 = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 456) = v39;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
      *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_WORD *)(a1 + 496) = *(_WORD *)(a2 + 496);
      if (*(_QWORD *)(a1 + 512))
      {
        v40 = *(_QWORD *)(a2 + 512);
        if (v40)
        {
          *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
          *(_QWORD *)(a1 + 512) = v40;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
          *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
          *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        sub_1B8B3B7B4(a1 + 504);
      }
      v44 = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
      *(_OWORD *)(a1 + 552) = v44;
      v45 = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 584) = v45;
      v46 = *(_OWORD *)(a2 + 520);
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 520) = v46;
      goto LABEL_14;
    }
    sub_1B8B3CBD4(a1 + 432);
  }
  v26 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v26;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  v27 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v27;
  v28 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v28;
  v29 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v29;
  v30 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v30;
LABEL_14:
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 760) = *(_WORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 808))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 808) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 808) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event()
{
  return &type metadata for FakeDataReader.Event;
}

uint64_t destroy for FakeDataReader.Calendar()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Calendar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Calendar(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  return a1;
}

__n128 __swift_memcpy122_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(__int128 *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for FakeDataReader.Calendar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Calendar(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 122))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Calendar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 122) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 122) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Calendar()
{
  return &type metadata for FakeDataReader.Calendar;
}

uint64_t initializeWithCopy for FakeDataReader.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Source(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  return a1;
}

__n128 __swift_memcpy67_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FakeDataReader.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Source(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 67))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Source(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 67) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 67) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Source()
{
  return &type metadata for FakeDataReader.Source;
}

unint64_t sub_1B8B3D8E4()
{
  unint64_t result;

  result = qword_1EF1BD3F0;
  if (!qword_1EF1BD3F0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA64C, &type metadata for FakeDataReader.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD3F0);
  }
  return result;
}

unint64_t sub_1B8B3D92C()
{
  unint64_t result;

  result = qword_1EF1BD3F8;
  if (!qword_1EF1BD3F8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA5BC, &type metadata for FakeDataReader.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD3F8);
  }
  return result;
}

unint64_t sub_1B8B3D974()
{
  unint64_t result;

  result = qword_1EF1BD400;
  if (!qword_1EF1BD400)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA5E4, &type metadata for FakeDataReader.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD400);
  }
  return result;
}

uint64_t sub_1B8B3D9B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70756F7247707061 && a2 == 0xEA00000000004449 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6167656C65447369 && a2 == 0xEA00000000006574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6261746972577369 && a2 == 0xEA0000000000656CLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B8BB8590)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1B8B3DC84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD408);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B3E04C();
  sub_1B8B9C9B0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v42 = 0;
  v9 = sub_1B8B9C7DC();
  v11 = v10;
  v35 = v9;
  v41 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1B8B9C7DC();
  v14 = v13;
  v33 = v12;
  v34 = v11;
  v40 = 2;
  swift_bridgeObjectRetain();
  v30 = sub_1B8B9C7A0();
  v32 = v14;
  v39 = 3;
  v16 = v15;
  swift_bridgeObjectRetain();
  v17 = sub_1B8B9C7A0();
  v31 = v18;
  v27 = v17;
  v29 = v16;
  v38 = 4;
  swift_bridgeObjectRetain();
  v28 = 0;
  LOBYTE(v16) = sub_1B8B9C7AC();
  v37 = 5;
  v19 = sub_1B8B9C7AC();
  v36 = 6;
  LOBYTE(v14) = sub_1B8B9C7AC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v31;
  swift_bridgeObjectRelease();
  v21 = v29;
  swift_bridgeObjectRelease();
  v22 = v32;
  swift_bridgeObjectRelease();
  v23 = v16;
  v24 = v34;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v33;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v30;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v20;
  *(_BYTE *)(a2 + 64) = v23;
  *(_BYTE *)(a2 + 65) = v19;
  *(_BYTE *)(a2 + 66) = v14;
  return result;
}

unint64_t sub_1B8B3E04C()
{
  unint64_t result;

  result = qword_1EF1BD410;
  if (!qword_1EF1BD410)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB1E8, &type metadata for FakeDataReader.Source.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD410);
  }
  return result;
}

uint64_t sub_1B8B3E090(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4449656372756F73 && a2 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616E7265747865 && a2 == 0xEA00000000004449 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B8BB79E0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x53676E6972616873 && a2 == 0xED00007375746174 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB7A00 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001B8BB7A40)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1B8B3E488@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[2];
  _QWORD v60[12];
  char v61;
  _BYTE v62[7];
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  _DWORD v68[3];
  _QWORD *v69;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD418);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v69 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B8B3EB18();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    return (uint64_t)v8;
  }
  else
  {
    LOBYTE(v60[0]) = 0;
    v10 = sub_1B8B9C7DC();
    v12 = v11;
    LOBYTE(v60[0]) = 1;
    swift_bridgeObjectRetain();
    v48 = sub_1B8B9C7A0();
    v49 = v10;
    LOBYTE(v60[0]) = 2;
    v14 = v13;
    swift_bridgeObjectRetain();
    v15 = sub_1B8B9C7DC();
    v52 = v14;
    v47 = v15;
    LOBYTE(v60[0]) = 3;
    v17 = v16;
    swift_bridgeObjectRetain();
    v18 = sub_1B8B9C7A0();
    v51 = v17;
    v46 = v18;
    LOBYTE(v60[0]) = 4;
    v20 = v19;
    swift_bridgeObjectRetain();
    v21 = sub_1B8B9C7DC();
    v50 = v20;
    v45 = v21;
    LOBYTE(v60[0]) = 5;
    v23 = v22;
    swift_bridgeObjectRetain();
    v43 = sub_1B8B9C7DC();
    v44 = v23;
    LOBYTE(v60[0]) = 6;
    v25 = v24;
    swift_bridgeObjectRetain();
    v41 = sub_1B8B9C7AC();
    LOBYTE(v60[0]) = 7;
    v40 = sub_1B8B9C7A0();
    LOBYTE(v60[0]) = 8;
    v42 = v26;
    swift_bridgeObjectRetain();
    v39 = sub_1B8B9C7AC();
    v67 = 9;
    v27 = sub_1B8B9C7AC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)&v53 = v49;
    *((_QWORD *)&v53 + 1) = v12;
    v28 = v51;
    *(_QWORD *)&v54 = v48;
    *((_QWORD *)&v54 + 1) = v52;
    *(_QWORD *)&v55 = v47;
    *((_QWORD *)&v55 + 1) = v51;
    *(_QWORD *)&v56 = v46;
    *((_QWORD *)&v56 + 1) = v50;
    v29 = v44;
    *(_QWORD *)&v57 = v45;
    *((_QWORD *)&v57 + 1) = v44;
    *(_QWORD *)&v58 = v43;
    *((_QWORD *)&v58 + 1) = v25;
    LOBYTE(v59[0]) = v41;
    *((_QWORD *)&v59[0] + 1) = v40;
    *(_QWORD *)&v59[1] = v42;
    BYTE8(v59[1]) = v39;
    v38 = v27;
    BYTE9(v59[1]) = v27;
    sub_1B8B3A8E8((uint64_t)&v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v28;
    swift_bridgeObjectRelease();
    v31 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = v25;
    swift_bridgeObjectRelease();
    v33 = v42;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    v60[0] = v49;
    v60[1] = v12;
    v60[2] = v48;
    v60[3] = v52;
    v60[4] = v47;
    v60[5] = v30;
    v60[6] = v46;
    v60[7] = v31;
    v60[8] = v45;
    v60[9] = v29;
    v60[10] = v43;
    v60[11] = v32;
    v61 = v41;
    *(_DWORD *)v62 = v68[0];
    *(_DWORD *)&v62[3] = *(_DWORD *)((char *)v68 + 3);
    v63 = v40;
    v64 = v33;
    v65 = v39;
    v66 = v38;
    result = sub_1B8B3A970((uint64_t)v60);
    v35 = v58;
    a2[4] = v57;
    a2[5] = v35;
    a2[6] = v59[0];
    *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v59 + 10);
    v36 = v54;
    *a2 = v53;
    a2[1] = v36;
    v37 = v56;
    a2[2] = v55;
    a2[3] = v37;
  }
  return result;
}

unint64_t sub_1B8B3EB18()
{
  unint64_t result;

  result = qword_1EF1BD420;
  if (!qword_1EF1BD420)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB198, &type metadata for FakeDataReader.Calendar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD420);
  }
  return result;
}

uint64_t sub_1B8B3EB5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7954788 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1920298856 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B8B3ECEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD5F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B457C4();
  sub_1B8B9C9B0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = 0;
  v9 = sub_1B8B9C800();
  v24 = 1;
  v10 = sub_1B8B9C7C4();
  v21 = v11;
  v23 = 2;
  v12 = sub_1B8B9C7C4();
  HIDWORD(v19) = v13;
  v20 = v12;
  v22 = 3;
  v14 = sub_1B8B9C7A0();
  v15 = v8;
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v21 & 1;
  *(_QWORD *)(a2 + 24) = v20;
  *(_BYTE *)(a2 + 32) = BYTE4(v19) & 1;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v17;
  return result;
}

uint64_t sub_1B8B3EEC0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656475746974616CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_1B8B3EFBC(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  double v8;
  _BYTE v10[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4B0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B43DE8();
  sub_1B8B9C9B0();
  if (!v1)
  {
    v10[15] = 0;
    sub_1B8B9C7F4();
    v2 = v8;
    v10[14] = 1;
    sub_1B8B9C7F4();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

uint64_t sub_1B8B3F114@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B43DA4();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
    v9 = sub_1B8B9C7DC();
    v11 = v10;
    v43 = 1;
    swift_bridgeObjectRetain();
    v36 = sub_1B8B9C7A0();
    v37 = v12;
    v38 = v11;
    v42 = 2;
    swift_bridgeObjectRetain();
    v13 = sub_1B8B9C7A0();
    v15 = v14;
    v34 = v13;
    v35 = v9;
    v41 = 3;
    swift_bridgeObjectRetain();
    v16 = sub_1B8B9C7A0();
    v18 = v17;
    v32 = v16;
    v33 = a2;
    v40 = 4;
    swift_bridgeObjectRetain();
    v19 = sub_1B8B9C7A0();
    v21 = v20;
    v31 = v19;
    v39 = 5;
    swift_bridgeObjectRetain();
    v22 = sub_1B8B9C7A0();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v22;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v37;
    swift_bridgeObjectRelease();
    v28 = v38;
    result = swift_bridgeObjectRelease();
    v30 = v33;
    *v33 = v35;
    v30[1] = v28;
    v30[2] = v36;
    v30[3] = v27;
    v30[4] = v34;
    v30[5] = v15;
    v30[6] = v32;
    v30[7] = v18;
    v30[8] = v31;
    v30[9] = v21;
    v30[10] = v26;
    v30[11] = v24;
  }
  return result;
}

uint64_t sub_1B8B3F52C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616E6964726F6F63 && a2 == 0xEB00000000736574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x636572706D497369 && a2 == 0xEB00000000657369 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6574636964657270 && a2 == 0xEC000000494F4C64)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B8B3F7E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B8B43F5C();
  sub_1B8B9C9B0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  v10 = v6;
  v53 = a2;
  LOBYTE(v66) = 0;
  v11 = v5;
  v12 = sub_1B8B9C7A0();
  v14 = v13;
  LOBYTE(v66) = 1;
  swift_bridgeObjectRetain();
  v15 = sub_1B8B9C7A0();
  v17 = v16;
  v52 = v15;
  LOBYTE(v55) = 2;
  sub_1B8B43FA0();
  swift_bridgeObjectRetain();
  sub_1B8B9C7D0();
  v50 = v66;
  v51 = v17;
  v49 = v67;
  LODWORD(v17) = v68;
  v96 = v68;
  LOBYTE(v66) = 3;
  v18 = sub_1B8B9C7B8();
  v46 = v17;
  v47 = v18;
  v95 = v19 & 1;
  LOBYTE(v66) = 4;
  LODWORD(v17) = v19;
  v48 = sub_1B8B9C7AC();
  v45 = v17;
  v97 = 5;
  sub_1B8B43FE4();
  sub_1B8B9C7D0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v11);
  v43 = v89;
  v44 = v88;
  v41 = v90;
  v42 = *((_QWORD *)&v89 + 1);
  v39 = v91;
  v40 = *((_QWORD *)&v90 + 1);
  v37 = v92;
  v38 = *((_QWORD *)&v91 + 1);
  v35 = v93;
  v36 = *((_QWORD *)&v92 + 1);
  v33 = v94;
  v34 = *((_QWORD *)&v93 + 1);
  *(_QWORD *)&v55 = v12;
  *((_QWORD *)&v55 + 1) = v14;
  v21 = v51;
  v20 = v52;
  *(_QWORD *)&v56 = v52;
  *((_QWORD *)&v56 + 1) = v51;
  v23 = v49;
  v22 = v50;
  *(_QWORD *)&v57 = v50;
  *((_QWORD *)&v57 + 1) = v49;
  LOBYTE(v58) = v46;
  v24 = v47;
  *((_QWORD *)&v58 + 1) = v47;
  LOBYTE(v59) = v45 & 1;
  BYTE1(v59) = v48;
  *((_QWORD *)&v59 + 1) = v88;
  v60 = v89;
  v61 = v90;
  v62 = v91;
  v63 = v92;
  v64 = v93;
  v65 = v94;
  sub_1B8B44028((uint64_t)&v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  v66 = v12;
  v67 = v14;
  v68 = v20;
  v69 = v21;
  v70 = v22;
  v71 = v23;
  v72 = v96;
  v73 = v24;
  v74 = v95;
  v75 = v48;
  v76 = v44;
  v77 = v43;
  v78 = v42;
  v79 = v41;
  v80 = v40;
  v81 = v39;
  v82 = v38;
  v83 = v37;
  v84 = v36;
  v85 = v35;
  v86 = v34;
  v87 = v33;
  result = sub_1B8B440D4((uint64_t)&v66);
  v26 = v64;
  v27 = v53;
  *(_OWORD *)(v53 + 128) = v63;
  *(_OWORD *)(v27 + 144) = v26;
  *(_QWORD *)(v27 + 160) = v65;
  v28 = v60;
  *(_OWORD *)(v27 + 64) = v59;
  *(_OWORD *)(v27 + 80) = v28;
  v29 = v62;
  *(_OWORD *)(v27 + 96) = v61;
  *(_OWORD *)(v27 + 112) = v29;
  v30 = v56;
  *(_OWORD *)v27 = v55;
  *(_OWORD *)(v27 + 16) = v30;
  v31 = v58;
  *(_OWORD *)(v27 + 32) = v57;
  *(_OWORD *)(v27 + 48) = v31;
  return result;
}

uint64_t sub_1B8B3FC34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74657366666FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756C6F7362417369 && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B8B3FD28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD600);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B45808();
  sub_1B8B9C9B0();
  if (!v1)
  {
    v11 = 0;
    sub_1B8B9C7F4();
    v10 = 1;
    v7 = sub_1B8B9C7AC();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t sub_1B8B3FE7C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6364616F72427369 && a2 == 0xEB00000000747361)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B8B3FFD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD490);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B43D60();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
    v9 = sub_1B8B9C7A0();
    v11 = v10;
    v18 = v9;
    v20 = 1;
    v12 = sub_1B8B9C7A0();
    v14 = v13;
    v17 = v12;
    v19 = 2;
    v15 = sub_1B8B9C7AC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v14;
    *(_BYTE *)(a2 + 32) = v15;
  }
  return result;
}

uint64_t sub_1B8B40194(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874654D6E696F6ALL && a2 == 0xEB0000000073646FLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736C6961746564 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001B8BB8630 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6261746972577369 && a2 == 0xEA0000000000656CLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB8650 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B8BB8670)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1B8B404D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B43E70();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v47) = 0;
    v45 = sub_1B8B9C7A0();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4E0);
    v46 = 1;
    sub_1B8B43EB4(&qword_1EF1BD4E8, &qword_1EF1BD4E0, (uint64_t (*)(void))sub_1B8B43F18);
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    v44 = v10;
    v11 = v47;
    LOBYTE(v47) = 2;
    swift_bridgeObjectRetain();
    v12 = sub_1B8B9C7A0();
    v43 = v11;
    LOBYTE(v47) = 3;
    v14 = v13;
    swift_bridgeObjectRetain();
    v41 = sub_1B8B9C7A0();
    v42 = v14;
    LOBYTE(v47) = 4;
    v16 = v15;
    swift_bridgeObjectRetain();
    v39 = sub_1B8B9C7AC();
    v40 = a2;
    LOBYTE(v47) = 5;
    v17 = sub_1B8B9C7A0();
    v19 = v18;
    v37 = v17;
    v38 = v12;
    LOBYTE(v47) = 6;
    swift_bridgeObjectRetain();
    v20 = sub_1B8B9C7A0();
    v22 = v21;
    v36 = v20;
    LOBYTE(v47) = 7;
    swift_bridgeObjectRetain();
    v23 = sub_1B8B9C7A0();
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35 = v23;
    v26(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v16;
    swift_bridgeObjectRelease();
    v28 = v42;
    swift_bridgeObjectRelease();
    v29 = v43;
    swift_bridgeObjectRelease();
    v30 = v44;
    result = swift_bridgeObjectRelease();
    v32 = v40;
    *v40 = v45;
    v32[1] = v30;
    v33 = v38;
    v32[2] = v29;
    v32[3] = v33;
    v34 = v41;
    v32[4] = v28;
    v32[5] = v34;
    v32[6] = v27;
    *((_BYTE *)v32 + 56) = v39;
    v32[8] = v37;
    v32[9] = v19;
    v32[10] = v36;
    v32[11] = v22;
    v32[12] = v35;
    v32[13] = v25;
  }
  return result;
}

uint64_t sub_1B8B40A34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x696E6167724F7369 && a2 == 0xEB0000000072657ALL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65727275437369 && a2 == 0xED00007265735574 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x746E656D6D6F63 && a2 == 0xE700000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xED0000746E656741)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1B8B40EBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int16 v112;
  uint64_t v113;

  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD620);
  v5 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B45890();
  sub_1B8B9C9B0();
  v68 = a1;
  if (v2)
  {
    v75 = v2;
    v73 = 0;
    v74 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v69 = 0;
    v66 = 0;
    v67 = 0;
    v9 = 0;
    v76 = 0;
    v77 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v113 = 0;
    v13 = 0;
    v14 = 2;
    v15 = 2;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    v89 = v13;
    v90 = v113;
    v91 = v12;
    v92 = v77;
    v93 = v11;
    v94 = v67;
    v95 = v10;
    v96 = v76;
    v97 = v15;
    v98 = v14;
    v99 = v111;
    v100 = v112;
    v101 = v9;
    v102 = v66;
    v103 = v69;
    v104 = v72;
    v105 = v74;
    v106 = v71;
    v107 = v70;
    v108 = v73;
    v109 = 0;
    v110 = 0;
    return sub_1B8B3A7BC((uint64_t)&v89);
  }
  LOBYTE(v89) = 0;
  v8 = sub_1B8B9C7A0();
  v18 = v17;
  v64 = v8;
  LOBYTE(v89) = 1;
  swift_bridgeObjectRetain();
  v19 = sub_1B8B9C7A0();
  v113 = v18;
  v63 = v19;
  LOBYTE(v89) = 2;
  v21 = v20;
  swift_bridgeObjectRetain();
  v22 = sub_1B8B9C7A0();
  v77 = v21;
  v62 = v22;
  LOBYTE(v89) = 3;
  v24 = v23;
  swift_bridgeObjectRetain();
  v25 = sub_1B8B9C7A0();
  v67 = v24;
  v61 = v25;
  LOBYTE(v89) = 4;
  v27 = v26;
  swift_bridgeObjectRetain();
  v28 = sub_1B8B9C7AC();
  v76 = v27;
  v60 = v28;
  LOBYTE(v89) = 5;
  v59 = sub_1B8B9C7AC();
  LOBYTE(v89) = 6;
  v29 = sub_1B8B9C7A0();
  v31 = v30;
  v58 = v29;
  LOBYTE(v89) = 7;
  swift_bridgeObjectRetain();
  v32 = sub_1B8B9C7A0();
  v66 = v31;
  v69 = v32;
  LOBYTE(v89) = 8;
  v34 = v33;
  swift_bridgeObjectRetain();
  v74 = sub_1B8B9C7A0();
  v75 = 0;
  v72 = v34;
  v36 = v31;
  v37 = v24;
  LOBYTE(v89) = 9;
  v71 = v35;
  swift_bridgeObjectRetain();
  v38 = v75;
  v70 = sub_1B8B9C7A0();
  v73 = v39;
  v75 = v38;
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = 0;
    v70 = 0;
LABEL_9:
    v12 = v63;
    v13 = v64;
    v10 = v61;
    v11 = v62;
    v14 = v59;
    v15 = v60;
    v9 = v58;
    goto LABEL_4;
  }
  v88 = 10;
  swift_bridgeObjectRetain();
  v40 = v75;
  v41 = sub_1B8B9C7A0();
  v75 = v40;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v43 = v41;
  v44 = v42;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = v113;
  *(_QWORD *)&v78 = v64;
  *((_QWORD *)&v78 + 1) = v113;
  *(_QWORD *)&v79 = v63;
  *((_QWORD *)&v79 + 1) = v77;
  *(_QWORD *)&v80 = v62;
  *((_QWORD *)&v80 + 1) = v37;
  *(_QWORD *)&v81 = v61;
  *((_QWORD *)&v81 + 1) = v76;
  LOBYTE(v82) = v60;
  BYTE1(v82) = v59;
  *((_QWORD *)&v82 + 1) = v58;
  *(_QWORD *)&v83 = v36;
  v46 = v71;
  *((_QWORD *)&v83 + 1) = v69;
  *(_QWORD *)&v84 = v72;
  *((_QWORD *)&v84 + 1) = v74;
  *(_QWORD *)&v85 = v71;
  *((_QWORD *)&v85 + 1) = v70;
  *(_QWORD *)&v86 = v73;
  v57 = v43;
  *((_QWORD *)&v86 + 1) = v43;
  v87 = v44;
  sub_1B8B3A714((uint64_t)&v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v76;
  swift_bridgeObjectRelease();
  v48 = v66;
  swift_bridgeObjectRelease();
  v49 = v72;
  swift_bridgeObjectRelease();
  v50 = v46;
  swift_bridgeObjectRelease();
  v51 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  v89 = v64;
  v90 = v45;
  v91 = v63;
  v92 = v77;
  v93 = v62;
  v94 = v67;
  v95 = v61;
  v96 = v47;
  v97 = v60;
  v98 = v59;
  v101 = v58;
  v102 = v48;
  v103 = v69;
  v104 = v49;
  v105 = v74;
  v106 = v50;
  v107 = v70;
  v108 = v51;
  v109 = v57;
  v110 = v44;
  result = sub_1B8B3A7BC((uint64_t)&v89);
  v52 = v85;
  *(_OWORD *)(a2 + 96) = v84;
  *(_OWORD *)(a2 + 112) = v52;
  *(_OWORD *)(a2 + 128) = v86;
  *(_QWORD *)(a2 + 144) = v87;
  v53 = v81;
  *(_OWORD *)(a2 + 32) = v80;
  *(_OWORD *)(a2 + 48) = v53;
  v54 = v83;
  *(_OWORD *)(a2 + 64) = v82;
  *(_OWORD *)(a2 + 80) = v54;
  v55 = v79;
  *(_OWORD *)a2 = v78;
  *(_OWORD *)(a2 + 16) = v55;
  return result;
}

uint64_t sub_1B8B4178C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C706D6F437369 && a2 == 0xEB00000000646574;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B8B4188C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD4C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1B8B43E2C();
  sub_1B8B9C9B0();
  if (!v1)
  {
    v9[15] = 0;
    v7 = sub_1B8B9C7AC();
    v9[14] = 1;
    sub_1B8B9C7DC();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t sub_1B8B419E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x636E657571657266 && a2 == 0xE900000000000079;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B8B41ADC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD610);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B4584C();
  sub_1B8B9C9B0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_1B8B9C7DC();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_1B8B9C7C4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1B8B41C78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7472617473 && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7961446C6C417369 && a2 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6974616F6C467369 && a2 == 0xEA0000000000676ELL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736F706F72507369 && a2 == 0xEA00000000006465 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB85B0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B8BB85D0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x69546C6576617274 && a2 == 0xEA0000000000656DLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xEA00000000004449 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x4C79636176697270 && a2 == 0xEC0000006C657665 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x736D72616C61 && a2 == 0xE600000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6E65727275636572 && a2 == 0xEE00656C75526563 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6565646E65747461 && a2 == 0xE900000000000073 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6E697274536C7275 && a2 == 0xE900000000000067 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x6361747441736168 && a2 == 0xED0000746E656D68 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001B8BB85F0 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001B8BB8610 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x7461726765746E69 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 23;
    else
      return 24;
  }
}

void *sub_1B8B42630@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  _BYTE v98[808];
  _BYTE v99[808];
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[21];
  char v105;
  uint64_t v106;
  _QWORD v107[21];
  char v108;
  uint64_t v109;
  _OWORD v110[51];
  _QWORD *v111;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD428);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)((char *)&v110[9] + 8) = xmmword_1B8BA8260;
  *(_OWORD *)((char *)&v110[10] + 8) = 0u;
  *(_OWORD *)((char *)&v110[11] + 8) = 0u;
  *(_OWORD *)((char *)&v110[12] + 8) = 0u;
  *(_OWORD *)((char *)&v110[13] + 8) = 0u;
  *(_OWORD *)((char *)&v110[14] + 8) = 0u;
  *(_OWORD *)((char *)&v110[15] + 8) = 0u;
  *(_OWORD *)((char *)&v110[39] + 8) = 0u;
  *(_OWORD *)((char *)&v110[40] + 8) = 0u;
  *(_OWORD *)((char *)&v110[41] + 8) = 0u;
  *(_OWORD *)((char *)&v110[42] + 8) = 0u;
  *(_OWORD *)((char *)&v110[43] + 8) = 0u;
  *(_OWORD *)((char *)&v110[44] + 8) = 0u;
  BYTE8(v110[45]) = 0;
  memset(&v110[46], 0, 24);
  WORD4(v110[47]) = 514;
  memset(&v110[48], 0, 40);
  v9 = a1[3];
  v111 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1B8B43ADC();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
    sub_1B8B3A25C(*((uint64_t *)&v110[9] + 1), *(uint64_t *)&v110[10]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    v97 = a2;
    v99[0] = 0;
    v10 = sub_1B8B9C7A0();
    v12 = v11;
    *(_QWORD *)&v110[0] = v10;
    *((_QWORD *)&v110[0] + 1) = v11;
    v99[0] = 1;
    swift_bridgeObjectRetain();
    v13 = sub_1B8B9C7DC();
    v15 = v14;
    v95 = v10;
    v96 = v12;
    *(_QWORD *)&v110[1] = v13;
    *((_QWORD *)&v110[1] + 1) = v14;
    v98[0] = 2;
    v16 = v13;
    sub_1B8B43B20();
    swift_bridgeObjectRetain();
    sub_1B8B9C818();
    v93 = v16;
    v94 = v15;
    v17 = *(_OWORD *)&v99[40];
    v91 = *(_QWORD *)v99;
    v92 = *(_QWORD *)&v99[8];
    v110[2] = *(_OWORD *)v99;
    v90 = v99[16];
    LOBYTE(v110[3]) = v99[16];
    v89 = *(_QWORD *)&v99[24];
    *((_QWORD *)&v110[3] + 1) = *(_QWORD *)&v99[24];
    v88 = v99[32];
    LOBYTE(v110[4]) = v99[32];
    *(_OWORD *)((char *)&v110[4] + 8) = *(_OWORD *)&v99[40];
    v98[0] = 3;
    swift_bridgeObjectRetain();
    sub_1B8B9C818();
    v87 = v17;
    LODWORD(v16) = v99[32];
    v18 = *(_OWORD *)&v99[40];
    v83 = *(_QWORD *)v99;
    v84 = *(_QWORD *)&v99[24];
    *((_QWORD *)&v110[5] + 1) = *(_QWORD *)v99;
    v86 = *(_QWORD *)&v99[8];
    *(_QWORD *)&v110[6] = *(_QWORD *)&v99[8];
    v85 = v99[16];
    BYTE8(v110[6]) = v99[16];
    *(_QWORD *)&v110[7] = *(_QWORD *)&v99[24];
    BYTE8(v110[7]) = v99[32];
    v110[8] = *(_OWORD *)&v99[40];
    v99[0] = 4;
    swift_bridgeObjectRetain();
    v19 = sub_1B8B9C7AC();
    v80 = v18;
    v81 = v16;
    v82 = *((_QWORD *)&v18 + 1);
    LOBYTE(v110[9]) = v19;
    v99[0] = 5;
    LODWORD(v16) = v19;
    v20 = sub_1B8B9C7AC();
    v79 = v16;
    BYTE1(v110[9]) = v20;
    v99[0] = 6;
    LODWORD(v12) = v20;
    v21 = sub_1B8B9C7AC();
    v78 = v12;
    v77 = v21;
    BYTE2(v110[9]) = v21;
    v98[0] = 7;
    sub_1B8B43B64();
    sub_1B8B9C7D0();
    *((_QWORD *)&v110[9] + 1) = *(_QWORD *)v99;
    v110[10] = *(_OWORD *)&v99[8];
    v110[11] = *(_OWORD *)&v99[24];
    v110[12] = *(_OWORD *)&v99[40];
    v110[13] = *(_OWORD *)&v99[56];
    v110[14] = *(_OWORD *)&v99[72];
    v110[15] = *(_OWORD *)&v99[88];
    *(_QWORD *)&v110[16] = *(_QWORD *)&v99[104];
    v108 = 8;
    v76 = *(_QWORD *)&v99[104];
    v22 = *(_QWORD *)&v99[96];
    v66 = *(_QWORD *)&v99[88];
    v67 = *(_QWORD *)&v99[80];
    v68 = *(_QWORD *)&v99[72];
    v69 = *(_QWORD *)&v99[64];
    v70 = *(_QWORD *)v99;
    v71 = *(_QWORD *)&v99[8];
    v72 = *(_QWORD *)&v99[16];
    v73 = *(_OWORD *)&v99[24];
    v74 = *(_OWORD *)&v99[40];
    v75 = *(_QWORD *)&v99[56];
    sub_1B8B39E04(*(uint64_t *)v99, *(uint64_t *)&v99[8]);
    v65 = sub_1B8B43BA8();
    sub_1B8B9C7D0();
    v23 = v76;
    v64 = v22;
    sub_1B8B06074((uint64_t)&v109, (uint64_t)v107, &qword_1EF1BD388);
    sub_1B8B06074((uint64_t)v107, (uint64_t)&v110[16] + 8, &qword_1EF1BD388);
    v105 = 9;
    sub_1B8B43BEC(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B39E84);
    sub_1B8B9C7D0();
    sub_1B8B06074((uint64_t)&v106, (uint64_t)v104, &qword_1EF1BD388);
    sub_1B8B06074((uint64_t)v104, (uint64_t)&v110[27], &qword_1EF1BD388);
    v99[0] = 10;
    sub_1B8B43BEC(v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B39E84);
    v65 = sub_1B8B9C7B8();
    v63 = v24;
    *((_QWORD *)&v110[37] + 1) = v65;
    LOBYTE(v110[38]) = v24 & 1;
    v99[0] = 11;
    v61 = sub_1B8B9C7DC();
    v62 = v25;
    *((_QWORD *)&v110[38] + 1) = v61;
    *(_QWORD *)&v110[39] = v25;
    v99[0] = 12;
    swift_bridgeObjectRetain();
    v59 = sub_1B8B9C7A0();
    v60 = v26;
    *((_QWORD *)&v110[39] + 1) = v59;
    *(_QWORD *)&v110[40] = v26;
    v99[0] = 13;
    swift_bridgeObjectRetain();
    v57 = sub_1B8B9C7A0();
    v58 = v27;
    *((_QWORD *)&v110[40] + 1) = v57;
    *(_QWORD *)&v110[41] = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD450);
    v98[0] = 14;
    sub_1B8B43EB4(&qword_1EF1BD458, &qword_1EF1BD450, (uint64_t (*)(void))sub_1B8B43C50);
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    *((_QWORD *)&v110[41] + 1) = *(_QWORD *)v99;
    v99[0] = 15;
    v56 = *((_QWORD *)&v110[41] + 1);
    swift_bridgeObjectRetain();
    v54 = sub_1B8B9C7A0();
    v55 = v28;
    *(_QWORD *)&v110[42] = v54;
    *((_QWORD *)&v110[42] + 1) = v28;
    v99[0] = 16;
    swift_bridgeObjectRetain();
    v52 = sub_1B8B9C7A0();
    v53 = v29;
    *(_QWORD *)&v110[43] = v52;
    *((_QWORD *)&v110[43] + 1) = v29;
    v98[0] = 17;
    sub_1B8B43C94();
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    v30 = *(_QWORD *)&v99[8];
    v49 = *(_QWORD *)&v99[16];
    v50 = *(_QWORD *)v99;
    v110[44] = *(_OWORD *)v99;
    *(_QWORD *)&v110[45] = *(_QWORD *)&v99[16];
    v48 = v99[24];
    BYTE8(v110[45]) = v99[24];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD470);
    v98[0] = 18;
    sub_1B8B43EB4(&qword_1EF1BD478, &qword_1EF1BD470, (uint64_t (*)(void))sub_1B8B43CD8);
    v51 = v30;
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    *(_QWORD *)&v110[46] = *(_QWORD *)v99;
    v99[0] = 19;
    v47 = *(_QWORD *)&v110[46];
    swift_bridgeObjectRetain();
    v46 = sub_1B8B9C7A0();
    v32 = v31;
    *((_QWORD *)&v110[46] + 1) = v46;
    *(_QWORD *)&v110[47] = v31;
    v99[0] = 20;
    swift_bridgeObjectRetain();
    v45 = sub_1B8B9C7AC();
    BYTE8(v110[47]) = v45;
    v99[0] = 21;
    v44 = sub_1B8B9C7AC();
    BYTE9(v110[47]) = v44;
    v99[0] = 22;
    v42 = sub_1B8B9C7A0();
    v43 = v33;
    *(_QWORD *)&v110[48] = v42;
    *((_QWORD *)&v110[48] + 1) = v33;
    v100 = 23;
    sub_1B8B43D1C();
    swift_bridgeObjectRetain();
    sub_1B8B9C7D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v34 = v101;
    v35 = v102;
    v40 = v102;
    v41 = v101;
    v36 = v103;
    v39 = v103;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v98[16] = v93;
    *(_QWORD *)&v98[32] = v91;
    *(_QWORD *)&v98[40] = v92;
    v98[48] = v90;
    *(_QWORD *)&v98[56] = v89;
    v98[64] = v88;
    *(_OWORD *)&v98[72] = v87;
    *(_QWORD *)&v98[88] = v83;
    *(_QWORD *)&v98[96] = v86;
    v98[104] = v85;
    *(_QWORD *)&v98[112] = v84;
    v98[120] = v81;
    *(_QWORD *)&v98[128] = v80;
    v98[144] = v79;
    *(_QWORD *)&v110[49] = v34;
    *((_QWORD *)&v110[49] + 1) = v35;
    *(_QWORD *)&v110[50] = v36;
    *(_QWORD *)v98 = v95;
    *(_QWORD *)&v98[8] = v96;
    *(_QWORD *)&v98[24] = v94;
    *(_QWORD *)&v98[136] = v82;
    v98[145] = v78;
    v98[146] = v77;
    *(_QWORD *)&v98[152] = v70;
    *(_QWORD *)&v98[160] = v71;
    *(_QWORD *)&v98[168] = v72;
    *(_OWORD *)&v98[176] = v73;
    *(_OWORD *)&v98[192] = v74;
    *(_QWORD *)&v98[208] = v75;
    *(_QWORD *)&v98[216] = v69;
    *(_QWORD *)&v98[224] = v68;
    *(_QWORD *)&v98[232] = v67;
    *(_QWORD *)&v98[240] = v66;
    *(_QWORD *)&v98[248] = v64;
    *(_QWORD *)&v98[256] = v23;
    sub_1B8B06074((uint64_t)v107, (uint64_t)&v98[264], &qword_1EF1BD388);
    sub_1B8B06074((uint64_t)v104, (uint64_t)&v98[432], &qword_1EF1BD388);
    *(_QWORD *)&v98[600] = v65;
    v98[608] = v63 & 1;
    *(_QWORD *)&v98[616] = v61;
    *(_QWORD *)&v98[624] = v62;
    *(_QWORD *)&v98[632] = v59;
    *(_QWORD *)&v98[640] = v60;
    *(_QWORD *)&v98[648] = v57;
    *(_QWORD *)&v98[656] = v58;
    *(_QWORD *)&v98[664] = v56;
    *(_QWORD *)&v98[672] = v54;
    *(_QWORD *)&v98[680] = v55;
    *(_QWORD *)&v98[688] = v52;
    *(_QWORD *)&v98[696] = v53;
    *(_QWORD *)&v98[704] = v50;
    *(_QWORD *)&v98[712] = v51;
    *(_QWORD *)&v98[720] = v49;
    v98[728] = v48;
    *(_QWORD *)&v98[736] = v47;
    *(_QWORD *)&v98[744] = v46;
    v38[1] = v32;
    *(_QWORD *)&v98[752] = v32;
    v98[760] = v45;
    v98[761] = v44;
    *(_QWORD *)&v98[768] = v42;
    *(_QWORD *)&v98[776] = v43;
    *(_QWORD *)&v98[784] = v41;
    *(_QWORD *)&v98[792] = v40;
    *(_QWORD *)&v98[800] = v39;
    sub_1B8B39B48((uint64_t)v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B8B43BEC(v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A2DC);
    sub_1B8B43BEC(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B8B3A2DC);
    sub_1B8B3A25C(v70, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
    memcpy(v99, v110, sizeof(v99));
    sub_1B8B39FA4((uint64_t)v99);
    return memcpy(v97, v98, 0x328uLL);
  }
}

unint64_t sub_1B8B43ADC()
{
  unint64_t result;

  result = qword_1EF1BD430;
  if (!qword_1EF1BD430)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB148, &type metadata for FakeDataReader.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD430);
  }
  return result;
}

unint64_t sub_1B8B43B20()
{
  unint64_t result;

  result = qword_1EF1BD438;
  if (!qword_1EF1BD438)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB120, &type metadata for FakeDataReader.Event.Time);
    atomic_store(result, (unint64_t *)&qword_1EF1BD438);
  }
  return result;
}

unint64_t sub_1B8B43B64()
{
  unint64_t result;

  result = qword_1EF1BD440;
  if (!qword_1EF1BD440)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA69C, &type metadata for FakeDataReader.Event.VirtualConference);
    atomic_store(result, (unint64_t *)&qword_1EF1BD440);
  }
  return result;
}

unint64_t sub_1B8B43BA8()
{
  unint64_t result;

  result = qword_1EF1BD448;
  if (!qword_1EF1BD448)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA674, &type metadata for FakeDataReader.Event.Location);
    atomic_store(result, (unint64_t *)&qword_1EF1BD448);
  }
  return result;
}

_QWORD *sub_1B8B43BEC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20]);
  return a1;
}

unint64_t sub_1B8B43C50()
{
  unint64_t result;

  result = qword_1EF1BD460;
  if (!qword_1EF1BD460)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB0F8, &type metadata for FakeDataReader.Event.Alarm);
    atomic_store(result, (unint64_t *)&qword_1EF1BD460);
  }
  return result;
}

unint64_t sub_1B8B43C94()
{
  unint64_t result;

  result = qword_1EF1BD468;
  if (!qword_1EF1BD468)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB0D0, &type metadata for FakeDataReader.Event.RecurrenceRule);
    atomic_store(result, (unint64_t *)&qword_1EF1BD468);
  }
  return result;
}

unint64_t sub_1B8B43CD8()
{
  unint64_t result;

  result = qword_1EF1BD480;
  if (!qword_1EF1BD480)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB0A8, &type metadata for FakeDataReader.Event.Attendee);
    atomic_store(result, (unint64_t *)&qword_1EF1BD480);
  }
  return result;
}

unint64_t sub_1B8B43D1C()
{
  unint64_t result;

  result = qword_1EF1BD488;
  if (!qword_1EF1BD488)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA6C4, &type metadata for FakeDataReader.Event.Integration);
    atomic_store(result, (unint64_t *)&qword_1EF1BD488);
  }
  return result;
}

unint64_t sub_1B8B43D60()
{
  unint64_t result;

  result = qword_1EF1BD498;
  if (!qword_1EF1BD498)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB058, &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD498);
  }
  return result;
}

unint64_t sub_1B8B43DA4()
{
  unint64_t result;

  result = qword_1EF1BD4A8;
  if (!qword_1EF1BD4A8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB008, &type metadata for FakeDataReader.Event.Location.PredictedLOI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD4A8);
  }
  return result;
}

unint64_t sub_1B8B43DE8()
{
  unint64_t result;

  result = qword_1EF1BD4B8;
  if (!qword_1EF1BD4B8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAFB8, &type metadata for FakeDataReader.Event.Location.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD4B8);
  }
  return result;
}

unint64_t sub_1B8B43E2C()
{
  unint64_t result;

  result = qword_1EF1BD4C8;
  if (!qword_1EF1BD4C8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAF68, &type metadata for FakeDataReader.Event.Integration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD4C8);
  }
  return result;
}

unint64_t sub_1B8B43E70()
{
  unint64_t result;

  result = qword_1EF1BD4D8;
  if (!qword_1EF1BD4D8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAF18, &type metadata for FakeDataReader.Event.VirtualConference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD4D8);
  }
  return result;
}

uint64_t sub_1B8B43EB4(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0DEAF40], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8B43F18()
{
  unint64_t result;

  result = qword_1EF1BD4F0;
  if (!qword_1EF1BD4F0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA73C, &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod);
    atomic_store(result, (unint64_t *)&qword_1EF1BD4F0);
  }
  return result;
}

unint64_t sub_1B8B43F5C()
{
  unint64_t result;

  result = qword_1EF1BD500;
  if (!qword_1EF1BD500)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAEC8, &type metadata for FakeDataReader.Event.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD500);
  }
  return result;
}

unint64_t sub_1B8B43FA0()
{
  unint64_t result;

  result = qword_1EF1BD508;
  if (!qword_1EF1BD508)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA6EC, &type metadata for FakeDataReader.Event.Location.Coordinates);
    atomic_store(result, (unint64_t *)&qword_1EF1BD508);
  }
  return result;
}

unint64_t sub_1B8B43FE4()
{
  unint64_t result;

  result = qword_1EF1BD510;
  if (!qword_1EF1BD510)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA714, &type metadata for FakeDataReader.Event.Location.PredictedLOI);
    atomic_store(result, (unint64_t *)&qword_1EF1BD510);
  }
  return result;
}

uint64_t sub_1B8B44028(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B8B39F34(v4, v3);
  return a1;
}

uint64_t sub_1B8B440D4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B8B3A38C(v4, v3);
  return a1;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Location.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.VirtualConference.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B8B441E4 + 4 * byte_1B8BAA491[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B8B44218 + 4 * byte_1B8BAA48C[v4]))();
}

uint64_t sub_1B8B44218(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B44228);
  return result;
}

uint64_t sub_1B8B44234(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B4423CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B8B44240(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44248(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.VirtualConference.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.VirtualConference.CodingKeys;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Integration.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Integration.CodingKeys;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location.Coordinates.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Location.Coordinates.CodingKeys;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV5EventV8LocationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B8B442D8 + 4 * byte_1B8BAA49B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B8B4430C + 4 * byte_1B8BAA496[v4]))();
}

uint64_t sub_1B8B4430C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B4431CLL);
  return result;
}

uint64_t sub_1B8B44328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B44330);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B8B44334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B4433C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Location.PredictedLOI.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Location.PredictedLOI.CodingKeys;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV8DocumentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B8B443A4 + 4 * byte_1B8BAA4A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B8B443D8 + 4 * byte_1B8BAA4A0[v4]))();
}

uint64_t sub_1B8B443D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B443E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B443E8);
  return result;
}

uint64_t sub_1B8B443F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B443FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B8B44400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1B8B44500 + 4 * byte_1B8BAA4AF[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1B8B44534 + 4 * byte_1B8BAA4AA[v4]))();
}

uint64_t sub_1B8B44534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B4453C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B44544);
  return result;
}

uint64_t sub_1B8B44550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B44558);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1B8B4455C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Calendar.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Calendar.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B8B4465C + 4 * byte_1B8BAA4B9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B8B44690 + 4 * byte_1B8BAA4B4[v4]))();
}

uint64_t sub_1B8B44690(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B446A0);
  return result;
}

uint64_t sub_1B8B446AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B446B4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B8B446B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B446C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Calendar.CodingKeys()
{
  return &type metadata for FakeDataReader.Calendar.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Source.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B8B44728 + 4 * byte_1B8BAA4C3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B8B4475C + 4 * byte_1B8BAA4BE[v4]))();
}

uint64_t sub_1B8B4475C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B44764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B4476CLL);
  return result;
}

uint64_t sub_1B8B44778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B44780);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B8B44784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B4478C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Source.CodingKeys()
{
  return &type metadata for FakeDataReader.Source.CodingKeys;
}

uint64_t destroy for FakeDataReader.Event.Attendee()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Event.Attendee(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.Attendee(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FakeDataReader.Event.Attendee(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Attendee(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 152))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Attendee(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 152) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Attendee()
{
  return &type metadata for FakeDataReader.Event.Attendee;
}

uint64_t initializeWithCopy for FakeDataReader.Event.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for FakeDataReader.Event.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.RecurrenceRule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.RecurrenceRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.RecurrenceRule()
{
  return &type metadata for FakeDataReader.Event.RecurrenceRule;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Alarm(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Alarm(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Alarm()
{
  return &type metadata for FakeDataReader.Event.Alarm;
}

uint64_t destroy for FakeDataReader.Event.Time()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FakeDataReader.Event.Time(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FakeDataReader.Event.Time(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FakeDataReader.Event.Time(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeDataReader.Event.Time(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Time(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Time()
{
  return &type metadata for FakeDataReader.Event.Time;
}

unint64_t sub_1B8B45030()
{
  unint64_t result;

  result = qword_1EF1BD518;
  if (!qword_1EF1BD518)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA8E0, &type metadata for FakeDataReader.Source.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD518);
  }
  return result;
}

unint64_t sub_1B8B45078()
{
  unint64_t result;

  result = qword_1EF1BD520;
  if (!qword_1EF1BD520)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA998, &type metadata for FakeDataReader.Calendar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD520);
  }
  return result;
}

unint64_t sub_1B8B450C0()
{
  unint64_t result;

  result = qword_1EF1BD528;
  if (!qword_1EF1BD528)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAA50, &type metadata for FakeDataReader.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD528);
  }
  return result;
}

unint64_t sub_1B8B45108()
{
  unint64_t result;

  result = qword_1EF1BD530;
  if (!qword_1EF1BD530)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAB08, &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD530);
  }
  return result;
}

unint64_t sub_1B8B45150()
{
  unint64_t result;

  result = qword_1EF1BD538;
  if (!qword_1EF1BD538)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAABC0, &type metadata for FakeDataReader.Event.Location.PredictedLOI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD538);
  }
  return result;
}

unint64_t sub_1B8B45198()
{
  unint64_t result;

  result = qword_1EF1BD540;
  if (!qword_1EF1BD540)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAC78, &type metadata for FakeDataReader.Event.Location.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD540);
  }
  return result;
}

unint64_t sub_1B8B451E0()
{
  unint64_t result;

  result = qword_1EF1BD548;
  if (!qword_1EF1BD548)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAD30, &type metadata for FakeDataReader.Event.Integration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD548);
  }
  return result;
}

unint64_t sub_1B8B45228()
{
  unint64_t result;

  result = qword_1EF1BD550;
  if (!qword_1EF1BD550)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAADE8, &type metadata for FakeDataReader.Event.VirtualConference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD550);
  }
  return result;
}

unint64_t sub_1B8B45270()
{
  unint64_t result;

  result = qword_1EF1BD558;
  if (!qword_1EF1BD558)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAEA0, &type metadata for FakeDataReader.Event.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD558);
  }
  return result;
}

unint64_t sub_1B8B452B8()
{
  unint64_t result;

  result = qword_1EF1BD560;
  if (!qword_1EF1BD560)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAE10, &type metadata for FakeDataReader.Event.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD560);
  }
  return result;
}

unint64_t sub_1B8B45300()
{
  unint64_t result;

  result = qword_1EF1BD568;
  if (!qword_1EF1BD568)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAE38, &type metadata for FakeDataReader.Event.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD568);
  }
  return result;
}

unint64_t sub_1B8B45348()
{
  unint64_t result;

  result = qword_1EF1BD570;
  if (!qword_1EF1BD570)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAD58, &type metadata for FakeDataReader.Event.VirtualConference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD570);
  }
  return result;
}

unint64_t sub_1B8B45390()
{
  unint64_t result;

  result = qword_1EF1BD578;
  if (!qword_1EF1BD578)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAD80, &type metadata for FakeDataReader.Event.VirtualConference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD578);
  }
  return result;
}

unint64_t sub_1B8B453D8()
{
  unint64_t result;

  result = qword_1EF1BD580;
  if (!qword_1EF1BD580)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAACA0, &type metadata for FakeDataReader.Event.Integration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD580);
  }
  return result;
}

unint64_t sub_1B8B45420()
{
  unint64_t result;

  result = qword_1EF1BD588;
  if (!qword_1EF1BD588)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAACC8, &type metadata for FakeDataReader.Event.Integration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD588);
  }
  return result;
}

unint64_t sub_1B8B45468()
{
  unint64_t result;

  result = qword_1EF1BD590;
  if (!qword_1EF1BD590)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAABE8, &type metadata for FakeDataReader.Event.Location.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD590);
  }
  return result;
}

unint64_t sub_1B8B454B0()
{
  unint64_t result;

  result = qword_1EF1BD598;
  if (!qword_1EF1BD598)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAC10, &type metadata for FakeDataReader.Event.Location.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD598);
  }
  return result;
}

unint64_t sub_1B8B454F8()
{
  unint64_t result;

  result = qword_1EF1BD5A0;
  if (!qword_1EF1BD5A0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAB30, &type metadata for FakeDataReader.Event.Location.PredictedLOI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5A0);
  }
  return result;
}

unint64_t sub_1B8B45540()
{
  unint64_t result;

  result = qword_1EF1BD5A8;
  if (!qword_1EF1BD5A8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAB58, &type metadata for FakeDataReader.Event.Location.PredictedLOI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5A8);
  }
  return result;
}

unint64_t sub_1B8B45588()
{
  unint64_t result;

  result = qword_1EF1BD5B0;
  if (!qword_1EF1BD5B0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAA78, &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5B0);
  }
  return result;
}

unint64_t sub_1B8B455D0()
{
  unint64_t result;

  result = qword_1EF1BD5B8;
  if (!qword_1EF1BD5B8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAAAA0, &type metadata for FakeDataReader.Event.VirtualConference.JoinMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5B8);
  }
  return result;
}

unint64_t sub_1B8B45618()
{
  unint64_t result;

  result = qword_1EF1BD5C0;
  if (!qword_1EF1BD5C0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA9C0, &type metadata for FakeDataReader.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5C0);
  }
  return result;
}

unint64_t sub_1B8B45660()
{
  unint64_t result;

  result = qword_1EF1BD5C8;
  if (!qword_1EF1BD5C8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA9E8, &type metadata for FakeDataReader.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5C8);
  }
  return result;
}

unint64_t sub_1B8B456A8()
{
  unint64_t result;

  result = qword_1EF1BD5D0;
  if (!qword_1EF1BD5D0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA908, &type metadata for FakeDataReader.Calendar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5D0);
  }
  return result;
}

unint64_t sub_1B8B456F0()
{
  unint64_t result;

  result = qword_1EF1BD5D8;
  if (!qword_1EF1BD5D8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA930, &type metadata for FakeDataReader.Calendar.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5D8);
  }
  return result;
}

unint64_t sub_1B8B45738()
{
  unint64_t result;

  result = qword_1EF1BD5E0;
  if (!qword_1EF1BD5E0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA850, &type metadata for FakeDataReader.Source.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5E0);
  }
  return result;
}

unint64_t sub_1B8B45780()
{
  unint64_t result;

  result = qword_1EF1BD5E8;
  if (!qword_1EF1BD5E8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAA878, &type metadata for FakeDataReader.Source.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5E8);
  }
  return result;
}

unint64_t sub_1B8B457C4()
{
  unint64_t result;

  result = qword_1EF1BD5F8;
  if (!qword_1EF1BD5F8)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB608, &type metadata for FakeDataReader.Event.Time.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD5F8);
  }
  return result;
}

unint64_t sub_1B8B45808()
{
  unint64_t result;

  result = qword_1EF1BD608;
  if (!qword_1EF1BD608)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB5B8, &type metadata for FakeDataReader.Event.Alarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD608);
  }
  return result;
}

unint64_t sub_1B8B4584C()
{
  unint64_t result;

  result = qword_1EF1BD618;
  if (!qword_1EF1BD618)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB568, &type metadata for FakeDataReader.Event.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD618);
  }
  return result;
}

unint64_t sub_1B8B45890()
{
  unint64_t result;

  result = qword_1EF1BD628;
  if (!qword_1EF1BD628)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB518, &type metadata for FakeDataReader.Event.Attendee.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD628);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Attendee.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B8B45920 + 4 * byte_1B8BAA4CD[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B8B45954 + 4 * byte_1B8BAA4C8[v4]))();
}

uint64_t sub_1B8B45954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B4595C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B45964);
  return result;
}

uint64_t sub_1B8B45970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B45978);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B8B4597C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B45984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Attendee.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Attendee.CodingKeys;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.RecurrenceRule.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.RecurrenceRule.CodingKeys;
}

uint64_t _s13CalendarUIKit14FakeDataReaderV5EventV11IntegrationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B8B459FC + 4 * byte_1B8BAA4D7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B8B45A30 + 4 * byte_1B8BAA4D2[v4]))();
}

uint64_t sub_1B8B45A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B45A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B45A40);
  return result;
}

uint64_t sub_1B8B45A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B45A54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B8B45A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B45A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Alarm.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Alarm.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FakeDataReader.Event.Time.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B8B45AC8 + 4 * byte_1B8BAA4E1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B8B45AFC + 4 * byte_1B8BAA4DC[v4]))();
}

uint64_t sub_1B8B45AFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B45B04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B45B0CLL);
  return result;
}

uint64_t sub_1B8B45B18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B45B20);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B8B45B24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B45B2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FakeDataReader.Event.Time.CodingKeys()
{
  return &type metadata for FakeDataReader.Event.Time.CodingKeys;
}

unint64_t sub_1B8B45B4C()
{
  unint64_t result;

  result = qword_1EF1BD630;
  if (!qword_1EF1BD630)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB2C8, &type metadata for FakeDataReader.Event.Time.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD630);
  }
  return result;
}

unint64_t sub_1B8B45B94()
{
  unint64_t result;

  result = qword_1EF1BD638;
  if (!qword_1EF1BD638)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB380, &type metadata for FakeDataReader.Event.Alarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD638);
  }
  return result;
}

unint64_t sub_1B8B45BDC()
{
  unint64_t result;

  result = qword_1EF1BD640;
  if (!qword_1EF1BD640)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB438, &type metadata for FakeDataReader.Event.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD640);
  }
  return result;
}

unint64_t sub_1B8B45C24()
{
  unint64_t result;

  result = qword_1EF1BD648;
  if (!qword_1EF1BD648)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB4F0, &type metadata for FakeDataReader.Event.Attendee.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD648);
  }
  return result;
}

unint64_t sub_1B8B45C6C()
{
  unint64_t result;

  result = qword_1EF1BD650;
  if (!qword_1EF1BD650)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB460, &type metadata for FakeDataReader.Event.Attendee.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD650);
  }
  return result;
}

unint64_t sub_1B8B45CB4()
{
  unint64_t result;

  result = qword_1EF1BD658;
  if (!qword_1EF1BD658)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB488, &type metadata for FakeDataReader.Event.Attendee.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD658);
  }
  return result;
}

unint64_t sub_1B8B45CFC()
{
  unint64_t result;

  result = qword_1EF1BD660;
  if (!qword_1EF1BD660)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB3A8, &type metadata for FakeDataReader.Event.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD660);
  }
  return result;
}

unint64_t sub_1B8B45D44()
{
  unint64_t result;

  result = qword_1EF1BD668;
  if (!qword_1EF1BD668)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB3D0, &type metadata for FakeDataReader.Event.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD668);
  }
  return result;
}

unint64_t sub_1B8B45D8C()
{
  unint64_t result;

  result = qword_1EF1BD670;
  if (!qword_1EF1BD670)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB2F0, &type metadata for FakeDataReader.Event.Alarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD670);
  }
  return result;
}

unint64_t sub_1B8B45DD4()
{
  unint64_t result;

  result = qword_1EF1BD678;
  if (!qword_1EF1BD678)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB318, &type metadata for FakeDataReader.Event.Alarm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD678);
  }
  return result;
}

unint64_t sub_1B8B45E1C()
{
  unint64_t result;

  result = qword_1EF1BD680;
  if (!qword_1EF1BD680)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB238, &type metadata for FakeDataReader.Event.Time.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD680);
  }
  return result;
}

unint64_t sub_1B8B45E64()
{
  unint64_t result;

  result = qword_1EF1BD688;
  if (!qword_1EF1BD688)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB260, &type metadata for FakeDataReader.Event.Time.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD688);
  }
  return result;
}

uint64_t destroy for LocationView(uint64_t a1)
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return sub_1B8AE20FC(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for LocationView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_retain();
  v8 = v5;
  swift_retain();
  swift_retain();
  sub_1B8AE20B0(v6, v7);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  return a1;
}

uint64_t assignWithCopy for LocationView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 16);
  v5 = (void *)v2[2];
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 24) = v2[3];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = v2[4];
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  v7 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_1B8AE20B0(v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_1B8AE20FC(v8, v9);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LocationView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v4;
  sub_1B8AE20FC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationView()
{
  return &type metadata for LocationView;
}

uint64_t sub_1B8B461B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B461C0()
{
  __int128 *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  id v8;

  v6 = *v0;
  v7 = *((_QWORD *)v0 + 2);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEF0);
  MEMORY[0x1BCCB60C8](&v8, v1);
  v2 = v8;
  if (v8 && (v3 = objc_msgSend(v8, sel_title, v6, v7), v2, v3))
  {
    sub_1B8B9C17C();

    v4 = sub_1B8B9BE04();
    sub_1B8B9BDC8();
  }
  else
  {
    if (qword_1EF1BB4D0 != -1)
      swift_once();
    swift_retain();
    return 0;
  }
  return v4;
}

uint64_t sub_1B8B462D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  id v36;

  v2 = v1;
  v33 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD690);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD698);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6A0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6A8);
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_OWORD *)v1;
  v35 = *(_QWORD *)(v1 + 16);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEF0);
  MEMORY[0x1BCCB60C8](&v36, v15);
  v16 = v36;

  if (v16
    || (v17 = *(_QWORD *)(v1 + 48),
        v18 = *(unsigned __int8 *)(v2 + 56),
        sub_1B8AE20B0(*(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56)),
        v19 = sub_1B8B17940(v17, v18),
        sub_1B8AE20FC(v17, v18),
        (v19 & 1) != 0))
  {
    sub_1B8B465B4(v2, (uint64_t)v5);
    v23 = sub_1B8B9BA80();
    KeyPath = swift_getKeyPath();
    sub_1B8ADE850((uint64_t)v5, (uint64_t)v8, &qword_1EF1BD690);
    v25 = (uint64_t *)&v8[*(int *)(v6 + 36)];
    *v25 = KeyPath;
    v25[1] = v23;
    sub_1B8ADE894((uint64_t)v5, &qword_1EF1BD690);
    v26 = swift_getKeyPath();
    sub_1B8ADE850((uint64_t)v8, (uint64_t)v11, &qword_1EF1BD698);
    v27 = &v11[*(int *)(v9 + 36)];
    *(_QWORD *)v27 = v26;
    *((_QWORD *)v27 + 1) = 2;
    v27[16] = 0;
    sub_1B8ADE894((uint64_t)v8, &qword_1EF1BD698);
    *(_QWORD *)&v34 = sub_1B8B9BD98();
    swift_retain();
    v28 = sub_1B8B9BF30();
    sub_1B8ADE850((uint64_t)v11, (uint64_t)v14, &qword_1EF1BD6A0);
    swift_release();
    v22 = v32;
    *(_QWORD *)&v14[*(int *)(v32 + 36)] = v28;
    sub_1B8ADE894((uint64_t)v11, &qword_1EF1BD6A0);
    v21 = v33;
    sub_1B8B06074((uint64_t)v14, v33, &qword_1EF1BD6A8);
    v20 = 0;
  }
  else
  {
    v20 = 1;
    v22 = v32;
    v21 = v33;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v21, v20, 1, v22);
}

uint64_t sub_1B8B465B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  id v47;

  v42 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6B0);
  MEMORY[0x1E0C80A78](v41);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6B8);
  MEMORY[0x1E0C80A78](v5);
  v39 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6C0);
  v38 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v37 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B8B461C0();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  sub_1B8AE20B0(v16, v17);
  v18 = sub_1B8B17940(v16, v17);
  sub_1B8AE20FC(v16, v17);
  if ((v18 & 1) != 0)
  {
    v29 = (_OWORD *)swift_allocObject();
    v36[1] = v36;
    v30 = *(_OWORD *)(a1 + 16);
    v29[1] = *(_OWORD *)a1;
    v29[2] = v30;
    v29[3] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)((char *)v29 + 57) = *(_OWORD *)(a1 + 41);
    MEMORY[0x1E0C80A78](v29);
    v40 = v9;
    v36[-4] = v9;
    v36[-3] = v11;
    v36[-2] = v13;
    v36[-1] = v15;
    sub_1B8B46D58(a1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6D0);
    sub_1B8ADE950(&qword_1EF1BD6E0, &qword_1EF1BD6D0, MEMORY[0x1E0CDFB08]);
    v31 = v37;
    sub_1B8B9BEB8();
    v32 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v4, v31, v7);
    swift_storeEnumTagMultiPayload();
    sub_1B8ADE950(&qword_1EF1BD6D8, &qword_1EF1BD6C0, MEMORY[0x1E0CDFA50]);
    v33 = (uint64_t)v39;
    sub_1B8B9B870();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v7);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
    return sub_1B8B06074(v33, v42, &qword_1EF1BD6B8);
  }
  else
  {
    v39 = (char *)v7;
    v43 = *(_OWORD *)a1;
    v44 = *(_QWORD *)(a1 + 16);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCEF0);
    MEMORY[0x1BCCB60C8](&v47, v19);
    v20 = v47;

    if (v20)
    {
      v21 = sub_1B8B9B738();
      v40 = v9;
      v36[0] = v13;
      sub_1B8B46B38(v9, (uint64_t)&v43);
      v22 = v43;
      v23 = v44;
      v24 = v45;
      v25 = v46;
      *(_QWORD *)v4 = v21;
      *((_QWORD *)v4 + 1) = 0;
      v4[16] = 1;
      *(_OWORD *)(v4 + 24) = v22;
      *((_QWORD *)v4 + 5) = v23;
      v4[48] = v24;
      *((_QWORD *)v4 + 7) = v25;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      sub_1B8ADD7C0(*((uint64_t *)&v22 + 1), v23, v24);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B8ADD7C0(*((uint64_t *)&v22 + 1), v23, v24);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6D0);
      sub_1B8ADE950(&qword_1EF1BD6D8, &qword_1EF1BD6C0, MEMORY[0x1E0CDFA50]);
      sub_1B8ADE950(&qword_1EF1BD6E0, &qword_1EF1BD6D0, MEMORY[0x1E0CDFB08]);
      v26 = v42;
      sub_1B8B9B870();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B8ADDA88(*((uint64_t *)&v22 + 1), v23, v24);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B8ADDA88(*((uint64_t *)&v22 + 1), v23, v24);
      swift_bridgeObjectRelease();
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6C8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD6C8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v42, 1, 1, v35);
    }
  }
}

__n128 sub_1B8B46AA8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = sub_1B8B9B738();
  sub_1B8B46B38(a1, (uint64_t)&v9);
  v5 = v10;
  v6 = v11;
  v7 = v12;
  result = v9;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  return result;
}

uint64_t sub_1B8B46B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_1B8ADDBE4();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = sub_1B8B9BBAC();
  v6 = v5;
  v8 = v7 & 1;
  v9 = sub_1B8B9BB64();
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  sub_1B8ADDA88(v4, v6, v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v13;
  swift_retain();
  sub_1B8ADD7C0(v9, v11, v15);
  swift_bridgeObjectRetain();
  sub_1B8ADDA88(v9, v11, v15);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B46C58@<X0>(uint64_t a1@<X8>)
{
  return sub_1B8B462D8(a1);
}

uint64_t sub_1B8B46CA8()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_1B8AE20FC(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_1B8B46CF8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BBDC0);
  return sub_1B8B9BF48();
}

double sub_1B8B46D4C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B8B46AA8(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_1B8B46D58(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;

  v2 = *(void **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_BYTE *)(a1 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v5 = v2;
  sub_1B8AE20B0(v3, v4);
  return a1;
}

uint64_t sub_1B8B46DD0()
{
  return sub_1B8B46FB0(&qword_1EF1BD6E8, &qword_1EF1BD6F0, (uint64_t (*)(void))sub_1B8B46E04, MEMORY[0x1E0CE07A0]);
}

unint64_t sub_1B8B46E04()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD6F8;
  if (!qword_1EF1BD6F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD6A8);
    v2[0] = sub_1B8B46E88();
    v2[1] = sub_1B8ADE950(&qword_1EF1BC368, &qword_1EF1BC370, MEMORY[0x1E0CDBEE8]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD6F8);
  }
  return result;
}

unint64_t sub_1B8B46E88()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD700;
  if (!qword_1EF1BD700)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD6A0);
    v2[0] = sub_1B8B46F0C();
    v2[1] = sub_1B8ADE950(&qword_1EF1B9370, &qword_1EF1B9378, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD700);
  }
  return result;
}

unint64_t sub_1B8B46F0C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD708;
  if (!qword_1EF1BD708)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD698);
    v2[0] = sub_1B8B46FB0(&qword_1EF1BD710, &qword_1EF1BD690, sub_1B8B47014, MEMORY[0x1E0CDF698]);
    v2[1] = sub_1B8ADE950(&qword_1EF1B9350, &qword_1EF1B9358, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD708);
  }
  return result;
}

uint64_t sub_1B8B46FB0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1BCCB79D0](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8B47014()
{
  return sub_1B8B46FB0(&qword_1EF1BD718, &qword_1EF1BD6B8, (uint64_t (*)(void))sub_1B8B47038, MEMORY[0x1E0CE07A0]);
}

unint64_t sub_1B8B47038()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD720;
  if (!qword_1EF1BD720)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD6C8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BD6D8, &qword_1EF1BD6C0, MEMORY[0x1E0CDFA50]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BD6E0, &qword_1EF1BD6D0, MEMORY[0x1E0CDFB08]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CDB8A8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD720);
  }
  return result;
}

uint64_t EventDirectoryRecordModelObject.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v7 = v6;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  v26 = v10(v8, v9);
  v12 = v11;
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 24);
  swift_bridgeObjectRetain();
  v16 = v15(v13, v14);
  v18 = v17;
  v20 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 32);
  swift_bridgeObjectRetain();
  v22 = v21(v20, v19);
  v24 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v7;
  a2[2] = v26;
  a2[3] = v12;
  a2[4] = v16;
  a2[5] = v18;
  a2[6] = v22;
  a2[7] = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void EventDirectoryRecordModelObject.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
    goto LABEL_6;
  v3 = a1;
  v4 = objc_msgSend(v3, sel_preferredAddress);
  if (!v4)
  {

LABEL_6:
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v5 = v4;
  v23 = sub_1B8B9C17C();
  v7 = v6;

  v8 = objc_msgSend(v3, sel_displayName);
  if (v8)
  {
    v9 = v8;
    v10 = sub_1B8B9C17C();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  swift_bridgeObjectRetain();
  v13 = objc_msgSend(v3, sel_firstName);
  if (v13)
  {
    v14 = v13;
    v15 = sub_1B8B9C17C();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  swift_bridgeObjectRetain();
  v18 = objc_msgSend(v3, sel_lastName);
  if (v18)
  {
    v19 = v18;
    v20 = sub_1B8B9C17C();
    v22 = v21;

  }
  else
  {

    v20 = 0;
    v22 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t EventDirectoryRecordModelObject.displayName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventDirectoryRecordModelObject.displayName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventDirectoryRecordModelObject.displayName.modify())()
{
  return nullsub_1;
}

uint64_t EventDirectoryRecordModelObject.firstName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventDirectoryRecordModelObject.firstName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*EventDirectoryRecordModelObject.firstName.modify())()
{
  return nullsub_1;
}

uint64_t EventDirectoryRecordModelObject.lastName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventDirectoryRecordModelObject.lastName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*EventDirectoryRecordModelObject.lastName.modify())()
{
  return nullsub_1;
}

uint64_t EventDirectoryRecordModelObject.preferredAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventDirectoryRecordModelObject.preferredAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*EventDirectoryRecordModelObject.preferredAddress.modify())()
{
  return nullsub_1;
}

void __swiftcall EventDirectoryRecordModelObject.init(displayName:firstName:lastName:preferredAddress:)(CalendarUIKit::EventDirectoryRecordModelObject *__return_ptr retstr, Swift::String_optional displayName, Swift::String_optional firstName, Swift::String_optional lastName, Swift::String preferredAddress)
{
  retstr->displayName = displayName;
  retstr->firstName = firstName;
  retstr->lastName = lastName;
  retstr->preferredAddress = preferredAddress;
}

uint64_t EventDirectoryRecordModelObject.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[5];
  if (v0[1])
  {
    sub_1B8B9C980();
    swift_bridgeObjectRetain();
    sub_1B8B9C1E8();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
LABEL_6:
    sub_1B8B9C980();
    if (v2)
      goto LABEL_4;
LABEL_7:
    sub_1B8B9C980();
    goto LABEL_8;
  }
  sub_1B8B9C980();
  if (!v1)
    goto LABEL_6;
LABEL_3:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_7;
LABEL_4:
  sub_1B8B9C980();
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRetain();
  sub_1B8B9C1E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B47708()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B8B47740 + 4 * byte_1B8BAB720[*v0]))(0x4E79616C70736964, 0xEB00000000656D61);
}

uint64_t sub_1B8B47740()
{
  return 0x6D614E7473726966;
}

uint64_t sub_1B8B4775C()
{
  return 0x656D614E7473616CLL;
}

unint64_t sub_1B8B47774()
{
  return 0xD000000000000010;
}

uint64_t sub_1B8B47790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B8B483CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8B477B4()
{
  sub_1B8B47F6C();
  return sub_1B8B9C9E0();
}

uint64_t sub_1B8B477DC()
{
  sub_1B8B47F6C();
  return sub_1B8B9C9EC();
}

uint64_t EventDirectoryRecordModelObject.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD728);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v12[5] = v1[3];
  v12[6] = v7;
  v8 = v1[4];
  v12[3] = v1[5];
  v12[4] = v8;
  v9 = v1[6];
  v12[1] = v1[7];
  v12[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B47F6C();
  sub_1B8B9C9C8();
  v16 = 0;
  v10 = v12[7];
  sub_1B8B9C848();
  if (!v10)
  {
    v15 = 1;
    sub_1B8B9C848();
    v14 = 2;
    sub_1B8B9C848();
    v13 = 3;
    sub_1B8B9C86C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EventDirectoryRecordModelObject.hashValue.getter()
{
  sub_1B8B9C968();
  EventDirectoryRecordModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t EventDirectoryRecordModelObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD738);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8B47F6C();
  sub_1B8B9C9B0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v32 = 0;
    v9 = sub_1B8B9C7A0();
    v12 = v11;
    v28 = v9;
    v31 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_1B8B9C7A0();
    v15 = v14;
    v26 = v13;
    v27 = a2;
    v30 = 2;
    swift_bridgeObjectRetain();
    v16 = sub_1B8B9C7A0();
    v18 = v17;
    v25 = v16;
    v29 = 3;
    swift_bridgeObjectRetain();
    v19 = sub_1B8B9C7DC();
    v21 = v20;
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23 = v19;
    v22(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v27;
    *v27 = v28;
    v24[1] = v12;
    v24[2] = v26;
    v24[3] = v15;
    v24[4] = v25;
    v24[5] = v18;
    v24[6] = v23;
    v24[7] = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B47CC8()
{
  sub_1B8B9C968();
  EventDirectoryRecordModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B47D24()
{
  sub_1B8B9C968();
  EventDirectoryRecordModelObject.hash(into:)();
  return sub_1B8B9C998();
}

uint64_t sub_1B8B47D78@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return EventDirectoryRecordModelObject.init(from:)(a1, a2);
}

uint64_t sub_1B8B47D8C(_QWORD *a1)
{
  return EventDirectoryRecordModelObject.encode(to:)(a1);
}

uint64_t _s13CalendarUIKit31EventDirectoryRecordModelObjectV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = a2[1];
  v11 = a2[2];
  v13 = a2[3];
  v12 = a2[4];
  v15 = a2[5];
  v14 = a2[6];
  v16 = a2[7];
  if (!v3)
  {
    if (v10)
      return 0;
    goto LABEL_8;
  }
  if (!v10)
    return 0;
  if (*a1 == *a2 && v3 == v10)
    goto LABEL_8;
  v33 = a1[5];
  v34 = a2[5];
  v17 = a1[4];
  v18 = a2[7];
  v19 = a2[6];
  v20 = a1[7];
  v21 = a1[6];
  v22 = a2[4];
  v23 = sub_1B8B9C8D8();
  v12 = v22;
  v7 = v21;
  v9 = v20;
  v14 = v19;
  v16 = v18;
  v5 = v17;
  v8 = v33;
  v15 = v34;
  v24 = v23;
  result = 0;
  if ((v24 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v13)
        return 0;
      if (v4 != v11 || v6 != v13)
      {
        v26 = v7;
        v27 = v12;
        v28 = sub_1B8B9C8D8();
        v12 = v27;
        v7 = v26;
        v29 = v28;
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v8)
    {
      if (v15)
      {
        if (v5 != v12 || v8 != v15)
        {
          v30 = v7;
          v31 = sub_1B8B9C8D8();
          v7 = v30;
          v32 = v31;
          result = 0;
          if ((v32 & 1) == 0)
            return result;
        }
LABEL_24:
        if (v7 == v14 && v9 == v16)
          return 1;
        else
          return sub_1B8B9C8D8();
      }
    }
    else if (!v15)
    {
      goto LABEL_24;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1B8B47F6C()
{
  unint64_t result;

  result = qword_1EF1BD730;
  if (!qword_1EF1BD730)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB8F4, &type metadata for EventDirectoryRecordModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD730);
  }
  return result;
}

unint64_t sub_1B8B47FB4()
{
  unint64_t result;

  result = qword_1EF1BD740;
  if (!qword_1EF1BD740)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EventDirectoryRecordModelObject, &type metadata for EventDirectoryRecordModelObject);
    atomic_store(result, (unint64_t *)&qword_1EF1BD740);
  }
  return result;
}

_QWORD *initializeWithCopy for EventDirectoryRecordModelObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EventDirectoryRecordModelObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for EventDirectoryRecordModelObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventDirectoryRecordModelObject(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventDirectoryRecordModelObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventDirectoryRecordModelObject()
{
  return &type metadata for EventDirectoryRecordModelObject;
}

uint64_t storeEnumTagSinglePayload for EventDirectoryRecordModelObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B8B48274 + 4 * byte_1B8BAB729[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B8B482A8 + 4 * byte_1B8BAB724[v4]))();
}

uint64_t sub_1B8B482A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B482B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B8B482B8);
  return result;
}

uint64_t sub_1B8B482C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B8B482CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B8B482D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B8B482D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventDirectoryRecordModelObject.CodingKeys()
{
  return &type metadata for EventDirectoryRecordModelObject.CodingKeys;
}

unint64_t sub_1B8B482F8()
{
  unint64_t result;

  result = qword_1EF1BD748;
  if (!qword_1EF1BD748)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB8CC, &type metadata for EventDirectoryRecordModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD748);
  }
  return result;
}

unint64_t sub_1B8B48340()
{
  unint64_t result;

  result = qword_1EF1BD750;
  if (!qword_1EF1BD750)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB83C, &type metadata for EventDirectoryRecordModelObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF1BD750);
  }
  return result;
}

unint64_t sub_1B8B48388()
{
  unint64_t result;

  result = qword_1EF1BD758[0];
  if (!qword_1EF1BD758[0])
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAB864, &type metadata for EventDirectoryRecordModelObject.CodingKeys);
    atomic_store(result, qword_1EF1BD758);
  }
  return result;
}

uint64_t sub_1B8B483CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
  if (v2 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000 || (sub_1B8B9C8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B8BB86B0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B8B9C8D8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B8B485A4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B8B485AC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B8B48620(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1B8B486DC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B4871C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B48784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B487F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B8B48854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B488C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B8B4893C + 4 * byte_1B8BAB950[v10]))();
  }
}

void sub_1B8B489C0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1B8B48AB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B8B48B2CLL);
}

void sub_1B8B48ABC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B8B48AC4);
  JUMPOUT(0x1B8B48B2CLL);
}

void sub_1B8B48B08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B8B48B2CLL);
}

void sub_1B8B48B10()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B8B48B2CLL);
}

uint64_t sub_1B8B48B18(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1B8B48B24);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1B8B48B2CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for NavigationButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationButton);
}

uint64_t sub_1B8B48B50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B8B48B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC398);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = sub_1B8AF1F88();
  v8 = *(_QWORD *)(a1 + 24);
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v9 = sub_1B8B9B4EC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v18[-v14];
  v22 = v6;
  v23 = v8;
  v24 = v2;
  v19 = v6;
  v20 = v8;
  v21 = v2;
  sub_1B8B48EDC((uint64_t)sub_1B8B48F94);
  MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9470], v9);
  sub_1B8B06AE4((uint64_t)v13, v9, (uint64_t)v15);
  v16 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v16(v13, v9);
  sub_1B8AF2470((uint64_t)v15, v9, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v15, v9);
}

uint64_t sub_1B8B48CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B06AE4(v6, v9, (uint64_t)v8);
  sub_1B8AF2470((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
}

double sub_1B8B48D74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[6];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NavigationButton(0, a2, a3, a4) + 36));
  v7 = v6[1];
  v35 = *v6;
  v36 = v7;
  sub_1B8ADDBE4();
  swift_bridgeObjectRetain();
  v8 = sub_1B8B9BBAC();
  v10 = v9;
  v12 = v11 & 1;
  v13 = sub_1B8B9BB88();
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_1B8ADDA88(v8, v10, v12);
  swift_bridgeObjectRelease();
  v20 = sub_1B8B9C014();
  sub_1B8AEF8F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v31, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v19, v17);
  sub_1B8ADDA88(v13, v15, v19);
  swift_bridgeObjectRelease();
  result = *(double *)&v32;
  v23 = v33;
  v24 = v34;
  v25 = v31[2];
  v26 = v31[3];
  v28 = v31[4];
  v27 = v31[5];
  v30 = v31[0];
  v29 = v31[1];
  a5[6] = v32;
  a5[7] = v23;
  a5[8] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v28;
  a5[5] = v27;
  *a5 = v30;
  a5[1] = v29;
  return result;
}

uint64_t sub_1B8B48EDC(uint64_t a1)
{
  void (*v1)(void);

  v1 = (void (*)(void))MEMORY[0x1E0C80A78](a1);
  v1();
  return sub_1B8B9B4E0();
}

uint64_t sub_1B8B48F94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B48CE4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

double sub_1B8B48FA0@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1B8B48D74(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1B8B48FAC()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BC398);
  sub_1B8AF1F88();
  v0 = sub_1B8B9B4EC();
  return MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9470], v0);
}

uint64_t EventRecurrenceRuleModel.dateComponents.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F70);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1B8F68);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B8B9B288();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = sub_1B8B9B2B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  sub_1B8B9AF40();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 56);
  result = v12(a1, a2);
  if (result >= 1)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    switch(v14)
    {
      case 0:
        v12(a1, a2);
        goto LABEL_7;
      case 1:
        v15 = v12(a1, a2);
        if ((unsigned __int128)(v15 * (__int128)7) >> 64 != (7 * v15) >> 63)
        {
          __break(1u);
LABEL_10:
          type metadata accessor for EKRecurrenceFrequency(0);
          v16[1] = v14;
          sub_1B8B9C914();
          __break(1u);
          JUMPOUT(0x1B8B49288);
        }
LABEL_7:
        result = sub_1B8B9AEE0();
        break;
      case 2:
        v12(a1, a2);
        return sub_1B8B9AF28();
      case 3:
        v12(a1, a2);
        return sub_1B8B9AF10();
      default:
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.recurrenceEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.frequency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.interval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.firstDayOfTheWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.daysOfTheWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.daysOfTheMonth.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.daysOfTheYear.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.weeksOfTheYear.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.monthsOfTheYear.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of EventRecurrenceRuleModel.setPositions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of EventRecurrenceDayOfWeekModel.dayOfTheWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventRecurrenceEndModel.endDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventRecurrenceEndModel.occurrenceCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B8B49320(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  sub_1B8B3733C(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_1B8B17D8C(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B8B3733C(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B8B3733C(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_1B8B49464(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = MEMORY[0x1E0DEE9D8];
  sub_1B8B37550(0, v3 & ~(v3 >> 63), 0);
  v4 = v10;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1B8B9C728();
    swift_bridgeObjectRelease();
    if (!v6)
      return v4;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return v4;
  }
  if ((a1 & 0xC000000000000001) != 0)
    v7 = (id)MEMORY[0x1BCCB6800](0, a1);
  else
    v7 = *(id *)(a1 + 32);
  v8 = v7;
  sub_1B8B9C3EC();

  swift_release();
  return 0;
}

uint64_t (*EKRecurrenceRuleModelWrapper.ekRecurrenceRule.modify())()
{
  return nullsub_1;
}

id EKRecurrenceRuleModelWrapper.recurrenceEnd.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_recurrenceEnd);
  *a1 = result;
  return result;
}

CalendarUIKit::EKRecurrenceEndModelWrapper_optional __swiftcall EKRecurrenceEndModelWrapper.init(_:)(CalendarUIKit::EKRecurrenceEndModelWrapper_optional result)
{
  Class *v1;

  *v1 = result.value.ekRecurrenceEnd.super.isa;
  return result;
}

id EKRecurrenceRuleModelWrapper.frequency.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_frequency);
}

id EKRecurrenceRuleModelWrapper.interval.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_interval);
}

uint64_t EKRecurrenceRuleModelWrapper.firstDayOfTheWeek.getter()
{
  id *v0;
  unsigned int v1;
  uint64_t result;

  v1 = objc_msgSend(*v0, sel_firstDayOfTheWeekRaw);
  result = 1;
  switch(v1)
  {
    case 0u:
      return result;
    case 1u:
      result = 2;
      break;
    case 2u:
      result = 3;
      break;
    case 3u:
      result = 4;
      break;
    case 4u:
      result = 5;
      break;
    case 5u:
      result = 6;
      break;
    case 6u:
      result = 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t EKRecurrenceRuleModelWrapper.daysOfTheWeek.getter()
{
  id *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = objc_msgSend(*v0, sel_daysOfTheWeek);
  if (!v1)
    return (uint64_t)v1;
  sub_1B8B05B9C(0, &qword_1EF1BD7E0);
  v2 = sub_1B8B9C2F0();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_4;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1B8B9C728();
  swift_bridgeObjectRelease();
  if (!v3)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_4:
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  result = sub_1B8B37524(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v1 = v10;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1BCCB6800](v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      v9 = v10[2];
      v8 = v10[3];
      if (v9 >= v8 >> 1)
        sub_1B8B37524(v8 > 1, v9 + 1, 1);
      ++v5;
      v10[2] = v9 + 1;
      v10[v9 + 4] = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

id EKRecurrenceRuleModelWrapper.daysOfTheMonth.getter()
{
  return sub_1B8B498D4((SEL *)&selRef_daysOfTheMonth);
}

id EKRecurrenceRuleModelWrapper.daysOfTheYear.getter()
{
  return sub_1B8B498D4((SEL *)&selRef_daysOfTheYear);
}

id sub_1B8B498D4(SEL *a1)
{
  id *v1;
  id result;
  void *v3;
  unint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*v1, *a1);
  if (result)
  {
    v3 = result;
    sub_1B8B05B9C(0, &qword_1EF1BD7E8);
    v4 = sub_1B8B9C2F0();

    v5 = sub_1B8B49464(v4);
    swift_bridgeObjectRelease();
    return (id)v5;
  }
  return result;
}

id EKRecurrenceRuleModelWrapper.weeksOfTheYear.getter()
{
  return sub_1B8B498D4((SEL *)&selRef_weeksOfTheYear);
}

id EKRecurrenceRuleModelWrapper.monthsOfTheYear.getter()
{
  return sub_1B8B498D4((SEL *)&selRef_monthsOfTheYear);
}

id EKRecurrenceRuleModelWrapper.setPositions.getter()
{
  return sub_1B8B498D4((SEL *)&selRef_setPositions);
}

id sub_1B8B49974@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_recurrenceEnd);
  *a1 = result;
  return result;
}

id sub_1B8B499AC()
{
  id *v0;

  return objc_msgSend(*v0, sel_frequency);
}

id sub_1B8B499BC()
{
  id *v0;

  return objc_msgSend(*v0, sel_interval);
}

uint64_t sub_1B8B499CC()
{
  return EKRecurrenceRuleModelWrapper.firstDayOfTheWeek.getter();
}

id sub_1B8B499E8(uint64_t a1, uint64_t a2)
{
  return sub_1B8B49A00(a1, a2, (SEL *)&selRef_daysOfTheMonth);
}

id sub_1B8B499F4(uint64_t a1, uint64_t a2)
{
  return sub_1B8B49A00(a1, a2, (SEL *)&selRef_daysOfTheYear);
}

id sub_1B8B49A00(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id result;
  void *v5;
  unint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*v3, *a3);
  if (result)
  {
    v5 = result;
    sub_1B8B05B9C(0, &qword_1EF1BD7E8);
    v6 = sub_1B8B9C2F0();

    v7 = sub_1B8B49464(v6);
    swift_bridgeObjectRelease();
    return (id)v7;
  }
  return result;
}

id sub_1B8B49A78(uint64_t a1, uint64_t a2)
{
  return sub_1B8B49A00(a1, a2, (SEL *)&selRef_weeksOfTheYear);
}

id sub_1B8B49A84(uint64_t a1, uint64_t a2)
{
  return sub_1B8B49A00(a1, a2, (SEL *)&selRef_monthsOfTheYear);
}

id sub_1B8B49A90(uint64_t a1, uint64_t a2)
{
  return sub_1B8B49A00(a1, a2, (SEL *)&selRef_setPositions);
}

uint64_t (*EKRecurrenceDayOfWeekModelWrapper.ekRecurrenceDayOfWeek.modify())()
{
  return nullsub_1;
}

id EKRecurrenceDayOfWeekModelWrapper.dayOfTheWeek.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_dayOfTheWeek);
}

id EKRecurrenceDayOfWeekModelWrapper.weekNumber.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_weekNumber);
}

id sub_1B8B49ACC()
{
  id *v0;

  return objc_msgSend(*v0, sel_dayOfTheWeek);
}

id sub_1B8B49ADC()
{
  id *v0;

  return objc_msgSend(*v0, sel_weekNumber);
}

id EKRecurrenceEndModelWrapper.ekRecurrenceEnd.getter()
{
  id *v0;

  return *v0;
}

void EKRecurrenceEndModelWrapper.ekRecurrenceEnd.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKRecurrenceEndModelWrapper.ekRecurrenceEnd.modify())()
{
  return nullsub_1;
}

uint64_t EKRecurrenceEndModelWrapper.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_endDate);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B0D8();

    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id EKRecurrenceEndModelWrapper.occurrenceCount.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_occurrenceCount);
}

CalendarUIKit::EKRecurrenceEndModelWrapper __swiftcall EKRecurrenceEndModelWrapper.init(_:)(CalendarUIKit::EKRecurrenceEndModelWrapper result)
{
  CalendarUIKit::EKRecurrenceEndModelWrapper *v1;

  v1->ekRecurrenceEnd.super.isa = result.ekRecurrenceEnd.super.isa;
  return result;
}

uint64_t sub_1B8B49BC8@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_endDate);
  if (v3)
  {
    v4 = v3;
    sub_1B8B9B0D8();

    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1B8B9B0F0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id sub_1B8B49C4C()
{
  id *v0;

  return objc_msgSend(*v0, sel_occurrenceCount);
}

_UNKNOWN **sub_1B8B49C5C()
{
  return &protocol witness table for EKRecurrenceDayOfWeekModelWrapper;
}

_UNKNOWN **sub_1B8B49C68()
{
  return &protocol witness table for EKRecurrenceEndModelWrapper;
}

ValueMetadata *type metadata accessor for EKRecurrenceRuleModelWrapper()
{
  return &type metadata for EKRecurrenceRuleModelWrapper;
}

ValueMetadata *type metadata accessor for EKRecurrenceDayOfWeekModelWrapper()
{
  return &type metadata for EKRecurrenceDayOfWeekModelWrapper;
}

ValueMetadata *type metadata accessor for EKRecurrenceEndModelWrapper()
{
  return &type metadata for EKRecurrenceEndModelWrapper;
}

uint64_t *sub_1B8B49CBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_1B8B9B4A4();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v4 + v14;
    v19 = (char *)a2 + v14;
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1B8B49DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1B8B9B4A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_release();
}

_QWORD *sub_1B8B49EA8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1B8B9B4A4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1B8B49FB8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  if (a1 != a2)
  {
    sub_1B8ADE894((uint64_t)a1, &qword_1EF1BC250);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1B8B9B4A4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1B8B4A0F8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B8B9B4A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

char *sub_1B8B4A1E0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a1 != a2)
  {
    sub_1B8ADE894((uint64_t)a1, &qword_1EF1BC250);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_1B8B9B4A4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  swift_release();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release();
  return a1;
}

uint64_t sub_1B8B4A308()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B4A314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC258);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1B8B4A3C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B8B4A3D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC258);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for EditShareeView()
{
  uint64_t result;

  result = qword_1EF1BD7F8;
  if (!qword_1EF1BD7F8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B8B4A4B8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1B8B021E0(319, (unint64_t *)&qword_1EF1BC270, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD8E88], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87C8]);
  if (v0 <= 0x3F)
  {
    sub_1B8B021E0(319, &qword_1EF1BD808, (uint64_t (*)(uint64_t))type metadata accessor for EKShareeWithData, MEMORY[0x1E0CE0050]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1B8B4A584()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1B8B4A594(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for EditShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  sub_1B8B9BFCC();
  v4 = *(_QWORD *)(v20 + 24);
  v5 = *(_QWORD *)(v20 + 32);
  sub_1B8AF1CDC(v4, v5);
  swift_release();
  sub_1B8B9BFCC();
  v6 = *(id *)(v20 + 16);
  swift_release();
  v7 = objc_msgSend(v6, sel_name);

  if (v7)
  {
    v8 = sub_1B8B9C17C();
    v10 = v9;

    sub_1B8B9BFCC();
    v11 = *(id *)(v20 + 16);
    swift_release();
    v12 = objc_msgSend(v11, sel_emailAddress);

    if (v12)
    {
      v13 = sub_1B8B9C17C();
      v15 = v14;

      if ((a1 & 1) != 0)
      {
LABEL_4:
        v16 = sub_1B8B9BE04();
        v17 = sub_1B8B9BAB0();
        KeyPath = swift_getKeyPath();
        v19 = sub_1B8B9BDD4();
LABEL_7:
        *a2 = v8;
        a2[1] = v10;
        a2[2] = v13;
        a2[3] = v15;
        a2[4] = v4;
        a2[5] = v5;
        a2[6] = v16;
        a2[7] = KeyPath;
        a2[8] = v17;
        a2[9] = v19;
        a2[10] = 0x4043000000000000;
        return;
      }
    }
    else
    {
      v13 = 0;
      v15 = 0;
      if ((a1 & 1) != 0)
        goto LABEL_4;
    }
    v16 = 0;
    KeyPath = 0;
    v17 = 0;
    v19 = 0;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_1B8B4A760()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD910);
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for EditShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  sub_1B8B9BFCC();
  v1 = *(id *)(v7 + 16);
  swift_release();
  v2 = objc_allocWithZone(MEMORY[0x1E0C972A0]);
  v3 = v1;
  v4 = objc_msgSend(v2, sel_init);
  objc_msgSend(v4, sel_setIncludeIncludeManagedAppleIDs_, 1);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_initWithConfiguration_, v4);

  sub_1B8B4CD40();
  sub_1B8B9BC90();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD918);
  sub_1B8ADE950(&qword_1EF1BD920, &qword_1EF1BD918, (uint64_t)&unk_1B8BA5FB8);
  swift_getOpaqueTypeConformance2();
  return sub_1B8B9B4E0();
}

double sub_1B8B4A920@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;

  sub_1B8B4A594(0, v8);
  v2 = v8[1];
  result = v13;
  v4 = v9;
  v5 = v10;
  v6 = v11;
  v7 = v12;
  *(_QWORD *)a1 = v8[0];
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(double *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1B8B4A97C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD818);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v4 = sub_1B8B9B7A4();
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD828);
  sub_1B8B4AAD0(a1, (uint64_t)&v4[*(int *)(v5 + 44)]);
  v10 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB48);
  sub_1B8ADE950(&qword_1EF1BD820, &qword_1EF1BD818, MEMORY[0x1E0CDFCB8]);
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB50);
  v7 = sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
  v11 = v6;
  v12 = v7;
  swift_getOpaqueTypeConformance2();
  sub_1B8B9BD08();
  return sub_1B8ADE894((uint64_t)v4, &qword_1EF1BD818);
}

uint64_t sub_1B8B4AAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[7];
  _OWORD v61[2];
  _BYTE v62[145];
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  _BYTE v75[146];
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[17];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;

  v4 = sub_1B8B9B570();
  v5 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v58 = v5;
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD830);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD838);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD840);
  v14 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  v56 = v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD848);
  v52 = *(_QWORD *)(v54 - 8);
  v17 = MEMORY[0x1E0C80A78](v54);
  v48 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v49 = (char *)&v45 - v19;
  v51 = sub_1B8B9B738();
  sub_1B8B4B018((uint64_t)v60);
  *(_OWORD *)&v62[103] = v60[6];
  *(_OWORD *)&v62[87] = v60[5];
  *(_OWORD *)&v62[39] = v60[2];
  *(_OWORD *)&v62[23] = v60[1];
  *(_OWORD *)&v62[119] = v61[0];
  *(_OWORD *)&v62[129] = *(_OWORD *)((char *)v61 + 10);
  *(_OWORD *)&v62[55] = v60[3];
  v63 = 1;
  *(_OWORD *)&v62[71] = v60[4];
  *(_OWORD *)&v62[7] = v60[0];
  v47 = 1;
  v70 = *(_OWORD *)&v62[96];
  v71 = *(_OWORD *)&v62[112];
  v72 = *(_OWORD *)&v62[128];
  v73 = BYTE9(v61[1]);
  v66 = *(_OWORD *)&v62[32];
  v67 = *(_OWORD *)&v62[48];
  v68 = *(_OWORD *)&v62[64];
  v69 = *(_OWORD *)&v62[80];
  v64 = *(_OWORD *)v62;
  v65 = *(_OWORD *)&v62[16];
  v59 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD850);
  sub_1B8ADE950(&qword_1EF1BD858, &qword_1EF1BD850, MEMORY[0x1E0CE0678]);
  sub_1B8B9BAEC();
  v20 = sub_1B8ADE950(&qword_1EF1BD860, &qword_1EF1BD830, MEMORY[0x1E0CDD8A0]);
  sub_1B8B9BC54();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = v46;
  sub_1B8B9C044();
  v76 = v7;
  v77 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = sub_1B8ADBDEC(&qword_1EF1BC390, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9E80], MEMORY[0x1E0CD9E70]);
  v24 = v16;
  v25 = v50;
  v26 = v57;
  sub_1B8B9BD38();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v26);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v25);
  v76 = v25;
  v77 = v26;
  *(_QWORD *)v78 = OpaqueTypeConformance2;
  *(_QWORD *)&v78[8] = v23;
  swift_getOpaqueTypeConformance2();
  v27 = v48;
  v28 = v55;
  sub_1B8B9BCB4();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v28);
  v29 = v52;
  v30 = v49;
  v31 = v27;
  v32 = v27;
  v33 = v54;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v32, v54);
  v34 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v34(v31, v30, v33);
  v35 = v51;
  v74 = (unint64_t)v51;
  LOBYTE(v21) = v47;
  v75[0] = v47;
  *(_OWORD *)&v75[113] = v71;
  *(_OWORD *)&v75[97] = v70;
  *(_OWORD *)&v75[129] = v72;
  v75[145] = v73;
  *(_OWORD *)&v75[33] = v66;
  *(_OWORD *)&v75[49] = v67;
  *(_OWORD *)&v75[65] = v68;
  *(_OWORD *)&v75[81] = v69;
  *(_OWORD *)&v75[1] = v64;
  *(_OWORD *)&v75[17] = v65;
  v36 = *(_OWORD *)&v75[128];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v75[112];
  *(_OWORD *)(a2 + 144) = v36;
  *(_WORD *)(a2 + 160) = *(_WORD *)&v75[144];
  v37 = *(_OWORD *)&v75[64];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v75[48];
  *(_OWORD *)(a2 + 80) = v37;
  v38 = *(_OWORD *)&v75[96];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v75[80];
  *(_OWORD *)(a2 + 112) = v38;
  v39 = *(_OWORD *)v75;
  *(_OWORD *)a2 = v74;
  *(_OWORD *)(a2 + 16) = v39;
  v40 = *(_OWORD *)&v75[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v75[16];
  *(_OWORD *)(a2 + 48) = v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD868);
  v34((char *)(a2 + *(int *)(v41 + 48)), v31, v33);
  v42 = a2 + *(int *)(v41 + 64);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  sub_1B8B4C9CC((uint64_t)&v74);
  v43 = *(void (**)(char *, uint64_t))(v29 + 8);
  v43(v30, v33);
  v43(v31, v33);
  v84 = v70;
  v85 = v71;
  v86 = v72;
  v80 = v66;
  v81 = v67;
  v82 = v68;
  v83 = v69;
  *(_OWORD *)&v78[1] = v64;
  v76 = v35;
  v77 = 0;
  v78[0] = (_BYTE)v21;
  v87 = v73;
  v79 = v65;
  return sub_1B8B4CA08((uint64_t)&v76);
}

void sub_1B8B4B018(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[7];
  _BYTE v46[7];
  _BYTE v47[7];
  _BYTE v48[7];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[25];
  char v56;
  _QWORD v57[2];
  char v58;
  _BYTE v59[7];
  uint64_t v60;
  char v61;
  _BYTE v62[7];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  type metadata accessor for EditShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  sub_1B8B9BFCC();
  v2 = *(id *)(v57[0] + 16);
  swift_release();
  v3 = objc_msgSend(v2, sel_name);

  if (v3)
  {
    sub_1B8B9C17C();

    sub_1B8ADDBE4();
    v4 = sub_1B8B9BBAC();
    v6 = v5;
    v8 = v7 & 1;
    sub_1B8B9BA20();
    v9 = sub_1B8B9BB94();
    v11 = v10;
    v13 = v12;
    swift_release();
    v14 = v13 & 1;
    sub_1B8ADDA88(v4, v6, v8);
    swift_bridgeObjectRelease();
    sub_1B8B9BDC8();
    v15 = sub_1B8B9BB70();
    v17 = v16;
    v19 = v18 & 1;
    sub_1B8ADDA88(v9, v11, v14);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B8B9BA50();
    v20 = sub_1B8B9BB34();
    v22 = v21;
    LOBYTE(v9) = v23;
    v25 = v24;
    sub_1B8ADDA88(v15, v17, v19);
    swift_bridgeObjectRelease();
    LOBYTE(v15) = sub_1B8B9B9E4();
    sub_1B8B9B3E4();
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v34 = sub_1B8B9B9FC();
    sub_1B8B9B3E4();
    *(_DWORD *)v59 = *(_DWORD *)v48;
    *(_DWORD *)&v59[3] = *(_DWORD *)&v48[3];
    *(_DWORD *)v62 = *(_DWORD *)v47;
    *(_DWORD *)&v62[3] = *(_DWORD *)&v47[3];
    *(_DWORD *)&v68[3] = *(_DWORD *)&v46[3];
    *(_DWORD *)v68 = *(_DWORD *)v46;
    *(_DWORD *)&v70[3] = *(_DWORD *)&v45[3];
    *(_DWORD *)v70 = *(_DWORD *)v45;
    DWORD1(v50) = *(_DWORD *)&v48[3];
    *(_DWORD *)((char *)&v50 + 1) = *(_DWORD *)v48;
    DWORD1(v51) = *(_DWORD *)&v47[3];
    *(_DWORD *)((char *)&v51 + 1) = *(_DWORD *)v47;
    HIDWORD(v53) = *(_DWORD *)&v46[3];
    *(_QWORD *)&v49 = v20;
    *((_QWORD *)&v49 + 1) = v22;
    LOBYTE(v50) = v9 & 1;
    *((_QWORD *)&v50 + 1) = v25;
    LOBYTE(v51) = v15;
    *((_QWORD *)&v51 + 1) = v27;
    *(_QWORD *)&v52 = v29;
    *((_QWORD *)&v52 + 1) = v31;
    *(_QWORD *)&v53 = v33;
    BYTE8(v53) = 0;
    *(_DWORD *)((char *)&v53 + 9) = *(_DWORD *)v46;
    LOBYTE(v54) = v34;
    DWORD1(v54) = *(_DWORD *)&v45[3];
    *(_DWORD *)((char *)&v54 + 1) = *(_DWORD *)v45;
    *((_QWORD *)&v54 + 1) = v35;
    *(_QWORD *)v55 = v36;
    *(_QWORD *)&v55[8] = v37;
    *(_QWORD *)&v55[16] = v38;
    v55[24] = 0;
    v39 = v49;
    v40 = v50;
    v41 = v52;
    *(_OWORD *)(a1 + 32) = v51;
    *(_OWORD *)(a1 + 48) = v41;
    *(_OWORD *)a1 = v39;
    *(_OWORD *)(a1 + 16) = v40;
    v42 = v53;
    v43 = v54;
    v44 = *(_OWORD *)v55;
    *(_OWORD *)(a1 + 105) = *(_OWORD *)&v55[9];
    *(_OWORD *)(a1 + 80) = v43;
    *(_OWORD *)(a1 + 96) = v44;
    *(_OWORD *)(a1 + 64) = v42;
    v56 = 1;
    *(_QWORD *)(a1 + 128) = 0;
    *(_WORD *)(a1 + 136) = 256;
    v57[0] = v20;
    v57[1] = v22;
    v58 = v9 & 1;
    v60 = v25;
    v61 = v15;
    v63 = v27;
    v64 = v29;
    v65 = v31;
    v66 = v33;
    v67 = 0;
    v69 = v34;
    v71 = v35;
    v72 = v36;
    v73 = v37;
    v74 = v38;
    v75 = 0;
    sub_1B8B4CD8C((uint64_t)&v49);
    sub_1B8B4CDC8((uint64_t)v57);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1B8B4B38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[2];
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v50[0] = a1;
  v64 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD870);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  MEMORY[0x1E0C80A78](v3);
  v58 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD878);
  v5 = MEMORY[0x1E0C80A78](v61);
  v59 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v60 = (uint64_t)v50 - v7;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD880);
  MEMORY[0x1E0C80A78](v53);
  v50[1] = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD888);
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v51 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD890);
  v10 = MEMORY[0x1E0C80A78](v55);
  v52 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v54 = (uint64_t)v50 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD898);
  MEMORY[0x1E0C80A78](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8A0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8A8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8B0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v65 = (uint64_t)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v66 = (uint64_t)v50 - v24;
  v69 = a1;
  v70 = sub_1B8B9BD98();
  sub_1B8B9BC84();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8B8);
  sub_1B8ADE950(&qword_1EF1BD8C0, &qword_1EF1BD8B8, MEMORY[0x1E0CD9470]);
  sub_1B8B4CA64();
  sub_1B8B9BFC0();
  v25 = (void *)objc_opt_self();
  v70 = MEMORY[0x1BCCB5F78](objc_msgSend(v25, sel_cuik_tertiaryGroupedBackgroundColor));
  swift_retain();
  v26 = sub_1B8B9BF30();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v17, v14);
  swift_release();
  *(_QWORD *)&v20[*(int *)(v18 + 36)] = v26;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v27 = v65;
  sub_1B8ADE850((uint64_t)v20, v65, &qword_1EF1BD8A8);
  sub_1B8ADE894((uint64_t)v20, &qword_1EF1BD8A8);
  sub_1B8B06074(v27, v66, &qword_1EF1BD8B0);
  v28 = v50[0];
  v68 = v50[0];
  sub_1B8B4BFDC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8D0);
  v29 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD8D8);
  v30 = sub_1B8B4CAF0();
  v70 = v29;
  v71 = MEMORY[0x1E0DEAFA0];
  v72 = v30;
  v73 = MEMORY[0x1E0DEAFB8];
  swift_getOpaqueTypeConformance2();
  v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCC00);
  v32 = sub_1B8B182E0();
  v70 = v31;
  v71 = v32;
  swift_getOpaqueTypeConformance2();
  v33 = v51;
  sub_1B8B9BFC0();
  v70 = MEMORY[0x1BCCB5F78](objc_msgSend(v25, sel_cuik_tertiaryGroupedBackgroundColor));
  swift_retain();
  v34 = sub_1B8B9BF30();
  v35 = v56;
  v36 = (uint64_t)v52;
  v37 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v52, v33, v57);
  swift_release();
  *(_QWORD *)(v36 + *(int *)(v55 + 36)) = v34;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v37);
  v38 = v54;
  sub_1B8B06074(v36, v54, &qword_1EF1BD890);
  v67 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC908);
  sub_1B8ADE950(&qword_1EF1BCB68, &qword_1EF1BC908, MEMORY[0x1E0CDFA50]);
  v39 = v58;
  sub_1B8B9BFB4();
  v70 = MEMORY[0x1BCCB5F78](objc_msgSend(v25, sel_cuik_tertiaryGroupedBackgroundColor));
  swift_retain();
  v40 = sub_1B8B9BF30();
  v42 = v62;
  v41 = v63;
  v43 = (uint64_t)v59;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v39, v63);
  swift_release();
  *(_QWORD *)(v43 + *(int *)(v61 + 36)) = v40;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
  v44 = v60;
  sub_1B8B06074(v43, v60, &qword_1EF1BD878);
  v46 = v65;
  v45 = v66;
  sub_1B8ADE850(v66, v65, &qword_1EF1BD8B0);
  sub_1B8ADE850(v38, v36, &qword_1EF1BD890);
  sub_1B8ADE850(v44, v43, &qword_1EF1BD878);
  v47 = v64;
  sub_1B8ADE850(v46, v64, &qword_1EF1BD8B0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD900);
  sub_1B8ADE850(v36, v47 + *(int *)(v48 + 48), &qword_1EF1BD890);
  sub_1B8ADE850(v43, v47 + *(int *)(v48 + 64), &qword_1EF1BD878);
  sub_1B8ADE894(v44, &qword_1EF1BD878);
  sub_1B8ADE894(v38, &qword_1EF1BD890);
  sub_1B8ADE894(v45, &qword_1EF1BD8B0);
  sub_1B8ADE894(v43, &qword_1EF1BD878);
  sub_1B8ADE894(v36, &qword_1EF1BD890);
  return sub_1B8ADE894(v46, &qword_1EF1BD8B0);
}

uint64_t sub_1B8B4BB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a1;
  v30 = a2;
  v2 = type metadata accessor for EditShareeView();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v3;
  MEMORY[0x1E0C80A78](v2);
  v27 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC950);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD8D8);
  MEMORY[0x1E0C80A78](v25);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B9BFD8();
  swift_getKeyPath();
  sub_1B8B9BFF0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1B8B9BF00();
  v15 = sub_1B8B9BDA4();
  KeyPath = swift_getKeyPath();
  v31 = v15;
  swift_retain();
  v17 = sub_1B8B9B480();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v9);
  swift_release();
  v18 = (uint64_t *)&v14[*(int *)(v25 + 36)];
  *v18 = KeyPath;
  v18[1] = v17;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1B8B9BFCC();
  v19 = v31;
  swift_getKeyPath();
  v31 = v19;
  sub_1B8ADBDEC((unint64_t *)&qword_1EF1BC2E8, (uint64_t (*)(uint64_t))type metadata accessor for EKShareeWithData, (uint64_t)&unk_1B8BAD508);
  sub_1B8B9B2D0();
  swift_release();
  LOBYTE(v15) = *(_BYTE *)(v19 + 40);
  swift_release();
  LOBYTE(v31) = v15;
  v20 = v27;
  sub_1B8B4C92C(v26, v27);
  v21 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v22 = swift_allocObject();
  sub_1B8B4C974(v20, v22 + v21);
  sub_1B8B4CAF0();
  sub_1B8B9BD14();
  swift_release();
  return sub_1B8ADE894((uint64_t)v14, &qword_1EF1BD8D8);
}

uint64_t sub_1B8B4BE94@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_1B8B9B780();
  v2 = CUIKBundle();
  result = sub_1B8B9BBA0();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

void sub_1B8B4BF50(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  type metadata accessor for EditShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  sub_1B8B9BFCC();
  v3 = *(id *)(v5 + 16);
  swift_release();
  if (v2)
    v4 = 2;
  else
    v4 = 1;
  objc_msgSend(v3, sel_setShareeAccessLevel_, v4);

}

uint64_t sub_1B8B4BFDC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  sub_1B8B9B780();
  v0 = CUIKBundle();
  v1 = sub_1B8B9BBA0();
  v3 = v2;
  v5 = v4 & 1;
  sub_1B8B9B9F0();
  sub_1B8B9B3E4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCC00);
  sub_1B8B182E0();
  sub_1B8B9BC54();
  sub_1B8ADDA88(v1, v3, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8B4C118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v2 = type metadata accessor for EditShareeView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD908);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B8B9B3B4();
  v8 = sub_1B8B9B3C0();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  sub_1B8B4C92C(a1, (uint64_t)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = swift_allocObject();
  sub_1B8B4C974((uint64_t)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], v10 + v9);
  v13 = a1;
  return sub_1B8B9BEAC();
}

uint64_t sub_1B8B4C25C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1B8B9B4A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EditShareeView();
  (*(void (**)(void))(a1 + *(int *)(v6 + 24)))();
  sub_1B8B17628((uint64_t)v5);
  sub_1B8B9B498();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1B8B4C300(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_1B8B9B774();
  MEMORY[0x1E0C80A78](v2);
  sub_1B8B9B768();
  sub_1B8B9B75C();
  type metadata accessor for EditShareeView();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  sub_1B8B9BFCC();
  v3 = *(id *)(v9 + 16);
  swift_release();
  v4 = objc_msgSend(v3, sel_firstName);

  if (v4)
  {
    sub_1B8B9C17C();

    sub_1B8B9B750();
    swift_bridgeObjectRelease();
    sub_1B8B9B75C();
    sub_1B8B9B78C();
    v5 = CUIKBundle();
    *(_QWORD *)a1 = sub_1B8B9BBA0();
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7 & 1;
    *(_QWORD *)(a1 + 24) = v8;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1B8B4C4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v2 = sub_1B8B9B8B8();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BCB50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B8B9B8AC();
  v10 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC908);
  sub_1B8ADE950(&qword_1EF1BCB68, &qword_1EF1BC908, MEMORY[0x1E0CDFA50]);
  sub_1B8B9B438();
  v7 = sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
  MEMORY[0x1BCCB5A74](v6, v3, v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1B8B4C5F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v2 = type metadata accessor for EditShareeView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v5 = sub_1B8B9B198();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1B8B9C140();
  MEMORY[0x1E0C80A78](v6);
  sub_1B8B9C0F8();
  v7 = CUIKBundle();
  sub_1B8B9B15C();
  v12[1] = sub_1B8B9C1A0();
  v12[2] = v8;
  sub_1B8B4C92C(a1, (uint64_t)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = swift_allocObject();
  sub_1B8B4C974((uint64_t)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  sub_1B8ADDBE4();
  return sub_1B8B9BED0();
}

uint64_t sub_1B8B4C788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1B8B9B4A4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B8B17628((uint64_t)v3);
  sub_1B8B9B498();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1B8B4C808()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD810);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD818);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB48);
  sub_1B8ADE950(&qword_1EF1BD820, &qword_1EF1BD818, MEMORY[0x1E0CDFCB8]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BCB50);
  sub_1B8ADE950(&qword_1EF1BCB58, &qword_1EF1BCB50, MEMORY[0x1E0CD8910]);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return sub_1B8B9B558();
}

uint64_t sub_1B8B4C914()
{
  uint64_t v0;

  return sub_1B8B4A97C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B8B4C91C()
{
  uint64_t v0;

  return sub_1B8B4C4A8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B8B4C924()
{
  uint64_t v0;

  return sub_1B8B4C5F0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B8B4C92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditShareeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B4C974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditShareeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8B4C9B8()
{
  return sub_1B8B4CBA4((uint64_t (*)(uint64_t))sub_1B8B4C788);
}

uint64_t sub_1B8B4C9C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B4B38C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1B8B4C9CC(uint64_t a1)
{
  sub_1B8ADD7C0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B4CA08(uint64_t a1)
{
  sub_1B8ADDA88(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B4CA44()
{
  return sub_1B8B4A760();
}

unint64_t sub_1B8B4CA64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF1BD8C8;
  if (!qword_1EF1BD8C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD898);
    v2 = sub_1B8ADBDEC(&qword_1EF1B9380, MEMORY[0x1E0CDCFC8], MEMORY[0x1E0CDCFC0]);
    v3[0] = MEMORY[0x1E0CDF5A8];
    v3[1] = v2;
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF1BD8C8);
  }
  return result;
}

uint64_t sub_1B8B4CAE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B8B4BB4C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1B8B4CAF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF1BD8E0;
  if (!qword_1EF1BD8E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF1BD8D8);
    v2[0] = sub_1B8ADE950(&qword_1EF1BD8E8, &qword_1EF1BC950, MEMORY[0x1E0CDFC80]);
    v2[1] = sub_1B8ADE950(&qword_1EF1BD8F0, &qword_1EF1BD8F8, MEMORY[0x1E0CDCF88]);
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CD9C18], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF1BD8E0);
  }
  return result;
}

uint64_t sub_1B8B4CB8C()
{
  uint64_t v0;

  return sub_1B8B4C118(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B8B4CB98()
{
  return sub_1B8B4CBA4(sub_1B8B4C25C);
}

uint64_t sub_1B8B4CBA4(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditShareeView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_1B8B4CBE0(uint64_t a1@<X8>)
{
  sub_1B8B4C300(a1);
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for EditShareeView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = sub_1B8B9B4A4();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  v4 = v0 + v2 + *(int *)(v1 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD7F0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1B8B4CCEC(uint64_t a1, unsigned __int8 *a2)
{
  type metadata accessor for EditShareeView();
  sub_1B8B4BF50(a1, a2);
}

double sub_1B8B4CD38@<D0>(uint64_t a1@<X8>)
{
  return sub_1B8B4A920(a1);
}

unint64_t sub_1B8B4CD40()
{
  unint64_t result;

  result = qword_1EF1BE5B0;
  if (!qword_1EF1BE5B0)
  {
    result = MEMORY[0x1BCCB79D0](&unk_1B8BAE5DC, &type metadata for EKShareeView);
    atomic_store(result, (unint64_t *)&qword_1EF1BE5B0);
  }
  return result;
}

uint64_t sub_1B8B4CD8C(uint64_t a1)
{
  sub_1B8ADD7C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B8B4CDC8(uint64_t a1)
{
  sub_1B8ADDA88(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B8B4CE04()
{
  return sub_1B8ADE950(&qword_1EF1BD928, (uint64_t *)&unk_1EF1BD930, MEMORY[0x1E0CD9C68]);
}

uint64_t EventCalendarModel.displayColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int128 v8;

  v2 = (*(uint64_t (**)(void))(a2 + 80))();
  if (!v3)
    return 0;
  v4 = v2;
  v5 = v3;
  swift_bridgeObjectRetain();
  CUIKCalendarColor.init(_:)(v4, v5, (uint64_t)&v8);
  v6 = CUIKCalendarColor.displayColor.getter();
  swift_bridgeObjectRelease();
  return v6;
}

BOOL EventCalendarModel.isSharedToMe.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))() == 2;
}

BOOL EventCalendarModel.isLocalCalendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))() == 0;
}

uint64_t EventCalendarModel.isDelegate.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_1B8B9C50C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    v10 = 0;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v6 = v9;
    v5 = AssociatedTypeWitness;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10 & 1;
}

uint64_t dispatch thunk of EventCalendarModel.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventCalendarModel.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of EventCalendarModel.externalID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventCalendarModel.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EventCalendarModel.displayOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of EventCalendarModel.color.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of EventCalendarModel.allowsContentModifications.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of EventCalendarModel.sharingStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of EventCalendarModel.source.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of EventCalendarModel.isSubscribed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of EventCalendarModel.isHolidayCalendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of EventCalendarModel.isSubscribedHolidayCalendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of EventCalendarModel.isSuggestedEventCalendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of EventCalendarModel.allowsEvents.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of EventCalendarModel.allowsScheduling.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of EventCalendarModel.sharedOwnerAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of EventCalendarModel.sharedOwnerAddresses.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of EventCalendarModel.ownerIdentityAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of EventCalendarModel.ownerIdentityEmail.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of EventCalendarModel.ownerIdentityPhoneNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of EventCalendarModel.isDefaultCalendarForNewEvents.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

id CUIKCreateFamilyCalendarFlowControllerManagerImpl.__allocating_init(delegate:)()
{
  objc_class *v0;
  char *v1;
  id v2;
  objc_super v4;

  v1 = (char *)objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v4.receiver = v1;
  v4.super_class = v0;
  v2 = objc_msgSendSuper2(&v4, sel_init);
  swift_unknownObjectRelease();
  return v2;
}

id CUIKCreateFamilyCalendarFlowControllerManagerImpl.init(delegate:)()
{
  char *v0;
  id v1;
  objc_super v3;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController] = 0;
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CUIKCreateFamilyCalendarFlowControllerManagerImpl();
  v1 = objc_msgSendSuper2(&v3, sel_init);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t type metadata accessor for CUIKCreateFamilyCalendarFlowControllerManagerImpl()
{
  return objc_opt_self();
}

id sub_1B8B4D270()
{
  char *v0;
  char *v1;
  uint64_t FamilyCalendarFlow;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v15;

  v1 = v0;
  FamilyCalendarFlow = type metadata accessor for CreateFamilyCalendarFlow();
  MEMORY[0x1E0C80A78](FamilyCalendarFlow);
  v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController;
  v6 = *(void **)&v1[OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController];
  if (v6)
  {
    v7 = *(id *)&v1[OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController];
  }
  else
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    v9 = v1;
    CreateFamilyCalendarFlow.init(completion:)((uint64_t)sub_1B8B4D464, v8, v4);
    v10 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD950));
    v11 = (void *)sub_1B8B9B7D4();
    v12 = *(void **)&v1[v5];
    *(_QWORD *)&v1[v5] = v11;
    v7 = v11;

    v6 = 0;
  }
  v13 = v6;
  return v7;
}

void *sub_1B8B4D38C(void *a1, char a2, uint64_t a3)
{
  void *result;
  void *v6;
  id v7;
  void *v8;

  result = (void *)MEMORY[0x1BCCB7B38](a3 + OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl_delegate);
  v6 = result;
  if ((a2 & 1) != 0)
  {
    if (!result)
      return result;
    v7 = a1;
    v8 = (void *)sub_1B8B9B000();
    objc_msgSend(v6, sel_onFlowCompleteWithIsCalendarCreated_error_, 0, v8);
    sub_1B8B4D5E4(a1, 1);

  }
  else
  {
    if (!result)
      return result;
    objc_msgSend(result, sel_onFlowCompleteWithIsCalendarCreated_error_, 1, 0);
  }
  return (void *)swift_unknownObjectRelease();
}

uint64_t sub_1B8B4D440()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *sub_1B8B4D464(void *a1, char a2)
{
  uint64_t v2;

  return sub_1B8B4D38C(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

id CUIKCreateFamilyCalendarFlowControllerManagerImpl.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CUIKCreateFamilyCalendarFlowControllerManagerImpl.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CUIKCreateFamilyCalendarFlowControllerManagerImpl.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CUIKCreateFamilyCalendarFlowControllerManagerImpl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1B8B4D518@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B8B4D270();
  *a1 = result;
  return result;
}

void sub_1B8B4D540(void **a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*a2
             + OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController);
  *(_QWORD *)(*a2
            + OBJC_IVAR____TtC13CalendarUIKit49CUIKCreateFamilyCalendarFlowControllerManagerImpl____lazy_storage___viewController) = *a1;
  v3 = v2;

}

uint64_t method lookup function for CUIKCreateFamilyCalendarFlowControllerManagerImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CUIKCreateFamilyCalendarFlowControllerManagerImpl.__allocating_init(delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of CUIKCreateFamilyCalendarFlowControllerManagerImpl.viewController.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

void sub_1B8B4D5E4(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_1B8B4D5F0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B8B4D66C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1B8B9B36C();
}

uint64_t sub_1B8B4D6EC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  return swift_release();
}

uint64_t sub_1B8B4D754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = sub_1B8B9B0F0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  v9(v6, (uint64_t)v8, v2);
  swift_retain();
  sub_1B8B9B36C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

double sub_1B8B4D858@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1B8B4D8D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1B8B9B36C();
}

uint64_t sub_1B8B4D94C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1B8B4D9C8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1B8B9B36C();
}

uint64_t sub_1B8B4DA38@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1B8B4DAB4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1B8B9B36C();
}

uint64_t sub_1B8B4DB24()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1B8B4DB94()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  return swift_release();
}

double sub_1B8B4DBF8()
{
  double v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1B8B4DC68()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1B8B4DCD8()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1B8B9B360();
  swift_release();
  swift_release();
  return v1;
}

void sub_1B8B4DD48()
{
  uint64_t Strong;
  id v1;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = *(id *)(Strong + 16);
    swift_release();
    if (objc_msgSend(v1, sel_refresh))
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        sub_1B8B4DDF4();
        swift_release();
      }
    }

  }
}

void sub_1B8B4DDF4()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, sel_title);
  if (v2)
  {
    v3 = v2;
    v4 = sub_1B8B9C17C();
    v6 = v5;

    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1B8B9B36C();
    objc_msgSend(v1, sel_duration, v4, v6);
    v8 = v7;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1B8B9B36C();
    objc_msgSend(v1, sel_isAllDay, v8);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1B8B9B36C();
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v11) = 0;
    swift_retain();
    sub_1B8B9B36C();
    v9 = objc_msgSend(v1, sel_organizer, v11);
    v10 = *(void **)(v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer) = v9;

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1B8B4DFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel__title;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD9A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel__startDate;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF1BE9A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel__eventDuration;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD9A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel__allDay;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BD9B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel__pushAction;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF1BC9F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  return swift_deallocClassInstance();
}

uint64_t sub_1B8B4E0DC()
{
  return type metadata accessor for CUIKProposedTimeViewModel();
}

uint64_t type metadata accessor for CUIKProposedTimeViewModel()
{
  uint64_t result;

  result = qword_1EF1BD980;
  if (!qword_1EF1BD980)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B8B4E120()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_1B8B4E2BC(319, &qword_1EF1BD990);
  if (v0 <= 0x3F)
  {
    sub_1B8B4E268();
    if (v1 <= 0x3F)
    {
      sub_1B8B4E2BC(319, &qword_1EF1BE8E0);
      if (v2 <= 0x3F)
      {
        sub_1B8B4E2BC(319, (unint64_t *)&unk_1EF1BE8D0);
        if (v3 <= 0x3F)
        {
          sub_1B8B4E2BC(319, (unint64_t *)&unk_1EF1BE7D0);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_1B8B4E268()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF1BD998)
  {
    sub_1B8B9B0F0();
    v0 = sub_1B8B9B378();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF1BD998);
  }
}

void sub_1B8B4E2BC(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B8B9B378();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1B8B4E300()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1B8B4E30C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CUIKProposedTimeViewModel();
  result = sub_1B8B9B330();
  *a1 = result;
  return result;
}

id sub_1B8B4E370(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v34 = a2;
  v5 = sub_1B8B9C4A0();
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B8B9B0F0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - v12;
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9E8];
  *(_BYTE *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  v14 = a1;
  result = objc_msgSend(v14, sel_title);
  if (result)
  {
    v16 = result;
    v17 = sub_1B8B9C17C();
    v19 = v18;

    swift_beginAccess();
    v35 = v17;
    v36 = v19;
    sub_1B8B9B348();
    swift_endAccess();
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v21 = v34;
    v20(v13, (uint64_t)v34, v7);
    swift_beginAccess();
    v20(v11, (uint64_t)v13, v7);
    sub_1B8B9B348();
    v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v13, v7);
    swift_endAccess();
    objc_msgSend(v14, sel_duration);
    v24 = v23;
    swift_beginAccess();
    v35 = v24;
    sub_1B8B9B348();
    swift_endAccess();
    LOBYTE(v17) = objc_msgSend(v14, sel_isAllDay);
    swift_beginAccess();
    LOBYTE(v35) = v17;
    sub_1B8B9B348();
    swift_endAccess();
    swift_beginAccess();
    LOBYTE(v35) = 0;
    sub_1B8B9B348();
    swift_endAccess();
    v25 = objc_msgSend(v14, sel_organizer);
    v26 = *(void **)(v3 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC13CalendarUIKit25CUIKProposedTimeViewModel_organizer) = v25;

    v27 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v28 = v31;
    sub_1B8B9C4AC();

    swift_allocObject();
    swift_weakInit();
    sub_1B8B4E788();
    v29 = v33;
    sub_1B8B9B390();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v29);
    swift_beginAccess();
    sub_1B8B9B324();
    swift_endAccess();
    swift_release();
    v22(v21, v7);
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B8B4E75C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1B8B4E780()
{
  sub_1B8B4DD48();
}

unint64_t sub_1B8B4E788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF1BEA40;
  if (!qword_1EF1BEA40)
  {
    v1 = sub_1B8B9C4A0();
    result = MEMORY[0x1BCCB79D0](MEMORY[0x1E0CB1F20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF1BEA40);
  }
  return result;
}

id EKParticipantModelWrapper.ekParticipant.getter()
{
  id *v0;

  return *v0;
}

void EKParticipantModelWrapper.ekParticipant.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKParticipantModelWrapper.ekParticipant.modify())()
{
  return nullsub_1;
}

uint64_t EKParticipantModelWrapper.name.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_name);
}

uint64_t EKParticipantModelWrapper.emailAddress.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_emailAddress);
}

uint64_t EKParticipantModelWrapper.phoneNumber.getter()
{
  return sub_1B8AED0FC((SEL *)&selRef_phoneNumber);
}

uint64_t EKParticipantModelWrapper.url.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*v1, "URL");
  sub_1B8B9B030();

  v4 = sub_1B8B9B054();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

id EKParticipantModelWrapper.id.getter()
{
  id *v0;
  id result;
  void *v2;
  uint64_t v3;

  result = objc_msgSend(*v0, sel_UUID);
  if (result)
  {
    v2 = result;
    v3 = sub_1B8B9C17C();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id EKParticipantModelWrapper.isCurrentUser.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_isCurrentUser);
}

uint64_t EKParticipantModelWrapper.contactID.getter()
{
  return 0;
}

CalendarUIKit::EKParticipantModelWrapper __swiftcall EKParticipantModelWrapper.init(_:)(CalendarUIKit::EKParticipantModelWrapper result)
{
  CalendarUIKit::EKParticipantModelWrapper *v1;

  v1->ekParticipant.super.super.isa = result.ekParticipant.super.super.isa;
  return result;
}

CalendarUIKit::EKParticipantModelWrapper_optional __swiftcall EKParticipantModelWrapper.init(_:)(CalendarUIKit::EKParticipantModelWrapper_optional result)
{
  Class *v1;

  *v1 = result.value.ekParticipant.super.super.isa;
  return result;
}

uint64_t sub_1B8B4E930(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_name);
}

uint64_t sub_1B8B4E93C(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_emailAddress);
}

uint64_t sub_1B8B4E948(uint64_t a1, uint64_t a2)
{
  return sub_1B8AED284(a1, a2, (SEL *)&selRef_phoneNumber);
}

uint64_t sub_1B8B4E954@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*v1, "URL");
  sub_1B8B9B030();

  v4 = sub_1B8B9B054();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

id sub_1B8B4E9B8()
{
  id *v0;

  return objc_msgSend(*v0, sel_isCurrentUser);
}

id EKAttendeeModelWrapper.ekAttendee.getter()
{
  id *v0;

  return *v0;
}

void EKAttendeeModelWrapper.ekAttendee.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*EKAttendeeModelWrapper.ekAttendee.modify())()
{
  return nullsub_1;
}

id EKAttendeeModelWrapper.status.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantStatus);
}

id EKAttendeeModelWrapper.role.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantRole);
}

id EKAttendeeModelWrapper.type.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantType);
}

uint64_t EKAttendeeModelWrapper.comment.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_comment);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9C17C();

  return v3;
}

unint64_t sub_1B8B4EACC()
{
  unint64_t result;

  result = qword_1ED1B2DD0;
  if (!qword_1ED1B2DD0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKParticipantModelWrapper, &type metadata for EKParticipantModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED1B2DD0);
  }
  return result;
}

id sub_1B8B4EB14()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantStatus);
}

id sub_1B8B4EB24()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantRole);
}

id sub_1B8B4EB34()
{
  id *v0;

  return objc_msgSend(*v0, sel_participantType);
}

uint64_t sub_1B8B4EB44()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_comment);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B8B9C17C();

  return v3;
}

uint64_t (*EKOrganizerModelWrapper.ekOrganizer.modify())()
{
  return nullsub_1;
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV4nameSSSgvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV12emailAddressSSSgvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV11phoneNumberSSSgvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV3url10Foundation3URLVSgvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV2idSSvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV13isCurrentUserSbvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2) & 1;
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperV9contactIDSSSgvg_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

id EKOrganizerModelWrapper.scheduleAgent.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_scheduleAgent);
}

id _s13CalendarUIKit22EKAttendeeModelWrapperVyACSo0C0CcfC_0@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  a2[4] = &type metadata for EKParticipantModelWrapper;
  a2[5] = sub_1B8B4EACC();
  a2[1] = a1;
  return a1;
}

id _s13CalendarUIKit22EKAttendeeModelWrapperVyACSgSo0C0CSgcfC_0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;

  if (a1)
  {
    *(_QWORD *)a2 = a1;
    *(_QWORD *)(a2 + 32) = &type metadata for EKParticipantModelWrapper;
    v4 = a1;
    *(_QWORD *)(a2 + 40) = sub_1B8B4EACC();
    a1 = v4;
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return a1;
}

unint64_t sub_1B8B4EE98(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B4EEBC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8B4EEBC()
{
  unint64_t result;

  result = qword_1ED1B2DC8;
  if (!qword_1ED1B2DC8)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKParticipantModelWrapper, &type metadata for EKParticipantModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1ED1B2DC8);
  }
  return result;
}

unint64_t sub_1B8B4EF00(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B4EF24();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8B4EF24()
{
  unint64_t result;

  result = qword_1EF1B9578;
  if (!qword_1EF1B9578)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKAttendeeModelWrapper, &type metadata for EKAttendeeModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1B9578);
  }
  return result;
}

unint64_t sub_1B8B4EF68(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B4EF8C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8B4EF8C()
{
  unint64_t result;

  result = qword_1EF1B9568;
  if (!qword_1EF1B9568)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKAttendeeModelWrapper, &type metadata for EKAttendeeModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1B9568);
  }
  return result;
}

id sub_1B8B4EFD0()
{
  id *v0;

  return objc_msgSend(*v0, sel_scheduleAgent);
}

unint64_t sub_1B8B4EFE0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B4F004();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8B4F004()
{
  unint64_t result;

  result = qword_1EF1BD9B8;
  if (!qword_1EF1BD9B8)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKOrganizerModelWrapper, &type metadata for EKOrganizerModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1BD9B8);
  }
  return result;
}

unint64_t sub_1B8B4F048(uint64_t a1)
{
  unint64_t result;

  result = sub_1B8B4F06C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B8B4F06C()
{
  unint64_t result;

  result = qword_1EF1BD9C0;
  if (!qword_1EF1BD9C0)
  {
    result = MEMORY[0x1BCCB79D0](&protocol conformance descriptor for EKOrganizerModelWrapper, &type metadata for EKOrganizerModelWrapper);
    atomic_store(result, (unint64_t *)&qword_1EF1BD9C0);
  }
  return result;
}

uint64_t sub_1B8B4F0B0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = v1[4];
  v4 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  a1[1] = v6;
  return result;
}

ValueMetadata *type metadata accessor for EKParticipantModelWrapper()
{
  return &type metadata for EKParticipantModelWrapper;
}

uint64_t destroy for EKAttendeeModelWrapper(id *a1)
{
  uint64_t v1;

  v1 = (uint64_t)(a1 + 1);

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

void **assignWithCopy for EKAttendeeModelWrapper(void **a1, void **a2)
{
  void *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  id v7;

  v4 = (uint64_t *)(a2 + 1);
  v3 = *a2;
  v5 = *a1;
  *a1 = *a2;
  v6 = (uint64_t *)(a1 + 1);
  v7 = v3;

  __swift_assign_boxed_opaque_existential_1(v6, v4);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for EKAttendeeModelWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for EKAttendeeModelWrapper()
{
  return &type metadata for EKAttendeeModelWrapper;
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperVwcp_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  v9 = v3;
  v8(v4, v5, v7);
  return a1;
}

uint64_t _s13CalendarUIKit22EKAttendeeModelWrapperVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B8B4F40C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EKOrganizerModelWrapper()
{
  return &type metadata for EKOrganizerModelWrapper;
}

uint64_t EventVirtualConferenceModelObject.init(title:joinMethods:conferenceDetails:serializationBlockTitle:isWritable:source:firstPhoneNumber:urlWithAllowedScheme:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  v17 = type metadata accessor for EventVirtualConferenceModelObject(0);
  v18 = a9 + *(int *)(v17 + 40);
  v19 = sub_1B8B9B054();
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  v21 = a9 + *(int *)(v17 + 44);
  v20(v21, 1, 1, v19);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  sub_1B8AE3654(a11, v18);
  return sub_1B8AE3654(a12, v21);
}

uint64_t type metadata accessor for EventVirtualConferenceModelObject(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1B9550);
}

uint64_t EventVirtualConferenceJoinMethodModelObject.init(title:url:isBroadcast:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = type metadata accessor for EventVirtualConferenceJoinMethodModelObject(0);
  v11 = (uint64_t)a5 + *(int *)(v10 + 20);
  v12 = sub_1B8B9B054();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *a5 = a1;
  a5[1] = a2;
  result = sub_1B8AE3654(a3, v11);
  *((_BYTE *)a5 + *(int *)(v10 + 24)) = a4;
  return result;
}

uint64_t type metadata accessor for EventVirtualConferenceJoinMethodModelObject(uint64_t a1)
{
  return sub_1B8AE85C4(a1, (uint64_t *)&unk_1EF1BDA40);
}

uint64_t EventVirtualConferenceModelObject.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventVirtualConferenceModelObject.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventVirtualConferenceModelObject.title.modify())()
{
  return nullsub_1;
}

uint64_t EventVirtualConferenceModelObject.joinMethods.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EventVirtualConferenceModelObject.joinMethods.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*EventVirtualConferenceModelObject.joinMethods.modify())()
{
  return nullsub_1;
}

uint64_t EventVirtualConferenceModelObject.conferenceDetails.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventVirtualConferenceModelObject.conferenceDetails.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*EventVirtualConferenceModelObject.conferenceDetails.modify())()
{
  return nullsub_1;
}

uint64_t EventVirtualConferenceModelObject.serializationBlockTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EventVirtualConferenceModelObject.serializationBlockTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*EventVirtualConferenceModelObject.serializationBlockTitle.modify())()
{
  return nullsub_1;
}

uint64_t EventVirtualConferenceModelObject.isWritable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t EventVirtualConferenceModelObject.isWritable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*EventVirtualConferenceModelObject.isWritable.modify())()
{
  return nullsub_1;
}

uint64_t EventVirtualConferenceModelObject.source.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

