_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07A00;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D45898(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07A00;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D07A90;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07A90;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D45B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 600);
      v7 = *(_QWORD *)(a1 + 592);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D45D64(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  double *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  double v22;
  uint64_t *v23;
  char v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char v61;
  double v62;
  char v63;
  int v64;
  __int16 v65;
  char v66;
  char v67;

  v5 = (double *)(a1 + 8);
  v6 = *(uint64_t **)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v63 = *(_BYTE *)(a2 + 32);
  v10 = v63;
  v11 = *(_BYTE *)(a2 + 33);
  v67 = 0;
  if (v63 && v7 >= *v5)
  {
    v14 = &v63;
    v12 = v11;
    v67 = v63;
    v15 = v6;
    v16 = v7;
    v17 = *(double *)&v8;
    v13 = (unint64_t)v9;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = &v67;
    v15 = 0;
    v16 = 0.0;
    v17 = 0.0;
  }
  *v14 = 0;
  v66 = 0;
  if (v67 && ((v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    v21 = &v67;
    v61 = v12;
    v66 = v67;
    v20 = v13;
    v62 = v17;
    v22 = v16;
    v23 = v15;
  }
  else
  {
    v62 = 0.0;
    v61 = 0;
    v20 = 0;
    v21 = &v66;
    v22 = 0.0;
    v23 = 0;
  }
  *v21 = 0;
  v24 = v67;
  if (v67)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v13, v13);
    v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
    {
      v28 = *(double *)(a1 + 8);
      v29 = *(double *)(a1 + 16);
      if (v16 >= v28)
        v28 = v16;
      if (v29 >= v17)
        v29 = v17;
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        v26 = *(double *)(a1 + 8);
        if (v16 >= v26)
          v26 = v16;
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        v27 = *(double *)(a1 + 16);
        if (v27 >= v17)
          v27 = v17;
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v30 = *(double *)(a1 + 64);
      if (v16 < v30)
        v30 = v16;
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, v16);
      v25 = *(char **)(a1 + 112);
    }
    v31 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      v33 = 0x555555555555555;
      v34 = *(char **)(a1 + 104);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 4);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 < 0x2AAAAAAAAAAAAAALL)
        v33 = v36;
      if (v33)
      {
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        v34 = *(char **)(a1 + 104);
        v25 = *(char **)(a1 + 112);
      }
      else
      {
        v38 = 0;
      }
      v39 = v33 + 48 * v35;
      *(_QWORD *)v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(_QWORD *)(v39 + 24) = v13;
      v40 = v33 + 48 * v38;
      *(_BYTE *)(v39 + 32) = v24;
      *(_BYTE *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(_BYTE *)(v39 + 42) = 0;
      v32 = (_QWORD *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          v41 = *((_OWORD *)v25 - 3);
          v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        v34 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v39;
      *(_QWORD *)(a1 + 112) = v32;
      *(_QWORD *)(a1 + 120) = v40;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((_QWORD *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      v32 = v25 + 48;
      v25[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v32;
    if (!*(_BYTE *)(a1 + 264) || *(double *)(a1 + 240) <= v7)
    {
      *(_QWORD *)(a1 + 232) = v6;
      *(double *)(a1 + 240) = v7;
      *(double *)(a1 + 248) = *(double *)&v8;
      *(_QWORD *)(a1 + 256) = v9;
      *(_BYTE *)(a1 + 264) = v10;
      *(_BYTE *)(a1 + 265) = v11;
      if (!*(_BYTE *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
      {
        *(_QWORD *)(a1 + 152) = v6;
        *(double *)(a1 + 160) = v7;
        *(double *)(a1 + 168) = *(double *)&v8;
        *(_QWORD *)(a1 + 176) = v9;
        *(_BYTE *)(a1 + 184) = v10;
        *(_BYTE *)(a1 + 185) = v11;
      }
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((_BYTE *)v44 + 136) || *((double *)v44 + 14) <= v7)
      {
        v44[13] = v6;
        *((double *)v44 + 14) = v7;
        v44[15] = v8;
        v44[16] = v9;
        *((_BYTE *)v44 + 136) = v10;
        *((_BYTE *)v44 + 137) = v11;
        if (!*((_BYTE *)v44 + 56) || *((double *)v44 + 4) <= v7)
        {
          v44[3] = v6;
          *((double *)v44 + 4) = v7;
          v44[5] = v8;
          v44[6] = v9;
          *((_BYTE *)v44 + 56) = v10;
          *((_BYTE *)v44 + 57) = v11;
        }
      }
    }
  }
  v45 = v66;
  if (v66)
  {
    v46 = *(_QWORD *)(a1 + 488);
    v47 = *(_QWORD *)(a1 + 496);
    if (v46 >= v47)
    {
      v49 = *(_QWORD *)(a1 + 480);
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v51;
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      else
        v54 = 0;
      v55 = v53 + 40 * v50;
      v56 = v53 + 40 * v54;
      *(_QWORD *)v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(_QWORD *)(v55 + 24) = v20;
      *(_BYTE *)(v55 + 32) = v45;
      *(_BYTE *)(v55 + 33) = v61;
      *(_DWORD *)(v55 + 34) = v64;
      *(_WORD *)(v55 + 38) = v65;
      v48 = v55 + 40;
      v58 = *(char **)(a1 + 480);
      v57 = *(char **)(a1 + 488);
      if (v57 != v58)
      {
        do
        {
          v59 = *(_OWORD *)(v57 - 40);
          v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 480);
      }
      *(_QWORD *)(a1 + 480) = v55;
      *(_QWORD *)(a1 + 488) = v48;
      *(_QWORD *)(a1 + 496) = v56;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_QWORD *)v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(_QWORD *)(v46 + 24) = v20;
      *(_BYTE *)(v46 + 32) = v45;
      *(_BYTE *)(v46 + 33) = v61;
      *(_DWORD *)(v46 + 34) = v64;
      *(_WORD *)(v46 + 38) = v65;
      v48 = v46 + 40;
    }
    *(_QWORD *)(a1 + 488) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 626))
  {
    *(_BYTE *)(a1 + 628) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 628) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D46358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(_QWORD *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D46440(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _BYTE v18[52];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  v10 = *(void **)(a1 + 200);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  if (*(_QWORD *)(a1 + 288))
  {
    v11 = *(_QWORD **)(a1 + 272);
    v12 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 272) = a1 + 280;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 504));
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 628))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 628) = 0;
  }

}

void sub_1B7D46658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D466DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 640));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 624) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D46A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40E5794905);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D46BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D46E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 624))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D47A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D47B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((_QWORD *)a2 + 15);
  v6[2] = *((_QWORD *)a2 + 16);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D47C30(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsAverageSampleDuration::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[3].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7D47CF8(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  double v17;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)v12, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD **)(v6 + 128));
    v7 = v14;
    *(_QWORD *)(v5 + 48) = v13;
    v8 = v12[1];
    *(_OWORD *)v5 = v12[0];
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v12[2];
    *(_QWORD *)(a1 + 64) = v7;
    result = v17;
    v9 = v16;
    *(_OWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 88) = v9;
    *(double *)(a1 + 96) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v10 = a2[14];
  if (v10)
  {
    result = *(double *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, _QWORD *a3)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(a1 + 48) = 0;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (a3)
  {
    v5 = a3[3];
    v6 = a3[14];
    if (v6)
    {
      v4 = *(int8x16_t *)(v6 + 24);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = 1;
      v6 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    *(_QWORD *)a1 = a3[12];
    *(_QWORD *)(a1 + 8) = v5;
    v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 49) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v11);
    *(_QWORD *)(a1 + 56) = v11;
    v4.i64[0] = v14;
    v9 = v13;
    *(_OWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07B40;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(_BYTE *)(a1 + 578) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07B40;
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(_QWORD *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D48000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 584) = v4;
    v3 = v5;
  }

}

void sub_1B7D48060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 74, a2);
  v7 = a2;
  v4 = a1[74];
  v5 = a1[71];
  a1[71] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D481F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 576))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D4829C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 578))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 577))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 579))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 616);
    v18 = *(_QWORD *)(a1 + 624);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 608);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 616);
      v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 608);
      }
      *(_QWORD *)(a1 + 608) = v28;
      *(_QWORD *)(a1 + 616) = v21;
      *(_QWORD *)(a1 + 624) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D484F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 578))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 577))
    goto LABEL_5;
  v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_403);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 600);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;

  *(_BYTE *)(a1 + 577) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 608);
      v37 = *(__int128 **)(a1 + 616);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 616);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 616) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 608);
  v39 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544));
  }
  *(_BYTE *)(a1 + 578) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 580))
    {
      *(_BYTE *)(a1 + 580) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D48BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 578))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 578))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 577))
  {
    v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 600);
      *(_QWORD *)(a1 + 600) = v9;

      v8 = *(void **)(a1 + 600);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D48EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 576) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 576) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D49004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 576), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 336);
  if (v9 != (_QWORD *)(a1 + 344))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 344));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 544);
  for (k = *(int8x16_t **)(a1 + 552); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D4939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p[2];
  _BYTE v75[96];
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;

  v59 = a2;
  *(_BYTE *)(a1 + 576) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v102 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[64], 0, 32);
    v79 = 0;
    v78 = 0;
    *(_OWORD *)__p = 0u;
    memset(v75, 0, 58);
    v76 = 0;
    v77 = &v78;
    v80 = 0u;
    v81 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v67 = *(_QWORD *)(v95 + 64);
    v68 = *(_BYTE *)(v95 + 185);
    v69 = *(_BYTE *)(v95 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v72 = v4;
    v6 = *(_QWORD *)(v95 + 80);
    v5 = *(_QWORD *)(v95 + 88);
    v60 = (_QWORD *)v95;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v75)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)v75 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD **)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(_QWORD *)&v75[56] = v106;
      *(_QWORD *)&v75[64] = v107;
      if (*(_QWORD *)&v75[72])
      {
        *(_QWORD *)&v75[80] = *(_QWORD *)&v75[72];
        operator delete(*(void **)&v75[72]);
      }
      *(_OWORD *)&v75[72] = v108;
      *(_QWORD *)&v75[88] = v109;
      v109 = 0;
      v108 = 0uLL;
      v76 = v110;
    }
    v24 = (uint64_t *)v60[17];
    for (i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(_QWORD **)(*v24 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v78;
      v29 = &v78;
      v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x88uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      v34 = v106;
      v36 = v104;
      v35 = v105;
      v37 = (void *)*((_QWORD *)v33 + 13);
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v35;
      *((_QWORD *)v33 + 11) = v34;
      *((_QWORD *)v33 + 12) = v107;
      if (v37)
      {
        *((_QWORD *)v33 + 14) = v37;
        operator delete(v37);
        *((_QWORD *)v33 + 13) = 0;
        *((_QWORD *)v33 + 14) = 0;
        *((_QWORD *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v108;
      *((_QWORD *)v33 + 15) = v109;
      v109 = 0;
      v108 = 0uLL;
      *((_QWORD *)v33 + 16) = v110;
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v97;
  v44 = v98;
  if (v97 != v98)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v50 = (char *)v64[0];
          v45 = (char *)v64[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7D49AE0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  v8 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x2E0]);
  v9 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  v11 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[424];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[360];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D49F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 184), *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 4);
  v16 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = 0;
  v17 = (_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 208) = v16;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  v18 = *(_QWORD **)(a2 + 216);
  if (v18 != (_QWORD *)(a2 + 224))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v21 = (_QWORD *)(a1 + 224);
      if (v20 == v17)
        goto LABEL_12;
      v22 = v19;
      v23 = (_QWORD *)(a1 + 224);
      if (v19)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v21;
        else
          v26 = (uint64_t **)(a1 + 224);
        if (v19)
          v27 = (uint64_t **)(v21 + 1);
        else
          v27 = (uint64_t **)(a1 + 224);
        if (!*v27)
        {
LABEL_28:
          v30 = (char *)operator new(0x88uLL);
          *((_QWORD *)v30 + 4) = v18[4];
          v31 = *(_OWORD *)(v18 + 5);
          v32 = *(_OWORD *)(v18 + 7);
          v33 = *(_OWORD *)(v18 + 9);
          *((_QWORD *)v30 + 11) = v18[11];
          *(_OWORD *)(v30 + 72) = v33;
          *(_OWORD *)(v30 + 56) = v32;
          *(_OWORD *)(v30 + 40) = v31;
          v34 = v18[12];
          *((_QWORD *)v30 + 13) = 0;
          *((_QWORD *)v30 + 12) = v34;
          *((_QWORD *)v30 + 14) = 0;
          *((_QWORD *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((_QWORD *)v30 + 16) = v18[16];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 224);
        v26 = (uint64_t **)(a1 + 224);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v25)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v25)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v35 = (_QWORD *)v18[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v18[2];
          v24 = *v36 == (_QWORD)v18;
          v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (_QWORD *)(a2 + 224))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 216);
      v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 280), *(const void **)(a2 + 280), *(_QWORD *)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1B7D4A2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 192) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id *v13;
  id WeakRetained;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  __int128 *v39;
  __int128 v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t **i;
  uint64_t *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  __int128 v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  uint64_t **j;
  uint64_t *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v101;
  void *v102;
  id v103;
  id v104;
  id v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  void *__p;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[3];
  _QWORD *v116;
  _QWORD v117[3];
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _BYTE v121[24];
  _BYTE *v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v102 = (void *)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v102, v8);
  v101 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v13 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(a2 + 280);
      v17 = *(uint64_t **)(a2 + 288);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained(v13);
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend(v15, "containsObject:", v20) & 1) == 0)
            objc_msgSend(v15, "addObject:", v20);
        }

        ++v16;
      }
      v21 = (void *)objc_msgSend(v15, "copy");
      objc_msgSend(v12, "_setSources:", v21);

    }
  }

  v115[0] = &off_1E6D07D30;
  v116 = v115;
  v103 = v12;
  v22 = (uint64_t)v116;
  if (!v116)
    goto LABEL_22;
  if (v116 != v115)
  {
    v22 = (*(uint64_t (**)(void))(*v116 + 16))();
LABEL_22:
    v120 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v120 = v119;
  (*(void (**)(uint64_t, _QWORD *))(v115[0] + 24))((uint64_t)v115, v119);
LABEL_24:
  v122 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D07C10;
  v24 = v23 + 1;
  v25 = (uint64_t)v120;
  if (!v120)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v120 != v119)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v120 + 16))(v120, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v119[0] + 24))(v119);
LABEL_29:
  v122 = v23;
  v26 = v103;
  v27 = (void *)MEMORY[0x1E0CB6A28];
  v104 = v26;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = *(_OWORD *)(a2 + 136);
  v106 = *(_OWORD *)(a2 + 120);
  v107 = v29;
  v108 = *(_OWORD *)(a2 + 152);
  v30 = *(_QWORD *)(a2 + 176);
  v109 = *(_QWORD *)(a2 + 168);
  v110 = v30;
  v112 = 0;
  v113 = 0;
  v31 = *(const void **)(a2 + 184);
  v32 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v31, v32, (v32 - (uint64_t)v31) >> 4);
  v114 = *(_QWORD *)(a2 + 208);
  if (!v122)
    std::__throw_bad_function_call[abi:ne180100]();
  v33 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v122 + 48))(v122, &v106);
  v34 = *(double **)(v33 + 8);
  v35 = 0.0;
  while (v34 != *(double **)(v33 + 16))
  {
    v37 = *v34;
    v36 = v34[1];
    v34 += 2;
    v35 = v35 + v36 - v37;
  }
  objc_msgSend(v27, "quantityWithUnit:doubleValue:", v28, v35 + *(double *)(v33 + 32));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setDuration:", v38);

  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  v39 = (__int128 *)(a2 + 120);
  v40 = *(_OWORD *)(a2 + 136);
  v106 = *(_OWORD *)(a2 + 120);
  v107 = v40;
  v108 = *(_OWORD *)(a2 + 152);
  v42 = *(_QWORD *)(a2 + 176);
  v41 = *(const void **)(a2 + 184);
  v109 = *(_QWORD *)(a2 + 168);
  v110 = v42;
  v112 = 0;
  v113 = 0;
  v43 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v41, v43, (v43 - (uint64_t)v41) >> 4);
  v114 = *(_QWORD *)(a2 + 208);
  if (!v122)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v26, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v122 + 48))(v122, &v106));
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(v101 + 24) & 1) != 0)
  {
    v44 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v45 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v106, a2);
    for (i = (uint64_t **)v107; i; i = (uint64_t **)*i)
    {
      v47 = i[2];
      v48 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v122)
        std::__throw_bad_function_call[abi:ne180100]();
      v50 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)i + 3);
      v51 = *(double **)(v50 + 8);
      v52 = 0.0;
      while (v51 != *(double **)(v50 + 16))
      {
        v54 = *v51;
        v53 = v51[1];
        v51 += 2;
        v52 = v52 + v53 - v54;
      }
      objc_msgSend(v48, "quantityWithUnit:doubleValue:", v49, v52 + *(double *)(v50 + 32));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "setObject:forKeyedSubscript:", v55, v47);

      if (!v122)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)i + 3));
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "setObject:forKeyedSubscript:", v56, v47);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v106);
    objc_msgSend(v104, "setDurationBySource:", v44);
    objc_msgSend(v104, "setDataCountBySource:", v45);

  }
  v57 = v122;
  if (v122 == v121)
  {
    v58 = 4;
    v57 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_52;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_52:
  v59 = v120;
  if (v120 == v119)
  {
    v60 = 4;
    v59 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_57;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_57:
  v61 = (uint64_t)v116;
  if (!v116)
  {
LABEL_60:
    v118 = (_QWORD *)v61;
    goto LABEL_62;
  }
  if (v116 != v115)
  {
    v61 = (*(uint64_t (**)(void))(*v116 + 16))();
    goto LABEL_60;
  }
  v118 = v117;
  (*(void (**)(uint64_t, _QWORD *))(v115[0] + 24))((uint64_t)v115, v117);
LABEL_62:
  v122 = 0;
  v62 = operator new(0x28uLL);
  *v62 = &off_1E6D07CA0;
  v63 = (uint64_t)v118;
  if (!v118)
  {
LABEL_65:
    v62[4] = v63;
    goto LABEL_67;
  }
  if (v118 != v117)
  {
    v63 = (*(uint64_t (**)(void))(*v118 + 16))();
    goto LABEL_65;
  }
  v62[4] = v62 + 1;
  (*(void (**)(_QWORD *))(v117[0] + 24))(v117);
LABEL_67:
  v122 = v62;
  v105 = v104;
  v64 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = *(_OWORD *)(a2 + 136);
  v106 = *v39;
  v107 = v66;
  v108 = *(_OWORD *)(a2 + 152);
  v68 = *(_QWORD *)(a2 + 176);
  v67 = *(const void **)(a2 + 184);
  v109 = *(_QWORD *)(a2 + 168);
  v110 = v68;
  v112 = 0;
  v113 = 0;
  v69 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v67, v69, (v69 - (uint64_t)v67) >> 4);
  v114 = *(_QWORD *)(a2 + 208);
  if (!v122)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v64, "quantityWithUnit:doubleValue:", v65, *(double *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v122 + 48))(v122, &v106));
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v105, "setDuration:", v70);

  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  v71 = *(_OWORD *)(a2 + 136);
  v106 = *v39;
  v107 = v71;
  v108 = *(_OWORD *)(a2 + 152);
  v73 = *(_QWORD *)(a2 + 176);
  v72 = *(const void **)(a2 + 184);
  v109 = *(_QWORD *)(a2 + 168);
  v110 = v73;
  v112 = 0;
  v113 = 0;
  v74 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v72, v74, (v74 - (uint64_t)v72) >> 4);
  v114 = *(_QWORD *)(a2 + 208);
  if (!v122)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v105, "setDataCount:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v122 + 48))(v122, &v106) + 8));
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  v75 = *(_OWORD *)(a2 + 136);
  v106 = *v39;
  v107 = v75;
  v108 = *(_OWORD *)(a2 + 152);
  v77 = *(_QWORD *)(a2 + 176);
  v76 = *(const void **)(a2 + 184);
  v109 = *(_QWORD *)(a2 + 168);
  v110 = v77;
  v112 = 0;
  v113 = 0;
  v78 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v76, v78, (v78 - (uint64_t)v76) >> 4);
  v114 = *(_QWORD *)(a2 + 208);
  if (!v122)
    std::__throw_bad_function_call[abi:ne180100]();
  v79 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v122 + 48))(v122, &v106);
  v80 = *(double *)(v79 + 24);
  v81 = *(double *)(v79 + 32);
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v105, "setMostRecentQuantityDateInterval:", v82);

  if ((*(_BYTE *)(v101 + 24) & 1) != 0)
  {
    v83 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v106, a2);
    for (j = (uint64_t **)v107; j; j = (uint64_t **)*j)
    {
      v87 = j[2];
      v88 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v122)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(v88, "quantityWithUnit:doubleValue:", v89, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)j + 3));
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "setObject:forKeyedSubscript:", v90, v87);

      if (!v122)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)j + 3) + 8));
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v84, "setObject:forKeyedSubscript:", v91, v87);

      if (!v122)
        std::__throw_bad_function_call[abi:ne180100]();
      v92 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)j + 3);
      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v92 + 24), *(double *)(v92 + 32));
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v93, v87);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v106);
    objc_msgSend(v105, "setDurationBySource:", v83);
    objc_msgSend(v105, "setDataCountBySource:", v84);
    objc_msgSend(v105, "setMostRecentQuantityDateIntervalBySource:", v85);

  }
  v94 = v122;
  if (v122 == v121)
  {
    v95 = 4;
    v94 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_88;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_88:
  v96 = v118;
  if (v118 == v117)
  {
    v97 = 4;
    v96 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_93;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_93:

  v98 = v116;
  if (v116 == v115)
  {
    v99 = 4;
    v98 = v115;
    goto LABEL_97;
  }
  if (v116)
  {
    v99 = 5;
LABEL_97:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  return v105;
}

void sub_1B7D4AE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(a1 + 280);
  if (v1 != (*(_QWORD *)(a1 + 288) - v2) >> 3)
  {
    v4 = (void **)(a1 + 280);
    *(_QWORD *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    v5 = *(_QWORD **)(a1 + 256);
    if (v5)
    {
      v6 = *(char **)(a1 + 288);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 280);
            v6 = *(char **)(a1 + 288);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 280) = v16;
          *(_QWORD *)(a1 + 288) = v9;
          *(_QWORD *)(a1 + 296) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 288) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D4B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  double *v12;
  double *j;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  id WeakRetained;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  double var1;
  BOOL var5;
  BOOL *p_var4;
  __int128 v47;
  double *i;
  int v49;
  int v50;
  unint64_t var3;
  double v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  unint64_t v71;
  uint64_t **v72;
  void *v73;
  unint64_t v74;
  double v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  BOOL v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  BOOL v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  double v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  double **v110;
  id *location;
  void *v112;
  id v113;
  uint64_t *v114;
  int64_t v115;
  char **v116;
  char v117;
  BOOL var4;
  __int128 v119;
  __int128 v120;
  HDRawQuantitySample v121;
  __int128 v122;
  __int128 v123;
  __int16 v124;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v116 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    v114 = (uint64_t *)(a1 + 176);
    v109 = (_QWORD *)(a1 + 224);
    v110 = (double **)(a1 + 184);
    do
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v18 = a2;
          v19 = a2;
          v20 = v5;
          v21 = *(_QWORD *)(a1 + 96);
          if ((__int128 *)v6 != v7)
          {
            do
            {
              v22 = *(double *)(v21 + 8);
              v23 = *(double *)(v21 + 16);
              if (v22 > v20 && v22 < v19)
                v19 = *(double *)(v21 + 8);
              if (v23 > v5)
                v25 = *(double *)(v21 + 16);
              else
                v25 = v18;
              if (v23 < v18)
              {
                v20 = v5;
                v18 = v25;
              }
              v21 += 48;
            }
            while ((__int128 *)v21 != v7);
          }
          if (v18 >= v19)
            v26 = v19;
          else
            v26 = v18;
          v27 = *(double *)(a1 + 16);
          if (v27 > 0.0)
          {
            v28 = v27 * floor(v26 / v27);
            v29 = v27 * floor((v27 + v5) / v27);
            if (v28 >= v29)
              v26 = v28;
            else
              v26 = v29;
          }
          *v116 = 0;
          v116[1] = 0;
          v116[2] = 0;
          if ((__int128 *)v6 != v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v33 = *(char **)(a1 + 96);
            v32 = *(char **)(a1 + 104);
            v34 = v30;
            if (v32 != v33)
            {
              do
              {
                v35 = *((_OWORD *)v32 - 3);
                v36 = *((_OWORD *)v32 - 2);
                *(_OWORD *)(v34 - 21) = *(_OWORD *)(v32 - 21);
                *((_OWORD *)v34 - 3) = v35;
                *((_OWORD *)v34 - 2) = v36;
                v34 -= 48;
                v32 -= 48;
              }
              while (v32 != v33);
              v32 = *v116;
            }
            *(_QWORD *)(a1 + 96) = v34;
            *(_QWORD *)(a1 + 104) = v30;
            *(_QWORD *)(a1 + 112) = &v30[48 * v31];
            if (v32)
              operator delete(v32);
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v121.var0 = a1;
            v38 = 126 - 2 * __clz(v8);
            if ((__int128 *)v6 == v7)
              v39 = 0;
            else
              v39 = v38;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v121, v39, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v113 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v113 = 0;
          v112 = (void *)v6;
          if ((__int128 *)v6 == v7)
          {
LABEL_123:
            *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v110, v26) + *(double *)(a1 + 208);
            v98 = *(_QWORD **)(a1 + 216);
            if (v98 != v109)
            {
              do
              {
                *((double *)v98 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v98 + 13, v26)
                                      + *((double *)v98 + 16);
                v99 = (_QWORD *)v98[1];
                if (v99)
                {
                  do
                  {
                    v100 = v99;
                    v99 = (_QWORD *)*v99;
                  }
                  while (v99);
                }
                else
                {
                  do
                  {
                    v100 = (_QWORD *)v98[2];
                    v101 = *v100 == (_QWORD)v98;
                    v98 = v100;
                  }
                  while (!v101);
                }
                v98 = v100;
              }
              while (v100 != v109);
            }
            *(double *)(a1 + 56) = v26;

            if (v112)
              operator delete(v112);
            goto LABEL_140;
          }
          v115 = 0;
          v40 = 0;
          v41 = v6;
          while (2)
          {
            v119 = 0u;
            v120 = 0u;
            var4 = 0;
            v42 = *(_OWORD *)(v41 + 16);
            *(_OWORD *)&v121.var0 = *(_OWORD *)v41;
            *(_OWORD *)&v121.var2 = v42;
            *(_QWORD *)&v121.var4 = *(_QWORD *)(v41 + 32);
            var1 = v121.var1;
            if (v121.var4 && v121.var1 > v26)
            {
              v47 = *(_OWORD *)(v41 + 16);
              v119 = *(_OWORD *)v41;
              v120 = v47;
              var4 = v121.var4;
              var5 = v121.var5;
              p_var4 = &v121.var4;
            }
            else
            {
              var5 = 0;
              p_var4 = &var4;
            }
            *p_var4 = 0;
            if (v121.var4)
            {
              for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && var1 >= *i; i += 2)
              {
                if (var1 < i[1])
                {
                  v121.var4 = 0;
                  v49 = *(unsigned __int8 *)(v41 + 42);
                  LOBYTE(v50) = *(_BYTE *)(v41 + 41);
                  v117 = *(_BYTE *)(v41 + 40);
                  goto LABEL_103;
                }
              }
              v49 = *(unsigned __int8 *)(v41 + 42);
              v50 = *(unsigned __int8 *)(v41 + 41);
              v117 = *(_BYTE *)(v41 + 40);
              if ((v40 & 1) != 0)
              {
                var3 = v121.var3;
                if (v115 == v121.var3 || *(_BYTE *)(a1 + 24))
                {
                  v52 = v121.var2 - var1;
                  v53 = *(_QWORD *)(a1 + 128);
                  if (v53)
                  {
                    v54 = v53 + 1;
                    v52 = *(double *)(a1 + 120) + (v52 - *(double *)(a1 + 120)) / (double)v54;
                  }
                  else
                  {
                    v54 = 1;
                  }
                  *(double *)(a1 + 120) = v52;
                  *(_QWORD *)(a1 + 128) = v54;
                  HDStatisticsTimeInterval::addSample(v114, &v121, v49 == 0);
                  v49 = 1;
                }
              }
              else
              {
                v60 = v121.var2 - var1;
                v61 = *(_QWORD *)(a1 + 128);
                if (v61)
                {
                  v62 = v61 + 1;
                  v60 = *(double *)(a1 + 120) + (v60 - *(double *)(a1 + 120)) / (double)v62;
                }
                else
                {
                  v62 = 1;
                }
                *(double *)(a1 + 120) = v60;
                *(_QWORD *)(a1 + 128) = v62;
                HDStatisticsTimeInterval::addSample(v114, &v121, v49 == 0);
                v49 = 1;
                var3 = v121.var3;
                v115 = v121.var3;
              }
              if (*(_BYTE *)(a1 + 25))
              {
                HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
                v68 = (void *)objc_claimAutoreleasedReturnValue();
                if (v68)
                {
                  objc_msgSend(v113, "objectForKeyedSubscript:", v68);
                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                  v70 = v69;
                  if (v69)
                  {
                    if (objc_msgSend(v69, "longLongValue") == var3 || *(_BYTE *)(a1 + 24))
                    {
                      v71 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                      v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v71);
                      goto LABEL_92;
                    }
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
                    v73 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v113, "setObject:forKeyedSubscript:", v73, v68);

                    v74 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                    v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v74);
LABEL_92:
                    v75 = v121.var2 - var1;
                    v76 = v72[1];
                    if (v76)
                    {
                      v77 = (uint64_t)v76 + 1;
                      v75 = *(double *)v72 + (v75 - *(double *)v72) / (double)v77;
                    }
                    else
                    {
                      v77 = 1;
                    }
                    *(double *)v72 = v75;
                    v72[1] = (uint64_t *)v77;
                    HDStatisticsTimeInterval::addSample((uint64_t *)v72 + 7, &v121, v50 == 0);
                    LOBYTE(v50) = 1;
                  }

                }
              }
              v40 = 1;
LABEL_103:
              v86 = var4;
              if (var4)
              {
                v87 = v49 != 0;
                v88 = *(_QWORD *)(a1 + 104);
                v89 = *(_QWORD *)(a1 + 112);
                if (v88 < v89)
                {
                  v90 = v120;
                  *(_OWORD *)v88 = v119;
                  *(_OWORD *)(v88 + 16) = v90;
                  *(_BYTE *)(v88 + 32) = v86;
                  *(_BYTE *)(v88 + 33) = var5;
                  *(_BYTE *)(v88 + 40) = v117;
                  *(_BYTE *)(v88 + 41) = v50;
                  *(_BYTE *)(v88 + 42) = v87;
                  v59 = (_OWORD *)(v88 + 48);
                  goto LABEL_121;
                }
                v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (_QWORD)*v116) >> 4);
                v92 = v91 + 1;
                if (v91 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)*v116) >> 4);
                if (2 * v93 > v92)
                  v92 = 2 * v93;
                if (v93 >= 0x2AAAAAAAAAAAAAALL)
                  v66 = 0x555555555555555;
                else
                  v66 = v92;
                if (v66)
                  v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
                else
                  v67 = 0;
                v78 = v66 + 48 * v91;
                v94 = v120;
                *(_OWORD *)v78 = v119;
                *(_OWORD *)(v78 + 16) = v94;
                *(_BYTE *)(v78 + 32) = v86;
                *(_BYTE *)(v78 + 33) = var5;
                *(_BYTE *)(v78 + 40) = v117;
                *(_BYTE *)(v78 + 41) = v50;
                *(_BYTE *)(v78 + 42) = v87;
                v95 = *(char **)(a1 + 96);
                v81 = *(char **)(a1 + 104);
                v83 = v78;
                if (v81 != v95)
                {
                  do
                  {
                    v96 = *((_OWORD *)v81 - 3);
                    v97 = *((_OWORD *)v81 - 2);
                    *(_OWORD *)(v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(_OWORD *)(v83 - 48) = v96;
                    *(_OWORD *)(v83 - 32) = v97;
                    v83 -= 48;
                    v81 -= 48;
                  }
                  while (v81 != v95);
                  goto LABEL_118;
                }
                goto LABEL_119;
              }
            }
            else
            {
              v55 = *(_OWORD **)(a1 + 104);
              v56 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v55 < v56)
              {
                v57 = *(_OWORD *)v41;
                v58 = *(_OWORD *)(v41 + 32);
                v55[1] = *(_OWORD *)(v41 + 16);
                v55[2] = v58;
                *v55 = v57;
                v59 = v55 + 3;
                goto LABEL_121;
              }
              v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - *v116) >> 4);
              v64 = v63 + 1;
              if (v63 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v116) >> 4);
              if (2 * v65 > v64)
                v64 = 2 * v65;
              if (v65 >= 0x2AAAAAAAAAAAAAALL)
                v66 = 0x555555555555555;
              else
                v66 = v64;
              if (v66)
                v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
              else
                v67 = 0;
              v78 = v66 + 48 * v63;
              v79 = *(_OWORD *)v41;
              v80 = *(_OWORD *)(v41 + 32);
              *(_OWORD *)(v78 + 16) = *(_OWORD *)(v41 + 16);
              *(_OWORD *)(v78 + 32) = v80;
              *(_OWORD *)v78 = v79;
              v82 = *(char **)(a1 + 96);
              v81 = *(char **)(a1 + 104);
              v83 = v78;
              if (v81 != v82)
              {
                do
                {
                  v84 = *((_OWORD *)v81 - 3);
                  v85 = *((_OWORD *)v81 - 2);
                  *(_OWORD *)(v83 - 21) = *(_OWORD *)(v81 - 21);
                  *(_OWORD *)(v83 - 48) = v84;
                  *(_OWORD *)(v83 - 32) = v85;
                  v83 -= 48;
                  v81 -= 48;
                }
                while (v81 != v82);
LABEL_118:
                v81 = *v116;
              }
LABEL_119:
              v59 = (_OWORD *)(v78 + 48);
              *(_QWORD *)(a1 + 96) = v83;
              *(_QWORD *)(a1 + 104) = v78 + 48;
              *(_QWORD *)(a1 + 112) = v66 + 48 * v67;
              if (v81)
                operator delete(v81);
LABEL_121:
              *(_QWORD *)(a1 + 104) = v59;
            }
            v41 += 48;
            if ((__int128 *)v41 == v7)
              goto LABEL_123;
            continue;
          }
        }
        v9 = *(unsigned __int8 *)(v6 + 42);
        v10 = *(unsigned __int8 *)(v6 + 41);
        v124 = 0;
        v122 = 0u;
        v123 = 0u;
        v11 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)&v121.var0 = *(_OWORD *)v6;
        *(_OWORD *)&v121.var2 = v11;
        *(_QWORD *)&v121.var4 = *(_QWORD *)(v6 + 32);
        v12 = *(double **)(a1 + 64);
        for (j = *(double **)(a1 + 72); v12 != j; v12 += 2)
        {
          if (v121.var1 < *v12)
            break;
          if (v121.var1 < v12[1])
            goto LABEL_138;
        }
        if (v121.var4)
        {
          v14 = v121.var2 - v121.var1;
          v15 = *(_QWORD *)(a1 + 128);
          if (v15)
          {
            v16 = v15 + 1;
            v17 = *(double *)(a1 + 120) + (v14 - *(double *)(a1 + 120)) / (double)v16;
          }
          else
          {
            v17 = v121.var2 - v121.var1;
            v16 = 1;
          }
          *(double *)(a1 + 120) = v17;
          *(_QWORD *)(a1 + 128) = v16;
          HDStatisticsTimeInterval::addSample(v114, &v121, v9 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v102 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v121.var3);
            v103 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v102);
            v104 = v103[1];
            if (v104)
            {
              v105 = (uint64_t)v104 + 1;
              v14 = *(double *)v103 + (v14 - *(double *)v103) / (double)v105;
            }
            else
            {
              v105 = 1;
            }
            *(double *)v103 = v14;
            v103[1] = (uint64_t *)v105;
            HDStatisticsTimeInterval::addSample((uint64_t *)v103 + 7, &v121, v10 == 0);
          }
        }
LABEL_138:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_140:
      v106 = *(double *)(a1 + 56);
      if (v106 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>]");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v107, "handleFailureInFunction:file:lineNumber:description:", v108, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v106 = *(double *)(a1 + 56);
      }
      v5 = v106;
    }
    while (v106 < a2);
  }
}

void sub_1B7D4BCB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 344);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D4BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 384);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D4BEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 280);
      v11 = *(char **)(*(_QWORD *)a3 + 288);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 288);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 280);
      v24 = *(char **)(*(_QWORD *)a3 + 288);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 280);
            v31 = *(char **)(*(_QWORD *)a3 + 288);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v48;
  unint64_t v49;
  _QWORD v50[2];
  char v51;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 216);
  v46 = (_QWORD *)(a2 + 224);
  if (v3 == (_QWORD *)(a2 + 224))
    return;
  v48 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x78uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      v51 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v50[0];
        if (v37)
        {
          *(_QWORD *)v50[0] = *v37;
        }
        else
        {
          *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v48;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v48;
            if (*v48)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v48;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v45 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v45)
            operator delete(v45);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v49 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    v39 = *(_OWORD *)(v3 + 5);
    v40 = *(_OWORD *)(v3 + 7);
    v41 = *(_OWORD *)(v3 + 9);
    *((_QWORD *)v12 + 9) = v3[11];
    *(_OWORD *)(v12 + 56) = v41;
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((_QWORD *)v12 + 10) = v3[12];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    *((_QWORD *)v12 + 14) = v3[16];

LABEL_80:
    v42 = (_QWORD *)v3[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v3[2];
        v44 = *v43 == (_QWORD)v3;
        v3 = v43;
      }
      while (!v44);
    }
    v3 = v43;
  }
  while (v43 != v46);
}

void sub_1B7D4DA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07C10;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07C10;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07C10;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D4DB60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07C10;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07CA0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07CA0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07CA0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D4DD90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07CA0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D07D30;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07D30;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D4E054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 552);
      v7 = *(_QWORD *)(a1 + 544);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D4E25C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  double *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  double v22;
  uint64_t *v23;
  char v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char v61;
  double v62;
  char v63;
  char v64;
  char v65;

  v5 = (double *)(a1 + 8);
  v6 = *(uint64_t **)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v63 = *(_BYTE *)(a2 + 32);
  v10 = v63;
  v11 = *(_BYTE *)(a2 + 33);
  v65 = 0;
  if (v63 && v7 >= *v5)
  {
    v14 = &v63;
    v12 = v11;
    v65 = v63;
    v15 = v6;
    v16 = v7;
    v17 = *(double *)&v8;
    v13 = (unint64_t)v9;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = &v65;
    v15 = 0;
    v16 = 0.0;
    v17 = 0.0;
  }
  *v14 = 0;
  v64 = 0;
  if (v65 && ((v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    v21 = &v65;
    v61 = v12;
    v64 = v65;
    v20 = v13;
    v62 = v17;
    v22 = v16;
    v23 = v15;
  }
  else
  {
    v62 = 0.0;
    v61 = 0;
    v20 = 0;
    v21 = &v64;
    v22 = 0.0;
    v23 = 0;
  }
  *v21 = 0;
  v24 = v65;
  if (v65)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v13, v13);
    v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
    {
      v28 = *(double *)(a1 + 8);
      v29 = *(double *)(a1 + 16);
      if (v16 >= v28)
        v28 = v16;
      if (v29 >= v17)
        v29 = v17;
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        v26 = *(double *)(a1 + 8);
        if (v16 >= v26)
          v26 = v16;
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        v27 = *(double *)(a1 + 16);
        if (v27 >= v17)
          v27 = v17;
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v30 = *(double *)(a1 + 64);
      if (v16 < v30)
        v30 = v16;
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, v16);
      v25 = *(char **)(a1 + 112);
    }
    v31 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      v33 = 0x555555555555555;
      v34 = *(char **)(a1 + 104);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 4);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 < 0x2AAAAAAAAAAAAAALL)
        v33 = v36;
      if (v33)
      {
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        v34 = *(char **)(a1 + 104);
        v25 = *(char **)(a1 + 112);
      }
      else
      {
        v38 = 0;
      }
      v39 = v33 + 48 * v35;
      *(_QWORD *)v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(_QWORD *)(v39 + 24) = v13;
      v40 = v33 + 48 * v38;
      *(_BYTE *)(v39 + 32) = v24;
      *(_BYTE *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(_BYTE *)(v39 + 42) = 0;
      v32 = (_QWORD *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          v41 = *((_OWORD *)v25 - 3);
          v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        v34 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v39;
      *(_QWORD *)(a1 + 112) = v32;
      *(_QWORD *)(a1 + 120) = v40;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((_QWORD *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      v32 = v25 + 48;
      v25[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v32;
    if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
    {
      *(_QWORD *)(a1 + 144) = v6;
      *(double *)(a1 + 152) = v7;
      *(double *)(a1 + 160) = *(double *)&v8;
      *(_QWORD *)(a1 + 168) = v9;
      *(_BYTE *)(a1 + 176) = v10;
      *(_BYTE *)(a1 + 177) = v11;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v43 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      v44 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((_BYTE *)v44 + 48) || *((double *)v44 + 3) <= v7)
      {
        v44[2] = v6;
        *((double *)v44 + 3) = v7;
        v44[4] = v8;
        v44[5] = v9;
        *((_BYTE *)v44 + 48) = v10;
        *((_BYTE *)v44 + 49) = v11;
      }
    }
  }
  v45 = v64;
  if (v64)
  {
    v46 = *(_QWORD *)(a1 + 440);
    v47 = *(_QWORD *)(a1 + 448);
    if (v46 >= v47)
    {
      v49 = *(_QWORD *)(a1 + 432);
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v51;
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      else
        v54 = 0;
      v55 = v53 + 40 * v50;
      v56 = v53 + 40 * v54;
      *(_QWORD *)v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(_QWORD *)(v55 + 24) = v20;
      *(_BYTE *)(v55 + 32) = v45;
      *(_BYTE *)(v55 + 33) = v61;
      v48 = v55 + 40;
      v58 = *(char **)(a1 + 432);
      v57 = *(char **)(a1 + 440);
      if (v57 != v58)
      {
        do
        {
          v59 = *(_OWORD *)(v57 - 40);
          v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 432);
      }
      *(_QWORD *)(a1 + 432) = v55;
      *(_QWORD *)(a1 + 440) = v48;
      *(_QWORD *)(a1 + 448) = v56;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_QWORD *)v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(_QWORD *)(v46 + 24) = v20;
      *(_BYTE *)(v46 + 32) = v45;
      v48 = v46 + 40;
      *(_BYTE *)(v46 + 33) = v61;
    }
    *(_QWORD *)(a1 + 440) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 578))
  {
    *(_BYTE *)(a1 + 580) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 580) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D4E7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(_QWORD *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D4E8C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 580))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 580) = 0;
  }

}

void sub_1B7D4E944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D4E9C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 592));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 576) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D4ED2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C409A2B2ECELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D4EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D4F144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 576))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D4FD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D4FE14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07DE0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_WORD *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 586) = 0;
  *(_BYTE *)(a1 + 588) = 0;
  *(_QWORD *)(a1 + 592) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07DE0;
  v2 = *(void **)(a1 + 616);
  if (v2)
  {
    *(_QWORD *)(a1 + 624) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 552);
  if (v3)
  {
    *(_QWORD *)(a1 + 560) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 584) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);

}

void sub_1B7D4FF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 592) = v4;
    v3 = v5;
  }

}

void sub_1B7D4FFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 75, a2);
  v7 = a2;
  v4 = a1[75];
  v5 = a1[72];
  a1[72] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[72]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D5017C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[54];

  if (*(_BYTE *)(a1 + 584))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D50224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 586))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 585))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 587))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 624);
    v18 = *(_QWORD *)(a1 + 632);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 616);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 624);
      v33 = *(char **)(a1 + 616);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 616);
      }
      *(_QWORD *)(a1 + 616) = v28;
      *(_QWORD *)(a1 + 624) = v21;
      *(_QWORD *)(a1 + 632) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 624) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D50478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 586))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 586) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 585))
    goto LABEL_5;
  v9 = *(void **)(a1 + 608);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_404);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 608);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;

  *(_BYTE *)(a1 + 585) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 616);
    *(_QWORD *)(a1 + 632) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 616);
      v37 = *(__int128 **)(a1 + 624);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 624);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 624) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 616);
  v39 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 552))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 552));
  }
  *(_BYTE *)(a1 + 586) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 588))
    {
      *(_BYTE *)(a1 + 588) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 586) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D50B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 586) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 587) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 586))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 586))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 608);
    *(_QWORD *)(a1 + 608) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 585) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 585))
  {
    v8 = *(void **)(a1 + 608);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v9;

      v8 = *(void **)(a1 + 608);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D50E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 584) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 584) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D50F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 584) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 584), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 344);
  if (v9 != (int *)(a1 + 352))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 352));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 552);
  for (k = *(int8x16_t **)(a1 + 560); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D51324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t i;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  _BYTE v65[432];
  __int128 v66;
  __int128 v67;
  int8x16_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75[4];
  void *__p;
  char *v77;
  unint64_t v78;
  _BYTE v79[64];
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  void (**v100)(statistics::StatisticsEngine *__hidden);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BYTE v107[32];
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v60 = a2;
  *(_BYTE *)(a1 + 584) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v65, 0, -1.79769313e308, 1.79769313e308);
  v66 = 0u;
  v67 = 0u;
  v108 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v107, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v108));
  v62 = a1;
  v100 = &off_1E6D09A88;
  v101 = 0;
  v105 = 0;
  v103 = 0;
  v104 = 0;
  v106 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v100, (PB::Reader *)v107);
  v64 = v102;
  if (v101)
  {
    v72 = 0;
    memset(v75, 0, sizeof(v75));
    __p = 0;
    memset(&v79[8], 0, 50);
    v80 = 0u;
    v81 = 0u;
    LOWORD(v82) = 0;
    v85 = 0;
    v78 = 0;
    v77 = 0;
    *(_DWORD *)v79 = 0;
    v84 = 0;
    v83 = &v84;
    v87 = 0u;
    v86 = 0u;
    v88 = 1065353216;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    v93 = 1065353216;
    v94 = 0u;
    v95 = 0u;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v68 = vextq_s8(*(int8x16_t *)(v101 + 8), *(int8x16_t *)(v101 + 8), 8uLL);
    v4 = *(_QWORD *)(v101 + 72);
    v69 = *(_QWORD *)(v101 + 64);
    v70 = *(_BYTE *)(v101 + 185);
    v71 = *(_BYTE *)(v101 + 186);
    v73 = vextq_s8(*(int8x16_t *)(v101 + 24), *(int8x16_t *)(v101 + 24), 8uLL);
    v74 = v4;
    v6 = *(_QWORD *)(v101 + 80);
    v5 = *(_QWORD *)(v101 + 88);
    v61 = (_QWORD *)v101;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v78)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v77;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v77 = (char *)(v19 + 6);
          v78 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v77 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive((uint64_t)&v109, v23);
      v80 = v113;
      v81 = v114;
      v82 = v115;
      *(_OWORD *)v79 = v109;
      *(_OWORD *)&v79[16] = v110;
      *(_OWORD *)&v79[32] = v111;
      *(_OWORD *)&v79[48] = v112;
    }
    v24 = (_QWORD **)v61[17];
    v25 = (_QWORD **)v61[18];
    while (v24 != v25)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive((uint64_t)&v109, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v84;
      v29 = &v84;
      v30 = &v84;
      if (v84)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0x90uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *((_QWORD *)v33 + 17) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v83)
      {
        v83 = (uint64_t **)*v83;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v84, v32);
      ++v85;
LABEL_36:
      v34 = v115;
      v35 = v114;
      v36 = v113;
      v37 = v111;
      *(_OWORD *)(v33 + 88) = v112;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      v38 = v110;
      *(_OWORD *)(v33 + 40) = v109;
      *((_QWORD *)v33 + 17) = v34;
      *(_OWORD *)(v33 + 56) = v38;
      ++v24;
      *(_OWORD *)(v33 + 72) = v37;
    }
    v39 = v61[5];
    for (i = v61[6]; v39 != i; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v75, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)v65, (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  v44 = v103;
  v45 = v104;
  if (v103 != v104)
  {
    v46 = *((_QWORD *)&v66 + 1);
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if (v46 >= (unint64_t)v67)
      {
        v51 = (void *)v66;
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v66) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - v66) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = *((_QWORD *)&v66 + 1);
          v51 = (void *)v66;
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = v56;
        if ((void *)v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *(_WORD *)(v57 - 8) = *(_WORD *)(v46 - 8);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while ((void *)v46 != v51);
          v51 = (void *)v66;
        }
        v46 = v56 + 40;
        *(_QWORD *)&v66 = v57;
        *((_QWORD *)&v66 + 1) = v56 + 40;
        *(_QWORD *)&v67 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *(_QWORD *)(v46 + 8) = v47;
        *(_QWORD *)(v46 + 16) = v49;
        *(_QWORD *)(v46 + 24) = v50;
        *(_WORD *)(v46 + 32) = 1;
        v46 += 40;
      }
      *((_QWORD *)&v66 + 1) = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v100);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((_QWORD *)(v62 + 112), (uint64_t)&v64);
  if ((_QWORD)v66)
  {
    *((_QWORD *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v65);

}

void sub_1B7D51A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[432];
  uint64_t v18;
  _BYTE v19[432];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[368];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 600));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 584) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D51E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  v14 = *(_OWORD *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 232) = 0;
  v19 = (_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 240) = 0;
  v20 = *(_QWORD **)(a2 + 224);
  if (v20 != (_QWORD *)(a2 + 232))
  {
    v21 = 0;
    v22 = (_QWORD *)(a1 + 232);
    while (1)
    {
      v23 = v20[4];
      v24 = (_QWORD *)(a1 + 232);
      if (v22 == v19)
        goto LABEL_12;
      v25 = v21;
      v26 = (_QWORD *)(a1 + 232);
      if (v21)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21)
          v28 = (uint64_t **)v24;
        else
          v28 = (uint64_t **)(a1 + 232);
        if (v21)
          v29 = (uint64_t **)(v24 + 1);
        else
          v29 = (uint64_t **)(a1 + 232);
        if (!*v29)
        {
LABEL_28:
          v32 = (uint64_t *)operator new(0x90uLL);
          v33 = *((_OWORD *)v20 + 2);
          v34 = *((_OWORD *)v20 + 4);
          *((_OWORD *)v32 + 3) = *((_OWORD *)v20 + 3);
          *((_OWORD *)v32 + 4) = v34;
          *((_OWORD *)v32 + 2) = v33;
          v35 = *((_OWORD *)v20 + 5);
          v36 = *((_OWORD *)v20 + 6);
          v37 = *((_OWORD *)v20 + 8);
          *((_OWORD *)v32 + 7) = *((_OWORD *)v20 + 7);
          *((_OWORD *)v32 + 8) = v37;
          *((_OWORD *)v32 + 5) = v35;
          *((_OWORD *)v32 + 6) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 224), (uint64_t)v28, v29, v32);
        }
      }
      else
      {
        v29 = (uint64_t **)(a1 + 232);
        v28 = (uint64_t **)(a1 + 232);
        if (!v21)
          goto LABEL_28;
        v30 = v21;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v30;
            v31 = v30[4];
            if (v31 <= v23)
              break;
            v30 = *v28;
            v29 = v28;
            if (!*v28)
              goto LABEL_28;
          }
          if (v31 >= v23)
            break;
          v30 = v28[1];
          if (!v30)
          {
            v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v20[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v20[2];
          v27 = *v39 == (_QWORD)v20;
          v20 = v39;
        }
        while (!v27);
      }
      if (v39 == (_QWORD *)(a2 + 232))
        break;
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD **)(a1 + 224);
      v20 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 248, a2 + 248);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 312, a2 + 312);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 392, a2 + 392);
  return a1;
}

void sub_1B7D521BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 296) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  id v2;
  unint64_t v3;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id WeakRetained;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  void **v40;
  char *v41;
  unint64_t v42;
  id v43;
  id v44;
  void *v45;
  char v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  int8x8_t prime;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD **v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *i;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  BOOL v73;
  void *v74;
  uint64_t **v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  int v88;
  void *v89;
  void *v90;
  int v91;
  unint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  void *__p[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[3];
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = (double *)(a2 + 40);
  if (v5 != -1.79769313e308)
    v7 = (double *)a2;
  v98 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  v100 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v98, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 288);
      v16 = *(uint64_t **)(a2 + 296);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v3 = objc_claimAutoreleasedReturnValue();

        if (v3)
        {
          if ((objc_msgSend(v2, "containsObject:", v3) & 1) == 0)
            objc_msgSend(v2, "addObject:", v3);
        }

        ++v15;
      }
      v19 = (void *)objc_msgSend(v2, "copy");
      objc_msgSend(v13, "_setSources:", v19);

    }
  }

  v108[0] = &off_1E6D07EB0;
  v109 = v108;
  v99 = v13;
  v20 = MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(_OWORD *)(v100 + 168);
  v23 = *(_OWORD *)(v100 + 200);
  v105 = *(_OWORD *)(v100 + 184);
  v106 = v23;
  v107 = *(_QWORD *)(v100 + 216);
  v24 = *(_OWORD *)(v100 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v100 + 120);
  v102 = v24;
  v103 = *(_OWORD *)(v100 + 152);
  v104 = v22;
  if (!v109)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend((id)v20, "quantityWithUnit:doubleValue:", v21, *(double *)(*(uint64_t (**)(_QWORD *, void **))(*v109 + 48))(v109, __p));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "setDuration:", v25);

  v26 = *(_OWORD *)(v100 + 200);
  v105 = *(_OWORD *)(v100 + 184);
  v106 = v26;
  v107 = *(_QWORD *)(v100 + 216);
  v27 = *(_OWORD *)(v100 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v100 + 120);
  v102 = v27;
  v28 = *(_OWORD *)(v100 + 168);
  v103 = *(_OWORD *)(v100 + 152);
  v104 = v28;
  if (!v109)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v99, "setDataCount:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, void **))(*v109 + 48))(v109, __p) + 8));
  v29 = *(_OWORD *)(v100 + 200);
  v105 = *(_OWORD *)(v100 + 184);
  v106 = v29;
  v107 = *(_QWORD *)(v100 + 216);
  v30 = *(_OWORD *)(v100 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v100 + 120);
  v102 = v30;
  v31 = *(_OWORD *)(v100 + 168);
  v103 = *(_OWORD *)(v100 + 152);
  v104 = v31;
  if (!v109)
    std::__throw_bad_function_call[abi:ne180100]();
  v32 = (*(uint64_t (**)(_QWORD *, void **))(*v109 + 48))(v109, __p);
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v32 + 24), *(double *)(v32 + 32));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "setMostRecentQuantityDateInterval:", v33);

  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_124;
  v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v102 = 0u;
  LODWORD(v103) = 1065353216;
  v20 = *(_QWORD *)(v100 + 224);
  if (v20 == v100 + 232)
    goto LABEL_123;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(v100, *(_QWORD *)(v20 + 32));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v34;
    if (!v34)
      goto LABEL_100;
    v35 = objc_msgSend(v34, "hash");
    v36 = v35;
    v37 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_43;
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v38.i16[0] = vaddlv_u8(v38);
    v39 = v38.u32[0];
    if (v38.u32[0] > 1uLL)
    {
      v3 = v35;
      if ((void *)v35 >= __p[1])
        v3 = v35 % (unint64_t)__p[1];
    }
    else
    {
      v3 = ((unint64_t)__p[1] - 1) & v35;
    }
    v40 = (void **)*((_QWORD *)__p[0] + v3);
    if (!v40 || (v41 = (char *)*v40) == 0)
    {
LABEL_43:
      v41 = (char *)operator new(0x80uLL);
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = v36;
      *((_QWORD *)v41 + 2) = v2;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((_QWORD *)v41 + 15) = 0;
      v47 = (float)(unint64_t)(*((_QWORD *)&v102 + 1) + 1);
      if (v37 && (float)(*(float *)&v103 * (float)v37) >= v47)
      {
LABEL_89:
        v63 = __p[0];
        v64 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v64)
        {
          *(_QWORD *)v41 = *v64;
        }
        else
        {
          *(_QWORD *)v41 = v102;
          *(_QWORD *)&v102 = v41;
          v63[v3] = &v102;
          if (!*(_QWORD *)v41)
          {
LABEL_98:
            ++*((_QWORD *)&v102 + 1);
            goto LABEL_99;
          }
          v65 = *(_QWORD *)(*(_QWORD *)v41 + 8);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v65 >= v37)
              v65 %= v37;
          }
          else
          {
            v65 &= v37 - 1;
          }
          v64 = (char *)__p[0] + 8 * v65;
        }
        *v64 = v41;
        goto LABEL_98;
      }
      v48 = (v37 & (v37 - 1)) != 0;
      if (v37 < 3)
        v48 = 1;
      v49 = v48 | (2 * v37);
      v50 = vcvtps_u32_f32(v47 / *(float *)&v103);
      if (v49 <= v50)
        prime = (int8x8_t)v50;
      else
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v37 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_55;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v58 = vcvtps_u32_f32((float)*((unint64_t *)&v102 + 1) / *(float *)&v103);
        if (__p[1] < (void *)3
          || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          v58 = std::__next_prime(v58);
        }
        else
        {
          v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2)
            v58 = v60;
        }
        if (*(_QWORD *)&prime <= v58)
          prime = (int8x8_t)v58;
        if (*(_QWORD *)&prime >= v37)
        {
          v37 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_55:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v52 = operator new(8 * *(_QWORD *)&prime);
            v53 = __p[0];
            __p[0] = v52;
            if (v53)
              operator delete(v53);
            v54 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v54++) = 0;
            while (*(_QWORD *)&prime != v54);
            v55 = (_QWORD **)v102;
            if ((_QWORD)v102)
            {
              v56 = *(_QWORD *)(v102 + 8);
              v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(_QWORD *)&prime)
                  v56 %= *(_QWORD *)&prime;
              }
              else
              {
                v56 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v56) = &v102;
              for (i = *v55; i; v56 = v62)
              {
                v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(_QWORD *)&prime)
                    v62 %= *(_QWORD *)&prime;
                }
                else
                {
                  v62 &= *(_QWORD *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((_QWORD *)__p[0] + v62))
                  {
                    *((_QWORD *)__p[0] + v62) = v55;
                    goto LABEL_80;
                  }
                  *v55 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v62);
                  **((_QWORD **)__p[0] + v62) = i;
                  i = v55;
                }
                v62 = v56;
LABEL_80:
                v55 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v37 = (unint64_t)prime;
            goto LABEL_84;
          }
          v74 = __p[0];
          __p[0] = 0;
          if (v74)
            operator delete(v74);
          v37 = 0;
          __p[1] = 0;
        }
      }
LABEL_84:
      if ((v37 & (v37 - 1)) != 0)
      {
        if (v36 >= v37)
          v3 = v36 % v37;
        else
          v3 = v36;
      }
      else
      {
        v3 = (v37 - 1) & v36;
      }
      goto LABEL_89;
    }
    v94 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v42 = *((_QWORD *)v41 + 1);
      if (v42 == v36)
        break;
      if (v39 > 1)
      {
        if (v42 >= v37)
          v42 %= v37;
      }
      else
      {
        v42 &= v94;
      }
      if (v42 != v3)
        goto LABEL_43;
LABEL_42:
      v41 = *(char **)v41;
      if (!v41)
        goto LABEL_43;
    }
    v43 = *((id *)v41 + 2);
    v44 = v2;
    v45 = v44;
    if (v43 != v44)
    {
      v46 = objc_msgSend(v43, "isEqualToString:", v44);

      if ((v46 & 1) != 0)
        goto LABEL_99;
      goto LABEL_42;
    }

LABEL_99:
    v66 = *(_OWORD *)(v20 + 40);
    v67 = *(_OWORD *)(v20 + 56);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v20 + 72);
    *(_OWORD *)(v41 + 40) = v67;
    *(_OWORD *)(v41 + 24) = v66;
    v68 = *(_OWORD *)(v20 + 88);
    v69 = *(_OWORD *)(v20 + 104);
    v70 = *(_OWORD *)(v20 + 120);
    *((_QWORD *)v41 + 15) = *(_QWORD *)(v20 + 136);
    *(_OWORD *)(v41 + 104) = v70;
    *(_OWORD *)(v41 + 88) = v69;
    *(_OWORD *)(v41 + 72) = v68;

LABEL_100:
    v71 = *(_QWORD **)(v20 + 8);
    if (v71)
    {
      do
      {
        v72 = v71;
        v71 = (_QWORD *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        v72 = *(_QWORD **)(v20 + 16);
        v73 = *v72 == v20;
        v20 = (uint64_t)v72;
      }
      while (!v73);
    }
    v20 = (uint64_t)v72;
  }
  while (v72 != (_QWORD *)(v100 + 232));
  v75 = (uint64_t **)v102;
  if ((_QWORD)v102)
  {
    v20 = 0x1E0CB3000uLL;
    do
    {
      v76 = v75[2];
      v77 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v109)
        std::__throw_bad_function_call[abi:ne180100]();
      v2 = v75 + 3;
      objc_msgSend(v77, "quantityWithUnit:doubleValue:", v78, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v109 + 48))(v109, (uint64_t *)v75 + 3));
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "setObject:forKeyedSubscript:", v79, v76);

      if (!v109)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v109 + 48))(v109, (uint64_t *)v75 + 3) + 8));
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "setObject:forKeyedSubscript:", v80, v76);

      if (!v109)
        std::__throw_bad_function_call[abi:ne180100]();
      v81 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v109 + 48))(v109, (uint64_t *)v75 + 3);
      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v81 + 24), *(double *)(v81 + 32));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "setObject:forKeyedSubscript:", v82, v76);

      v75 = (uint64_t **)*v75;
    }
    while (v75);
  }
LABEL_123:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v99, "setDurationBySource:", v97);
  objc_msgSend(v99, "setDataCountBySource:", v96);
  objc_msgSend(v99, "setMostRecentQuantityDateIntervalBySource:", v95);

LABEL_124:
  v83 = v109;
  if (v109 == v108)
  {
    v84 = 4;
    v83 = v108;
LABEL_128:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  else if (v109)
  {
    v84 = 5;
    goto LABEL_128;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "averageQuantity");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  if (v86)
  {
    objc_msgSend(v99, "averageQuantity");
    v20 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v20, "isCompatibleWithUnit:", v85) & 1) == 0)
    {

      goto LABEL_143;
    }
  }
  objc_msgSend(v99, "minimumQuantity");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  if (v87)
  {
    objc_msgSend(v99, "minimumQuantity");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "isCompatibleWithUnit:", v85))
    {
      v88 = 1;
      goto LABEL_137;
    }
  }
  objc_msgSend(v99, "maximumQuantity");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89)
  {
    objc_msgSend(v99, "maximumQuantity");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend(v90, "isCompatibleWithUnit:", v85);

    v88 = v91 ^ 1;
    if (v87)
      goto LABEL_137;
LABEL_141:
    if (!v86)
      goto LABEL_142;
LABEL_138:

    if ((v88 & 1) == 0)
      goto LABEL_144;
LABEL_143:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v85);
    goto LABEL_144;
  }
  v88 = 0;
  if (!v87)
    goto LABEL_141;
LABEL_137:

  if (v86)
    goto LABEL_138;
LABEL_142:

  if (v88)
    goto LABEL_143;
LABEL_144:

  return v99;
}

void sub_1B7D52E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (v21)
  if (v19)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 272);
  v2 = *(_QWORD *)(a1 + 288);
  if (v1 != (*(_QWORD *)(a1 + 296) - v2) >> 3)
  {
    v4 = (void **)(a1 + 288);
    *(_QWORD *)(a1 + 296) = v2;
    std::vector<long long>::reserve((void **)(a1 + 288), v1);
    v5 = *(_QWORD **)(a1 + 264);
    if (v5)
    {
      v6 = *(char **)(a1 + 296);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 288);
            v6 = *(char **)(a1 + 296);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 288) = v16;
          *(_QWORD *)(a1 + 296) = v9;
          *(_QWORD *)(a1 + 304) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 296) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D531AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  double *v10;
  double *j;
  unint64_t v12;
  uint64_t **v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  id WeakRetained;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  double v39;
  BOOL v40;
  char v41;
  uint64_t *v42;
  __int128 v43;
  double *i;
  char v45;
  char v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  void *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t **v63;
  char v64;
  BOOL v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  char *v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  BOOL v87;
  double v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  id *location;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  char **v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int16 v106;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v97 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    v95 = a1 + 120;
    v91 = (_QWORD *)(a1 + 232);
    do
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v14 = a2;
          v15 = a2;
          v16 = v5;
          v17 = *(_QWORD *)(a1 + 96);
          if ((__int128 *)v6 != v7)
          {
            do
            {
              v18 = *(double *)(v17 + 8);
              v19 = *(double *)(v17 + 16);
              if (v18 > v16 && v18 < v15)
                v15 = *(double *)(v17 + 8);
              if (v19 > v5)
                v21 = *(double *)(v17 + 16);
              else
                v21 = v14;
              if (v19 < v14)
              {
                v16 = v5;
                v14 = v21;
              }
              v17 += 48;
            }
            while ((__int128 *)v17 != v7);
          }
          if (v14 >= v15)
            v22 = v15;
          else
            v22 = v14;
          v23 = *(double *)(a1 + 16);
          if (v23 > 0.0)
          {
            v24 = v23 * floor(v22 / v23);
            v25 = v23 * floor((v23 + v5) / v23);
            if (v24 >= v25)
              v22 = v24;
            else
              v22 = v25;
          }
          *v97 = 0;
          v97[1] = 0;
          v97[2] = 0;
          if ((__int128 *)v6 != v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v29 = *(char **)(a1 + 96);
            v28 = *(char **)(a1 + 104);
            v30 = v26;
            if (v28 != v29)
            {
              do
              {
                v31 = *((_OWORD *)v28 - 3);
                v32 = *((_OWORD *)v28 - 2);
                *(_OWORD *)(v30 - 21) = *(_OWORD *)(v28 - 21);
                *((_OWORD *)v30 - 3) = v31;
                *((_OWORD *)v30 - 2) = v32;
                v30 -= 48;
                v28 -= 48;
              }
              while (v28 != v29);
              v28 = *v97;
            }
            *(_QWORD *)(a1 + 96) = v30;
            *(_QWORD *)(a1 + 104) = v26;
            *(_QWORD *)(a1 + 112) = &v26[48 * v27];
            if (v28)
              operator delete(v28);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v101 = a1;
            v34 = 126 - 2 * __clz(v8);
            if ((__int128 *)v6 == v7)
              v35 = 0;
            else
              v35 = v34;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v101, v35, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v94 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v94 = 0;
          v93 = (void *)v6;
          if ((__int128 *)v6 == v7)
          {
LABEL_118:
            v84 = *(_QWORD **)(a1 + 224);
            if (v84 != v91)
            {
              do
              {
                v85 = (_QWORD *)v84[1];
                if (v85)
                {
                  do
                  {
                    v86 = v85;
                    v85 = (_QWORD *)*v85;
                  }
                  while (v85);
                }
                else
                {
                  do
                  {
                    v86 = (_QWORD *)v84[2];
                    v87 = *v86 == (_QWORD)v84;
                    v84 = v86;
                  }
                  while (!v87);
                }
                v84 = v86;
              }
              while (v86 != v91);
            }
            *(double *)(a1 + 56) = v22;

            if (v93)
              operator delete(v93);
            goto LABEL_127;
          }
          v96 = 0;
          v36 = 0;
          v37 = v6;
          while (2)
          {
            v99 = 0u;
            v100 = 0u;
            v98 = 0;
            v38 = *(_OWORD *)(v37 + 16);
            v101 = *(_OWORD *)v37;
            v102 = v38;
            v103 = *(_QWORD *)(v37 + 32);
            v39 = *((double *)&v101 + 1);
            if ((_BYTE)v103)
              v40 = *((double *)&v101 + 1) > v22;
            else
              v40 = 0;
            if (v40)
            {
              v43 = *(_OWORD *)(v37 + 16);
              v99 = *(_OWORD *)v37;
              v100 = v43;
              v98 = v103;
              v41 = BYTE1(v103);
              v42 = &v103;
            }
            else
            {
              v41 = 0;
              v42 = (uint64_t *)&v98;
            }
            *(_BYTE *)v42 = 0;
            if ((_BYTE)v103)
            {
              for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v39 >= *i; i += 2)
              {
                if (v39 < i[1])
                {
                  LOBYTE(v103) = 0;
                  v48 = *(unsigned __int8 *)(v37 + 42);
                  v45 = *(_BYTE *)(v37 + 41);
                  v46 = *(_BYTE *)(v37 + 40);
                  goto LABEL_92;
                }
              }
              v45 = *(_BYTE *)(v37 + 41);
              v46 = *(_BYTE *)(v37 + 40);
              if ((v36 & 1) != 0)
              {
                v47 = *((_QWORD *)&v102 + 1);
                if (v96 == *((_QWORD *)&v102 + 1) || *(_BYTE *)(a1 + 24))
                {
                  HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
                  v48 = 1;
                }
                else
                {
                  v48 = *(unsigned __int8 *)(v37 + 42);
                }
              }
              else
              {
                HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
                v48 = 1;
                v47 = *((_QWORD *)&v102 + 1);
                v96 = *((_QWORD *)&v102 + 1);
              }
              if (!*(_BYTE *)(a1 + 25))
                goto LABEL_91;
              HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(a1, v47);
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v53)
                goto LABEL_90;
              objc_msgSend(v94, "objectForKeyedSubscript:", v53);
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              v55 = v54;
              if (v54)
              {
                if (objc_msgSend(v54, "longLongValue") != v47 && !*(_BYTE *)(a1 + 24))
                {
LABEL_89:

LABEL_90:
LABEL_91:
                  v36 = 1;
LABEL_92:
                  v64 = v98;
                  if (!v98)
                    goto LABEL_115;
                  v65 = v48 != 0;
                  v49 = *(_QWORD *)(a1 + 104);
                  v66 = *(_QWORD *)(a1 + 112);
                  if (v49 < v66)
                  {
                    v67 = v100;
                    *(_OWORD *)v49 = v99;
                    *(_OWORD *)(v49 + 16) = v67;
                    *(_BYTE *)(v49 + 32) = v64;
                    *(_BYTE *)(v49 + 33) = v41;
                    *(_BYTE *)(v49 + 40) = v46;
                    *(_BYTE *)(v49 + 41) = v45;
                    *(_BYTE *)(v49 + 42) = v65;
LABEL_95:
                    v68 = v49 + 48;
LABEL_114:
                    *(_QWORD *)(a1 + 104) = v68;
LABEL_115:
                    v37 += 48;
                    if ((__int128 *)v37 == v7)
                      goto LABEL_118;
                    continue;
                  }
                  v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)*v97) >> 4);
                  v70 = v69 + 1;
                  if (v69 + 1 > 0x555555555555555)
                    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                  v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v97) >> 4);
                  if (2 * v71 > v70)
                    v70 = 2 * v71;
                  if (v71 >= 0x2AAAAAAAAAAAAAALL)
                    v59 = 0x555555555555555;
                  else
                    v59 = v70;
                  if (v59)
                    v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v59);
                  else
                    v60 = 0;
                  v72 = v59 + 48 * v69;
                  v73 = v100;
                  *(_OWORD *)v72 = v99;
                  *(_OWORD *)(v72 + 16) = v73;
                  *(_BYTE *)(v72 + 32) = v64;
                  *(_BYTE *)(v72 + 33) = v41;
                  *(_BYTE *)(v72 + 40) = v46;
                  *(_BYTE *)(v72 + 41) = v45;
                  *(_BYTE *)(v72 + 42) = v65;
                  v75 = *(char **)(a1 + 96);
                  v74 = *(char **)(a1 + 104);
                  v76 = v72;
                  if (v74 != v75)
                  {
                    do
                    {
                      v77 = *((_OWORD *)v74 - 3);
                      v78 = *((_OWORD *)v74 - 2);
                      *(_OWORD *)(v76 - 21) = *(_OWORD *)(v74 - 21);
                      *(_OWORD *)(v76 - 48) = v77;
                      *(_OWORD *)(v76 - 32) = v78;
                      v76 -= 48;
                      v74 -= 48;
                    }
                    while (v74 != v75);
                    goto LABEL_111;
                  }
                  goto LABEL_112;
                }
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v47);
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v94, "setObject:forKeyedSubscript:", v61, v53);

              }
              v62 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(a1, v47);
              v63 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v62);
              HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample((uint64_t)v63, (double *)&v101);
              v45 = 1;
              goto LABEL_89;
            }
            break;
          }
          v49 = *(_QWORD *)(a1 + 104);
          v50 = *(_QWORD *)(a1 + 112);
          if (v49 < v50)
          {
            v51 = *(_OWORD *)v37;
            v52 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)(v49 + 16) = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v49 + 32) = v52;
            *(_OWORD *)v49 = v51;
            goto LABEL_95;
          }
          v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)*v97) >> 4);
          v57 = v56 + 1;
          if (v56 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)*v97) >> 4);
          if (2 * v58 > v57)
            v57 = 2 * v58;
          if (v58 >= 0x2AAAAAAAAAAAAAALL)
            v59 = 0x555555555555555;
          else
            v59 = v57;
          if (v59)
            v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v59);
          else
            v60 = 0;
          v72 = v59 + 48 * v56;
          v79 = *(_OWORD *)v37;
          v80 = *(_OWORD *)(v37 + 32);
          *(_OWORD *)(v72 + 16) = *(_OWORD *)(v37 + 16);
          *(_OWORD *)(v72 + 32) = v80;
          *(_OWORD *)v72 = v79;
          v81 = *(char **)(a1 + 96);
          v74 = *(char **)(a1 + 104);
          v76 = v72;
          if (v74 != v81)
          {
            do
            {
              v82 = *((_OWORD *)v74 - 3);
              v83 = *((_OWORD *)v74 - 2);
              *(_OWORD *)(v76 - 21) = *(_OWORD *)(v74 - 21);
              *(_OWORD *)(v76 - 48) = v82;
              *(_OWORD *)(v76 - 32) = v83;
              v76 -= 48;
              v74 -= 48;
            }
            while (v74 != v81);
LABEL_111:
            v74 = *v97;
          }
LABEL_112:
          v68 = v72 + 48;
          *(_QWORD *)(a1 + 96) = v76;
          *(_QWORD *)(a1 + 104) = v72 + 48;
          *(_QWORD *)(a1 + 112) = v59 + 48 * v60;
          if (v74)
            operator delete(v74);
          goto LABEL_114;
        }
        v106 = 0;
        v104 = 0u;
        v105 = 0u;
        v9 = *(_OWORD *)(v6 + 16);
        v101 = *(_OWORD *)v6;
        v102 = v9;
        v103 = *(_QWORD *)(v6 + 32);
        v10 = *(double **)(a1 + 64);
        for (j = *(double **)(a1 + 72); v10 != j; v10 += 2)
        {
          if (*((double *)&v101 + 1) < *v10)
            break;
          if (*((double *)&v101 + 1) < v10[1])
            goto LABEL_15;
        }
        if ((_BYTE)v103)
        {
          HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(v95, (double *)&v101);
          if (*(_BYTE *)(a1 + 25))
          {
            v12 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v102 + 1));
            v13 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v12);
            HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample((uint64_t)v13, (double *)&v101);
          }
        }
LABEL_15:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_127:
      v88 = *(double *)(a1 + 56);
      if (v88 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsAverageSampleDuration>]");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "handleFailureInFunction:file:lineNumber:description:", v90, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v88 = *(double *)(a1 + 56);
      }
      v5 = v88;
    }
    while (v88 < a2);
  }
}

void sub_1B7D53970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsAverageSampleDuration>::addSample(uint64_t result, double *a2)
{
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v2 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308)
    v2 = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v5 = 1;
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 56) = 0;
        *(_OWORD *)(result + 8) = 0u;
        *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
        v6 = *(_OWORD *)(result + 64);
        *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
        *(_OWORD *)(result + 24) = v6;
        v3 = a2[2] - a2[1];
LABEL_17:
        *(double *)(result + 8) = v3;
        goto LABEL_18;
      }
    }
    else if (v2 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        v3 = a2[2] - a2[1];
        v4 = *(_QWORD *)(result + 16);
        if (v4)
        {
          v5 = v4 + 1;
          v3 = *(double *)(result + 8) + (v3 - *(double *)(result + 8)) / (double)v5;
        }
        else
        {
          v5 = 1;
        }
        goto LABEL_17;
      }
      *(_DWORD *)result = 2;
      *(_QWORD *)(result + 56) = 0;
      *(_OWORD *)(result + 8) = 0u;
      *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
      v7 = *(_OWORD *)(result + 64);
      *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
      *(_OWORD *)(result + 24) = v7;
LABEL_15:
      *(double *)(result + 8) = a2[2] - a2[1];
      v5 = 1;
LABEL_18:
      *(_QWORD *)(result + 16) = v5;
    }
  }
  else if (!*(_DWORD *)result && !*(_QWORD *)(result + 16))
  {
    goto LABEL_15;
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 312), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 352);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D53BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 392);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D53C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 288);
      v11 = *(char **)(*(_QWORD *)a3 + 296);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 296);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 288);
      v24 = *(char **)(*(_QWORD *)a3 + 296);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 296);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 288);
            v31 = *(char **)(*(_QWORD *)a3 + 296);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 296);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D07EB0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07EB0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>> const&)::{lambda(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsAverageSampleDuration> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 584))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D55410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 560);
      v7 = *(_QWORD *)(a1 + 552);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D55618(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  double *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  double v22;
  uint64_t *v23;
  char v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char v61;
  double v62;
  char v63;
  int v64;
  __int16 v65;
  char v66;
  char v67;

  v5 = (double *)(a1 + 8);
  v6 = *(uint64_t **)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v63 = *(_BYTE *)(a2 + 32);
  v10 = v63;
  v11 = *(_BYTE *)(a2 + 33);
  v67 = 0;
  if (v63 && v7 >= *v5)
  {
    v14 = &v63;
    v12 = v11;
    v67 = v63;
    v15 = v6;
    v16 = v7;
    v17 = *(double *)&v8;
    v13 = (unint64_t)v9;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = &v67;
    v15 = 0;
    v16 = 0.0;
    v17 = 0.0;
  }
  *v14 = 0;
  v66 = 0;
  if (v67 && ((v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    v21 = &v67;
    v61 = v12;
    v66 = v67;
    v20 = v13;
    v62 = v17;
    v22 = v16;
    v23 = v15;
  }
  else
  {
    v62 = 0.0;
    v61 = 0;
    v20 = 0;
    v21 = &v66;
    v22 = 0.0;
    v23 = 0;
  }
  *v21 = 0;
  v24 = v67;
  if (v67)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 256, v13, v13);
    v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
    {
      v28 = *(double *)(a1 + 8);
      v29 = *(double *)(a1 + 16);
      if (v16 >= v28)
        v28 = v16;
      if (v29 >= v17)
        v29 = v17;
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        v26 = *(double *)(a1 + 8);
        if (v16 >= v26)
          v26 = v16;
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        v27 = *(double *)(a1 + 16);
        if (v27 >= v17)
          v27 = v17;
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v30 = *(double *)(a1 + 64);
      if (v16 < v30)
        v30 = v16;
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime((uint64_t)v5, v16);
      v25 = *(char **)(a1 + 112);
    }
    v31 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      v33 = 0x555555555555555;
      v34 = *(char **)(a1 + 104);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 4);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 < 0x2AAAAAAAAAAAAAALL)
        v33 = v36;
      if (v33)
      {
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        v34 = *(char **)(a1 + 104);
        v25 = *(char **)(a1 + 112);
      }
      else
      {
        v38 = 0;
      }
      v39 = v33 + 48 * v35;
      *(_QWORD *)v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(_QWORD *)(v39 + 24) = v13;
      v40 = v33 + 48 * v38;
      *(_BYTE *)(v39 + 32) = v24;
      *(_BYTE *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(_BYTE *)(v39 + 42) = 0;
      v32 = (_QWORD *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          v41 = *((_OWORD *)v25 - 3);
          v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        v34 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v39;
      *(_QWORD *)(a1 + 112) = v32;
      *(_QWORD *)(a1 + 120) = v40;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((_QWORD *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      v32 = v25 + 48;
      v25[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v32;
    if (!*(_BYTE *)(a1 + 224) || *(double *)(a1 + 200) <= v7)
    {
      *(_QWORD *)(a1 + 192) = v6;
      *(double *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = *(double *)&v8;
      *(_QWORD *)(a1 + 216) = v9;
      *(_BYTE *)(a1 + 224) = v10;
      *(_BYTE *)(a1 + 225) = v11;
      if (!*(_BYTE *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
      {
        *(_QWORD *)(a1 + 152) = v6;
        *(double *)(a1 + 160) = v7;
        *(double *)(a1 + 168) = *(double *)&v8;
        *(_QWORD *)(a1 + 176) = v9;
        *(_BYTE *)(a1 + 184) = v10;
        *(_BYTE *)(a1 + 185) = v11;
      }
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((_BYTE *)v44 + 96) || *((double *)v44 + 9) <= v7)
      {
        v44[8] = v6;
        *((double *)v44 + 9) = v7;
        v44[10] = v8;
        v44[11] = v9;
        *((_BYTE *)v44 + 96) = v10;
        *((_BYTE *)v44 + 97) = v11;
        if (!*((_BYTE *)v44 + 56) || *((double *)v44 + 4) <= v7)
        {
          v44[3] = v6;
          *((double *)v44 + 4) = v7;
          v44[5] = v8;
          v44[6] = v9;
          *((_BYTE *)v44 + 56) = v10;
          *((_BYTE *)v44 + 57) = v11;
        }
      }
    }
  }
  v45 = v66;
  if (v66)
  {
    v46 = *(_QWORD *)(a1 + 448);
    v47 = *(_QWORD *)(a1 + 456);
    if (v46 >= v47)
    {
      v49 = *(_QWORD *)(a1 + 440);
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v51;
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      else
        v54 = 0;
      v55 = v53 + 40 * v50;
      v56 = v53 + 40 * v54;
      *(_QWORD *)v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(_QWORD *)(v55 + 24) = v20;
      *(_BYTE *)(v55 + 32) = v45;
      *(_BYTE *)(v55 + 33) = v61;
      *(_DWORD *)(v55 + 34) = v64;
      *(_WORD *)(v55 + 38) = v65;
      v48 = v55 + 40;
      v58 = *(char **)(a1 + 440);
      v57 = *(char **)(a1 + 448);
      if (v57 != v58)
      {
        do
        {
          v59 = *(_OWORD *)(v57 - 40);
          v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 440);
      }
      *(_QWORD *)(a1 + 440) = v55;
      *(_QWORD *)(a1 + 448) = v48;
      *(_QWORD *)(a1 + 456) = v56;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_QWORD *)v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(_QWORD *)(v46 + 24) = v20;
      *(_BYTE *)(v46 + 32) = v45;
      *(_BYTE *)(v46 + 33) = v61;
      *(_DWORD *)(v46 + 34) = v64;
      *(_WORD *)(v46 + 38) = v65;
      v48 = v46 + 40;
    }
    *(_QWORD *)(a1 + 448) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 586))
  {
    *(_BYTE *)(a1 + 588) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 588) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D55C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 440), *(_QWORD *)(a1 + 448), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 448) - *(_QWORD *)(a1 + 440)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D55CF4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 588))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 588) = 0;
  }

}

void sub_1B7D55D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D55DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 600));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 584) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D56158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40081539FBLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D56304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D56570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 584))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D571A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D57240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI33HDStatisticsAverageSampleDurationEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsAverageSampleDuration>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsAverageSampleDuration>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsAverageSampleDuration::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 4), 8uLL);
  v6[1] = *((_QWORD *)a2 + 10);
  v6[2] = *((_QWORD *)a2 + 11);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D57348(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsAverageSampleDuration>::unarchive(uint64_t a1, _QWORD *a2)
{
  int8x16_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(a1 + 56) = 0;
  v2 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 0;
  v3 = (_QWORD *)a2[16];
  if (v3)
  {
    v4 = v3[3];
    v5 = v3[12];
    v6 = v3[14];
    if (v6)
    {
      v2 = *(int8x16_t *)(v6 + 24);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = 1;
      v6 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 57) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  v9 = a2[14];
  if (v9)
  {
    v2.i64[0] = *(_QWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    *(int8x16_t *)(a1 + 64) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(_QWORD *)(a1 + 80) = v2.i64[0];
    *(_QWORD *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07F60;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(_BYTE *)(a1 + 538) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 544) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07F60;
  v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(_QWORD *)(a1 + 576) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(_QWORD *)(a1 + 512) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 536) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);

}

void sub_1B7D57564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 544) = v4;
    v3 = v5;
  }

}

void sub_1B7D575C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 69, a2);
  v7 = a2;
  v4 = a1[69];
  v5 = a1[66];
  a1[66] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[66]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D57758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[48];

  if (*(_BYTE *)(a1 + 536))
    return 0;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D57800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 538))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 537))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 539))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 576);
    v18 = *(_QWORD *)(a1 + 584);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 568);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 576);
      v33 = *(char **)(a1 + 568);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 568);
      }
      *(_QWORD *)(a1 + 568) = v28;
      *(_QWORD *)(a1 + 576) = v21;
      *(_QWORD *)(a1 + 584) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 576) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D57A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 538))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 538) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 537))
    goto LABEL_5;
  v9 = *(void **)(a1 + 560);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_405);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 560);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  *(_BYTE *)(a1 + 537) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 568);
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 576) = 0;
    *(_QWORD *)(a1 + 568) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 568);
      v37 = *(__int128 **)(a1 + 576);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 576);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 576) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 568);
  v39 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 512) != *(_QWORD *)(a1 + 504))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 512) != *(_QWORD *)(a1 + 504));
  }
  *(_BYTE *)(a1 + 538) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 540))
    {
      *(_BYTE *)(a1 + 540) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 538) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D58144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 538) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 539) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 538))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 538))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 537) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 537))
  {
    v8 = *(void **)(a1 + 560);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v9;

      v8 = *(void **)(a1 + 560);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D58440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 536) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 536) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D58560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::reset(uint64_t result)
{
  *(_BYTE *)(result + 536) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 536), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsAverageSampleDuration::archive((int8x16_t *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 296);
  if (v9 != (_QWORD *)(a1 + 304))
  {
    do
    {
      HDStatisticsAverageSampleDuration::archive((int8x16_t *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 304));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 504);
  for (k = *(int8x16_t **)(a1 + 512); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D588F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t i;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  int8x16_t v71;
  uint64_t v72;
  _BYTE v73[384];
  __int128 v74;
  __int128 v75;
  int8x16_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82[4];
  __int128 __p;
  __int128 v84;
  _QWORD v85[6];
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  void (**v103)(statistics::StatisticsEngine *__hidden);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _BYTE v110[32];
  uint64_t v111[3];

  v67 = a2;
  *(_BYTE *)(a1 + 536) = objc_msgSend(v67, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v67;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v73, 0, -1.79769313e308, 1.79769313e308);
  v74 = 0u;
  v75 = 0u;
  v111[0] = 0;
  v70 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)objc_msgSend(v70, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), v111));
  v69 = a1;
  v103 = &off_1E6D09A88;
  v104 = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  v72 = v105;
  if (v104)
  {
    v79 = 0;
    memset(v82, 0, sizeof(v82));
    v88 = 0;
    v87 = 0;
    __p = 0u;
    v84 = 0u;
    memset(v85, 0, 42);
    v86 = &v87;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v95 = 0;
    v93 = 0u;
    v94 = 0u;
    v92 = 0u;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v76 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    v4 = *(_QWORD *)(v104 + 72);
    v77 = *(_QWORD *)(v104 + 64);
    v78 = *(_WORD *)(v104 + 185);
    v80 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    v81 = v4;
    v6 = *(_QWORD *)(v104 + 80);
    v5 = *(_QWORD *)(v104 + 88);
    v68 = (_QWORD *)v104;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if (v7 >= (unint64_t)v84)
        {
          v14 = (void *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = *((_QWORD *)&__p + 1);
            v14 = (void *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              v21 = *(_OWORD *)(v7 - 48);
              v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            v14 = (void *)__p;
          }
          v7 = v19 + 48;
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)&v84 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *(_QWORD *)(v7 + 8) = v8;
          *(_QWORD *)(v7 + 16) = v10;
          *(_QWORD *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(_BYTE *)(v7 + 40) = 0;
          *(_BYTE *)(v7 + 41) = v12;
          *(_BYTE *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((_QWORD *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v68[13];
    if (v23)
    {
      v24 = v23[3];
      v25 = v23[12];
      v26 = v23[14];
      if (v26)
      {
        v27 = *(int8x16_t *)(v26 + 24);
        v28 = *(_QWORD *)(v26 + 8);
        v29 = 1;
        v26 = *(_QWORD *)(v26 + 16);
      }
      else
      {
        v29 = 0;
        v27 = 0uLL;
        v28 = 0;
      }
      *((_QWORD *)&v84 + 1) = v25;
      v85[0] = v24;
      *(int8x16_t *)&v85[1] = vextq_s8(v27, v27, 8uLL);
      v85[3] = v28;
      v85[4] = v26;
      LOWORD(v85[5]) = v29;
    }
    v30 = v68[17];
    v31 = v68[18];
    while (v30 != v31)
    {
      v32 = *(_QWORD **)v30;
      v33 = *(_QWORD *)(*(_QWORD *)v30 + 112);
      if (v33)
      {
        v71 = *(int8x16_t *)(v33 + 24);
        v34 = *(_QWORD *)(v33 + 8);
        v35 = 1;
        v36 = *(_QWORD *)(v33 + 16);
      }
      else
      {
        v36 = 0;
        v35 = 0;
        v34 = 0;
        v71 = 0u;
      }
      v37 = v32[3];
      v38 = v32[12];
      v39 = v32[18];
      v40 = &v87;
      v41 = &v87;
      v42 = v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            v41 = (uint64_t **)v42;
            v43 = v42[4];
            if (v43 <= v39)
              break;
            v42 = *v41;
            v40 = v41;
            if (!*v41)
              goto LABEL_39;
          }
          if (v43 >= v39)
          {
            v45 = (char *)v41;
            goto LABEL_42;
          }
          v42 = v41[1];
        }
        while (v42);
        v40 = v41 + 1;
      }
LABEL_39:
      v45 = (char *)operator new(0x60uLL);
      *((_QWORD *)v45 + 4) = v39;
      *(_OWORD *)(v45 + 40) = 0u;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((_QWORD *)v45 + 11) = 0;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = v41;
      *v40 = (uint64_t *)v45;
      v44 = (uint64_t *)v45;
      if (*v86)
      {
        v86 = (uint64_t **)*v86;
        v44 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v44);
      ++v88;
LABEL_42:
      *((_QWORD *)v45 + 5) = v38;
      *((_QWORD *)v45 + 6) = v37;
      *(int8x16_t *)(v45 + 56) = vextq_s8(v71, v71, 8uLL);
      *((_QWORD *)v45 + 9) = v34;
      *((_QWORD *)v45 + 10) = v36;
      v45[88] = v35;
      v30 += 8;
      v45[89] = 0;
    }
    v46 = v68[5];
    for (i = v68[6]; v46 != i; v46 += 8)
    {
      v49 = *(double *)(*(_QWORD *)v46 + 8);
      v48 = *(double *)(*(_QWORD *)v46 + 16);
      if (v49 >= v48)
        v50 = *(double *)(*(_QWORD *)v46 + 16);
      else
        v50 = *(double *)(*(_QWORD *)v46 + 8);
      if (v48 < v49)
        v48 = *(double *)(*(_QWORD *)v46 + 8);
      HKIntervalMask<double>::_insertInterval(v82, v50, v48);
    }
    HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)v73, (uint64_t)&v76);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&v76);
  }
  v51 = v106;
  v52 = v107;
  if (v106 != v107)
  {
    v53 = *((_QWORD *)&v74 + 1);
    do
    {
      v54 = *(_QWORD *)(*(_QWORD *)v51 + 24);
      v55 = *(_QWORD *)(*(_QWORD *)v51 + 32);
      v56 = *(_QWORD *)(*(_QWORD *)v51 + 8);
      v57 = *(_QWORD *)(*(_QWORD *)v51 + 16);
      if (v53 >= (unint64_t)v75)
      {
        v58 = (void *)v74;
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v74) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3) > v60)
          v60 = 0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75 - v74) >> 3) >= 0x333333333333333)
          v61 = 0x666666666666666;
        else
          v61 = v60;
        if (v61)
        {
          v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v61);
          v53 = *((_QWORD *)&v74 + 1);
          v58 = (void *)v74;
        }
        else
        {
          v62 = 0;
        }
        v63 = v61 + 40 * v59;
        *(_QWORD *)v63 = v55;
        *(_QWORD *)(v63 + 8) = v54;
        *(_QWORD *)(v63 + 16) = v56;
        *(_QWORD *)(v63 + 24) = v57;
        *(_WORD *)(v63 + 32) = 1;
        v64 = v63;
        if ((void *)v53 != v58)
        {
          do
          {
            v65 = *(_OWORD *)(v53 - 40);
            v66 = *(_OWORD *)(v53 - 24);
            *(_WORD *)(v64 - 8) = *(_WORD *)(v53 - 8);
            *(_OWORD *)(v64 - 24) = v66;
            *(_OWORD *)(v64 - 40) = v65;
            v64 -= 40;
            v53 -= 40;
          }
          while ((void *)v53 != v58);
          v58 = (void *)v74;
        }
        v53 = v63 + 40;
        *(_QWORD *)&v74 = v64;
        *((_QWORD *)&v74 + 1) = v63 + 40;
        *(_QWORD *)&v75 = v61 + 40 * v62;
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_QWORD *)v53 = v55;
        *(_QWORD *)(v53 + 8) = v54;
        *(_QWORD *)(v53 + 16) = v56;
        *(_QWORD *)(v53 + 24) = v57;
        *(_WORD *)(v53 + 32) = 1;
        v53 += 40;
      }
      *((_QWORD *)&v74 + 1) = v53;
      v51 += 8;
    }
    while (v51 != v52);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((_QWORD *)(v69 + 112), (uint64_t)&v72);
  if ((_QWORD)v74)
  {
    *((_QWORD *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v73);

}

void sub_1B7D58FEC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v10 - 224));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[384];
  uint64_t v18;
  _BYTE v19[384];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[320];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 552));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 536) = 0;
  return HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D59400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = 0;
  v16 = (_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 192) = 0;
  v17 = *(_QWORD **)(a2 + 176);
  if (v17 != (_QWORD *)(a2 + 184))
  {
    v18 = 0;
    v19 = (_QWORD *)(a1 + 184);
    while (1)
    {
      v20 = v17[4];
      v21 = (_QWORD *)(a1 + 184);
      if (v19 == v16)
        goto LABEL_12;
      v22 = v18;
      v23 = (_QWORD *)(a1 + 184);
      if (v18)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      if (v21[4] < v20)
      {
LABEL_12:
        if (v18)
          v25 = (uint64_t **)v21;
        else
          v25 = (uint64_t **)(a1 + 184);
        if (v18)
          v26 = (uint64_t **)(v21 + 1);
        else
          v26 = (uint64_t **)(a1 + 184);
        if (!*v26)
        {
LABEL_28:
          v29 = (uint64_t *)operator new(0x60uLL);
          v30 = *((_OWORD *)v17 + 2);
          v31 = *((_OWORD *)v17 + 3);
          v32 = *((_OWORD *)v17 + 5);
          *((_OWORD *)v29 + 4) = *((_OWORD *)v17 + 4);
          *((_OWORD *)v29 + 5) = v32;
          *((_OWORD *)v29 + 2) = v30;
          *((_OWORD *)v29 + 3) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 176), (uint64_t)v25, v26, v29);
        }
      }
      else
      {
        v26 = (uint64_t **)(a1 + 184);
        v25 = (uint64_t **)(a1 + 184);
        if (!v18)
          goto LABEL_28;
        v27 = v18;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v27;
            v28 = v27[4];
            if (v28 <= v20)
              break;
            v27 = *v25;
            v26 = v25;
            if (!*v25)
              goto LABEL_28;
          }
          if (v28 >= v20)
            break;
          v27 = v25[1];
          if (!v27)
          {
            v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      v33 = (_QWORD *)v17[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v17[2];
          v24 = *v34 == (_QWORD)v17;
          v17 = v34;
        }
        while (!v24);
      }
      if (v34 == (_QWORD *)(a2 + 184))
        break;
      v18 = (_QWORD *)*v16;
      v19 = *(_QWORD **)(a1 + 176);
      v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 240), *(const void **)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 264, a2 + 264);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 344, a2 + 344);
  return a1;
}

void sub_1B7D5973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id WeakRetained;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  void **v37;
  char *v38;
  unint64_t v39;
  id v40;
  id v41;
  void *v42;
  char v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  int8x8_t prime;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD **v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  _QWORD *i;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD *v66;
  _QWORD *v67;
  BOOL v68;
  void *v69;
  uint64_t **j;
  uint64_t *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  uint64_t v88;
  void *__p[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD v93[3];
  _QWORD *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v85 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  v88 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v85, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = a1 + 48;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v87 = v9;
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(v88 + 240);
      v17 = *(uint64_t **)(v88 + 248);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend(v15, "containsObject:", v20) & 1) == 0)
            objc_msgSend(v15, "addObject:", v20);
        }

        ++v16;
      }
      v2 = objc_msgSend(v15, "copy");
      objc_msgSend(v13, "_setSources:", v2);

      v9 = v87;
    }
  }

  v93[0] = &off_1E6D08030;
  v94 = v93;
  v86 = v13;
  v21 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = *(_OWORD *)(v88 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v88 + 120);
  v90 = v23;
  v91 = *(_OWORD *)(v88 + 152);
  v92 = *(_QWORD *)(v88 + 168);
  if (!v94)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v21, "quantityWithUnit:doubleValue:", v22, *(double *)(*(uint64_t (**)(_QWORD *, void **))(*v94 + 48))(v94, __p));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "setDuration:", v24);

  v25 = *(_OWORD *)(v88 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v88 + 120);
  v90 = v25;
  v91 = *(_OWORD *)(v88 + 152);
  v92 = *(_QWORD *)(v88 + 168);
  if (!v94)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v86, "setDataCount:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, void **))(*v94 + 48))(v94, __p) + 8));
  v26 = *(_OWORD *)(v88 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v88 + 120);
  v90 = v26;
  v91 = *(_OWORD *)(v88 + 152);
  v92 = *(_QWORD *)(v88 + 168);
  if (!v94)
    std::__throw_bad_function_call[abi:ne180100]();
  v27 = (*(uint64_t (**)(_QWORD *, void **))(*v94 + 48))(v94, __p);
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v27 + 24), *(double *)(v27 + 32));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "setMostRecentQuantityDateInterval:", v28);

  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_123;
  v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v83 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v82 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v90 = 0u;
  LODWORD(v91) = 1065353216;
  v29 = *(_QWORD **)(v88 + 176);
  if (v29 == (_QWORD *)(v88 + 184))
    goto LABEL_122;
  do
  {
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(v88, v29[4]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (!v30)
      goto LABEL_100;
    v32 = objc_msgSend(v30, "hash");
    v33 = v32;
    v34 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_43;
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v35.i16[0] = vaddlv_u8(v35);
    v36 = v35.u32[0];
    if (v35.u32[0] > 1uLL)
    {
      v2 = v32;
      if ((void *)v32 >= __p[1])
        v2 = v32 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v32;
    }
    v37 = (void **)*((_QWORD *)__p[0] + v2);
    if (!v37 || (v38 = (char *)*v37) == 0)
    {
LABEL_43:
      v38 = (char *)operator new(0x50uLL);
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = v33;
      *((_QWORD *)v38 + 2) = v31;
      *(_OWORD *)(v38 + 24) = 0u;
      *(_OWORD *)(v38 + 40) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *((_QWORD *)v38 + 9) = 0;
      v44 = (float)(unint64_t)(*((_QWORD *)&v90 + 1) + 1);
      if (v34 && (float)(*(float *)&v91 * (float)v34) >= v44)
      {
LABEL_89:
        v60 = __p[0];
        v61 = (_QWORD *)*((_QWORD *)__p[0] + v2);
        if (v61)
        {
          *(_QWORD *)v38 = *v61;
        }
        else
        {
          *(_QWORD *)v38 = v90;
          *(_QWORD *)&v90 = v38;
          v60[v2] = &v90;
          if (!*(_QWORD *)v38)
          {
LABEL_98:
            ++*((_QWORD *)&v90 + 1);
            goto LABEL_99;
          }
          v62 = *(_QWORD *)(*(_QWORD *)v38 + 8);
          if ((v34 & (v34 - 1)) != 0)
          {
            if (v62 >= v34)
              v62 %= v34;
          }
          else
          {
            v62 &= v34 - 1;
          }
          v61 = (char *)__p[0] + 8 * v62;
        }
        *v61 = v38;
        goto LABEL_98;
      }
      v45 = (v34 & (v34 - 1)) != 0;
      if (v34 < 3)
        v45 = 1;
      v46 = v45 | (2 * v34);
      v47 = vcvtps_u32_f32(v44 / *(float *)&v91);
      if (v46 <= v47)
        prime = (int8x8_t)v47;
      else
        prime = (int8x8_t)v46;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v34 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_55;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v55 = vcvtps_u32_f32((float)*((unint64_t *)&v90 + 1) / *(float *)&v91);
        if (__p[1] < (void *)3
          || (v56 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
        {
          v55 = std::__next_prime(v55);
        }
        else
        {
          v57 = 1 << -(char)__clz(v55 - 1);
          if (v55 >= 2)
            v55 = v57;
        }
        if (*(_QWORD *)&prime <= v55)
          prime = (int8x8_t)v55;
        if (*(_QWORD *)&prime >= v34)
        {
          v34 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_55:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v49 = operator new(8 * *(_QWORD *)&prime);
            v50 = __p[0];
            __p[0] = v49;
            if (v50)
              operator delete(v50);
            v51 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v51++) = 0;
            while (*(_QWORD *)&prime != v51);
            v52 = (_QWORD **)v90;
            if ((_QWORD)v90)
            {
              v53 = *(_QWORD *)(v90 + 8);
              v54 = (uint8x8_t)vcnt_s8(prime);
              v54.i16[0] = vaddlv_u8(v54);
              if (v54.u32[0] > 1uLL)
              {
                if (v53 >= *(_QWORD *)&prime)
                  v53 %= *(_QWORD *)&prime;
              }
              else
              {
                v53 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v53) = &v90;
              for (i = *v52; i; v53 = v59)
              {
                v59 = i[1];
                if (v54.u32[0] > 1uLL)
                {
                  if (v59 >= *(_QWORD *)&prime)
                    v59 %= *(_QWORD *)&prime;
                }
                else
                {
                  v59 &= *(_QWORD *)&prime - 1;
                }
                if (v59 != v53)
                {
                  if (!*((_QWORD *)__p[0] + v59))
                  {
                    *((_QWORD *)__p[0] + v59) = v52;
                    goto LABEL_80;
                  }
                  *v52 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v59);
                  **((_QWORD **)__p[0] + v59) = i;
                  i = v52;
                }
                v59 = v53;
LABEL_80:
                v52 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v34 = (unint64_t)prime;
            goto LABEL_84;
          }
          v69 = __p[0];
          __p[0] = 0;
          if (v69)
            operator delete(v69);
          v34 = 0;
          __p[1] = 0;
        }
      }
LABEL_84:
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34)
          v2 = v33 % v34;
        else
          v2 = v33;
      }
      else
      {
        v2 = (v34 - 1) & v33;
      }
      goto LABEL_89;
    }
    v81 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v39 = *((_QWORD *)v38 + 1);
      if (v39 == v33)
        break;
      if (v36 > 1)
      {
        if (v39 >= v34)
          v39 %= v34;
      }
      else
      {
        v39 &= v81;
      }
      if (v39 != v2)
        goto LABEL_43;
LABEL_42:
      v38 = *(char **)v38;
      if (!v38)
        goto LABEL_43;
    }
    v40 = *((id *)v38 + 2);
    v41 = v31;
    v42 = v41;
    if (v40 != v41)
    {
      v43 = objc_msgSend(v40, "isEqualToString:", v41);

      if ((v43 & 1) != 0)
        goto LABEL_99;
      goto LABEL_42;
    }

LABEL_99:
    v63 = *(_OWORD *)(v29 + 5);
    v64 = *(_OWORD *)(v29 + 7);
    v65 = *(_OWORD *)(v29 + 9);
    *((_QWORD *)v38 + 9) = v29[11];
    *(_OWORD *)(v38 + 56) = v65;
    *(_OWORD *)(v38 + 40) = v64;
    *(_OWORD *)(v38 + 24) = v63;

LABEL_100:
    v66 = (_QWORD *)v29[1];
    if (v66)
    {
      do
      {
        v67 = v66;
        v66 = (_QWORD *)*v66;
      }
      while (v66);
    }
    else
    {
      do
      {
        v67 = (_QWORD *)v29[2];
        v68 = *v67 == (_QWORD)v29;
        v29 = v67;
      }
      while (!v68);
    }
    v29 = v67;
  }
  while (v67 != (_QWORD *)(v88 + 184));
  for (j = (uint64_t **)v90; j; j = (uint64_t **)*j)
  {
    v71 = j[2];
    v72 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(v72, "quantityWithUnit:doubleValue:", v73, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v94 + 48))(v94, (uint64_t *)j + 3));
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "setObject:forKeyedSubscript:", v74, v71);

    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v94 + 48))(v94, (uint64_t *)j + 3) + 8));
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "setObject:forKeyedSubscript:", v75, v71);

    if (!v94)
      std::__throw_bad_function_call[abi:ne180100]();
    v76 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v94 + 48))(v94, (uint64_t *)j + 3);
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v76 + 24), *(double *)(v76 + 32));
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "setObject:forKeyedSubscript:", v77, v71);

  }
LABEL_122:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v86, "setDurationBySource:", v84);
  objc_msgSend(v86, "setDataCountBySource:", v83);
  objc_msgSend(v86, "setMostRecentQuantityDateIntervalBySource:", v82);

LABEL_123:
  v78 = v94;
  if (v94 == v93)
  {
    v79 = 4;
    v78 = v93;
LABEL_127:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  else if (v94)
  {
    v79 = 5;
    goto LABEL_127;
  }
  return v86;
}

void sub_1B7D5A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  unint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v2 = (void **)(a1 + 240);
  v1 = *(_QWORD *)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 224);
  if (v3 != (*(_QWORD *)(a1 + 248) - v1) >> 3)
  {
    *(_QWORD *)(a1 + 248) = v1;
    std::vector<long long>::reserve((void **)(a1 + 240), v3);
    v5 = *(_QWORD **)(a1 + 216);
    if (v5)
    {
      v6 = *(char **)(a1 + 248);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 256);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v2;
          v11 = (v6 - (_BYTE *)*v2) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 240);
            v6 = *(char **)(a1 + 248);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 240) = v16;
          *(_QWORD *)(a1 + 248) = v9;
          *(_QWORD *)(a1 + 256) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 248) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v2);

    }
  }
}

void sub_1B7D5A528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  double *j;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  id WeakRetained;
  unint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char v39;
  __int128 *v40;
  uint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  BOOL v45;
  char v46;
  unint64_t v47;
  char *v48;
  double v49;
  double v50;
  double *i;
  char v52;
  char v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  unint64_t v73;
  uint64_t **v74;
  double v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  char v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  BOOL v103;
  unint64_t v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t v107;
  double v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  id *location;
  __int128 *v113;
  id v114;
  unint64_t v115;
  __int128 *v116;
  void **v117;
  char v118;
  char v119;
  uint64_t v120;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v117 = (void **)(a1 + 96);
    v111 = (_QWORD *)(a1 + 184);
    location = (id *)(a1 + 88);
    do
    {
      v6 = *(__int128 **)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (v7 - v6);
      if (v8)
      {
        if (v8 != 1)
        {
          v13 = a2;
          v14 = a2;
          v15 = v5;
          v16 = *(_QWORD *)(a1 + 96);
          if (v6 != v7)
          {
            do
            {
              v17 = *(double *)(v16 + 8);
              v18 = *(double *)(v16 + 16);
              if (v17 > v15 && v17 < v14)
                v14 = *(double *)(v16 + 8);
              if (v18 > v5)
                v20 = *(double *)(v16 + 16);
              else
                v20 = v13;
              if (v18 < v13)
              {
                v15 = v5;
                v13 = v20;
              }
              v16 += 48;
            }
            while ((__int128 *)v16 != v7);
          }
          if (v13 >= v14)
            v21 = v14;
          else
            v21 = v13;
          v22 = *(double *)(a1 + 16);
          if (v22 > 0.0)
          {
            v23 = v22 * floor(v21 / v22);
            v24 = v22 * floor((v22 + v5) / v22);
            if (v23 >= v24)
              v21 = v23;
            else
              v21 = v24;
          }
          *v117 = 0;
          v117[1] = 0;
          v117[2] = 0;
          if (v6 != v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v28 = *(char **)(a1 + 96);
            v27 = *(char **)(a1 + 104);
            v29 = v25;
            if (v27 != v28)
            {
              do
              {
                v30 = *((_OWORD *)v27 - 3);
                v31 = *((_OWORD *)v27 - 2);
                *(_OWORD *)(v29 - 21) = *(_OWORD *)(v27 - 21);
                *((_OWORD *)v29 - 3) = v30;
                *((_OWORD *)v29 - 2) = v31;
                v29 -= 48;
                v27 -= 48;
              }
              while (v27 != v28);
              v27 = (char *)*v117;
            }
            *(_QWORD *)(a1 + 96) = v29;
            *(_QWORD *)(a1 + 104) = v25;
            *(_QWORD *)(a1 + 112) = &v25[48 * v26];
            if (v27)
              operator delete(v27);
          }
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(a1);
          v113 = v6;
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            v120 = a1;
            v33 = 126 - 2 * __clz(v8);
            if (v113 == v7)
              v34 = 0;
            else
              v34 = v33;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*,false>((uint64_t)v113, v7, (uint64_t)&v120, v34, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v114 = 0;
          if (v113 == v7)
          {
LABEL_130:
            v100 = *(_QWORD **)(a1 + 176);
            if (v100 != v111)
            {
              do
              {
                v101 = (_QWORD *)v100[1];
                if (v101)
                {
                  do
                  {
                    v102 = v101;
                    v101 = (_QWORD *)*v101;
                  }
                  while (v101);
                }
                else
                {
                  do
                  {
                    v102 = (_QWORD *)v100[2];
                    v103 = *v102 == (_QWORD)v100;
                    v100 = v102;
                  }
                  while (!v103);
                }
                v100 = v102;
              }
              while (v102 != v111);
            }
            *(double *)(a1 + 56) = v21;

            if (v113)
              operator delete(v113);
            goto LABEL_147;
          }
          v115 = 0;
          v116 = v7;
          v39 = 0;
          v40 = v113;
          while (2)
          {
            v119 = 0;
            v41 = *(_QWORD *)v40;
            v42 = *((double *)v40 + 1);
            v43 = *((double *)v40 + 2);
            v44 = *((_QWORD *)v40 + 3);
            v118 = *((_BYTE *)v40 + 32);
            if (v118)
              v45 = v42 > v21;
            else
              v45 = 0;
            if (v45)
            {
              v46 = *((_BYTE *)v40 + 33);
              v119 = v118;
              v48 = &v118;
              v47 = v44;
              v49 = v43;
              v50 = v42;
            }
            else
            {
              v46 = 0;
              v47 = 0;
              v48 = &v119;
              v49 = 0.0;
              v50 = 0.0;
              v41 = 0;
            }
            *v48 = 0;
            if (v118)
            {
              for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v42 >= *i; i += 2)
              {
                if (v42 < i[1])
                {
                  v118 = 0;
                  v68 = *((unsigned __int8 *)v40 + 42);
                  v52 = *((_BYTE *)v40 + 41);
                  v53 = *((_BYTE *)v40 + 40);
                  goto LABEL_106;
                }
              }
              v52 = *((_BYTE *)v40 + 41);
              v53 = *((_BYTE *)v40 + 40);
              if ((v39 & 1) != 0)
              {
                if (v115 == v44 || *(_BYTE *)(a1 + 24))
                {
                  v54 = v43 - v42;
                  v55 = *(_QWORD *)(a1 + 128);
                  if (v55)
                  {
                    v56 = v55 + 1;
                    v54 = *(double *)(a1 + 120) + (v54 - *(double *)(a1 + 120)) / (double)v56;
                  }
                  else
                  {
                    v56 = 1;
                  }
                  goto LABEL_85;
                }
                v68 = *((unsigned __int8 *)v40 + 42);
              }
              else
              {
                v54 = v43 - v42;
                v62 = *(_QWORD *)(a1 + 128);
                if (v62)
                {
                  v56 = v62 + 1;
                  v54 = *(double *)(a1 + 120) + (v54 - *(double *)(a1 + 120)) / (double)v56;
                }
                else
                {
                  v56 = 1;
                }
                v115 = v44;
LABEL_85:
                *(double *)(a1 + 120) = v54;
                *(_QWORD *)(a1 + 128) = v56;
                v68 = 1;
              }
              if (*(_BYTE *)(a1 + 25))
              {
                HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(a1, v44);
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                if (v69)
                {
                  objc_msgSend(v114, "objectForKeyedSubscript:", v69);
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  v71 = v70;
                  if (v70)
                  {
                    if (objc_msgSend(v70, "longLongValue") != v44 && !*(_BYTE *)(a1 + 24))
                      goto LABEL_103;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v44);
                    v72 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", v72, v69);

                  }
                  v73 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(a1, v44);
                  v74 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v73);
                  v75 = v43 - v42;
                  v76 = v74[1];
                  if (v76)
                  {
                    v77 = (uint64_t)v76 + 1;
                    v75 = *(double *)v74 + (v75 - *(double *)v74) / (double)v77;
                  }
                  else
                  {
                    v77 = 1;
                  }
                  *(double *)v74 = v75;
                  v74[1] = (uint64_t *)v77;
                  v52 = 1;
LABEL_103:

                }
              }
              v39 = 1;
LABEL_106:
              v87 = v119;
              if (v119)
              {
                v88 = v68 != 0;
                v90 = *(char **)(a1 + 104);
                v89 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v90 < v89)
                {
                  *(_QWORD *)v90 = v41;
                  *((double *)v90 + 1) = v50;
                  *((double *)v90 + 2) = v49;
                  *((_QWORD *)v90 + 3) = v47;
                  v90[32] = v87;
                  v90[33] = v46;
                  v90[40] = v53;
                  v90[41] = v52;
                  v61 = v90 + 48;
                  v90[42] = v88;
                  v7 = v116;
                  goto LABEL_126;
                }
                v86 = (char *)*v117;
                v91 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (_BYTE *)*v117) >> 4);
                v92 = v91 + 1;
                if (v91 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)v86) >> 4);
                if (2 * v93 > v92)
                  v92 = 2 * v93;
                if (v93 >= 0x2AAAAAAAAAAAAAALL)
                  v94 = 0x555555555555555;
                else
                  v94 = v92;
                if (v94)
                {
                  v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v94);
                  v86 = *(char **)(a1 + 96);
                  v90 = *(char **)(a1 + 104);
                }
                else
                {
                  v95 = 0;
                }
                v96 = v94 + 48 * v91;
                *(_QWORD *)v96 = v41;
                *(double *)(v96 + 8) = v50;
                *(double *)(v96 + 16) = v49;
                *(_QWORD *)(v96 + 24) = v47;
                *(_BYTE *)(v96 + 32) = v87;
                *(_BYTE *)(v96 + 33) = v46;
                *(_BYTE *)(v96 + 40) = v53;
                *(_BYTE *)(v96 + 41) = v52;
                *(_BYTE *)(v96 + 42) = v88;
                v97 = v96;
                if (v90 == v86)
                {
                  v7 = v116;
                }
                else
                {
                  v7 = v116;
                  do
                  {
                    v98 = *((_OWORD *)v90 - 3);
                    v99 = *((_OWORD *)v90 - 2);
                    *(_OWORD *)(v97 - 21) = *(_OWORD *)(v90 - 21);
                    *(_OWORD *)(v97 - 48) = v98;
                    *(_OWORD *)(v97 - 32) = v99;
                    v97 -= 48;
                    v90 -= 48;
                  }
                  while (v90 != v86);
                  v86 = (char *)*v117;
                }
                v61 = (_OWORD *)(v96 + 48);
                *(_QWORD *)(a1 + 96) = v97;
                *(_QWORD *)(a1 + 104) = v96 + 48;
                *(_QWORD *)(a1 + 112) = v94 + 48 * v95;
                if (v86)
LABEL_125:
                  operator delete(v86);
                goto LABEL_126;
              }
              v7 = v116;
            }
            else
            {
              v57 = *(__int128 **)(a1 + 104);
              v58 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v57 < v58)
              {
                v59 = *v40;
                v60 = v40[2];
                v57[1] = v40[1];
                v57[2] = v60;
                *v57 = v59;
                v61 = v57 + 3;
                goto LABEL_126;
              }
              v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (_BYTE *)*v117) >> 4);
              v64 = v63 + 1;
              if (v63 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)*v117) >> 4);
              if (2 * v65 > v64)
                v64 = 2 * v65;
              if (v65 >= 0x2AAAAAAAAAAAAAALL)
                v66 = 0x555555555555555;
              else
                v66 = v64;
              if (v66)
                v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v66);
              else
                v67 = 0;
              v78 = (__int128 *)(v66 + 48 * v63);
              v79 = *v40;
              v80 = v40[2];
              v78[1] = v40[1];
              v78[2] = v80;
              *v78 = v79;
              v82 = *(char **)(a1 + 96);
              v81 = *(char **)(a1 + 104);
              v83 = v78;
              if (v81 != v82)
              {
                do
                {
                  v84 = *((_OWORD *)v81 - 3);
                  v85 = *((_OWORD *)v81 - 2);
                  *(__int128 *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                  *(v83 - 3) = v84;
                  *(v83 - 2) = v85;
                  v83 -= 3;
                  v81 -= 48;
                }
                while (v81 != v82);
                v81 = (char *)*v117;
              }
              v61 = v78 + 3;
              *(_QWORD *)(a1 + 96) = v83;
              *(_QWORD *)(a1 + 104) = v78 + 3;
              *(_QWORD *)(a1 + 112) = v66 + 48 * v67;
              if (v81)
              {
                v86 = v81;
                goto LABEL_125;
              }
LABEL_126:
              *(_QWORD *)(a1 + 104) = v61;
            }
            v40 += 3;
            if (v40 == v7)
              goto LABEL_130;
            continue;
          }
        }
        v9 = *((double *)v6 + 1);
        v10 = *((double *)v6 + 2);
        v11 = *((_QWORD *)v6 + 3);
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v9 >= *j; j += 2)
        {
          if (v9 < j[1])
            goto LABEL_145;
        }
        if (*((_BYTE *)v6 + 32))
        {
          v35 = v10 - v9;
          v36 = *(_QWORD *)(a1 + 128);
          if (v36)
          {
            v37 = v36 + 1;
            v38 = *(double *)(a1 + 120) + (v35 - *(double *)(a1 + 120)) / (double)v37;
          }
          else
          {
            v38 = v10 - v9;
            v37 = 1;
          }
          *(double *)(a1 + 120) = v38;
          *(_QWORD *)(a1 + 128) = v37;
          if (*(_BYTE *)(a1 + 25))
          {
            v104 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(a1, v11);
            v105 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v104);
            v106 = v105[1];
            if (v106)
            {
              v107 = (uint64_t)v106 + 1;
              v35 = *(double *)v105 + (v35 - *(double *)v105) / (double)v107;
            }
            else
            {
              v107 = 1;
            }
            *(double *)v105 = v35;
            v105[1] = (uint64_t *)v107;
            v6 = (__int128 *)*v117;
          }
        }
LABEL_145:
        *(_QWORD *)(a1 + 104) = v6;
      }
      *(double *)(a1 + 56) = a2;
LABEL_147:
      v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(double) [Statistics = HDStatisticsAverageSampleDuration]");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "handleFailureInFunction:file:lineNumber:description:", v110, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v108 = *(double *)(a1 + 56);
      }
      v5 = v108;
    }
    while (v108 < a2);
  }
}

void sub_1B7D5ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 264), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 304);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D5AF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 344);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D5AFF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 240);
      v11 = *(char **)(*(_QWORD *)a3 + 248);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 248);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 240);
      v24 = *(char **)(*(_QWORD *)a3 + 248);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 248);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 240);
            v31 = *(char **)(*(_QWORD *)a3 + 248);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 248);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08030;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08030;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration>(HKStatistics *,HDStatisticsBucket<HDStatisticsAverageSampleDuration> const&)::{lambda(HDStatisticsAverageSampleDuration const&)#1}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsAverageSampleDuration const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 536))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D5C77C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 504);
      v7 = *(_QWORD *)(a1 + 512);
      if (v7 == v6)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(a1, v9);
      if (v7 != v6)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D5C980(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  double *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  double v22;
  uint64_t *v23;
  char v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char v61;
  double v62;
  char v63;
  char v64;
  char v65;

  v5 = (double *)(a1 + 8);
  v6 = *(uint64_t **)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v63 = *(_BYTE *)(a2 + 32);
  v10 = v63;
  v11 = *(_BYTE *)(a2 + 33);
  v65 = 0;
  if (v63 && v7 >= *v5)
  {
    v14 = &v63;
    v12 = v11;
    v65 = v63;
    v15 = v6;
    v16 = v7;
    v17 = *(double *)&v8;
    v13 = (unint64_t)v9;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = &v65;
    v15 = 0;
    v16 = 0.0;
    v17 = 0.0;
  }
  *v14 = 0;
  v64 = 0;
  if (v65 && ((v18 = *(double *)(a1 + 16), *(_DWORD *)(a1 + 36)) ? (v19 = v16 < v18) : (v19 = v16 <= v18), !v19))
  {
    v21 = &v65;
    v61 = v12;
    v64 = v65;
    v20 = v13;
    v62 = v17;
    v22 = v16;
    v23 = v15;
  }
  else
  {
    v62 = 0.0;
    v61 = 0;
    v20 = 0;
    v21 = &v64;
    v22 = 0.0;
    v23 = 0;
  }
  *v21 = 0;
  v24 = v65;
  if (v65)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 208, v13, v13);
    v25 = *(char **)(a1 + 112);
    if (v25 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
    {
      v28 = *(double *)(a1 + 8);
      v29 = *(double *)(a1 + 16);
      if (v16 >= v28)
        v28 = v16;
      if (v29 >= v17)
        v29 = v17;
      *(double *)(a1 + 48) = v28;
      *(double *)(a1 + 56) = v29;
    }
    else
    {
      if (v16 < *(double *)(a1 + 48))
      {
        v26 = *(double *)(a1 + 8);
        if (v16 >= v26)
          v26 = v16;
        *(double *)(a1 + 48) = v26;
      }
      if (v17 > *(double *)(a1 + 56))
      {
        v27 = *(double *)(a1 + 16);
        if (v27 >= v17)
          v27 = v17;
        *(double *)(a1 + 56) = v27;
      }
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v30 = *(double *)(a1 + 64);
      if (v16 < v30)
        v30 = v16;
      *(double *)(a1 + 64) = v30;
    }
    if (a3 && v16 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime((uint64_t)v5, v16);
      v25 = *(char **)(a1 + 112);
    }
    v31 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v25 >= v31)
    {
      v33 = 0x555555555555555;
      v34 = *(char **)(a1 + 104);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v34) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 4);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 < 0x2AAAAAAAAAAAAAALL)
        v33 = v36;
      if (v33)
      {
        v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v33);
        v34 = *(char **)(a1 + 104);
        v25 = *(char **)(a1 + 112);
      }
      else
      {
        v38 = 0;
      }
      v39 = v33 + 48 * v35;
      *(_QWORD *)v39 = v15;
      *(double *)(v39 + 8) = v16;
      *(double *)(v39 + 16) = v17;
      *(_QWORD *)(v39 + 24) = v13;
      v40 = v33 + 48 * v38;
      *(_BYTE *)(v39 + 32) = v24;
      *(_BYTE *)(v39 + 33) = v12;
      *(_WORD *)(v39 + 40) = 0;
      *(_BYTE *)(v39 + 42) = 0;
      v32 = (_QWORD *)(v39 + 48);
      if (v25 != v34)
      {
        do
        {
          v41 = *((_OWORD *)v25 - 3);
          v42 = *((_OWORD *)v25 - 2);
          *(_OWORD *)(v39 - 21) = *(_OWORD *)(v25 - 21);
          *(_OWORD *)(v39 - 48) = v41;
          *(_OWORD *)(v39 - 32) = v42;
          v39 -= 48;
          v25 -= 48;
        }
        while (v25 != v34);
        v34 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v39;
      *(_QWORD *)(a1 + 112) = v32;
      *(_QWORD *)(a1 + 120) = v40;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v25 = v15;
      *((double *)v25 + 1) = v16;
      *((double *)v25 + 2) = v17;
      *((_QWORD *)v25 + 3) = v13;
      v25[32] = v24;
      v25[33] = v12;
      *((_WORD *)v25 + 20) = 0;
      v32 = v25 + 48;
      v25[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v32;
    if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
    {
      *(_QWORD *)(a1 + 144) = v6;
      *(double *)(a1 + 152) = v7;
      *(double *)(a1 + 160) = *(double *)&v8;
      *(_QWORD *)(a1 + 168) = v9;
      *(_BYTE *)(a1 + 176) = v10;
      *(_BYTE *)(a1 + 177) = v11;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v43 = HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_canonicalSourceIDForSourceID((uint64_t)v5, v13);
      v44 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource((uint64_t)v5, v43);
      if (!*((_BYTE *)v44 + 48) || *((double *)v44 + 3) <= v7)
      {
        v44[2] = v6;
        *((double *)v44 + 3) = v7;
        v44[4] = v8;
        v44[5] = v9;
        *((_BYTE *)v44 + 48) = v10;
        *((_BYTE *)v44 + 49) = v11;
      }
    }
  }
  v45 = v64;
  if (v64)
  {
    v46 = *(_QWORD *)(a1 + 400);
    v47 = *(_QWORD *)(a1 + 408);
    if (v46 >= v47)
    {
      v49 = *(_QWORD *)(a1 + 392);
      v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v49) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v49) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x333333333333333)
        v53 = 0x666666666666666;
      else
        v53 = v51;
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
      else
        v54 = 0;
      v55 = v53 + 40 * v50;
      v56 = v53 + 40 * v54;
      *(_QWORD *)v55 = v23;
      *(double *)(v55 + 8) = v22;
      *(double *)(v55 + 16) = v62;
      *(_QWORD *)(v55 + 24) = v20;
      *(_BYTE *)(v55 + 32) = v45;
      *(_BYTE *)(v55 + 33) = v61;
      v48 = v55 + 40;
      v58 = *(char **)(a1 + 392);
      v57 = *(char **)(a1 + 400);
      if (v57 != v58)
      {
        do
        {
          v59 = *(_OWORD *)(v57 - 40);
          v60 = *(_OWORD *)(v57 - 24);
          *(_WORD *)(v55 - 8) = *((_WORD *)v57 - 4);
          *(_OWORD *)(v55 - 24) = v60;
          *(_OWORD *)(v55 - 40) = v59;
          v55 -= 40;
          v57 -= 40;
        }
        while (v57 != v58);
        v57 = *(char **)(a1 + 392);
      }
      *(_QWORD *)(a1 + 392) = v55;
      *(_QWORD *)(a1 + 400) = v48;
      *(_QWORD *)(a1 + 408) = v56;
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_QWORD *)v46 = v23;
      *(double *)(v46 + 8) = v22;
      *(double *)(v46 + 16) = v62;
      *(_QWORD *)(v46 + 24) = v20;
      *(_BYTE *)(v46 + 32) = v45;
      v48 = v46 + 40;
      *(_BYTE *)(v46 + 33) = v61;
    }
    *(_QWORD *)(a1 + 400) = v48;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 538))
  {
    *(_BYTE *)(a1 + 540) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 540) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D5CF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 392), *(_QWORD *)(a1 + 400), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D5CFEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 540))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 540) = 0;
  }

}

void sub_1B7D5D068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D5D0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 552));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 536) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D5D450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40C88B5054);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D5D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsAverageSampleDuration>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D5D868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3()
{
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 536))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsAverageSampleDuration>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D5E498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D5E538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI33HDStatisticsAverageSampleDurationE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsAverageSampleDuration>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D080E0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(_BYTE *)(a1 + 642) = 0;
  *(_BYTE *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D080E0;
  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(_QWORD *)(a1 + 616) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7D5E6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 648) = v4;
    v3 = v5;
  }

}

void sub_1B7D5E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 82, a2);
  v7 = a2;
  v4 = a1[82];
  v5 = a1[79];
  a1[79] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(char **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  if (v9)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D5E8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[61];

  if (*(_BYTE *)(a1 + 640))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D5E95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 642))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 641))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 643))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 680);
    v18 = *(_QWORD *)(a1 + 688);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 672);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 680);
      v33 = *(char **)(a1 + 672);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 672);
      }
      *(_QWORD *)(a1 + 672) = v28;
      *(_QWORD *)(a1 + 680) = v21;
      *(_QWORD *)(a1 + 688) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 680) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D5EBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 642))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 641))
    goto LABEL_5;
  v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_406);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 664);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;

  *(_BYTE *)(a1 + 641) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 672);
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 672);
      v37 = *(__int128 **)(a1 + 680);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 680);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 680) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 672);
  v39 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608));
  }
  *(_BYTE *)(a1 + 642) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 644))
    {
      *(_BYTE *)(a1 + 644) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D5F2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 642))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 642))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 664);
    *(_QWORD *)(a1 + 664) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 641))
  {
    v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 664);
      *(_QWORD *)(a1 + 664) = v9;

      v8 = *(void **)(a1 + 664);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D5F5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 640) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 640) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D5F6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 640), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::archive((uint64_t)v27, a1 + 240);
}

void sub_1B7D5F88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **i;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **j;
  uint64_t **v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  void *v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t k;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  __n128 v64;
  void *v65[2];
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p;
  char *v76;
  unint64_t v77;
  int v78;
  void *v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int16 v83;
  _QWORD v84[10];
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  void (**v102)(statistics::StatisticsEngine *__hidden);
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BYTE v109[32];
  unint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int16 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int16 v123;
  _QWORD v124[2];
  char v125;

  v60 = a2;
  *(_BYTE *)(a1 + 640) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v110 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v110));
  v62 = a1;
  v102 = &off_1E6D09A88;
  v103 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v64.n128_u64[0] = v104;
  if (v103)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    *(_OWORD *)v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0;
    memset(v84, 0, 74);
    v87 = 0;
    v78 = 0;
    __p = 0;
    v77 = 0;
    v76 = 0;
    v86 = 0;
    v85 = &v86;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    v4 = *(_QWORD *)(v103 + 72);
    v68 = *(_QWORD *)(v103 + 64);
    v69 = *(_BYTE *)(v103 + 185);
    v70 = *(_BYTE *)(v103 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    v73 = v4;
    v5 = *(_QWORD *)(v103 + 80);
    v6 = *(_QWORD *)(v103 + 88);
    v61 = (_QWORD *)v103;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v76;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v76 = (char *)(v19 + 6);
          v77 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, v23);
      v78 = v111;
      if (v79[0])
      {
        v79[1] = v79[0];
        operator delete(v79[0]);
      }
      *(_OWORD *)v79 = v112;
      v80 = v113;
      *(_QWORD *)&v113 = 0;
      v112 = 0uLL;
      v81 = v114;
      v82 = v115;
      v83 = v116;
      v84[0] = v117;
      v24 = (void *)v84[1];
      if (v84[1])
      {
        v84[2] = v84[1];
        operator delete((void *)v84[1]);
        v24 = (void *)v112;
      }
      *(_OWORD *)&v84[1] = v118;
      v84[3] = v119;
      v119 = 0;
      v118 = 0uLL;
      v84[4] = v120;
      *(_OWORD *)&v84[5] = v121;
      *(_OWORD *)&v84[7] = v122;
      LOWORD(v84[9]) = v123;
      if (v24)
      {
        *((_QWORD *)&v112 + 1) = v24;
        operator delete(v24);
      }
    }
    v25 = (_QWORD **)v61[17];
    for (i = (_QWORD **)v61[18]; v25 != i; ++v25)
    {
      v27 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, *v25);
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v86;
      for (j = &v86; ; v29 = *j)
      {
        v31 = j;
        if (!v29)
          break;
        while (1)
        {
          j = (uint64_t **)v29;
          v32 = v29[4];
          if (v32 > v28)
            break;
          if (v32 >= v28)
          {
            v33 = (char *)j;
            goto LABEL_40;
          }
          v29 = j[1];
          if (!v29)
          {
            v31 = j + 1;
            goto LABEL_37;
          }
        }
      }
LABEL_37:
      v33 = (char *)operator new(0xC8uLL);
      v124[1] = &v86;
      *((_QWORD *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      v125 = 1;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = j;
      *v31 = (uint64_t *)v33;
      v34 = (uint64_t *)v33;
      if (*v85)
      {
        v85 = (uint64_t **)*v85;
        v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v34);
      ++v87;
      v124[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v124);
LABEL_40:
      v35 = (void *)*((_QWORD *)v33 + 6);
      *((_DWORD *)v33 + 10) = v111;
      if (v35)
      {
        *((_QWORD *)v33 + 7) = v35;
        operator delete(v35);
        *((_QWORD *)v33 + 6) = 0;
        *((_QWORD *)v33 + 7) = 0;
        *((_QWORD *)v33 + 8) = 0;
      }
      *((_OWORD *)v33 + 3) = v112;
      *((_QWORD *)v33 + 8) = v113;
      *(_QWORD *)&v113 = 0;
      v112 = 0uLL;
      *((_QWORD *)v33 + 9) = *((_QWORD *)&v113 + 1);
      v36 = v115;
      *((_OWORD *)v33 + 5) = v114;
      *((_OWORD *)v33 + 6) = v36;
      *((_WORD *)v33 + 56) = v116;
      *((_QWORD *)v33 + 15) = v117;
      v37 = (void *)*((_QWORD *)v33 + 16);
      if (v37)
      {
        *((_QWORD *)v33 + 17) = v37;
        operator delete(v37);
        *((_QWORD *)v33 + 16) = 0;
        *((_QWORD *)v33 + 17) = 0;
        *((_QWORD *)v33 + 18) = 0;
        v37 = (void *)v112;
      }
      *((_OWORD *)v33 + 8) = v118;
      *((_QWORD *)v33 + 18) = v119;
      v119 = 0;
      v118 = 0uLL;
      *((_QWORD *)v33 + 19) = v120;
      v38 = v122;
      *((_OWORD *)v33 + 10) = v121;
      *((_OWORD *)v33 + 11) = v38;
      *((_WORD *)v33 + 96) = v123;
      if (v37)
      {
        *((_QWORD *)&v112 + 1) = v37;
        operator delete(v37);
      }
    }
    v39 = v61[5];
    for (k = v61[6]; v39 != k; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v44 = v105;
  v45 = v106;
  if (v105 != v106)
  {
    v46 = (char *)v65[1];
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = (char *)v65[1];
          v51 = (char *)v65[0];
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(_QWORD *)&v66 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *((_QWORD *)v46 + 1) = v47;
        *((_QWORD *)v46 + 2) = v49;
        *((_QWORD *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);

}

void sub_1B7D600B4(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x410]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  v10 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x370]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a3);
  v11 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  v12 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x438]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 288));
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

_QWORD *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[488];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[424];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D606EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v38[2];
  char v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  v12 = *(_OWORD *)(a2 + 152);
  v13 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 208), *(const void **)(a2 + 208), *(_QWORD *)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 256);
  v16 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v15;
  v17 = (uint64_t **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = v16;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  v18 = *(_QWORD **)(a2 + 280);
  if (v18 != (_QWORD *)(a2 + 288))
  {
    do
    {
      v19 = *v17;
      v20 = (uint64_t *)(a1 + 288);
      if (*(uint64_t ***)(a1 + 280) == v17)
        goto LABEL_11;
      v21 = *v17;
      v22 = (uint64_t *)(a1 + 288);
      if (v19)
      {
        do
        {
          v20 = v21;
          v21 = (uint64_t *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v22[2];
          v23 = *v20 == (_QWORD)v22;
          v22 = v20;
        }
        while (v23);
      }
      v24 = v18[4];
      if (v20[4] < v24)
      {
LABEL_11:
        if (v19)
          v25 = (uint64_t **)v20;
        else
          v25 = (uint64_t **)(a1 + 288);
        if (v19)
          v26 = (uint64_t **)(v20 + 1);
        else
          v26 = (uint64_t **)(a1 + 288);
        if (*v26)
          goto LABEL_28;
      }
      else
      {
        v26 = (uint64_t **)(a1 + 288);
        v25 = (uint64_t **)(a1 + 288);
        if (v19)
        {
          v27 = *v17;
          while (1)
          {
            while (1)
            {
              v25 = (uint64_t **)v27;
              v28 = v27[4];
              if (v28 <= v24)
                break;
              v27 = *v25;
              v26 = v25;
              if (!*v25)
                goto LABEL_27;
            }
            if (v28 >= v24)
              goto LABEL_28;
            v27 = v25[1];
            if (!v27)
            {
              v26 = v25 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v29 = (char *)operator new(0xC8uLL);
      v38[0] = v29;
      v38[1] = a1 + 288;
      v39 = 0;
      *((_QWORD *)v29 + 4) = v18[4];
      *((_DWORD *)v29 + 10) = *((_DWORD *)v18 + 10);
      *((_QWORD *)v29 + 6) = 0;
      *((_QWORD *)v29 + 7) = 0;
      *((_QWORD *)v29 + 8) = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v29 + 6, (const void *)v18[6], v18[7], (uint64_t)(v18[7] - v18[6]) >> 3);
      v30 = *(_OWORD *)(v18 + 9);
      v31 = *(_OWORD *)(v18 + 11);
      *(_OWORD *)(v29 + 98) = *(_OWORD *)((char *)v18 + 98);
      *(_OWORD *)(v29 + 88) = v31;
      *(_OWORD *)(v29 + 72) = v30;
      v32 = v18[15];
      *((_QWORD *)v29 + 16) = 0;
      *((_QWORD *)v29 + 15) = v32;
      *((_QWORD *)v29 + 17) = 0;
      *((_QWORD *)v29 + 18) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v29 + 16, (const void *)v18[16], v18[17], (uint64_t)(v18[17] - v18[16]) >> 4);
      *((_QWORD *)v29 + 19) = v18[19];
      v33 = *((_OWORD *)v18 + 10);
      v34 = *((_OWORD *)v18 + 11);
      *((_QWORD *)v29 + 24) = v18[24];
      *((_OWORD *)v29 + 10) = v33;
      *((_OWORD *)v29 + 11) = v34;
      v39 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v25, v26, (uint64_t *)v29);
      v38[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
LABEL_28:
      v35 = (_QWORD *)v18[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v18[2];
          v23 = *v36 == (_QWORD)v18;
          v18 = v36;
        }
        while (!v23);
      }
      v18 = v36;
    }
    while (v36 != (_QWORD *)(a2 + 288));
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 344), *(const void **)(a2 + 344), *(_QWORD *)(a2 + 352), (uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1B7D60B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void **a11, id *location, void **a13, char a14)
{
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 352) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B7D60CAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(v1 + 4);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 208, (__n128 *)(a2 + 208));
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 240);
  v13 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 256) = v13;
  v14 = a1 + 288;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v15 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v15;
  v16 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(a2 + 280) = a2 + 288;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  __n128 v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  __n128 v37;
  id v38;
  id *i;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  void *v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  double v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  id *v75;
  id v76;
  void *v77;
  void *v78;
  HDStatisticsPercentiles *v79;
  void *v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  int v101;
  void *v102;
  void *v103;
  int v104;
  void *v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  id v111;
  char v113[8];
  void *v114;
  id *v115;
  void *__p;
  void *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _QWORD v120[3];
  _QWORD *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  __int128 v129;
  _BYTE v130[26];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = a2 + 5;
  if (v3 != -1.79769313e308)
    v5 = a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v110 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v106 = v6;
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v110 + 344);
      v16 = *(uint64_t **)(v110 + 352);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      v6 = v106;
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v118[0] = &off_1E6D082D0;
  v119 = v118;
  v21 = v12;
  v22 = (uint64_t)v119;
  v107 = v21;
  if (!v119)
    goto LABEL_22;
  if (v119 != v118)
  {
    v22 = (*(uint64_t (**)(void))(*v119 + 16))();
LABEL_22:
    v125 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(v118[0] + 24))((uint64_t)v118, v124);
LABEL_24:
  *(_QWORD *)&v129 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D081B0;
  v24 = v23 + 1;
  v25 = (uint64_t)v125;
  if (!v125)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v125 != v124)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v125 + 16))(v125, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v124[0] + 24))(v124);
LABEL_29:
  *(_QWORD *)&v129 = v23;
  v26 = v21;
  v27 = (id)MEMORY[0x1E0CB6A28];
  v28 = v26;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v113, v110);
  if (!(_QWORD)v129)
    std::__throw_bad_function_call[abi:ne180100]();
  v31 = (*(uint64_t (**)(_QWORD, char *, __n128))(*(_QWORD *)v129 + 48))(v129, v113, v30);
  v32 = *(double **)(v31 + 8);
  v33 = 0.0;
  while (v32 != *(double **)(v31 + 16))
  {
    v35 = *v32;
    v34 = v32[1];
    v32 += 2;
    v33 = v33 + v34 - v35;
  }
  objc_msgSend(v27, "quantityWithUnit:doubleValue:", v29, v33 + *(double *)(v31 + 32));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setDuration:", v36);

  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v114)
  {
    v115 = (id *)v114;
    operator delete(v114);
  }

  v37 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v113, v110);
  if (!(_QWORD)v129)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v26, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD, char *, __n128))(*(_QWORD *)v129 + 48))(v129, v113, v37));
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v114)
  {
    v115 = (id *)v114;
    operator delete(v114);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v38 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v27 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v113, v110);
    for (i = v115; i; i = (id *)*i)
    {
      v40 = i[2];
      v41 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (!(_QWORD)v129)
        std::__throw_bad_function_call[abi:ne180100]();
      v43 = (*(uint64_t (**)(_QWORD, id *))(*(_QWORD *)v129 + 48))(v129, i + 3);
      v44 = *(double **)(v43 + 8);
      v45 = 0.0;
      while (v44 != *(double **)(v43 + 16))
      {
        v47 = *v44;
        v46 = v44[1];
        v44 += 2;
        v45 = v45 + v46 - v47;
      }
      objc_msgSend(v41, "quantityWithUnit:doubleValue:", v42, v45 + *(double *)(v43 + 32));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "setObject:forKeyedSubscript:", v48, v40);

      if (!(_QWORD)v129)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD, id *))(*(_QWORD *)v129 + 48))(v129, i + 3));
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setObject:forKeyedSubscript:", v49, v40);

      v26 = v28;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v113);
    objc_msgSend(v26, "setDurationBySource:", v38);
    objc_msgSend(v26, "setDataCountBySource:", v27);

  }
  v50 = (void **)v129;
  if ((_BYTE **)v129 == &v126)
  {
    v51 = 4;
    v50 = (void **)&v126;
  }
  else
  {
    if (!(_QWORD)v129)
      goto LABEL_56;
    v51 = 5;
  }
  (*((void (**)(void))*v50 + v51))();
LABEL_56:
  v52 = v125;
  if (v125 == v124)
  {
    v53 = 4;
    v52 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_61;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_61:
  v54 = (uint64_t)v119;
  if (!v119)
  {
LABEL_64:
    v121 = (_QWORD *)v54;
    goto LABEL_66;
  }
  if (v119 != v118)
  {
    v54 = (*(uint64_t (**)(void))(*v119 + 16))();
    goto LABEL_64;
  }
  v121 = v120;
  (*(void (**)(uint64_t, _QWORD *))(v118[0] + 24))((uint64_t)v118, v120);
LABEL_66:
  v123 = 0;
  v55 = operator new(0x28uLL);
  *v55 = &off_1E6D08240;
  v56 = (uint64_t)v121;
  if (!v121)
  {
LABEL_69:
    v55[4] = v56;
    goto LABEL_71;
  }
  if (v121 != v120)
  {
    v56 = (*(uint64_t (**)(void))(*v121 + 16))();
    goto LABEL_69;
  }
  v55[4] = v55 + 1;
  (*(void (**)(_QWORD *))(v120[0] + 24))(v120);
LABEL_71:
  v123 = v55;
  v111 = v26;
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v113, v110);
  if (!v123)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (*(uint64_t (**)(_BYTE *, char *, __n128))(*(_QWORD *)v123 + 48))(v123, v113, v57);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v126, *(const void **)v58, *(_QWORD *)(v58 + 8), (uint64_t)(*(_QWORD *)(v58 + 8) - *(_QWORD *)v58) >> 3);
  v59 = *(_OWORD *)(v58 + 24);
  v60 = *(_OWORD *)(v58 + 40);
  *(_OWORD *)&v130[10] = *(_OWORD *)(v58 + 50);
  *(_OWORD *)v130 = v60;
  v129 = v59;
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v114)
  {
    v115 = (id *)v114;
    operator delete(v114);
  }
  v61 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v126);
  v62 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "quantityWithUnit:doubleValue:", v63, v61);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v111, "setPercentileQuantity:", v64);

  objc_msgSend(v111, "setDataCount:", (v127 - v126) >> 3);
  v65 = *(_QWORD *)(a1 + 24);
  LOBYTE(v66) = v65;
  if ((v65 & 0x20) != 0)
  {
    v68 = *((double *)&v129 + 1);
    v67 = *(double *)v130;
    v69 = *(double *)&v130[8];
    v70 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "quantityWithUnit:doubleValue:", v71, v68);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v111, "setMostRecentQuantity:", v72);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v67, v69);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v111, "setMostRecentQuantityDateInterval:", v73);

    v66 = *(_QWORD *)(a1 + 24);
  }
  if ((v66 & 1) != 0)
  {
    v74 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v27 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v65 & 0x20) != 0)
    {
      v108 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v109 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v108 = 0;
      v109 = 0;
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v113, v110);
    v75 = v115;
    if (v115)
    {
      v26 = (id)0x1E0CB3000;
      do
      {
        v76 = v75[2];
        v77 = (void *)MEMORY[0x1E0CB6A28];
        objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v123)
          std::__throw_bad_function_call[abi:ne180100]();
        v79 = (HDStatisticsPercentiles *)(*(uint64_t (**)(_BYTE *, id *))(*(_QWORD *)v123 + 48))(v123, v75 + 3);
        objc_msgSend(v77, "quantityWithUnit:doubleValue:", v78, HDStatisticsPercentiles::calculatePercentileValue(v79));
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "setObject:forKeyedSubscript:", v80, v76);

        if (!v123)
          std::__throw_bad_function_call[abi:ne180100]();
        v81 = (void *)MEMORY[0x1E0CB37E8];
        v82 = (_QWORD *)(*(uint64_t (**)(_BYTE *, id *))(*(_QWORD *)v123 + 48))(v123, v75 + 3);
        objc_msgSend(v81, "numberWithLongLong:", (uint64_t)(v82[1] - *v82) >> 3);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "setObject:forKeyedSubscript:", v83, v76);

        if ((v65 & 0x20) != 0)
        {
          if (!v123)
            std::__throw_bad_function_call[abi:ne180100]();
          v84 = (double *)(*(uint64_t (**)(_BYTE *, id *))(*(_QWORD *)v123 + 48))(v123, v75 + 3);
          v86 = v84[4];
          v85 = v84[5];
          v87 = v84[6];
          v88 = (void *)MEMORY[0x1E0CB6A28];
          objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v88, "quantityWithUnit:doubleValue:", v89, v86);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v108, "setObject:forKeyedSubscript:", v90, v76);

          objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v85, v87);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "setObject:forKeyedSubscript:", v91, v76);

        }
        v75 = (id *)*v75;
      }
      while (v75);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v113);
    objc_msgSend(v111, "setPercentileQuantityBySource:", v74);
    objc_msgSend(v111, "setDataCountBySource:", v27);
    if ((v65 & 0x20) != 0)
    {
      objc_msgSend(v111, "setMostRecentQuantityBySource:", v108);
      objc_msgSend(v111, "setMostRecentQuantityDateIntervalBySource:", v109);
    }

  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }

  v92 = v123;
  if (v123 == v122)
  {
    v93 = 4;
    v92 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_100;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_100:
  v94 = v121;
  if (v121 == v120)
  {
    v95 = 4;
    v94 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_105;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_105:

  v96 = v119;
  if (v119 == v118)
  {
    v97 = 4;
    v96 = v118;
    goto LABEL_109;
  }
  if (v119)
  {
    v97 = 5;
LABEL_109:
    (*(void (**)(void))(*v96 + 8 * v97))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v111, "averageQuantity");
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  if (v99)
  {
    objc_msgSend(v111, "averageQuantity");
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v27, "isCompatibleWithUnit:", v98) & 1) == 0)
    {

LABEL_124:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v98, v107);
      goto LABEL_125;
    }
  }
  objc_msgSend(v111, "minimumQuantity");
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  if (v100)
  {
    objc_msgSend(v111, "minimumQuantity");
    v26 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v26, "isCompatibleWithUnit:", v98))
    {
      v101 = 1;
      goto LABEL_118;
    }
  }
  objc_msgSend(v111, "maximumQuantity");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  if (v102)
  {
    objc_msgSend(v111, "maximumQuantity");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = objc_msgSend(v103, "isCompatibleWithUnit:", v98);

    v101 = v104 ^ 1;
    if (v100)
      goto LABEL_118;
  }
  else
  {
    v101 = 0;
    if (v100)
    {
LABEL_118:

      if (v99)
        goto LABEL_119;
      goto LABEL_123;
    }
  }
  if (v99)
  {
LABEL_119:

    if ((v101 & 1) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
LABEL_123:

  if (v101)
    goto LABEL_124;
LABEL_125:

  return v111;
}

void sub_1B7D61B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char *a39,char a40,uint64_t a41,uint64_t a42,char *a43,char a44,uint64_t a45,uint64_t a46,char *a47)
{
  void *v47;
  void *v48;
  uint64_t v49;
  void *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v51 = *(void **)(v49 - 200);
  if (v51)
  {
    *(_QWORD *)(v49 - 192) = v51;
    operator delete(v51);
  }

  v52 = a47;
  if (a47 == &a44)
  {
    v53 = 4;
    v52 = &a44;
  }
  else
  {
    if (!a47)
      goto LABEL_8;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_8:
  v54 = a43;
  if (a43 == &a40)
  {
    v55 = 4;
    v54 = &a40;
  }
  else
  {
    if (!a43)
      goto LABEL_13;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_13:

  v56 = a39;
  if (a39 == &a36)
  {
    v57 = 4;
    v56 = &a36;
  }
  else
  {
    if (!a39)
      goto LABEL_18;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_18:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 328);
  v2 = *(_QWORD *)(a1 + 344);
  if (v1 != (*(_QWORD *)(a1 + 352) - v2) >> 3)
  {
    v4 = (void **)(a1 + 344);
    *(_QWORD *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    v5 = *(_QWORD **)(a1 + 320);
    if (v5)
    {
      v6 = *(char **)(a1 + 352);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 344);
            v6 = *(char **)(a1 + 352);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 344) = v16;
          *(_QWORD *)(a1 + 352) = v9;
          *(_QWORD *)(a1 + 360) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 352) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D6208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  char *v60;
  char v61;
  double *v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double var2;
  double *i;
  int v76;
  int v77;
  unint64_t var3;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  char *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  unint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  double v96;
  void *v97;
  void *v98;
  double **v99;
  id *location;
  id v101;
  uint64_t *v102;
  int64_t v103;
  char **v104;
  uint64_t v105;
  HDRawQuantitySample v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v104 = (char **)(a1 + 96);
    v102 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v99 = (double **)(a1 + 208);
    v6 = (_QWORD *)(a1 + 288);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v104 = 0;
          v104[1] = 0;
          v104[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v104;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v106.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v106, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v101 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 232) = HKIntervalMask<double>::removeIntervalsBefore(v99, v38) + *(double *)(a1 + 232);
            v93 = *(_QWORD **)(a1 + 280);
            if (v93 != v6)
            {
              do
              {
                *((double *)v93 + 19) = HKIntervalMask<double>::removeIntervalsBefore((double **)v93 + 16, v38)
                                      + *((double *)v93 + 19);
                v94 = (_QWORD *)v93[1];
                if (v94)
                {
                  do
                  {
                    v95 = v94;
                    v94 = (_QWORD *)*v94;
                  }
                  while (v94);
                }
                else
                {
                  do
                  {
                    v95 = (_QWORD *)v93[2];
                    v54 = *v95 == (_QWORD)v93;
                    v93 = v95;
                  }
                  while (!v54);
                }
                v93 = v95;
              }
              while (v95 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v103 = 0;
          v61 = 0;
          v62 = v7;
          while (2)
          {
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v106.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v106.var2 = v63;
            *(double *)&v106.var4 = v62[4];
            if (!v106.var4 || v106.var1 > v38)
            {
              v64 = *(_OWORD **)(a1 + 104);
              v65 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v104) >> 4);
                v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)*v104) >> 4);
                if (2 * v71 > v70)
                  v70 = 2 * v71;
                if (v71 >= 0x2AAAAAAAAAAAAAALL)
                  v72 = 0x555555555555555;
                else
                  v72 = v70;
                if (v72)
                  v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                else
                  v73 = 0;
                v79 = (_OWORD *)(v72 + 48 * v69);
                v80 = *(_OWORD *)v62;
                v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                *v79 = v80;
                v83 = *(char **)(a1 + 96);
                v82 = *(char **)(a1 + 104);
                v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    v85 = *((_OWORD *)v82 - 3);
                    v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  v82 = *v104;
                }
                v68 = v79 + 3;
                *(_QWORD *)(a1 + 96) = v84;
                *(_QWORD *)(a1 + 104) = v79 + 3;
                *(_QWORD *)(a1 + 112) = v72 + 48 * v73;
                if (v82)
                  operator delete(v82);
              }
              else
              {
                v66 = *(_OWORD *)v62;
                v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *v64 = v66;
                v68 = v64 + 3;
              }
              *(_QWORD *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          var2 = v106.var2;
          if (v106.var2 > v38)
            var2 = v38;
          v106.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v106.var1 >= *i; i += 2)
          {
            if (v106.var1 < i[1])
              goto LABEL_139;
          }
          v76 = *((unsigned __int8 *)v62 + 42);
          v77 = *((unsigned __int8 *)v62 + 41);
          if ((v61 & 1) != 0)
          {
            var3 = v106.var3;
            if (v103 == v106.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            var3 = v106.var3;
            v103 = v106.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_138;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v87)
            goto LABEL_137;
          objc_msgSend(v101, "objectForKeyedSubscript:", v87);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v89 = v88;
          if (v88)
          {
            if (objc_msgSend(v88, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v101, "setObject:forKeyedSubscript:", v90, v87);

          }
          v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v92 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v91);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v92, &v106, v77 == 0);
          goto LABEL_136;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v106.var0 = *v7;
        v106.var1 = v13;
        v106.var2 = v14;
        v106.var3 = v15;
        v106.var4 = v18;
        v106.var5 = v16;
        *(_DWORD *)(&v106.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v106.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&v108 = v25;
        *((_QWORD *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_93:
            LOWORD(v105) = v109;
            v59 = v108;
            v60 = *v104;
            *(_OWORD *)v60 = v107;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v105;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v102, &v106, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(v58, &v106, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_93;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>]");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v96 = *(double *)(a1 + 56);
      }
      v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1B7D6284C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  void *v11;
  _OWORD *v12;
  void *v13;
  _OWORD *v14;
  int v15;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v10 = 1;
        goto LABEL_15;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)(result + 1), a2);
        return HDStatisticsTimeInterval::addSample(v5 + 10, a2, 1);
      }
      v10 = 2;
LABEL_15:
      *(_DWORD *)result = v10;
      v12 = result + 1;
      v11 = (void *)result[1];
      if (v11)
      {
        v5[2] = (uint64_t)v11;
        operator delete(v11);
      }
      v14 = v5 + 11;
      v13 = (void *)v5[11];
      v5[10] = 0;
      *v12 = 0u;
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      *((_WORD *)v5 + 36) = 0;
      if (v13)
      {
        v5[12] = (uint64_t)v13;
        operator delete(v13);
        v15 = *((unsigned __int8 *)v5 + 72);
        *v14 = 0u;
        *(_OWORD *)(v5 + 13) = 0u;
        if (v15 && *((double *)v5 + 6) > *((double *)v5 + 16))
          goto LABEL_23;
      }
      else
      {
        *v14 = 0uLL;
        *(_OWORD *)(v5 + 13) = 0uLL;
      }
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
      *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
      *((_WORD *)v5 + 36) = *((_WORD *)v5 + 76);
LABEL_23:
      HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)(v5 + 1), a2);
      v9 = v5 + 10;
      return HDStatisticsTimeInterval::addSample(v9, a2, a3);
    }
  }
  else if (!*(_DWORD *)result)
  {
    v7 = result[1];
    v8 = result[2];
    ++result;
    if (v8 == v7)
    {
      HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)result, a2);
      v9 = v5 + 10;
      return HDStatisticsTimeInterval::addSample(v9, a2, a3);
    }
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 288);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 288);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 408);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D62BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 448);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D62C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0xC8uLL);
    v12[1] = v6;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 344);
      v11 = *(char **)(*(_QWORD *)a3 + 352);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 352);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 344);
      v24 = *(char **)(*(_QWORD *)a3 + 352);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 344);
            v31 = *(char **)(*(_QWORD *)a3 + 352);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  v4 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 178);
  v5 = *(const void **)(a2 + 208);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 200);
  v6 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 88), v5, v6, (v6 - (uint64_t)v5) >> 4);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 232);
  result = *(__n128 *)(a2 + 240);
  v8 = *(_OWORD *)(a2 + 256);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 272);
  return result;
}

void sub_1B7D643F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v49;
  unint64_t v50;
  _QWORD v51[2];
  char v52;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 280);
  v47 = (_QWORD *)(a2 + 288);
  if (v3 == (_QWORD *)(a2 + 288))
    return;
  v49 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xB8uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      v52 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(_QWORD *)v51[0] = *v37;
        }
        else
        {
          *(_QWORD *)v51[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v49;
            if (*v49)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v49;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v46 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v46)
            operator delete(v46);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v50 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    if (v12 + 2 != v3 + 4)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v12 + 32, (char *)v3[6], v3[7], (uint64_t)(v3[7] - v3[6]) >> 3);
      v39 = *(_OWORD *)(v3 + 9);
      v40 = *(_OWORD *)(v3 + 11);
      *(_OWORD *)((char *)v12 + 82) = *(_OWORD *)((char *)v3 + 98);
      *(_OWORD *)(v12 + 9) = v40;
      *(_OWORD *)(v12 + 7) = v39;
      v12[13] = v3[15];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 112, (char *)v3[16], v3[17], (uint64_t)(v3[17] - v3[16]) >> 4);
    }
    v12[17] = v3[19];
    v41 = *((_OWORD *)v3 + 10);
    v42 = *((_OWORD *)v3 + 11);
    *((_WORD *)v12 + 88) = *((_WORD *)v3 + 96);
    *((_OWORD *)v12 + 9) = v41;
    *((_OWORD *)v12 + 10) = v42;

LABEL_80:
    v43 = (_QWORD *)v3[1];
    if (v43)
    {
      do
      {
        v44 = v43;
        v43 = (_QWORD *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (_QWORD *)v3[2];
        v45 = *v44 == (_QWORD)v3;
        v3 = v44;
      }
      while (!v45);
    }
    v3 = v44;
  }
  while (v44 != v47);
}

void sub_1B7D649A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }

}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D081B0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D081B0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D081B0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D64CE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D081B0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D08240;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D08240;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D08240;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D64F14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08240;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D082D0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D082D0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D651D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 616);
      v7 = *(_QWORD *)(a1 + 608);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D653E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
        {
          *(_QWORD *)(a1 + 248) = v7;
          *(double *)(a1 + 256) = v6;
          *(double *)(a1 + 264) = v8;
          *(_QWORD *)(a1 + 272) = v9;
          *(_BYTE *)(a1 + 280) = v3;
          *(_BYTE *)(a1 + 281) = v10;
          if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(_QWORD *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(_QWORD *)(a1 + 192) = v9;
            *(_BYTE *)(a1 + 200) = v3;
            *(_BYTE *)(a1 + 201) = v10;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 152) || *((double *)v49 + 16) <= v6)
          {
            v49[15] = v7;
            *((double *)v49 + 16) = v6;
            *((double *)v49 + 17) = v8;
            v49[18] = (uint64_t *)v9;
            *((_BYTE *)v49 + 152) = v3;
            *((_BYTE *)v49 + 153) = v10;
            if (!*((_BYTE *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((_BYTE *)v49 + 72) = v3;
              *((_BYTE *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 504);
        v19 = *(_QWORD *)(a1 + 512);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 496);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 496);
          v29 = *(char **)(a1 + 504);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 496);
          }
          *(_QWORD *)(a1 + 496) = v27;
          *(_QWORD *)(a1 + 504) = v20;
          *(_QWORD *)(a1 + 512) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 504) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 642))
  {
    *(_BYTE *)(a1 + 644) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 644) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D658FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(_QWORD *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D659E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  void *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = 0;
  v11 = 0uLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 200) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 224) = v10;
    operator delete(v10);
    v11 = 0uLL;
  }
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 232) = v11;
  if (*(_QWORD *)(a1 + 304))
  {
    v12 = *(_QWORD **)(a1 + 288);
    v13 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 288) = a1 + 296;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    if (v12[1])
      v14 = (_QWORD *)v12[1];
    else
      v14 = v12;
    if (v14)
    {
      v15 = (_QWORD *)v14[2];
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v14)
        {
          *v15 = 0;
          while (1)
          {
            v18 = (_QWORD *)v15[1];
            if (!v18)
              break;
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; v16 = (_QWORD *)v15[1])
          {
            do
            {
              v15 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(v14);
        for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
          v15 = i;
        v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 644))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 644) = 0;
  }

}

void sub_1B7D65BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D65C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 656));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 640) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D65FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40E29C3E6ELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D66154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D663C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 640))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D67048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D670E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::archive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive((uint64_t)&v3, (HDStatisticsPercentiles *)(a2 + 8));
}

void sub_1B7D67158(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive(uint64_t a1, HDStatisticsPercentiles *a2)
{
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsPercentiles::archive(a2);
}

void sub_1B7D671C8(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  double v22;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  v5 = a2[16];
  if (v5)
  {
    HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)&v13, *(HDStatisticsTimeInterval **)(v5 + 8), *(HDStatisticsPercentiles **)(v5 + 128));
    v6 = v19;
    v7 = v15;
    v8 = v14;
    *(_OWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 24) = v8;
    v14 = 0;
    v13 = 0uLL;
    *(_QWORD *)(a1 + 32) = v7;
    v9 = v17;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 56) = v9;
    *(_WORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 80) = v6;
    result = v22;
    v10 = v21;
    *(_OWORD *)(a1 + 88) = v20;
    *(_QWORD *)(a1 + 104) = v10;
    *(double *)(a1 + 112) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v11 = a2[14];
  if (v11)
  {
    result = *(double *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 136) = result;
    *(_QWORD *)(a1 + 144) = v12;
    *(_WORD *)(a1 + 152) = 1;
  }
  return result;
}

void sub_1B7D672D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, HDStatisticsPercentiles *a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  double v9;

  *(_WORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3)
    HDStatisticsPercentiles::unarchive(a3, this);
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v6);
    *(_QWORD *)(a1 + 72) = v6;
    result = v9;
    v5 = v8;
    *(_OWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 96) = v5;
    *(double *)(a1 + 104) = result;
  }
  return result;
}

void sub_1B7D67368(_Unwind_Exception *a1)
{
  uint64_t v1;

  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08380;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(_BYTE *)(a1 + 594) = 0;
  *(_BYTE *)(a1 + 596) = 0;
  *(_QWORD *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08380;
  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(_QWORD *)(a1 + 568) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D674D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 600) = v4;
    v3 = v5;
  }

}

void sub_1B7D67534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;

  objc_storeStrong((id *)(a1 + 608), a2);
  v7 = a2;
  v4 = *(id *)(a1 + 608);
  v5 = *(void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v4;
  v6 = v4;

  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 584));
}

void sub_1B7D675B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(char **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  if (v9)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D676FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 592))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D677A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 594))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 593))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 595))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 632);
    v18 = *(_QWORD *)(a1 + 640);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 624);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 632);
      v33 = *(char **)(a1 + 624);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 624);
      }
      *(_QWORD *)(a1 + 624) = v28;
      *(_QWORD *)(a1 + 632) = v21;
      *(_QWORD *)(a1 + 640) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 632) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D679F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 594))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 593))
    goto LABEL_5;
  v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_407);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 616);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;

  *(_BYTE *)(a1 + 593) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 624);
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 624);
      v37 = *(__int128 **)(a1 + 632);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 632);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 632) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 624);
  v39 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560));
  }
  *(_BYTE *)(a1 + 594) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 596))
    {
      *(_BYTE *)(a1 + 596) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D680F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 594))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 594))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 616);
    *(_QWORD *)(a1 + 616) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 593))
  {
    v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v9;

      v8 = *(void **)(a1 + 616);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D683EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 592) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 592) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D6850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 592), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::archive((uint64_t)v27, (HDStatisticsPercentiles *)(a1 + 240));
}

void sub_1B7D686D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t *i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  void *v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p[2];
  void *v75[14];
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  unint64_t v102;
  void *v103[2];
  void *v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  __int16 v108;
  void *v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  _QWORD v113[2];
  char v114;

  v59 = a2;
  *(_BYTE *)(a1 + 592) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v102 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v61 = a1;
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v63.n128_u64[0] = v96;
  if (v95)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[10], 0, 32);
    v79 = 0;
    v78 = 0;
    *(_OWORD *)__p = 0u;
    memset(v75, 0, 74);
    v76 = 0;
    v77 = &v78;
    v80 = 0u;
    v81 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v67 = *(_QWORD *)(v95 + 64);
    v68 = *(_BYTE *)(v95 + 185);
    v69 = *(_BYTE *)(v95 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v72 = v4;
    v5 = *(_QWORD *)(v95 + 80);
    v6 = *(_QWORD *)(v95 + 88);
    v60 = (_QWORD *)v95;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if (v7 >= v75[0])
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v75[0] - (char *)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * (((char *)v75[0] - (char *)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v75[0] - (char *)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          v75[0] = (void *)(v17 + 48 * v18);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(HDStatisticsPercentiles **)(v23 + 128));
      if (v75[1])
      {
        v75[2] = v75[1];
        operator delete(v75[1]);
      }
      *(_OWORD *)&v75[1] = *(_OWORD *)v103;
      v75[4] = v105;
      *(_OWORD *)&v75[5] = v106;
      v75[3] = v104;
      v104 = 0;
      v103[1] = 0;
      v103[0] = 0;
      *(_OWORD *)&v75[7] = v107;
      LOWORD(v75[9]) = v108;
      v75[10] = v109;
      v24 = v75[11];
      if (v75[11])
      {
        v75[12] = v75[11];
        operator delete(v75[11]);
        v24 = v103[0];
      }
      *(_OWORD *)&v75[11] = v110;
      v75[13] = v111;
      v111 = 0;
      v110 = 0uLL;
      v76 = v112;
      if (v24)
      {
        v103[1] = v24;
        operator delete(v24);
      }
    }
    v26 = (uint64_t *)v60[17];
    for (i = (uint64_t *)v60[18]; v26 != i; ++v26)
    {
      v27 = *v26;
      HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::unarchive((uint64_t)v103, *(HDStatisticsTimeInterval **)(*v26 + 8), *(HDStatisticsPercentiles **)(*v26 + 128));
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v78;
      v30 = &v78;
      v31 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            v32 = v29[4];
            if (v32 <= v28)
              break;
            v29 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_37;
          }
          if (v32 >= v28)
          {
            v34 = (char *)v31;
            goto LABEL_40;
          }
          v29 = v31[1];
        }
        while (v29);
        v30 = v31 + 1;
      }
LABEL_37:
      v34 = (char *)operator new(0x98uLL);
      v113[1] = &v78;
      *((_QWORD *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      v114 = 1;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = v31;
      *v30 = (uint64_t *)v34;
      v33 = (uint64_t *)v34;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v33);
      ++v79;
      v113[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v113);
LABEL_40:
      v35 = (void *)*((_QWORD *)v34 + 5);
      if (v35)
      {
        *((_QWORD *)v34 + 6) = v35;
        operator delete(v35);
        *((_QWORD *)v34 + 5) = 0;
        *((_QWORD *)v34 + 6) = 0;
        *((_QWORD *)v34 + 7) = 0;
      }
      *(_OWORD *)(v34 + 40) = *(_OWORD *)v103;
      *((_QWORD *)v34 + 7) = v104;
      *((_QWORD *)v34 + 8) = v105;
      v36 = v107;
      *(_OWORD *)(v34 + 72) = v106;
      v104 = 0;
      v103[1] = 0;
      v103[0] = 0;
      *(_OWORD *)(v34 + 88) = v36;
      *((_WORD *)v34 + 52) = v108;
      *((_QWORD *)v34 + 14) = v109;
      v37 = (void *)*((_QWORD *)v34 + 15);
      if (v37)
      {
        *((_QWORD *)v34 + 16) = v37;
        operator delete(v37);
        *((_QWORD *)v34 + 15) = 0;
        *((_QWORD *)v34 + 16) = 0;
        *((_QWORD *)v34 + 17) = 0;
        v37 = v103[0];
      }
      *(_OWORD *)(v34 + 120) = v110;
      *((_QWORD *)v34 + 17) = v111;
      v111 = 0;
      v110 = 0uLL;
      *((_QWORD *)v34 + 18) = v112;
      if (v37)
      {
        v103[1] = v37;
        operator delete(v37);
      }
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v97;
  v44 = v98;
  if (v97 != v98)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v50 = (char *)v64[0];
          v45 = (char *)v64[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7D68E90(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x350]);
  v8 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x310]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x300]);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined((uint64_t)&STACK[0x288]);
  v9 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v9;
    operator delete(v9);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  v10 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v10;
    operator delete(v10);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3D0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 240));
  v3 = *(void **)(a1 + 200);
  if (v3)
  {
    *(_QWORD *)(a1 + 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[440];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  char v26[376];
  unint64_t v27;

  v27 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v27);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v26 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v26, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration((uint64_t)v21, *(void **)(a1 + 608));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v27;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D69430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  HDStatisticsPercentileConfiguration *v4;

  objc_storeStrong((id *)(a1 + 32), a2);
  v4 = a2;
  HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(a1 + 120), v4);

}

void sub_1B7D694D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD v35[2];
  char v36;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 120), *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = v14;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 4);
  v15 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = 0;
  v16 = (uint64_t **)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  v17 = *(_QWORD **)(a2 + 232);
  if (v17 != (_QWORD *)(a2 + 240))
  {
    do
    {
      v18 = *v16;
      v19 = (uint64_t *)(a1 + 240);
      if (*(uint64_t ***)(a1 + 232) == v16)
        goto LABEL_11;
      v20 = *v16;
      v21 = (uint64_t *)(a1 + 240);
      if (v18)
      {
        do
        {
          v19 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v21[2];
          v22 = *v19 == (_QWORD)v21;
          v21 = v19;
        }
        while (v22);
      }
      v23 = v17[4];
      if (v19[4] < v23)
      {
LABEL_11:
        if (v18)
          v24 = (uint64_t **)v19;
        else
          v24 = (uint64_t **)(a1 + 240);
        if (v18)
          v25 = (uint64_t **)(v19 + 1);
        else
          v25 = (uint64_t **)(a1 + 240);
        if (*v25)
          goto LABEL_28;
      }
      else
      {
        v25 = (uint64_t **)(a1 + 240);
        v24 = (uint64_t **)(a1 + 240);
        if (v18)
        {
          v26 = *v16;
          while (1)
          {
            while (1)
            {
              v24 = (uint64_t **)v26;
              v27 = v26[4];
              if (v27 <= v23)
                break;
              v26 = *v24;
              v25 = v24;
              if (!*v24)
                goto LABEL_27;
            }
            if (v27 >= v23)
              goto LABEL_28;
            v26 = v24[1];
            if (!v26)
            {
              v25 = v24 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v28 = (char *)operator new(0x98uLL);
      v35[0] = v28;
      v35[1] = a1 + 240;
      v36 = 0;
      *((_QWORD *)v28 + 4) = v17[4];
      *((_QWORD *)v28 + 5) = 0;
      *((_QWORD *)v28 + 6) = 0;
      *((_QWORD *)v28 + 7) = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v28 + 5, (const void *)v17[5], v17[6], (uint64_t)(v17[6] - v17[5]) >> 3);
      v29 = *((_OWORD *)v17 + 4);
      v30 = *((_OWORD *)v17 + 5);
      *(_OWORD *)(v28 + 90) = *(_OWORD *)((char *)v17 + 90);
      *((_OWORD *)v28 + 4) = v29;
      *((_OWORD *)v28 + 5) = v30;
      v31 = v17[14];
      *((_QWORD *)v28 + 15) = 0;
      *((_QWORD *)v28 + 14) = v31;
      *((_QWORD *)v28 + 16) = 0;
      *((_QWORD *)v28 + 17) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v28 + 15, (const void *)v17[15], v17[16], (uint64_t)(v17[16] - v17[15]) >> 4);
      *((_QWORD *)v28 + 18) = v17[18];
      v36 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v24, v25, (uint64_t *)v28);
      v35[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
LABEL_28:
      v32 = (_QWORD *)v17[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v17[2];
          v22 = *v33 == (_QWORD)v17;
          v17 = v33;
        }
        while (!v22);
      }
      v17 = v33;
    }
    while (v33 != (_QWORD *)(a2 + 240));
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 296), *(const void **)(a2 + 296), *(_QWORD *)(a2 + 304), (uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1B7D698B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 304) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(*v14);
  HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v15 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v15 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(v1 + 4);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 120, (__n128 *)(a2 + 120));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 200, (__n128 *)(a2 + 200));
  v13 = a1 + 240;
  v12 = *(_QWORD **)(a1 + 240);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v12);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v14 = (_QWORD *)(a2 + 240);
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v15;
  v16 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(a2 + 232) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 248) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  id v36;
  id v37;
  uint64_t **i;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  double v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  uint64_t **j;
  uint64_t *v77;
  void *v78;
  void *v79;
  HDStatisticsPercentiles *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  double *v85;
  double v86;
  double v87;
  double v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  id v104;
  void *v106;
  void *v107;
  uint64_t **v108;
  void *__p;
  void *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _BYTE v115[24];
  _BYTE *v116;
  _QWORD v117[3];
  _QWORD *v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  __int128 v122;
  _BYTE v123[26];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v100 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v103 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v100, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 296);
      v15 = *(uint64_t **)(v103 + 304);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v111[0] = &off_1E6D08570;
  v112 = v111;
  v101 = v11;
  v20 = (uint64_t)v112;
  if (!v112)
    goto LABEL_22;
  if (v112 != v111)
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*v112 + 16))(v112);
LABEL_22:
    v118 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v118 = v117;
  (*(void (**)(uint64_t, _QWORD *))(v111[0] + 24))((uint64_t)v111, v117);
LABEL_24:
  *(_QWORD *)&v122 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D08450;
  v22 = v21 + 1;
  v23 = (uint64_t)v118;
  if (!v118)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v118 != v117)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v118 + 16))(v118, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v117[0] + 24))(v117);
LABEL_29:
  *(_QWORD *)&v122 = v21;
  v24 = v101;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  v26 = v24;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v106, v103);
  if (!(_QWORD)v122)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_QWORD, void **, double))(*(_QWORD *)v122 + 48))(v122, &v106, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v34);

  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }

  v35 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v106, v103);
  if (!(_QWORD)v122)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD, void **, double))(*(_QWORD *)v122 + 48))(v122, &v106, v35));
  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v106, v103);
    for (i = v108; i; i = (uint64_t **)*i)
    {
      v39 = i[2];
      v40 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (!(_QWORD)v122)
        std::__throw_bad_function_call[abi:ne180100]();
      v42 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)i + 3);
      v43 = *(double **)(v42 + 8);
      v44 = 0.0;
      while (v43 != *(double **)(v42 + 16))
      {
        v46 = *v43;
        v45 = v43[1];
        v43 += 2;
        v44 = v44 + v45 - v46;
      }
      objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

      if (!(_QWORD)v122)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v122 + 48))(v122, (uint64_t *)i + 3));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

      v24 = v26;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v106);
    objc_msgSend(v24, "setDurationBySource:", v36);
    objc_msgSend(v24, "setDataCountBySource:", v37);

  }
  v49 = (void **)v122;
  if ((_BYTE **)v122 == &v119)
  {
    v50 = 4;
    v49 = (void **)&v119;
  }
  else
  {
    if (!(_QWORD)v122)
      goto LABEL_56;
    v50 = 5;
  }
  (*((void (**)(void))*v49 + v50))();
LABEL_56:
  v51 = v118;
  if (v118 == v117)
  {
    v52 = 4;
    v51 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_61;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_61:
  v53 = (uint64_t)v112;
  if (!v112)
  {
LABEL_64:
    v114 = (_QWORD *)v53;
    goto LABEL_66;
  }
  if (v112 != v111)
  {
    v53 = (*(uint64_t (**)(void))(*v112 + 16))();
    goto LABEL_64;
  }
  v114 = v113;
  (*(void (**)(uint64_t, _QWORD *))(v111[0] + 24))((uint64_t)v111, v113);
LABEL_66:
  v116 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D084E0;
  v55 = (uint64_t)v114;
  if (!v114)
  {
LABEL_69:
    v54[4] = v55;
    goto LABEL_71;
  }
  if (v114 != v113)
  {
    v55 = (*(uint64_t (**)(void))(*v114 + 16))();
    goto LABEL_69;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v113[0] + 24))(v113);
LABEL_71:
  v116 = v54;
  v104 = v24;
  v56 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)&v106, v103);
  if (!v116)
    std::__throw_bad_function_call[abi:ne180100]();
  v57 = (*(uint64_t (**)(_BYTE *, void **, double))(*(_QWORD *)v116 + 48))(v116, &v106, v56);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v119, *(const void **)v57, *(_QWORD *)(v57 + 8), (uint64_t)(*(_QWORD *)(v57 + 8) - *(_QWORD *)v57) >> 3);
  v58 = *(_OWORD *)(v57 + 24);
  v59 = *(_OWORD *)(v57 + 40);
  *(_OWORD *)&v123[10] = *(_OWORD *)(v57 + 50);
  *(_OWORD *)v123 = v59;
  v122 = v58;
  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  v60 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v119);
  v61 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "quantityWithUnit:doubleValue:", v62, v60);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "setPercentileQuantity:", v63);

  objc_msgSend(v104, "setDataCount:", (v120 - v119) >> 3);
  v64 = *(_QWORD *)(a1 + 24);
  LOBYTE(v65) = v64;
  if ((v64 & 0x20) != 0)
  {
    v67 = *((double *)&v122 + 1);
    v66 = *(double *)v123;
    v68 = *(double *)&v123[8];
    v69 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "quantityWithUnit:doubleValue:", v70, v67);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setMostRecentQuantity:", v71);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v66, v68);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setMostRecentQuantityDateInterval:", v72);

    v65 = *(_QWORD *)(a1 + 24);
  }
  if ((v65 & 1) != 0)
  {
    v73 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v74 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v64 & 0x20) != 0)
    {
      v75 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v102 = 0;
      v75 = 0;
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v106, v103);
    for (j = v108; j; j = (uint64_t **)*j)
    {
      v77 = j[2];
      v78 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v116)
        std::__throw_bad_function_call[abi:ne180100]();
      v80 = (HDStatisticsPercentiles *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v116 + 48))(v116, (uint64_t *)j + 3);
      objc_msgSend(v78, "quantityWithUnit:doubleValue:", v79, HDStatisticsPercentiles::calculatePercentileValue(v80));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v73, "setObject:forKeyedSubscript:", v81, v77);

      if (!v116)
        std::__throw_bad_function_call[abi:ne180100]();
      v82 = (void *)MEMORY[0x1E0CB37E8];
      v83 = (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v116 + 48))(v116, (uint64_t *)j + 3);
      objc_msgSend(v82, "numberWithLongLong:", (uint64_t)(v83[1] - *v83) >> 3);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "setObject:forKeyedSubscript:", v84, v77);

      if ((v64 & 0x20) != 0)
      {
        if (!v116)
          std::__throw_bad_function_call[abi:ne180100]();
        v85 = (double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v116 + 48))(v116, (uint64_t *)j + 3);
        v87 = v85[4];
        v86 = v85[5];
        v88 = v85[6];
        v89 = (void *)MEMORY[0x1E0CB6A28];
        objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "quantityWithUnit:doubleValue:", v90, v87);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "setObject:forKeyedSubscript:", v91, v77);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v86, v88);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v102, "setObject:forKeyedSubscript:", v92, v77);

      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v106);
    objc_msgSend(v104, "setPercentileQuantityBySource:", v73);
    objc_msgSend(v104, "setDataCountBySource:", v74);
    if ((v64 & 0x20) != 0)
    {
      objc_msgSend(v104, "setMostRecentQuantityBySource:", v75);
      objc_msgSend(v104, "setMostRecentQuantityDateIntervalBySource:", v102);
    }

  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }

  v93 = v116;
  if (v116 == v115)
  {
    v94 = 4;
    v93 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_99;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_99:
  v95 = v114;
  if (v114 == v113)
  {
    v96 = 4;
    v95 = v113;
  }
  else
  {
    if (!v114)
      goto LABEL_104;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_104:

  v97 = v112;
  if (v112 == v111)
  {
    v98 = 4;
    v97 = v111;
    goto LABEL_108;
  }
  if (v112)
  {
    v98 = 5;
LABEL_108:
    (*(void (**)(void))(*v97 + 8 * v98))();
  }
  return v104;
}

void sub_1B7D6A680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, _Unwind_Exception *exception_object, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35,char a36,uint64_t a37,uint64_t a38,char *a39)
{
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v43 = *(void **)(v42 - 200);
  if (v43)
  {
    *(_QWORD *)(v42 - 192) = v43;
    operator delete(v43);
  }

  v44 = a39;
  if (a39 == &a36)
  {
    v45 = 4;
    v44 = &a36;
  }
  else
  {
    if (!a39)
      goto LABEL_8;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_8:
  v46 = a35;
  if (a35 == &a32)
  {
    v47 = 4;
    v46 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_13;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_13:

  v48 = a31;
  if (a31 == &a28)
  {
    v49 = 4;
    v48 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_18;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_18:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 296);
  if (v1 != (*(_QWORD *)(a1 + 304) - v2) >> 3)
  {
    v4 = (void **)(a1 + 296);
    *(_QWORD *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    v5 = *(_QWORD **)(a1 + 272);
    if (v5)
    {
      v6 = *(char **)(a1 + 304);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 296);
            v6 = *(char **)(a1 + 304);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 296) = v16;
          *(_QWORD *)(a1 + 304) = v9;
          *(_QWORD *)(a1 + 312) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 304) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D6AB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  char *v60;
  char v61;
  double *v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double var2;
  double *i;
  int v76;
  int v77;
  unint64_t var3;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  char *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  uint64_t *v91;
  void *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  double v97;
  void *v98;
  void *v99;
  double **v100;
  id *location;
  id v102;
  uint64_t *v103;
  HDStatisticsPercentiles *v104;
  int64_t v105;
  char **v106;
  uint64_t v107;
  HDRawQuantitySample v108;
  __int128 v109;
  __int128 v110;
  __int16 v111;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v106 = (char **)(a1 + 96);
    v103 = (uint64_t *)(a1 + 192);
    v104 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    v100 = (double **)(a1 + 200);
    v6 = (_QWORD *)(a1 + 240);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v106 = 0;
          v106[1] = 0;
          v106[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v106;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v108.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v108, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v102 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 224) = HKIntervalMask<double>::removeIntervalsBefore(v100, v38) + *(double *)(a1 + 224);
            v94 = *(_QWORD **)(a1 + 232);
            if (v94 != v6)
            {
              do
              {
                *((double *)v94 + 18) = HKIntervalMask<double>::removeIntervalsBefore((double **)v94 + 15, v38)
                                      + *((double *)v94 + 18);
                v95 = (_QWORD *)v94[1];
                if (v95)
                {
                  do
                  {
                    v96 = v95;
                    v95 = (_QWORD *)*v95;
                  }
                  while (v95);
                }
                else
                {
                  do
                  {
                    v96 = (_QWORD *)v94[2];
                    v54 = *v96 == (_QWORD)v94;
                    v94 = v96;
                  }
                  while (!v54);
                }
                v94 = v96;
              }
              while (v96 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v105 = 0;
          v61 = 0;
          v62 = v7;
          while (2)
          {
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v108.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v108.var2 = v63;
            *(double *)&v108.var4 = v62[4];
            if (!v108.var4 || v108.var1 > v38)
            {
              v64 = *(_OWORD **)(a1 + 104);
              v65 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v106) >> 4);
                v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)*v106) >> 4);
                if (2 * v71 > v70)
                  v70 = 2 * v71;
                if (v71 >= 0x2AAAAAAAAAAAAAALL)
                  v72 = 0x555555555555555;
                else
                  v72 = v70;
                if (v72)
                  v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                else
                  v73 = 0;
                v79 = (_OWORD *)(v72 + 48 * v69);
                v80 = *(_OWORD *)v62;
                v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                *v79 = v80;
                v83 = *(char **)(a1 + 96);
                v82 = *(char **)(a1 + 104);
                v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    v85 = *((_OWORD *)v82 - 3);
                    v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  v82 = *v106;
                }
                v68 = v79 + 3;
                *(_QWORD *)(a1 + 96) = v84;
                *(_QWORD *)(a1 + 104) = v79 + 3;
                *(_QWORD *)(a1 + 112) = v72 + 48 * v73;
                if (v82)
                  operator delete(v82);
              }
              else
              {
                v66 = *(_OWORD *)v62;
                v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *v64 = v66;
                v68 = v64 + 3;
              }
              *(_QWORD *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          var2 = v108.var2;
          if (v108.var2 > v38)
            var2 = v38;
          v108.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v108.var1 >= *i; i += 2)
          {
            if (v108.var1 < i[1])
              goto LABEL_139;
          }
          v76 = *((unsigned __int8 *)v62 + 42);
          v77 = *((unsigned __int8 *)v62 + 41);
          if ((v61 & 1) != 0)
          {
            var3 = v108.var3;
            if (v105 == v108.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsPercentiles::addSample(v104, &v108);
              HDStatisticsTimeInterval::addSample(v103, &v108, v76 == 0);
            }
          }
          else
          {
            HDStatisticsPercentiles::addSample(v104, &v108);
            HDStatisticsTimeInterval::addSample(v103, &v108, v76 == 0);
            var3 = v108.var3;
            v105 = v108.var3;
          }
          if (*(_BYTE *)(a1 + 25))
          {
            HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            if (v87)
            {
              objc_msgSend(v102, "objectForKeyedSubscript:", v87);
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = v88;
              if (v88)
              {
                if (objc_msgSend(v88, "longLongValue") == var3 || *(_BYTE *)(a1 + 24))
                {
                  v90 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                  v91 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v90);
                  HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v91, &v108);
                  goto LABEL_135;
                }
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v102, "setObject:forKeyedSubscript:", v92, v87);

                v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
                v91 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
                HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v91, &v108);
LABEL_135:
                HDStatisticsTimeInterval::addSample(v91 + 9, &v108, v77 == 0);
              }

            }
          }
          v61 = 1;
          goto LABEL_139;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v108.var0 = *v7;
        v108.var1 = v13;
        v108.var2 = v14;
        v108.var3 = v15;
        v108.var4 = v18;
        v108.var5 = v16;
        *(_DWORD *)(&v108.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v108.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v109 = v26;
        *((double *)&v109 + 1) = v27;
        *(double *)&v110 = v25;
        *((_QWORD *)&v110 + 1) = v20;
        LOBYTE(v111) = v28;
        HIBYTE(v111) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_93:
            LOWORD(v107) = v111;
            v59 = v110;
            v60 = *v106;
            *(_OWORD *)v60 = v109;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v107;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsPercentiles::addSample(v104, &v108);
          HDStatisticsTimeInterval::addSample(v103, &v108, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v58, &v108);
            HDStatisticsTimeInterval::addSample(v58 + 9, &v108, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_93;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v97 = *(double *)(a1 + 56);
      if (v97 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsPercentiles, HDStatisticsTimeInterval>]");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "handleFailureInFunction:file:lineNumber:description:", v99, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v97 = *(double *)(a1 + 56);
      }
      v5 = v97;
    }
    while (v97 < a2);
  }
}

void sub_1B7D6B39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v13;

  v13 = a2;
  v4 = (uint64_t **)(a1 + 240);
  v5 = *(_QWORD **)(a1 + 240);
  if (!v5)
    goto LABEL_11;
  v6 = (uint64_t **)(a1 + 240);
  do
  {
    v7 = v5[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (!v8)
      v6 = (uint64_t **)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v4 - 1;
    v11 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(v11 + 5), *(HDStatisticsPercentileConfiguration **)(a1 + 32));
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 360);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D6B57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 400);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D6B64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0x98uLL);
    v12[1] = v6;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 296);
      v11 = *(char **)(*(_QWORD *)a3 + 304);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 304);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 296);
      v24 = *(char **)(*(_QWORD *)a3 + 304);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 296);
            v31 = *(char **)(*(_QWORD *)a3 + 304);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  const void *v5;
  uint64_t v6;
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  v4 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 50) = *(_OWORD *)(a2 + 170);
  v5 = *(const void **)(a2 + 200);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 192);
  v6 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 80), v5, v6, (v6 - (uint64_t)v5) >> 4);
  result = *(double *)(a2 + 224);
  *(double *)(a1 + 104) = result;
  return result;
}

void sub_1B7D6CD90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v49;
  unint64_t v50;
  _QWORD v51[2];
  char v52;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 232);
  v47 = (_QWORD *)(a2 + 240);
  if (v3 == (_QWORD *)(a2 + 240))
    return;
  v49 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_81;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x88uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      v52 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(_QWORD *)v51[0] = *v37;
        }
        else
        {
          *(_QWORD *)v51[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v49;
            if (*v49)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v49;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v46 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v46)
            operator delete(v46);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v50 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    if (v12 + 2 == v3 + 4)
    {
      v41 = *((_OWORD *)v3 + 4);
      v42 = *((_OWORD *)v3 + 5);
      *(_OWORD *)((char *)v12 + 74) = *(_OWORD *)((char *)v3 + 90);
      *((_OWORD *)v12 + 3) = v41;
      *((_OWORD *)v12 + 4) = v42;
      v12[12] = v3[14];
    }
    else
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v12 + 24, (char *)v3[5], v3[6], (uint64_t)(v3[6] - v3[5]) >> 3);
      v39 = *((_OWORD *)v3 + 4);
      v40 = *((_OWORD *)v3 + 5);
      *(_OWORD *)((char *)v12 + 74) = *(_OWORD *)((char *)v3 + 90);
      *((_OWORD *)v12 + 3) = v39;
      *((_OWORD *)v12 + 4) = v40;
      v12[12] = v3[14];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 104, (char *)v3[15], v3[16], (uint64_t)(v3[16] - v3[15]) >> 4);
    }
    v12[16] = v3[18];

LABEL_81:
    v43 = (_QWORD *)v3[1];
    if (v43)
    {
      do
      {
        v44 = v43;
        v43 = (_QWORD *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (_QWORD *)v3[2];
        v45 = *v44 == (_QWORD)v3;
        v3 = v44;
      }
      while (!v45);
    }
    v3 = v44;
  }
  while (v44 != v47);
}

void sub_1B7D6D330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D08450;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D08450;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D08450;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D6D564(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08450;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D084E0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D084E0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D084E0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D6D794(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D084E0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPercentiles,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPercentiles const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08570;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08570;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D6DA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 568);
      v7 = *(_QWORD *)(a1 + 560);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D6DC60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(_QWORD *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(_QWORD *)(a1 + 184) = v9;
          *(_BYTE *)(a1 + 192) = v3;
          *(_BYTE *)(a1 + 193) = v10;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((_BYTE *)v49 + 64) = v3;
            *((_BYTE *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 456);
        v19 = *(_QWORD *)(a1 + 464);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 448);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 448);
          v29 = *(char **)(a1 + 456);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 448);
          }
          *(_QWORD *)(a1 + 448) = v27;
          *(_QWORD *)(a1 + 456) = v20;
          *(_QWORD *)(a1 + 464) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 456) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 594))
  {
    *(_BYTE *)(a1 + 596) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 596) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D6E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(_QWORD *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D6E214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = 0;
  v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 216) = v9;
    operator delete(v9);
    v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v10;
  if (*(_QWORD *)(a1 + 256))
  {
    v11 = *(_QWORD *)(a1 + 248);
    v12 = *(_QWORD **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = a1 + 248;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    if (v12[1])
      v13 = (_QWORD *)v12[1];
    else
      v13 = v12;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 472));
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 596))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 596) = 0;
  }

}

void sub_1B7D6E3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D6E478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 608));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 592) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D6E7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C408D405208);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D6E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D6EBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 592))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D6F87C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D6F91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsPercentiles24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPercentiles,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08620;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_WORD *)(a1 + 600) = 1;
  *(_BYTE *)(a1 + 602) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_QWORD *)(a1 + 608) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08620;
  v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(_QWORD *)(a1 + 640) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(_QWORD *)(a1 + 576) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 600) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);

}

void sub_1B7D6FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 608) = v4;
    v3 = v5;
  }

}

void sub_1B7D6FAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 77, a2);
  v7 = a2;
  v4 = a1[77];
  v5 = a1[74];
  a1[74] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[74]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(char **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  if (v9)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D6FCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[56];

  if (*(_BYTE *)(a1 + 600))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D6FD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 602))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 601))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 603))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 640);
    v18 = *(_QWORD *)(a1 + 648);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 632);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 640);
      v33 = *(char **)(a1 + 632);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 632);
      }
      *(_QWORD *)(a1 + 632) = v28;
      *(_QWORD *)(a1 + 640) = v21;
      *(_QWORD *)(a1 + 648) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 640) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D6FF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 602))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 602) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 601))
    goto LABEL_5;
  v9 = *(void **)(a1 + 624);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_408);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 624);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 624);
  *(_QWORD *)(a1 + 624) = 0;

  *(_BYTE *)(a1 + 601) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 648) = 0;
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 632);
      v37 = *(__int128 **)(a1 + 640);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 640);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 640) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 632);
  v39 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 568))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 568));
  }
  *(_BYTE *)(a1 + 602) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 604))
    {
      *(_BYTE *)(a1 + 604) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 602) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D70694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 602) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 603) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 602))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 602))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 601) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 601))
  {
    v8 = *(void **)(a1 + 624);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 624);
      *(_QWORD *)(a1 + 624) = v9;

      v8 = *(void **)(a1 + 624);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D70990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 600) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 600) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D70AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 600) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 600), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsRelative<HDStatisticsPercentiles>::archive((uint64_t)v27, a1 + 240);
}

void sub_1B7D70C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **j;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t k;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  _BYTE v63[448];
  __int128 v64;
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p;
  char *v75;
  unint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int16 v82;
  __int128 v83;
  __int128 v84;
  __int16 v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  void (**v103)(statistics::StatisticsEngine *__hidden);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _BYTE v110[32];
  uint64_t v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int16 v117;
  __int128 v118;
  __int128 v119;
  __int16 v120;

  v59 = a2;
  *(_BYTE *)(a1 + 600) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v63, 0, -1.79769313e308, 1.79769313e308);
  v64 = 0u;
  v65 = 0u;
  v111 = 0;
  v61 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)objc_msgSend(v61, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v111));
  v103 = &off_1E6D09A88;
  v104 = 0;
  v108 = 0;
  v106 = 0;
  v107 = 0;
  v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  v62 = v105;
  if (v104)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    __p = 0;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0;
    v83 = 0u;
    v84 = 0u;
    v85 = 0;
    v88 = 0;
    v76 = 0;
    v75 = 0;
    v77 = 0;
    v87 = 0;
    v86 = &v87;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    v4 = *(_QWORD *)(v104 + 72);
    v67 = *(_QWORD *)(v104 + 64);
    v68 = *(_BYTE *)(v104 + 185);
    v69 = *(_BYTE *)(v104 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    v72 = v4;
    v6 = *(_QWORD *)(v104 + 80);
    v5 = *(_QWORD *)(v104 + 88);
    v60 = (_QWORD *)v104;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v76)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v75;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v75 = (char *)(v19 + 6);
          v76 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v75 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsPercentiles>::unarchive((uint64_t)&v112, v23);
      v77 = v112;
      if ((_QWORD)v78)
      {
        *((_QWORD *)&v78 + 1) = v78;
        operator delete((void *)v78);
      }
      v78 = v113;
      v79 = v114;
      *(_QWORD *)&v114 = 0;
      v113 = 0uLL;
      v80 = v115;
      v81 = v116;
      v82 = v117;
      v85 = v120;
      v83 = v118;
      v84 = v119;
    }
    v24 = (uint64_t *)v60[17];
    for (i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsRelative<HDStatisticsPercentiles>::unarchive((uint64_t)&v112, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v87;
      for (j = &v87; ; v28 = *j)
      {
        v30 = j;
        if (!v28)
          break;
        while (1)
        {
          j = (uint64_t **)v28;
          v31 = v28[4];
          if (v31 > v27)
            break;
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          v28 = j[1];
          if (!v28)
          {
            v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0xA0uLL);
      *((_QWORD *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *((_QWORD *)v32 + 19) = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = j;
      *v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v86)
      {
        v86 = (uint64_t **)*v86;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
LABEL_37:
      v34 = (void *)*((_QWORD *)v32 + 6);
      *((_DWORD *)v32 + 10) = v112;
      if (v34)
      {
        *((_QWORD *)v32 + 7) = v34;
        operator delete(v34);
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 7) = 0;
        *((_QWORD *)v32 + 8) = 0;
      }
      *((_OWORD *)v32 + 3) = v113;
      *((_QWORD *)v32 + 8) = v114;
      *(_QWORD *)&v114 = 0;
      v113 = 0uLL;
      *((_QWORD *)v32 + 9) = *((_QWORD *)&v114 + 1);
      v35 = v116;
      *((_OWORD *)v32 + 5) = v115;
      *((_OWORD *)v32 + 6) = v35;
      *((_WORD *)v32 + 56) = v117;
      v36 = v118;
      v37 = v119;
      *((_WORD *)v32 + 76) = v120;
      *(_OWORD *)(v32 + 136) = v37;
      *(_OWORD *)(v32 + 120) = v36;
    }
    v38 = v60[5];
    for (k = v60[6]; v38 != k; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((uint64_t)v63, (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v106;
  v44 = v107;
  if (v106 != v107)
  {
    v45 = *((_QWORD *)&v64 + 1);
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if (v45 >= (unint64_t)v65)
      {
        v50 = (void *)v64;
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v64) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - v64) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v45 = *((_QWORD *)&v64 + 1);
          v50 = (void *)v64;
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = v55;
        if ((void *)v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *(_WORD *)(v56 - 8) = *(_WORD *)(v45 - 8);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while ((void *)v45 != v50);
          v50 = (void *)v64;
        }
        v45 = v55 + 40;
        *(_QWORD *)&v64 = v56;
        *((_QWORD *)&v64 + 1) = v55 + 40;
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *(_QWORD *)(v45 + 8) = v46;
        *(_QWORD *)(v45 + 16) = v48;
        *(_QWORD *)(v45 + 24) = v49;
        *(_WORD *)(v45 + 32) = 1;
        v45 += 40;
      }
      *((_QWORD *)&v64 + 1) = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v62);
  if ((_QWORD)v64)
  {
    *((_QWORD *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v63);

}

void sub_1B7D713D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x378]);
  v11 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a4);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy((_QWORD *)STACK[0x328]);
  v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v13;
    operator delete(v13);
  }
  objc_destroyWeak((id *)&STACK[0x288]);
  v14 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v14;
    operator delete(v14);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3F8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(_QWORD *)(a1 + 464) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 408);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 368);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(_QWORD *)(a1 + 312) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*(_QWORD **)(a1 + 248));
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[448];
  uint64_t v18;
  _BYTE v19[448];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[384];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 616));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 600) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D718FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 57), (__n128 *)(a2 + 456));
  v4 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  v5 = (void *)a1[60];
  a1[60] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  v15 = *(_OWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = 0;
  v18 = (_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  *(_QWORD *)(a1 + 256) = 0;
  v19 = *(_QWORD **)(a2 + 240);
  if (v19 != (_QWORD *)(a2 + 248))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 248);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 248);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 248);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 248);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 248);
        if (!*v28)
        {
LABEL_28:
          v31 = (char *)operator new(0xA0uLL);
          v32 = v19[4];
          v33 = *((_DWORD *)v19 + 10);
          *((_QWORD *)v31 + 6) = 0;
          *((_QWORD *)v31 + 4) = v32;
          *((_DWORD *)v31 + 10) = v33;
          *((_QWORD *)v31 + 7) = 0;
          *((_QWORD *)v31 + 8) = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v31 + 6, (const void *)v19[6], v19[7], (uint64_t)(v19[7] - v19[6]) >> 3);
          v34 = *(_OWORD *)(v19 + 9);
          v35 = *(_OWORD *)(v19 + 11);
          *(_OWORD *)(v31 + 98) = *(_OWORD *)((char *)v19 + 98);
          *(_OWORD *)(v31 + 88) = v35;
          *(_OWORD *)(v31 + 72) = v34;
          v36 = *(_OWORD *)(v19 + 15);
          v37 = *(_OWORD *)(v19 + 17);
          *((_QWORD *)v31 + 19) = v19[19];
          *(_OWORD *)(v31 + 136) = v37;
          *(_OWORD *)(v31 + 120) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 240), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 248);
        v27 = (uint64_t **)(a1 + 248);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v25 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (_QWORD *)(a2 + 248))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 240);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 264, a2 + 264);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 304), *(const void **)(a2 + 304), *(_QWORD *)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 408, a2 + 408);
  return a1;
}

void sub_1B7D71D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 312) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 136) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  v11 = a1 + 248;
  v10 = *(_QWORD **)(a1 + 248);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  v14 = *(_OWORD *)(a2 + 200);
  v15 = *(_OWORD *)(a2 + 216);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v15;
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v10);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v16 = (_QWORD *)(a2 + 248);
  v17 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v17;
  v18 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v11;
    *(_QWORD *)(a2 + 240) = v16;
    *v16 = 0;
    *(_QWORD *)(a2 + 256) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 240) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 304, (__n128 *)(a2 + 304));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t WeakRetained;
  unint64_t v3;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  double v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  id v44;
  id v45;
  void *v46;
  char *v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t prime;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD **v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *i;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  BOOL v72;
  void *v73;
  uint64_t **j;
  uint64_t *v75;
  void *v76;
  void *v77;
  HDStatisticsPercentiles *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  double *v83;
  double v84;
  double v85;
  double v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  int v96;
  void *v97;
  void *v98;
  int v99;
  id v101;
  id v102;
  unint64_t v103;
  id v104;
  id v105;
  char v106;
  uint64_t v107;
  id v108;
  id v109;
  void *__p[2];
  __int128 v112;
  __int128 v113;
  _OWORD v114[4];
  uint64_t v115;
  void *v116;
  _BYTE *v117;
  uint64_t v118;
  __int128 v119;
  _BYTE v120[26];
  _QWORD v121[2];
  char v122;
  _QWORD v123[3];
  _QWORD *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = (double *)(a2 + 40);
  if (v5 != -1.79769313e308)
    v7 = (double *)a2;
  v107 = a2;
  v108 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      WeakRetained = objc_claimAutoreleasedReturnValue();

      v10 = (id)WeakRetained;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v108, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      WeakRetained = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v13 = *(uint64_t **)(a2 + 304);
      v14 = *(uint64_t **)(a2 + 312);
      while (v13 != v14)
      {
        v15 = *v13;
        v16 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v16, "sourceForSourceID:", v15);
        v3 = objc_claimAutoreleasedReturnValue();

        if (v3)
        {
          if ((objc_msgSend((id)WeakRetained, "containsObject:", v3) & 1) == 0)
            objc_msgSend((id)WeakRetained, "addObject:", v3);
        }

        ++v13;
      }
      v17 = (void *)objc_msgSend((id)WeakRetained, "copy");
      objc_msgSend(v12, "_setSources:", v17);

    }
  }

  v123[0] = &off_1E6D086F0;
  v124 = v123;
  v109 = v12;
  LODWORD(__p[0]) = *(_DWORD *)(v107 + 120);
  v112 = 0uLL;
  __p[1] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p[1], *(const void **)(v107 + 128), *(_QWORD *)(v107 + 136), (uint64_t)(*(_QWORD *)(v107 + 136) - *(_QWORD *)(v107 + 128)) >> 3);
  v18 = *(_OWORD *)(v107 + 168);
  v113 = *(_OWORD *)(v107 + 152);
  v114[0] = v18;
  *(_OWORD *)((char *)v114 + 10) = *(_OWORD *)(v107 + 178);
  v19 = *(_OWORD *)(v107 + 216);
  v114[2] = *(_OWORD *)(v107 + 200);
  v114[3] = v19;
  v115 = *(_QWORD *)(v107 + 232);
  if (!v124)
    std::__throw_bad_function_call[abi:ne180100]();
  v20 = (*(uint64_t (**)(_QWORD *, void **))(*v124 + 48))(v124, __p);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v116, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
  v21 = *(_OWORD *)(v20 + 24);
  v22 = *(_OWORD *)(v20 + 40);
  *(_OWORD *)&v120[10] = *(_OWORD *)(v20 + 50);
  *(_OWORD *)v120 = v22;
  v119 = v21;
  if (__p[1])
  {
    *(void **)&v112 = __p[1];
    operator delete(__p[1]);
  }
  v23 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v116);
  v24 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v23);
  v26 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v109, "setPercentileQuantity:", v26);

  objc_msgSend(v109, "setDataCount:", (v117 - (_BYTE *)v116) >> 3);
  v27 = *(_QWORD *)(a1 + 24);
  v106 = v27;
  if ((v27 & 0x20) != 0)
  {
    v29 = *((double *)&v119 + 1);
    v28 = *(double *)v120;
    v30 = *(double *)&v120[8];
    v31 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "quantityWithUnit:doubleValue:", v32, v29);
    v26 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMostRecentQuantity:", v26);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v28, v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMostRecentQuantityDateInterval:", v33);

    v27 = *(_QWORD *)(a1 + 24);
  }
  if ((v27 & 1) == 0)
    goto LABEL_134;
  v105 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((v106 & 0x20) != 0)
  {
    v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v101 = 0;
    v102 = 0;
  }
  *(_OWORD *)__p = 0u;
  v112 = 0u;
  LODWORD(v113) = 1065353216;
  v34 = *(_QWORD **)(v107 + 240);
  if (v34 == (_QWORD *)(v107 + 248))
    goto LABEL_131;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(v107, v34[4]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v35;
    if (!v35)
      goto LABEL_107;
    v37 = objc_msgSend(v35, "hash");
    v38 = v37;
    v39 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_48;
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.u32[0];
    if (v40.u32[0] > 1uLL)
    {
      v3 = v37;
      if ((void *)v37 >= __p[1])
        v3 = v37 % (unint64_t)__p[1];
    }
    else
    {
      v3 = ((unint64_t)__p[1] - 1) & v37;
    }
    v42 = (uint64_t *)*((_QWORD *)__p[0] + v3);
    if (!v42 || (v26 = *v42) == 0)
    {
LABEL_48:
      v47 = (char *)operator new(0x90uLL);
      v121[0] = v47;
      v121[1] = &v112;
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = v38;
      *((_QWORD *)v47 + 2) = v36;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_OWORD *)(v47 + 56) = 0u;
      *(_OWORD *)(v47 + 72) = 0u;
      *(_OWORD *)(v47 + 88) = 0u;
      *(_OWORD *)(v47 + 104) = 0u;
      *(_OWORD *)(v47 + 120) = 0u;
      *((_QWORD *)v47 + 17) = 0;
      v122 = 1;
      v48 = (float)(unint64_t)(*((_QWORD *)&v112 + 1) + 1);
      if (v39 && (float)(*(float *)&v113 * (float)v39) >= v48)
      {
LABEL_94:
        v64 = (uint64_t *)*((_QWORD *)__p[0] + v3);
        v26 = v121[0];
        if (v64)
        {
          *(_QWORD *)v121[0] = *v64;
        }
        else
        {
          *(_QWORD *)v121[0] = v112;
          *(_QWORD *)&v112 = v26;
          *((_QWORD *)__p[0] + v3) = &v112;
          if (!*(_QWORD *)v26)
          {
LABEL_103:
            v121[0] = 0;
            ++*((_QWORD *)&v112 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100]((uint64_t)v121);
            goto LABEL_104;
          }
          v65 = *(_QWORD *)(*(_QWORD *)v26 + 8);
          if ((v39 & (v39 - 1)) != 0)
          {
            if (v65 >= v39)
              v65 %= v39;
          }
          else
          {
            v65 &= v39 - 1;
          }
          v64 = (uint64_t *)((char *)__p[0] + 8 * v65);
        }
        *v64 = v26;
        goto LABEL_103;
      }
      v49 = (v39 & (v39 - 1)) != 0;
      if (v39 < 3)
        v49 = 1;
      v50 = v49 | (2 * v39);
      v51 = vcvtps_u32_f32(v48 / *(float *)&v113);
      if (v50 <= v51)
        prime = (int8x8_t)v51;
      else
        prime = (int8x8_t)v50;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v39 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_60;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v59 = vcvtps_u32_f32((float)*((unint64_t *)&v112 + 1) / *(float *)&v113);
        if (__p[1] < (void *)3
          || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
        {
          v59 = std::__next_prime(v59);
        }
        else
        {
          v61 = 1 << -(char)__clz(v59 - 1);
          if (v59 >= 2)
            v59 = v61;
        }
        if (*(_QWORD *)&prime <= v59)
          prime = (int8x8_t)v59;
        if (*(_QWORD *)&prime >= v39)
        {
          v39 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v53 = operator new(8 * *(_QWORD *)&prime);
            v54 = __p[0];
            __p[0] = v53;
            if (v54)
              operator delete(v54);
            v55 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v55++) = 0;
            while (*(_QWORD *)&prime != v55);
            v56 = (_QWORD **)v112;
            if ((_QWORD)v112)
            {
              v57 = *(_QWORD *)(v112 + 8);
              v58 = (uint8x8_t)vcnt_s8(prime);
              v58.i16[0] = vaddlv_u8(v58);
              if (v58.u32[0] > 1uLL)
              {
                if (v57 >= *(_QWORD *)&prime)
                  v57 %= *(_QWORD *)&prime;
              }
              else
              {
                v57 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v57) = &v112;
              for (i = *v56; i; v57 = v63)
              {
                v63 = i[1];
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(_QWORD *)&prime)
                    v63 %= *(_QWORD *)&prime;
                }
                else
                {
                  v63 &= *(_QWORD *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*((_QWORD *)__p[0] + v63))
                  {
                    *((_QWORD *)__p[0] + v63) = v56;
                    goto LABEL_85;
                  }
                  *v56 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v63);
                  **((_QWORD **)__p[0] + v63) = i;
                  i = v56;
                }
                v63 = v57;
LABEL_85:
                v56 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v39 = (unint64_t)prime;
            goto LABEL_89;
          }
          v73 = __p[0];
          __p[0] = 0;
          if (v73)
            operator delete(v73);
          v39 = 0;
          __p[1] = 0;
        }
      }
LABEL_89:
      if ((v39 & (v39 - 1)) != 0)
      {
        if (v38 >= v39)
          v3 = v38 % v39;
        else
          v3 = v38;
      }
      else
      {
        v3 = (v39 - 1) & v38;
      }
      goto LABEL_94;
    }
    v103 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v43 = *(_QWORD *)(v26 + 8);
      if (v43 == v38)
        break;
      if (v41 > 1)
      {
        if (v43 >= v39)
          v43 %= v39;
      }
      else
      {
        v43 &= v103;
      }
      if (v43 != v3)
        goto LABEL_48;
LABEL_47:
      v26 = *(_QWORD *)v26;
      if (!v26)
        goto LABEL_48;
    }
    v44 = *(id *)(v26 + 16);
    v45 = v36;
    v46 = v45;
    if (v44 != v45)
    {
      WeakRetained = objc_msgSend(v44, "isEqualToString:", v45);

      if ((WeakRetained & 1) != 0)
        goto LABEL_104;
      goto LABEL_47;
    }

LABEL_104:
    *(_DWORD *)(v26 + 24) = *((_DWORD *)v34 + 10);
    if ((_QWORD *)(v26 + 16) != v34 + 4)
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v26 + 32), (char *)v34[6], v34[7], (uint64_t)(v34[7] - v34[6]) >> 3);
    v66 = *(_OWORD *)(v34 + 9);
    v67 = *(_OWORD *)(v34 + 11);
    *(_OWORD *)(v26 + 82) = *(_OWORD *)((char *)v34 + 98);
    *(_OWORD *)(v26 + 72) = v67;
    *(_OWORD *)(v26 + 56) = v66;
    v68 = *(_OWORD *)(v34 + 15);
    v69 = *(_OWORD *)(v34 + 17);
    *(_WORD *)(v26 + 136) = *((_WORD *)v34 + 76);
    *(_OWORD *)(v26 + 120) = v69;
    *(_OWORD *)(v26 + 104) = v68;

LABEL_107:
    v70 = (_QWORD *)v34[1];
    if (v70)
    {
      do
      {
        v71 = v70;
        v70 = (_QWORD *)*v70;
      }
      while (v70);
    }
    else
    {
      do
      {
        v71 = (_QWORD *)v34[2];
        v72 = *v71 == (_QWORD)v34;
        v34 = v71;
      }
      while (!v72);
    }
    v34 = v71;
  }
  while (v71 != (_QWORD *)(v107 + 248));
  for (j = (uint64_t **)v112; j; j = (uint64_t **)*j)
  {
    v75 = j[2];
    v76 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v124)
      std::__throw_bad_function_call[abi:ne180100]();
    v78 = (HDStatisticsPercentiles *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)j + 3);
    objc_msgSend(v76, "quantityWithUnit:doubleValue:", v77, HDStatisticsPercentiles::calculatePercentileValue(v78));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setObject:forKeyedSubscript:", v79, v75);

    if (!v124)
      std::__throw_bad_function_call[abi:ne180100]();
    v80 = (void *)MEMORY[0x1E0CB37E8];
    v81 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)j + 3);
    objc_msgSend(v80, "numberWithLongLong:", (uint64_t)(v81[1] - *v81) >> 3);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v82, v75);
    v26 = (v106 & 0x20) == 0;

    if ((v106 & 0x20) != 0)
    {
      if (!v124)
        std::__throw_bad_function_call[abi:ne180100]();
      v83 = (double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)j + 3);
      v85 = v83[4];
      v84 = v83[5];
      v86 = v83[6];
      v87 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "quantityWithUnit:doubleValue:", v88, v85);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "setObject:forKeyedSubscript:", v89, v75);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v84, v86);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v102, "setObject:forKeyedSubscript:", v90, v75);

    }
  }
LABEL_131:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v109, "setPercentileQuantityBySource:", v105);
  objc_msgSend(v109, "setDataCountBySource:", v104);
  if ((v106 & 0x20) != 0)
  {
    objc_msgSend(v109, "setMostRecentQuantityBySource:", v101);
    objc_msgSend(v109, "setMostRecentQuantityDateIntervalBySource:", v102);
  }

LABEL_134:
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }

  v91 = v124;
  if (v124 == v123)
  {
    v92 = 4;
    v91 = v123;
LABEL_140:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  else if (v124)
  {
    v92 = 5;
    goto LABEL_140;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v109, "averageQuantity");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  if (v94)
  {
    objc_msgSend(v109, "averageQuantity");
    v26 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v26, "isCompatibleWithUnit:", v93) & 1) == 0)
    {

      goto LABEL_155;
    }
  }
  objc_msgSend(v109, "minimumQuantity");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  if (v95)
  {
    objc_msgSend(v109, "minimumQuantity");
    WeakRetained = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)WeakRetained, "isCompatibleWithUnit:", v93))
    {
      v96 = 1;
      goto LABEL_149;
    }
  }
  objc_msgSend(v109, "maximumQuantity");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  if (v97)
  {
    objc_msgSend(v109, "maximumQuantity");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = objc_msgSend(v98, "isCompatibleWithUnit:", v93);

    v96 = v99 ^ 1;
    if (v95)
      goto LABEL_149;
LABEL_153:
    if (!v94)
      goto LABEL_154;
LABEL_150:

    if ((v96 & 1) == 0)
      goto LABEL_156;
LABEL_155:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v93);
    goto LABEL_156;
  }
  v96 = 0;
  if (!v95)
    goto LABEL_153;
LABEL_149:

  if (v94)
    goto LABEL_150;
LABEL_154:

  if (v96)
    goto LABEL_155;
LABEL_156:

  return v109;
}

void sub_1B7D72C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  if (__p)
    operator delete(__p);

  v39 = *(_QWORD **)(v37 - 144);
  if (v39 == (_QWORD *)(v37 - 168))
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 - 168);
  }
  else
  {
    if (!v39)
      goto LABEL_8;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_8:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 288);
  v2 = *(_QWORD *)(a1 + 304);
  if (v1 != (*(_QWORD *)(a1 + 312) - v2) >> 3)
  {
    v4 = (void **)(a1 + 304);
    *(_QWORD *)(a1 + 312) = v2;
    std::vector<long long>::reserve((void **)(a1 + 304), v1);
    v5 = *(_QWORD **)(a1 + 280);
    if (v5)
    {
      v6 = *(char **)(a1 + 312);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 320);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 304);
            v6 = *(char **)(a1 + 312);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 304) = v16;
          *(_QWORD *)(a1 + 312) = v9;
          *(_QWORD *)(a1 + 320) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 312) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D73060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  char v57;
  double *v58;
  __int128 v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double var2;
  double *i;
  unint64_t var3;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  uint64_t **v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  __int128 v91;
  char *v92;
  double v93;
  void *v94;
  void *v95;
  id *location;
  id v97;
  HDStatisticsPercentiles *v98;
  int64_t v99;
  char **v100;
  uint64_t v101;
  HDRawQuantitySample v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v100 = (char **)(a1 + 96);
    v98 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 248);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v100;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v102.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v97 = 0;
          if (v7 == (double *)v8)
          {
LABEL_135:
            v87 = *(_QWORD **)(a1 + 240);
            if (v87 != v6)
            {
              do
              {
                v88 = (_QWORD *)v87[1];
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (_QWORD *)v87[2];
                    v90 = *v89 == (_QWORD)v87;
                    v87 = v89;
                  }
                  while (!v90);
                }
                v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_149;
          }
          v99 = 0;
          v57 = 0;
          v58 = v7;
          while (2)
          {
            v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              v60 = *(_OWORD **)(a1 + 104);
              v61 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)*v100) >> 4);
                if (2 * v67 > v66)
                  v66 = 2 * v67;
                if (v67 >= 0x2AAAAAAAAAAAAAALL)
                  v68 = 0x555555555555555;
                else
                  v68 = v66;
                if (v68)
                  v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                else
                  v69 = 0;
                v73 = (_OWORD *)(v68 + 48 * v65);
                v74 = *(_OWORD *)v58;
                v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *v73 = v74;
                v77 = *(char **)(a1 + 96);
                v76 = *(char **)(a1 + 104);
                v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    v79 = *((_OWORD *)v76 - 3);
                    v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  v76 = *v100;
                }
                v64 = v73 + 3;
                *(_QWORD *)(a1 + 96) = v78;
                *(_QWORD *)(a1 + 104) = v73 + 3;
                *(_QWORD *)(a1 + 112) = v68 + 48 * v69;
                if (v76)
                  operator delete(v76);
              }
              else
              {
                v62 = *(_OWORD *)v58;
                v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *v60 = v62;
                v64 = v60 + 3;
              }
              *(_QWORD *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8)
                goto LABEL_135;
              continue;
            }
            break;
          }
          var2 = v102.var2;
          if (v102.var2 > v38)
            var2 = v38;
          v102.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1])
              goto LABEL_134;
          }
          if ((v57 & 1) != 0)
          {
            var3 = v102.var3;
            if (v99 == v102.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
            var3 = v102.var3;
            v99 = v102.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_133;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(a1, var3);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v81)
            goto LABEL_132;
          objc_msgSend(v97, "objectForKeyedSubscript:", v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          v83 = v82;
          if (v82)
          {
            if (objc_msgSend(v82, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v97, "setObject:forKeyedSubscript:", v84, v81);

          }
          v85 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(a1, var3);
          v86 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v85);
          HDStatisticsRelative<HDStatisticsPercentiles>::addSample((HDStatisticsPercentiles *)v86, &v102);
          goto LABEL_131;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v102.var0 = *v7;
        v102.var1 = v13;
        v102.var2 = v14;
        v102.var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&v104 = v25;
        *((_QWORD *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsPercentiles>::addSample(v98, &v102);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(a1, v15);
            v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsPercentiles>::addSample((HDStatisticsPercentiles *)v56, &v102);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          v91 = v104;
          v92 = *v100;
          *(_OWORD *)v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((_QWORD *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsPercentiles>]");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "handleFailureInFunction:file:lineNumber:description:", v95, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v93 = *(double *)(a1 + 56);
      }
      v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1B7D737FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsPercentiles>::addSample(HDStatisticsPercentiles *this, HDRawQuantitySample *a2)
{
  HDRawQuantitySample *v2;
  int v4;
  HDStatisticsPercentiles *v5;
  int v6;
  void *v7;
  _OWORD *v8;
  __int128 v9;

  v2 = a2;
  v4 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v4 = 1;
  if (v4)
  {
    if (v4 == 1)
    {
      if (!*(_DWORD *)this)
      {
        v6 = 1;
LABEL_15:
        *(_DWORD *)this = v6;
        v8 = (_OWORD *)((char *)this + 8);
        v7 = (void *)*((_QWORD *)this + 1);
        if (v7)
        {
          *((_QWORD *)this + 2) = v7;
          operator delete(v7);
        }
        *v8 = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        v9 = *((_OWORD *)this + 6);
        *(_OWORD *)((char *)this + 40) = *((_OWORD *)this + 5);
        *(_OWORD *)((char *)this + 56) = v9;
        *((_WORD *)this + 36) = *((_WORD *)this + 56);
        v5 = (HDStatisticsPercentiles *)((char *)this + 8);
        goto LABEL_18;
      }
    }
    else if (v4 == 2)
    {
      if (*(_DWORD *)this == 2)
      {
        v5 = (HDStatisticsPercentiles *)((char *)this + 8);
LABEL_19:
        HDStatisticsPercentiles::addSample(v5, a2);
        return;
      }
      v6 = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)this && *((_QWORD *)this + 2) == *((_QWORD *)this + 1))
  {
    v5 = (HDStatisticsPercentiles *)((char *)this + 8);
LABEL_18:
    a2 = v2;
    goto LABEL_19;
  }
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 328), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 368);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D73A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 408);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D73B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 304);
      v11 = *(char **)(*(_QWORD *)a3 + 312);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 312);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 304);
      v24 = *(char **)(*(_QWORD *)a3 + 312);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 312);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 304);
            v31 = *(char **)(*(_QWORD *)a3 + 312);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 312);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D086F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D086F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPercentiles> const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsRelative<HDStatisticsPercentiles> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 600))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D75288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 576);
      v7 = *(_QWORD *)(a1 + 568);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D75490(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 272, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
        {
          *(_QWORD *)(a1 + 208) = v7;
          *(double *)(a1 + 216) = v6;
          *(double *)(a1 + 224) = v8;
          *(_QWORD *)(a1 + 232) = v9;
          *(_BYTE *)(a1 + 240) = v3;
          *(_BYTE *)(a1 + 241) = v10;
          if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(_QWORD *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(_QWORD *)(a1 + 192) = v9;
            *(_BYTE *)(a1 + 200) = v3;
            *(_BYTE *)(a1 + 201) = v10;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 112) || *((double *)v49 + 11) <= v6)
          {
            v49[10] = v7;
            *((double *)v49 + 11) = v6;
            *((double *)v49 + 12) = v8;
            v49[13] = (uint64_t *)v9;
            *((_BYTE *)v49 + 112) = v3;
            *((_BYTE *)v49 + 113) = v10;
            if (!*((_BYTE *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((_BYTE *)v49 + 72) = v3;
              *((_BYTE *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 464);
        v19 = *(_QWORD *)(a1 + 472);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 456);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 456);
          v29 = *(char **)(a1 + 464);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 456);
          }
          *(_QWORD *)(a1 + 456) = v27;
          *(_QWORD *)(a1 + 464) = v20;
          *(_QWORD *)(a1 + 472) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 464) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 602))
  {
    *(_BYTE *)(a1 + 604) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 604) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D759AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 456), *(_QWORD *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 464) - *(_QWORD *)(a1 + 456)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D75A94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  _QWORD *v16;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 480), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
  }
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 200) = 0;
  if (*(_QWORD *)(a1 + 264))
  {
    v10 = *(_QWORD **)(a1 + 248);
    v11 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = a1 + 256;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (v10[1])
      v12 = (_QWORD *)v10[1];
    else
      v12 = v10;
    if (v12)
    {
      v13 = (_QWORD *)v12[2];
      if (v13)
      {
        v14 = (_QWORD *)*v13;
        if ((_QWORD *)*v13 == v12)
        {
          *v13 = 0;
          while (1)
          {
            v16 = (_QWORD *)v13[1];
            if (!v16)
              break;
            do
            {
              v13 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; v14 = (_QWORD *)v13[1])
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
        for (i = (_QWORD *)v13[2]; i; i = (_QWORD *)i[2])
          v13 = i;
        v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 480));
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 456);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 604))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 604) = 0;
  }

}

void sub_1B7D75C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D75CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 616));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 600) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D76030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4041CDDEDFLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D761DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPercentiles>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D76448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 600))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D770D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D77170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsPercentilesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPercentiles>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsPercentiles>::archive(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsPercentiles::archive((HDStatisticsPercentiles *)(a2 + 8));
}

void sub_1B7D771E0(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsPercentiles>::unarchive(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  if (*(_QWORD *)(a2 + 128))
    HDStatisticsPercentiles::unarchive(*(HDStatisticsPercentiles **)(a2 + 128), (const statistics::Statistics *)a2);
  *(_DWORD *)a1 = *(_QWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 112);
  if (v3)
  {
    result = *(double *)(v3 + 8);
    v4 = *(_QWORD *)(v3 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 24), 8uLL);
    *(double *)(a1 + 96) = result;
    *(_QWORD *)(a1 + 104) = v4;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D087A0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_WORD *)(a1 + 552) = 1;
  *(_BYTE *)(a1 + 554) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D087A0;
  v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(_QWORD *)(a1 + 592) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 520);
  if (v3)
  {
    *(_QWORD *)(a1 + 528) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 552) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);

}

void sub_1B7D773D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 560) = v4;
    v3 = v5;
  }

}

void sub_1B7D77438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;

  objc_storeStrong((id *)(a1 + 568), a2);
  v7 = a2;
  v4 = *(id *)(a1 + 568);
  v5 = *(void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v4;
  v6 = v4;

  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 544));
}

void sub_1B7D774BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(char **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), v7, v8, (v8 - (uint64_t)v7) >> 4);
  if (v9)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D77600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[50];

  if (*(_BYTE *)(a1 + 552))
    return 0;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D776A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 554))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 553))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 555))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 592);
    v18 = *(_QWORD *)(a1 + 600);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 584);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 592);
      v33 = *(char **)(a1 + 584);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 584);
      }
      *(_QWORD *)(a1 + 584) = v28;
      *(_QWORD *)(a1 + 592) = v21;
      *(_QWORD *)(a1 + 600) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 592) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D778FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 554))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 554) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 553))
    goto LABEL_5;
  v9 = *(void **)(a1 + 576);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_409);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 576);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  *(_BYTE *)(a1 + 553) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 584);
      v37 = *(__int128 **)(a1 + 592);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 592);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 592) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 584);
  v39 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 528) != *(_QWORD *)(a1 + 520))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 528) != *(_QWORD *)(a1 + 520));
  }
  *(_BYTE *)(a1 + 554) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 556))
    {
      *(_BYTE *)(a1 + 556) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 554) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D77FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 554) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 555) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 554))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 554))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 553) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 553))
  {
    v8 = *(void **)(a1 + 576);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 576);
      *(_QWORD *)(a1 + 576) = v9;

      v8 = *(void **)(a1 + 576);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D782F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 552) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 552) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D78410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::reset(uint64_t result)
{
  *(_BYTE *)(result + 552) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 552), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsPercentiles::archive((HDStatisticsPercentiles *)(a1 + 240));
}

void sub_1B7D785D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  const statistics::Statistics *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  HDStatisticsPercentiles *v24;
  HDStatisticsPercentiles **v25;
  uint64_t v26;
  uint64_t i;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  _BYTE v51[400];
  __int128 v52;
  __int128 v53;
  int8x16_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t v60[4];
  __int128 __p;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[26];
  _QWORD *v66;
  _QWORD v67[2];
  __int128 v68;
  __int128 v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  int v81;
  void (**v82)(statistics::StatisticsEngine *__hidden);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _BYTE v89[32];
  uint64_t v90;

  v47 = a2;
  *(_BYTE *)(a1 + 552) = objc_msgSend(v47, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v47;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v51, 0, -1.79769313e308, 1.79769313e308);
  v52 = 0u;
  v53 = 0u;
  v90 = 0;
  v49 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v89, (const unsigned __int8 *)objc_msgSend(v49, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v90));
  v82 = &off_1E6D09A88;
  v83 = 0;
  v87 = 0;
  v85 = 0;
  v86 = 0;
  v88 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v82, (PB::Reader *)v89);
  v48 = a1;
  v5 = (_QWORD *)v83;
  v50 = v84;
  if (v83)
  {
    v57 = 0;
    memset(v60, 0, sizeof(v60));
    v67[1] = 0;
    v67[0] = 0;
    __p = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    memset(v65, 0, sizeof(v65));
    v66 = v67;
    v68 = 0u;
    v69 = 0u;
    v70 = 1065353216;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0;
    v75 = 1065353216;
    v76 = 0u;
    v77 = 0u;
    v78 = 1065353216;
    v79 = 0u;
    v80 = 0u;
    v81 = 1065353216;
    v54 = vextq_s8(*(int8x16_t *)(v83 + 8), *(int8x16_t *)(v83 + 8), 8uLL);
    v6 = *(_QWORD *)(v83 + 72);
    v55 = *(_QWORD *)(v83 + 64);
    v56 = *(_WORD *)(v83 + 185);
    v58 = vextq_s8(*(int8x16_t *)(v83 + 24), *(int8x16_t *)(v83 + 24), 8uLL);
    v59 = v6;
    v7 = *(_QWORD *)(v83 + 80);
    v8 = *(_QWORD *)(v83 + 88);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 24);
        v11 = *(_QWORD *)(*(_QWORD *)v7 + 32);
        v12 = *(_QWORD *)(*(_QWORD *)v7 + 8);
        v13 = *(_QWORD *)(*(_QWORD *)v7 + 16);
        v14 = *(_BYTE *)(*(_QWORD *)v7 + 41);
        v15 = *(_BYTE *)(*(_QWORD *)v7 + 40);
        if (v9 >= (unint64_t)v62)
        {
          v16 = (void *)__p;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - __p) >> 4);
          v18 = v17 + 1;
          if (v17 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v62 - __p) >> 4) > v18)
            v18 = 0x5555555555555556 * ((uint64_t)(v62 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v19 = 0x555555555555555;
          else
            v19 = v18;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v19);
            v9 = *((_QWORD *)&__p + 1);
            v16 = (void *)__p;
          }
          else
          {
            v4 = 0;
          }
          v20 = v19 + 48 * v17;
          *(_QWORD *)v20 = v11;
          *(_QWORD *)(v20 + 8) = v10;
          *(_QWORD *)(v20 + 16) = v12;
          *(_QWORD *)(v20 + 24) = v13;
          *(_WORD *)(v20 + 32) = 1;
          *(_BYTE *)(v20 + 40) = 0;
          *(_BYTE *)(v20 + 41) = v14;
          *(_BYTE *)(v20 + 42) = v15;
          v21 = v20;
          if ((void *)v9 != v16)
          {
            do
            {
              v22 = *(_OWORD *)(v9 - 48);
              v23 = *(_OWORD *)(v9 - 32);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v9 - 21);
              *(_OWORD *)(v21 - 48) = v22;
              *(_OWORD *)(v21 - 32) = v23;
              v21 -= 48;
              v9 -= 48;
            }
            while ((void *)v9 != v16);
            v16 = (void *)__p;
          }
          v9 = v20 + 48;
          *(_QWORD *)&__p = v21;
          *((_QWORD *)&__p + 1) = v20 + 48;
          *(_QWORD *)&v62 = v19 + 48 * (_QWORD)v4;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v11;
          *(_QWORD *)(v9 + 8) = v10;
          *(_QWORD *)(v9 + 16) = v12;
          *(_QWORD *)(v9 + 24) = v13;
          *(_WORD *)(v9 + 32) = 1;
          *(_BYTE *)(v9 + 40) = 0;
          *(_BYTE *)(v9 + 41) = v14;
          *(_BYTE *)(v9 + 42) = v15;
          v9 += 48;
        }
        *((_QWORD *)&__p + 1) = v9;
        v7 += 8;
      }
      while (v7 != v8);
    }
    v24 = (HDStatisticsPercentiles *)v5[13];
    if (v24)
      HDStatisticsPercentiles::unarchive(v24, v4);
    v25 = (HDStatisticsPercentiles **)v5[17];
    if (v25 != (HDStatisticsPercentiles **)v5[18])
      HDStatisticsPercentiles::unarchive(*v25, v4);
    v26 = v5[5];
    for (i = v5[6]; v26 != i; v26 += 8)
    {
      v29 = *(double *)(*(_QWORD *)v26 + 8);
      v28 = *(double *)(*(_QWORD *)v26 + 16);
      if (v29 >= v28)
        v30 = *(double *)(*(_QWORD *)v26 + 16);
      else
        v30 = *(double *)(*(_QWORD *)v26 + 8);
      if (v28 < v29)
        v28 = *(double *)(*(_QWORD *)v26 + 8);
      HKIntervalMask<double>::_insertInterval(v60, v30, v28);
    }
    HDStatisticsBucket<HDStatisticsPercentiles>::operator=((uint64_t)v51, (uint64_t)&v54);
    HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)&v54);
  }
  v31 = v85;
  v32 = v86;
  if (v85 != v86)
  {
    v33 = *((_QWORD *)&v52 + 1);
    do
    {
      v34 = *(_QWORD *)(*(_QWORD *)v31 + 24);
      v35 = *(_QWORD *)(*(_QWORD *)v31 + 32);
      v36 = *(_QWORD *)(*(_QWORD *)v31 + 8);
      v37 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      if (v33 >= (unint64_t)v53)
      {
        v38 = (void *)v52;
        v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - v52) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v53 - v52) >> 3) > v40)
          v40 = 0x999999999999999ALL * ((uint64_t)(v53 - v52) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v52) >> 3) >= 0x333333333333333)
          v41 = 0x666666666666666;
        else
          v41 = v40;
        if (v41)
        {
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v41);
          v33 = *((_QWORD *)&v52 + 1);
          v38 = (void *)v52;
        }
        else
        {
          v42 = 0;
        }
        v43 = v41 + 40 * v39;
        *(_QWORD *)v43 = v35;
        *(_QWORD *)(v43 + 8) = v34;
        *(_QWORD *)(v43 + 16) = v36;
        *(_QWORD *)(v43 + 24) = v37;
        *(_WORD *)(v43 + 32) = 1;
        v44 = v43;
        if ((void *)v33 != v38)
        {
          do
          {
            v45 = *(_OWORD *)(v33 - 40);
            v46 = *(_OWORD *)(v33 - 24);
            *(_WORD *)(v44 - 8) = *(_WORD *)(v33 - 8);
            *(_OWORD *)(v44 - 24) = v46;
            *(_OWORD *)(v44 - 40) = v45;
            v44 -= 40;
            v33 -= 40;
          }
          while ((void *)v33 != v38);
          v38 = (void *)v52;
        }
        v33 = v43 + 40;
        *(_QWORD *)&v52 = v44;
        *((_QWORD *)&v52 + 1) = v43 + 40;
        *(_QWORD *)&v53 = v41 + 40 * v42;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *(_QWORD *)v33 = v35;
        *(_QWORD *)(v33 + 8) = v34;
        *(_QWORD *)(v33 + 16) = v36;
        *(_QWORD *)(v33 + 24) = v37;
        *(_WORD *)(v33 + 32) = 1;
        v33 += 40;
      }
      *((_QWORD *)&v52 + 1) = v33;
      v31 += 8;
    }
    while (v31 != v32);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v82);

  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=((_QWORD *)(v48 + 112), (uint64_t)&v50);
  if ((_QWORD)v52)
  {
    *((_QWORD *)&v52 + 1) = v52;
    operator delete((void *)v52);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v51);

}

void sub_1B7D78B48(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x320]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2F8]);
  v7 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v7;
    operator delete(v7);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2B8]);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy((_QWORD *)STACK[0x2A8]);
  v8 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v8;
    operator delete(v8);
  }
  v9 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v9;
    operator delete(v9);
  }
  objc_destroyWeak((id *)&STACK[0x238]);
  v10 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v10;
    operator delete(v10);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x378]);
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsPercentiles>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 360);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 320);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 216);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*(_QWORD **)(a1 + 200));
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[400];
  uint64_t v18;
  _BYTE v19[400];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  char v27[336];
  uint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration((uint64_t)v22, *(void **)(a1 + 568));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 552) = 0;
  return HDStatisticsBucket<HDStatisticsPercentiles>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D79094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  HDStatisticsPercentileConfiguration *v4;

  objc_storeStrong((id *)(a1 + 32), a2);
  v4 = a2;
  HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(a1 + 120), v4);

}

void sub_1B7D79138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsPercentiles>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsPercentiles>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 51), (__n128 *)(a2 + 408));
  v4 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v5 = (void *)a1[54];
  a1[54] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 120), *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 170);
  *(_QWORD *)(a1 + 200) = 0;
  v15 = (_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 170) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  *(_QWORD *)(a1 + 208) = 0;
  v16 = *(_QWORD **)(a2 + 192);
  if (v16 != (_QWORD *)(a2 + 200))
  {
    v17 = 0;
    v18 = (_QWORD *)(a1 + 200);
    while (1)
    {
      v19 = (_QWORD *)(a1 + 200);
      if (v18 == v15)
        goto LABEL_12;
      v20 = v17;
      v21 = (_QWORD *)(a1 + 200);
      if (v17)
      {
        do
        {
          v19 = v20;
          v20 = (_QWORD *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v21[2];
          v22 = *v19 == (_QWORD)v21;
          v21 = v19;
        }
        while (v22);
      }
      v23 = v16[4];
      if (v19[4] < v23)
      {
LABEL_12:
        if (v17)
          v24 = (uint64_t **)v19;
        else
          v24 = (uint64_t **)(a1 + 200);
        if (v17)
          v25 = (uint64_t **)(v19 + 1);
        else
          v25 = (uint64_t **)(a1 + 200);
        if (!*v25)
        {
LABEL_28:
          v28 = (char *)operator new(0x70uLL);
          v29 = v16[4];
          *((_QWORD *)v28 + 5) = 0;
          *((_QWORD *)v28 + 4) = v29;
          *((_QWORD *)v28 + 6) = 0;
          *((_QWORD *)v28 + 7) = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v28 + 5, (const void *)v16[5], v16[6], (uint64_t)(v16[6] - v16[5]) >> 3);
          v30 = *((_OWORD *)v16 + 4);
          v31 = *((_OWORD *)v16 + 5);
          *(_OWORD *)(v28 + 90) = *(_OWORD *)((char *)v16 + 90);
          *((_OWORD *)v28 + 4) = v30;
          *((_OWORD *)v28 + 5) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 192), (uint64_t)v24, v25, (uint64_t *)v28);
        }
      }
      else
      {
        v25 = (uint64_t **)(a1 + 200);
        v24 = (uint64_t **)(a1 + 200);
        if (!v17)
          goto LABEL_28;
        v26 = v17;
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v26;
            v27 = v26[4];
            if (v27 <= v23)
              break;
            v26 = *v24;
            v25 = v24;
            if (!*v24)
              goto LABEL_28;
          }
          if (v27 >= v23)
            break;
          v26 = v24[1];
          if (!v26)
          {
            v25 = v24 + 1;
            goto LABEL_28;
          }
        }
      }
      v32 = (_QWORD *)v16[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v16[2];
          v22 = *v33 == (_QWORD)v16;
          v16 = v33;
        }
        while (!v22);
      }
      if (v33 == (_QWORD *)(a2 + 200))
        break;
      v17 = (_QWORD *)*v15;
      v18 = *(_QWORD **)(a1 + 192);
      v16 = v33;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 216, a2 + 216);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 256), *(const void **)(a2 + 256), *(_QWORD *)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 280, a2 + 280);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 360, a2 + 360);
  return a1;
}

void sub_1B7D794A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 264) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 128) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPercentiles>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 120, (__n128 *)(a2 + 120));
  v11 = a1 + 200;
  v10 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 152);
  v13 = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 168) = v13;
  std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v10);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v14 = (_QWORD *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v15;
  v16 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(a2 + 192) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 208) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 216, (uint64_t *)(a2 + 216));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 256, (__n128 *)(a2 + 256));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  char **v43;
  char *v44;
  unint64_t v45;
  id v46;
  id v47;
  void *v48;
  char v49;
  char *v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  int8x8_t prime;
  void *v56;
  void *v57;
  uint64_t v58;
  _QWORD **v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *i;
  unint64_t v66;
  char **v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  BOOL v73;
  void *v74;
  uint64_t **v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  HDStatisticsPercentiles *v79;
  void *v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  id v95;
  id v96;
  unint64_t v97;
  id v98;
  id v99;
  char v100;
  id v101;
  id v102;
  uint64_t v103;
  void *__p[2];
  _BYTE v106[24];
  _OWORD v107[2];
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  __int128 v111;
  _OWORD v112[2];
  _QWORD v113[2];
  char v114;
  _QWORD v115[3];
  _QWORD *v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v101 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v103 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v101, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 256);
      v16 = *(uint64_t **)(a2 + 264);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v2 = objc_claimAutoreleasedReturnValue();

        if (v2)
        {
          if ((objc_msgSend(v14, "containsObject:", v2) & 1) == 0)
            objc_msgSend(v14, "addObject:", v2);
        }

        ++v15;
      }
      v19 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v19);

    }
  }

  v115[0] = &off_1E6D08870;
  v116 = v115;
  v102 = v12;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)v106 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(__p, *(const void **)(v103 + 120), *(_QWORD *)(v103 + 128), (uint64_t)(*(_QWORD *)(v103 + 128) - *(_QWORD *)(v103 + 120)) >> 3);
  v20 = *(_OWORD *)(v103 + 160);
  *(_OWORD *)&v106[8] = *(_OWORD *)(v103 + 144);
  v107[0] = v20;
  *(_OWORD *)((char *)v107 + 10) = *(_OWORD *)(v103 + 170);
  if (!v116)
    std::__throw_bad_function_call[abi:ne180100]();
  v21 = (*(uint64_t (**)(_QWORD *, void **))(*v116 + 48))(v116, __p);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v108, *(const void **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 3);
  v22 = *(_OWORD *)(v21 + 24);
  v23 = *(_OWORD *)(v21 + 40);
  *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)(v21 + 50);
  v112[0] = v23;
  v111 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v24 = HDStatisticsPercentiles::calculatePercentileValue((HDStatisticsPercentiles *)&v108);
  v25 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v26, v24);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "setPercentileQuantity:", v27);

  objc_msgSend(v102, "setDataCount:", (v109 - (_BYTE *)v108) >> 3);
  v28 = *(_QWORD *)(a1 + 24);
  v100 = v28;
  if ((v28 & 0x20) != 0)
  {
    v29 = *((double *)&v111 + 1);
    v30 = v112[0];
    v31 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "quantityWithUnit:doubleValue:", v32, v29);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMostRecentQuantity:", v33);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v30);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMostRecentQuantityDateInterval:", v34);

    v28 = *(_QWORD *)(a1 + 24);
  }
  if ((v28 & 1) == 0)
    goto LABEL_134;
  v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((v100 & 0x20) != 0)
  {
    v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v95 = 0;
    v96 = 0;
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v106 = 0u;
  *(_DWORD *)&v106[16] = 1065353216;
  v35 = *(_QWORD **)(v103 + 192);
  if (v35 == (_QWORD *)(v103 + 200))
    goto LABEL_131;
  do
  {
    HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(v103, v35[4]);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v36;
    if (!v36)
      goto LABEL_107;
    v38 = objc_msgSend(v36, "hash");
    v39 = v38;
    v40 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_48;
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.u32[0];
    if (v41.u32[0] > 1uLL)
    {
      v2 = v38;
      if ((void *)v38 >= __p[1])
        v2 = v38 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v38;
    }
    v43 = (char **)*((_QWORD *)__p[0] + v2);
    if (!v43 || (v44 = *v43) == 0)
    {
LABEL_48:
      v50 = (char *)operator new(0x60uLL);
      v113[0] = v50;
      v113[1] = v106;
      *(_QWORD *)v50 = 0;
      *((_QWORD *)v50 + 1) = v39;
      *((_QWORD *)v50 + 2) = v37;
      *(_OWORD *)(v50 + 24) = 0u;
      *(_OWORD *)(v50 + 40) = 0u;
      *(_OWORD *)(v50 + 56) = 0u;
      *(_OWORD *)(v50 + 72) = 0u;
      *((_QWORD *)v50 + 11) = 0;
      v114 = 1;
      v51 = (float)(unint64_t)(*(_QWORD *)&v106[8] + 1);
      if (v40 && (float)(*(float *)&v106[16] * (float)v40) >= v51)
      {
LABEL_94:
        v67 = (char **)*((_QWORD *)__p[0] + v2);
        v44 = (char *)v113[0];
        if (v67)
        {
          *(_QWORD *)v113[0] = *v67;
        }
        else
        {
          *(_QWORD *)v113[0] = *(_QWORD *)v106;
          *(_QWORD *)v106 = v44;
          *((_QWORD *)__p[0] + v2) = v106;
          if (!*(_QWORD *)v44)
          {
LABEL_103:
            v113[0] = 0;
            ++*(_QWORD *)&v106[8];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>>>>::reset[abi:ne180100]((uint64_t)v113);
            goto LABEL_104;
          }
          v68 = *(_QWORD *)(*(_QWORD *)v44 + 8);
          if ((v40 & (v40 - 1)) != 0)
          {
            if (v68 >= v40)
              v68 %= v40;
          }
          else
          {
            v68 &= v40 - 1;
          }
          v67 = (char **)((char *)__p[0] + 8 * v68);
        }
        *v67 = v44;
        goto LABEL_103;
      }
      v52 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3)
        v52 = 1;
      v53 = v52 | (2 * v40);
      v54 = vcvtps_u32_f32(v51 / *(float *)&v106[16]);
      if (v53 <= v54)
        prime = (int8x8_t)v54;
      else
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v40 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_60;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v62 = vcvtps_u32_f32((float)*(unint64_t *)&v106[8] / *(float *)&v106[16]);
        if (__p[1] < (void *)3
          || (v63 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
        {
          v62 = std::__next_prime(v62);
        }
        else
        {
          v64 = 1 << -(char)__clz(v62 - 1);
          if (v62 >= 2)
            v62 = v64;
        }
        if (*(_QWORD *)&prime <= v62)
          prime = (int8x8_t)v62;
        if (*(_QWORD *)&prime >= v40)
        {
          v40 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v56 = operator new(8 * *(_QWORD *)&prime);
            v57 = __p[0];
            __p[0] = v56;
            if (v57)
              operator delete(v57);
            v58 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v58++) = 0;
            while (*(_QWORD *)&prime != v58);
            v59 = *(_QWORD ***)v106;
            if (*(_QWORD *)v106)
            {
              v60 = *(_QWORD *)(*(_QWORD *)v106 + 8);
              v61 = (uint8x8_t)vcnt_s8(prime);
              v61.i16[0] = vaddlv_u8(v61);
              if (v61.u32[0] > 1uLL)
              {
                if (v60 >= *(_QWORD *)&prime)
                  v60 %= *(_QWORD *)&prime;
              }
              else
              {
                v60 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v60) = v106;
              for (i = *v59; i; v60 = v66)
              {
                v66 = i[1];
                if (v61.u32[0] > 1uLL)
                {
                  if (v66 >= *(_QWORD *)&prime)
                    v66 %= *(_QWORD *)&prime;
                }
                else
                {
                  v66 &= *(_QWORD *)&prime - 1;
                }
                if (v66 != v60)
                {
                  if (!*((_QWORD *)__p[0] + v66))
                  {
                    *((_QWORD *)__p[0] + v66) = v59;
                    goto LABEL_85;
                  }
                  *v59 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v66);
                  **((_QWORD **)__p[0] + v66) = i;
                  i = v59;
                }
                v66 = v60;
LABEL_85:
                v59 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v40 = (unint64_t)prime;
            goto LABEL_89;
          }
          v74 = __p[0];
          __p[0] = 0;
          if (v74)
            operator delete(v74);
          v40 = 0;
          __p[1] = 0;
        }
      }
LABEL_89:
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40)
          v2 = v39 % v40;
        else
          v2 = v39;
      }
      else
      {
        v2 = (v40 - 1) & v39;
      }
      goto LABEL_94;
    }
    v97 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v45 = *((_QWORD *)v44 + 1);
      if (v45 == v39)
        break;
      if (v42 > 1)
      {
        if (v45 >= v40)
          v45 %= v40;
      }
      else
      {
        v45 &= v97;
      }
      if (v45 != v2)
        goto LABEL_48;
LABEL_47:
      v44 = *(char **)v44;
      if (!v44)
        goto LABEL_48;
    }
    v46 = *((id *)v44 + 2);
    v47 = v37;
    v48 = v47;
    if (v46 != v47)
    {
      v49 = objc_msgSend(v46, "isEqualToString:", v47);

      if ((v49 & 1) != 0)
        goto LABEL_104;
      goto LABEL_47;
    }

LABEL_104:
    if (v44 + 16 != (char *)(v35 + 4))
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v44 + 24, (char *)v35[5], v35[6], (uint64_t)(v35[6] - v35[5]) >> 3);
    v69 = *((_OWORD *)v35 + 4);
    v70 = *((_OWORD *)v35 + 5);
    *(_OWORD *)(v44 + 74) = *(_OWORD *)((char *)v35 + 90);
    *((_OWORD *)v44 + 3) = v69;
    *((_OWORD *)v44 + 4) = v70;

LABEL_107:
    v71 = (_QWORD *)v35[1];
    if (v71)
    {
      do
      {
        v72 = v71;
        v71 = (_QWORD *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        v72 = (_QWORD *)v35[2];
        v73 = *v72 == (_QWORD)v35;
        v35 = v72;
      }
      while (!v73);
    }
    v35 = v72;
  }
  while (v72 != (_QWORD *)(v103 + 200));
  v75 = *(uint64_t ***)v106;
  if (*(_QWORD *)v106)
  {
    do
    {
      v76 = v75[2];
      v77 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v116)
        std::__throw_bad_function_call[abi:ne180100]();
      v79 = (HDStatisticsPercentiles *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)v75 + 3);
      objc_msgSend(v77, "quantityWithUnit:doubleValue:", v78, HDStatisticsPercentiles::calculatePercentileValue(v79));
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "setObject:forKeyedSubscript:", v80, v76);

      if (!v116)
        std::__throw_bad_function_call[abi:ne180100]();
      v81 = (void *)MEMORY[0x1E0CB37E8];
      v82 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)v75 + 3);
      objc_msgSend(v81, "numberWithLongLong:", (uint64_t)(v82[1] - *v82) >> 3);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v83, v76);

      if ((v100 & 0x20) != 0)
      {
        if (!v116)
          std::__throw_bad_function_call[abi:ne180100]();
        v84 = (double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)v75 + 3);
        v86 = v84[4];
        v85 = v84[5];
        v87 = v84[6];
        v88 = (void *)MEMORY[0x1E0CB6A28];
        objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v88, "quantityWithUnit:doubleValue:", v89, v86);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "setObject:forKeyedSubscript:", v90, v76);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v85, v87);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "setObject:forKeyedSubscript:", v91, v76);

      }
      v75 = (uint64_t **)*v75;
    }
    while (v75);
  }
LABEL_131:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v102, "setPercentileQuantityBySource:", v99);
  objc_msgSend(v102, "setDataCountBySource:", v98);
  if ((v100 & 0x20) != 0)
  {
    objc_msgSend(v102, "setMostRecentQuantityBySource:", v95);
    objc_msgSend(v102, "setMostRecentQuantityDateIntervalBySource:", v96);
  }

LABEL_134:
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }

  v92 = v116;
  if (v116 == v115)
  {
    v93 = 4;
    v92 = v115;
LABEL_140:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  else if (v116)
  {
    v93 = 5;
    goto LABEL_140;
  }
  return v102;
}

void sub_1B7D7A248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;

  if (__p)
    operator delete(__p);

  v34 = *(_QWORD **)(v32 - 136);
  if (v34 == (_QWORD *)(v32 - 160))
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 160);
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_8:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 240);
  v2 = *(_QWORD *)(a1 + 256);
  if (v1 != (*(_QWORD *)(a1 + 264) - v2) >> 3)
  {
    v4 = (void **)(a1 + 256);
    *(_QWORD *)(a1 + 264) = v2;
    std::vector<long long>::reserve((void **)(a1 + 256), v1);
    v5 = *(_QWORD **)(a1 + 232);
    if (v5)
    {
      v6 = *(char **)(a1 + 264);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 272);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 256);
            v6 = *(char **)(a1 + 264);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 256) = v16;
          *(_QWORD *)(a1 + 264) = v9;
          *(_QWORD *)(a1 + 272) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 264) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D7A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  char v57;
  double *v58;
  __int128 v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double var2;
  double *i;
  unint64_t var3;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  uint64_t **v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  __int128 v91;
  char *v92;
  double v93;
  void *v94;
  void *v95;
  id *location;
  id v97;
  HDStatisticsPercentiles *v98;
  int64_t v99;
  char **v100;
  uint64_t v101;
  HDRawQuantitySample v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v100 = (char **)(a1 + 96);
    v98 = (HDStatisticsPercentiles *)(a1 + 120);
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 200);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v100;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v102.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v97 = 0;
          if (v7 == (double *)v8)
          {
LABEL_135:
            v87 = *(_QWORD **)(a1 + 192);
            if (v87 != v6)
            {
              do
              {
                v88 = (_QWORD *)v87[1];
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (_QWORD *)v87[2];
                    v90 = *v89 == (_QWORD)v87;
                    v87 = v89;
                  }
                  while (!v90);
                }
                v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_149;
          }
          v99 = 0;
          v57 = 0;
          v58 = v7;
          while (2)
          {
            v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              v60 = *(_OWORD **)(a1 + 104);
              v61 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)*v100) >> 4);
                if (2 * v67 > v66)
                  v66 = 2 * v67;
                if (v67 >= 0x2AAAAAAAAAAAAAALL)
                  v68 = 0x555555555555555;
                else
                  v68 = v66;
                if (v68)
                  v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                else
                  v69 = 0;
                v73 = (_OWORD *)(v68 + 48 * v65);
                v74 = *(_OWORD *)v58;
                v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *v73 = v74;
                v77 = *(char **)(a1 + 96);
                v76 = *(char **)(a1 + 104);
                v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    v79 = *((_OWORD *)v76 - 3);
                    v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  v76 = *v100;
                }
                v64 = v73 + 3;
                *(_QWORD *)(a1 + 96) = v78;
                *(_QWORD *)(a1 + 104) = v73 + 3;
                *(_QWORD *)(a1 + 112) = v68 + 48 * v69;
                if (v76)
                  operator delete(v76);
              }
              else
              {
                v62 = *(_OWORD *)v58;
                v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *v60 = v62;
                v64 = v60 + 3;
              }
              *(_QWORD *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8)
                goto LABEL_135;
              continue;
            }
            break;
          }
          var2 = v102.var2;
          if (v102.var2 > v38)
            var2 = v38;
          v102.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1])
              goto LABEL_134;
          }
          if ((v57 & 1) != 0)
          {
            var3 = v102.var3;
            if (v99 == v102.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsPercentiles::addSample(v98, &v102);
          }
          else
          {
            HDStatisticsPercentiles::addSample(v98, &v102);
            var3 = v102.var3;
            v99 = v102.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_133;
          HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(a1, var3);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v81)
            goto LABEL_132;
          objc_msgSend(v97, "objectForKeyedSubscript:", v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          v83 = v82;
          if (v82)
          {
            if (objc_msgSend(v82, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v97, "setObject:forKeyedSubscript:", v84, v81);

          }
          v85 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(a1, var3);
          v86 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(a1, v85);
          HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v86, &v102);
          goto LABEL_131;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v102.var0 = *v7;
        v102.var1 = v13;
        v102.var2 = v14;
        v102.var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&v104 = v25;
        *((_QWORD *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsPercentiles::addSample(v98, &v102);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(a1, v15);
            v56 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(a1, v55);
            HDStatisticsPercentiles::addSample((HDStatisticsPercentiles *)v56, &v102);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          v91 = v104;
          v92 = *v100;
          *(_OWORD *)v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((_QWORD *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(double) [Statistics = HDStatisticsPercentiles]");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "handleFailureInFunction:file:lineNumber:description:", v95, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v93 = *(double *)(a1 + 56);
      }
      v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1B7D7AD5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v13;

  v13 = a2;
  v4 = (uint64_t **)(a1 + 200);
  v5 = *(_QWORD **)(a1 + 200);
  if (!v5)
    goto LABEL_11;
  v6 = (uint64_t **)(a1 + 200);
  do
  {
    v7 = v5[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (!v8)
      v6 = (uint64_t **)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v4 - 1;
    v11 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsPercentiles::configure((HDStatisticsPercentiles *)(v11 + 5), *(HDStatisticsPercentileConfiguration **)(a1 + 32));
    v6 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 280), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 320);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D7AF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsPercentiles>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 360);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D7B004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPercentiles>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPercentiles>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 256);
      v11 = *(char **)(*(_QWORD *)a3 + 264);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 264);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 256);
      v24 = *(char **)(*(_QWORD *)a3 + 264);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 264);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 256);
            v31 = *(char **)(*(_QWORD *)a3 + 264);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 264);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsPercentiles>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsPercentiles>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08870;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08870;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addStatisticsFromFinishedBucket<HDStatisticsPercentiles>(HKStatistics *,HDStatisticsBucket<HDStatisticsPercentiles> const&)::{lambda(HDStatisticsPercentiles const&)#1}>,HDStatisticsPercentiles const& ()(HDStatisticsPercentiles const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 552))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D7C85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 528);
      v7 = *(_QWORD *)(a1 + 520);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D7CA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 224, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(_QWORD *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(_QWORD *)(a1 + 184) = v9;
          *(_BYTE *)(a1 + 192) = v3;
          *(_BYTE *)(a1 + 193) = v10;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsPercentiles>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsPercentiles>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((_BYTE *)v49 + 64) = v3;
            *((_BYTE *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 416);
        v19 = *(_QWORD *)(a1 + 424);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 408);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 408);
          v29 = *(char **)(a1 + 416);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 408);
          }
          *(_QWORD *)(a1 + 408) = v27;
          *(_QWORD *)(a1 + 416) = v20;
          *(_QWORD *)(a1 + 424) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 416) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 554))
  {
    *(_BYTE *)(a1 + 556) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 556) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D7CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 408), *(_QWORD *)(a1 + 416), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 416) - *(_QWORD *)(a1 + 408)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsPercentiles>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D7D018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsPercentiles>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  objc_storeStrong((id *)(a1 + 432), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(_QWORD *)(a1 + 216))
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = a1 + 208;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsPercentiles>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPercentiles>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPercentiles>>>::destroy(v11);
  }
  HDStatisticsBucket<HDStatisticsPercentiles>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 432));
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 556))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 556) = 0;
  }

}

void sub_1B7D7D1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D7D254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 568));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 552) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D7D5B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40FC36F0F4);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D7D764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsPercentiles>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsPercentiles>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D7D9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 552))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsPercentiles>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D7E658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D7E6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI23HDStatisticsPercentilesE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPercentiles>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08920;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(_BYTE *)(a1 + 618) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08920;
  v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(_QWORD *)(a1 + 656) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(_QWORD *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7D7E86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 624) = v4;
    v3 = v5;
  }

}

void sub_1B7D7E8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 79, a2);
  v7 = a2;
  v4 = a1[79];
  v5 = a1[76];
  a1[76] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[76]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D7EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[58];

  if (*(_BYTE *)(a1 + 616))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D7EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 618))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 617))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 619))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 656);
    v18 = *(_QWORD *)(a1 + 664);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 648);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 656);
      v33 = *(char **)(a1 + 648);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 648);
      }
      *(_QWORD *)(a1 + 648) = v28;
      *(_QWORD *)(a1 + 656) = v21;
      *(_QWORD *)(a1 + 664) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 656) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D7ED5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 618))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 617))
    goto LABEL_5;
  v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_410);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 640);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;

  *(_BYTE *)(a1 + 617) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 648);
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    *(_QWORD *)(a1 + 648) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 648);
      v37 = *(__int128 **)(a1 + 656);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 656);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 656) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 648);
  v39 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584));
  }
  *(_BYTE *)(a1 + 618) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 620))
    {
      *(_BYTE *)(a1 + 620) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D7F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 618))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 618))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 617))
  {
    v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v9;

      v8 = *(void **)(a1 + 640);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D7F750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 616) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 616) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D7F870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 616), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 376);
  if (v9 != (_QWORD *)(a1 + 384))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 384));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 584);
  for (k = *(int8x16_t **)(a1 + 592); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D7FC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **i;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  _BYTE v64[464];
  __int128 v65;
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p;
  char *v76;
  unint64_t v77;
  int v78;
  __int128 v79;
  _OWORD v80[4];
  _QWORD v81[6];
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  void (**v99)(statistics::StatisticsEngine *__hidden);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BYTE v106[32];
  unint64_t v107;
  int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int16 v118;

  v59 = a2;
  *(_BYTE *)(a1 + 616) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v64, 0, -1.79769313e308, 1.79769313e308);
  v65 = 0u;
  v66 = 0u;
  v107 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v106, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v107));
  v61 = a1;
  v99 = &off_1E6D09A88;
  v100 = 0;
  v104 = 0;
  v102 = 0;
  v103 = 0;
  v105 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v99, (PB::Reader *)v106);
  v63 = v101;
  if (v100)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    __p = 0;
    v79 = 0u;
    memset(v80, 0, 26);
    memset(&v80[2], 0, 32);
    memset(v81, 0, 42);
    v84 = 0;
    v77 = 0;
    v76 = 0;
    v78 = 0;
    v83 = 0;
    v82 = &v83;
    v85 = 0u;
    v86 = 0u;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v100 + 8), *(int8x16_t *)(v100 + 8), 8uLL);
    v4 = *(_QWORD *)(v100 + 72);
    v68 = *(_QWORD *)(v100 + 64);
    v69 = *(_BYTE *)(v100 + 185);
    v70 = *(_BYTE *)(v100 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v100 + 24), *(int8x16_t *)(v100 + 24), 8uLL);
    v73 = v4;
    v5 = *(_QWORD *)(v100 + 80);
    v6 = *(_QWORD *)(v100 + 88);
    v60 = (_QWORD *)v100;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v76;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v76 = (char *)(v19 + 6);
          v77 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v108, v23);
      v78 = v108;
      v79 = v109;
      v80[0] = v110;
      v80[1] = v111;
      *(_QWORD *)&v80[2] = v112;
      if (*((_QWORD *)&v80[2] + 1))
      {
        *(_QWORD *)&v80[3] = *((_QWORD *)&v80[2] + 1);
        operator delete(*((void **)&v80[2] + 1));
      }
      *(_OWORD *)((char *)&v80[2] + 8) = v113;
      v81[0] = v115;
      *(_OWORD *)&v81[1] = v116;
      *((_QWORD *)&v80[3] + 1) = v114;
      v114 = 0;
      v113 = 0uLL;
      *(_OWORD *)&v81[3] = v117;
      LOWORD(v81[5]) = v118;
    }
    v25 = (_QWORD **)v60[17];
    for (i = (_QWORD **)v60[18]; v25 != i; ++v25)
    {
      v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v108, *v25);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v83;
      v29 = &v83;
      v30 = &v83;
      if (v83)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0xB0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *((_QWORD *)v33 + 21) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v82)
      {
        v82 = (uint64_t **)*v82;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v32);
      ++v84;
LABEL_37:
      v34 = (void *)*((_QWORD *)v33 + 13);
      *((_DWORD *)v33 + 10) = v108;
      v35 = v109;
      *((_OWORD *)v33 + 4) = v110;
      v36 = v111;
      *((_OWORD *)v33 + 3) = v35;
      *((_OWORD *)v33 + 5) = v36;
      *((_QWORD *)v33 + 12) = v112;
      if (v34)
      {
        *((_QWORD *)v33 + 14) = v34;
        operator delete(v34);
        *((_QWORD *)v33 + 13) = 0;
        *((_QWORD *)v33 + 14) = 0;
        *((_QWORD *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v113;
      *((_QWORD *)v33 + 15) = v114;
      *((_QWORD *)v33 + 16) = v115;
      v37 = v117;
      *(_OWORD *)(v33 + 136) = v116;
      v114 = 0;
      v113 = 0uLL;
      *(_OWORD *)(v33 + 152) = v37;
      *((_WORD *)v33 + 84) = v118;
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((uint64_t)v64, (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v43 = v102;
  v44 = v103;
  if (v102 != v103)
  {
    v45 = *((_QWORD *)&v65 + 1);
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if (v45 >= (unint64_t)v66)
      {
        v50 = (void *)v65;
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v65) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - v65) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v66 - v65) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - v65) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v45 = *((_QWORD *)&v65 + 1);
          v50 = (void *)v65;
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = v55;
        if ((void *)v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *(_WORD *)(v56 - 8) = *(_WORD *)(v45 - 8);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while ((void *)v45 != v50);
          v50 = (void *)v65;
        }
        v45 = v55 + 40;
        *(_QWORD *)&v65 = v56;
        *((_QWORD *)&v65 + 1) = v55 + 40;
        *(_QWORD *)&v66 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *(_QWORD *)(v45 + 8) = v46;
        *(_QWORD *)(v45 + 16) = v48;
        *(_QWORD *)(v45 + 24) = v49;
        *(_WORD *)(v45 + 32) = 1;
        v45 += 40;
      }
      *((_QWORD *)&v65 + 1) = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v99);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v61 + 112), (uint64_t)&v63);
  if ((_QWORD)v65)
  {
    *((_QWORD *)&v65 + 1) = v65;
    operator delete((void *)v65);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v64);

}

void sub_1B7D803C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3B0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x388]);
  v9 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x338]);
  v10 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x288]);
  v12 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x408]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(_QWORD *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 264));
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[464];
  uint64_t v18;
  _BYTE v19[464];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[400];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 632));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D808E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  v4 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = v14;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 184), *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 4);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 216);
  v16 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v15;
  v17 = (_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = v16;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  v18 = *(_QWORD **)(a2 + 256);
  if (v18 != (_QWORD *)(a2 + 264))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 264);
    while (1)
    {
      v21 = (_QWORD *)(a1 + 264);
      if (v20 == v17)
        goto LABEL_12;
      v22 = v19;
      v23 = (_QWORD *)(a1 + 264);
      if (v19)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v21;
        else
          v26 = (uint64_t **)(a1 + 264);
        if (v19)
          v27 = (uint64_t **)(v21 + 1);
        else
          v27 = (uint64_t **)(a1 + 264);
        if (!*v27)
        {
LABEL_28:
          v30 = (char *)operator new(0xB0uLL);
          *((_QWORD *)v30 + 4) = v18[4];
          *((_DWORD *)v30 + 10) = *((_DWORD *)v18 + 10);
          v31 = *((_OWORD *)v18 + 3);
          v32 = *((_OWORD *)v18 + 5);
          *((_OWORD *)v30 + 4) = *((_OWORD *)v18 + 4);
          *((_OWORD *)v30 + 5) = v32;
          *((_OWORD *)v30 + 3) = v31;
          v33 = v18[12];
          *((_QWORD *)v30 + 13) = 0;
          *((_QWORD *)v30 + 12) = v33;
          *((_QWORD *)v30 + 14) = 0;
          *((_QWORD *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((_QWORD *)v30 + 16) = v18[16];
          v34 = *(_OWORD *)(v18 + 17);
          v35 = *(_OWORD *)(v18 + 19);
          *((_QWORD *)v30 + 21) = v18[21];
          *(_OWORD *)(v30 + 152) = v35;
          *(_OWORD *)(v30 + 136) = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 264);
        v26 = (uint64_t **)(a1 + 264);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v25)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v25)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v36 = (_QWORD *)v18[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v18[2];
          v24 = *v37 == (_QWORD)v18;
          v18 = v37;
        }
        while (!v24);
      }
      if (v37 == (_QWORD *)(a2 + 264))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 256);
      v18 = v37;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 320), *(const void **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1B7D80CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 328) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 192) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 184, (__n128 *)(a2 + 184));
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 232);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  v14 = a1 + 264;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 264));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(a2 + 256) = a2 + 264;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  id *v2;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  __n128 v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  __n128 v33;
  id v34;
  id v35;
  uint64_t **i;
  uint64_t *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  __n128 v54;
  id v55;
  uint64_t **j;
  uint64_t *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  void *v70;
  int v71;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  _BYTE v78[16];
  uint64_t **v79;
  void *__p;
  void *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _BYTE v88[24];
  _BYTE *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v73 = (void *)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v76 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v73, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 320);
      v16 = *(uint64_t **)(a2 + 328);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained(v2);
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v2 = (id *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v2);

    }
  }

  v82[0] = &off_1E6D08B10;
  v83 = v82;
  v74 = v12;
  v20 = (uint64_t)v83;
  if (!v83)
    goto LABEL_22;
  if (v83 != v82)
  {
    v20 = (*(uint64_t (**)(void))(*v83 + 16))();
LABEL_22:
    v87 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v87 = v86;
  (*(void (**)(uint64_t, _QWORD *))(v82[0] + 24))((uint64_t)v82, v86);
LABEL_24:
  v89 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D089F0;
  v22 = v21 + 1;
  v23 = (uint64_t)v87;
  if (!v87)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v87 != v86)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v87 + 16))(v87, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v86[0] + 24))(v86);
LABEL_29:
  v89 = v21;
  v75 = v74;
  v24 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v78, v76);
  if (!v89)
    std::__throw_bad_function_call[abi:ne180100]();
  v27 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v89 + 48))(v89, v78, v26);
  v28 = *(double **)(v27 + 8);
  v29 = 0.0;
  while (v28 != *(double **)(v27 + 16))
  {
    v31 = *v28;
    v30 = v28[1];
    v28 += 2;
    v29 = v29 + v30 - v31;
  }
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v29 + *(double *)(v27 + 32));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "setDuration:", v32);

  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }

  v33 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v78, v76);
  if (!v89)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v75, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v89 + 48))(v89, v78, v33));
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v34 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v35 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v78, v76);
    for (i = v79; i; i = (uint64_t **)*i)
    {
      v37 = i[2];
      v38 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v89)
        std::__throw_bad_function_call[abi:ne180100]();
      v40 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v89 + 48))(v89, (uint64_t *)i + 3);
      v41 = *(double **)(v40 + 8);
      v42 = 0.0;
      while (v41 != *(double **)(v40 + 16))
      {
        v44 = *v41;
        v43 = v41[1];
        v41 += 2;
        v42 = v42 + v43 - v44;
      }
      objc_msgSend(v38, "quantityWithUnit:doubleValue:", v39, v42 + *(double *)(v40 + 32));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setObject:forKeyedSubscript:", v45, v37);

      if (!v89)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v89 + 48))(v89, (uint64_t *)i + 3));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v2, v37);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v78);
    objc_msgSend(v75, "setDurationBySource:", v34);
    objc_msgSend(v75, "setDataCountBySource:", v35);

  }
  v46 = v89;
  if (v89 == v88)
  {
    v47 = 4;
    v46 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_52;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_52:
  v48 = v87;
  if (v87 == v86)
  {
    v49 = 4;
    v48 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_57;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_57:
  v50 = (uint64_t)v83;
  if (!v83)
  {
LABEL_60:
    v85 = (_QWORD *)v50;
    goto LABEL_62;
  }
  if (v83 != v82)
  {
    v50 = (*(uint64_t (**)(void))(*v83 + 16))();
    goto LABEL_60;
  }
  v85 = v84;
  (*(void (**)(uint64_t, _QWORD *))(v82[0] + 24))((uint64_t)v82, v84);
LABEL_62:
  v89 = 0;
  v51 = operator new(0x28uLL);
  *v51 = &off_1E6D08A80;
  v52 = (uint64_t)v85;
  if (!v85)
  {
LABEL_65:
    v51[4] = v52;
    goto LABEL_67;
  }
  if (v85 != v84)
  {
    v52 = (*(uint64_t (**)(void))(*v85 + 16))();
    goto LABEL_65;
  }
  v51[4] = v51 + 1;
  (*(void (**)(_QWORD *))(v84[0] + 24))(v84);
LABEL_67:
  v89 = v51;
  v53 = v75;
  v54 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v78, v76);
  if (!v89)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v53, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v89 + 48))(v89, v78, v54));
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v55 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v78, v76);
    for (j = v79; j; j = (uint64_t **)*j)
    {
      v57 = j[2];
      if (!v89)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v89 + 48))(v89, (uint64_t *)j + 3));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "setObject:forKeyedSubscript:", v58, v57);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v78);
    objc_msgSend(v53, "setDataCountBySource:", v55);

  }
  v59 = v89;
  if (v89 == v88)
  {
    v60 = 4;
    v59 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_80;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_80:
  v61 = v85;
  if (v85 == v84)
  {
    v62 = 4;
    v61 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_85;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_85:

  v63 = v83;
  if (v83 == v82)
  {
    v64 = 4;
    v63 = v82;
    goto LABEL_89;
  }
  if (v83)
  {
    v64 = 5;
LABEL_89:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "averageQuantity");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  if (v66)
  {
    objc_msgSend(v53, "averageQuantity");
    a1 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)a1, "isCompatibleWithUnit:", v65) & 1) == 0)
    {

LABEL_104:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v65);
      goto LABEL_105;
    }
  }
  objc_msgSend(v53, "minimumQuantity");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (v67)
  {
    objc_msgSend(v53, "minimumQuantity");
    v2 = (id *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "isCompatibleWithUnit:", v65))
    {
      v68 = 1;
      goto LABEL_98;
    }
  }
  objc_msgSend(v53, "maximumQuantity");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (v69)
  {
    objc_msgSend(v53, "maximumQuantity");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend(v70, "isCompatibleWithUnit:", v65);

    v68 = v71 ^ 1;
    if (v67)
      goto LABEL_98;
  }
  else
  {
    v68 = 0;
    if (v67)
    {
LABEL_98:

      if (v66)
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  if (v66)
  {
LABEL_99:

    if ((v68 & 1) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_103:

  if (v68)
    goto LABEL_104;
LABEL_105:

  return v53;
}

void sub_1B7D8188C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  if (v40)
  if (v39)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 304);
  v2 = *(_QWORD *)(a1 + 320);
  if (v1 != (*(_QWORD *)(a1 + 328) - v2) >> 3)
  {
    v4 = (void **)(a1 + 320);
    *(_QWORD *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    v5 = *(_QWORD **)(a1 + 296);
    if (v5)
    {
      v6 = *(char **)(a1 + 328);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 320);
            v6 = *(char **)(a1 + 328);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 320) = v16;
          *(_QWORD *)(a1 + 328) = v9;
          *(_QWORD *)(a1 + 336) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 328) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D81D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t v50;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t var3;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v109;
  char *v110;
  double v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  double **v115;
  id *location;
  void *v117;
  id v118;
  uint64_t *v119;
  int64_t v120;
  double **v121;
  char v122;
  BOOL v123;
  int64_t v124;
  void **v125;
  uint64_t v126;
  HDRawQuantitySample v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (void **)(a1 + 96);
    v121 = (double **)(a1 + 64);
    v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v115 = (double **)(a1 + 184);
    v114 = (_QWORD *)(a1 + 264);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>]");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v111 = *(double *)(a1 + 56);
      }
      v5 = v111;
      if (v111 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      v117 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 208);
        v96 = *(_QWORD **)(a1 + 256);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 13, v28)
                                  + *((double *)v96 + 16);
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_125;
      }
      v120 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(_QWORD *)&v127.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v127.var1;
        v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          v50 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v127.var4)
            goto LABEL_59;
LABEL_54:
          v123 = var5;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v122 = *(_BYTE *)(v45 + 40);
          if (!v127.var4)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            var3 = v127.var3;
            if (v120 == v127.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
            v56 = 1;
            var3 = v127.var3;
            v120 = v127.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v118, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (var4)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v125;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v125) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v124;
                *(_BYTE *)(v92 + 32) = var4;
                *(_BYTE *)(v92 + 33) = v123;
                *(_BYTE *)(v92 + 40) = v122;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v125;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.var4 = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * v127.var0;
        v50 = v127.var3;
        var5 = v127.var5;
        v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        v53 = v28;
        var4 = v127.var4;
        if (v127.var4)
          goto LABEL_54;
LABEL_59:
        v59 = *(_OWORD **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *(_OWORD *)v45;
          v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v125) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v125) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (_OWORD *)(v67 + 48 * v64);
        v73 = *(_OWORD *)v45;
        v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v125;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.var3 = v12;
        v127.var4 = v16;
        v127.var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&v129 = v11;
        *((_QWORD *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v104 = v103 != 0;
        v105 = v102 != 0;
        v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v119, &v127, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(v108, &v127, v102 == 0);
          }
          v104 = 1;
          v105 = 1;
          v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          v109 = v129;
          v110 = (char *)*v125;
          *(_OWORD *)v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((_QWORD *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7D826BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  HDRawQuantitySample *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;
  _QWORD *v10;
  void *v11;
  _OWORD *v12;
  int v13;
  __int128 v14;

  v4 = a2;
  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v9 = 1;
        goto LABEL_17;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        ++result[1];
        v7 = result + 7;
        v8 = 1;
        return HDStatisticsTimeInterval::addSample(v7, a2, v8);
      }
      v9 = 2;
LABEL_17:
      *(_OWORD *)(result + 1) = 0u;
      v10 = result + 1;
      result[7] = 0;
      *(_DWORD *)result = v9;
      v12 = result + 8;
      v11 = (void *)result[8];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      if (v11)
      {
        v5[9] = (uint64_t)v11;
        operator delete(v11);
        v13 = *((unsigned __int8 *)v5 + 48);
        *v12 = 0u;
        *((_OWORD *)v5 + 5) = 0u;
        if (v13 && *((double *)v5 + 3) > *((double *)v5 + 13))
        {
LABEL_23:
          if (a3)
            ++*v10;
          v7 = v5 + 7;
LABEL_26:
          a2 = v4;
          v8 = a3;
          return HDStatisticsTimeInterval::addSample(v7, a2, v8);
        }
      }
      else
      {
        *v12 = 0uLL;
        *((_OWORD *)v5 + 5) = 0uLL;
      }
      v14 = *((_OWORD *)v5 + 7);
      *((_OWORD *)v5 + 1) = *((_OWORD *)v5 + 6);
      *((_OWORD *)v5 + 2) = v14;
      *((_WORD *)v5 + 24) = *((_WORD *)v5 + 64);
      goto LABEL_23;
    }
  }
  else if (!*(_DWORD *)result && !result[1])
  {
    if (a3)
      result[1] = 1;
    v7 = result + 7;
    goto LABEL_26;
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 384);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D82970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 424);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D82A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 320);
      v11 = *(char **)(*(_QWORD *)a3 + 328);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 328);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 320);
      v24 = *(char **)(*(_QWORD *)a3 + 328);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 320);
            v31 = *(char **)(*(_QWORD *)a3 + 328);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 176);
  v5 = *(const void **)(a2 + 184);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), v5, v7, (v7 - (uint64_t)v5) >> 4);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 208);
  result = *(__n128 *)(a2 + 216);
  v9 = *(_OWORD *)(a2 + 232);
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 248);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v49;
  unint64_t v50;
  _QWORD v51[2];
  char v52;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 256);
  v47 = (_QWORD *)(a2 + 264);
  if (v3 == (_QWORD *)(a2 + 264))
    return;
  v49 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v50 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xA0uLL);
      v51[0] = v19;
      v51[1] = v49;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((_QWORD *)v19 + 19) = 0;
      v52 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v51[0];
        if (v37)
        {
          *(_QWORD *)v51[0] = *v37;
        }
        else
        {
          *(_QWORD *)v51[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v49;
          if (!*v12)
          {
LABEL_76:
            v51[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v49;
            if (*v49)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v49;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v46 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v46)
            operator delete(v46);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v50 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    v39 = *((_OWORD *)v3 + 3);
    v40 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v12 + 3) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 2) = v39;
    v12[10] = v3[12];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    v12[14] = v3[16];
    v41 = *(_OWORD *)(v3 + 17);
    v42 = *(_OWORD *)(v3 + 19);
    *((_WORD *)v12 + 76) = *((_WORD *)v3 + 84);
    *(_OWORD *)(v12 + 17) = v42;
    *(_OWORD *)(v12 + 15) = v41;

LABEL_80:
    v43 = (_QWORD *)v3[1];
    if (v43)
    {
      do
      {
        v44 = v43;
        v43 = (_QWORD *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (_QWORD *)v3[2];
        v45 = *v44 == (_QWORD)v3;
        v3 = v44;
      }
      while (!v45);
    }
    v3 = v44;
  }
  while (v44 != v47);
}

void sub_1B7D84618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D089F0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D089F0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D089F0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D8476C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D089F0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 48;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D08A80;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D08A80;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D08A80;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D8499C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08A80;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08B10;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08B10;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D84C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 616))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 592);
      v7 = *(_QWORD *)(a1 + 584);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D84EE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  unint64_t v68;
  char v69;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        v25 = v16;
        v68 = v14;
        v24 = v18 - v18 * (v20 / v21);
        v23 = v13;
        v69 = v15;
        v16 = *(double *)(a1 + 16);
        v18 = v18 * (v20 / v21);
        if (!v13)
          goto LABEL_25;
        goto LABEL_11;
      }
LABEL_10:
      v68 = 0;
      v23 = 0;
      v69 = 0;
      v24 = 0.0;
      v19 = 0.0;
      v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      v66 = v17;
      v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v14, v14);
      v26 = *(_QWORD *)(a1 + 112);
      if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        v28 = v66;
        v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        v28 = v66;
        v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          v29 = *(double *)(a1 + 8);
          if (v66 >= v29)
            v29 = v66;
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          v30 = *(double *)(a1 + 16);
          if (v30 >= v67)
            v30 = v67;
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v34 = *(double *)(a1 + 64);
        if (v28 < v34)
          v34 = v28;
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
        v28 = v66;
        v27 = v67;
        v26 = *(_QWORD *)(a1 + 112);
      }
      v35 = *(_QWORD *)(a1 + 120);
      if (v26 >= v35)
      {
        v37 = *(_QWORD *)(a1 + 104);
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x2AAAAAAAAAAAAAALL)
          v41 = 0x555555555555555;
        else
          v41 = v39;
        if (v41)
        {
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          v28 = v66;
          v27 = v67;
        }
        else
        {
          v42 = 0;
        }
        v43 = v41 + 48 * v38;
        v44 = v41 + 48 * v42;
        *(double *)v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(_QWORD *)(v43 + 24) = v14;
        *(_BYTE *)(v43 + 32) = v13;
        *(_BYTE *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(_BYTE *)(v43 + 42) = 0;
        v36 = v43 + 48;
        v46 = *(char **)(a1 + 104);
        v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          v15 = v69;
        }
        else
        {
          v15 = v69;
          do
          {
            v47 = *((_OWORD *)v45 - 3);
            v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v43;
        *(_QWORD *)(a1 + 112) = v36;
        *(_QWORD *)(a1 + 120) = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(double *)v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(_QWORD *)(v26 + 24) = v14;
        *(_BYTE *)(v26 + 32) = v13;
        *(_BYTE *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        v36 = v26 + 48;
        *(_BYTE *)(v26 + 42) = 0;
        v15 = v69;
      }
      *(_QWORD *)(a1 + 112) = v36;
      if (!*(_BYTE *)(a1 + 256) || *(double *)(a1 + 232) <= v7)
      {
        *(double *)(a1 + 224) = v6;
        *(double *)(a1 + 232) = v7;
        *(double *)(a1 + 240) = v8;
        *(_QWORD *)(a1 + 248) = v9;
        *(_BYTE *)(a1 + 256) = v10;
        *(_BYTE *)(a1 + 257) = v11;
        if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
        {
          *(double *)(a1 + 144) = v6;
          *(double *)(a1 + 152) = v7;
          *(double *)(a1 + 160) = v8;
          *(_QWORD *)(a1 + 168) = v9;
          *(_BYTE *)(a1 + 176) = v10;
          *(_BYTE *)(a1 + 177) = v11;
        }
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
        v50 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(v5, v49);
        if (!*((_BYTE *)v50 + 128) || *((double *)v50 + 13) <= v7)
        {
          *((double *)v50 + 12) = v6;
          *((double *)v50 + 13) = v7;
          *((double *)v50 + 14) = v8;
          v50[15] = v9;
          *((_BYTE *)v50 + 128) = v10;
          *((_BYTE *)v50 + 129) = v11;
          if (!*((_BYTE *)v50 + 48) || *((double *)v50 + 3) <= v7)
          {
            *((double *)v50 + 2) = v6;
            *((double *)v50 + 3) = v7;
            *((double *)v50 + 4) = v8;
            v50[5] = v9;
            *((_BYTE *)v50 + 48) = v10;
            *((_BYTE *)v50 + 49) = v11;
          }
        }
      }
LABEL_63:
      v14 = v68;
      if (!v23)
        return;
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
  }
  LOBYTE(v23) = v13;
  v25 = v16;
  v19 = v17;
  v24 = v18;
  if (!v13)
    return;
LABEL_64:
  v51 = *(_QWORD *)(a1 + 480);
  v52 = *(_QWORD *)(a1 + 488);
  if (v51 >= v52)
  {
    v54 = *(_QWORD *)(a1 + 472);
    v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x333333333333333)
      v58 = 0x666666666666666;
    else
      v58 = v56;
    if (v58)
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    else
      v59 = 0;
    v60 = v58 + 40 * v55;
    v61 = v58 + 40 * v59;
    *(double *)v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(_QWORD *)(v60 + 24) = v14;
    *(_BYTE *)(v60 + 32) = v23;
    *(_BYTE *)(v60 + 33) = v15;
    v53 = v60 + 40;
    v63 = *(char **)(a1 + 472);
    v62 = *(char **)(a1 + 480);
    if (v62 != v63)
    {
      do
      {
        v64 = *(_OWORD *)(v62 - 40);
        v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      v62 = *(char **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v60;
    *(_QWORD *)(a1 + 480) = v53;
    *(_QWORD *)(a1 + 488) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(double *)v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(_QWORD *)(v51 + 24) = v14;
    *(_BYTE *)(v51 + 32) = v23;
    v53 = v51 + 40;
    *(_BYTE *)(v51 + 33) = v15;
  }
  *(_QWORD *)(a1 + 480) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 618))
  {
    *(_BYTE *)(a1 + 620) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 620) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D85528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(_QWORD *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D85610(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _BYTE v18[52];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  v10 = *(void **)(a1 + 192);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_QWORD *)(a1 + 184) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 200) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 208) = v9;
  if (*(_QWORD *)(a1 + 280))
  {
    v11 = *(_QWORD **)(a1 + 264);
    v12 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 264) = a1 + 272;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 496));
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 620))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 620) = 0;
  }

}

void sub_1B7D85828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D858AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 632));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 616) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D85C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4064CA91B5);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D85DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D86028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 616))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D86CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D86D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(a2[6], a2[6], 8uLL);
  v6[1] = a2[7].i64[0];
  v6[2] = a2[7].i64[1];
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D86E9C(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsPresence::archive((HDStatisticsPresence *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 48), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7D86F64(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  double v15;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)v11, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD *)(v6 + 128));
    v7 = v11[1];
    *v5 = v11[0];
    v5[1] = v7;
    v5[2] = v11[2];
    *(_QWORD *)(a1 + 56) = v12;
    result = v15;
    v8 = v14;
    *(_OWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 80) = v8;
    *(double *)(a1 + 88) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v9 = a2[14];
  if (v9)
  {
    result = *(double *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(double *)(a1 + 112) = result;
    *(_QWORD *)(a1 + 120) = v10;
    *(_WORD *)(a1 + 128) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = 0uLL;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 112);
    if (v5)
    {
      v4 = *(int8x16_t *)(v5 + 24);
      v6 = *(_QWORD *)(v5 + 8);
      v7 = 1;
      v5 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    *(_QWORD *)a1 = *(_QWORD *)(a3 + 24);
    v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 41) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v10);
    *(_QWORD *)(a1 + 48) = v10;
    v4.i64[0] = v13;
    v8 = v12;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = v8;
    *(_QWORD *)(a1 + 80) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08BC0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_WORD *)(a1 + 568) = 1;
  *(_BYTE *)(a1 + 570) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_QWORD *)(a1 + 576) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08BC0;
  v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(_QWORD *)(a1 + 608) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(_QWORD *)(a1 + 544) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 568) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D87268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 576) = v4;
    v3 = v5;
  }

}

void sub_1B7D872C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 73, a2);
  v7 = a2;
  v4 = a1[73];
  v5 = a1[70];
  a1[70] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[70]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D8745C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[52];

  if (*(_BYTE *)(a1 + 568))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D87504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 570))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 569))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 571))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 608);
    v18 = *(_QWORD *)(a1 + 616);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 600);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 608);
      v33 = *(char **)(a1 + 600);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 600);
      }
      *(_QWORD *)(a1 + 600) = v28;
      *(_QWORD *)(a1 + 608) = v21;
      *(_QWORD *)(a1 + 616) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 608) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D87758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 570))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 570) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 569))
    goto LABEL_5;
  v9 = *(void **)(a1 + 592);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_411);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 592);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;

  *(_BYTE *)(a1 + 569) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 600) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 600);
      v37 = *(__int128 **)(a1 + 608);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 608);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 608) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 600);
  v39 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536));
  }
  *(_BYTE *)(a1 + 570) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 572))
    {
      *(_BYTE *)(a1 + 572) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 570) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D87E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 570) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 571) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 570))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 570))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 592);
    *(_QWORD *)(a1 + 592) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 569) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 569))
  {
    v8 = *(void **)(a1 + 592);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v9;

      v8 = *(void **)(a1 + 592);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D8814C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 568) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 568) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D8826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 568) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 568), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 328);
  if (v9 != (_QWORD *)(a1 + 336))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 336));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 536);
  for (k = *(int8x16_t **)(a1 + 544); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D88604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t j;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  _BYTE v63[416];
  __int128 v64;
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  __int128 __p;
  _BYTE v75[88];
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v58 = a2;
  *(_BYTE *)(a1 + 568) = objc_msgSend(v58, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v58;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v63, 0, -1.79769313e308, 1.79769313e308);
  v64 = 0u;
  v65 = 0u;
  v102 = 0;
  v61 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v61, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v60 = a1;
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v62 = v96;
  if (v95)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[56], 0, 32);
    v79 = 0;
    v78 = 0;
    __p = 0u;
    memset(v75, 0, 50);
    v76 = 0;
    v77 = &v78;
    v80 = 0u;
    v81 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v67 = *(_QWORD *)(v95 + 64);
    v68 = *(_BYTE *)(v95 + 185);
    v69 = *(_BYTE *)(v95 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v72 = v4;
    v6 = *(_QWORD *)(v95 + 80);
    v5 = *(_QWORD *)(v95 + 88);
    v59 = (_QWORD *)v95;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v75)
        {
          v14 = (_QWORD *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v75 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (_QWORD *)*((_QWORD *)&__p + 1);
            v14 = (_QWORD *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            v14 = (_QWORD *)__p;
          }
          v7 = (_QWORD *)(v19 + 48);
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)v75 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((_BYTE *)v7 + 40) = 0;
          *((_BYTE *)v7 + 41) = v12;
          *((_BYTE *)v7 + 42) = v13;
          v7 += 6;
        }
        *((_QWORD *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v59[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD *)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(_QWORD *)&v75[56] = v106;
      if (*(_QWORD *)&v75[64])
      {
        *(_QWORD *)&v75[72] = *(_QWORD *)&v75[64];
        operator delete(*(void **)&v75[64]);
      }
      *(_OWORD *)&v75[64] = v107;
      *(_QWORD *)&v75[80] = v108;
      v108 = 0;
      v107 = 0uLL;
      v76 = v109;
    }
    v24 = (uint64_t *)v59[17];
    for (i = (uint64_t *)v59[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(_QWORD *)(*v24 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v78;
      v29 = &v78;
      v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x80uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((_QWORD *)v33 + 15) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      v34 = v105;
      v35 = (void *)*((_QWORD *)v33 + 12);
      v36 = v104;
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v34;
      *((_QWORD *)v33 + 11) = v106;
      if (v35)
      {
        *((_QWORD *)v33 + 13) = v35;
        operator delete(v35);
        *((_QWORD *)v33 + 12) = 0;
        *((_QWORD *)v33 + 13) = 0;
        *((_QWORD *)v33 + 14) = 0;
      }
      *((_OWORD *)v33 + 6) = v107;
      *((_QWORD *)v33 + 14) = v108;
      v108 = 0;
      v107 = 0uLL;
      *((_QWORD *)v33 + 15) = v109;
    }
    v37 = v59[5];
    for (j = v59[6]; v37 != j; v37 += 8)
    {
      v40 = *(double *)(*(_QWORD *)v37 + 8);
      v39 = *(double *)(*(_QWORD *)v37 + 16);
      if (v40 >= v39)
        v41 = *(double *)(*(_QWORD *)v37 + 16);
      else
        v41 = *(double *)(*(_QWORD *)v37 + 8);
      if (v39 < v40)
        v39 = *(double *)(*(_QWORD *)v37 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v41, v39);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((uint64_t)v63, (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v42 = v97;
  v43 = v98;
  if (v97 != v98)
  {
    v44 = *((_QWORD *)&v64 + 1);
    do
    {
      v45 = *(_QWORD *)(*(_QWORD *)v42 + 24);
      v46 = *(_QWORD *)(*(_QWORD *)v42 + 32);
      v47 = *(_QWORD *)(*(_QWORD *)v42 + 8);
      v48 = *(_QWORD *)(*(_QWORD *)v42 + 16);
      if (v44 >= (unint64_t)v65)
      {
        v49 = (void *)v64;
        v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - v64) >> 3);
        v51 = v50 + 1;
        if (v50 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3) > v51)
          v51 = 0x999999999999999ALL * ((uint64_t)(v65 - v64) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - v64) >> 3) >= 0x333333333333333)
          v52 = 0x666666666666666;
        else
          v52 = v51;
        if (v52)
        {
          v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
          v44 = *((_QWORD *)&v64 + 1);
          v49 = (void *)v64;
        }
        else
        {
          v53 = 0;
        }
        v54 = v52 + 40 * v50;
        *(_QWORD *)v54 = v46;
        *(_QWORD *)(v54 + 8) = v45;
        *(_QWORD *)(v54 + 16) = v47;
        *(_QWORD *)(v54 + 24) = v48;
        *(_WORD *)(v54 + 32) = 1;
        v55 = v54;
        if ((void *)v44 != v49)
        {
          do
          {
            v56 = *(_OWORD *)(v44 - 40);
            v57 = *(_OWORD *)(v44 - 24);
            *(_WORD *)(v55 - 8) = *(_WORD *)(v44 - 8);
            *(_OWORD *)(v55 - 24) = v57;
            *(_OWORD *)(v55 - 40) = v56;
            v55 -= 40;
            v44 -= 40;
          }
          while ((void *)v44 != v49);
          v49 = (void *)v64;
        }
        v44 = v54 + 40;
        *(_QWORD *)&v64 = v55;
        *((_QWORD *)&v64 + 1) = v54 + 40;
        *(_QWORD *)&v65 = v52 + 40 * v53;
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_QWORD *)v44 = v46;
        *(_QWORD *)(v44 + 8) = v45;
        *(_QWORD *)(v44 + 16) = v47;
        *(_QWORD *)(v44 + 24) = v48;
        *(_WORD *)(v44 + 32) = 1;
        v44 += 40;
      }
      *((_QWORD *)&v64 + 1) = v44;
      v42 += 8;
    }
    while (v42 != v43);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v60 + 112), (uint64_t)&v62);
  if ((_QWORD)v64)
  {
    *((_QWORD *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v63);

}

void sub_1B7D88D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x350]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x328]);
  v9 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E8]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x2D8]);
  v10 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3A8]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_WORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 376);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 336);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 232);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 216));
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[12];
    if (v2)
    {
      a1[13] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[416];
  uint64_t v18;
  _BYTE v19[416];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[352];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 584));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 568) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D892C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 53), (__n128 *)(a2 + 424));
  v4 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  v5 = (void *)a1[56];
  a1[56] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 4);
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  v16 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 200) = v15;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  v17 = *(_QWORD **)(a2 + 208);
  if (v17 != (_QWORD *)(a2 + 216))
  {
    v18 = 0;
    v19 = (_QWORD *)(a1 + 216);
    while (1)
    {
      v20 = (_QWORD *)(a1 + 216);
      if (v19 == v16)
        goto LABEL_12;
      v21 = v18;
      v22 = (_QWORD *)(a1 + 216);
      if (v18)
      {
        do
        {
          v20 = v21;
          v21 = (_QWORD *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v22[2];
          v23 = *v20 == (_QWORD)v22;
          v22 = v20;
        }
        while (v23);
      }
      v24 = v17[4];
      if (v20[4] < v24)
      {
LABEL_12:
        if (v18)
          v25 = (uint64_t **)v20;
        else
          v25 = (uint64_t **)(a1 + 216);
        if (v18)
          v26 = (uint64_t **)(v20 + 1);
        else
          v26 = (uint64_t **)(a1 + 216);
        if (!*v26)
        {
LABEL_28:
          v29 = (char *)operator new(0x80uLL);
          *((_QWORD *)v29 + 4) = v17[4];
          v30 = *(_OWORD *)(v17 + 5);
          v31 = *(_OWORD *)(v17 + 7);
          *(_OWORD *)(v29 + 72) = *(_OWORD *)(v17 + 9);
          *(_OWORD *)(v29 + 56) = v31;
          *(_OWORD *)(v29 + 40) = v30;
          v32 = v17[11];
          *((_QWORD *)v29 + 12) = 0;
          *((_QWORD *)v29 + 11) = v32;
          *((_QWORD *)v29 + 13) = 0;
          *((_QWORD *)v29 + 14) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v29 + 12, (const void *)v17[12], v17[13], (uint64_t)(v17[13] - v17[12]) >> 4);
          *((_QWORD *)v29 + 15) = v17[15];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 208), (uint64_t)v25, v26, (uint64_t *)v29);
        }
      }
      else
      {
        v26 = (uint64_t **)(a1 + 216);
        v25 = (uint64_t **)(a1 + 216);
        if (!v18)
          goto LABEL_28;
        v27 = v18;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v27;
            v28 = v27[4];
            if (v28 <= v24)
              break;
            v27 = *v25;
            v26 = v25;
            if (!*v25)
              goto LABEL_28;
          }
          if (v28 >= v24)
            break;
          v27 = v25[1];
          if (!v27)
          {
            v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      v33 = (_QWORD *)v17[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v17[2];
          v23 = *v34 == (_QWORD)v17;
          v17 = v34;
        }
        while (!v23);
      }
      if (v34 == (_QWORD *)(a2 + 216))
        break;
      v18 = (_QWORD *)*v16;
      v19 = *(_QWORD **)(a1 + 208);
      v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 232, a2 + 232);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 376, a2 + 376);
  return a1;
}

void sub_1B7D896A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 280) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 184) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v10 = *(_OWORD *)(a2 + 120);
  v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 176, (__n128 *)(a2 + 176));
  v13 = a1 + 216;
  v12 = *(_QWORD **)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v12);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v14 = (_QWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v15;
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(a2 + 208) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 224) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 232, (uint64_t *)(a2 + 232));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  __int128 v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  __int128 v35;
  const void *v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t **i;
  uint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  __int128 v59;
  const void *v60;
  uint64_t v61;
  id v62;
  uint64_t **j;
  uint64_t *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *v73;
  id v74;
  id v75;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  void *__p;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[3];
  _QWORD *v88;
  _QWORD v89[3];
  _QWORD *v90;
  _BYTE v91[24];
  _BYTE *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v73 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v73, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 272);
      v15 = *(uint64_t **)(a2 + 280);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v85[0] = &off_1E6D08DB0;
  v86 = v85;
  v74 = v11;
  v20 = (uint64_t)v86;
  if (!v86)
    goto LABEL_22;
  if (v86 != v85)
  {
    v20 = (*(uint64_t (**)(void))(*v86 + 16))();
LABEL_22:
    v90 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v90 = v89;
  (*(void (**)(uint64_t, _QWORD *))(v85[0] + 24))((uint64_t)v85, v89);
LABEL_24:
  v92 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D08C90;
  v22 = v21 + 1;
  v23 = (uint64_t)v90;
  if (!v90)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v90 != v89)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v90 + 16))(v90, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v89[0] + 24))(v89);
LABEL_29:
  v92 = v21;
  v75 = v74;
  v24 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = *(_OWORD *)(a2 + 136);
  v77 = *(_OWORD *)(a2 + 120);
  v78 = v26;
  v79 = *(_OWORD *)(a2 + 152);
  v27 = *(const void **)(a2 + 176);
  v80 = *(_QWORD *)(a2 + 168);
  __p = 0;
  v28 = *(_QWORD *)(a2 + 184);
  v82 = 0;
  v83 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v27, v28, (v28 - (uint64_t)v27) >> 4);
  v84 = *(_QWORD *)(a2 + 200);
  if (!v92)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v92 + 48))(v92, &v77);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "setDuration:", v34);

  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }

  v35 = *(_OWORD *)(a2 + 136);
  v77 = *(_OWORD *)(a2 + 120);
  v78 = v35;
  v79 = *(_OWORD *)(a2 + 152);
  v36 = *(const void **)(a2 + 176);
  v80 = *(_QWORD *)(a2 + 168);
  __p = 0;
  v37 = *(_QWORD *)(a2 + 184);
  v82 = 0;
  v83 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v36, v37, (v37 - (uint64_t)v36) >> 4);
  v84 = *(_QWORD *)(a2 + 200);
  if (!v92)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v75, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v92 + 48))(v92, &v77));
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v38 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v39 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v77, a2);
    for (i = (uint64_t **)v78; i; i = (uint64_t **)*i)
    {
      v41 = i[2];
      v42 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v92)
        std::__throw_bad_function_call[abi:ne180100]();
      v44 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v92 + 48))(v92, (uint64_t *)i + 3);
      v45 = *(double **)(v44 + 8);
      v46 = 0.0;
      while (v45 != *(double **)(v44 + 16))
      {
        v48 = *v45;
        v47 = v45[1];
        v45 += 2;
        v46 = v46 + v47 - v48;
      }
      objc_msgSend(v42, "quantityWithUnit:doubleValue:", v43, v46 + *(double *)(v44 + 32));
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "setObject:forKeyedSubscript:", v49, v41);

      if (!v92)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v92 + 48))(v92, (uint64_t *)i + 3));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setObject:forKeyedSubscript:", v50, v41);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v77);
    objc_msgSend(v75, "setDurationBySource:", v38);
    objc_msgSend(v75, "setDataCountBySource:", v39);

  }
  v51 = v92;
  if (v92 == v91)
  {
    v52 = 4;
    v51 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_52;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_52:
  v53 = v90;
  if (v90 == v89)
  {
    v54 = 4;
    v53 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_57;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_57:
  v55 = (uint64_t)v86;
  if (!v86)
  {
LABEL_60:
    v88 = (_QWORD *)v55;
    goto LABEL_62;
  }
  if (v86 != v85)
  {
    v55 = (*(uint64_t (**)(void))(*v86 + 16))();
    goto LABEL_60;
  }
  v88 = v87;
  (*(void (**)(uint64_t, _QWORD *))(v85[0] + 24))((uint64_t)v85, v87);
LABEL_62:
  v92 = 0;
  v56 = operator new(0x28uLL);
  *v56 = &off_1E6D08D20;
  v57 = (uint64_t)v88;
  if (!v88)
  {
LABEL_65:
    v56[4] = v57;
    goto LABEL_67;
  }
  if (v88 != v87)
  {
    v57 = (*(uint64_t (**)(void))(*v88 + 16))();
    goto LABEL_65;
  }
  v56[4] = v56 + 1;
  (*(void (**)(_QWORD *))(v87[0] + 24))(v87);
LABEL_67:
  v92 = v56;
  v58 = v75;
  v59 = *(_OWORD *)(a2 + 136);
  v77 = *(_OWORD *)(a2 + 120);
  v78 = v59;
  v79 = *(_OWORD *)(a2 + 152);
  v60 = *(const void **)(a2 + 176);
  v80 = *(_QWORD *)(a2 + 168);
  __p = 0;
  v61 = *(_QWORD *)(a2 + 184);
  v82 = 0;
  v83 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v60, v61, (v61 - (uint64_t)v60) >> 4);
  v84 = *(_QWORD *)(a2 + 200);
  if (!v92)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v58, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v92 + 48))(v92, &v77));
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v62 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v77, a2);
    for (j = (uint64_t **)v78; j; j = (uint64_t **)*j)
    {
      v64 = j[2];
      if (!v92)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v92 + 48))(v92, (uint64_t *)j + 3));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v65, v64);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v77);
    objc_msgSend(v58, "setDataCountBySource:", v62);

  }
  v66 = v92;
  if (v92 == v91)
  {
    v67 = 4;
    v66 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_80;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_80:
  v68 = v88;
  if (v88 == v87)
  {
    v69 = 4;
    v68 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_85;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_85:

  v70 = v86;
  if (v86 == v85)
  {
    v71 = 4;
    v70 = v85;
    goto LABEL_89;
  }
  if (v86)
  {
    v71 = 5;
LABEL_89:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  return v58;
}

void sub_1B7D8A178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 256);
  v2 = *(_QWORD *)(a1 + 272);
  if (v1 != (*(_QWORD *)(a1 + 280) - v2) >> 3)
  {
    v4 = (void **)(a1 + 272);
    *(_QWORD *)(a1 + 280) = v2;
    std::vector<long long>::reserve((void **)(a1 + 272), v1);
    v5 = *(_QWORD **)(a1 + 248);
    if (v5)
    {
      v6 = *(char **)(a1 + 280);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 288);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 272);
            v6 = *(char **)(a1 + 280);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 272) = v16;
          *(_QWORD *)(a1 + 280) = v9;
          *(_QWORD *)(a1 + 288) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 280) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D8A590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t var3;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t **v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  void *v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  BOOL v100;
  double v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  uint64_t **v109;
  __int128 v110;
  char *v111;
  double v112;
  void *v113;
  void *v114;
  _QWORD *v115;
  double **v116;
  id *location;
  void *v118;
  id v119;
  uint64_t *v120;
  int64_t v121;
  double **v122;
  char v123;
  BOOL v124;
  int64_t v125;
  _QWORD *v126;
  uint64_t v127;
  HDRawQuantitySample v128;
  __int128 v129;
  __int128 v130;
  __int16 v131;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v126 = (_QWORD *)(a1 + 96);
    v122 = (double **)(a1 + 64);
    v120 = (uint64_t *)(a1 + 168);
    location = (id *)(a1 + 88);
    v116 = (double **)(a1 + 176);
    v115 = (_QWORD *)(a1 + 216);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_134:
      *(double *)(a1 + 56) = a2;
LABEL_135:
      v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsPresence, HDStatisticsTimeInterval>]");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "handleFailureInFunction:file:lineNumber:description:", v114, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v112 = *(double *)(a1 + 56);
      }
      v5 = v112;
      if (v112 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v126;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v128.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v119 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v119 = 0;
      v118 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_112:
        *(double *)(a1 + 200) = HKIntervalMask<double>::removeIntervalsBefore(v116, v28) + *(double *)(a1 + 200);
        v97 = *(_QWORD **)(a1 + 208);
        if (v97 != v115)
        {
          do
          {
            *((double *)v97 + 15) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 12, v28)
                                  + *((double *)v97 + 15);
            v98 = (_QWORD *)v97[1];
            if (v98)
            {
              do
              {
                v99 = v98;
                v98 = (_QWORD *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                v99 = (_QWORD *)v97[2];
                v100 = *v99 == (_QWORD)v97;
                v97 = v99;
              }
              while (!v100);
            }
            v97 = v99;
          }
          while (v99 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v118)
          operator delete(v118);
        goto LABEL_135;
      }
      v121 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v128.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v128.var2 = v46;
        *(_QWORD *)&v128.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v128.var1;
        v49 = *(double *)&v46 - v128.var1;
        if (v49 - (v28 - v128.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v128.var4 = 0;
            goto LABEL_61;
          }
          v55 = v48 / v49 * v128.var0;
          var3 = v128.var3;
          var5 = v128.var5;
          v54 = v128.var0 - v55;
          v128.var0 = v55;
          v128.var2 = v28;
          v53 = v28;
          var4 = v128.var4;
          if (v128.var4)
            goto LABEL_54;
LABEL_61:
          v59 = *(_OWORD **)(a1 + 104);
          v60 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            v61 = *(_OWORD *)v45;
            v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            *v59 = v61;
            v63 = v59 + 3;
            goto LABEL_110;
          }
          v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v126) >> 4);
          v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v126) >> 4);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x2AAAAAAAAAAAAAALL)
            v67 = 0x555555555555555;
          else
            v67 = v65;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          else
            v68 = 0;
          v74 = (_OWORD *)(v67 + 48 * v64);
          v75 = *(_OWORD *)v45;
          v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *v74 = v75;
          v78 = *(char **)(a1 + 96);
          v77 = *(char **)(a1 + 104);
          v79 = v74;
          if (v77 != v78)
          {
            do
            {
              v80 = *((_OWORD *)v77 - 3);
              v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            v77 = (char *)*v126;
          }
          v63 = v74 + 3;
          *(_QWORD *)(a1 + 96) = v79;
          *(_QWORD *)(a1 + 104) = v74 + 3;
          *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            v82 = v77;
            goto LABEL_109;
          }
LABEL_110:
          *(_QWORD *)(a1 + 104) = v63;
        }
        else
        {
          var3 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v128.var4)
            goto LABEL_61;
LABEL_54:
          v124 = var5;
          v125 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v123 = *(_BYTE *)(v45 + 40);
          if (v128.var4)
          {
            if ((v44 & 1) != 0)
            {
              v58 = v128.var3;
              if (v121 == v128.var3 || *(_BYTE *)(a1 + 24))
              {
                if (!*(_BYTE *)(v45 + 42))
                  ++*(_QWORD *)(a1 + 120);
                HDStatisticsTimeInterval::addSample(v120, &v128, v56 == 0);
                v56 = 1;
              }
            }
            else
            {
              if (!*(_BYTE *)(v45 + 42))
                ++*(_QWORD *)(a1 + 120);
              HDStatisticsTimeInterval::addSample(v120, &v128, v56 == 0);
              v56 = 1;
              v58 = v128.var3;
              v121 = v128.var3;
            }
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              if (v69)
              {
                objc_msgSend(v119, "objectForKeyedSubscript:", v69);
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                v71 = v70;
                if (v70)
                {
                  if (objc_msgSend(v70, "longLongValue") == v58 || *(_BYTE *)(a1 + 24))
                  {
                    v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    v73 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    goto LABEL_87;
                  }
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v119, "setObject:forKeyedSubscript:", v83, v69);

                  v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  v73 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
LABEL_87:
                  if (!v57)
                    *v73 = (uint64_t *)((char *)*v73 + 1);
                  HDStatisticsTimeInterval::addSample((uint64_t *)v73 + 6, &v128, v57 == 0);
                  LOBYTE(v57) = 1;
                }

              }
            }
            v44 = 1;
          }
          if (var4)
          {
            v85 = v56 != 0;
            v87 = *(char **)(a1 + 104);
            v86 = *(_QWORD *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)v87 = v54;
              *((double *)v87 + 1) = v53;
              *((_QWORD *)v87 + 2) = v47;
              *((_QWORD *)v87 + 3) = v125;
              v87[32] = var4;
              v87[33] = v124;
              v87[40] = v123;
              v87[41] = v57;
              v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_110;
            }
            v82 = (char *)*v126;
            v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v126] >> 4);
            v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (_QWORD)v82) >> 4);
            if (2 * v90 > v89)
              v89 = 2 * v90;
            if (v90 >= 0x2AAAAAAAAAAAAAALL)
              v91 = 0x555555555555555;
            else
              v91 = v89;
            if (v91)
            {
              v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              v82 = *(char **)(a1 + 96);
              v87 = *(char **)(a1 + 104);
            }
            else
            {
              v92 = 0;
            }
            v93 = v91 + 48 * v88;
            *(double *)v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(_QWORD *)(v93 + 16) = v47;
            *(_QWORD *)(v93 + 24) = v125;
            *(_BYTE *)(v93 + 32) = var4;
            *(_BYTE *)(v93 + 33) = v124;
            *(_BYTE *)(v93 + 40) = v123;
            *(_BYTE *)(v93 + 41) = v57;
            *(_BYTE *)(v93 + 42) = v85;
            v94 = v93;
            if (v87 != v82)
            {
              do
              {
                v95 = *((_OWORD *)v87 - 3);
                v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              v82 = (char *)*v126;
            }
            v63 = (_OWORD *)(v93 + 48);
            *(_QWORD *)(a1 + 96) = v94;
            *(_QWORD *)(a1 + 104) = v93 + 48;
            *(_QWORD *)(a1 + 112) = v91 + 48 * v92;
            if (v82)
LABEL_109:
              operator delete(v82);
            goto LABEL_110;
          }
        }
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_112;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_123:
        v102 = *(unsigned __int8 *)(v6 + 42);
        v103 = *(unsigned __int8 *)(v6 + 41);
        v104 = *(unsigned __int8 *)(v6 + 40);
        v128.var0 = v10;
        v128.var1 = v9;
        v128.var2 = v17;
        v128.var3 = v12;
        v128.var4 = v16;
        v128.var5 = v14;
        *(_DWORD *)(&v128.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v128.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&v130 = v11;
        *((_QWORD *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        v105 = v104 != 0;
        v106 = v103 != 0;
        v107 = v102 != 0;
        if (v128.var4)
        {
          if (!v102)
            ++*(_QWORD *)(a1 + 120);
          HDStatisticsTimeInterval::addSample(v120, &v128, v102 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v108 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v128.var3);
            v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v108);
            if (!v103)
              *v109 = (uint64_t *)((char *)*v109 + 1);
            HDStatisticsTimeInterval::addSample((uint64_t *)v109 + 6, &v128, v103 == 0);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v127) = v131;
          v110 = v130;
          v111 = (char *)*v126;
          *(_OWORD *)v111 = v129;
          *((_OWORD *)v111 + 1) = v110;
          *((_QWORD *)v111 + 4) = v127;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_134;
      }
      v101 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v101;
      v10 = v101;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1B7D8AF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 296), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 336);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D8B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 376);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D8B198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 272);
      v11 = *(char **)(*(_QWORD *)a3 + 280);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 280);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 272);
      v24 = *(char **)(*(_QWORD *)a3 + 280);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 280);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 272);
            v31 = *(char **)(*(_QWORD *)a3 + 280);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 280);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v47;
  unint64_t v48;
  _QWORD v49[2];
  char v50;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 208);
  v45 = (_QWORD *)(a2 + 216);
  if (v3 == (_QWORD *)(a2 + 216))
    return;
  v47 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v48 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x70uLL);
      v49[0] = v19;
      v49[1] = v47;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *((_QWORD *)v19 + 13) = 0;
      v50 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v49[0];
        if (v37)
        {
          *(_QWORD *)v49[0] = *v37;
        }
        else
        {
          *(_QWORD *)v49[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v47;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v49[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v47;
            if (*v47)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v47;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v44 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v44)
            operator delete(v44);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v48 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    v39 = *(_OWORD *)(v3 + 5);
    v40 = *(_OWORD *)(v3 + 7);
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v3 + 9);
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((_QWORD *)v12 + 9) = v3[11];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 80, (char *)v3[12], v3[13], (uint64_t)(v3[13] - v3[12]) >> 4);
    *((_QWORD *)v12 + 13) = v3[15];

LABEL_80:
    v41 = (_QWORD *)v3[1];
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = (_QWORD *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (_QWORD *)v3[2];
        v43 = *v42 == (_QWORD)v3;
        v3 = v42;
      }
      while (!v43);
    }
    v3 = v42;
  }
  while (v42 != v45);
}

void sub_1B7D8CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D08C90;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D08C90;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D08C90;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D8CEF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08C90;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 48;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D08D20;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D08D20;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D08D20;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D8D128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08D20;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsPresence,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsPresence const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08DB0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08DB0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 568))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D8D3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 544);
      v7 = *(_QWORD *)(a1 + 536);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D8D5F4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 240, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 168) || *(double *)(a1 + 144) <= v7)
  {
    *(double *)(a1 + 136) = v6;
    *(double *)(a1 + 144) = v7;
    *(double *)(a1 + 152) = v8;
    *(_QWORD *)(a1 + 160) = v9;
    *(_BYTE *)(a1 + 168) = v10;
    *(_BYTE *)(a1 + 169) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((_BYTE *)v51 + 40))|| *((double *)v51 + 2) <= v7))
  {
    *((double *)v51 + 1) = v6;
    *((double *)v51 + 2) = v7;
    *((double *)v51 + 3) = v8;
    v51[4] = v9;
    *((_BYTE *)v51 + 40) = v10;
    *((_BYTE *)v51 + 41) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 432);
  v53 = *(_QWORD *)(a1 + 440);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 424);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 424);
    v63 = *(char **)(a1 + 432);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 424);
    }
    *(_QWORD *)(a1 + 424) = v61;
    *(_QWORD *)(a1 + 432) = v54;
    *(_QWORD *)(a1 + 440) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 432) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 570))
  {
    *(_BYTE *)(a1 + 572) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 572) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D8DC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 424), *(_QWORD *)(a1 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D8DCE8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 448), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 184);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 192) = v9;
    operator delete(v9);
    v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v10;
  if (*(_QWORD *)(a1 + 232))
  {
    v11 = *(_QWORD *)(a1 + 224);
    v12 = *(_QWORD **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    if (v12[1])
      v13 = (_QWORD *)v12[1];
    else
      v13 = v12;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 448));
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 572))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 572) = 0;
  }

}

void sub_1B7D8DEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D8DF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 584));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 568) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D8E288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4004ACF899);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D8E434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D8E6A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 568))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D8F36C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D8F40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsPresence24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsPresence,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08E60;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(_BYTE *)(a1 + 578) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08E60;
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(_QWORD *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);

}

void sub_1B7D8F578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 584) = v4;
    v3 = v5;
  }

}

void sub_1B7D8F5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 74, a2);
  v7 = a2;
  v4 = a1[74];
  v5 = a1[71];
  a1[71] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D8F76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 576))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D8F814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 578))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 577))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 579))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 616);
    v18 = *(_QWORD *)(a1 + 624);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 608);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 616);
      v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 608);
      }
      *(_QWORD *)(a1 + 608) = v28;
      *(_QWORD *)(a1 + 616) = v21;
      *(_QWORD *)(a1 + 624) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D8FA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 578))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 577))
    goto LABEL_5;
  v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_412);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 600);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;

  *(_BYTE *)(a1 + 577) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 608);
      v37 = *(__int128 **)(a1 + 616);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 616);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 616) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 608);
  v39 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544));
  }
  *(_BYTE *)(a1 + 578) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 580))
    {
      *(_BYTE *)(a1 + 580) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D90160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 578))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 578))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 577))
  {
    v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 600);
      *(_QWORD *)(a1 + 600) = v9;

      v8 = *(void **)(a1 + 600);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D9045C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 576) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 576) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D9057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 576), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsPresence>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 336);
  if (v9 != (int *)(a1 + 344))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsPresence>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 344));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 544);
  for (k = *(int8x16_t **)(a1 + 552); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D90914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t i;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p;
  char *v75;
  unint64_t v76;
  _BYTE v77[96];
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  int v94;
  void (**v95)(statistics::StatisticsEngine *__hidden);
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _BYTE v102[32];
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v59 = a2;
  *(_BYTE *)(a1 + 576) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v103 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v102, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v103));
  v95 = &off_1E6D09A88;
  v96 = 0;
  v100 = 0;
  v98 = 0;
  v99 = 0;
  v101 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v95, (PB::Reader *)v102);
  v61 = a1;
  v63.n128_u64[0] = v97;
  if (v96)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    __p = 0;
    memset(&v77[8], 0, 42);
    memset(&v77[56], 0, 34);
    v80 = 0;
    v76 = 0;
    v75 = 0;
    *(_DWORD *)v77 = 0;
    v79 = 0;
    v78 = &v79;
    v81 = 0u;
    v82 = 0u;
    v83 = 1065353216;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0;
    v88 = 1065353216;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v92 = 0u;
    v93 = 0u;
    v94 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v96 + 8), *(int8x16_t *)(v96 + 8), 8uLL);
    v4 = *(_QWORD *)(v96 + 72);
    v67 = *(_QWORD *)(v96 + 64);
    v68 = *(_BYTE *)(v96 + 185);
    v69 = *(_BYTE *)(v96 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v96 + 24), *(int8x16_t *)(v96 + 24), 8uLL);
    v72 = v4;
    v5 = *(_QWORD *)(v96 + 80);
    v6 = *(_QWORD *)(v96 + 88);
    v60 = (_QWORD *)v96;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v76)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v75;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v75 = (char *)(v19 + 6);
          v76 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v75 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsPresence>::unarchive((uint64_t)&v104, v23);
      *(_OWORD *)&v77[32] = v106;
      *(_OWORD *)&v77[48] = v107;
      *(_OWORD *)&v77[64] = v108;
      *(_OWORD *)&v77[80] = v109;
      *(_OWORD *)v77 = v104;
      *(_OWORD *)&v77[16] = v105;
    }
    v24 = (_QWORD **)v60[17];
    v25 = (_QWORD **)v60[18];
    while (v24 != v25)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsPresence>::unarchive((uint64_t)&v104, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v79;
      v29 = &v79;
      v30 = &v79;
      if (v79)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0x88uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v78)
      {
        v78 = (uint64_t **)*v78;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v79, v32);
      ++v80;
LABEL_36:
      v35 = v108;
      v34 = v109;
      v36 = v107;
      *(_OWORD *)(v33 + 72) = v106;
      *(_OWORD *)(v33 + 88) = v36;
      *(_OWORD *)(v33 + 104) = v35;
      *(_OWORD *)(v33 + 120) = v34;
      v37 = v105;
      *(_OWORD *)(v33 + 40) = v104;
      ++v24;
      *(_OWORD *)(v33 + 56) = v37;
    }
    v38 = v60[5];
    for (i = v60[6]; v38 != i; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v98;
  v44 = v99;
  if (v98 != v99)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v50 = (char *)v64[0];
          v45 = (char *)v64[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v95);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7D90FD4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 224));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[424];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[360];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D914BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 152);
  v13 = *(_OWORD *)(a2 + 168);
  v14 = *(_OWORD *)(a2 + 184);
  v15 = *(_OWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 224) = 0;
  v18 = (_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 168) = v13;
  *(_QWORD *)(a1 + 232) = 0;
  v19 = *(_QWORD **)(a2 + 216);
  if (v19 != (_QWORD *)(a2 + 224))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v22 = v19[4];
      v23 = (_QWORD *)(a1 + 224);
      if (v21 == v18)
        goto LABEL_12;
      v24 = v20;
      v25 = (_QWORD *)(a1 + 224);
      if (v20)
      {
        do
        {
          v23 = v24;
          v24 = (_QWORD *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v25[2];
          v26 = *v23 == (_QWORD)v25;
          v25 = v23;
        }
        while (v26);
      }
      if (v23[4] < v22)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v23;
        else
          v27 = (uint64_t **)(a1 + 224);
        if (v20)
          v28 = (uint64_t **)(v23 + 1);
        else
          v28 = (uint64_t **)(a1 + 224);
        if (!*v28)
        {
LABEL_28:
          v31 = operator new(0x88uLL);
          v32 = *((_OWORD *)v19 + 2);
          v33 = *((_OWORD *)v19 + 4);
          v31[3] = *((_OWORD *)v19 + 3);
          v31[4] = v33;
          v31[2] = v32;
          v34 = *((_OWORD *)v19 + 5);
          v35 = *((_OWORD *)v19 + 6);
          v36 = *((_OWORD *)v19 + 7);
          *((_QWORD *)v31 + 16) = v19[16];
          v31[6] = v35;
          v31[7] = v36;
          v31[5] = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 224);
        v27 = (uint64_t **)(a1 + 224);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v22)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v22)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v37 = (_QWORD *)v19[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v19[2];
          v26 = *v38 == (_QWORD)v19;
          v19 = v38;
        }
        while (!v26);
      }
      if (v38 == (_QWORD *)(a2 + 224))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 216);
      v19 = v38;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 280), *(const void **)(a2 + 280), *(_QWORD *)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1B7D91864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  v14 = a1 + 224;
  v13 = *(_QWORD **)(a1 + 224);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v15;
  std::__tree<long>::destroy(v13);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v16 = (_QWORD *)(a2 + 224);
  v17 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v17;
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v14;
    *(_QWORD *)(a2 + 216) = v16;
    *v16 = 0;
    *(_QWORD *)(a2 + 232) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  unint64_t WeakRetained;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  void **v28;
  char *v29;
  unint64_t v30;
  id v31;
  id v32;
  void *v33;
  char v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD **v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *i;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;
  _QWORD *v59;
  BOOL v60;
  void *v61;
  uint64_t **j;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  int v69;
  void *v70;
  void *v71;
  int v72;
  unint64_t v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  void *__p[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v77 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v79 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      WeakRetained = objc_claimAutoreleasedReturnValue();

      v9 = (id)WeakRetained;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v77, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      WeakRetained = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v12 = *(uint64_t **)(a2 + 280);
      v13 = *(uint64_t **)(a2 + 288);
      while (v12 != v13)
      {
        v14 = *v12;
        v15 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v15, "sourceForSourceID:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          if ((objc_msgSend((id)WeakRetained, "containsObject:", v16) & 1) == 0)
            objc_msgSend((id)WeakRetained, "addObject:", v16);
        }

        ++v12;
      }
      v17 = (void *)objc_msgSend((id)WeakRetained, "copy");
      objc_msgSend(v11, "_setSources:", v17);

    }
  }

  v86[0] = &off_1E6D08F30;
  v87 = v86;
  v78 = v11;
  v18 = *(_OWORD *)(v79 + 168);
  v82 = *(_OWORD *)(v79 + 152);
  v83 = v18;
  v19 = *(_OWORD *)(v79 + 200);
  v84 = *(_OWORD *)(v79 + 184);
  v85 = v19;
  v20 = *(_OWORD *)(v79 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v79 + 120);
  v81 = v20;
  if (!v87)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v78, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, void **))(*v87 + 48))(v87, __p));
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_119;
  v76 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v81 = 0u;
  LODWORD(v82) = 1065353216;
  v21 = *(_QWORD **)(v79 + 216);
  if (v21 == (_QWORD *)(v79 + 224))
    goto LABEL_118;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(v79, v21[4]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v22;
    if (!v22)
      goto LABEL_98;
    v23 = objc_msgSend(v22, "hash");
    v24 = v23;
    v25 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_41;
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      WeakRetained = v23;
      if ((void *)v23 >= __p[1])
        WeakRetained = v23 % (unint64_t)__p[1];
    }
    else
    {
      WeakRetained = ((unint64_t)__p[1] - 1) & v23;
    }
    v28 = (void **)*((_QWORD *)__p[0] + WeakRetained);
    if (!v28 || (v29 = (char *)*v28) == 0)
    {
LABEL_41:
      v29 = (char *)operator new(0x78uLL);
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = v24;
      *((_QWORD *)v29 + 2) = v9;
      *(_OWORD *)(v29 + 24) = 0u;
      *(_OWORD *)(v29 + 40) = 0u;
      *(_OWORD *)(v29 + 56) = 0u;
      *(_OWORD *)(v29 + 72) = 0u;
      *(_OWORD *)(v29 + 88) = 0u;
      *(_OWORD *)(v29 + 104) = 0u;
      v35 = (float)(unint64_t)(*((_QWORD *)&v81 + 1) + 1);
      if (v25 && (float)(*(float *)&v82 * (float)v25) >= v35)
      {
LABEL_87:
        v51 = __p[0];
        v52 = (_QWORD *)*((_QWORD *)__p[0] + WeakRetained);
        if (v52)
        {
          *(_QWORD *)v29 = *v52;
        }
        else
        {
          *(_QWORD *)v29 = v81;
          *(_QWORD *)&v81 = v29;
          v51[WeakRetained] = &v81;
          if (!*(_QWORD *)v29)
          {
LABEL_96:
            ++*((_QWORD *)&v81 + 1);
            goto LABEL_97;
          }
          v53 = *(_QWORD *)(*(_QWORD *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25)
              v53 %= v25;
          }
          else
          {
            v53 &= v25 - 1;
          }
          v52 = (char *)__p[0] + 8 * v53;
        }
        *v52 = v29;
        goto LABEL_96;
      }
      v36 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3)
        v36 = 1;
      v37 = v36 | (2 * v25);
      v38 = vcvtps_u32_f32(v35 / *(float *)&v82);
      if (v37 <= v38)
        prime = (int8x8_t)v38;
      else
        prime = (int8x8_t)v37;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v25 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_53;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v46 = vcvtps_u32_f32((float)*((unint64_t *)&v81 + 1) / *(float *)&v82);
        if (__p[1] < (void *)3
          || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
        {
          v46 = std::__next_prime(v46);
        }
        else
        {
          v48 = 1 << -(char)__clz(v46 - 1);
          if (v46 >= 2)
            v46 = v48;
        }
        if (*(_QWORD *)&prime <= v46)
          prime = (int8x8_t)v46;
        if (*(_QWORD *)&prime >= v25)
        {
          v25 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v40 = operator new(8 * *(_QWORD *)&prime);
            v41 = __p[0];
            __p[0] = v40;
            if (v41)
              operator delete(v41);
            v42 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v42++) = 0;
            while (*(_QWORD *)&prime != v42);
            v43 = (_QWORD **)v81;
            if ((_QWORD)v81)
            {
              v44 = *(_QWORD *)(v81 + 8);
              v45 = (uint8x8_t)vcnt_s8(prime);
              v45.i16[0] = vaddlv_u8(v45);
              if (v45.u32[0] > 1uLL)
              {
                if (v44 >= *(_QWORD *)&prime)
                  v44 %= *(_QWORD *)&prime;
              }
              else
              {
                v44 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v44) = &v81;
              for (i = *v43; i; v44 = v50)
              {
                v50 = i[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(_QWORD *)&prime)
                    v50 %= *(_QWORD *)&prime;
                }
                else
                {
                  v50 &= *(_QWORD *)&prime - 1;
                }
                if (v50 != v44)
                {
                  if (!*((_QWORD *)__p[0] + v50))
                  {
                    *((_QWORD *)__p[0] + v50) = v43;
                    goto LABEL_78;
                  }
                  *v43 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v50);
                  **((_QWORD **)__p[0] + v50) = i;
                  i = v43;
                }
                v50 = v44;
LABEL_78:
                v43 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v25 = (unint64_t)prime;
            goto LABEL_82;
          }
          v61 = __p[0];
          __p[0] = 0;
          if (v61)
            operator delete(v61);
          v25 = 0;
          __p[1] = 0;
        }
      }
LABEL_82:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25)
          WeakRetained = v24 % v25;
        else
          WeakRetained = v24;
      }
      else
      {
        WeakRetained = (v25 - 1) & v24;
      }
      goto LABEL_87;
    }
    v75 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v30 = *((_QWORD *)v29 + 1);
      if (v30 == v24)
        break;
      if (v27 > 1)
      {
        if (v30 >= v25)
          v30 %= v25;
      }
      else
      {
        v30 &= v75;
      }
      if (v30 != WeakRetained)
        goto LABEL_41;
LABEL_40:
      v29 = *(char **)v29;
      if (!v29)
        goto LABEL_41;
    }
    v31 = *((id *)v29 + 2);
    v32 = v9;
    v33 = v32;
    if (v31 != v32)
    {
      v34 = objc_msgSend(v31, "isEqualToString:", v32);

      if ((v34 & 1) != 0)
        goto LABEL_97;
      goto LABEL_40;
    }

LABEL_97:
    v54 = *(_OWORD *)(v21 + 5);
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(v21 + 7);
    *(_OWORD *)(v29 + 24) = v54;
    v55 = *(_OWORD *)(v21 + 9);
    v56 = *(_OWORD *)(v21 + 11);
    v57 = *(_OWORD *)(v21 + 13);
    *(_OWORD *)(v29 + 104) = *(_OWORD *)(v21 + 15);
    *(_OWORD *)(v29 + 88) = v57;
    *(_OWORD *)(v29 + 72) = v56;
    *(_OWORD *)(v29 + 56) = v55;

LABEL_98:
    v58 = (_QWORD *)v21[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (_QWORD *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (_QWORD *)v21[2];
        v60 = *v59 == (_QWORD)v21;
        v21 = v59;
      }
      while (!v60);
    }
    v21 = v59;
  }
  while (v59 != (_QWORD *)(v79 + 224));
  for (j = (uint64_t **)v81; j; j = (uint64_t **)*j)
  {
    v63 = j[2];
    if (!v87)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v87 + 48))(v87, (uint64_t *)j + 3));
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v9, v63);

  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v78, "setDataCountBySource:", v76);

LABEL_119:
  v64 = v87;
  if (v87 == v86)
  {
    v65 = 4;
    v64 = v86;
LABEL_123:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  else if (v87)
  {
    v65 = 5;
    goto LABEL_123;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "averageQuantity");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (v67)
  {
    objc_msgSend(v78, "averageQuantity");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v9, "isCompatibleWithUnit:", v66) & 1) == 0)
    {

      goto LABEL_138;
    }
  }
  objc_msgSend(v78, "minimumQuantity");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  if (v68)
  {
    objc_msgSend(v78, "minimumQuantity");
    WeakRetained = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)WeakRetained, "isCompatibleWithUnit:", v66))
    {
      v69 = 1;
      goto LABEL_132;
    }
  }
  objc_msgSend(v78, "maximumQuantity");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (v70)
  {
    objc_msgSend(v78, "maximumQuantity");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_msgSend(v71, "isCompatibleWithUnit:", v66);

    v69 = v72 ^ 1;
    if (v68)
      goto LABEL_132;
LABEL_136:
    if (!v67)
      goto LABEL_137;
LABEL_133:

    if ((v69 & 1) == 0)
      goto LABEL_139;
LABEL_138:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v66);
    goto LABEL_139;
  }
  v69 = 0;
  if (!v68)
    goto LABEL_136;
LABEL_132:

  if (v67)
    goto LABEL_133;
LABEL_137:

  if (v69)
    goto LABEL_138;
LABEL_139:

  return v78;
}

void sub_1B7D92408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (v18)
  if (v16)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(a1 + 280);
  if (v1 != (*(_QWORD *)(a1 + 288) - v2) >> 3)
  {
    v4 = (void **)(a1 + 280);
    *(_QWORD *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    v5 = *(_QWORD **)(a1 + 256);
    if (v5)
    {
      v6 = *(char **)(a1 + 288);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 280);
            v6 = *(char **)(a1 + 288);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 280) = v16;
          *(_QWORD *)(a1 + 288) = v9;
          *(_QWORD *)(a1 + 296) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 288) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D92738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  int v51;
  char v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t **v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  double v108;
  unint64_t v109;
  uint64_t **v110;
  __int128 v111;
  char *v112;
  double v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  id *location;
  __int128 *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  double **v122;
  char v123;
  char v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int16 v133;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v126 = (void **)(a1 + 96);
    v122 = (double **)(a1 + 64);
    v120 = a1 + 120;
    location = (id *)(a1 + 88);
    v116 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsPresence>]");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v113 = *(double *)(a1 + 56);
      }
      v5 = v113;
      if (v113 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v126;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(a1);
      v118 = (__int128 *)v6;
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v128 = a1;
        v40 = 126 - 2 * __clz(v8);
        if (v118 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*,false>((uint64_t)v118, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v119 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v119 = 0;
      if (v118 == v7)
      {
LABEL_106:
        v96 = *(_QWORD **)(a1 + 216);
        if (v96 != v116)
        {
          do
          {
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v118)
          operator delete(v118);
        goto LABEL_125;
      }
      v121 = 0;
      v44 = 0;
      v45 = v118;
      while (2)
      {
        v46 = v45[1];
        v128 = *v45;
        v129 = v46;
        v130 = *((_QWORD *)v45 + 4);
        v47 = v46;
        v48 = v28 - *((double *)&v128 + 1);
        v49 = *(double *)&v46 - *((double *)&v128 + 1);
        if (v49 - (v28 - *((double *)&v128 + 1)) < 0.01)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!(_BYTE)v130)
            goto LABEL_59;
LABEL_54:
          v124 = v52;
          v125 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          v56 = *((unsigned __int8 *)v45 + 42);
          v57 = *((unsigned __int8 *)v45 + 41);
          v123 = *((_BYTE *)v45 + 40);
          if (!(_BYTE)v130)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            v58 = *((_QWORD *)&v129 + 1);
            if (v121 == *((_QWORD *)&v129 + 1) || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v56 == 0, *(double *)&v128);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v56 == 0, *(double *)&v128);
            v56 = 1;
            v58 = *((_QWORD *)&v129 + 1);
            v121 = *((_QWORD *)&v129 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(a1, v58);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v119, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != v58 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (v51)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v125;
                  v86[32] = v51;
                  v86[33] = v124;
                  v86[40] = v123;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v126;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v126) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v125;
                *(_BYTE *)(v92 + 32) = v51;
                *(_BYTE *)(v92 + 33) = v124;
                *(_BYTE *)(v92 + 40) = v123;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v126;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v119, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(a1, v58);
          v83 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsPresence>::addSample((uint64_t)v83, v57 == 0, *(double *)&v128);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          LOBYTE(v130) = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * *(double *)&v128;
        v50 = *((_QWORD *)&v129 + 1);
        v52 = BYTE1(v130);
        v54 = *(double *)&v128 - v55;
        *(double *)&v128 = v55;
        *(double *)&v129 = v28;
        v53 = v28;
        v51 = v130;
        if ((_BYTE)v130)
          goto LABEL_54;
LABEL_59:
        v59 = *(__int128 **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *v45;
          v62 = v45[2];
          v59[1] = v45[1];
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v126) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v126) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (__int128 *)(v67 + 48 * v64);
        v73 = *v45;
        v74 = v45[2];
        v72[1] = v45[1];
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(__int128 *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v126;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 3;
        if (v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(_QWORD *)(a1 + 96);
        v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&v128 = v10;
        *((double *)&v128 + 1) = v9;
        *(double *)&v129 = v17;
        *((_QWORD *)&v129 + 1) = v12;
        LOBYTE(v130) = v16;
        BYTE1(v130) = v14;
        *(_DWORD *)((char *)&v130 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v130) = *(_WORD *)(v103 + 38);
        *(double *)&v131 = v18;
        *((double *)&v131 + 1) = v19;
        *(double *)&v132 = v11;
        *((_QWORD *)&v132 + 1) = v42;
        LOBYTE(v133) = v13;
        HIBYTE(v133) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        v105 = v104 != 0;
        v106 = v102 != 0;
        v107 = v101 != 0;
        if ((_BYTE)v130)
        {
          v108 = *(double *)&v128;
          HDStatisticsRelative<HDStatisticsPresence>::addSample(v120, v101 == 0, *(double *)&v128);
          if (*(_BYTE *)(a1 + 25))
          {
            v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v129 + 1));
            v110 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            HDStatisticsRelative<HDStatisticsPresence>::addSample((uint64_t)v110, v102 == 0, v108);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v133)
        {
          LOWORD(v127) = v133;
          v111 = v132;
          v112 = (char *)*v126;
          *(_OWORD *)v112 = v131;
          *((_OWORD *)v112 + 1) = v111;
          *((_QWORD *)v112 + 4) = v127;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7D9308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsPresence>::addSample(uint64_t result, int a2, double a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;

  v3 = 2 * (a3 != -1.79769313e308);
  if (a3 == 1.79769313e308)
    v3 = 1;
  if (v3)
  {
    if (v3 == 1)
    {
      if (*(_DWORD *)result)
        return result;
      v5 = 1;
    }
    else
    {
      if (v3 != 2)
        return result;
      if (*(_DWORD *)result == 2)
      {
        v4 = *(_QWORD *)(result + 8) + 1;
LABEL_20:
        *(_QWORD *)(result + 8) = v4;
        return result;
      }
      v5 = 2;
    }
    *(_DWORD *)result = v5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    v6 = *(_OWORD *)(result + 72);
    *(_WORD *)(result + 48) = *(_WORD *)(result + 88);
    *(_OWORD *)(result + 16) = *(_OWORD *)(result + 56);
    *(_OWORD *)(result + 32) = v6;
    if (a2)
      *(_QWORD *)(result + 8) = 1;
  }
  else if (!*(_DWORD *)result && !*(_QWORD *)(result + 8) && a2 != 0)
  {
    v4 = 1;
    goto LABEL_20;
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 344);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D93290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 384);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D93360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 280);
      v11 = *(char **)(*(_QWORD *)a3 + 288);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 288);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 280);
      v24 = *(char **)(*(_QWORD *)a3 + 288);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 280);
            v31 = *(char **)(*(_QWORD *)a3 + 288);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D08F30;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D08F30;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>> const&)::{lambda(HDStatisticsRelative<HDStatisticsPresence> const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsRelative<HDStatisticsPresence> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D94AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 552);
      v7 = *(_QWORD *)(a1 + 544);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D94CF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  unint64_t v68;
  char v69;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        v25 = v16;
        v68 = v14;
        v24 = v18 - v18 * (v20 / v21);
        v23 = v13;
        v69 = v15;
        v16 = *(double *)(a1 + 16);
        v18 = v18 * (v20 / v21);
        if (!v13)
          goto LABEL_25;
        goto LABEL_11;
      }
LABEL_10:
      v68 = 0;
      v23 = 0;
      v69 = 0;
      v24 = 0.0;
      v19 = 0.0;
      v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      v66 = v17;
      v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v14, v14);
      v26 = *(_QWORD *)(a1 + 112);
      if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        v28 = v66;
        v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        v28 = v66;
        v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          v29 = *(double *)(a1 + 8);
          if (v66 >= v29)
            v29 = v66;
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          v30 = *(double *)(a1 + 16);
          if (v30 >= v67)
            v30 = v67;
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v34 = *(double *)(a1 + 64);
        if (v28 < v34)
          v34 = v28;
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v5, v28);
        v28 = v66;
        v27 = v67;
        v26 = *(_QWORD *)(a1 + 112);
      }
      v35 = *(_QWORD *)(a1 + 120);
      if (v26 >= v35)
      {
        v37 = *(_QWORD *)(a1 + 104);
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x2AAAAAAAAAAAAAALL)
          v41 = 0x555555555555555;
        else
          v41 = v39;
        if (v41)
        {
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          v28 = v66;
          v27 = v67;
        }
        else
        {
          v42 = 0;
        }
        v43 = v41 + 48 * v38;
        v44 = v41 + 48 * v42;
        *(double *)v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(_QWORD *)(v43 + 24) = v14;
        *(_BYTE *)(v43 + 32) = v13;
        *(_BYTE *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(_BYTE *)(v43 + 42) = 0;
        v36 = v43 + 48;
        v46 = *(char **)(a1 + 104);
        v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          v15 = v69;
        }
        else
        {
          v15 = v69;
          do
          {
            v47 = *((_OWORD *)v45 - 3);
            v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v43;
        *(_QWORD *)(a1 + 112) = v36;
        *(_QWORD *)(a1 + 120) = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(double *)v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(_QWORD *)(v26 + 24) = v14;
        *(_BYTE *)(v26 + 32) = v13;
        *(_BYTE *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        v36 = v26 + 48;
        *(_BYTE *)(v26 + 42) = 0;
        v15 = v69;
      }
      *(_QWORD *)(a1 + 112) = v36;
      if (!*(_BYTE *)(a1 + 216) || *(double *)(a1 + 192) <= v7)
      {
        *(double *)(a1 + 184) = v6;
        *(double *)(a1 + 192) = v7;
        *(double *)(a1 + 200) = v8;
        *(_QWORD *)(a1 + 208) = v9;
        *(_BYTE *)(a1 + 216) = v10;
        *(_BYTE *)(a1 + 217) = v11;
        if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
        {
          *(double *)(a1 + 144) = v6;
          *(double *)(a1 + 152) = v7;
          *(double *)(a1 + 160) = v8;
          *(_QWORD *)(a1 + 168) = v9;
          *(_BYTE *)(a1 + 176) = v10;
          *(_BYTE *)(a1 + 177) = v11;
        }
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_canonicalSourceIDForSourceID(v5, v14);
        v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v49);
        if (!*((_BYTE *)v50 + 88) || *((double *)v50 + 8) <= v7)
        {
          *((double *)v50 + 7) = v6;
          *((double *)v50 + 8) = v7;
          *((double *)v50 + 9) = v8;
          v50[10] = v9;
          *((_BYTE *)v50 + 88) = v10;
          *((_BYTE *)v50 + 89) = v11;
          if (!*((_BYTE *)v50 + 48) || *((double *)v50 + 3) <= v7)
          {
            *((double *)v50 + 2) = v6;
            *((double *)v50 + 3) = v7;
            *((double *)v50 + 4) = v8;
            v50[5] = v9;
            *((_BYTE *)v50 + 48) = v10;
            *((_BYTE *)v50 + 49) = v11;
          }
        }
      }
LABEL_63:
      v14 = v68;
      if (!v23)
        return;
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
  }
  LOBYTE(v23) = v13;
  v25 = v16;
  v19 = v17;
  v24 = v18;
  if (!v13)
    return;
LABEL_64:
  v51 = *(_QWORD *)(a1 + 440);
  v52 = *(_QWORD *)(a1 + 448);
  if (v51 >= v52)
  {
    v54 = *(_QWORD *)(a1 + 432);
    v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x333333333333333)
      v58 = 0x666666666666666;
    else
      v58 = v56;
    if (v58)
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    else
      v59 = 0;
    v60 = v58 + 40 * v55;
    v61 = v58 + 40 * v59;
    *(double *)v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(_QWORD *)(v60 + 24) = v14;
    *(_BYTE *)(v60 + 32) = v23;
    *(_BYTE *)(v60 + 33) = v15;
    v53 = v60 + 40;
    v63 = *(char **)(a1 + 432);
    v62 = *(char **)(a1 + 440);
    if (v62 != v63)
    {
      do
      {
        v64 = *(_OWORD *)(v62 - 40);
        v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      v62 = *(char **)(a1 + 432);
    }
    *(_QWORD *)(a1 + 432) = v60;
    *(_QWORD *)(a1 + 440) = v53;
    *(_QWORD *)(a1 + 448) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(double *)v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(_QWORD *)(v51 + 24) = v14;
    *(_BYTE *)(v51 + 32) = v23;
    v53 = v51 + 40;
    *(_BYTE *)(v51 + 33) = v15;
  }
  *(_QWORD *)(a1 + 440) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 578))
  {
    *(_BYTE *)(a1 + 580) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 580) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D95330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(_QWORD *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D95418(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  if (*(_QWORD *)(v8 + 200))
  {
    v9 = *(_QWORD *)(a1 + 232);
    v10 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = a1 + 232;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 456));
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 580))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 580) = 0;
  }

}

void sub_1B7D955BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D95640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 592));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 576) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D959A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40D05041EALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D95B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsPresence>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D95DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 576))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsPresence>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D96A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D96B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsPresenceEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsPresence>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsPresence>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsPresence::archive((HDStatisticsPresence *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 14), *(int8x16_t *)(a2 + 14), 8uLL);
  v6[1] = *((_QWORD *)a2 + 9);
  v6[2] = *((_QWORD *)a2 + 10);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D96C30(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsPresence>::unarchive(uint64_t a1, _QWORD *a2)
{
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = 0uLL;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 88) = 0;
  v3 = a2[16];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_QWORD *)(v3 + 112);
    if (v5)
    {
      v2 = *(int8x16_t *)(v5 + 24);
      v6 = *(_QWORD *)(v5 + 8);
      v7 = 1;
      v5 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    *(_QWORD *)(a1 + 8) = v4;
    v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 16) = v2;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v5;
    *(_BYTE *)(a1 + 48) = v7;
    *(_BYTE *)(a1 + 49) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  v8 = a2[14];
  if (v8)
  {
    v2.i64[0] = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    *(int8x16_t *)(a1 + 56) = vextq_s8(*(int8x16_t *)(v8 + 24), *(int8x16_t *)(v8 + 24), 8uLL);
    *(_QWORD *)(a1 + 72) = v2.i64[0];
    *(_QWORD *)(a1 + 80) = v9;
    *(_WORD *)(a1 + 88) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D08FE0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_WORD *)(a1 + 528) = 1;
  *(_BYTE *)(a1 + 530) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 536) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D08FE0;
  v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(_QWORD *)(a1 + 568) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 496);
  if (v3)
  {
    *(_QWORD *)(a1 + 504) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 528) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);

}

void sub_1B7D96E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 536) = v4;
    v3 = v5;
  }

}

void sub_1B7D96E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 68, a2);
  v7 = a2;
  v4 = a1[68];
  v5 = a1[65];
  a1[65] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[65]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D97030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 528))
    return 0;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D970D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 530))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 529))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 531))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 568);
    v18 = *(_QWORD *)(a1 + 576);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 560);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 568);
      v33 = *(char **)(a1 + 560);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 560);
      }
      *(_QWORD *)(a1 + 560) = v28;
      *(_QWORD *)(a1 + 568) = v21;
      *(_QWORD *)(a1 + 576) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 568) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D9732C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 530))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 530) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 529))
    goto LABEL_5;
  v9 = *(void **)(a1 + 552);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_413);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 552);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;

  *(_BYTE *)(a1 + 529) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 560);
    *(_QWORD *)(a1 + 576) = 0;
    *(_QWORD *)(a1 + 568) = 0;
    *(_QWORD *)(a1 + 560) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 560);
      v37 = *(__int128 **)(a1 + 568);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 568);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 568) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 560);
  v39 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 504) != *(_QWORD *)(a1 + 496))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsPresence>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 504) != *(_QWORD *)(a1 + 496));
  }
  *(_BYTE *)(a1 + 530) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 532))
    {
      *(_BYTE *)(a1 + 532) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 530) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D97A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 530) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 531) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 530))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 530))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 552);
    *(_QWORD *)(a1 + 552) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 529) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 529))
  {
    v8 = *(void **)(a1 + 552);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v9;

      v8 = *(void **)(a1 + 552);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D97D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 528) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 528) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D97E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::reset(uint64_t result)
{
  *(_BYTE *)(result + 528) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 528), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsPresence::archive((HDStatisticsPresence *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 288);
  if (v9 != (_QWORD *)(a1 + 296))
  {
    do
    {
      HDStatisticsPresence::archive((HDStatisticsPresence *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 296));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 496);
  for (k = *(int8x16_t **)(a1 + 504); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D981CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t i;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  id v68;
  int8x16_t v69;
  __n128 v70;
  void *v71[2];
  __int128 v72;
  int8x16_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79[4];
  void *__p[2];
  __int128 v81;
  int8x16_t v82;
  __int128 v83;
  __int16 v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  void (**v102)(statistics::StatisticsEngine *__hidden);
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BYTE v109[32];
  uint64_t v110[3];

  v65 = a2;
  *(_BYTE *)(a1 + 528) = objc_msgSend(v65, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v65;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)&v70.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v71 = 0u;
  v72 = 0u;
  v110[0] = 0;
  v68 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)objc_msgSend(v68, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), v110));
  v102 = &off_1E6D09A88;
  v103 = 0;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v67 = a1;
  v70.n128_u64[0] = v104;
  if (v103)
  {
    v76 = 0;
    memset(v79, 0, sizeof(v79));
    v87 = 0;
    *(_OWORD *)__p = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0;
    v86 = 0;
    v85 = &v86;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v93 = 0u;
    v94 = 0;
    v92 = 0u;
    v91 = 0u;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v73 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    v4 = *(_QWORD *)(v103 + 72);
    v74 = *(_QWORD *)(v103 + 64);
    v75 = *(_WORD *)(v103 + 185);
    v77 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    v78 = v4;
    v5 = *(_QWORD *)(v103 + 80);
    v6 = *(_QWORD *)(v103 + 88);
    v66 = (_QWORD *)v103;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v81)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)&v81 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v66[13];
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(_QWORD *)(v23 + 112);
      if (v25)
      {
        v26 = *(int8x16_t *)(v25 + 24);
        v27 = *(_QWORD *)(v25 + 8);
        v28 = 1;
        v25 = *(_QWORD *)(v25 + 16);
      }
      else
      {
        v28 = 0;
        v26 = 0uLL;
        v27 = 0;
      }
      *((_QWORD *)&v81 + 1) = v24;
      v82 = vextq_s8(v26, v26, 8uLL);
      *(_QWORD *)&v83 = v27;
      *((_QWORD *)&v83 + 1) = v25;
      v84 = v28;
    }
    v29 = (uint64_t *)v66[17];
    v30 = (uint64_t *)v66[18];
    while (v29 != v30)
    {
      v31 = *v29;
      v32 = *(_QWORD *)(*v29 + 112);
      if (v32)
      {
        v69 = *(int8x16_t *)(v32 + 24);
        v33 = *(_QWORD *)(v32 + 8);
        v34 = 1;
        v35 = *(_QWORD *)(v32 + 16);
      }
      else
      {
        v35 = 0;
        v34 = 0;
        v33 = 0;
        v69 = 0u;
      }
      v36 = *(_QWORD *)(v31 + 24);
      v37 = *(_QWORD *)(v31 + 144);
      v38 = &v86;
      v39 = &v86;
      v40 = v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            v39 = (uint64_t **)v40;
            v41 = v40[4];
            if (v41 <= v37)
              break;
            v40 = *v39;
            v38 = v39;
            if (!*v39)
              goto LABEL_39;
          }
          if (v41 >= v37)
          {
            v43 = (char *)v39;
            goto LABEL_42;
          }
          v40 = v39[1];
        }
        while (v40);
        v38 = v39 + 1;
      }
LABEL_39:
      v43 = (char *)operator new(0x58uLL);
      *((_QWORD *)v43 + 4) = v37;
      *(_OWORD *)(v43 + 40) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_OWORD *)(v43 + 72) = 0u;
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = v39;
      *v38 = (uint64_t *)v43;
      v42 = (uint64_t *)v43;
      if (*v85)
      {
        v85 = (uint64_t **)*v85;
        v42 = *v38;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v42);
      ++v87;
LABEL_42:
      *((_QWORD *)v43 + 5) = v36;
      *((int8x16_t *)v43 + 3) = vextq_s8(v69, v69, 8uLL);
      *((_QWORD *)v43 + 8) = v33;
      *((_QWORD *)v43 + 9) = v35;
      v43[80] = v34;
      v43[81] = 0;
      ++v29;
    }
    v44 = v66[5];
    for (i = v66[6]; v44 != i; v44 += 8)
    {
      v47 = *(double *)(*(_QWORD *)v44 + 8);
      v46 = *(double *)(*(_QWORD *)v44 + 16);
      if (v47 >= v46)
        v48 = *(double *)(*(_QWORD *)v44 + 16);
      else
        v48 = *(double *)(*(_QWORD *)v44 + 8);
      if (v46 < v47)
        v46 = *(double *)(*(_QWORD *)v44 + 8);
      HKIntervalMask<double>::_insertInterval(v79, v48, v46);
    }
    HDStatisticsBucket<HDStatisticsPresence>::operator=((uint64_t)&v70.n128_i64[1], (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v73);
  }
  v49 = v105;
  v50 = v106;
  if (v105 != v106)
  {
    v51 = (char *)v71[1];
    do
    {
      v52 = *(_QWORD *)(*(_QWORD *)v49 + 24);
      v53 = *(_QWORD *)(*(_QWORD *)v49 + 32);
      v54 = *(_QWORD *)(*(_QWORD *)v49 + 8);
      v55 = *(_QWORD *)(*(_QWORD *)v49 + 16);
      if ((unint64_t)v51 >= (unint64_t)v72)
      {
        v56 = (char *)v71[0];
        v57 = 0xCCCCCCCCCCCCCCCDLL * ((v51 - (char *)v71[0]) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3) > v58)
          v58 = 0x999999999999999ALL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - (unint64_t)v71[0]) >> 3) >= 0x333333333333333)
          v59 = 0x666666666666666;
        else
          v59 = v58;
        if (v59)
        {
          v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
          v56 = (char *)v71[0];
          v51 = (char *)v71[1];
        }
        else
        {
          v60 = 0;
        }
        v61 = v59 + 40 * v57;
        *(_QWORD *)v61 = v53;
        *(_QWORD *)(v61 + 8) = v52;
        *(_QWORD *)(v61 + 16) = v54;
        *(_QWORD *)(v61 + 24) = v55;
        *(_WORD *)(v61 + 32) = 1;
        v62 = (char *)v61;
        if (v51 != v56)
        {
          do
          {
            v63 = *(_OWORD *)(v51 - 40);
            v64 = *(_OWORD *)(v51 - 24);
            *((_WORD *)v62 - 4) = *((_WORD *)v51 - 4);
            *(_OWORD *)(v62 - 24) = v64;
            *(_OWORD *)(v62 - 40) = v63;
            v62 -= 40;
            v51 -= 40;
          }
          while (v51 != v56);
          v56 = (char *)v71[0];
        }
        v51 = (char *)(v61 + 40);
        v71[0] = v62;
        v71[1] = (void *)(v61 + 40);
        *(_QWORD *)&v72 = v59 + 40 * v60;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v51 = v53;
        *((_QWORD *)v51 + 1) = v52;
        *((_QWORD *)v51 + 2) = v54;
        *((_QWORD *)v51 + 3) = v55;
        *((_WORD *)v51 + 16) = 1;
        v51 += 40;
      }
      v71[1] = v51;
      v49 += 8;
    }
    while (v49 != v50);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=((_QWORD *)(v67 + 112), &v70);
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v70.n128_i64[1]);

}

void sub_1B7D988AC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v9 - 224));
  HDStatisticsCollectionEngine<HDStatisticsPresence>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_WORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsPresence>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(_QWORD *)(a1 + 392) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 336);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 296);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  v2 = *(void **)(a1 + 232);
  if (v2)
  {
    *(_QWORD *)(a1 + 240) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 192);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 176));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[376];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[312];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 544));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 528) = 0;
  return HDStatisticsBucket<HDStatisticsPresence>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D98D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsPresence>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsPresence>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 48), a2 + 24);
  v4 = a2[25].n128_u64[1];
  a2[25].n128_u64[1] = 0;
  v5 = (void *)a1[51];
  a1[51] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 176) = 0;
  v15 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 184) = 0;
  v16 = *(_QWORD **)(a2 + 168);
  if (v16 != (_QWORD *)(a2 + 176))
  {
    v17 = 0;
    v18 = (_QWORD *)(a1 + 176);
    while (1)
    {
      v19 = v16[4];
      v20 = (_QWORD *)(a1 + 176);
      if (v18 == v15)
        goto LABEL_12;
      v21 = v17;
      v22 = (_QWORD *)(a1 + 176);
      if (v17)
      {
        do
        {
          v20 = v21;
          v21 = (_QWORD *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v22[2];
          v23 = *v20 == (_QWORD)v22;
          v22 = v20;
        }
        while (v23);
      }
      if (v20[4] < v19)
      {
LABEL_12:
        if (v17)
          v24 = (uint64_t **)v20;
        else
          v24 = (uint64_t **)(a1 + 176);
        if (v17)
          v25 = (uint64_t **)(v20 + 1);
        else
          v25 = (uint64_t **)(a1 + 176);
        if (!*v25)
        {
LABEL_28:
          v28 = operator new(0x58uLL);
          v29 = *((_OWORD *)v16 + 2);
          v30 = *((_OWORD *)v16 + 3);
          v31 = *((_OWORD *)v16 + 4);
          v28[10] = v16[10];
          *((_OWORD *)v28 + 3) = v30;
          *((_OWORD *)v28 + 4) = v31;
          *((_OWORD *)v28 + 2) = v29;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 168), (uint64_t)v24, v25, v28);
        }
      }
      else
      {
        v25 = (uint64_t **)(a1 + 176);
        v24 = (uint64_t **)(a1 + 176);
        if (!v17)
          goto LABEL_28;
        v26 = v17;
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v26;
            v27 = v26[4];
            if (v27 <= v19)
              break;
            v26 = *v24;
            v25 = v24;
            if (!*v24)
              goto LABEL_28;
          }
          if (v27 >= v19)
            break;
          v26 = v24[1];
          if (!v26)
          {
            v25 = v24 + 1;
            goto LABEL_28;
          }
        }
      }
      v32 = (_QWORD *)v16[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v16[2];
          v23 = *v33 == (_QWORD)v16;
          v16 = v33;
        }
        while (!v23);
      }
      if (v33 == (_QWORD *)(a2 + 176))
        break;
      v17 = (_QWORD *)*v15;
      v18 = *(_QWORD **)(a1 + 168);
      v16 = v33;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 192, a2 + 192);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 232), *(const void **)(a2 + 232), *(_QWORD *)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 256, a2 + 256);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 336, a2 + 336);
  return a1;
}

void sub_1B7D99110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 240) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsPresence>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 136);
  v13 = a1 + 176;
  v12 = *(_QWORD **)(a1 + 176);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  std::__tree<long>::destroy(v12);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v14 = (_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(a2 + 168) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 184) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 168) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 192, (uint64_t *)(a2 + 192));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 232, (__n128 *)(a2 + 232));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  void **v30;
  char *v31;
  unint64_t v32;
  id v33;
  id v34;
  void *v35;
  char v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t prime;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD **v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *i;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;
  _QWORD *v59;
  BOOL v60;
  void *v61;
  uint64_t **j;
  uint64_t *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  void *__p[2];
  __int128 v74;
  __int128 v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v70 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v72 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v70, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 232);
      v16 = *(uint64_t **)(a2 + 240);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend((id)v12, "_setSources:", v20);

    }
  }

  v76[0] = &off_1E6D090B0;
  v77 = v76;
  v71 = (id)v12;
  v21 = *(_OWORD *)(v72 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v72 + 120);
  v74 = v21;
  v75 = *(_OWORD *)(v72 + 152);
  if (!v77)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v71, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, void **))(*v77 + 48))(v77, __p));
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_119;
  v69 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v74 = 0u;
  LODWORD(v75) = 1065353216;
  v22 = *(_QWORD **)(v72 + 168);
  if (v22 == (_QWORD *)(v72 + 176))
    goto LABEL_118;
  do
  {
    HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(v72, v22[4]);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    if (!v23)
      goto LABEL_98;
    v25 = objc_msgSend(v23, "hash");
    v26 = v25;
    v27 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_41;
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v28.i16[0] = vaddlv_u8(v28);
    v29 = v28.u32[0];
    if (v28.u32[0] > 1uLL)
    {
      v12 = v25;
      if ((void *)v25 >= __p[1])
        v12 = v25 % (unint64_t)__p[1];
    }
    else
    {
      v12 = ((unint64_t)__p[1] - 1) & v25;
    }
    v30 = (void **)*((_QWORD *)__p[0] + v12);
    if (!v30 || (v31 = (char *)*v30) == 0)
    {
LABEL_41:
      v31 = (char *)operator new(0x48uLL);
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = v26;
      *((_QWORD *)v31 + 2) = v24;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_OWORD *)(v31 + 56) = 0u;
      v37 = (float)(unint64_t)(*((_QWORD *)&v74 + 1) + 1);
      if (v27 && (float)(*(float *)&v75 * (float)v27) >= v37)
      {
LABEL_87:
        v53 = __p[0];
        v54 = (_QWORD *)*((_QWORD *)__p[0] + v12);
        if (v54)
        {
          *(_QWORD *)v31 = *v54;
        }
        else
        {
          *(_QWORD *)v31 = v74;
          *(_QWORD *)&v74 = v31;
          v53[v12] = &v74;
          if (!*(_QWORD *)v31)
          {
LABEL_96:
            ++*((_QWORD *)&v74 + 1);
            goto LABEL_97;
          }
          v55 = *(_QWORD *)(*(_QWORD *)v31 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v55 >= v27)
              v55 %= v27;
          }
          else
          {
            v55 &= v27 - 1;
          }
          v54 = (char *)__p[0] + 8 * v55;
        }
        *v54 = v31;
        goto LABEL_96;
      }
      v38 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3)
        v38 = 1;
      v39 = v38 | (2 * v27);
      v40 = vcvtps_u32_f32(v37 / *(float *)&v75);
      if (v39 <= v40)
        prime = (int8x8_t)v40;
      else
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v27 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_53;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v48 = vcvtps_u32_f32((float)*((unint64_t *)&v74 + 1) / *(float *)&v75);
        if (__p[1] < (void *)3
          || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
        {
          v48 = std::__next_prime(v48);
        }
        else
        {
          v50 = 1 << -(char)__clz(v48 - 1);
          if (v48 >= 2)
            v48 = v50;
        }
        if (*(_QWORD *)&prime <= v48)
          prime = (int8x8_t)v48;
        if (*(_QWORD *)&prime >= v27)
        {
          v27 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_53:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v42 = operator new(8 * *(_QWORD *)&prime);
            v43 = __p[0];
            __p[0] = v42;
            if (v43)
              operator delete(v43);
            v44 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v44++) = 0;
            while (*(_QWORD *)&prime != v44);
            v45 = (_QWORD **)v74;
            if ((_QWORD)v74)
            {
              v46 = *(_QWORD *)(v74 + 8);
              v47 = (uint8x8_t)vcnt_s8(prime);
              v47.i16[0] = vaddlv_u8(v47);
              if (v47.u32[0] > 1uLL)
              {
                if (v46 >= *(_QWORD *)&prime)
                  v46 %= *(_QWORD *)&prime;
              }
              else
              {
                v46 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v46) = &v74;
              for (i = *v45; i; v46 = v52)
              {
                v52 = i[1];
                if (v47.u32[0] > 1uLL)
                {
                  if (v52 >= *(_QWORD *)&prime)
                    v52 %= *(_QWORD *)&prime;
                }
                else
                {
                  v52 &= *(_QWORD *)&prime - 1;
                }
                if (v52 != v46)
                {
                  if (!*((_QWORD *)__p[0] + v52))
                  {
                    *((_QWORD *)__p[0] + v52) = v45;
                    goto LABEL_78;
                  }
                  *v45 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v52);
                  **((_QWORD **)__p[0] + v52) = i;
                  i = v45;
                }
                v52 = v46;
LABEL_78:
                v45 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v27 = (unint64_t)prime;
            goto LABEL_82;
          }
          v61 = __p[0];
          __p[0] = 0;
          if (v61)
            operator delete(v61);
          v27 = 0;
          __p[1] = 0;
        }
      }
LABEL_82:
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v26 >= v27)
          v12 = v26 % v27;
        else
          v12 = v26;
      }
      else
      {
        v12 = (v27 - 1) & v26;
      }
      goto LABEL_87;
    }
    v68 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v32 = *((_QWORD *)v31 + 1);
      if (v32 == v26)
        break;
      if (v29 > 1)
      {
        if (v32 >= v27)
          v32 %= v27;
      }
      else
      {
        v32 &= v68;
      }
      if (v32 != v12)
        goto LABEL_41;
LABEL_40:
      v31 = *(char **)v31;
      if (!v31)
        goto LABEL_41;
    }
    v33 = *((id *)v31 + 2);
    v34 = v24;
    v35 = v34;
    if (v33 != v34)
    {
      v36 = objc_msgSend(v33, "isEqualToString:", v34);

      if ((v36 & 1) != 0)
        goto LABEL_97;
      goto LABEL_40;
    }

LABEL_97:
    v56 = *(_OWORD *)(v22 + 5);
    v57 = *(_OWORD *)(v22 + 7);
    *(_OWORD *)(v31 + 56) = *(_OWORD *)(v22 + 9);
    *(_OWORD *)(v31 + 40) = v57;
    *(_OWORD *)(v31 + 24) = v56;

LABEL_98:
    v58 = (_QWORD *)v22[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (_QWORD *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (_QWORD *)v22[2];
        v60 = *v59 == (_QWORD)v22;
        v22 = v59;
      }
      while (!v60);
    }
    v22 = v59;
  }
  while (v59 != (_QWORD *)(v72 + 176));
  for (j = (uint64_t **)v74; j; j = (uint64_t **)*j)
  {
    v63 = j[2];
    if (!v77)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v77 + 48))(v77, (uint64_t *)j + 3));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "setObject:forKeyedSubscript:", v64, v63);

  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v71, "setDataCountBySource:", v69);

LABEL_119:
  v65 = v77;
  if (v77 == v76)
  {
    v66 = 4;
    v65 = v76;
LABEL_123:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  else if (v77)
  {
    v66 = 5;
    goto LABEL_123;
  }
  return v71;
}

void sub_1B7D99B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  unint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v2 = (void **)(a1 + 232);
  v1 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 216);
  if (v3 != (*(_QWORD *)(a1 + 240) - v1) >> 3)
  {
    *(_QWORD *)(a1 + 240) = v1;
    std::vector<long long>::reserve((void **)(a1 + 232), v3);
    v5 = *(_QWORD **)(a1 + 208);
    if (v5)
    {
      v6 = *(char **)(a1 + 240);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 248);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v2;
          v11 = (v6 - (_BYTE *)*v2) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 232);
            v6 = *(char **)(a1 + 240);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 232) = v16;
          *(_QWORD *)(a1 + 240) = v9;
          *(_QWORD *)(a1 + 248) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 240) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v2);

    }
  }
}

void sub_1B7D99DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  int v51;
  char v52;
  double v53;
  double v54;
  double v55;
  int v56;
  unint64_t v57;
  int v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  unint64_t v82;
  uint64_t **v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  uint64_t **v109;
  __int128 v110;
  char *v111;
  double v112;
  void *v113;
  void *v114;
  _QWORD *v115;
  id *location;
  __int128 *v117;
  id v118;
  unint64_t v119;
  double **v120;
  char v121;
  char v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int16 v131;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v124 = (_QWORD *)(a1 + 96);
    v120 = (double **)(a1 + 64);
    location = (id *)(a1 + 88);
    v115 = (_QWORD *)(a1 + 176);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_138:
      *(double *)(a1 + 56) = a2;
LABEL_139:
      v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(double) [Statistics = HDStatisticsPresence]");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "handleFailureInFunction:file:lineNumber:description:", v114, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v112 = *(double *)(a1 + 56);
      }
      v5 = v112;
      if (v112 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v124 = 0;
      v124[1] = 0;
      v124[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v124;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(a1);
      v117 = (__int128 *)v6;
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v126 = a1;
        v40 = 126 - 2 * __clz(v8);
        if (v117 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*,false>((uint64_t)v117, v7, (uint64_t)&v126, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      if (v117 == v7)
      {
LABEL_117:
        v96 = *(_QWORD **)(a1 + 168);
        if (v96 != v115)
        {
          do
          {
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_139;
      }
      v119 = 0;
      v44 = 0;
      v45 = v117;
      while (2)
      {
        v46 = v45[1];
        v126 = *v45;
        v127 = v46;
        v128 = *((_QWORD *)v45 + 4);
        v47 = v46;
        v48 = v28 - *((double *)&v126 + 1);
        v49 = *(double *)&v46 - *((double *)&v126 + 1);
        if (v49 - (v28 - *((double *)&v126 + 1)) >= 0.01)
        {
          if (v48 < 0.01)
          {
            LOBYTE(v128) = 0;
            goto LABEL_59;
          }
          v55 = v48 / v49 * *(double *)&v126;
          v50 = *((_QWORD *)&v127 + 1);
          v52 = BYTE1(v128);
          v54 = *(double *)&v126 - v55;
          *(double *)&v126 = v55;
          *(double *)&v127 = v28;
          v53 = v28;
          v51 = v128;
          if ((_BYTE)v128)
            goto LABEL_54;
LABEL_59:
          v59 = *(__int128 **)(a1 + 104);
          v60 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            v61 = *v45;
            v62 = v45[2];
            v59[1] = v45[1];
            v59[2] = v62;
            *v59 = v61;
            v63 = v59 + 3;
            goto LABEL_115;
          }
          v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v124) >> 4);
          v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v124) >> 4);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x2AAAAAAAAAAAAAALL)
            v67 = 0x555555555555555;
          else
            v67 = v65;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          else
            v68 = 0;
          v69 = (__int128 *)(v67 + 48 * v64);
          v70 = *v45;
          v71 = v45[2];
          v69[1] = v45[1];
          v69[2] = v71;
          *v69 = v70;
          v73 = *(char **)(a1 + 96);
          v72 = *(char **)(a1 + 104);
          v74 = v69;
          if (v72 != v73)
          {
            do
            {
              v75 = *((_OWORD *)v72 - 3);
              v76 = *((_OWORD *)v72 - 2);
              *(__int128 *)((char *)v74 - 21) = *(_OWORD *)(v72 - 21);
              *(v74 - 3) = v75;
              *(v74 - 2) = v76;
              v74 -= 3;
              v72 -= 48;
            }
            while (v72 != v73);
            v72 = (char *)*v124;
          }
          v63 = v69 + 3;
          *(_QWORD *)(a1 + 96) = v74;
          *(_QWORD *)(a1 + 104) = v69 + 3;
          *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
          if (v72)
          {
            v77 = v72;
            goto LABEL_114;
          }
LABEL_115:
          *(_QWORD *)(a1 + 104) = v63;
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!(_BYTE)v128)
            goto LABEL_59;
LABEL_54:
          v123 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
          v56 = *((unsigned __int8 *)v45 + 41);
          v121 = *((_BYTE *)v45 + 40);
          v122 = v52;
          if ((_BYTE)v128)
          {
            if ((v44 & 1) != 0)
            {
              v57 = *((_QWORD *)&v127 + 1);
              if (v119 == *((_QWORD *)&v127 + 1))
              {
                if (*((_BYTE *)v45 + 42))
                {
                  v58 = 1;
                  v57 = v119;
                  goto LABEL_86;
                }
LABEL_85:
                ++*(_QWORD *)(a1 + 120);
                v58 = 1;
              }
              else
              {
                if (*(_BYTE *)(a1 + 24))
                  v58 = 1;
                else
                  v58 = *((unsigned __int8 *)v45 + 42);
                if (!*((_BYTE *)v45 + 42) && *(_BYTE *)(a1 + 24))
                  goto LABEL_85;
              }
            }
            else
            {
              if (!*((_BYTE *)v45 + 42))
                ++*(_QWORD *)(a1 + 120);
              v58 = 1;
              v57 = *((_QWORD *)&v127 + 1);
              v119 = *((_QWORD *)&v127 + 1);
            }
LABEL_86:
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(a1, v57);
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              if (v78)
              {
                objc_msgSend(v118, "objectForKeyedSubscript:", v78);
                v79 = (void *)objc_claimAutoreleasedReturnValue();
                v80 = v79;
                if (v79)
                {
                  if (objc_msgSend(v79, "longLongValue") != v57 && !*(_BYTE *)(a1 + 24))
                    goto LABEL_96;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v57);
                  v81 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v78);

                }
                v82 = HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(a1, v57);
                v83 = HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(a1, v82);
                if (!v56)
                  *v83 = (uint64_t *)((char *)*v83 + 1);
                LOBYTE(v56) = 1;
LABEL_96:

              }
            }
            v44 = 1;
            if (v51)
            {
LABEL_99:
              v84 = v58 != 0;
              v86 = *(char **)(a1 + 104);
              v85 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v86 < v85)
              {
                *(double *)v86 = v54;
                *((double *)v86 + 1) = v53;
                *((_QWORD *)v86 + 2) = v47;
                *((_QWORD *)v86 + 3) = v123;
                v86[32] = v51;
                v86[33] = v122;
                v86[40] = v121;
                v86[41] = v56;
                v63 = v86 + 48;
                v86[42] = v84;
                goto LABEL_115;
              }
              v77 = (char *)*v124;
              v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-*v124] >> 4);
              v88 = v87 + 1;
              if (v87 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v77) >> 4);
              if (2 * v89 > v88)
                v88 = 2 * v89;
              if (v89 >= 0x2AAAAAAAAAAAAAALL)
                v90 = 0x555555555555555;
              else
                v90 = v88;
              if (v90)
              {
                v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                v77 = *(char **)(a1 + 96);
                v86 = *(char **)(a1 + 104);
              }
              else
              {
                v91 = 0;
              }
              v92 = v90 + 48 * v87;
              *(double *)v92 = v54;
              *(double *)(v92 + 8) = v53;
              *(_QWORD *)(v92 + 16) = v47;
              *(_QWORD *)(v92 + 24) = v123;
              *(_BYTE *)(v92 + 32) = v51;
              *(_BYTE *)(v92 + 33) = v122;
              *(_BYTE *)(v92 + 40) = v121;
              *(_BYTE *)(v92 + 41) = v56;
              *(_BYTE *)(v92 + 42) = v84;
              v93 = v92;
              if (v86 != v77)
              {
                do
                {
                  v94 = *((_OWORD *)v86 - 3);
                  v95 = *((_OWORD *)v86 - 2);
                  *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                  *(_OWORD *)(v93 - 48) = v94;
                  *(_OWORD *)(v93 - 32) = v95;
                  v93 -= 48;
                  v86 -= 48;
                }
                while (v86 != v77);
                v77 = (char *)*v124;
              }
              v63 = (_OWORD *)(v92 + 48);
              *(_QWORD *)(a1 + 96) = v93;
              *(_QWORD *)(a1 + 104) = v92 + 48;
              *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
              if (v77)
LABEL_114:
                operator delete(v77);
              goto LABEL_115;
            }
          }
          else
          {
            v58 = *((unsigned __int8 *)v45 + 42);
            if (v51)
              goto LABEL_99;
          }
        }
        v45 += 3;
        if (v45 == v7)
          goto LABEL_117;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_128:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(_QWORD *)(a1 + 96);
        v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&v126 = v10;
        *((double *)&v126 + 1) = v9;
        *(double *)&v127 = v17;
        *((_QWORD *)&v127 + 1) = v12;
        LOBYTE(v128) = v16;
        BYTE1(v128) = v14;
        *(_DWORD *)((char *)&v128 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v128) = *(_WORD *)(v103 + 38);
        *(double *)&v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&v130 = v11;
        *((_QWORD *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
        v105 = v104 != 0;
        v106 = v102 != 0;
        v107 = v101 != 0;
        if ((_BYTE)v128)
        {
          if (!v101)
            ++*(_QWORD *)(a1 + 120);
          if (*(_BYTE *)(a1 + 25))
          {
            v108 = HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v127 + 1));
            v109 = HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(a1, v108);
            if (!v102)
              *v109 = (uint64_t *)((char *)*v109 + 1);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v125) = v131;
          v110 = v130;
          v111 = (char *)*v124;
          *(_OWORD *)v111 = v129;
          *((_OWORD *)v111 + 1) = v110;
          *((_QWORD *)v111 + 4) = v125;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_138;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_128;
  }
}

void sub_1B7D9A70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 176);
  v3 = (uint64_t **)(a1 + 176);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 256), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 296);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D9A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsPresence>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 336);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D9A9A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsPresence>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsPresence>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsPresence>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x58uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 232);
  v7 = *(char **)(*(_QWORD *)a4 + 240);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 232);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 232);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 240);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 232);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 240);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 232);
      v15 = *(char **)(*(_QWORD *)a4 + 240);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 240);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 240);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 232);
          v25 = *(char **)(*(_QWORD *)a4 + 240);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 240);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 240);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 232);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 232);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 240);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 232);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 240);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 232);
      v41 = *(char **)(*(_QWORD *)a4 + 240);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 240);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 240);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 232);
      v11 = *(char **)(*(_QWORD *)a3 + 240);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 240);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 240);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 232);
      v24 = *(char **)(*(_QWORD *)a3 + 240);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 240);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 240);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 232);
            v31 = *(char **)(*(_QWORD *)a3 + 240);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 240);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 240);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 232);
    v14 = *(char **)(*(_QWORD *)a5 + 240);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 240);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 240);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 232);
        v23 = *(char **)(*(_QWORD *)a5 + 240);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 240);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 240);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 232);
            v32 = *(char **)(*(_QWORD *)a5 + 240);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 240);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 240);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsPresence>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsPresence>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 232);
    v16 = *(char **)(*(_QWORD *)a6 + 240);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 240);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 240);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 232);
        v25 = *(char **)(*(_QWORD *)a6 + 240);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 240);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 240);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 232);
            v34 = *(char **)(*(_QWORD *)a6 + 240);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 240);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 240);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 232);
                v43 = *(char **)(*(_QWORD *)a6 + 240);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 240);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 240);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D090B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D090B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addStatisticsFromFinishedBucket<HDStatisticsPresence>(HKStatistics *,HDStatisticsBucket<HDStatisticsPresence> const&)::{lambda(HDStatisticsPresence const&)#1}>,HDStatisticsPresence const& ()(HDStatisticsPresence const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 528))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsPresence>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D9C9B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 528))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 496);
      v7 = *(_QWORD *)(a1 + 504);
      if (v7 == v6)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsPresence>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsPresence>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_didChangeBucket(a1, v9);
      if (v7 != v6)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D9CC34(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsPresence>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 200, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 168) || *(double *)(a1 + 144) <= v7)
  {
    *(double *)(a1 + 136) = v6;
    *(double *)(a1 + 144) = v7;
    *(double *)(a1 + 152) = v8;
    *(_QWORD *)(a1 + 160) = v9;
    *(_BYTE *)(a1 + 168) = v10;
    *(_BYTE *)(a1 + 169) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsPresence>::_canonicalSourceIDForSourceID(v5, v14),
         v51 = HDStatisticsBucket<HDStatisticsPresence>::_statisticsForSource(v5, v50),
         !*((_BYTE *)v51 + 40))
     || *((double *)v51 + 2) <= v7))
  {
    *((double *)v51 + 1) = v6;
    *((double *)v51 + 2) = v7;
    *((double *)v51 + 3) = v8;
    v51[4] = v9;
    *((_BYTE *)v51 + 40) = v10;
    *((_BYTE *)v51 + 41) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 392);
  v53 = *(_QWORD *)(a1 + 400);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 384);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 384);
    v63 = *(char **)(a1 + 392);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 384);
    }
    *(_QWORD *)(a1 + 384) = v61;
    *(_QWORD *)(a1 + 392) = v54;
    *(_QWORD *)(a1 + 400) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 392) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 530))
  {
    *(_BYTE *)(a1 + 532) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 532) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D9D240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsPresence>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 384), *(_QWORD *)(a1 + 392), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsPresence>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsPresence>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D9D328(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsPresence>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 408), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  if (*(_QWORD *)(v8 + 152))
  {
    v9 = *(_QWORD *)(a1 + 184);
    v10 = *(_QWORD **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = a1 + 184;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 408));
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 532))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 532) = 0;
  }

}

void sub_1B7D9D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D9D57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 544));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 528) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D9D8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C405E2A77A1);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D9DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsPresence>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsPresence>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D9DCF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 528))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsPresence>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D9E9C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D9EA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsPresenceE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsPresence>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D09160;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_WORD *)(a1 + 728) = 1;
  *(_BYTE *)(a1 + 730) = 0;
  *(_BYTE *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 736) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D09160;
  v2 = *(void **)(a1 + 760);
  if (v2)
  {
    *(_QWORD *)(a1 + 768) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 696);
  if (v3)
  {
    *(_QWORD *)(a1 + 704) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 728) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7D9EBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 736) = v4;
    v3 = v5;
  }

}

void sub_1B7D9EC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 93, a2);
  v7 = a2;
  v4 = a1[93];
  v5 = a1[90];
  a1[90] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[90]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D9EDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[72];

  if (*(_BYTE *)(a1 + 728))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D9EE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 730))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 729))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 728))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 731))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 768);
      v20 = *(_QWORD *)(a1 + 776);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 760);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 768);
        v35 = *(char **)(a1 + 760);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 760);
        }
        *(_QWORD *)(a1 + 760) = v30;
        *(_QWORD *)(a1 + 768) = v23;
        *(_QWORD *)(a1 + 776) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 768) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7D9F114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 730))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 730) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 729))
    goto LABEL_5;
  v9 = *(void **)(a1 + 752);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_414);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 752);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 752);
  *(_QWORD *)(a1 + 752) = 0;

  *(_BYTE *)(a1 + 729) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 760);
    *(_QWORD *)(a1 + 776) = 0;
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 760);
      v37 = *(__int128 **)(a1 + 768);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 768);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 768) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 760);
  v39 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 704) != *(_QWORD *)(a1 + 696))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 704) != *(_QWORD *)(a1 + 696));
  }
  *(_BYTE *)(a1 + 730) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 732))
    {
      *(_BYTE *)(a1 + 732) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 730) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D9F80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 730) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 731) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 730))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 730))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 752);
    *(_QWORD *)(a1 + 752) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 729) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 729))
  {
    v8 = *(void **)(a1 + 752);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 752);
      *(_QWORD *)(a1 + 752) = v9;

      v8 = *(void **)(a1 + 752);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D9FB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 728) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 728) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D9FC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 728) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 728), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::archive((uint64_t)v27, a1 + 240);
}

void sub_1B7D9FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t j;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  id v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  _BYTE v67[576];
  __int128 v68;
  __int128 v69;
  int8x16_t v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  void *__p;
  char *v78;
  unint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[32];
  __int128 v85;
  _BYTE v86[32];
  __int128 v87;
  __int128 v88;
  _QWORD v89[10];
  uint64_t **v90;
  uint64_t *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  __int128 v104;
  __int128 v105;
  int v106;
  void (**v107)(statistics::StatisticsEngine *__hidden);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _BYTE v114[9];
  unint64_t v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int16 v133;

  v62 = a2;
  *(_BYTE *)(a1 + 728) = objc_msgSend(v62, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v62;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v67, 0, -1.79769313e308, 1.79769313e308);
  v68 = 0u;
  v69 = 0u;
  v115 = 0;
  v65 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v114, (const unsigned __int8 *)objc_msgSend(v65, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v115));
  v64 = a1;
  v107 = &off_1E6D09A88;
  v108 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  v113 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v107, (PB::Reader *)v114);
  v66 = v109;
  if (v108)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    __p = 0;
    v79 = 0;
    v78 = 0;
    v80 = 0;
    v81 = 0u;
    v82 = 0u;
    v83 = xmmword_1B7F54B10;
    *(_OWORD *)&v84[8] = xmmword_1B7F54B20;
    *(_QWORD *)v84 = 0;
    *(_QWORD *)&v84[24] = 0;
    v85 = xmmword_1B7F54B30;
    *(_OWORD *)&v86[8] = xmmword_1B7F54B40;
    *(_QWORD *)v86 = 0;
    *(_QWORD *)&v86[24] = 0;
    v87 = xmmword_1B7F54B50;
    *(_QWORD *)&v88 = 0;
    *((_QWORD *)&v88 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    memset(v89, 0, 74);
    v92 = 0;
    v91 = 0;
    v90 = &v91;
    v93 = 0u;
    v94 = 0u;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0;
    v100 = 1065353216;
    v101 = 0u;
    v102 = 0u;
    v103 = 1065353216;
    v104 = 0u;
    v105 = 0u;
    v106 = 1065353216;
    v70 = vextq_s8(*(int8x16_t *)(v108 + 8), *(int8x16_t *)(v108 + 8), 8uLL);
    v4 = *(_QWORD *)(v108 + 72);
    v71 = *(_QWORD *)(v108 + 64);
    v72 = *(_WORD *)(v108 + 185);
    v74 = vextq_s8(*(int8x16_t *)(v108 + 24), *(int8x16_t *)(v108 + 24), 8uLL);
    v75 = v4;
    v5 = *(_QWORD *)(v108 + 80);
    v6 = *(_QWORD *)(v108 + 88);
    v63 = (_QWORD *)v108;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v79)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v78;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v78 = (char *)(v19 + 6);
          v79 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v78 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v63[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v116, v23);
      v80 = v116;
      *(_OWORD *)v86 = v123;
      *(_OWORD *)&v86[16] = v124;
      v87 = v125;
      v88 = v126;
      v83 = v119;
      *(_OWORD *)v84 = v120;
      *(_OWORD *)&v84[16] = v121;
      v85 = v122;
      v81 = v117;
      v82 = v118;
      v89[0] = v127;
      if (v89[1])
      {
        v89[2] = v89[1];
        operator delete((void *)v89[1]);
      }
      *(_OWORD *)&v89[1] = v128;
      v89[3] = v129;
      v129 = 0;
      v128 = 0uLL;
      v89[4] = v130;
      *(_OWORD *)&v89[5] = v131;
      *(_OWORD *)&v89[7] = v132;
      LOWORD(v89[9]) = v133;
    }
    v24 = (_QWORD **)v63[17];
    for (i = (_QWORD **)v63[18]; v24 != i; ++v24)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v116, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v91;
      v29 = &v91;
      v30 = &v91;
      if (v91)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x120uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 216) = 0u;
      *(_OWORD *)(v33 + 232) = 0u;
      *(_OWORD *)(v33 + 248) = 0u;
      *((_QWORD *)v33 + 35) = 0;
      *(_OWORD *)(v33 + 264) = 0u;
      *((_OWORD *)v33 + 5) = xmmword_1B7F54B10;
      *(_OWORD *)(v33 + 104) = xmmword_1B7F54B20;
      *((_OWORD *)v33 + 8) = xmmword_1B7F54B30;
      *(_OWORD *)(v33 + 152) = xmmword_1B7F54B40;
      *((_OWORD *)v33 + 11) = xmmword_1B7F54B50;
      *((_QWORD *)v33 + 25) = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(v33 + 266) = 0u;
      *((_OWORD *)v33 + 15) = 0u;
      *((_OWORD *)v33 + 16) = 0u;
      *((_OWORD *)v33 + 13) = 0u;
      *((_OWORD *)v33 + 14) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v90)
      {
        v90 = (uint64_t **)*v90;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v91, v32);
      ++v92;
LABEL_37:
      *((_DWORD *)v33 + 10) = v116;
      v34 = v122;
      *((_OWORD *)v33 + 7) = v121;
      *((_OWORD *)v33 + 8) = v34;
      v35 = v120;
      *((_OWORD *)v33 + 5) = v119;
      *((_OWORD *)v33 + 6) = v35;
      v36 = v126;
      *((_OWORD *)v33 + 11) = v125;
      *((_OWORD *)v33 + 12) = v36;
      v37 = v124;
      *((_OWORD *)v33 + 9) = v123;
      *((_OWORD *)v33 + 10) = v37;
      v38 = v118;
      *((_OWORD *)v33 + 3) = v117;
      *((_OWORD *)v33 + 4) = v38;
      v39 = (void *)*((_QWORD *)v33 + 27);
      *((_QWORD *)v33 + 26) = v127;
      if (v39)
      {
        *((_QWORD *)v33 + 28) = v39;
        operator delete(v39);
        *((_QWORD *)v33 + 27) = 0;
        *((_QWORD *)v33 + 28) = 0;
        *((_QWORD *)v33 + 29) = 0;
      }
      *(_OWORD *)(v33 + 216) = v128;
      *((_QWORD *)v33 + 29) = v129;
      *((_QWORD *)v33 + 30) = v130;
      v40 = v132;
      *(_OWORD *)(v33 + 248) = v131;
      v129 = 0;
      v128 = 0uLL;
      *(_OWORD *)(v33 + 264) = v40;
      *((_WORD *)v33 + 140) = v133;
    }
    v41 = v63[5];
    for (j = v63[6]; v41 != j; v41 += 8)
    {
      v44 = *(double *)(*(_QWORD *)v41 + 8);
      v43 = *(double *)(*(_QWORD *)v41 + 16);
      if (v44 >= v43)
        v45 = *(double *)(*(_QWORD *)v41 + 16);
      else
        v45 = *(double *)(*(_QWORD *)v41 + 8);
      if (v43 < v44)
        v43 = *(double *)(*(_QWORD *)v41 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=((uint64_t)v67, (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  v46 = v110;
  v47 = v111;
  if (v110 != v111)
  {
    v48 = *((_QWORD *)&v68 + 1);
    do
    {
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 24);
      v50 = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v51 = *(_QWORD *)(*(_QWORD *)v46 + 8);
      v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if (v48 >= (unint64_t)v69)
      {
        v53 = (void *)v68;
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v68) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - v68) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
        {
          v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          v48 = *((_QWORD *)&v68 + 1);
          v53 = (void *)v68;
        }
        else
        {
          v57 = 0;
        }
        v58 = v56 + 40 * v54;
        *(_QWORD *)v58 = v50;
        *(_QWORD *)(v58 + 8) = v49;
        *(_QWORD *)(v58 + 16) = v51;
        *(_QWORD *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            v60 = *(_OWORD *)(v48 - 40);
            v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          v53 = (void *)v68;
        }
        *(_QWORD *)&v68 = v59;
        v48 = v58 + 40;
        *((_QWORD *)&v68 + 1) = v58 + 40;
        *(_QWORD *)&v69 = v56 + 40 * v57;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v48 = v50;
        *(_QWORD *)(v48 + 8) = v49;
        *(_QWORD *)(v48 + 16) = v51;
        *(_QWORD *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((_QWORD *)&v68 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v107);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v64 + 112), (uint64_t)&v66);
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v67);

}

void sub_1B7DA0670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x4F0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x4C8]);
  v29 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v29;
    operator delete(v29);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a11);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x478]);
  v30 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v31;
    operator delete(v31);
  }
  objc_destroyWeak((id *)&STACK[0x358]);
  v32 = (void *)STACK[0x340];
  if (STACK[0x340])
  {
    STACK[0x348] = (unint64_t)v32;
    operator delete(v32);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x548]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)&a28);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_1B7F54B50;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 1065353216;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(_QWORD *)(a1 + 592) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 536);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 496);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 456);
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 392);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 376));
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    v2 = (void *)a1[27];
    if (v2)
    {
      a1[28] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[576];
  uint64_t v18;
  _BYTE v19[576];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[512];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 744));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 728) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7DA0C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 73), (__n128 *)(a2 + 584));
  v4 = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  v5 = (void *)a1[76];
  a1[76] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v12;
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  v16 = *(_OWORD *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 240);
  v18 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v18;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 296), *(const void **)(a2 + 296), *(_QWORD *)(a2 + 304), (uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v19 = *(_OWORD *)(a2 + 344);
  v20 = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v19;
  v21 = (_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 360) = v20;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v22 = *(_QWORD **)(a2 + 368);
  if (v22 != (_QWORD *)(a2 + 376))
  {
    v23 = 0;
    v24 = (_QWORD *)(a1 + 376);
    while (1)
    {
      v25 = (_QWORD *)(a1 + 376);
      if (v24 == v21)
        goto LABEL_12;
      v26 = v23;
      v27 = (_QWORD *)(a1 + 376);
      if (v23)
      {
        do
        {
          v25 = v26;
          v26 = (_QWORD *)v26[1];
        }
        while (v26);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v27[2];
          v28 = *v25 == (_QWORD)v27;
          v27 = v25;
        }
        while (v28);
      }
      v29 = v22[4];
      if (v25[4] < v29)
      {
LABEL_12:
        if (v23)
          v30 = (uint64_t **)v25;
        else
          v30 = (uint64_t **)(a1 + 376);
        if (v23)
          v31 = (uint64_t **)(v25 + 1);
        else
          v31 = (uint64_t **)(a1 + 376);
        if (!*v31)
        {
LABEL_28:
          v34 = (char *)operator new(0x120uLL);
          *((_QWORD *)v34 + 4) = v22[4];
          *((_DWORD *)v34 + 10) = *((_DWORD *)v22 + 10);
          v35 = *((_OWORD *)v22 + 4);
          *((_OWORD *)v34 + 3) = *((_OWORD *)v22 + 3);
          *((_OWORD *)v34 + 4) = v35;
          v36 = *((_OWORD *)v22 + 5);
          v37 = *((_OWORD *)v22 + 6);
          v38 = *((_OWORD *)v22 + 8);
          *((_OWORD *)v34 + 7) = *((_OWORD *)v22 + 7);
          *((_OWORD *)v34 + 8) = v38;
          *((_OWORD *)v34 + 5) = v36;
          *((_OWORD *)v34 + 6) = v37;
          v39 = *((_OWORD *)v22 + 9);
          v40 = *((_OWORD *)v22 + 10);
          v41 = *((_OWORD *)v22 + 12);
          *((_OWORD *)v34 + 11) = *((_OWORD *)v22 + 11);
          *((_OWORD *)v34 + 12) = v41;
          *((_OWORD *)v34 + 9) = v39;
          *((_OWORD *)v34 + 10) = v40;
          v42 = v22[26];
          *((_QWORD *)v34 + 27) = 0;
          *((_QWORD *)v34 + 26) = v42;
          *((_QWORD *)v34 + 28) = 0;
          *((_QWORD *)v34 + 29) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v34 + 27, (const void *)v22[27], v22[28], (uint64_t)(v22[28] - v22[27]) >> 4);
          *((_QWORD *)v34 + 30) = v22[30];
          v43 = *(_OWORD *)(v22 + 31);
          v44 = *(_OWORD *)(v22 + 33);
          *((_QWORD *)v34 + 35) = v22[35];
          *(_OWORD *)(v34 + 264) = v44;
          *(_OWORD *)(v34 + 248) = v43;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 368), (uint64_t)v30, v31, (uint64_t *)v34);
        }
      }
      else
      {
        v31 = (uint64_t **)(a1 + 376);
        v30 = (uint64_t **)(a1 + 376);
        if (!v23)
          goto LABEL_28;
        v32 = v23;
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v32;
            v33 = v32[4];
            if (v33 <= v29)
              break;
            v32 = *v30;
            v31 = v30;
            if (!*v30)
              goto LABEL_28;
          }
          if (v33 >= v29)
            break;
          v32 = v30[1];
          if (!v32)
          {
            v31 = v30 + 1;
            goto LABEL_28;
          }
        }
      }
      v45 = (_QWORD *)v22[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v22[2];
          v28 = *v46 == (_QWORD)v22;
          v22 = v46;
        }
        while (!v28);
      }
      if (v46 == (_QWORD *)(a2 + 376))
        break;
      v23 = (_QWORD *)*v21;
      v24 = *(_QWORD **)(a1 + 368);
      v22 = v46;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 392, a2 + 392);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 432), *(const void **)(a2 + 432), *(_QWORD *)(a2 + 440), (uint64_t)(*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 456, a2 + 456);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 496, a2 + 496);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 536, a2 + 536);
  return a1;
}

void sub_1B7DA1074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 440) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 304) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  v10 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v11;
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 176);
  v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  v15 = *(_OWORD *)(a2 + 224);
  v16 = *(_OWORD *)(a2 + 240);
  v17 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v17;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v18 = *(_OWORD *)(a2 + 328);
  v19 = *(_OWORD *)(a2 + 344);
  *(_WORD *)(a1 + 360) = *(_WORD *)(a2 + 360);
  *(_OWORD *)(a1 + 328) = v18;
  *(_OWORD *)(a1 + 344) = v19;
  v20 = a1 + 376;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  v21 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v21;
  v22 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 384) = v22;
  if (v22)
  {
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(a2 + 368) = a2 + 376;
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(a2 + 384) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 368) = v20;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 432, (__n128 *)(a2 + 432));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 456, (uint64_t *)(a2 + 456));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 496, (uint64_t *)(a2 + 496));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 536, (uint64_t *)(a2 + 536));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  id *v2;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  __n128 v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  id v32;
  __n128 v33;
  id v34;
  uint64_t **i;
  uint64_t *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  void *v61;
  __n128 v62;
  id v63;
  uint64_t *v64;
  uint64_t *j;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t **k;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  int v90;
  void *v91;
  void *v92;
  int v93;
  void *v95;
  id v96;
  uint64_t v98;
  id v99;
  id v100;
  _BYTE v101[16];
  uint64_t **v102;
  void *__p;
  void *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  _QWORD v109[3];
  _QWORD *v110;
  _BYTE v111[24];
  _BYTE *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v95 = (void *)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v98 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v95, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 432);
      v16 = *(uint64_t **)(a2 + 440);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained(v2);
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v2 = (id *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v2);

    }
  }

  v105[0] = &off_1E6D09350;
  v106 = v105;
  v96 = v12;
  v20 = (uint64_t)v106;
  if (!v106)
    goto LABEL_22;
  if (v106 != v105)
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*v106 + 16))(v106);
LABEL_22:
    v110 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v110 = v109;
  (*(void (**)(uint64_t, _QWORD *))(v105[0] + 24))((uint64_t)v105, v109);
LABEL_24:
  v112 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D09230;
  v22 = v21 + 1;
  v23 = (uint64_t)v110;
  if (!v110)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v110 != v109)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v110 + 16))(v110, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v109[0] + 24))(v109);
LABEL_29:
  v112 = v21;
  v99 = v96;
  v24 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v101, v98);
  if (!v112)
    std::__throw_bad_function_call[abi:ne180100]();
  v27 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v112 + 48))(v112, v101, v26);
  v28 = *(double **)(v27 + 8);
  v29 = 0.0;
  while (v28 != *(double **)(v27 + 16))
  {
    v31 = *v28;
    v30 = v28[1];
    v28 += 2;
    v29 = v29 + v30 - v31;
  }
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v29 + *(double *)(v27 + 32));
  v32 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "setDuration:", v32);

  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }

  v33 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v101, v98);
  if (!v112)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v99, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v112 + 48))(v112, v101, v33));
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v34 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v32 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v101, v98);
    for (i = v102; i; i = (uint64_t **)*i)
    {
      v36 = i[2];
      v37 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v112)
        std::__throw_bad_function_call[abi:ne180100]();
      v39 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v112 + 48))(v112, (uint64_t *)i + 3);
      v40 = *(double **)(v39 + 8);
      v41 = 0.0;
      while (v40 != *(double **)(v39 + 16))
      {
        v43 = *v40;
        v42 = v40[1];
        v40 += 2;
        v41 = v41 + v42 - v43;
      }
      objc_msgSend(v37, "quantityWithUnit:doubleValue:", v38, v41 + *(double *)(v39 + 32));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setObject:forKeyedSubscript:", v44, v36);

      if (!v112)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v112 + 48))(v112, (uint64_t *)i + 3));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "setObject:forKeyedSubscript:", v2, v36);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v101);
    objc_msgSend(v99, "setDurationBySource:", v34);
    objc_msgSend(v99, "setDataCountBySource:", v32);

  }
  v45 = v112;
  if (v112 == v111)
  {
    v46 = 4;
    v45 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_52;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_52:
  v47 = v110;
  if (v110 == v109)
  {
    v48 = 4;
    v47 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_57;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_57:
  v49 = (uint64_t)v106;
  if (!v106)
  {
LABEL_60:
    v108 = (_QWORD *)v49;
    goto LABEL_62;
  }
  if (v106 != v105)
  {
    v49 = (*(uint64_t (**)(void))(*v106 + 16))();
    goto LABEL_60;
  }
  v108 = v107;
  (*(void (**)(uint64_t, _QWORD *))(v105[0] + 24))((uint64_t)v105, v107);
LABEL_62:
  v112 = 0;
  v50 = operator new(0x28uLL);
  *v50 = &off_1E6D092C0;
  v51 = (uint64_t)v108;
  if (!v108)
  {
LABEL_65:
    v50[4] = v51;
    goto LABEL_67;
  }
  if (v108 != v107)
  {
    v51 = (*(uint64_t (**)(void))(*v108 + 16))();
    goto LABEL_65;
  }
  v50[4] = v50 + 1;
  (*(void (**)(_QWORD *))(v107[0] + 24))(v107);
LABEL_67:
  v112 = v50;
  v100 = v99;
  v52 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v101, v98);
  if (!v112)
    std::__throw_bad_function_call[abi:ne180100]();
  v53 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v112 + 48))(v112, v101, v52);
  v54 = 0;
  v55 = 0.0;
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v58 = v53 + v54;
    v59 = *(double *)(v53 + v54 + 24);
    if (v59 > 2.22507386e-308 && v59 >= v55)
    {
      if (v59 <= v55)
      {
        if (*(_QWORD *)(v53 + v54 + 32) < v56)
        {
          v57 = *(_QWORD *)(v58 + 16);
          v55 = *(double *)(v53 + v54 + 24);
          v56 = *(_QWORD *)(v53 + v54 + 32);
        }
      }
      else
      {
        v57 = *(_QWORD *)(v58 + 16);
        v56 = *(_QWORD *)(v53 + v54 + 32);
        v55 = *(double *)(v53 + v54 + 24);
      }
    }
    v54 += 24;
  }
  while (v54 != 144);
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if (v57 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v57, v55);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setCategoryValue:", v61);

  }
  v62 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v101, v98);
  if (!v112)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v100, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v112 + 48))(v112, v101, v62));
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v63 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v64 = *(uint64_t **)(v98 + 432);
    for (j = *(uint64_t **)(v98 + 440); v64 != j; ++v64)
    {
      v66 = *v64;
      v2 = (id *)objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(v2, "sourceForSourceID:", v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();

      if (v67 && (objc_msgSend(v63, "containsObject:", v67) & 1) == 0)
        objc_msgSend(v63, "addObject:", v67);

    }
    v68 = (void *)objc_msgSend(v63, "copy");
    objc_msgSend(v100, "_setSources:", v68);

    v32 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v69 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v101, v98);
    for (k = v102; k; k = (uint64_t **)*k)
    {
      v71 = k[2];
      if (!v112)
        goto LABEL_139;
      v72 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v112 + 48))(v112, (uint64_t *)k + 3);
      v73 = 0;
      v74 = 0.0;
      v75 = 0x7FFFFFFFFFFFFFFFLL;
      v76 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v77 = v72 + v73;
        v78 = *(double *)(v72 + v73 + 24);
        if (v78 > 2.22507386e-308 && v78 >= v74)
        {
          if (v78 <= v74)
          {
            if (*(_QWORD *)(v72 + v73 + 32) < v75)
            {
              v76 = *(_QWORD *)(v77 + 16);
              v74 = *(double *)(v72 + v73 + 24);
              v75 = *(_QWORD *)(v72 + v73 + 32);
            }
          }
          else
          {
            v76 = *(_QWORD *)(v77 + 16);
            v75 = *(_QWORD *)(v72 + v73 + 32);
            v74 = *(double *)(v72 + v73 + 24);
          }
        }
        v73 += 24;
      }
      while (v73 != 144);
      if (v76 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v74);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "setObject:forKeyedSubscript:", v80, v71);

      }
      if (!v112)
LABEL_139:
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v112 + 48))(v112, (uint64_t *)k + 3));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v69, "setObject:forKeyedSubscript:", v2, v71);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v101);
    objc_msgSend(v100, "setCategoryValueBySource:", v32);
    objc_msgSend(v100, "setDataCountBySource:", v69);

  }
  v81 = v112;
  if (v112 == v111)
  {
    v82 = 4;
    v81 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_113;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_113:
  v83 = v108;
  if (v108 == v107)
  {
    v84 = 4;
    v83 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_118;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_118:

  v85 = v106;
  if (v106 == v105)
  {
    v86 = 4;
    v85 = v105;
    goto LABEL_122;
  }
  if (v106)
  {
    v86 = 5;
LABEL_122:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "averageQuantity");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  if (v88)
  {
    objc_msgSend(v100, "averageQuantity");
    v32 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v32, "isCompatibleWithUnit:", v87) & 1) == 0)
    {

LABEL_137:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v87);
      goto LABEL_138;
    }
  }
  objc_msgSend(v100, "minimumQuantity");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89)
  {
    objc_msgSend(v100, "minimumQuantity");
    v2 = (id *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "isCompatibleWithUnit:", v87))
    {
      v90 = 1;
      goto LABEL_131;
    }
  }
  objc_msgSend(v100, "maximumQuantity");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  if (v91)
  {
    objc_msgSend(v100, "maximumQuantity");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = objc_msgSend(v92, "isCompatibleWithUnit:", v87);

    v90 = v93 ^ 1;
    if (v89)
      goto LABEL_131;
  }
  else
  {
    v90 = 0;
    if (v89)
    {
LABEL_131:

      if (v88)
        goto LABEL_132;
      goto LABEL_136;
    }
  }
  if (v88)
  {
LABEL_132:

    if ((v90 & 1) == 0)
      goto LABEL_138;
    goto LABEL_137;
  }
LABEL_136:

  if (v90)
    goto LABEL_137;
LABEL_138:

  return v100;
}

void sub_1B7DA1EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  if (v40)
  if (v38)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 416);
  v2 = *(_QWORD *)(a1 + 432);
  if (v1 != (*(_QWORD *)(a1 + 440) - v2) >> 3)
  {
    v4 = (void **)(a1 + 432);
    *(_QWORD *)(a1 + 440) = v2;
    std::vector<long long>::reserve((void **)(a1 + 432), v1);
    v5 = *(_QWORD **)(a1 + 408);
    if (v5)
    {
      v6 = *(char **)(a1 + 440);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 448);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 432);
            v6 = *(char **)(a1 + 440);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 432) = v16;
          *(_QWORD *)(a1 + 440) = v9;
          *(_QWORD *)(a1 + 448) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 440) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7DA23C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  double var0;
  uint64_t v47;
  int64_t v48;
  _BOOL4 var4;
  BOOL var5;
  double v51;
  int v52;
  int v53;
  unint64_t var3;
  _OWORD *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t *v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  double v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  unint64_t v103;
  uint64_t *v104;
  __int128 v105;
  char *v106;
  double v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  double **v111;
  id *location;
  void *v113;
  id v114;
  uint64_t *v115;
  int64_t v116;
  double **v117;
  char v118;
  BOOL v119;
  int64_t v120;
  void **v121;
  uint64_t v122;
  HDRawQuantitySample v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    v115 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v111 = (double **)(a1 + 296);
    v110 = (_QWORD *)(a1 + 376);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v107 = *(double *)(a1 + 56);
      if (v107 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages, HDStatisticsTimeInterval>>]");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v108, "handleFailureInFunction:file:lineNumber:description:", v109, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v107 = *(double *)(a1 + 56);
      }
      v5 = v107;
      if (v107 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      v37 = __clz(v8);
      if (WeakRetained)
      {
        *(_QWORD *)&v123.var0 = a1;
        v38 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v38;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v114 = 0;
      v113 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_109:
        *(double *)(a1 + 320) = HKIntervalMask<double>::removeIntervalsBefore(v111, v25) + *(double *)(a1 + 320);
        v92 = *(_QWORD **)(a1 + 368);
        if (v92 != v110)
        {
          do
          {
            *((double *)v92 + 30) = HKIntervalMask<double>::removeIntervalsBefore((double **)v92 + 27, v25)
                                  + *((double *)v92 + 30);
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v110);
        }
        *(double *)(a1 + 56) = v25;

        if (v113)
          operator delete(v113);
        goto LABEL_128;
      }
      v116 = 0;
      v43 = 0;
      v44 = v6;
      while (2)
      {
        v45 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v123.var0 = *(_OWORD *)v44;
        *(_OWORD *)&v123.var2 = v45;
        *(_QWORD *)&v123.var4 = *(_QWORD *)(v44 + 32);
        var0 = v123.var0;
        v47 = v45;
        if (*(double *)&v45 - v123.var1 - (v25 - v123.var1) < 0.01)
        {
          v48 = 0;
          var4 = 0;
          var5 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!v123.var4)
            goto LABEL_62;
LABEL_57:
          v119 = var5;
          v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          v52 = *(unsigned __int8 *)(v44 + 42);
          v53 = *(unsigned __int8 *)(v44 + 41);
          v118 = *(_BYTE *)(v44 + 40);
          if (!v123.var4)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            var3 = v123.var3;
            if (v116 == v123.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(v115, &v123, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(v115, &v123, v52 == 0);
            v52 = 1;
            var3 = v123.var3;
            v116 = v123.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v114, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (var4)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(double *)v82 = var0;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v120;
                  v82[32] = var4;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v121) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(double *)v88 = var0;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v120;
                *(_BYTE *)(v88 + 32) = var4;
                *(_BYTE *)(v88 + 33) = v119;
                *(_BYTE *)(v88 + 40) = v118;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v79 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(v79, &v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - v123.var1 < 0.01)
        {
          v123.var4 = 0;
          goto LABEL_62;
        }
        v48 = v123.var3;
        var5 = v123.var5;
        v123.var2 = v25;
        v51 = v25;
        var4 = v123.var4;
        if (v123.var4)
          goto LABEL_57;
LABEL_62:
        v55 = *(_OWORD **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *(_OWORD *)v44;
          v58 = *(_OWORD *)(v44 + 32);
          v55[1] = *(_OWORD *)(v44 + 16);
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v121) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v121) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (_OWORD *)(v63 + 48 * v60);
        v69 = *(_OWORD *)v44;
        v70 = *(_OWORD *)(v44 + 32);
        v68[1] = *(_OWORD *)(v44 + 16);
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(_OWORD *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 48;
        if ((__int128 *)v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(unsigned __int8 *)(v6 + 42);
        v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(unsigned __int8 *)(v6 + 40);
        v99 = *(double *)v6;
        v123.var1 = *(double *)(v6 + 8);
        v123.var2 = v15;
        v123.var3 = v11;
        v123.var4 = v14;
        v123.var5 = v13;
        *(_DWORD *)(&v123.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v123.var5 + 5) = *(_WORD *)(v6 + 38);
        *((double *)&v124 + 1) = v16;
        *(double *)&v125 = v10;
        *((_QWORD *)&v125 + 1) = v40;
        LOBYTE(v126) = v12;
        HIBYTE(v126) = v41;
        v123.var0 = v99;
        *(double *)&v124 = v99;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        v100 = v98 != 0;
        v101 = v97 != 0;
        v102 = v96 != 0;
        if (v123.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(v115, &v123, v96 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v103 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v123.var3);
            v104 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v103);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(v104, &v123, v97 == 0);
          }
          v100 = 1;
          v101 = 1;
          v102 = 1;
        }
        if ((_BYTE)v126)
        {
          LOWORD(v122) = v126;
          v105 = v125;
          v106 = (char *)*v121;
          *(_OWORD *)v106 = v124;
          *((_OWORD *)v106 + 1) = v105;
          *((_QWORD *)v106 + 4) = v122;
          v106[40] = v100;
          v106[41] = v101;
          v106[42] = v102;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7DA2D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  __int128 v9;
  void *v10;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v8 = 1;
LABEL_15:
        *(_DWORD *)result = v8;
        v9 = 0uLL;
        *(_OWORD *)(result + 1) = 0u;
        *(_OWORD *)(result + 3) = 0u;
        *(_OWORD *)(result + 5) = xmmword_1B7F54B10;
        result[7] = 0;
        *((_OWORD *)result + 4) = xmmword_1B7F54B20;
        result[10] = 0;
        *(_OWORD *)(result + 11) = xmmword_1B7F54B30;
        result[13] = 0;
        *((_OWORD *)result + 7) = xmmword_1B7F54B40;
        result[16] = 0;
        *(_OWORD *)(result + 17) = xmmword_1B7F54B50;
        result[19] = 0;
        *((_OWORD *)result + 10) = xmmword_1B7F54B60;
        v10 = (void *)result[22];
        if (v10)
        {
          v5[23] = (uint64_t)v10;
          operator delete(v10);
          v9 = 0uLL;
        }
        *((_OWORD *)v5 + 11) = v9;
        *((_OWORD *)v5 + 12) = v9;
        HDStatisticsSleepStages::addSample((HDStatisticsSleepStages *)(v5 + 1), a2, a3);
        v7 = v5 + 21;
        return HDStatisticsTimeInterval::addSample(v7, a2, a3);
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsSleepStages::addSample((HDStatisticsSleepStages *)(result + 1), a2, 1);
        return HDStatisticsTimeInterval::addSample(v5 + 21, a2, 1);
      }
      v8 = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)result)
  {
    ++result;
    if (!v5[1])
    {
      HDStatisticsSleepStages::addSample((HDStatisticsSleepStages *)result, a2, a3);
      v7 = v5 + 21;
      return HDStatisticsTimeInterval::addSample(v7, a2, a3);
    }
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 376);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 376);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 376) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 368);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 368), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 456), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 496);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7DA30B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 536);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7DA3184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x120uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    *((_QWORD *)v9 + 35) = 0;
    *(_OWORD *)(v9 + 264) = 0u;
    *((_OWORD *)v9 + 5) = xmmword_1B7F54B10;
    *(_OWORD *)(v9 + 104) = xmmword_1B7F54B20;
    *((_OWORD *)v9 + 8) = xmmword_1B7F54B30;
    *(_OWORD *)(v9 + 152) = xmmword_1B7F54B40;
    *((_OWORD *)v9 + 11) = xmmword_1B7F54B50;
    *((_QWORD *)v9 + 25) = 0x7FFFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 266) = 0u;
    *((_OWORD *)v9 + 15) = 0u;
    *((_OWORD *)v9 + 16) = 0u;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 14) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 432);
  v7 = *(char **)(*(_QWORD *)a4 + 440);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 432);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 432);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 440);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 432);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 440);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 432);
      v15 = *(char **)(*(_QWORD *)a4 + 440);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 440);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 440);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 432);
          v25 = *(char **)(*(_QWORD *)a4 + 440);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 440);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 440);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 432);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 432);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 440);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 432);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 440);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 432);
      v41 = *(char **)(*(_QWORD *)a4 + 440);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 440);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 440);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 432);
      v11 = *(char **)(*(_QWORD *)a3 + 440);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 440);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 440);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 432);
      v24 = *(char **)(*(_QWORD *)a3 + 440);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 440);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 440);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 432);
            v31 = *(char **)(*(_QWORD *)a3 + 440);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 440);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 440);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 432);
    v14 = *(char **)(*(_QWORD *)a5 + 440);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 440);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 440);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 432);
        v23 = *(char **)(*(_QWORD *)a5 + 440);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 440);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 440);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 432);
            v32 = *(char **)(*(_QWORD *)a5 + 440);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 440);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 440);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 432);
    v16 = *(char **)(*(_QWORD *)a6 + 440);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 440);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 440);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 432);
        v25 = *(char **)(*(_QWORD *)a6 + 440);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 440);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 440);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 432);
            v34 = *(char **)(*(_QWORD *)a6 + 440);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 440);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 440);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 432);
                v43 = *(char **)(*(_QWORD *)a6 + 440);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 440);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 440);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v2 = a2 + 120;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 176) = 0;
  v3 = a1 + 176;
  v5 = *(_QWORD *)(a2 + 288);
  v4 = *(const void **)(a2 + 296);
  *(_QWORD *)(a1 + 168) = v5;
  v6 = *(_QWORD *)(v2 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 176), v4, v6, (v6 - (uint64_t)v4) >> 4);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 200);
  result = *(__n128 *)(v2 + 208);
  v8 = *(_OWORD *)(v2 + 224);
  *(__n128 *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v8;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v2 + 240);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v54;
  unint64_t v55;
  _QWORD v56[2];
  char v57;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 368);
  v52 = (_QWORD *)(a2 + 376);
  if (v3 == (_QWORD *)(a2 + 376))
    return;
  v54 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_81;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v55 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x110uLL);
      v56[0] = v19;
      v56[1] = v54;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_OWORD *)(v19 + 248) = 0u;
      *((_QWORD *)v19 + 33) = 0;
      *((_OWORD *)v19 + 4) = xmmword_1B7F54B10;
      *(_OWORD *)(v19 + 88) = xmmword_1B7F54B20;
      *((_OWORD *)v19 + 7) = xmmword_1B7F54B30;
      *(_OWORD *)(v19 + 136) = xmmword_1B7F54B40;
      *((_OWORD *)v19 + 10) = xmmword_1B7F54B50;
      *((_QWORD *)v19 + 23) = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(v19 + 250) = 0u;
      *((_OWORD *)v19 + 14) = 0u;
      *((_OWORD *)v19 + 15) = 0u;
      *((_OWORD *)v19 + 12) = 0u;
      *((_OWORD *)v19 + 13) = 0u;
      v57 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v56[0];
        if (v37)
        {
          *(_QWORD *)v56[0] = *v37;
        }
        else
        {
          *(_QWORD *)v56[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v54;
          if (!*v12)
          {
LABEL_77:
            v56[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v56);
            goto LABEL_78;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_77;
      }
      v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_34;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v54;
            if (*v54)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v54;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_59:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          v51 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v51)
            operator delete(v51);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v55 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_78;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_78:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    v39 = *((_OWORD *)v3 + 4);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    *((_OWORD *)v12 + 3) = v39;
    v40 = *((_OWORD *)v3 + 5);
    v41 = *((_OWORD *)v3 + 6);
    v42 = *((_OWORD *)v3 + 8);
    *((_OWORD *)v12 + 6) = *((_OWORD *)v3 + 7);
    *((_OWORD *)v12 + 7) = v42;
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 5) = v41;
    v43 = *((_OWORD *)v3 + 9);
    v44 = *((_OWORD *)v3 + 10);
    v45 = *((_OWORD *)v3 + 12);
    *((_OWORD *)v12 + 10) = *((_OWORD *)v3 + 11);
    *((_OWORD *)v12 + 11) = v45;
    *((_OWORD *)v12 + 8) = v43;
    *((_OWORD *)v12 + 9) = v44;
    v12[24] = v3[26];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 200, (char *)v3[27], v3[28], (uint64_t)(v3[28] - v3[27]) >> 4);
    v12[28] = v3[30];
    v46 = *(_OWORD *)(v3 + 31);
    v47 = *(_OWORD *)(v3 + 33);
    *((_WORD *)v12 + 132) = *((_WORD *)v3 + 140);
    *(_OWORD *)(v12 + 31) = v47;
    *(_OWORD *)(v12 + 29) = v46;

LABEL_81:
    v48 = (_QWORD *)v3[1];
    if (v48)
    {
      do
      {
        v49 = v48;
        v48 = (_QWORD *)*v48;
      }
      while (v48);
    }
    else
    {
      do
      {
        v49 = (_QWORD *)v3[2];
        v50 = *v49 == (_QWORD)v3;
        v3 = v49;
      }
      while (!v50);
    }
    v3 = v49;
  }
  while (v49 != v52);
}

void sub_1B7DA61D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](v3 - 104);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D09230;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D09230;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D09230;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7DA63F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D09230;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 160;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D092C0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D092C0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D092C0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7DA6628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D092C0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D09350;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D09350;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 728))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 728))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7DA6928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 704);
      v7 = *(_QWORD *)(a1 + 696);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7DA6B30(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  unint64_t v65;
  char v66;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      v65 = 0;
      v21 = 0;
      v66 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (v19 >= 0.01)
      goto LABEL_27;
LABEL_25:
    v21 = v12;
    v28 = v14;
    v22 = v15;
    v18 = v16;
    if (!v21)
      return;
    goto LABEL_56;
  }
  if (v19 < 0.01)
    goto LABEL_25;
  if (v20 < 0.01)
    goto LABEL_10;
LABEL_27:
  v22 = v15;
  v65 = v14;
  v21 = v12;
  v66 = v13;
  v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    v13 = v66;
    v28 = v65;
    if (!v21)
      return;
    goto LABEL_56;
  }
LABEL_11:
  v63 = v16;
  v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 400, v14, v14);
  v23 = *(_QWORD *)(a1 + 112);
  if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v24 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v24 = v63;
  v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    v26 = *(double *)(a1 + 8);
    if (v63 >= v26)
      v26 = v63;
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    v27 = *(double *)(a1 + 16);
    if (v27 >= v64)
      v27 = v64;
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v24);
      v24 = v63;
      v25 = v64;
      v23 = *(_QWORD *)(a1 + 112);
    }
  }
LABEL_31:
  v32 = *(_QWORD *)(a1 + 120);
  if (v23 >= v32)
  {
    v34 = *(_QWORD *)(a1 + 104);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x2AAAAAAAAAAAAAALL)
      v38 = 0x555555555555555;
    else
      v38 = v36;
    if (v38)
    {
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      v24 = v63;
      v25 = v64;
    }
    else
    {
      v39 = 0;
    }
    v40 = v38 + 48 * v35;
    v41 = v38 + 48 * v39;
    *(_QWORD *)v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(_QWORD *)(v40 + 24) = v14;
    *(_BYTE *)(v40 + 32) = v12;
    *(_BYTE *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(_BYTE *)(v40 + 42) = 0;
    v33 = v40 + 48;
    v43 = *(char **)(a1 + 104);
    v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      v13 = v66;
      v28 = v65;
    }
    else
    {
      v13 = v66;
      v28 = v65;
      do
      {
        v44 = *((_OWORD *)v42 - 3);
        v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      v42 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v40;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 24) = v14;
    *(_BYTE *)(v23 + 32) = v12;
    *(_BYTE *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    v33 = v23 + 48;
    *(_BYTE *)(v23 + 42) = 0;
    v13 = v66;
    v28 = v65;
  }
  *(_QWORD *)(a1 + 112) = v33;
  if (!*(_BYTE *)(a1 + 368) || *(double *)(a1 + 344) <= v7)
  {
    *(_QWORD *)(a1 + 336) = v17;
    *(double *)(a1 + 344) = v7;
    *(double *)(a1 + 352) = v8;
    *(_QWORD *)(a1 + 360) = v9;
    *(_BYTE *)(a1 + 368) = v10;
    *(_BYTE *)(a1 + 369) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14), v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v46), !*((_BYTE *)v47 + 240))|| *((double *)v47 + 27) <= v7))
  {
    v47[26] = v17;
    *((double *)v47 + 27) = v7;
    *((double *)v47 + 28) = v8;
    v47[29] = v9;
    *((_BYTE *)v47 + 240) = v10;
    *((_BYTE *)v47 + 241) = v11;
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  v48 = *(_QWORD *)(a1 + 592);
  v49 = *(_QWORD *)(a1 + 600);
  if (v48 >= v49)
  {
    v51 = *(_QWORD *)(a1 + 584);
    v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x333333333333333)
      v55 = 0x666666666666666;
    else
      v55 = v53;
    if (v55)
      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    else
      v56 = 0;
    v57 = v55 + 40 * v52;
    v58 = v55 + 40 * v56;
    *(_QWORD *)v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(_QWORD *)(v57 + 24) = v28;
    *(_BYTE *)(v57 + 32) = v21;
    *(_BYTE *)(v57 + 33) = v13;
    v50 = v57 + 40;
    v59 = *(char **)(a1 + 592);
    v60 = *(char **)(a1 + 584);
    if (v59 != v60)
    {
      do
      {
        v61 = *(_OWORD *)(v59 - 40);
        v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      v59 = *(char **)(a1 + 584);
    }
    *(_QWORD *)(a1 + 584) = v57;
    *(_QWORD *)(a1 + 592) = v50;
    *(_QWORD *)(a1 + 600) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(_QWORD *)(v48 + 24) = v28;
    *(_BYTE *)(v48 + 32) = v21;
    v50 = v48 + 40;
    *(_BYTE *)(v48 + 33) = v13;
  }
  *(_QWORD *)(a1 + 592) = v50;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 730))
  {
    *(_BYTE *)(a1 + 732) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 732) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7DA70FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 584), *(_QWORD *)(a1 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7DA71E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  _QWORD *v16;
  _BYTE v17[20];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 608), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  memset(v17, 0, sizeof(v17));
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v17[4];
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 272) = 5;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = xmmword_1B7F54B60;
  v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(_QWORD *)(a1 + 312) = v9;
    operator delete(v9);
  }
  *(_WORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  if (*(_QWORD *)(a1 + 392))
  {
    v10 = *(_QWORD **)(a1 + 376);
    v11 = *(_QWORD *)(a1 + 384);
    *(_QWORD *)(a1 + 376) = a1 + 384;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    if (v10[1])
      v12 = (_QWORD *)v10[1];
    else
      v12 = v10;
    if (v12)
    {
      v13 = (_QWORD *)v12[2];
      if (v13)
      {
        v14 = (_QWORD *)*v13;
        if ((_QWORD *)*v13 == v12)
        {
          *v13 = 0;
          while (1)
          {
            v16 = (_QWORD *)v13[1];
            if (!v16)
              break;
            do
            {
              v13 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; v14 = (_QWORD *)v13[1])
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(v12);
        for (i = (_QWORD *)v13[2]; i; i = (_QWORD *)i[2])
          v13 = i;
        v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 608));
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 732))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 732) = 0;
  }

}

void sub_1B7DA7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 728))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7DA74FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 744));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 728) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7DA7860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4080798BF6);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7DA7A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7DA7C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 728))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7DA8928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7DA89C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::archive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::archive((uint64_t)&v3, (HDStatisticsSleepStages *)(a2 + 8));
}

void sub_1B7DA8A38(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::archive(uint64_t a1, HDStatisticsSleepStages *a2)
{
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsSleepStages::archive(a2);
}

void sub_1B7DA8AA8(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[10];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  double v18;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (_OWORD *)(a1 + 8);
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_1B7F54B50;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 226) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::unarchive((uint64_t)v14, *(HDStatisticsTimeInterval **)(v6 + 8), *(HDStatisticsSleepStages **)(v6 + 128));
    v7 = v14[7];
    v5[6] = v14[6];
    v5[7] = v7;
    v8 = v14[9];
    v5[8] = v14[8];
    v5[9] = v8;
    v9 = v14[3];
    v5[2] = v14[2];
    v5[3] = v9;
    v10 = v14[5];
    v5[4] = v14[4];
    v5[5] = v10;
    v11 = v14[1];
    *v5 = v14[0];
    v5[1] = v11;
    *(_QWORD *)(a1 + 168) = v15;
    *(_OWORD *)(a1 + 176) = v16;
    *(_QWORD *)(a1 + 192) = v17;
    result = v18;
    *(double *)(a1 + 200) = v18;
  }
  *(_DWORD *)a1 = a2[17];
  v12 = a2[14];
  if (v12)
  {
    result = *(double *)(v12 + 8);
    v13 = *(_QWORD *)(v12 + 16);
    *(int8x16_t *)(a1 + 208) = vextq_s8(*(int8x16_t *)(v12 + 24), *(int8x16_t *)(v12 + 24), 8uLL);
    *(double *)(a1 + 224) = result;
    *(_QWORD *)(a1 + 232) = v13;
    *(_WORD *)(a1 + 240) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, HDStatisticsSleepStages *a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  double v9;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1B7F54B50;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  if (a3)
    HDStatisticsSleepStages::unarchive(a3, this);
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v6);
    *(_QWORD *)(a1 + 160) = v6;
    result = v9;
    v5 = v8;
    *(_OWORD *)(a1 + 168) = v7;
    *(_QWORD *)(a1 + 184) = v5;
    *(double *)(a1 + 192) = result;
  }
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D09400;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_WORD *)(a1 + 680) = 1;
  *(_BYTE *)(a1 + 682) = 0;
  *(_BYTE *)(a1 + 684) = 0;
  *(_QWORD *)(a1 + 688) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 728) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D09400;
  v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(_QWORD *)(a1 + 720) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 648);
  if (v3)
  {
    *(_QWORD *)(a1 + 656) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 680) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7DA8E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 688) = v4;
    v3 = v5;
  }

}

void sub_1B7DA8E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 87, a2);
  v7 = a2;
  v4 = a1[87];
  v5 = a1[84];
  a1[84] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[84]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7DA902C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[66];

  if (*(_BYTE *)(a1 + 680))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7DA90D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(uint64_t a1, double *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > a2[2])
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = a2[1];

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 682))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 681))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 680))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > a2[1])
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 683))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 720);
      v20 = *(_QWORD *)(a1 + 728);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 712);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *((_OWORD *)a2 + 1);
        *(double *)(v30 + 32) = a2[4];
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 720);
        v35 = *(char **)(a1 + 712);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 712);
        }
        *(_QWORD *)(a1 + 712) = v30;
        *(_QWORD *)(a1 + 720) = v23;
        *(_QWORD *)(a1 + 728) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *((_OWORD *)a2 + 1);
        *(double *)(v19 + 32) = a2[4];
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 720) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7DA9374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  double *v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 682))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 682) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 681))
    goto LABEL_5;
  v9 = *(void **)(a1 + 704);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_415_0);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 704);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = 0;

  *(_BYTE *)(a1 + 681) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 712);
    *(_QWORD *)(a1 + 728) = 0;
    *(_QWORD *)(a1 + 720) = 0;
    *(_QWORD *)(a1 + 712) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 712);
      v37 = *(__int128 **)(a1 + 720);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 720);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 720) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 712);
  v39 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = (double *)v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 5;
        if (v54 == (double *)v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 656) != *(_QWORD *)(a1 + 648))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 656) != *(_QWORD *)(a1 + 648));
  }
  *(_BYTE *)(a1 + 682) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 684))
    {
      *(_BYTE *)(a1 + 684) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 682) = 0;
LABEL_83:

  return v7;
}

void sub_1B7DA9A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 682) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 683) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 682))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 682))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 704);
    *(_QWORD *)(a1 + 704) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 681) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 681))
  {
    v8 = *(void **)(a1 + 704);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 704);
      *(_QWORD *)(a1 + 704) = v9;

      v8 = *(void **)(a1 + 704);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7DA9D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 680) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 680) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7DA9E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 680) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 680), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::archive((uint64_t)v27, (HDStatisticsSleepStages *)(a1 + 240));
}

void sub_1B7DAA050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t j;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  _BYTE v66[528];
  __int128 v67;
  __int128 v68;
  int8x16_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  __int128 __p;
  _QWORD v78[5];
  __int128 v79;
  _BYTE v80[32];
  __int128 v81;
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  _QWORD v85[4];
  uint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  void (**v104)(statistics::StatisticsEngine *__hidden);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _BYTE v111[32];
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v61 = a2;
  *(_BYTE *)(a1 + 680) = objc_msgSend(v61, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v61;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v66, 0, -1.79769313e308, 1.79769313e308);
  v67 = 0u;
  v68 = 0u;
  v112 = 0;
  v64 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v111, (const unsigned __int8 *)objc_msgSend(v64, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v112));
  v63 = a1;
  v104 = &off_1E6D09A88;
  v105 = 0;
  v109 = 0;
  v107 = 0;
  v108 = 0;
  v110 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v104, (PB::Reader *)v111);
  v65 = v106;
  if (v105)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    __p = 0u;
    memset(v78, 0, sizeof(v78));
    v79 = xmmword_1B7F54B10;
    *(_OWORD *)&v80[8] = xmmword_1B7F54B20;
    *(_QWORD *)v80 = 0;
    *(_QWORD *)&v80[24] = 0;
    v81 = xmmword_1B7F54B30;
    *(_OWORD *)&v82[8] = xmmword_1B7F54B40;
    *(_QWORD *)v82 = 0;
    *(_QWORD *)&v82[24] = 0;
    v83 = xmmword_1B7F54B50;
    *(_QWORD *)&v84 = 0;
    *((_QWORD *)&v84 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    memset(v85, 0, sizeof(v85));
    v88 = 0;
    v89 = 0;
    v86 = 0;
    v87 = &v88;
    v90 = 0u;
    v91 = 0u;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v101 = 0u;
    v102 = 0u;
    v103 = 1065353216;
    v69 = vextq_s8(*(int8x16_t *)(v105 + 8), *(int8x16_t *)(v105 + 8), 8uLL);
    v4 = *(_QWORD *)(v105 + 72);
    v70 = *(_QWORD *)(v105 + 64);
    v71 = *(_BYTE *)(v105 + 185);
    v72 = *(_BYTE *)(v105 + 186);
    v74 = vextq_s8(*(int8x16_t *)(v105 + 24), *(int8x16_t *)(v105 + 24), 8uLL);
    v75 = v4;
    v5 = *(_QWORD *)(v105 + 80);
    v6 = *(_QWORD *)(v105 + 88);
    v62 = (_QWORD *)v105;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v78[0])
        {
          v14 = (_QWORD *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v78[0] - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v78[0] - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[0] - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (_QWORD *)*((_QWORD *)&__p + 1);
            v14 = (_QWORD *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            v14 = (_QWORD *)__p;
          }
          v7 = (_QWORD *)(v19 + 48);
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          v78[0] = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((_BYTE *)v7 + 40) = 0;
          *((_BYTE *)v7 + 41) = v12;
          *((_BYTE *)v7 + 42) = v13;
          v7 += 6;
        }
        *((_QWORD *)&__p + 1) = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v62[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::unarchive((uint64_t)&v113, *(HDStatisticsTimeInterval **)(v23 + 8), *(HDStatisticsSleepStages **)(v23 + 128));
      *(_OWORD *)v82 = v119;
      *(_OWORD *)&v82[16] = v120;
      v83 = v121;
      v84 = v122;
      v79 = v115;
      *(_OWORD *)v80 = v116;
      *(_OWORD *)&v80[16] = v117;
      v81 = v118;
      *(_OWORD *)&v78[1] = v113;
      *(_OWORD *)&v78[3] = v114;
      v85[0] = v123;
      if (v85[1])
      {
        v85[2] = v85[1];
        operator delete((void *)v85[1]);
      }
      *(_OWORD *)&v85[1] = v124;
      v85[3] = v125;
      v125 = 0;
      v124 = 0uLL;
      v86 = v126;
    }
    v25 = (uint64_t *)v62[17];
    for (i = (uint64_t *)v62[18]; v25 != i; ++v25)
    {
      v26 = *v25;
      HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>::unarchive((uint64_t)&v113, *(HDStatisticsTimeInterval **)(*v25 + 8), *(HDStatisticsSleepStages **)(*v25 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v88;
      v29 = &v88;
      v30 = &v88;
      if (v88)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = xmmword_1B7F54B10;
      *((_QWORD *)v33 + 11) = 0;
      *((_OWORD *)v33 + 6) = xmmword_1B7F54B20;
      *((_QWORD *)v33 + 14) = 0;
      *(_OWORD *)(v33 + 120) = xmmword_1B7F54B30;
      *((_QWORD *)v33 + 17) = 0;
      *((_OWORD *)v33 + 9) = xmmword_1B7F54B40;
      *((_QWORD *)v33 + 20) = 0;
      *(_OWORD *)(v33 + 168) = xmmword_1B7F54B50;
      *((_QWORD *)v33 + 23) = 0;
      *((_QWORD *)v33 + 24) = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_OWORD *)(v33 + 216) = 0u;
      *((_QWORD *)v33 + 29) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v87)
      {
        v87 = (uint64_t **)*v87;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v32);
      ++v89;
LABEL_37:
      v34 = v117;
      *(_OWORD *)(v33 + 120) = v118;
      *(_OWORD *)(v33 + 104) = v34;
      v35 = v115;
      *(_OWORD *)(v33 + 88) = v116;
      *(_OWORD *)(v33 + 72) = v35;
      v36 = v121;
      *(_OWORD *)(v33 + 184) = v122;
      *(_OWORD *)(v33 + 168) = v36;
      v37 = v119;
      *(_OWORD *)(v33 + 152) = v120;
      *(_OWORD *)(v33 + 136) = v37;
      v38 = v114;
      *(_OWORD *)(v33 + 40) = v113;
      *(_OWORD *)(v33 + 56) = v38;
      v39 = (void *)*((_QWORD *)v33 + 26);
      *((_QWORD *)v33 + 25) = v123;
      if (v39)
      {
        *((_QWORD *)v33 + 27) = v39;
        operator delete(v39);
        *((_QWORD *)v33 + 26) = 0;
        *((_QWORD *)v33 + 27) = 0;
        *((_QWORD *)v33 + 28) = 0;
      }
      *((_OWORD *)v33 + 13) = v124;
      *((_QWORD *)v33 + 28) = v125;
      v125 = 0;
      v124 = 0uLL;
      *((_QWORD *)v33 + 29) = v126;
    }
    v40 = v62[5];
    for (j = v62[6]; v40 != j; v40 += 8)
    {
      v43 = *(double *)(*(_QWORD *)v40 + 8);
      v42 = *(double *)(*(_QWORD *)v40 + 16);
      if (v43 >= v42)
        v44 = *(double *)(*(_QWORD *)v40 + 16);
      else
        v44 = *(double *)(*(_QWORD *)v40 + 8);
      if (v42 < v43)
        v42 = *(double *)(*(_QWORD *)v40 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=((uint64_t)v66, (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  v45 = v107;
  v46 = v108;
  if (v107 != v108)
  {
    v47 = *((_QWORD *)&v67 + 1);
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)v45 + 24);
      v49 = *(_QWORD *)(*(_QWORD *)v45 + 32);
      v50 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)v45 + 16);
      if (v47 >= (unint64_t)v68)
      {
        v52 = (void *)v67;
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v67) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3) > v54)
          v54 = 0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - v67) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v54;
        if (v55)
        {
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          v47 = *((_QWORD *)&v67 + 1);
          v52 = (void *)v67;
        }
        else
        {
          v56 = 0;
        }
        v57 = v55 + 40 * v53;
        *(_QWORD *)v57 = v49;
        *(_QWORD *)(v57 + 8) = v48;
        *(_QWORD *)(v57 + 16) = v50;
        *(_QWORD *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        v58 = v57;
        if ((void *)v47 != v52)
        {
          do
          {
            v59 = *(_OWORD *)(v47 - 40);
            v60 = *(_OWORD *)(v47 - 24);
            *(_WORD *)(v58 - 8) = *(_WORD *)(v47 - 8);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while ((void *)v47 != v52);
          v52 = (void *)v67;
        }
        *(_QWORD *)&v67 = v58;
        v47 = v57 + 40;
        *((_QWORD *)&v67 + 1) = v57 + 40;
        *(_QWORD *)&v68 = v55 + 40 * v56;
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v47 = v49;
        *(_QWORD *)(v47 + 8) = v48;
        *(_QWORD *)(v47 + 16) = v50;
        *(_QWORD *)(v47 + 24) = v51;
        *(_WORD *)(v47 + 32) = 1;
        v47 += 40;
      }
      *((_QWORD *)&v67 + 1) = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v104);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v63 + 112), (uint64_t)&v65);
  if ((_QWORD)v67)
  {
    *((_QWORD *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v66);

}

void sub_1B7DAA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x468]);
  v29 = (void *)STACK[0x450];
  if (STACK[0x450])
  {
    STACK[0x458] = (unint64_t)v29;
    operator delete(v29);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a10);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x418]);
  v30 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v31;
    operator delete(v31);
  }
  objc_destroyWeak((id *)&STACK[0x328]);
  v32 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v32;
    operator delete(v32);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x4E8]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)&a28);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_1B7F54B50;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 536);
  if (v2)
  {
    *(_QWORD *)(a1 + 544) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 488);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 448);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 408);
  v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(_QWORD *)(a1 + 392) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 328));
  v3 = *(void **)(a1 + 288);
  if (v3)
  {
    *(_QWORD *)(a1 + 296) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[26];
    if (v2)
    {
      a1[27] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[528];
  uint64_t v18;
  _BYTE v19[528];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[464];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 696));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 680) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7DAAE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 67), (__n128 *)(a2 + 536));
  v4 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  v5 = (void *)a1[70];
  a1[70] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_OWORD *)(a2 + 232);
  v18 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 4);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v19 = (_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  v20 = *(_QWORD **)(a2 + 320);
  if (v20 != (_QWORD *)(a2 + 328))
  {
    v21 = 0;
    v22 = (_QWORD *)(a1 + 328);
    while (1)
    {
      v23 = (_QWORD *)(a1 + 328);
      if (v22 == v19)
        goto LABEL_12;
      v24 = v21;
      v25 = (_QWORD *)(a1 + 328);
      if (v21)
      {
        do
        {
          v23 = v24;
          v24 = (_QWORD *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v25[2];
          v26 = *v23 == (_QWORD)v25;
          v25 = v23;
        }
        while (v26);
      }
      v27 = v20[4];
      if (v23[4] < v27)
      {
LABEL_12:
        if (v21)
          v28 = (uint64_t **)v23;
        else
          v28 = (uint64_t **)(a1 + 328);
        if (v21)
          v29 = (uint64_t **)(v23 + 1);
        else
          v29 = (uint64_t **)(a1 + 328);
        if (!*v29)
        {
LABEL_28:
          v32 = (char *)operator new(0xF0uLL);
          *((_QWORD *)v32 + 4) = v20[4];
          v33 = *(_OWORD *)(v20 + 5);
          *(_OWORD *)(v32 + 56) = *(_OWORD *)(v20 + 7);
          *(_OWORD *)(v32 + 40) = v33;
          v34 = *(_OWORD *)(v20 + 9);
          v35 = *(_OWORD *)(v20 + 11);
          v36 = *(_OWORD *)(v20 + 13);
          *(_OWORD *)(v32 + 120) = *(_OWORD *)(v20 + 15);
          *(_OWORD *)(v32 + 104) = v36;
          *(_OWORD *)(v32 + 88) = v35;
          *(_OWORD *)(v32 + 72) = v34;
          v37 = *(_OWORD *)(v20 + 17);
          v38 = *(_OWORD *)(v20 + 19);
          v39 = *(_OWORD *)(v20 + 21);
          *(_OWORD *)(v32 + 184) = *(_OWORD *)(v20 + 23);
          *(_OWORD *)(v32 + 168) = v39;
          *(_OWORD *)(v32 + 152) = v38;
          *(_OWORD *)(v32 + 136) = v37;
          v40 = v20[25];
          *((_QWORD *)v32 + 26) = 0;
          *((_QWORD *)v32 + 25) = v40;
          *((_QWORD *)v32 + 27) = 0;
          *((_QWORD *)v32 + 28) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v32 + 26, (const void *)v20[26], v20[27], (uint64_t)(v20[27] - v20[26]) >> 4);
          *((_QWORD *)v32 + 29) = v20[29];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 320), (uint64_t)v28, v29, (uint64_t *)v32);
        }
      }
      else
      {
        v29 = (uint64_t **)(a1 + 328);
        v28 = (uint64_t **)(a1 + 328);
        if (!v21)
          goto LABEL_28;
        v30 = v21;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v30;
            v31 = v30[4];
            if (v31 <= v27)
              break;
            v30 = *v28;
            v29 = v28;
            if (!*v28)
              goto LABEL_28;
          }
          if (v31 >= v27)
            break;
          v30 = v28[1];
          if (!v30)
          {
            v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      v41 = (_QWORD *)v20[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v20[2];
          v26 = *v42 == (_QWORD)v20;
          v20 = v42;
        }
        while (!v26);
      }
      if (v42 == (_QWORD *)(a2 + 328))
        break;
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD **)(a1 + 320);
      v20 = v42;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 344, a2 + 344);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 384), *(const void **)(a2 + 384), *(_QWORD *)(a2 + 392), (uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 448, a2 + 448);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 488, a2 + 488);
  return a1;
}

void sub_1B7DAB2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 392) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 296) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  v16 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 288, (__n128 *)(a2 + 288));
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v17 = a1 + 328;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 328));
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v18 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v18;
  v19 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 336) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(a2 + 320) = a2 + 328;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 320) = v17;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 384, (__n128 *)(a2 + 384));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 488, (uint64_t *)(a2 + 488));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  const void *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t **i;
  uint64_t *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  const void *v89;
  uint64_t v90;
  id v91;
  uint64_t *v92;
  uint64_t *j;
  uint64_t v94;
  id v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  uint64_t **k;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  void *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  void *v119;
  id v120;
  id v122;
  id v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  void *__p;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  _BYTE v145[24];
  _BYTE *v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v119 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v119, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 384);
      v15 = *(uint64_t **)(a2 + 392);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v139[0] = &off_1E6D095F0;
  v140 = v139;
  v120 = v11;
  v20 = (uint64_t)v140;
  if (!v140)
    goto LABEL_22;
  if (v140 != v139)
  {
    v20 = (*(uint64_t (**)(void))(*v140 + 16))();
LABEL_22:
    v144 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v144 = v143;
  (*(void (**)(uint64_t, _QWORD *))(v139[0] + 24))((uint64_t)v139, v143);
LABEL_24:
  v146 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D094D0;
  v22 = v21 + 1;
  v23 = (uint64_t)v144;
  if (!v144)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v144 != v143)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v144 + 16))(v144, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v143[0] + 24))(v143);
LABEL_29:
  v146 = v21;
  v122 = v120;
  v24 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (__int128 *)(a2 + 120);
  v27 = *(_OWORD *)(a2 + 232);
  v130 = *(_OWORD *)(a2 + 216);
  v131 = v27;
  v28 = *(_OWORD *)(a2 + 248);
  v29 = *(_OWORD *)(a2 + 168);
  v126 = *(_OWORD *)(a2 + 152);
  v127 = v29;
  v30 = *(_OWORD *)(a2 + 200);
  v128 = *(_OWORD *)(a2 + 184);
  v129 = v30;
  v31 = *(_OWORD *)(a2 + 136);
  v124 = *(_OWORD *)(a2 + 120);
  v125 = v31;
  v32 = *(_OWORD *)(a2 + 264);
  v132 = v28;
  v133 = v32;
  v33 = *(const void **)(a2 + 288);
  v134 = *(_QWORD *)(a2 + 280);
  __p = 0;
  v34 = *(_QWORD *)(a2 + 296);
  v136 = 0;
  v137 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v33, v34, (v34 - (uint64_t)v33) >> 4);
  v138 = *(_QWORD *)(a2 + 312);
  if (!v146)
    std::__throw_bad_function_call[abi:ne180100]();
  v35 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v146 + 48))(v146, &v124);
  v36 = *(double **)(v35 + 8);
  v37 = 0.0;
  while (v36 != *(double **)(v35 + 16))
  {
    v39 = *v36;
    v38 = v36[1];
    v36 += 2;
    v37 = v37 + v38 - v39;
  }
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v37 + *(double *)(v35 + 32));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v122, "setDuration:", v40);

  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }

  v41 = *(_OWORD *)(a2 + 232);
  v130 = *(_OWORD *)(a2 + 216);
  v131 = v41;
  v42 = *(_OWORD *)(a2 + 264);
  v132 = *(_OWORD *)(a2 + 248);
  v133 = v42;
  v43 = *(_OWORD *)(a2 + 168);
  v126 = *(_OWORD *)(a2 + 152);
  v127 = v43;
  v44 = *(_OWORD *)(a2 + 200);
  v128 = *(_OWORD *)(a2 + 184);
  v129 = v44;
  v45 = *(_OWORD *)(a2 + 136);
  v124 = *v26;
  v125 = v45;
  v46 = *(const void **)(a2 + 288);
  v134 = *(_QWORD *)(a2 + 280);
  __p = 0;
  v47 = *(_QWORD *)(a2 + 296);
  v136 = 0;
  v137 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v46, v47, (v47 - (uint64_t)v46) >> 4);
  v138 = *(_QWORD *)(a2 + 312);
  if (!v146)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v122, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v146 + 48))(v146, &v124));
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v48 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v49 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v124, a2);
    for (i = (uint64_t **)v125; i; i = (uint64_t **)*i)
    {
      v51 = i[2];
      v52 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v146)
        std::__throw_bad_function_call[abi:ne180100]();
      v54 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v146 + 48))(v146, (uint64_t *)i + 3);
      v55 = *(double **)(v54 + 8);
      v56 = 0.0;
      while (v55 != *(double **)(v54 + 16))
      {
        v58 = *v55;
        v57 = v55[1];
        v55 += 2;
        v56 = v56 + v57 - v58;
      }
      objc_msgSend(v52, "quantityWithUnit:doubleValue:", v53, v56 + *(double *)(v54 + 32));
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "setObject:forKeyedSubscript:", v59, v51);

      if (!v146)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v146 + 48))(v146, (uint64_t *)i + 3));
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "setObject:forKeyedSubscript:", v60, v51);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v124);
    objc_msgSend(v122, "setDurationBySource:", v48);
    objc_msgSend(v122, "setDataCountBySource:", v49);

  }
  v61 = v146;
  if (v146 == v145)
  {
    v62 = 4;
    v61 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_52;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_52:
  v63 = v144;
  if (v144 == v143)
  {
    v64 = 4;
    v63 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_57;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_57:
  v65 = (uint64_t)v140;
  if (!v140)
  {
LABEL_60:
    v142 = (_QWORD *)v65;
    goto LABEL_62;
  }
  if (v140 != v139)
  {
    v65 = (*(uint64_t (**)(void))(*v140 + 16))();
    goto LABEL_60;
  }
  v142 = v141;
  (*(void (**)(uint64_t, _QWORD *))(v139[0] + 24))((uint64_t)v139, v141);
LABEL_62:
  v146 = 0;
  v66 = operator new(0x28uLL);
  *v66 = &off_1E6D09560;
  v67 = (uint64_t)v142;
  if (!v142)
  {
LABEL_65:
    v66[4] = v67;
    goto LABEL_67;
  }
  if (v142 != v141)
  {
    v67 = (*(uint64_t (**)(void))(*v142 + 16))();
    goto LABEL_65;
  }
  v66[4] = v66 + 1;
  (*(void (**)(_QWORD *))(v141[0] + 24))(v141);
LABEL_67:
  v146 = v66;
  v123 = v122;
  v68 = *(_OWORD *)(a2 + 232);
  v130 = *(_OWORD *)(a2 + 216);
  v131 = v68;
  v69 = *(_OWORD *)(a2 + 264);
  v132 = *(_OWORD *)(a2 + 248);
  v133 = v69;
  v70 = *(_OWORD *)(a2 + 168);
  v126 = *(_OWORD *)(a2 + 152);
  v127 = v70;
  v71 = *(_OWORD *)(a2 + 200);
  v128 = *(_OWORD *)(a2 + 184);
  v129 = v71;
  v72 = *(_OWORD *)(a2 + 136);
  v124 = *v26;
  v125 = v72;
  v73 = *(const void **)(a2 + 288);
  v134 = *(_QWORD *)(a2 + 280);
  __p = 0;
  v74 = *(_QWORD *)(a2 + 296);
  v136 = 0;
  v137 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v73, v74, (v74 - (uint64_t)v73) >> 4);
  v138 = *(_QWORD *)(a2 + 312);
  if (!v146)
    std::__throw_bad_function_call[abi:ne180100]();
  v75 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v146 + 48))(v146, &v124);
  v76 = 0;
  v77 = 0.0;
  v78 = 0x7FFFFFFFFFFFFFFFLL;
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v80 = v75 + v76;
    v81 = *(double *)(v75 + v76 + 24);
    if (v81 > 2.22507386e-308 && v81 >= v77)
    {
      if (v81 <= v77)
      {
        if (*(_QWORD *)(v75 + v76 + 32) < v78)
        {
          v79 = *(_QWORD *)(v80 + 16);
          v77 = *(double *)(v75 + v76 + 24);
          v78 = *(_QWORD *)(v75 + v76 + 32);
        }
      }
      else
      {
        v79 = *(_QWORD *)(v80 + 16);
        v78 = *(_QWORD *)(v75 + v76 + 32);
        v77 = *(double *)(v75 + v76 + 24);
      }
    }
    v76 += 24;
  }
  while (v76 != 144);
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if (v79 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v79, v77);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v123, "setCategoryValue:", v83);

  }
  v84 = *(_OWORD *)(a2 + 232);
  v130 = *(_OWORD *)(a2 + 216);
  v131 = v84;
  v85 = *(_OWORD *)(a2 + 264);
  v132 = *(_OWORD *)(a2 + 248);
  v133 = v85;
  v86 = *(_OWORD *)(a2 + 168);
  v126 = *(_OWORD *)(a2 + 152);
  v127 = v86;
  v87 = *(_OWORD *)(a2 + 200);
  v128 = *(_OWORD *)(a2 + 184);
  v129 = v87;
  v88 = *(_OWORD *)(a2 + 136);
  v124 = *v26;
  v125 = v88;
  v89 = *(const void **)(a2 + 288);
  v134 = *(_QWORD *)(a2 + 280);
  __p = 0;
  v90 = *(_QWORD *)(a2 + 296);
  v136 = 0;
  v137 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v89, v90, (v90 - (uint64_t)v89) >> 4);
  v138 = *(_QWORD *)(a2 + 312);
  if (!v146)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v123, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v146 + 48))(v146, &v124));
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v91 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v92 = *(uint64_t **)(a2 + 384);
    for (j = *(uint64_t **)(a2 + 392); v92 != j; ++v92)
    {
      v94 = *v92;
      v95 = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(v95, "sourceForSourceID:", v94);
      v96 = (void *)objc_claimAutoreleasedReturnValue();

      if (v96 && (objc_msgSend(v91, "containsObject:", v96) & 1) == 0)
        objc_msgSend(v91, "addObject:", v96);

    }
    v97 = (void *)objc_msgSend(v91, "copy");
    objc_msgSend(v123, "_setSources:", v97);

    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v124, a2);
    for (k = (uint64_t **)v125; k; k = (uint64_t **)*k)
    {
      v101 = k[2];
      if (!v146)
        goto LABEL_124;
      v102 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v146 + 48))(v146, (uint64_t *)k + 3);
      v103 = 0;
      v104 = 0.0;
      v105 = 0x7FFFFFFFFFFFFFFFLL;
      v106 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v107 = v102 + v103;
        v108 = *(double *)(v102 + v103 + 24);
        if (v108 > 2.22507386e-308 && v108 >= v104)
        {
          if (v108 <= v104)
          {
            if (*(_QWORD *)(v102 + v103 + 32) < v105)
            {
              v106 = *(_QWORD *)(v107 + 16);
              v104 = *(double *)(v102 + v103 + 24);
              v105 = *(_QWORD *)(v102 + v103 + 32);
            }
          }
          else
          {
            v106 = *(_QWORD *)(v107 + 16);
            v105 = *(_QWORD *)(v102 + v103 + 32);
            v104 = *(double *)(v102 + v103 + 24);
          }
        }
        v103 += 24;
      }
      while (v103 != 144);
      if (v106 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v104);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "setObject:forKeyedSubscript:", v110, v101);

      }
      if (!v146)
LABEL_124:
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v146 + 48))(v146, (uint64_t *)k + 3));
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "setObject:forKeyedSubscript:", v111, v101);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v124);
    objc_msgSend(v123, "setCategoryValueBySource:", v98);
    objc_msgSend(v123, "setDataCountBySource:", v99);

  }
  v112 = v146;
  if (v146 == v145)
  {
    v113 = 4;
    v112 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_113;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_113:
  v114 = v142;
  if (v142 == v141)
  {
    v115 = 4;
    v114 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_118;
    v115 = 5;
  }
  (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_118:

  v116 = v140;
  if (v140 == v139)
  {
    v117 = 4;
    v116 = v139;
    goto LABEL_122;
  }
  if (v140)
  {
    v117 = 5;
LABEL_122:
    (*(void (**)(void))(*v116 + 8 * v117))();
  }
  return v123;
}

void sub_1B7DAC0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 368);
  v2 = *(_QWORD *)(a1 + 384);
  if (v1 != (*(_QWORD *)(a1 + 392) - v2) >> 3)
  {
    v4 = (void **)(a1 + 384);
    *(_QWORD *)(a1 + 392) = v2;
    std::vector<long long>::reserve((void **)(a1 + 384), v1);
    v5 = *(_QWORD **)(a1 + 360);
    if (v5)
    {
      v6 = *(char **)(a1 + 392);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 400);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 384);
            v6 = *(char **)(a1 + 392);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 384) = v16;
          *(_QWORD *)(a1 + 392) = v9;
          *(_QWORD *)(a1 + 400) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 392) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7DAC564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  double var0;
  uint64_t v47;
  int64_t var3;
  _BOOL4 var4;
  BOOL var5;
  double v51;
  int v52;
  int v53;
  unint64_t v54;
  double *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double *v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  void *v75;
  void *v76;
  void *v77;
  unint64_t v78;
  uint64_t **v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  void *v89;
  unint64_t v90;
  uint64_t **v91;
  double v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t **v95;
  BOOL v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  BOOL v111;
  int v112;
  int v113;
  int v114;
  double v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  uint64_t v119;
  double *v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  double *v124;
  double v125;
  unint64_t v126;
  uint64_t **v127;
  uint64_t **v128;
  double v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t **v132;
  __int128 v133;
  char *v134;
  double v135;
  void *v136;
  void *v137;
  _QWORD *v138;
  double **v139;
  id *location;
  void *v141;
  id v142;
  uint64_t *v143;
  int64_t v144;
  _QWORD *v145;
  double **v146;
  char v147;
  BOOL v148;
  int64_t v149;
  _QWORD *v150;
  uint64_t v151;
  HDRawQuantitySample v152;
  __int128 v153;
  __int128 v154;
  __int16 v155;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v150 = (_QWORD *)(a1 + 96);
    v145 = (_QWORD *)(a1 + 120);
    v146 = (double **)(a1 + 64);
    v143 = (uint64_t *)(a1 + 280);
    location = (id *)(a1 + 88);
    v139 = (double **)(a1 + 288);
    v138 = (_QWORD *)(a1 + 328);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_147:
      *(double *)(a1 + 56) = a2;
LABEL_148:
      v135 = *(double *)(a1 + 56);
      if (v135 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsSleepStages, HDStatisticsTimeInterval>]");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "handleFailureInFunction:file:lineNumber:description:", v137, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v135 = *(double *)(a1 + 56);
      }
      v5 = v135;
      if (v135 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v150 = 0;
      v150[1] = 0;
      v150[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v150;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      v37 = __clz(v8);
      if (WeakRetained)
      {
        *(_QWORD *)&v152.var0 = a1;
        v38 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v38;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v152, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v142 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v142 = 0;
      v141 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_121:
        *(double *)(a1 + 312) = HKIntervalMask<double>::removeIntervalsBefore(v139, v25) + *(double *)(a1 + 312);
        v108 = *(_QWORD **)(a1 + 320);
        if (v108 != v138)
        {
          do
          {
            *((double *)v108 + 29) = HKIntervalMask<double>::removeIntervalsBefore((double **)v108 + 26, v25)
                                   + *((double *)v108 + 29);
            v109 = (_QWORD *)v108[1];
            if (v109)
            {
              do
              {
                v110 = v109;
                v109 = (_QWORD *)*v109;
              }
              while (v109);
            }
            else
            {
              do
              {
                v110 = (_QWORD *)v108[2];
                v111 = *v110 == (_QWORD)v108;
                v108 = v110;
              }
              while (!v111);
            }
            v108 = v110;
          }
          while (v110 != v138);
        }
        *(double *)(a1 + 56) = v25;

        if (v141)
          operator delete(v141);
        goto LABEL_148;
      }
      v144 = 0;
      v43 = 0;
      v44 = v6;
      while (2)
      {
        v45 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v152.var0 = *(_OWORD *)v44;
        *(_OWORD *)&v152.var2 = v45;
        *(_QWORD *)&v152.var4 = *(_QWORD *)(v44 + 32);
        var0 = v152.var0;
        v47 = v45;
        if (*(double *)&v45 - v152.var1 - (v25 - v152.var1) >= 0.01)
        {
          if (v25 - v152.var1 < 0.01)
          {
            v152.var4 = 0;
            goto LABEL_66;
          }
          var3 = v152.var3;
          var5 = v152.var5;
          v152.var2 = v25;
          v51 = v25;
          var4 = v152.var4;
          if (v152.var4)
            goto LABEL_57;
LABEL_66:
          v60 = *(_OWORD **)(a1 + 104);
          v61 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v60 < v61)
          {
            v62 = *(_OWORD *)v44;
            v63 = *(_OWORD *)(v44 + 32);
            v60[1] = *(_OWORD *)(v44 + 16);
            v60[2] = v63;
            *v60 = v62;
            v64 = v60 + 3;
            goto LABEL_119;
          }
          v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v60 - *v150) >> 4);
          v66 = v65 + 1;
          if (v65 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *v150) >> 4);
          if (2 * v67 > v66)
            v66 = 2 * v67;
          if (v67 >= 0x2AAAAAAAAAAAAAALL)
            v68 = 0x555555555555555;
          else
            v68 = v66;
          if (v68)
            v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
          else
            v69 = 0;
          v80 = (_OWORD *)(v68 + 48 * v65);
          v81 = *(_OWORD *)v44;
          v82 = *(_OWORD *)(v44 + 32);
          v80[1] = *(_OWORD *)(v44 + 16);
          v80[2] = v82;
          *v80 = v81;
          v84 = *(char **)(a1 + 96);
          v83 = *(char **)(a1 + 104);
          v85 = v80;
          if (v83 != v84)
          {
            do
            {
              v86 = *((_OWORD *)v83 - 3);
              v87 = *((_OWORD *)v83 - 2);
              *(_OWORD *)((char *)v85 - 21) = *(_OWORD *)(v83 - 21);
              *(v85 - 3) = v86;
              *(v85 - 2) = v87;
              v85 -= 3;
              v83 -= 48;
            }
            while (v83 != v84);
            v83 = (char *)*v150;
          }
          v64 = v80 + 3;
          *(_QWORD *)(a1 + 96) = v85;
          *(_QWORD *)(a1 + 104) = v80 + 3;
          *(_QWORD *)(a1 + 112) = v68 + 48 * v69;
          if (v83)
          {
            v88 = v83;
            goto LABEL_118;
          }
LABEL_119:
          *(_QWORD *)(a1 + 104) = v64;
        }
        else
        {
          var3 = 0;
          var4 = 0;
          var5 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!v152.var4)
            goto LABEL_66;
LABEL_57:
          v148 = var5;
          v149 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v152, v146);
          v52 = *(unsigned __int8 *)(v44 + 42);
          v53 = *(unsigned __int8 *)(v44 + 41);
          v147 = *(_BYTE *)(v44 + 40);
          if (v152.var4)
          {
            if ((v43 & 1) != 0)
            {
              v54 = v152.var3;
              if (v144 == v152.var3 || *(_BYTE *)(a1 + 24))
              {
                if (!*(_BYTE *)(v44 + 42))
                  ++*v145;
                v55 = (double *)&v145[3 * (uint64_t)v152.var0];
                v56 = v55[3];
                v57 = *((_QWORD *)v55 + 4);
                v58 = *(_QWORD *)(a1 + 128);
                if (v58 < v57)
                {
                  v57 = v58 + 1;
                  *(_QWORD *)(a1 + 128) = v58 + 1;
                }
                v59 = v55 + 2;
                v59[1] = v56 + v152.var2 - v152.var1;
                *((_QWORD *)v59 + 2) = v57;
                HDStatisticsTimeInterval::addSample(v143, &v152, v52 == 0);
                v52 = 1;
              }
            }
            else
            {
              if (!*(_BYTE *)(v44 + 42))
                ++*v145;
              v70 = (double *)&v145[3 * (uint64_t)v152.var0];
              v71 = v70[3];
              v72 = *((_QWORD *)v70 + 4);
              v73 = *(_QWORD *)(a1 + 128);
              if (v73 < v72)
              {
                v72 = v73 + 1;
                *(_QWORD *)(a1 + 128) = v73 + 1;
              }
              v74 = v70 + 2;
              v74[1] = v71 + v152.var2 - v152.var1;
              *((_QWORD *)v74 + 2) = v72;
              HDStatisticsTimeInterval::addSample(v143, &v152, v52 == 0);
              v52 = 1;
              v54 = v152.var3;
              v144 = v152.var3;
            }
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v54);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              if (v75)
              {
                objc_msgSend(v142, "objectForKeyedSubscript:", v75);
                v76 = (void *)objc_claimAutoreleasedReturnValue();
                v77 = v76;
                if (v76)
                {
                  if (objc_msgSend(v76, "longLongValue") == v54 || *(_BYTE *)(a1 + 24))
                  {
                    v78 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v54);
                    v79 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v78);
                    goto LABEL_94;
                  }
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v54);
                  v89 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v142, "setObject:forKeyedSubscript:", v89, v75);

                  v90 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v54);
                  v79 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v90);
LABEL_94:
                  if (!v53)
                    *v79 = (uint64_t *)((char *)*v79 + 1);
                  v91 = &v79[3 * (uint64_t)v152.var0];
                  v92 = *((double *)v91 + 3);
                  v93 = v91[4];
                  v94 = v79[1];
                  if ((uint64_t)v94 < (uint64_t)v93)
                  {
                    v93 = (uint64_t *)((char *)v94 + 1);
                    v79[1] = (uint64_t *)((char *)v94 + 1);
                  }
                  v95 = v91 + 2;
                  *((double *)v95 + 1) = v92 + v152.var2 - v152.var1;
                  v95[2] = v93;
                  HDStatisticsTimeInterval::addSample((uint64_t *)v79 + 20, &v152, v53 == 0);
                  LOBYTE(v53) = 1;
                }

              }
            }
            v43 = 1;
          }
          if (var4)
          {
            v96 = v52 != 0;
            v98 = *(char **)(a1 + 104);
            v97 = *(_QWORD *)(a1 + 112);
            if ((unint64_t)v98 < v97)
            {
              *(double *)v98 = var0;
              *((double *)v98 + 1) = v51;
              *((_QWORD *)v98 + 2) = v47;
              *((_QWORD *)v98 + 3) = v149;
              v98[32] = var4;
              v98[33] = v148;
              v98[40] = v147;
              v98[41] = v53;
              v64 = v98 + 48;
              v98[42] = v96;
              goto LABEL_119;
            }
            v88 = (char *)*v150;
            v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v98[-*v150] >> 4);
            v100 = v99 + 1;
            if (v99 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)v88) >> 4);
            if (2 * v101 > v100)
              v100 = 2 * v101;
            if (v101 >= 0x2AAAAAAAAAAAAAALL)
              v102 = 0x555555555555555;
            else
              v102 = v100;
            if (v102)
            {
              v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v102);
              v88 = *(char **)(a1 + 96);
              v98 = *(char **)(a1 + 104);
            }
            else
            {
              v103 = 0;
            }
            v104 = v102 + 48 * v99;
            *(double *)v104 = var0;
            *(double *)(v104 + 8) = v51;
            *(_QWORD *)(v104 + 16) = v47;
            *(_QWORD *)(v104 + 24) = v149;
            *(_BYTE *)(v104 + 32) = var4;
            *(_BYTE *)(v104 + 33) = v148;
            *(_BYTE *)(v104 + 40) = v147;
            *(_BYTE *)(v104 + 41) = v53;
            *(_BYTE *)(v104 + 42) = v96;
            v105 = v104;
            if (v98 != v88)
            {
              do
              {
                v106 = *((_OWORD *)v98 - 3);
                v107 = *((_OWORD *)v98 - 2);
                *(_OWORD *)(v105 - 21) = *(_OWORD *)(v98 - 21);
                *(_OWORD *)(v105 - 48) = v106;
                *(_OWORD *)(v105 - 32) = v107;
                v105 -= 48;
                v98 -= 48;
              }
              while (v98 != v88);
              v88 = (char *)*v150;
            }
            v64 = (_OWORD *)(v104 + 48);
            *(_QWORD *)(a1 + 96) = v105;
            *(_QWORD *)(a1 + 104) = v104 + 48;
            *(_QWORD *)(a1 + 112) = v102 + 48 * v103;
            if (v88)
LABEL_118:
              operator delete(v88);
            goto LABEL_119;
          }
        }
        v44 += 48;
        if ((__int128 *)v44 == v7)
          goto LABEL_121;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_132:
        v112 = *(unsigned __int8 *)(v6 + 42);
        v113 = *(unsigned __int8 *)(v6 + 41);
        v114 = *(unsigned __int8 *)(v6 + 40);
        v115 = *(double *)v6;
        v152.var1 = *(double *)(v6 + 8);
        v152.var2 = v15;
        v152.var3 = v11;
        v152.var4 = v14;
        v152.var5 = v13;
        *(_DWORD *)(&v152.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v152.var5 + 5) = *(_WORD *)(v6 + 38);
        *((double *)&v153 + 1) = v16;
        *(double *)&v154 = v10;
        *((_QWORD *)&v154 + 1) = v40;
        LOBYTE(v155) = v12;
        HIBYTE(v155) = v41;
        v152.var0 = v115;
        *(double *)&v153 = v115;
        HDRawQuantitySample::applyMask((uint64_t)&v152, v146);
        v116 = v114 != 0;
        v117 = v113 != 0;
        v118 = v112 != 0;
        if (v152.var4)
        {
          if (!v112)
            ++*v145;
          v119 = (uint64_t)v152.var0;
          v120 = (double *)&v145[3 * (uint64_t)v152.var0];
          v121 = v120[3];
          v122 = *((_QWORD *)v120 + 4);
          v123 = *(_QWORD *)(a1 + 128);
          if (v123 < v122)
          {
            v122 = v123 + 1;
            *(_QWORD *)(a1 + 128) = v123 + 1;
          }
          v124 = v120 + 2;
          v125 = v152.var2 - v152.var1;
          v124[1] = v121 + v152.var2 - v152.var1;
          *((_QWORD *)v124 + 2) = v122;
          HDStatisticsTimeInterval::addSample(v143, &v152, v112 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v126 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v152.var3);
            v127 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v126);
            if (!v113)
              *v127 = (uint64_t *)((char *)*v127 + 1);
            v128 = &v127[3 * v119];
            v129 = *((double *)v128 + 3);
            v130 = v128[4];
            v131 = v127[1];
            if ((uint64_t)v131 < (uint64_t)v130)
            {
              v130 = (uint64_t *)((char *)v131 + 1);
              v127[1] = (uint64_t *)((char *)v131 + 1);
            }
            v132 = v128 + 2;
            *((double *)v132 + 1) = v125 + v129;
            v132[2] = v130;
            HDStatisticsTimeInterval::addSample((uint64_t *)v127 + 20, &v152, v113 == 0);
          }
          v116 = 1;
          v117 = 1;
          v118 = 1;
        }
        if ((_BYTE)v155)
        {
          LOWORD(v151) = v155;
          v133 = v154;
          v134 = (char *)*v150;
          *(_OWORD *)v134 = v153;
          *((_OWORD *)v134 + 1) = v133;
          *((_QWORD *)v134 + 4) = v151;
          v134[40] = v116;
          v134[41] = v117;
          v134[42] = v118;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_147;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_132;
  }
}

void sub_1B7DAD0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 328);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 328);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 328) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 320);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 320), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 408), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 448);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7DAD290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 488);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7DAD360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xF0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = xmmword_1B7F54B10;
    *((_QWORD *)v9 + 11) = 0;
    *((_OWORD *)v9 + 6) = xmmword_1B7F54B20;
    *((_QWORD *)v9 + 14) = 0;
    *(_OWORD *)(v9 + 120) = xmmword_1B7F54B30;
    *((_QWORD *)v9 + 17) = 0;
    *((_OWORD *)v9 + 9) = xmmword_1B7F54B40;
    *((_QWORD *)v9 + 20) = 0;
    *(_OWORD *)(v9 + 168) = xmmword_1B7F54B50;
    *((_QWORD *)v9 + 23) = 0;
    *((_QWORD *)v9 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *((_QWORD *)v9 + 29) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 384);
      v11 = *(char **)(*(_QWORD *)a3 + 392);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 392);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 384);
      v24 = *(char **)(*(_QWORD *)a3 + 392);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 392);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 384);
            v31 = *(char **)(*(_QWORD *)a3 + 392);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 392);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v52;
  unint64_t v53;
  _QWORD v54[2];
  char v55;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 320);
  v50 = (_QWORD *)(a2 + 328);
  if (v3 == (_QWORD *)(a2 + 328))
    return;
  v52 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_81;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v53 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xE0uLL);
      v54[0] = v19;
      v54[1] = v52;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = xmmword_1B7F54B10;
      *((_QWORD *)v19 + 9) = 0;
      *((_OWORD *)v19 + 5) = xmmword_1B7F54B20;
      *((_QWORD *)v19 + 12) = 0;
      *(_OWORD *)(v19 + 104) = xmmword_1B7F54B30;
      *((_QWORD *)v19 + 15) = 0;
      *((_OWORD *)v19 + 8) = xmmword_1B7F54B40;
      *((_QWORD *)v19 + 18) = 0;
      *(_OWORD *)(v19 + 152) = xmmword_1B7F54B50;
      *((_QWORD *)v19 + 21) = 0;
      *((_QWORD *)v19 + 22) = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *((_QWORD *)v19 + 27) = 0;
      v55 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v54[0];
        if (v37)
        {
          *(_QWORD *)v54[0] = *v37;
        }
        else
        {
          *(_QWORD *)v54[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v52;
          if (!*(_QWORD *)v12)
          {
LABEL_77:
            v54[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
            goto LABEL_78;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_77;
      }
      v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_34;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v52;
            if (*v52)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v52;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_59:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          v49 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v49)
            operator delete(v49);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v53 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_78;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_78:
    v39 = *(_OWORD *)(v3 + 5);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v3 + 7);
    *(_OWORD *)(v12 + 24) = v39;
    v40 = *(_OWORD *)(v3 + 9);
    v41 = *(_OWORD *)(v3 + 11);
    v42 = *(_OWORD *)(v3 + 13);
    *(_OWORD *)(v12 + 104) = *(_OWORD *)(v3 + 15);
    *(_OWORD *)(v12 + 88) = v42;
    *(_OWORD *)(v12 + 72) = v41;
    *(_OWORD *)(v12 + 56) = v40;
    v43 = *(_OWORD *)(v3 + 17);
    v44 = *(_OWORD *)(v3 + 19);
    v45 = *(_OWORD *)(v3 + 21);
    *(_OWORD *)(v12 + 168) = *(_OWORD *)(v3 + 23);
    *(_OWORD *)(v12 + 152) = v45;
    *(_OWORD *)(v12 + 136) = v44;
    *(_OWORD *)(v12 + 120) = v43;
    *((_QWORD *)v12 + 23) = v3[25];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 192, (char *)v3[26], v3[27], (uint64_t)(v3[27] - v3[26]) >> 4);
    *((_QWORD *)v12 + 27) = v3[29];

LABEL_81:
    v46 = (_QWORD *)v3[1];
    if (v46)
    {
      do
      {
        v47 = v46;
        v46 = (_QWORD *)*v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        v47 = (_QWORD *)v3[2];
        v48 = *v47 == (_QWORD)v3;
        v3 = v47;
      }
      while (!v48);
    }
    v3 = v47;
  }
  while (v47 != v50);
}

void sub_1B7DAFAF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](v3 - 104);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D094D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D094D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D094D0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7DAFD14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D094D0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 160;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D09560;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D09560;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D09560;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7DAFF44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D09560;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsSleepStages,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsSleepStages const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D095F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D095F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, double *a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 680))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = a2[1];
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 680))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7DB0244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 656);
      v7 = *(_QWORD *)(a1 + 648);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7DB044C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(uint64_t a1, double *a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  int v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  int v17;
  char v18;
  double v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  double v58;
  double v59;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = a2[1];
  v8 = a2[2];
  v9 = *((_QWORD *)a2 + 3);
  v10 = *((unsigned __int8 *)a2 + 32);
  v11 = *((_BYTE *)a2 + 33);
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) < 0.01)
    {
      v10 = 0;
      v11 = 0;
      v9 = 0;
      v8 = 0.0;
      v6 = 0.0;
    }
  }
  else
  {
    v6 = a2[1];
  }
  v12 = *a2;
  v13 = *(double *)(a1 + 16);
  v14 = v13 - v6;
  v15 = v8 - v6 - (v13 - v6);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v15 < 0.01)
      goto LABEL_10;
    if (v14 >= 0.01)
      goto LABEL_14;
LABEL_13:
    v18 = v11;
    v17 = v10;
    v16 = v9;
    v19 = v8;
    v13 = v6;
    goto LABEL_47;
  }
  if (v14 < 0.01)
    goto LABEL_13;
  if (v15 >= 0.01)
  {
LABEL_14:
    v19 = v8;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v8 = *(double *)(a1 + 16);
    if (!v10)
      goto LABEL_47;
    goto LABEL_15;
  }
LABEL_10:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = 0.0;
  v19 = 0.0;
  if (!v10)
    goto LABEL_47;
LABEL_15:
  v58 = v6;
  v59 = v8;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 352, v9, v9);
  v20 = *(_QWORD *)(a1 + 112);
  if (v20 != *(_QWORD *)(a1 + 104) || *(uint64_t *)(a1 + 128) > 0)
  {
    v21 = v58;
    v22 = v59;
    if (v58 < *(double *)(a1 + 48))
    {
      v23 = *(double *)(a1 + 8);
      if (v58 >= v23)
        v23 = v58;
      *(double *)(a1 + 48) = v23;
    }
    if (v59 > *(double *)(a1 + 56))
    {
      v24 = *(double *)(a1 + 16);
      if (v24 >= v59)
        v24 = v59;
      *(double *)(a1 + 56) = v24;
    }
    if (!a3)
      goto LABEL_29;
    goto LABEL_26;
  }
  v25.f64[1] = *(float64_t *)(a1 + 16);
  v21 = v58;
  v22 = v59;
  v25.f64[0] = v58;
  v26.f64[0] = *(float64_t *)(a1 + 8);
  v26.f64[1] = v59;
  v27 = (int8x16_t)vcgtq_f64(v26, v25);
  v26.f64[0] = v58;
  *(int8x16_t *)(a1 + 48) = vbslq_s8(v27, *(int8x16_t *)(a1 + 8), (int8x16_t)v26);
  if (a3)
  {
LABEL_26:
    if (v21 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v21);
      v21 = v58;
      v22 = v59;
      v20 = *(_QWORD *)(a1 + 112);
    }
  }
LABEL_29:
  v28 = *(_QWORD *)(a1 + 120);
  if (v20 >= v28)
  {
    v30 = *(_QWORD *)(a1 + 104);
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v30) >> 4);
    v32 = v31 + 1;
    if (v31 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v30) >> 4);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x2AAAAAAAAAAAAAALL)
      v34 = 0x555555555555555;
    else
      v34 = v32;
    if (v34)
    {
      v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v34);
      v21 = v58;
      v22 = v59;
    }
    else
    {
      v35 = 0;
    }
    v36 = v34 + 48 * v31;
    v37 = v34 + 48 * v35;
    *(double *)v36 = v12;
    *(double *)(v36 + 8) = v21;
    *(double *)(v36 + 16) = v22;
    *(_QWORD *)(v36 + 24) = v9;
    *(_BYTE *)(v36 + 32) = v10;
    *(_BYTE *)(v36 + 33) = v11;
    *(_WORD *)(v36 + 40) = 0;
    *(_BYTE *)(v36 + 42) = 0;
    v29 = v36 + 48;
    v39 = *(char **)(a1 + 104);
    v38 = *(char **)(a1 + 112);
    if (v38 != v39)
    {
      do
      {
        v40 = *((_OWORD *)v38 - 3);
        v41 = *((_OWORD *)v38 - 2);
        *(_OWORD *)(v36 - 21) = *(_OWORD *)(v38 - 21);
        *(_OWORD *)(v36 - 48) = v40;
        *(_OWORD *)(v36 - 32) = v41;
        v36 -= 48;
        v38 -= 48;
      }
      while (v38 != v39);
      v38 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v36;
    *(_QWORD *)(a1 + 112) = v29;
    *(_QWORD *)(a1 + 120) = v37;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(double *)v20 = v12;
    *(double *)(v20 + 8) = v21;
    *(double *)(v20 + 16) = v22;
    *(_QWORD *)(v20 + 24) = v9;
    *(_BYTE *)(v20 + 32) = v10;
    *(_BYTE *)(v20 + 33) = v11;
    *(_WORD *)(v20 + 40) = 0;
    v29 = v20 + 48;
    *(_BYTE *)(v20 + 42) = 0;
  }
  *(_QWORD *)(a1 + 112) = v29;
  if (*(_BYTE *)(a1 + 33))
  {
    v42 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v42);
  }
LABEL_47:
  if (v17)
  {
    v43 = *(_QWORD *)(a1 + 544);
    v44 = *(_QWORD *)(a1 + 552);
    if (v43 >= v44)
    {
      v46 = *(_QWORD *)(a1 + 536);
      v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v43 - v46) >> 3);
      v48 = v47 + 1;
      if (v47 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - v46) >> 3);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x333333333333333)
        v50 = 0x666666666666666;
      else
        v50 = v48;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v50);
      else
        v51 = 0;
      v52 = v50 + 40 * v47;
      v53 = v50 + 40 * v51;
      *(double *)v52 = v12;
      *(double *)(v52 + 8) = v13;
      *(double *)(v52 + 16) = v19;
      *(_QWORD *)(v52 + 24) = v16;
      *(_BYTE *)(v52 + 32) = v17;
      *(_BYTE *)(v52 + 33) = v18;
      v45 = v52 + 40;
      v54 = *(char **)(a1 + 544);
      v55 = *(char **)(a1 + 536);
      if (v54 != v55)
      {
        do
        {
          v56 = *(_OWORD *)(v54 - 40);
          v57 = *(_OWORD *)(v54 - 24);
          *(_WORD *)(v52 - 8) = *((_WORD *)v54 - 4);
          *(_OWORD *)(v52 - 24) = v57;
          *(_OWORD *)(v52 - 40) = v56;
          v52 -= 40;
          v54 -= 40;
        }
        while (v54 != v55);
        v54 = *(char **)(a1 + 536);
      }
      *(_QWORD *)(a1 + 536) = v52;
      *(_QWORD *)(a1 + 544) = v45;
      *(_QWORD *)(a1 + 552) = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(double *)v43 = v12;
      *(double *)(v43 + 8) = v13;
      *(double *)(v43 + 16) = v19;
      *(_QWORD *)(v43 + 24) = v16;
      *(_BYTE *)(v43 + 32) = v17;
      v45 = v43 + 40;
      *(_BYTE *)(v43 + 33) = v18;
    }
    *(_QWORD *)(a1 + 544) = v45;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 682))
  {
    *(_BYTE *)(a1 + 684) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 684) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7DB096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 536), *(_QWORD *)(a1 + 544), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 5;
    }
    while (v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7DB0A58(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 560), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  v9 = 0uLL;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = xmmword_1B7F54B10;
  *(_QWORD *)(v8 + 136) = 0;
  *(_OWORD *)(v8 + 144) = xmmword_1B7F54B20;
  *(_QWORD *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 168) = xmmword_1B7F54B30;
  *(_QWORD *)(v8 + 184) = 0;
  *(_OWORD *)(v8 + 192) = xmmword_1B7F54B40;
  *(_QWORD *)(v8 + 208) = 0;
  *(_OWORD *)(v8 + 216) = xmmword_1B7F54B50;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 240) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 248) = 0;
  v10 = *(void **)(v8 + 256);
  if (v10)
  {
    *(_QWORD *)(a1 + 304) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_OWORD *)(v8 + 256) = v9;
  *(_OWORD *)(v8 + 272) = v9;
  if (*(_QWORD *)(a1 + 344))
  {
    v11 = *(_QWORD **)(a1 + 328);
    v12 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 328) = a1 + 336;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 560));
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 684))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 684) = 0;
  }

}

void sub_1B7DB0C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7DB0CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 696));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 680) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7DB1044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40A18ECEBDLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7DB11F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7DB145C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), &v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), &v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 680))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7DB210C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  double v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  v14[0] = a5;
  v14[1] = a6;
  v14[2] = a7;
  *(_QWORD *)&v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, v14, a3, a4);
}

void sub_1B7DB21AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI23HDStatisticsSleepStages24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsSleepStages,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D096A0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_WORD *)(a1 + 688) = 1;
  *(_BYTE *)(a1 + 690) = 0;
  *(_BYTE *)(a1 + 692) = 0;
  *(_QWORD *)(a1 + 696) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D096A0;
  v2 = *(void **)(a1 + 720);
  if (v2)
  {
    *(_QWORD *)(a1 + 728) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 656);
  if (v3)
  {
    *(_QWORD *)(a1 + 664) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 688) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_configureForStartTime(a1);

}

void sub_1B7DB2318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 696) = v4;
    v3 = v5;
  }

}

void sub_1B7DB2378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 88, a2);
  v7 = a2;
  v4 = a1[88];
  v5 = a1[85];
  a1[85] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[85]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7DB250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[67];

  if (*(_BYTE *)(a1 + 688))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7DB25B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 690))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 689))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 688))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 691))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 728);
      v20 = *(_QWORD *)(a1 + 736);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 720);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 728);
        v35 = *(char **)(a1 + 720);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 720);
        }
        *(_QWORD *)(a1 + 720) = v30;
        *(_QWORD *)(a1 + 728) = v23;
        *(_QWORD *)(a1 + 736) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 728) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7DB2854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 690))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 690) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 689))
    goto LABEL_5;
  v9 = *(void **)(a1 + 712);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_416);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 712);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;

  *(_BYTE *)(a1 + 689) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)(a1 + 736) = 0;
    *(_QWORD *)(a1 + 728) = 0;
    *(_QWORD *)(a1 + 720) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 720);
      v37 = *(__int128 **)(a1 + 728);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 728);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 728) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 720);
  v39 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 664) != *(_QWORD *)(a1 + 656))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 664) != *(_QWORD *)(a1 + 656));
  }
  *(_BYTE *)(a1 + 690) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 692))
    {
      *(_BYTE *)(a1 + 692) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 690) = 0;
LABEL_83:

  return v7;
}

void sub_1B7DB2F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 690) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 691) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 690))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 690))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 712);
    *(_QWORD *)(a1 + 712) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 689) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 689))
  {
    v8 = *(void **)(a1 + 712);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 712);
      *(_QWORD *)(a1 + 712) = v9;

      v8 = *(void **)(a1 + 712);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7DB3248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 688) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI23HDStatisticsSleepStagesEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 688) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7DB3368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 688) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t *i;
  void (**v11)(statistics::StatisticsBucket *__hidden);
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  int v24;
  _QWORD v25[6];
  int v26;
  _QWORD v27[3];
  int8x16_t v28;
  __int8 v29;
  __int8 v30;
  char v31;
  int v32;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 688), CFSTR("needs_config"));
  v4 = v3;
  v25[0] = &off_1E6D09A88;
  v25[1] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a1 + 112);
  LOBYTE(v26) = 1;
  v25[2] = v5;
  memset(&v25[3], 0, 24);
  statistics::StatisticsEngine::makeCurrentBucket(v25);
  v11 = &off_1E6CEA578;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = 511;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v6 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v7 = *(_QWORD *)(a1 + 136);
  v22 = *(_BYTE *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 145);
  v21 = *(_DWORD *)(a1 + 148) == 0;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v12 = v6;
  v13 = v8;
  v8.i64[0] = *(_QWORD *)(a1 + 176);
  v17 = v7;
  v18 = v8.i64[0];
  v9 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v9 != i; v9 += 3)
  {
    v27[0] = &off_1E6CFF278;
    v32 = 127;
    v28 = vextq_s8(*v9, *v9, 8uLL);
    v27[1] = v9[1].i64[0];
    v27[2] = v9[1].i64[1];
    v31 = 0;
    v30 = v9[2].i8[9];
    v29 = v9[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)v19, (const statistics::RawQuantitySample *)v27);
    PB::Base::~Base((PB::Base *)v27);
  }
  statistics::StatisticsBucket::makeStatistics(&v11);
  HDStatisticsRelative<HDStatisticsSleepStages>::archive((uint64_t)v27, a1 + 240);
}

void sub_1B7DB3530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  PB::Base::~Base((PB::Base *)&a41);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a34);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t j;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  id v68;
  __n128 v69;
  void *v70[2];
  __int128 v71;
  int8x16_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79[4];
  void *__p;
  char *v81;
  unint64_t v82;
  _BYTE v83[64];
  __int128 v84;
  _BYTE v85[32];
  __int128 v86;
  _BYTE v87[32];
  _BYTE v88[48];
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  int v105;
  void (**v106)(statistics::StatisticsEngine *__hidden);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BYTE v113[32];
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;

  v65 = a2;
  *(_BYTE *)(a1 + 688) = objc_msgSend(v65, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v65;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket((uint64_t)&v69.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v70 = 0u;
  v71 = 0u;
  v114 = 0;
  v68 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v113, (const unsigned __int8 *)objc_msgSend(v68, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v114));
  v106 = &off_1E6D09A88;
  v107 = 0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v112 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v106, (PB::Reader *)v113);
  v67 = a1;
  v69.n128_u64[0] = v108;
  if (v107)
  {
    v76 = 0;
    memset(v79, 0, sizeof(v79));
    __p = 0;
    v82 = 0;
    v81 = 0;
    *(_DWORD *)v83 = 0;
    memset(&v83[8], 0, 32);
    *(_OWORD *)&v83[40] = xmmword_1B7F54B10;
    v84 = xmmword_1B7F54B20;
    *(_QWORD *)&v83[56] = 0;
    *(_QWORD *)v85 = 0;
    *(_OWORD *)&v85[8] = xmmword_1B7F54B30;
    v86 = xmmword_1B7F54B40;
    *(_QWORD *)&v85[24] = 0;
    *(_QWORD *)v87 = 0;
    *(_OWORD *)&v87[8] = xmmword_1B7F54B50;
    *(_QWORD *)&v87[24] = 0;
    *(_QWORD *)v88 = 0x7FFFFFFFFFFFFFFFLL;
    memset(&v88[8], 0, 34);
    v91 = 0;
    v90 = 0;
    v89 = &v90;
    v93 = 0u;
    v92 = 0u;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v103 = 0u;
    v104 = 0u;
    v105 = 1065353216;
    v72 = vextq_s8(*(int8x16_t *)(v107 + 8), *(int8x16_t *)(v107 + 8), 8uLL);
    v4 = *(_QWORD *)(v107 + 72);
    v73 = *(_QWORD *)(v107 + 64);
    v74 = *(_BYTE *)(v107 + 185);
    v75 = *(_BYTE *)(v107 + 186);
    v77 = vextq_s8(*(int8x16_t *)(v107 + 24), *(int8x16_t *)(v107 + 24), 8uLL);
    v78 = v4;
    v5 = *(_QWORD *)(v107 + 80);
    v6 = *(_QWORD *)(v107 + 88);
    v66 = (_QWORD *)v107;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v82)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v81;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v81 = (char *)(v19 + 6);
          v82 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v81 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v66[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsSleepStages>::unarchive((uint64_t)&v115, v23);
      *(_OWORD *)v88 = v125;
      *(_OWORD *)&v88[16] = v126;
      *(_OWORD *)&v88[32] = v127;
      *(_OWORD *)&v85[16] = v121;
      v86 = v122;
      *(_OWORD *)v87 = v123;
      *(_OWORD *)&v87[16] = v124;
      *(_OWORD *)&v83[32] = v117;
      *(_OWORD *)&v83[48] = v118;
      v84 = v119;
      *(_OWORD *)v85 = v120;
      *(_OWORD *)v83 = v115;
      *(_OWORD *)&v83[16] = v116;
    }
    v24 = (uint64_t *)v66[17];
    for (i = (uint64_t *)v66[18]; v24 != i; *(_OWORD *)(v33 + 40) = v43)
    {
      v26 = *v24;
      HDStatisticsRelative<HDStatisticsSleepStages>::unarchive((uint64_t)&v115, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v90;
      v29 = &v90;
      v30 = &v90;
      if (v90)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_32;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_35;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_32:
      v33 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 216) = 0u;
      *(_OWORD *)(v33 + 232) = 0u;
      *((_OWORD *)v33 + 5) = xmmword_1B7F54B10;
      *(_OWORD *)(v33 + 104) = xmmword_1B7F54B20;
      *((_OWORD *)v33 + 8) = xmmword_1B7F54B30;
      *(_OWORD *)(v33 + 152) = xmmword_1B7F54B40;
      *((_OWORD *)v33 + 11) = xmmword_1B7F54B50;
      *((_QWORD *)v33 + 25) = 0x7FFFFFFFFFFFFFFFLL;
      *((_WORD *)v33 + 120) = 0;
      *((_OWORD *)v33 + 13) = 0u;
      *((_OWORD *)v33 + 14) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v89)
      {
        v89 = (uint64_t **)*v89;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v90, v32);
      ++v91;
LABEL_35:
      v34 = v127;
      v35 = v126;
      v36 = v125;
      v37 = v123;
      *(_OWORD *)(v33 + 184) = v124;
      *(_OWORD *)(v33 + 200) = v36;
      *(_OWORD *)(v33 + 216) = v35;
      *(_OWORD *)(v33 + 232) = v34;
      v38 = v122;
      v39 = v121;
      v40 = v119;
      *(_OWORD *)(v33 + 120) = v120;
      *(_OWORD *)(v33 + 136) = v39;
      *(_OWORD *)(v33 + 152) = v38;
      *(_OWORD *)(v33 + 168) = v37;
      v41 = v118;
      v42 = v117;
      v43 = v115;
      *(_OWORD *)(v33 + 56) = v116;
      *(_OWORD *)(v33 + 72) = v42;
      *(_OWORD *)(v33 + 88) = v41;
      *(_OWORD *)(v33 + 104) = v40;
      ++v24;
    }
    v44 = v66[5];
    for (j = v66[6]; v44 != j; v44 += 8)
    {
      v47 = *(double *)(*(_QWORD *)v44 + 8);
      v46 = *(double *)(*(_QWORD *)v44 + 16);
      if (v47 >= v46)
        v48 = *(double *)(*(_QWORD *)v44 + 16);
      else
        v48 = *(double *)(*(_QWORD *)v44 + 8);
      if (v46 < v47)
        v46 = *(double *)(*(_QWORD *)v44 + 8);
      HKIntervalMask<double>::_insertInterval(v79, v48, v46);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=((uint64_t)&v69.n128_i64[1], (uint64_t)&v72);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)&v72);
  }
  v49 = v109;
  v50 = v110;
  if (v109 != v110)
  {
    v51 = (char *)v70[1];
    do
    {
      v52 = *(_QWORD *)(*(_QWORD *)v49 + 24);
      v53 = *(_QWORD *)(*(_QWORD *)v49 + 32);
      v54 = *(_QWORD *)(*(_QWORD *)v49 + 8);
      v55 = *(_QWORD *)(*(_QWORD *)v49 + 16);
      if ((unint64_t)v51 >= (unint64_t)v71)
      {
        v56 = (char *)v70[0];
        v57 = 0xCCCCCCCCCCCCCCCDLL * ((v51 - (char *)v70[0]) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 3) > v58)
          v58 = 0x999999999999999ALL * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (unint64_t)v70[0]) >> 3) >= 0x333333333333333)
          v59 = 0x666666666666666;
        else
          v59 = v58;
        if (v59)
        {
          v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
          v51 = (char *)v70[1];
          v56 = (char *)v70[0];
        }
        else
        {
          v60 = 0;
        }
        v61 = v59 + 40 * v57;
        *(_QWORD *)v61 = v53;
        *(_QWORD *)(v61 + 8) = v52;
        *(_QWORD *)(v61 + 16) = v54;
        *(_QWORD *)(v61 + 24) = v55;
        *(_WORD *)(v61 + 32) = 1;
        v62 = (char *)v61;
        if (v51 != v56)
        {
          do
          {
            v63 = *(_OWORD *)(v51 - 40);
            v64 = *(_OWORD *)(v51 - 24);
            *((_WORD *)v62 - 4) = *((_WORD *)v51 - 4);
            *(_OWORD *)(v62 - 24) = v64;
            *(_OWORD *)(v62 - 40) = v63;
            v62 -= 40;
            v51 -= 40;
          }
          while (v51 != v56);
          v56 = (char *)v70[0];
        }
        v70[0] = v62;
        v51 = (char *)(v61 + 40);
        v70[1] = (void *)(v61 + 40);
        *(_QWORD *)&v71 = v59 + 40 * v60;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v51 = v53;
        *((_QWORD *)v51 + 1) = v52;
        *((_QWORD *)v51 + 2) = v54;
        *((_QWORD *)v51 + 3) = v55;
        *((_WORD *)v51 + 16) = 1;
        v51 += 40;
      }
      v70[1] = v51;
      v49 += 8;
    }
    while (v49 != v50);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v106);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=((_QWORD *)(v67 + 112), &v69);
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)&v69.n128_i64[1]);

}

void sub_1B7DB3CF8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v18;
  void *v19;
  void *v20;
  va_list va;

  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x4B0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x460]);
  v18 = (void *)STACK[0x448];
  if (STACK[0x448])
  {
    STACK[0x450] = (unint64_t)v18;
    operator delete(v18);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x420]);
  std::__tree<long>::destroy((_QWORD *)STACK[0x410]);
  v19 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v19;
    operator delete(v19);
  }
  objc_destroyWeak((id *)&STACK[0x318]);
  v20 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v20;
    operator delete(v20);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x4E0]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = xmmword_1B7F54B10;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_1B7F54B20;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = xmmword_1B7F54B30;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_1B7F54B40;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_1B7F54B50;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(_QWORD *)(a1 + 552) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 496);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 456);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 416);
  v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(_QWORD *)(a1 + 400) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 352);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 336));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[536];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[472];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 704));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 688) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7DB4234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 68), a2 + 34);
  v4 = a2[35].n128_u64[1];
  a2[35].n128_u64[1] = 0;
  v5 = (void *)a1[71];
  a1[71] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 136);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  v15 = *(_OWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  v18 = *(_OWORD *)(a2 + 264);
  v19 = *(_OWORD *)(a2 + 280);
  v20 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v20;
  *(_OWORD *)(a1 + 264) = v18;
  *(_OWORD *)(a1 + 280) = v19;
  v21 = (_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  v22 = *(_QWORD **)(a2 + 328);
  if (v22 != (_QWORD *)(a2 + 336))
  {
    v23 = 0;
    v24 = (_QWORD *)(a1 + 336);
    while (1)
    {
      v25 = v22[4];
      v26 = (_QWORD *)(a1 + 336);
      if (v24 == v21)
        goto LABEL_12;
      v27 = v23;
      v28 = (_QWORD *)(a1 + 336);
      if (v23)
      {
        do
        {
          v26 = v27;
          v27 = (_QWORD *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v28[2];
          v29 = *v26 == (_QWORD)v28;
          v28 = v26;
        }
        while (v29);
      }
      if (v26[4] < v25)
      {
LABEL_12:
        if (v23)
          v30 = (uint64_t **)v26;
        else
          v30 = (uint64_t **)(a1 + 336);
        if (v23)
          v31 = (uint64_t **)(v26 + 1);
        else
          v31 = (uint64_t **)(a1 + 336);
        if (!*v31)
        {
LABEL_28:
          v34 = operator new(0xF8uLL);
          v35 = *((_OWORD *)v22 + 3);
          v34[2] = *((_OWORD *)v22 + 2);
          v34[3] = v35;
          v36 = *((_OWORD *)v22 + 4);
          v37 = *((_OWORD *)v22 + 5);
          v38 = *((_OWORD *)v22 + 7);
          v34[6] = *((_OWORD *)v22 + 6);
          v34[7] = v38;
          v34[4] = v36;
          v34[5] = v37;
          v39 = *((_OWORD *)v22 + 8);
          v40 = *((_OWORD *)v22 + 9);
          v41 = *((_OWORD *)v22 + 11);
          v34[10] = *((_OWORD *)v22 + 10);
          v34[11] = v41;
          v34[8] = v39;
          v34[9] = v40;
          v42 = *((_OWORD *)v22 + 12);
          v43 = *((_OWORD *)v22 + 13);
          v44 = *((_OWORD *)v22 + 14);
          *((_QWORD *)v34 + 30) = v22[30];
          v34[13] = v43;
          v34[14] = v44;
          v34[12] = v42;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 328), (uint64_t)v30, v31, (uint64_t *)v34);
        }
      }
      else
      {
        v31 = (uint64_t **)(a1 + 336);
        v30 = (uint64_t **)(a1 + 336);
        if (!v23)
          goto LABEL_28;
        v32 = v23;
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v32;
            v33 = v32[4];
            if (v33 <= v25)
              break;
            v32 = *v30;
            v31 = v30;
            if (!*v30)
              goto LABEL_28;
          }
          if (v33 >= v25)
            break;
          v32 = v30[1];
          if (!v32)
          {
            v31 = v30 + 1;
            goto LABEL_28;
          }
        }
      }
      v45 = (_QWORD *)v22[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v22[2];
          v29 = *v46 == (_QWORD)v22;
          v22 = v46;
        }
        while (!v29);
      }
      if (v46 == (_QWORD *)(a2 + 336))
        break;
      v23 = (_QWORD *)*v21;
      v24 = *(_QWORD **)(a1 + 328);
      v22 = v46;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 352, a2 + 352);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 392), *(const void **)(a2 + 392), *(_QWORD *)(a2 + 400), (uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 416, a2 + 416);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 456, a2 + 456);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 496, a2 + 496);
  return a1;
}

void sub_1B7DB462C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 400) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  v16 = *(_OWORD *)(a2 + 312);
  v18 = *(_OWORD *)(a2 + 264);
  v17 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 264) = v18;
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v19 = a1 + 336;
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 336));
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v20 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 336) = v20;
  v21 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 344) = v21;
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(a2 + 328) = a2 + 336;
    *(_QWORD *)(a2 + 336) = 0;
    *(_QWORD *)(a2 + 344) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 328) = v19;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 392, (__n128 *)(a2 + 392));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 416, (uint64_t *)(a2 + 416));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 456, (uint64_t *)(a2 + 456));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 496, (uint64_t *)(a2 + 496));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  id v2;
  unint64_t v3;
  double v6;
  id v7;
  double *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id *v15;
  id WeakRetained;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *i;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  void **v55;
  char *v56;
  unint64_t v57;
  id v58;
  id v59;
  char v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  int8x8_t prime;
  void *v66;
  void *v67;
  uint64_t v68;
  _QWORD **v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _QWORD *k;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD *v89;
  _QWORD *v90;
  BOOL v91;
  void *v92;
  uint64_t **j;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  void *v109;
  int v110;
  void *v111;
  void *v112;
  int v113;
  uint64_t v115;
  id v116;
  unint64_t v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  void *__p[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _QWORD v136[3];
  _QWORD *v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = objc_alloc(MEMORY[0x1E0C99D68]);
  v8 = a2 + 5;
  if (v6 != -1.79769313e308)
    v8 = a2;
  v120 = (id)objc_msgSend(v7, "initWithTimeIntervalSinceReferenceDate:", *v8);
  v122 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v10 = (void *)v9;
  v11 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = *(id *)(a1 + 16);
    if (objc_msgSend(v12, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v12, "underlyingSampleType");
      v13 = objc_claimAutoreleasedReturnValue();

      v11 = (id)v13;
    }

  }
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v11, v120, v10);
  v115 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v15 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v17 = *(uint64_t **)(v122 + 392);
      v18 = *(uint64_t **)(v122 + 400);
      while (v17 != v18)
      {
        v19 = *v17;
        v20 = objc_loadWeakRetained(v15);
        objc_msgSend(v20, "sourceForSourceID:", v19);
        v3 = objc_claimAutoreleasedReturnValue();

        if (v3)
        {
          if ((objc_msgSend(v2, "containsObject:", v3) & 1) == 0)
            objc_msgSend(v2, "addObject:", v3);
        }

        ++v17;
      }
      v21 = (void *)objc_msgSend(v2, "copy");
      objc_msgSend(v14, "_setSources:", v21);

      a1 = v115;
    }
  }

  v136[0] = &off_1E6D09770;
  v137 = v136;
  v121 = v14;
  v22 = *(_OWORD *)(v122 + 264);
  v23 = *(_OWORD *)(v122 + 296);
  v24 = *(_OWORD *)(v122 + 312);
  v133 = *(_OWORD *)(v122 + 280);
  v134 = v23;
  v135 = v24;
  v25 = *(_OWORD *)(v122 + 200);
  v26 = *(_OWORD *)(v122 + 232);
  v129 = *(_OWORD *)(v122 + 216);
  v130 = v26;
  v131 = *(_OWORD *)(v122 + 248);
  v132 = v22;
  v27 = *(_OWORD *)(v122 + 136);
  v28 = *(_OWORD *)(v122 + 168);
  v125 = *(_OWORD *)(v122 + 152);
  v126 = v28;
  v127 = *(_OWORD *)(v122 + 184);
  v128 = v25;
  *(_OWORD *)__p = *(_OWORD *)(v122 + 120);
  v124 = v27;
  if (!v137)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_QWORD *, void **))(*v137 + 48))(v137, __p);
  v30 = 0;
  v31 = 0.0;
  v32 = 0x7FFFFFFFFFFFFFFFLL;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = v29 + v30;
    v35 = *(double *)(v29 + v30 + 24);
    if (v35 > 2.22507386e-308 && v35 >= v31)
    {
      if (v35 <= v31)
      {
        if (*(_QWORD *)(v29 + v30 + 32) < v32)
        {
          v33 = *(_QWORD *)(v34 + 16);
          v31 = *(double *)(v29 + v30 + 24);
          v32 = *(_QWORD *)(v29 + v30 + 32);
        }
      }
      else
      {
        v33 = *(_QWORD *)(v34 + 16);
        v32 = *(_QWORD *)(v29 + v30 + 32);
        v31 = *(double *)(v29 + v30 + 24);
      }
    }
    v30 += 24;
  }
  while (v30 != 144);
  if (v33 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v31);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v121, "setCategoryValue:", v37);

  }
  v38 = *(_OWORD *)(v122 + 296);
  v133 = *(_OWORD *)(v122 + 280);
  v134 = v38;
  v135 = *(_OWORD *)(v122 + 312);
  v39 = *(_OWORD *)(v122 + 232);
  v129 = *(_OWORD *)(v122 + 216);
  v130 = v39;
  v40 = *(_OWORD *)(v122 + 264);
  v131 = *(_OWORD *)(v122 + 248);
  v132 = v40;
  v41 = *(_OWORD *)(v122 + 168);
  v125 = *(_OWORD *)(v122 + 152);
  v126 = v41;
  v42 = *(_OWORD *)(v122 + 200);
  v127 = *(_OWORD *)(v122 + 184);
  v128 = v42;
  v43 = *(_OWORD *)(v122 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v122 + 120);
  v124 = v43;
  if (!v137)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v121, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, void **))(*v137 + 48))(v137, __p));
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v119 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v44 = *(uint64_t **)(v122 + 392);
    for (i = *(uint64_t **)(v122 + 400); v44 != i; ++v44)
    {
      v46 = *v44;
      v2 = objc_loadWeakRetained((id *)(v115 + 48));
      objc_msgSend(v2, "sourceForSourceID:", v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (v47 && (objc_msgSend(v119, "containsObject:", v47) & 1) == 0)
        objc_msgSend(v119, "addObject:", v47);

    }
    v11 = (id)objc_msgSend(v119, "copy");
    objc_msgSend(v121, "_setSources:", v11);

    v116 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    *(_OWORD *)__p = 0u;
    v124 = 0u;
    LODWORD(v125) = 1065353216;
    v48 = *(_QWORD **)(v122 + 328);
    if (v48 != (_QWORD *)(v122 + 336))
    {
      while (1)
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_bundleIdentifierForSourceID(v122, v48[4]);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v2 = v49;
        if (!v49)
          goto LABEL_117;
        v50 = objc_msgSend(v49, "hash");
        v51 = v50;
        v52 = (unint64_t)__p[1];
        if (!__p[1])
          break;
        v53 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v53.i16[0] = vaddlv_u8(v53);
        v54 = v53.u32[0];
        if (v53.u32[0] > 1uLL)
        {
          v3 = v50;
          if ((void *)v50 >= __p[1])
            v3 = v50 % (unint64_t)__p[1];
        }
        else
        {
          v3 = ((unint64_t)__p[1] - 1) & v50;
        }
        v55 = (void **)*((_QWORD *)__p[0] + v3);
        if (!v55)
          break;
        v56 = (char *)*v55;
        if (!*v55)
          break;
        v117 = (unint64_t)__p[1] - 1;
        while (1)
        {
          v57 = *((_QWORD *)v56 + 1);
          if (v57 == v51)
            break;
          if (v54 > 1)
          {
            if (v57 >= v52)
              v57 %= v52;
          }
          else
          {
            v57 &= v117;
          }
          if (v57 != v3)
            goto LABEL_59;
LABEL_58:
          v56 = *(char **)v56;
          if (!v56)
            goto LABEL_59;
        }
        v58 = *((id *)v56 + 2);
        v59 = v2;
        v11 = v59;
        if (v58 != v59)
        {
          v60 = objc_msgSend(v58, "isEqualToString:", v59);

          if ((v60 & 1) != 0)
            goto LABEL_116;
          goto LABEL_58;
        }

LABEL_116:
        *(_OWORD *)(v56 + 24) = *(_OWORD *)(v48 + 5);
        v80 = *(_OWORD *)(v48 + 7);
        v81 = *(_OWORD *)(v48 + 9);
        v82 = *(_OWORD *)(v48 + 11);
        *(_OWORD *)(v56 + 88) = *(_OWORD *)(v48 + 13);
        *(_OWORD *)(v56 + 72) = v82;
        *(_OWORD *)(v56 + 56) = v81;
        *(_OWORD *)(v56 + 40) = v80;
        v83 = *(_OWORD *)(v48 + 15);
        v84 = *(_OWORD *)(v48 + 17);
        v85 = *(_OWORD *)(v48 + 19);
        *(_OWORD *)(v56 + 152) = *(_OWORD *)(v48 + 21);
        *(_OWORD *)(v56 + 136) = v85;
        *(_OWORD *)(v56 + 120) = v84;
        *(_OWORD *)(v56 + 104) = v83;
        v86 = *(_OWORD *)(v48 + 23);
        v87 = *(_OWORD *)(v48 + 25);
        v88 = *(_OWORD *)(v48 + 27);
        *(_OWORD *)(v56 + 216) = *(_OWORD *)(v48 + 29);
        *(_OWORD *)(v56 + 200) = v88;
        *(_OWORD *)(v56 + 184) = v87;
        *(_OWORD *)(v56 + 168) = v86;

LABEL_117:
        v89 = (_QWORD *)v48[1];
        if (v89)
        {
          do
          {
            v90 = v89;
            v89 = (_QWORD *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            v90 = (_QWORD *)v48[2];
            v91 = *v90 == (_QWORD)v48;
            v48 = v90;
          }
          while (!v91);
        }
        v48 = v90;
        if (v90 == (_QWORD *)(v122 + 336))
        {
          for (j = (uint64_t **)v124; j; j = (uint64_t **)*j)
          {
            v94 = j[2];
            if (!v137)
              goto LABEL_172;
            v2 = j + 3;
            v95 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v137 + 48))(v137, (uint64_t *)j + 3);
            v96 = 0;
            v97 = 0.0;
            v98 = 0x7FFFFFFFFFFFFFFFLL;
            v99 = 0x7FFFFFFFFFFFFFFFLL;
            do
            {
              v100 = v95 + v96;
              v101 = *(double *)(v95 + v96 + 24);
              if (v101 > 2.22507386e-308 && v101 >= v97)
              {
                if (v101 <= v97)
                {
                  if (*(_QWORD *)(v95 + v96 + 32) < v98)
                  {
                    v99 = *(_QWORD *)(v100 + 16);
                    v97 = *(double *)(v95 + v96 + 24);
                    v98 = *(_QWORD *)(v95 + v96 + 32);
                  }
                }
                else
                {
                  v99 = *(_QWORD *)(v100 + 16);
                  v98 = *(_QWORD *)(v95 + v96 + 32);
                  v97 = *(double *)(v95 + v96 + 24);
                }
              }
              v96 += 24;
            }
            while (v96 != 144);
            if (v99 != 0x7FFFFFFFFFFFFFFFLL)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v97);
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v116, "setObject:forKeyedSubscript:", v103, v94);

            }
            if (!v137)
LABEL_172:
              std::__throw_bad_function_call[abi:ne180100]();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v137 + 48))(v137, (uint64_t *)j + 3));
            v11 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v11, v94);

          }
          goto LABEL_150;
        }
      }
LABEL_59:
      v56 = (char *)operator new(0xE8uLL);
      *(_QWORD *)v56 = 0;
      *((_QWORD *)v56 + 1) = v51;
      *((_QWORD *)v56 + 2) = v2;
      *(_OWORD *)(v56 + 56) = 0u;
      *(_OWORD *)(v56 + 72) = 0u;
      *(_OWORD *)(v56 + 104) = 0u;
      *(_OWORD *)(v56 + 120) = 0u;
      *(_OWORD *)(v56 + 152) = 0u;
      *(_OWORD *)(v56 + 168) = 0u;
      *(_OWORD *)(v56 + 184) = 0u;
      *(_OWORD *)(v56 + 24) = 0u;
      *(_OWORD *)(v56 + 40) = 0u;
      *(_OWORD *)(v56 + 200) = 0u;
      *(_OWORD *)(v56 + 216) = 0u;
      *((_OWORD *)v56 + 4) = xmmword_1B7F54B10;
      *(_OWORD *)(v56 + 88) = xmmword_1B7F54B20;
      *((_OWORD *)v56 + 7) = xmmword_1B7F54B30;
      *(_OWORD *)(v56 + 136) = xmmword_1B7F54B40;
      *((_OWORD *)v56 + 10) = xmmword_1B7F54B50;
      *((_QWORD *)v56 + 23) = 0x7FFFFFFFFFFFFFFFLL;
      *((_WORD *)v56 + 112) = 0;
      *((_OWORD *)v56 + 12) = 0u;
      *((_OWORD *)v56 + 13) = 0u;
      v61 = (float)(unint64_t)(*((_QWORD *)&v124 + 1) + 1);
      if (!v52 || (float)(*(float *)&v125 * (float)v52) < v61)
      {
        v62 = v52 < 3 || (v52 & (v52 - 1)) != 0;
        v63 = v62 | (2 * v52);
        v64 = vcvtps_u32_f32(v61 / *(float *)&v125);
        if (v63 <= v64)
          prime = (int8x8_t)v64;
        else
          prime = (int8x8_t)v63;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v52 = (unint64_t)__p[1];
        if ((void *)*(_QWORD *)&prime <= __p[1])
        {
          if ((void *)*(_QWORD *)&prime < __p[1])
          {
            v72 = vcvtps_u32_f32((float)*((unint64_t *)&v124 + 1) / *(float *)&v125);
            if (__p[1] < (void *)3
              || (v73 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
            {
              v72 = std::__next_prime(v72);
            }
            else
            {
              v74 = 1 << -(char)__clz(v72 - 1);
              if (v72 >= 2)
                v72 = v74;
            }
            if (*(_QWORD *)&prime <= v72)
              prime = (int8x8_t)v72;
            if (*(_QWORD *)&prime >= v52)
            {
              v52 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
                goto LABEL_72;
              v92 = __p[0];
              __p[0] = 0;
              if (v92)
                operator delete(v92);
              v52 = 0;
              __p[1] = 0;
            }
          }
        }
        else
        {
LABEL_72:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v66 = operator new(8 * *(_QWORD *)&prime);
          v67 = __p[0];
          __p[0] = v66;
          if (v67)
            operator delete(v67);
          v68 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v68++) = 0;
          while (*(_QWORD *)&prime != v68);
          v69 = (_QWORD **)v124;
          if ((_QWORD)v124)
          {
            v70 = *(_QWORD *)(v124 + 8);
            v71 = (uint8x8_t)vcnt_s8(prime);
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.u32[0] > 1uLL)
            {
              if (v70 >= *(_QWORD *)&prime)
                v70 %= *(_QWORD *)&prime;
            }
            else
            {
              v70 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v70) = &v124;
            for (k = *v69; k; v70 = v76)
            {
              v76 = k[1];
              if (v71.u32[0] > 1uLL)
              {
                if (v76 >= *(_QWORD *)&prime)
                  v76 %= *(_QWORD *)&prime;
              }
              else
              {
                v76 &= *(_QWORD *)&prime - 1;
              }
              if (v76 != v70)
              {
                if (!*((_QWORD *)__p[0] + v76))
                {
                  *((_QWORD *)__p[0] + v76) = v69;
                  goto LABEL_97;
                }
                *v69 = (_QWORD *)*k;
                *k = **((_QWORD **)__p[0] + v76);
                **((_QWORD **)__p[0] + v76) = k;
                k = v69;
              }
              v76 = v70;
LABEL_97:
              v69 = (_QWORD **)k;
              k = (_QWORD *)*k;
            }
          }
          v52 = (unint64_t)prime;
        }
        if ((v52 & (v52 - 1)) != 0)
        {
          if (v51 >= v52)
            v3 = v51 % v52;
          else
            v3 = v51;
        }
        else
        {
          v3 = (v52 - 1) & v51;
        }
      }
      v77 = __p[0];
      v78 = (_QWORD *)*((_QWORD *)__p[0] + v3);
      if (v78)
      {
        *(_QWORD *)v56 = *v78;
      }
      else
      {
        *(_QWORD *)v56 = v124;
        *(_QWORD *)&v124 = v56;
        v77[v3] = &v124;
        if (!*(_QWORD *)v56)
        {
LABEL_115:
          ++*((_QWORD *)&v124 + 1);
          goto LABEL_116;
        }
        v79 = *(_QWORD *)(*(_QWORD *)v56 + 8);
        if ((v52 & (v52 - 1)) != 0)
        {
          if (v79 >= v52)
            v79 %= v52;
        }
        else
        {
          v79 &= v52 - 1;
        }
        v78 = (char *)__p[0] + 8 * v79;
      }
      *v78 = v56;
      goto LABEL_115;
    }
LABEL_150:
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
    objc_msgSend(v121, "setCategoryValueBySource:", v116);
    objc_msgSend(v121, "setDataCountBySource:", v118);

  }
  v104 = v137;
  if (v137 == v136)
  {
    v106 = 4;
    v104 = v136;
    v105 = v115;
    goto LABEL_155;
  }
  v105 = v115;
  if (v137)
  {
    v106 = 5;
LABEL_155:
    (*(void (**)(void))(*v104 + 8 * v106))();
  }
  objc_msgSend(*(id *)(v105 + 16), "_unitForChangeInCanonicalUnit");
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "averageQuantity");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  if (v108)
  {
    objc_msgSend(v121, "averageQuantity");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v11, "isCompatibleWithUnit:", v107) & 1) == 0)
    {

LABEL_170:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v107);
      goto LABEL_171;
    }
  }
  objc_msgSend(v121, "minimumQuantity");
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  if (v109)
  {
    objc_msgSend(v121, "minimumQuantity");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "isCompatibleWithUnit:", v107))
    {
      v110 = 1;
      goto LABEL_164;
    }
  }
  objc_msgSend(v121, "maximumQuantity");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  if (v111)
  {
    objc_msgSend(v121, "maximumQuantity");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    v113 = objc_msgSend(v112, "isCompatibleWithUnit:", v107);

    v110 = v113 ^ 1;
    if (v109)
      goto LABEL_164;
  }
  else
  {
    v110 = 0;
    if (v109)
    {
LABEL_164:

      if (v108)
        goto LABEL_165;
      goto LABEL_169;
    }
  }
  if (v108)
  {
LABEL_165:

    if ((v110 & 1) == 0)
      goto LABEL_171;
    goto LABEL_170;
  }
LABEL_169:

  if (v110)
    goto LABEL_170;
LABEL_171:

  return v121;
}

void sub_1B7DB555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (v30)
  if (v28)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 376);
  v2 = *(_QWORD *)(a1 + 392);
  if (v1 != (*(_QWORD *)(a1 + 400) - v2) >> 3)
  {
    v4 = (void **)(a1 + 392);
    *(_QWORD *)(a1 + 400) = v2;
    std::vector<long long>::reserve((void **)(a1 + 392), v1);
    v5 = *(_QWORD **)(a1 + 368);
    if (v5)
    {
      v6 = *(char **)(a1 + 400);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 408);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 392);
            v6 = *(char **)(a1 + 400);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 392) = v16;
          *(_QWORD *)(a1 + 400) = v9;
          *(_QWORD *)(a1 + 408) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 400) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7DB58F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  __int128 *v44;
  __int128 v45;
  double var0;
  uint64_t v47;
  int64_t v48;
  _BOOL4 var4;
  BOOL var5;
  double v51;
  int v52;
  int v53;
  unint64_t var3;
  __int128 *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t **v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  double v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  unint64_t v104;
  uint64_t **v105;
  __int128 v106;
  char *v107;
  double v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  id *location;
  __int128 *v113;
  id v114;
  uint64_t v115;
  int64_t v116;
  double **v117;
  char v118;
  BOOL v119;
  int64_t v120;
  void **v121;
  uint64_t v122;
  HDRawQuantitySample v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    v115 = a1 + 120;
    location = (id *)(a1 + 88);
    v111 = (_QWORD *)(a1 + 336);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsSleepStages>]");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "handleFailureInFunction:file:lineNumber:description:", v110, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v108 = *(double *)(a1 + 56);
      }
      v5 = v108;
      if (v108 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      v113 = (__int128 *)v6;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v123.var0 = a1;
        v37 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v37;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*,false>((uint64_t)v113, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*,false>(v38, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v114 = 0;
      if (v113 == v7)
      {
LABEL_109:
        v92 = *(_QWORD **)(a1 + 328);
        if (v92 != v111)
        {
          do
          {
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v111);
        }
        *(double *)(a1 + 56) = v25;

        if (v113)
          operator delete(v113);
        goto LABEL_128;
      }
      v116 = 0;
      v43 = 0;
      v44 = v113;
      while (2)
      {
        v45 = v44[1];
        *(_OWORD *)&v123.var0 = *v44;
        *(_OWORD *)&v123.var2 = v45;
        *(_QWORD *)&v123.var4 = *((_QWORD *)v44 + 4);
        var0 = v123.var0;
        v47 = v45;
        if (*(double *)&v45 - v123.var1 - (v25 - v123.var1) < 0.01)
        {
          v48 = 0;
          var4 = 0;
          var5 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!v123.var4)
            goto LABEL_62;
LABEL_57:
          v119 = var5;
          v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          v52 = *((unsigned __int8 *)v44 + 42);
          v53 = *((unsigned __int8 *)v44 + 41);
          v118 = *((_BYTE *)v44 + 40);
          if (!v123.var4)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            var3 = v123.var3;
            if (v116 == v123.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsSleepStages>::addSample(v115, &v123, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsSleepStages>::addSample(v115, &v123, v52 == 0);
            v52 = 1;
            var3 = v123.var3;
            v116 = v123.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_bundleIdentifierForSourceID(a1, var3);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v114, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (var4)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(double *)v82 = var0;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v120;
                  v82[32] = var4;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v121) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(double *)v88 = var0;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v120;
                *(_BYTE *)(v88 + 32) = var4;
                *(_BYTE *)(v88 + 33) = v119;
                *(_BYTE *)(v88 + 40) = v118;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_canonicalSourceIDForSourceID(a1, var3);
          v79 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsSleepStages>::addSample((uint64_t)v79, &v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - v123.var1 < 0.01)
        {
          v123.var4 = 0;
          goto LABEL_62;
        }
        v48 = v123.var3;
        var5 = v123.var5;
        v123.var2 = v25;
        v51 = v25;
        var4 = v123.var4;
        if (v123.var4)
          goto LABEL_57;
LABEL_62:
        v55 = *(__int128 **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *v44;
          v58 = v44[2];
          v55[1] = v44[1];
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v121) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v121) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (__int128 *)(v63 + 48 * v60);
        v69 = *v44;
        v70 = v44[2];
        v68[1] = v44[1];
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(__int128 *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 3;
        if (v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(unsigned __int8 *)(v6 + 42);
        v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(_QWORD *)(a1 + 96);
        v99 = *(unsigned __int8 *)(v6 + 40);
        v100 = *(double *)v98;
        v123.var1 = v9;
        v123.var2 = v15;
        v123.var3 = v11;
        v123.var4 = v14;
        v123.var5 = v13;
        *(_DWORD *)(&v123.var5 + 1) = *(_DWORD *)(v98 + 34);
        *(_WORD *)(&v123.var5 + 5) = *(_WORD *)(v98 + 38);
        *((double *)&v124 + 1) = v16;
        *(double *)&v125 = v10;
        *((_QWORD *)&v125 + 1) = v40;
        LOBYTE(v126) = v12;
        HIBYTE(v126) = v41;
        v123.var0 = v100;
        *(double *)&v124 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        v101 = v99 != 0;
        v102 = v97 != 0;
        v103 = v96 != 0;
        if (v123.var4)
        {
          HDStatisticsRelative<HDStatisticsSleepStages>::addSample(v115, &v123, v96 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v104 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_canonicalSourceIDForSourceID(a1, v123.var3);
            v105 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsForSource(a1, v104);
            HDStatisticsRelative<HDStatisticsSleepStages>::addSample((uint64_t)v105, &v123, v97 == 0);
          }
          v101 = 1;
          v102 = 1;
          v103 = 1;
        }
        if ((_BYTE)v126)
        {
          LOWORD(v122) = v126;
          v106 = v125;
          v107 = (char *)*v121;
          *(_OWORD *)v107 = v124;
          *((_OWORD *)v107 + 1) = v106;
          *((_QWORD *)v107 + 4) = v122;
          v107[40] = v101;
          v107[41] = v102;
          v107[42] = v103;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7DB6250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsSleepStages>::addSample(uint64_t a1, const HDRawQuantitySample *a2, int a3)
{
  int v3;
  HDStatisticsSleepStages *v4;
  uint64_t v5;
  int v6;

  v3 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v3 = 1;
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_DWORD *)a1)
      {
        v6 = 1;
        goto LABEL_16;
      }
    }
    else if (v3 == 2)
    {
      if (*(_DWORD *)a1 == 2)
      {
        v4 = (HDStatisticsSleepStages *)(a1 + 8);
        a3 = 1;
LABEL_8:
        HDStatisticsSleepStages::addSample(v4, a2, a3);
        return;
      }
      v6 = 2;
LABEL_16:
      *(_DWORD *)a1 = v6;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 40) = xmmword_1B7F54B10;
      *(_QWORD *)(a1 + 56) = 0;
      *(_OWORD *)(a1 + 64) = xmmword_1B7F54B20;
      *(_QWORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 88) = xmmword_1B7F54B30;
      *(_QWORD *)(a1 + 104) = 0;
      *(_OWORD *)(a1 + 112) = xmmword_1B7F54B40;
      *(_QWORD *)(a1 + 128) = 0;
      *(_OWORD *)(a1 + 136) = xmmword_1B7F54B50;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0x7FFFFFFFFFFFFFFFLL;
      v4 = (HDStatisticsSleepStages *)(a1 + 8);
      goto LABEL_8;
    }
  }
  else if (!*(_DWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v4 = (HDStatisticsSleepStages *)(a1 + 8);
    if (!v5)
      goto LABEL_8;
  }
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 336);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 336);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 336) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 328);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 328), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 416), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 456);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7DB6510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 496);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7DB65E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsSleepStages>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xF8uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *((_OWORD *)v9 + 5) = xmmword_1B7F54B10;
    *(_OWORD *)(v9 + 104) = xmmword_1B7F54B20;
    *((_OWORD *)v9 + 8) = xmmword_1B7F54B30;
    *(_OWORD *)(v9 + 152) = xmmword_1B7F54B40;
    *((_OWORD *)v9 + 11) = xmmword_1B7F54B50;
    *((_QWORD *)v9 + 25) = 0x7FFFFFFFFFFFFFFFLL;
    *((_WORD *)v9 + 120) = 0;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 14) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 392);
  v7 = *(char **)(*(_QWORD *)a4 + 400);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 392);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 392);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 400);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 392);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 400);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 392);
      v15 = *(char **)(*(_QWORD *)a4 + 400);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 400);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 400);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 392);
          v25 = *(char **)(*(_QWORD *)a4 + 400);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 400);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 400);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 392);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 392);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 400);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 392);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 400);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 392);
      v41 = *(char **)(*(_QWORD *)a4 + 400);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 400);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 400);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 392);
      v11 = *(char **)(*(_QWORD *)a3 + 400);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 400);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 400);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 392);
      v24 = *(char **)(*(_QWORD *)a3 + 400);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 400);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 400);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 392);
            v31 = *(char **)(*(_QWORD *)a3 + 400);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 400);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 400);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 392);
    v14 = *(char **)(*(_QWORD *)a5 + 400);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 400);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 400);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 392);
        v23 = *(char **)(*(_QWORD *)a5 + 400);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 400);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 400);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 392);
            v32 = *(char **)(*(_QWORD *)a5 + 400);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 400);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 400);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 392);
    v16 = *(char **)(*(_QWORD *)a6 + 400);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 400);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 400);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 392);
        v25 = *(char **)(*(_QWORD *)a6 + 400);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 400);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 400);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 392);
            v34 = *(char **)(*(_QWORD *)a6 + 400);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 400);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 400);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 392);
                v43 = *(char **)(*(_QWORD *)a6 + 400);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 400);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 400);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D09770;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D09770;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_addStatisticsFromFinishedBucket<HDStatisticsSleepStages>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>> const&)::{lambda(HDStatisticsRelative<HDStatisticsSleepStages> const&)#1}>,HDStatisticsSleepStages const& ()(HDStatisticsRelative<HDStatisticsSleepStages> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 688))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 688))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7DB9120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 664);
      v7 = *(_QWORD *)(a1 + 656);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsSleepStages>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7DB9328(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsSleepStages>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  unint64_t v65;
  char v66;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      v65 = 0;
      v21 = 0;
      v66 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (v19 >= 0.01)
      goto LABEL_27;
LABEL_25:
    v21 = v12;
    v28 = v14;
    v22 = v15;
    v18 = v16;
    if (!v21)
      return;
    goto LABEL_56;
  }
  if (v19 < 0.01)
    goto LABEL_25;
  if (v20 < 0.01)
    goto LABEL_10;
LABEL_27:
  v22 = v15;
  v65 = v14;
  v21 = v12;
  v66 = v13;
  v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    v13 = v66;
    v28 = v65;
    if (!v21)
      return;
    goto LABEL_56;
  }
LABEL_11:
  v63 = v16;
  v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 360, v14, v14);
  v23 = *(_QWORD *)(a1 + 112);
  if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v24 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v24 = v63;
  v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    v26 = *(double *)(a1 + 8);
    if (v63 >= v26)
      v26 = v63;
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    v27 = *(double *)(a1 + 16);
    if (v27 >= v64)
      v27 = v64;
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_mergeThroughTime(v5, v24);
      v24 = v63;
      v25 = v64;
      v23 = *(_QWORD *)(a1 + 112);
    }
  }
LABEL_31:
  v32 = *(_QWORD *)(a1 + 120);
  if (v23 >= v32)
  {
    v34 = *(_QWORD *)(a1 + 104);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x2AAAAAAAAAAAAAALL)
      v38 = 0x555555555555555;
    else
      v38 = v36;
    if (v38)
    {
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      v24 = v63;
      v25 = v64;
    }
    else
    {
      v39 = 0;
    }
    v40 = v38 + 48 * v35;
    v41 = v38 + 48 * v39;
    *(_QWORD *)v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(_QWORD *)(v40 + 24) = v14;
    *(_BYTE *)(v40 + 32) = v12;
    *(_BYTE *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(_BYTE *)(v40 + 42) = 0;
    v33 = v40 + 48;
    v43 = *(char **)(a1 + 104);
    v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      v13 = v66;
      v28 = v65;
    }
    else
    {
      v13 = v66;
      v28 = v65;
      do
      {
        v44 = *((_OWORD *)v42 - 3);
        v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      v42 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v40;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 24) = v14;
    *(_BYTE *)(v23 + 32) = v12;
    *(_BYTE *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    v33 = v23 + 48;
    *(_BYTE *)(v23 + 42) = 0;
    v13 = v66;
    v28 = v65;
  }
  *(_QWORD *)(a1 + 112) = v33;
  if (!*(_BYTE *)(a1 + 328) || *(double *)(a1 + 304) <= v7)
  {
    *(_QWORD *)(a1 + 296) = v17;
    *(double *)(a1 + 304) = v7;
    *(double *)(a1 + 312) = v8;
    *(_QWORD *)(a1 + 320) = v9;
    *(_BYTE *)(a1 + 328) = v10;
    *(_BYTE *)(a1 + 329) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_canonicalSourceIDForSourceID(v5, v14),
         v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsSleepStages>>::_statisticsForSource(v5, v46),
         !*((_BYTE *)v47 + 200))
     || *((double *)v47 + 22) <= v7))
  {
    v47[21] = v17;
    *((double *)v47 + 22) = v7;
    *((double *)v47 + 23) = v8;
    v47[24] = v9;
    *((_BYTE *)v47 + 200) = v10;
    *((_BYTE *)v47 + 201) = v11;
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  v48 = *(_QWORD *)(a1 + 552);
  v49 = *(_QWORD *)(a1 + 560);
  if (v48 >= v49)
  {
    v51 = *(_QWORD *)(a1 + 544);
    v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x333333333333333)
      v55 = 0x666666666666666;
    else
      v55 = v53;
    if (v55)
      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    else
      v56 = 0;
    v57 = v55 + 40 * v52;
    v58 = v55 + 40 * v56;
    *(_QWORD *)v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(_QWORD *)(v57 + 24) = v28;
    *(_BYTE *)(v57 + 32) = v21;
    *(_BYTE *)(v57 + 33) = v13;
    v50 = v57 + 40;
    v59 = *(char **)(a1 + 552);
    v60 = *(char **)(a1 + 544);
    if (v59 != v60)
    {
      do
      {
        v61 = *(_OWORD *)(v59 - 40);
        v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      v59 = *(char **)(a1 + 544);
    }
    *(_QWORD *)(a1 + 544) = v57;
    *(_QWORD *)(a1 + 552) = v50;
    *(_QWORD *)(a1 + 560) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(_QWORD *)(v48 + 24) = v28;
    *(_BYTE *)(v48 + 32) = v21;
    v50 = v48 + 40;
    *(_BYTE *)(v48 + 33) = v13;
  }
  *(_QWORD *)(a1 + 552) = v50;
}

